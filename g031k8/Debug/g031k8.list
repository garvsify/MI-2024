
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d88c  0800d88c  0000e88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2fc  0800e2fc  00010458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e2fc  0800e2fc  0000f2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e304  0800e304  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e304  0800e304  0000f304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e308  0800e308  0000f308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000458  20000000  0800e30c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000458  0800e764  00010458  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  0800e764  00010cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212b6  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000473a  00000000  00000000  00031736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001278  00000000  00000000  00037650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015b42  00000000  00000000  000388c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000848d  00000000  00000000  0004e40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00056897  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054e0  00000000  00000000  000568dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000458 	.word	0x20000458
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d874 	.word	0x0800d874

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000045c 	.word	0x2000045c
 8000100:	0800d874 	.word	0x0800d874

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800d88c 	.word	0x0800d88c
 8000500:	20000484 	.word	0x20000484
 8000504:	20000000 	.word	0x20000000
 8000508:	0800d894 	.word	0x0800d894
 800050c:	20000008 	.word	0x20000008
 8000510:	0800d89c 	.word	0x0800d89c
 8000514:	20000010 	.word	0x20000010
 8000518:	0800d8a4 	.word	0x0800d8a4
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8fd 	bl	80007aa <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f912 	bl	80007fc <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f90d 	bl	800081a <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f908 	bl	8000838 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f903 	bl	8000856 <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa7b 	bl	8000b5c <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa95 	bl	8000ba6 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 faa3 	bl	8000bd8 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 faab 	bl	8000bfe <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fab9 	bl	8000c30 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000438 	.word	0x20000438
 80006cc:	20000c80 	.word	0x20000c80
 80006d0:	20000c5c 	.word	0x20000c5c
 80006d4:	20000430 	.word	0x20000430
 80006d8:	20000434 	.word	0x20000434
 80006dc:	2000043c 	.word	0x2000043c
 80006e0:	20000440 	.word	0x20000440
 80006e4:	200004bc 	.word	0x200004bc
 80006e8:	20000494 	.word	0x20000494
 80006ec:	200004c4 	.word	0x200004c4
 80006f0:	200004c5 	.word	0x200004c5
 80006f4:	200004c6 	.word	0x200004c6
 80006f8:	200004c7 	.word	0x200004c7
 80006fc:	200004c8 	.word	0x200004c8

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	891b      	ldrh	r3, [r3, #8]
 800076a:	b29b      	uxth	r3, r3
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a9b      	ldrb	r3, [r3, #10]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	b29b      	uxth	r3, r3
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000794:	b29b      	uxth	r3, r3
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	711a      	strb	r2, [r3, #4]

	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 80007b4:	210f      	movs	r1, #15
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007c4:	d803      	bhi.n	80007ce <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	719a      	strb	r2, [r3, #6]
 80007cc:	e011      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b55      	cmp	r3, #85	@ 0x55
 80007d6:	d803      	bhi.n	80007e0 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2201      	movs	r2, #1
 80007dc:	719a      	strb	r2, [r3, #6]
 80007de:	e008      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db02      	blt.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2202      	movs	r2, #2
 80007f0:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b004      	add	sp, #16
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	885b      	ldrh	r3, [r3, #2]
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	729a      	strb	r2, [r3, #10]

	return 1;
 800082e:	2301      	movs	r3, #1
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	88db      	ldrh	r3, [r3, #6]
 8000846:	b29a      	uxth	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	819a      	strh	r2, [r3, #12]

	return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}

08000856 <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	891b      	ldrh	r3, [r3, #8]
 8000864:	b29a      	uxth	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 8000886:	2317      	movs	r3, #23
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e020      	b.n	80008d2 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000890:	2117      	movs	r1, #23
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da06      	bge.n	80008b0 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	227f      	movs	r2, #127	@ 0x7f
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e00a      	b.n	80008c6 <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 80008b0:	2117      	movs	r1, #23
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	68f9      	ldr	r1, [r7, #12]
 80008c0:	18cb      	adds	r3, r1, r3
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80008c6:	2117      	movs	r1, #23
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	3201      	adds	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	2317      	movs	r3, #23
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9d9      	bls.n	8000890 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b088      	sub	sp, #32
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008f8:	2316      	movs	r3, #22
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	231f      	movs	r3, #31
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e02c      	b.n	8000964 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 800090a:	211f      	movs	r1, #31
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	2016      	movs	r0, #22
 8000918:	183b      	adds	r3, r7, r0
 800091a:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 800091c:	183b      	adds	r3, r7, r0
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e011      	b.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000934:	2216      	movs	r2, #22
 8000936:	18bb      	adds	r3, r7, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2bff      	cmp	r3, #255	@ 0xff
 800093e:	d004      	beq.n	800094a <Read_and_Interpret_Misc_From_Flash+0x64>
 8000940:	18bb      	adds	r3, r7, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d106      	bne.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 800094a:	231f      	movs	r3, #31
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000958:	211f      	movs	r1, #31
 800095a:	187b      	adds	r3, r7, r1
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	187b      	adds	r3, r7, r1
 8000960:	3201      	adds	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	231f      	movs	r3, #31
 8000966:	18fa      	adds	r2, r7, r3
 8000968:	2128      	movs	r1, #40	@ 0x28
 800096a:	187b      	adds	r3, r7, r1
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3ca      	bcc.n	800090a <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	2116      	movs	r1, #22
 8000980:	187b      	adds	r3, r7, r1
 8000982:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0018      	movs	r0, r3
 8000994:	f005 fd26 	bl	80063e4 <Clear_Status_Bit>
 8000998:	e00f      	b.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 800099a:	2216      	movs	r2, #22
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d004      	beq.n	80009b0 <Read_and_Interpret_Misc_From_Flash+0xca>
 80009a6:	18bb      	adds	r3, r7, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2bff      	cmp	r3, #255	@ 0xff
 80009ae:	d104      	bne.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f005 fd03 	bl	80063c0 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 80009ba:	2328      	movs	r3, #40	@ 0x28
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	2116      	movs	r1, #22
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d107      	bne.n	80009e8 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fced 	bl	80063c0 <Set_Status_Bit>
 80009e6:	e011      	b.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 80009e8:	2216      	movs	r2, #22
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <Read_and_Interpret_Misc_From_Flash+0x118>
 80009f4:	18bb      	adds	r3, r7, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2bff      	cmp	r3, #255	@ 0xff
 80009fc:	d106      	bne.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	00da      	lsls	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 fcec 	bl	80063e4 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000a0c:	2328      	movs	r3, #40	@ 0x28
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3302      	adds	r3, #2
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	2116      	movs	r1, #22
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d908      	bls.n	8000a3c <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000a2a:	2117      	movs	r1, #23
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e005      	b.n	8000a48 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000a3c:	2316      	movs	r3, #22
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e03c      	b.n	8000ae4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a6a:	2117      	movs	r1, #23
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d112      	bne.n	8000aa2 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	001a      	movs	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f7ff fe30 	bl	8000700 <Convert_All_Preset_Values>
 8000aa0:	e01a      	b.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000aa2:	2117      	movs	r1, #23
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d111      	bne.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	001a      	movs	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f7ff fe14 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000ad8:	2117      	movs	r1, #23
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	3201      	adds	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	2317      	movs	r3, #23
 8000ae6:	18fa      	adds	r2, r7, r3
 8000ae8:	2320      	movs	r3, #32
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3ba      	bcc.n	8000a6a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f7ff feb2 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000b12:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f7ff feac 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f7ff fea6 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0010      	movs	r0, r2
 8000b30:	f7ff fea0 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800f800 	.word	0x0800f800
 8000b44:	20000008 	.word	0x20000008
 8000b48:	0800f808 	.word	0x0800f808
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	0800f810 	.word	0x0800f810
 8000b54:	20000018 	.word	0x20000018
 8000b58:	0800f818 	.word	0x0800f818

08000b5c <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b6e:	d803      	bhi.n	8000b78 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	719a      	strb	r2, [r3, #6]
 8000b76:	e011      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b55      	cmp	r3, #85	@ 0x55
 8000b80:	d803      	bhi.n	8000b8a <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2201      	movs	r2, #1
 8000b86:	719a      	strb	r2, [r3, #6]
 8000b88:	e008      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db02      	blt.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	210e      	movs	r1, #14
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	8812      	ldrh	r2, [r2, #0]
 8000bc2:	00d2      	lsls	r2, r2, #3
 8000bc4:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	811a      	strh	r2, [r3, #8]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	729a      	strb	r2, [r3, #10]

	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000c08:	210f      	movs	r1, #15
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	18db      	adds	r3, r3, r3
 8000c1a:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	819a      	strh	r2, [r3, #12]

	return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b004      	add	sp, #16
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c82:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000438 	.word	0x20000438
 8000c94:	200004c4 	.word	0x200004c4

08000c98 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca8:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000cb6:	705a      	strb	r2, [r3, #1]

	return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	20000430 	.word	0x20000430
 8000cc8:	200004c4 	.word	0x200004c4

08000ccc <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cdc:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000cea:	709a      	strb	r2, [r3, #2]

	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000434 	.word	0x20000434
 8000cfc:	200004c4 	.word	0x200004c4

08000d00 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d10:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000d1e:	70da      	strb	r2, [r3, #3]

	return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	2000043c 	.word	0x2000043c
 8000d30:	200004c4 	.word	0x200004c4

08000d34 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d44:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000d52:	711a      	strb	r2, [r3, #4]

	return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000440 	.word	0x20000440
 8000d64:	200004c4 	.word	0x200004c4

08000d68 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d84:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d94:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da4:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db4:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]

	return 1;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000438 	.word	0x20000438
 8000dc8:	20000430 	.word	0x20000430
 8000dcc:	20000434 	.word	0x20000434
 8000dd0:	2000043c 	.word	0x2000043c
 8000dd4:	20000440 	.word	0x20000440

08000dd8 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	240f      	movs	r4, #15
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	1c02      	adds	r2, r0, #0
 8000dea:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8000dec:	2117      	movs	r1, #23
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	18d3      	adds	r3, r2, r3
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fc9c 	bl	8000752 <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e22:	2404      	movs	r4, #4
 8000e24:	9400      	str	r4, [sp, #0]
 8000e26:	f7ff fe14 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b007      	add	sp, #28
 8000e32:	bd90      	pop	{r4, r7, pc}

08000e34 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	1cfb      	adds	r3, r7, #3
 8000e40:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d114      	bne.n	8000e74 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <set_LED_to_state+0x8c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d026      	beq.n	8000ea2 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e5e:	2296      	movs	r2, #150	@ 0x96
 8000e60:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <set_LED_to_state+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	e016      	b.n	8000ea2 <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	1cfa      	adds	r2, r7, #3
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d00f      	beq.n	8000ea2 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e8c:	2296      	movs	r2, #150	@ 0x96
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <set_LED_to_state+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1cfa      	adds	r2, r7, #3
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]

	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000448 	.word	0x20000448
 8000ec4:	200005e0 	.word	0x200005e0
 8000ec8:	20000020 	.word	0x20000020
 8000ecc:	200004c9 	.word	0x200004c9

08000ed0 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000ed8:	210f      	movs	r1, #15
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	187a      	adds	r2, r7, r1
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	09d2      	lsrs	r2, r2, #7
 8000eea:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000ef8:	2300      	movs	r3, #0
	}
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	09d2      	lsrs	r2, r2, #7
 8000f1c:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000f2a:	2301      	movs	r3, #1
	}
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	220c      	movs	r2, #12
 8000f42:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	200e      	movs	r0, #14
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	0912      	lsrs	r2, r2, #4
 8000f50:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f52:	183a      	adds	r2, r7, r0
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d101      	bne.n	8000f62 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f62:	2300      	movs	r3, #0
	}
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000f74:	210f      	movs	r1, #15
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	220b      	movs	r2, #11
 8000f7a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	200e      	movs	r0, #14
 8000f84:	183b      	adds	r3, r7, r0
 8000f86:	0912      	lsrs	r2, r2, #4
 8000f88:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f8a:	183a      	adds	r2, r7, r0
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d101      	bne.n	8000f9a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f9a:	2300      	movs	r3, #0
	}
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b77      	cmp	r3, #119	@ 0x77
 8000fb4:	d91d      	bls.n	8000ff2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b79      	cmp	r3, #121	@ 0x79
 8000fbe:	d101      	bne.n	8000fc4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e017      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fcc:	d101      	bne.n	8000fd2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e010      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fda:	d101      	bne.n	8000fe0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e009      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b7c      	cmp	r3, #124	@ 0x7c
 8000fe8:	d101      	bne.n	8000fee <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e002      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ff2:	2300      	movs	r3, #0
	}
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b77      	cmp	r3, #119	@ 0x77
 800100c:	d901      	bls.n	8001012 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 800100e:	2300      	movs	r3, #0
 8001010:	e023      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b14      	cmp	r3, #20
 800101a:	d101      	bne.n	8001020 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 800101c:	2301      	movs	r3, #1
 800101e:	e01c      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b15      	cmp	r3, #21
 8001028:	d101      	bne.n	800102e <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 800102a:	2301      	movs	r3, #1
 800102c:	e015      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b16      	cmp	r3, #22
 8001036:	d101      	bne.n	800103c <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8001038:	2301      	movs	r3, #1
 800103a:	e00e      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b17      	cmp	r3, #23
 8001044:	d101      	bne.n	800104a <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8001046:	2301      	movs	r3, #1
 8001048:	e007      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b18      	cmp	r3, #24
 8001052:	d101      	bne.n	8001058 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
		}
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b79      	cmp	r3, #121	@ 0x79
 8001074:	d108      	bne.n	8001088 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8001080:	2301      	movs	r3, #1
 8001082:	e031      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001084:	2300      	movs	r3, #0
 8001086:	e02f      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001090:	d10d      	bne.n	80010ae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a4:	d101      	bne.n	80010aa <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e01e      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e01c      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b7c      	cmp	r3, #124	@ 0x7c
 80010b6:	d108      	bne.n	80010ca <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e010      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e00e      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80010d2:	d108      	bne.n	80010e6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 80010de:	2301      	movs	r3, #1
 80010e0:	e002      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 80010e6:	2300      	movs	r3, #0
	}
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8001100:	d101      	bne.n	8001106 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001106:	2300      	movs	r3, #0
	}
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	000a      	movs	r2, r1
 800111a:	1cfb      	adds	r3, r7, #3
 800111c:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	200f      	movs	r0, #15
 8001126:	183b      	adds	r3, r7, r0
 8001128:	210f      	movs	r1, #15
 800112a:	400a      	ands	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800112e:	210e      	movs	r1, #14
 8001130:	187b      	adds	r3, r7, r1
 8001132:	1cfa      	adds	r2, r7, #3
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001138:	183a      	adds	r2, r7, r0
 800113a:	187b      	adds	r3, r7, r1
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d101      	bne.n	8001148 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001148:	2300      	movs	r3, #0
	}
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800115a:	230e      	movs	r3, #14
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001162:	230d      	movs	r3, #13
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e011      	b.n	8001190 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800116c:	200d      	movs	r0, #13
 800116e:	183b      	adds	r3, r7, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	0019      	movs	r1, r3
 800117a:	220e      	movs	r2, #14
 800117c:	18bb      	adds	r3, r7, r2
 800117e:	18ba      	adds	r2, r7, r2
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	188a      	adds	r2, r1, r2
 8001184:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001186:	183b      	adds	r3, r7, r0
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	183b      	adds	r3, r7, r0
 800118c:	3201      	adds	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	230d      	movs	r3, #13
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b09      	cmp	r3, #9
 8001198:	d9e8      	bls.n	800116c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800119a:	230e      	movs	r3, #14
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 80011a8:	2300      	movs	r3, #0
	}
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e00a      	b.n	80011da <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 80011c4:	200f      	movs	r0, #15
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	3201      	adds	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d9ef      	bls.n	80011c4 <Clear_Data_Buffer+0x12>
	}

	return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	000a      	movs	r2, r1
 80011f8:	1cfb      	adds	r3, r7, #3
 80011fa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	1cfa      	adds	r2, r7, #3
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d901      	bls.n	800120e <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800120e:	2300      	movs	r3, #0
	}
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}

08001218 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2bf8      	cmp	r3, #248	@ 0xf8
 8001228:	d101      	bne.n	800122e <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 800122a:	2301      	movs	r3, #1
 800122c:	e023      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2bfa      	cmp	r3, #250	@ 0xfa
 8001236:	d101      	bne.n	800123c <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001238:	2301      	movs	r3, #1
 800123a:	e01c      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2bfb      	cmp	r3, #251	@ 0xfb
 8001244:	d101      	bne.n	800124a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001246:	2301      	movs	r3, #1
 8001248:	e015      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2bfc      	cmp	r3, #252	@ 0xfc
 8001252:	d101      	bne.n	8001258 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001254:	2301      	movs	r3, #1
 8001256:	e00e      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001260:	d101      	bne.n	8001266 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001262:	2301      	movs	r3, #1
 8001264:	e007      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2bff      	cmp	r3, #255	@ 0xff
 800126e:	d101      	bne.n	8001274 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001274:	2300      	movs	r3, #0
	}
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}

0800127e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800127e:	b5b0      	push	{r4, r5, r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001286:	250f      	movs	r5, #15
 8001288:	197c      	adds	r4, r7, r5
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f005 f880 	bl	8006398 <Get_Status_Bit>
 8001298:	0003      	movs	r3, r0
 800129a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800129c:	197b      	adds	r3, r7, r5
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 80012a8:	2300      	movs	r3, #0
	}
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}

080012b2 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	005a      	lsls	r2, r3, #1
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f005 f88d 	bl	80063e4 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	009a      	lsls	r2, r3, #2
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f005 f886 	bl	80063e4 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

	return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <Reset_All_Controllers+0x9c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <Reset_All_Controllers+0x9c>)
 80012fa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <Reset_All_Controllers+0xa0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <Reset_All_Controllers+0xa0>)
 8001304:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <Reset_All_Controllers+0xa4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <Reset_All_Controllers+0xa4>)
 800130e:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001318:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <Reset_All_Controllers+0xac>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <Reset_All_Controllers+0xac>)
 8001322:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <Reset_All_Controllers+0x9c>)
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <Reset_All_Controllers+0xa0>)
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <Reset_All_Controllers+0xa4>)
 8001332:	2202      	movs	r2, #2
 8001334:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <Reset_All_Controllers+0xac>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 8001342:	230e      	movs	r3, #14
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	223f      	movs	r2, #63	@ 0x3f
 8001348:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e00c      	b.n	800136e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001354:	200f      	movs	r0, #15
 8001356:	183b      	adds	r3, r7, r0
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <Reset_All_Controllers+0xb0>)
 800135c:	210e      	movs	r1, #14
 800135e:	1879      	adds	r1, r7, r1
 8001360:	7809      	ldrb	r1, [r1, #0]
 8001362:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001364:	183b      	adds	r3, r7, r0
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	183b      	adds	r3, r7, r0
 800136a:	3201      	adds	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d9ed      	bls.n	8001354 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000438 	.word	0x20000438
 8001388:	20000430 	.word	0x20000430
 800138c:	20000434 	.word	0x20000434
 8001390:	2000043c 	.word	0x2000043c
 8001394:	20000440 	.word	0x20000440
 8001398:	200004c4 	.word	0x200004c4

0800139c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013a8:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <Set_Local_Control+0x60>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <Set_Local_Control+0x60>)
 80013b2:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <Set_Local_Control+0x64>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <Set_Local_Control+0x64>)
 80013bc:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <Set_Local_Control+0x68>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <Set_Local_Control+0x68>)
 80013c6:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <Set_Local_Control+0x6c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <Set_Local_Control+0x6c>)
 80013d0:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Local_Control+0x60>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <Set_Local_Control+0x64>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <Set_Local_Control+0x68>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <Set_Local_Control+0x6c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]

	return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000438 	.word	0x20000438
 80013fc:	20000430 	.word	0x20000430
 8001400:	20000434 	.word	0x20000434
 8001404:	2000043c 	.word	0x2000043c
 8001408:	20000440 	.word	0x20000440

0800140c <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	00da      	lsls	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f004 ffe1 	bl	80063e4 <Clear_Status_Bit>

	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}

0800142c <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f004 ffbf 	bl	80063c0 <Set_Status_Bit>

	return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}

0800144c <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001450:	4904      	ldr	r1, [pc, #16]	@ (8001464 <Start_UART_Receive+0x18>)
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <Start_UART_Receive+0x1c>)
 8001454:	2201      	movs	r2, #1
 8001456:	0018      	movs	r0, r3
 8001458:	f00a feb4 	bl	800c1c4 <HAL_UART_Receive_DMA>

	return 1;
 800145c:	2301      	movs	r3, #1
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200004dc 	.word	0x200004dc
 8001468:	20000a48 	.word	0x20000a48

0800146c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	000a      	movs	r2, r1
 8001476:	1cfb      	adds	r3, r7, #3
 8001478:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 800148a:	2117      	movs	r1, #23
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 800149a:	1cfb      	adds	r3, r7, #3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 80014a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <Pot_Check+0x1ec>)
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 80014a6:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <Pot_Check+0x1f0>)
 80014a8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 80014aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001660 <Pot_Check+0x1f4>)
 80014ac:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2246      	movs	r2, #70	@ 0x46
 80014b6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <Pot_Check+0x1f8>)
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e04e      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 80014be:	1cfb      	adds	r3, r7, #3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10f      	bne.n	80014e6 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 80014c6:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <Pot_Check+0x1fc>)
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 80014ca:	4b68      	ldr	r3, [pc, #416]	@ (800166c <Pot_Check+0x200>)
 80014cc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 80014ce:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <Pot_Check+0x204>)
 80014d0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3302      	adds	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 80014d8:	2317      	movs	r3, #23
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2246      	movs	r2, #70	@ 0x46
 80014de:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 80014e0:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <Pot_Check+0x208>)
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e03a      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d10f      	bne.n	800150e <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 80014ee:	4b62      	ldr	r3, [pc, #392]	@ (8001678 <Pot_Check+0x20c>)
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80014f2:	4b62      	ldr	r3, [pc, #392]	@ (800167c <Pot_Check+0x210>)
 80014f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80014f6:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <Pot_Check+0x214>)
 80014f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2246      	movs	r2, #70	@ 0x46
 8001506:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001508:	4b5e      	ldr	r3, [pc, #376]	@ (8001684 <Pot_Check+0x218>)
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e026      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 800150e:	1cfb      	adds	r3, r7, #3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d10f      	bne.n	8001536 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001516:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <Pot_Check+0x21c>)
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 800151a:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <Pot_Check+0x220>)
 800151c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800151e:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <Pot_Check+0x224>)
 8001520:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3306      	adds	r3, #6
 8001526:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001528:	2317      	movs	r3, #23
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2246      	movs	r2, #70	@ 0x46
 800152e:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001530:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <Pot_Check+0x228>)
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	e012      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d10e      	bne.n	800155c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800153e:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <Pot_Check+0x22c>)
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001542:	4b56      	ldr	r3, [pc, #344]	@ (800169c <Pot_Check+0x230>)
 8001544:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <Pot_Check+0x234>)
 8001548:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3308      	adds	r3, #8
 800154e:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001550:	2317      	movs	r3, #23
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2246      	movs	r2, #70	@ 0x46
 8001556:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001558:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <Pot_Check+0x238>)
 800155a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	881a      	ldrh	r2, [r3, #0]
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e066      	b.n	800164c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10b      	bne.n	80015a0 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e055      	b.n	800164c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d150      	bne.n	800164c <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 80015b0:	200a      	movs	r0, #10
 80015b2:	183b      	adds	r3, r7, r0
 80015b4:	2200      	movs	r2, #0
 80015b6:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d907      	bls.n	80015d4 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	8819      	ldrh	r1, [r3, #0]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	183b      	adds	r3, r7, r0
 80015ce:	1a8a      	subs	r2, r1, r2
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	e00d      	b.n	80015f0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d907      	bls.n	80015f0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	1a8a      	subs	r2, r1, r2
 80015ee:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80015f0:	2317      	movs	r3, #23
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	220a      	movs	r2, #10
 80015fa:	18ba      	adds	r2, r7, r2
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d924      	bls.n	800164c <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e018      	b.n	800164c <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <Pot_Check+0x23c>)
 8001630:	2120      	movs	r1, #32
 8001632:	0018      	movs	r0, r3
 8001634:	f004 fed6 	bl	80063e4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <Pot_Check+0x23c>)
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	0018      	movs	r0, r3
 800163e:	f004 fed1 	bl	80063e4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <Pot_Check+0x23c>)
 8001644:	2108      	movs	r1, #8
 8001646:	0018      	movs	r0, r3
 8001648:	f004 fecc 	bl	80063e4 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b00a      	add	sp, #40	@ 0x28
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	200004e4 	.word	0x200004e4
 800165c:	200004e6 	.word	0x200004e6
 8001660:	200004dd 	.word	0x200004dd
 8001664:	20000438 	.word	0x20000438
 8001668:	200004e8 	.word	0x200004e8
 800166c:	200004ea 	.word	0x200004ea
 8001670:	200004de 	.word	0x200004de
 8001674:	20000430 	.word	0x20000430
 8001678:	200004ec 	.word	0x200004ec
 800167c:	200004ee 	.word	0x200004ee
 8001680:	200004df 	.word	0x200004df
 8001684:	20000434 	.word	0x20000434
 8001688:	200004f0 	.word	0x200004f0
 800168c:	200004f2 	.word	0x200004f2
 8001690:	200004e0 	.word	0x200004e0
 8001694:	2000043c 	.word	0x2000043c
 8001698:	200004f4 	.word	0x200004f4
 800169c:	200004f6 	.word	0x200004f6
 80016a0:	200004e1 	.word	0x200004e1
 80016a4:	20000440 	.word	0x20000440
 80016a8:	20000c3c 	.word	0x20000c3c

080016ac <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80016b4:	250f      	movs	r5, #15
 80016b6:	197c      	adds	r4, r7, r5
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	23a0      	movs	r3, #160	@ 0xa0
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f006 ff0e 	bl	80084e4 <HAL_GPIO_ReadPin>
 80016c8:	0003      	movs	r3, r0
 80016ca:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10a      	bne.n	80016ea <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01e      	beq.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e017      	b.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0e      	cmp	r3, #14
 80016f0:	d013      	beq.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d109      	bne.n	800170e <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 8001704:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e005      	b.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001718:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e006      	b.n	8001738 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b0e      	cmp	r3, #14
 8001730:	d102      	bne.n	8001738 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bdb0      	pop	{r4, r5, r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	20000024 	.word	0x20000024
 8001748:	200004f8 	.word	0x200004f8

0800174c <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b093      	sub	sp, #76	@ 0x4c
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	2410      	movs	r4, #16
 8001754:	193b      	adds	r3, r7, r4
 8001756:	0018      	movs	r0, r3
 8001758:	2338      	movs	r3, #56	@ 0x38
 800175a:	001a      	movs	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	f00c f853 	bl	800d808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001762:	003b      	movs	r3, r7
 8001764:	0018      	movs	r0, r3
 8001766:	2310      	movs	r3, #16
 8001768:	001a      	movs	r2, r3
 800176a:	2100      	movs	r1, #0
 800176c:	f00c f84c 	bl	800d808 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	0018      	movs	r0, r3
 8001776:	f007 fb27 	bl	8008dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	0052      	lsls	r2, r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001788:	0021      	movs	r1, r4
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2240      	movs	r2, #64	@ 0x40
 8001794:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2202      	movs	r2, #2
 800179a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2202      	movs	r2, #2
 80017a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2208      	movs	r2, #8
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	0292      	lsls	r2, r2, #10
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	22c0      	movs	r2, #192	@ 0xc0
 80017ba:	04d2      	lsls	r2, r2, #19
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2280      	movs	r2, #128	@ 0x80
 80017c2:	0592      	lsls	r2, r2, #22
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	0018      	movs	r0, r3
 80017ca:	f007 fb49 	bl	8008e60 <HAL_RCC_OscConfig>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017d2:	f000 fdcb 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	003b      	movs	r3, r7
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	003b      	movs	r3, r7
 80017de:	2202      	movs	r2, #2
 80017e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	003b      	movs	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	003b      	movs	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ee:	003b      	movs	r3, r7
 80017f0:	2102      	movs	r1, #2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f007 fe4e 	bl	8009494 <HAL_RCC_ClockConfig>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017fc:	f000 fdb6 	bl	800236c <Error_Handler>
  }
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b013      	add	sp, #76	@ 0x4c
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	0018      	movs	r0, r3
 8001812:	230c      	movs	r3, #12
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f00b fff6 	bl	800d808 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800181c:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <MX_ADC1_Init+0x168>)
 800181e:	4a55      	ldr	r2, [pc, #340]	@ (8001974 <MX_ADC1_Init+0x16c>)
 8001820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001822:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001824:	2280      	movs	r2, #128	@ 0x80
 8001826:	05d2      	lsls	r2, r2, #23
 8001828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182a:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <MX_ADC1_Init+0x168>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001830:	4b4f      	ldr	r3, [pc, #316]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001836:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	0392      	lsls	r2, r2, #14
 800183c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800183e:	4b4c      	ldr	r3, [pc, #304]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001840:	2208      	movs	r2, #8
 8001842:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001844:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001846:	2200      	movs	r2, #0
 8001848:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <MX_ADC1_Init+0x168>)
 800184c:	2200      	movs	r2, #0
 800184e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001850:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001852:	2200      	movs	r2, #0
 8001854:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001858:	2205      	movs	r2, #5
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185c:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <MX_ADC1_Init+0x168>)
 800185e:	2220      	movs	r2, #32
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b42      	ldr	r3, [pc, #264]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <MX_ADC1_Init+0x168>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001870:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001872:	222c      	movs	r2, #44	@ 0x2c
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001878:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <MX_ADC1_Init+0x168>)
 800187a:	2200      	movs	r2, #0
 800187c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001880:	2200      	movs	r2, #0
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800188a:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <MX_ADC1_Init+0x168>)
 800188c:	223c      	movs	r2, #60	@ 0x3c
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001892:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001894:	2200      	movs	r2, #0
 8001896:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001898:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <MX_ADC1_Init+0x168>)
 800189a:	0018      	movs	r0, r3
 800189c:	f004 ffd0 	bl	8006840 <HAL_ADC_Init>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80018a4:	f000 fd62 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ba:	1d3a      	adds	r2, r7, #4
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <MX_ADC1_Init+0x168>)
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f005 fb41 	bl	8006f48 <HAL_ADC_ConfigChannel>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80018ca:	f000 fd4f 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <MX_ADC1_Init+0x170>)
 80018d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2204      	movs	r2, #4
 80018d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e0:	1d3a      	adds	r2, r7, #4
 80018e2:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <MX_ADC1_Init+0x168>)
 80018e4:	0011      	movs	r1, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	f005 fb2e 	bl	8006f48 <HAL_ADC_ConfigChannel>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80018f0:	f000 fd3c 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4a21      	ldr	r2, [pc, #132]	@ (800197c <MX_ADC1_Init+0x174>)
 80018f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2208      	movs	r2, #8
 80018fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001906:	1d3a      	adds	r2, r7, #4
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_ADC1_Init+0x168>)
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f005 fb1b 	bl	8006f48 <HAL_ADC_ConfigChannel>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d001      	beq.n	800191a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001916:	f000 fd29 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <MX_ADC1_Init+0x178>)
 800191e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	220c      	movs	r2, #12
 8001924:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	1d3a      	adds	r2, r7, #4
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f005 fb08 	bl	8006f48 <HAL_ADC_ConfigChannel>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800193c:	f000 fd16 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <MX_ADC1_Init+0x17c>)
 8001944:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2210      	movs	r2, #16
 800194a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001952:	1d3a      	adds	r2, r7, #4
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f005 faf5 	bl	8006f48 <HAL_ADC_ConfigChannel>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001962:	f000 fd03 	bl	800236c <Error_Handler>
  }
}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	200004fc 	.word	0x200004fc
 8001974:	40012400 	.word	0x40012400
 8001978:	04000002 	.word	0x04000002
 800197c:	10000010 	.word	0x10000010
 8001980:	14000020 	.word	0x14000020
 8001984:	18000040 	.word	0x18000040

08001988 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	2334      	movs	r3, #52	@ 0x34
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	0018      	movs	r0, r3
 8001994:	231c      	movs	r3, #28
 8001996:	001a      	movs	r2, r3
 8001998:	2100      	movs	r1, #0
 800199a:	f00b ff35 	bl	800d808 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199e:	003b      	movs	r3, r7
 80019a0:	0018      	movs	r0, r3
 80019a2:	2334      	movs	r3, #52	@ 0x34
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f00b ff2e 	bl	800d808 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80019ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ae:	4a3b      	ldr	r2, [pc, #236]	@ (8001a9c <MX_TIM16_Init+0x114>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019c0:	22ff      	movs	r2, #255	@ 0xff
 80019c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f008 f87e 	bl	8009adc <HAL_TIM_Base_Init>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80019e4:	f000 fcc2 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f008 f97c 	bl	8009ce8 <HAL_TIM_OC_Init>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80019f4:	f000 fcba 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019f8:	2134      	movs	r1, #52	@ 0x34
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	22ff      	movs	r2, #255	@ 0xff
 8001a04:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1879      	adds	r1, r7, r1
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f008 ffd0 	bl	800a9d0 <HAL_TIM_OC_ConfigChannel>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001a34:	f000 fc9a 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2108      	movs	r1, #8
 8001a44:	438a      	bics	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a48:	003b      	movs	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a4e:	003b      	movs	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a54:	003b      	movs	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	0192      	lsls	r2, r2, #6
 8001a6c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a6e:	003b      	movs	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a74:	003b      	movs	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7a:	003a      	movs	r2, r7
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f00a f9cb 	bl	800be1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8001a8a:	f000 fc6f 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b014      	add	sp, #80	@ 0x50
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	20000758 	.word	0x20000758
 8001a9c:	40014400 	.word	0x40014400

08001aa0 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	0018      	movs	r0, r3
 8001aac:	2310      	movs	r3, #16
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f00b fea9 	bl	800d808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	2314      	movs	r3, #20
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	0018      	movs	r0, r3
 8001abc:	230c      	movs	r3, #12
 8001abe:	001a      	movs	r2, r3
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f00b fea1 	bl	800d808 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2310      	movs	r3, #16
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f00b fe9a 	bl	800d808 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	05d2      	lsls	r2, r2, #23
 8001ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ade:	223f      	movs	r2, #63	@ 0x3f
 8001ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001aea:	4a2a      	ldr	r2, [pc, #168]	@ (8001b94 <MX_TIM2_Init+0xf4>)
 8001aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f007 ffec 	bl	8009adc <HAL_TIM_Base_Init>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001b08:	f000 fc30 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0152      	lsls	r2, r2, #5
 8001b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b16:	187a      	adds	r2, r7, r1
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f009 f95b 	bl	800add8 <HAL_TIM_ConfigClockSource>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b26:	f000 fc21 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f008 fc87 	bl	800a440 <HAL_TIM_IC_Init>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b36:	f000 fc19 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2114      	movs	r1, #20
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b48:	187a      	adds	r2, r7, r1
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f00a f8fc 	bl	800bd4c <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001b58:	f000 fc08 	bl	800236c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2202      	movs	r2, #2
 8001b60:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2201      	movs	r2, #1
 8001b66:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	220f      	movs	r2, #15
 8001b72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f008 ff88 	bl	800aa90 <HAL_TIM_IC_ConfigChannel>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001b84:	f000 fbf2 	bl	800236c <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b00c      	add	sp, #48	@ 0x30
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000814 	.word	0x20000814
 8001b94:	001fffff 	.word	0x001fffff

08001b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	@ 0x38
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	2328      	movs	r3, #40	@ 0x28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f00b fe2d 	bl	800d808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	231c      	movs	r3, #28
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	2100      	movs	r1, #0
 8001bba:	f00b fe25 	bl	800d808 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	003b      	movs	r3, r7
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	231c      	movs	r3, #28
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f00b fe1e 	bl	800d808 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bcc:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bce:	4a33      	ldr	r2, [pc, #204]	@ (8001c9c <MX_TIM3_Init+0x104>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <MX_TIM3_Init+0x108>)
 8001bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001bde:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001be0:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <MX_TIM3_Init+0x10c>)
 8001be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f007 ff71 	bl	8009adc <HAL_TIM_Base_Init>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bfe:	f000 fbb5 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c02:	2128      	movs	r1, #40	@ 0x28
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	0152      	lsls	r2, r2, #5
 8001c0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c0c:	187a      	adds	r2, r7, r1
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f009 f8e0 	bl	800add8 <HAL_TIM_ConfigClockSource>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c1c:	f000 fba6 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f008 f860 	bl	8009ce8 <HAL_TIM_OC_Init>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c2c:	f000 fb9e 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	211c      	movs	r1, #28
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c3e:	187a      	adds	r2, r7, r1
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f00a f881 	bl	800bd4c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001c4e:	f000 fb8d 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c52:	003b      	movs	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c58:	003b      	movs	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5e:	003b      	movs	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	003b      	movs	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	0039      	movs	r1, r7
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	0018      	movs	r0, r3
 8001c72:	f008 fead 	bl	800a9d0 <HAL_TIM_OC_ConfigChannel>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001c7a:	f000 fb77 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2108      	movs	r1, #8
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b00e      	add	sp, #56	@ 0x38
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	200008d0 	.word	0x200008d0
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	00007fff 	.word	0x00007fff
 8001ca4:	00000fff 	.word	0x00000fff

08001ca8 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09c      	sub	sp, #112	@ 0x70
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	2360      	movs	r3, #96	@ 0x60
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f00b fda5 	bl	800d808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbe:	2354      	movs	r3, #84	@ 0x54
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f00b fd9d 	bl	800d808 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	2338      	movs	r3, #56	@ 0x38
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	231c      	movs	r3, #28
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f00b fd95 	bl	800d808 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2334      	movs	r3, #52	@ 0x34
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f00b fd8e 	bl	800d808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cec:	4b5f      	ldr	r3, [pc, #380]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cee:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <MX_TIM1_Init+0x1c8>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d00:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <MX_TIM1_Init+0x1cc>)
 8001d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	0052      	lsls	r2, r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d0c:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d12:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d18:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f007 fede 	bl	8009adc <HAL_TIM_Base_Init>
 8001d20:	1e03      	subs	r3, r0, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001d24:	f000 fb22 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	2160      	movs	r1, #96	@ 0x60
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0152      	lsls	r2, r2, #5
 8001d30:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d32:	187a      	adds	r2, r7, r1
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d36:	0011      	movs	r1, r2
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f009 f84d 	bl	800add8 <HAL_TIM_ConfigClockSource>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d42:	f000 fb13 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d46:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f008 fa2d 	bl	800a1a8 <HAL_TIM_PWM_Init>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001d52:	f000 fb0b 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2154      	movs	r1, #84	@ 0x54
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6a:	187a      	adds	r2, r7, r1
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f009 ffeb 	bl	800bd4c <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d7a:	f000 faf7 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7e:	2138      	movs	r1, #56	@ 0x38
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2260      	movs	r2, #96	@ 0x60
 8001d84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001daa:	1879      	adds	r1, r7, r1
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	0018      	movs	r0, r3
 8001db2:	f008 ff11 	bl	800abd8 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001dba:	f000 fad7 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	492b      	ldr	r1, [pc, #172]	@ (8001e78 <MX_TIM1_Init+0x1d0>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dce:	2338      	movs	r3, #56	@ 0x38
 8001dd0:	18f9      	adds	r1, r7, r3
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f008 fefe 	bl	800abd8 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001de0:	f000 fac4 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4922      	ldr	r1, [pc, #136]	@ (8001e78 <MX_TIM1_Init+0x1d0>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	0192      	lsls	r2, r2, #6
 8001e18:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0492      	lsls	r2, r2, #18
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e46:	1d3a      	adds	r2, r7, #4
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f009 ffe5 	bl	800be1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001e56:	f000 fa89 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f003 fc47 	bl	80056f0 <HAL_TIM_MspPostInit>

}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b01c      	add	sp, #112	@ 0x70
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	2000098c 	.word	0x2000098c
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	000003ff 	.word	0x000003ff
 8001e78:	fffff7ff 	.word	0xfffff7ff

08001e7c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	@ 0x50
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	2334      	movs	r3, #52	@ 0x34
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	0018      	movs	r0, r3
 8001e88:	231c      	movs	r3, #28
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f00b fcbb 	bl	800d808 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e92:	003b      	movs	r3, r7
 8001e94:	0018      	movs	r0, r3
 8001e96:	2334      	movs	r3, #52	@ 0x34
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f00b fcb4 	bl	800d808 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <MX_TIM17_Init+0x114>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <MX_TIM17_Init+0x118>)
 8001eaa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eb4:	4a38      	ldr	r2, [pc, #224]	@ (8001f98 <MX_TIM17_Init+0x11c>)
 8001eb6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001eb8:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec6:	4b31      	ldr	r3, [pc, #196]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f007 fe04 	bl	8009adc <HAL_TIM_Base_Init>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001ed8:	f000 fa48 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f007 ff02 	bl	8009ce8 <HAL_TIM_OC_Init>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f000 fa40 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001eec:	2134      	movs	r1, #52	@ 0x34
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <MX_TIM17_Init+0x120>)
 8001ef8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f18:	1879      	adds	r1, r7, r1
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f008 fd56 	bl	800a9d0 <HAL_TIM_OC_ConfigChannel>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001f28:	f000 fa20 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2108      	movs	r1, #8
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3c:	003b      	movs	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f42:	003b      	movs	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f48:	003b      	movs	r3, r7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f4e:	003b      	movs	r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	003b      	movs	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5a:	003b      	movs	r3, r7
 8001f5c:	2280      	movs	r2, #128	@ 0x80
 8001f5e:	0192      	lsls	r2, r2, #6
 8001f60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f62:	003b      	movs	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f68:	003b      	movs	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001f6e:	003a      	movs	r2, r7
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f009 ff51 	bl	800be1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001f7e:	f000 f9f5 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b014      	add	sp, #80	@ 0x50
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	2000069c 	.word	0x2000069c
 8001f90:	40014800 	.word	0x40014800
 8001f94:	00007fff 	.word	0x00007fff
 8001f98:	000003ff 	.word	0x000003ff
 8001f9c:	000001ff 	.word	0x000001ff

08001fa0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <MX_LPTIM1_Init+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fb2:	22e0      	movs	r2, #224	@ 0xe0
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fba:	4a14      	ldr	r2, [pc, #80]	@ (800200c <MX_LPTIM1_Init+0x6c>)
 8001fbc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	03d2      	lsls	r2, r2, #15
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f006 fae3 	bl	80085ac <HAL_LPTIM_Init>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001fea:	f000 f9bf 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001fee:	2202      	movs	r2, #2
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	f005 fdb2 	bl	8007b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f005 fdc4 	bl	8007b86 <HAL_NVIC_EnableIRQ>
}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000bcc 	.word	0x20000bcc
 8002008:	40007c00 	.word	0x40007c00
 800200c:	0000ffff 	.word	0x0000ffff

08002010 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	0018      	movs	r0, r3
 800201a:	231c      	movs	r3, #28
 800201c:	001a      	movs	r2, r3
 800201e:	2100      	movs	r1, #0
 8002020:	f00b fbf2 	bl	800d808 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002026:	4a20      	ldr	r2, [pc, #128]	@ (80020a8 <MX_TIM14_Init+0x98>)
 8002028:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <MX_TIM14_Init+0x9c>)
 800202e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <MX_TIM14_Init+0xa0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800203c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800204e:	0018      	movs	r0, r3
 8002050:	f007 fd44 	bl	8009adc <HAL_TIM_Base_Init>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002058:	f000 f988 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800205e:	0018      	movs	r0, r3
 8002060:	f007 fe42 	bl	8009ce8 <HAL_TIM_OC_Init>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002068:	f000 f980 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_TIM14_Init+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002088:	1d39      	adds	r1, r7, #4
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	0018      	movs	r0, r3
 8002090:	f008 fc9e 	bl	800a9d0 <HAL_TIM_OC_ConfigChannel>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002098:	f000 f968 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b008      	add	sp, #32
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200005e0 	.word	0x200005e0
 80020a8:	40002000 	.word	0x40002000
 80020ac:	00007fff 	.word	0x00007fff
 80020b0:	20000020 	.word	0x20000020

080020b4 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020ba:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <MX_USART2_UART_Init+0x60>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020c0:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <MX_USART2_UART_Init+0x64>)
 80020c2:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020d8:	220c      	movs	r2, #12
 80020da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020fc:	0018      	movs	r0, r3
 80020fe:	f009 ff49 	bl	800bf94 <HAL_UART_Init>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002106:	f000 f931 	bl	800236c <Error_Handler>
  }
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000a48 	.word	0x20000a48
 8002114:	40004400 	.word	0x40004400
 8002118:	00007a12 	.word	0x00007a12

0800211c <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_DMA_Init+0x48>)
 8002124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <MX_DMA_Init+0x48>)
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <MX_DMA_Init+0x48>)
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2009      	movs	r0, #9
 8002140:	f005 fd0c 	bl	8007b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002144:	2009      	movs	r0, #9
 8002146:	f005 fd1e 	bl	8007b86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 800214a:	2202      	movs	r2, #2
 800214c:	2102      	movs	r1, #2
 800214e:	200a      	movs	r0, #10
 8002150:	f005 fd04 	bl	8007b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002154:	200a      	movs	r0, #10
 8002156:	f005 fd16 	bl	8007b86 <HAL_NVIC_EnableIRQ>

}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	40021000 	.word	0x40021000

08002168 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08b      	sub	sp, #44	@ 0x2c
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	2414      	movs	r4, #20
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	2314      	movs	r3, #20
 8002176:	001a      	movs	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f00b fb45 	bl	800d808 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b77      	ldr	r3, [pc, #476]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002182:	4b76      	ldr	r3, [pc, #472]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002184:	2104      	movs	r1, #4
 8002186:	430a      	orrs	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
 800218a:	4b74      	ldr	r3, [pc, #464]	@ (800235c <MX_GPIO_Init+0x1f4>)
 800218c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002196:	4b71      	ldr	r3, [pc, #452]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219a:	4b70      	ldr	r3, [pc, #448]	@ (800235c <MX_GPIO_Init+0x1f4>)
 800219c:	2120      	movs	r1, #32
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b2:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ba:	4b68      	ldr	r3, [pc, #416]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ca:	4b64      	ldr	r3, [pc, #400]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021cc:	2102      	movs	r1, #2
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d2:	4b62      	ldr	r3, [pc, #392]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <MX_GPIO_Init+0x1f8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	0018      	movs	r0, r3
 80021e6:	f006 f99a 	bl	800851e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2204      	movs	r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2288      	movs	r2, #136	@ 0x88
 80021f4:	0352      	lsls	r2, r2, #13
 80021f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <MX_GPIO_Init+0x1fc>)
 8002202:	0019      	movs	r1, r3
 8002204:	0010      	movs	r0, r2
 8002206:	f006 f809 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 800220a:	0021      	movs	r1, r4
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	000c      	movs	r4, r1
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2201      	movs	r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002228:	193a      	adds	r2, r7, r4
 800222a:	23a0      	movs	r3, #160	@ 0xa0
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f005 fff3 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002236:	193b      	adds	r3, r7, r4
 8002238:	2240      	movs	r2, #64	@ 0x40
 800223a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	193b      	adds	r3, r7, r4
 800223e:	2201      	movs	r2, #1
 8002240:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	193b      	adds	r3, r7, r4
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	193b      	adds	r3, r7, r4
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800224e:	193b      	adds	r3, r7, r4
 8002250:	4a43      	ldr	r2, [pc, #268]	@ (8002360 <MX_GPIO_Init+0x1f8>)
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f005 ffe1 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	00d2      	lsls	r2, r2, #3
 8002260:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	193b      	adds	r3, r7, r4
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	2201      	movs	r2, #1
 800226c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800226e:	193a      	adds	r2, r7, r4
 8002270:	23a0      	movs	r3, #160	@ 0xa0
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	0011      	movs	r1, r2
 8002276:	0018      	movs	r0, r3
 8002278:	f005 ffd0 	bl	800821c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800227c:	193b      	adds	r3, r7, r4
 800227e:	2240      	movs	r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2201      	movs	r2, #1
 8002286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002294:	193b      	adds	r3, r7, r4
 8002296:	4a34      	ldr	r2, [pc, #208]	@ (8002368 <MX_GPIO_Init+0x200>)
 8002298:	0019      	movs	r1, r3
 800229a:	0010      	movs	r0, r2
 800229c:	f005 ffbe 	bl	800821c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	2210      	movs	r2, #16
 80022a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <MX_GPIO_Init+0x200>)
 80022bc:	0019      	movs	r1, r3
 80022be:	0010      	movs	r0, r2
 80022c0:	f005 ffac 	bl	800821c <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80022c4:	0021      	movs	r1, r4
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	22c4      	movs	r2, #196	@ 0xc4
 80022d0:	0392      	lsls	r2, r2, #14
 80022d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80022d4:	000c      	movs	r4, r1
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	2202      	movs	r2, #2
 80022da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <MX_GPIO_Init+0x200>)
 80022e6:	0019      	movs	r1, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	f005 ff97 	bl	800821c <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 80022ee:	0021      	movs	r1, r4
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	0152      	lsls	r2, r2, #5
 80022f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	000c      	movs	r4, r1
 80022fa:	193b      	adds	r3, r7, r4
 80022fc:	2201      	movs	r2, #1
 80022fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	193b      	adds	r3, r7, r4
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	193b      	adds	r3, r7, r4
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800230c:	193a      	adds	r2, r7, r4
 800230e:	23a0      	movs	r3, #160	@ 0xa0
 8002310:	05db      	lsls	r3, r3, #23
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f005 ff81 	bl	800821c <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 800231a:	0021      	movs	r1, r4
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2201      	movs	r2, #1
 8002326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8002334:	187a      	adds	r2, r7, r1
 8002336:	23a0      	movs	r3, #160	@ 0xa0
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f005 ff6d 	bl	800821c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8002342:	2202      	movs	r2, #2
 8002344:	2102      	movs	r1, #2
 8002346:	2007      	movs	r0, #7
 8002348:	f005 fc08 	bl	8007b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800234c:	2007      	movs	r0, #7
 800234e:	f005 fc1a 	bl	8007b86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b00b      	add	sp, #44	@ 0x2c
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	50000800 	.word	0x50000800
 8002364:	50001400 	.word	0x50001400
 8002368:	50000400 	.word	0x50000400

0800236c <Error_Handler>:

void Error_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	e7fd      	b.n	8002374 <Error_Handler+0x8>

08002378 <System_Init>:
  {

  }
}

void System_Init(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800237c:	f004 f870 	bl	8006460 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002380:	f7ff f9e4 	bl	800174c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002384:	f7ff fef0 	bl	8002168 <MX_GPIO_Init>
	MX_DMA_Init();
 8002388:	f7ff fec8 	bl	800211c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800238c:	f7ff fe92 	bl	80020b4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002390:	f7ff fa3a 	bl	8001808 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002394:	f7ff faf8 	bl	8001988 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002398:	f7ff fb82 	bl	8001aa0 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 800239c:	f7ff fbfc 	bl	8001b98 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80023a0:	f7ff fc82 	bl	8001ca8 <MX_TIM1_Init>
	MX_TIM17_Init();
 80023a4:	f7ff fd6a 	bl	8001e7c <MX_TIM17_Init>
	MX_TIM14_Init();
 80023a8:	f7ff fe32 	bl	8002010 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80023ac:	f7ff fdf8 	bl	8001fa0 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <System_Init+0xc0>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f005 f9f0 	bl	8007798 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80023b8:	4a20      	ldr	r2, [pc, #128]	@ (800243c <System_Init+0xc4>)
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <System_Init+0xc8>)
 80023bc:	210e      	movs	r1, #14
 80023be:	0018      	movs	r0, r3
 80023c0:	f008 fe64 	bl	800b08c <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80023c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <System_Init+0xcc>)
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <System_Init+0xc0>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	0018      	movs	r0, r3
 80023cc:	f004 fc10 	bl	8006bf0 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80023d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <System_Init+0xd0>)
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <System_Init+0xd4>)
 80023d4:	2112      	movs	r1, #18
 80023d6:	0018      	movs	r0, r3
 80023d8:	f008 fe58 	bl	800b08c <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 80023dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002450 <System_Init+0xd8>)
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <System_Init+0xd4>)
 80023e0:	210e      	movs	r1, #14
 80023e2:	0018      	movs	r0, r3
 80023e4:	f008 fe52 	bl	800b08c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <System_Init+0xdc>)
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <System_Init+0xe0>)
 80023ec:	2114      	movs	r1, #20
 80023ee:	0018      	movs	r0, r3
 80023f0:	f008 fe4c 	bl	800b08c <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80023f4:	4a19      	ldr	r2, [pc, #100]	@ (800245c <System_Init+0xe4>)
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <System_Init+0xe8>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	0018      	movs	r0, r3
 80023fc:	f009 fe32 	bl	800c064 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002400:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <System_Init+0xec>)
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <System_Init+0xe8>)
 8002404:	2103      	movs	r1, #3
 8002406:	0018      	movs	r0, r3
 8002408:	f009 fe2c 	bl	800c064 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 800240c:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <System_Init+0xf0>)
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <System_Init+0xf4>)
 8002410:	2102      	movs	r1, #2
 8002412:	0018      	movs	r0, r3
 8002414:	f006 faf0 	bl	80089f8 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002418:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <System_Init+0xf8>)
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <System_Init+0xfc>)
 800241c:	2114      	movs	r1, #20
 800241e:	0018      	movs	r0, r3
 8002420:	f008 fe34 	bl	800b08c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <System_Init+0x100>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <System_Init+0x104>)
 8002428:	2114      	movs	r1, #20
 800242a:	0018      	movs	r0, r3
 800242c:	f008 fe2e 	bl	800b08c <HAL_TIM_RegisterCallback>
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	200004fc 	.word	0x200004fc
 800243c:	08002481 	.word	0x08002481
 8002440:	20000758 	.word	0x20000758
 8002444:	080024d5 	.word	0x080024d5
 8002448:	08002569 	.word	0x08002569
 800244c:	20000814 	.word	0x20000814
 8002450:	08002685 	.word	0x08002685
 8002454:	08002791 	.word	0x08002791
 8002458:	200008d0 	.word	0x200008d0
 800245c:	080028cd 	.word	0x080028cd
 8002460:	20000a48 	.word	0x20000a48
 8002464:	080028dd 	.word	0x080028dd
 8002468:	08003cbd 	.word	0x08003cbd
 800246c:	20000bcc 	.word	0x20000bcc
 8002470:	0800439d 	.word	0x0800439d
 8002474:	2000069c 	.word	0x2000069c
 8002478:	080043ad 	.word	0x080043ad
 800247c:	200005e0 	.word	0x200005e0

08002480 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <TIM16_callback+0x40>)
 800248a:	0018      	movs	r0, r3
 800248c:	f002 fbc8 	bl	8004c20 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <TIM16_callback+0x40>)
 8002492:	2100      	movs	r1, #0
 8002494:	0018      	movs	r0, r3
 8002496:	f002 fbef 	bl	8004c78 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <TIM16_callback+0x44>)
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <TIM16_callback+0x40>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f002 fcdf 	bl	8004e64 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80024a6:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <TIM16_callback+0x48>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	001a      	movs	r2, r3
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <TIM16_callback+0x4c>)
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <TIM16_callback+0x50>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f004 fc29 	bl	8006d08 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	20000c5c 	.word	0x20000c5c
 80024c4:	20000028 	.word	0x20000028
 80024c8:	0800e0ac 	.word	0x0800e0ac
 80024cc:	20000c50 	.word	0x20000c50
 80024d0:	200004fc 	.word	0x200004fc

080024d4 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f004 fca0 	bl	8006e24 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 80024e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002554 <ADC_DMA_conversion_complete_callback+0x80>)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <ADC_DMA_conversion_complete_callback+0x84>)
 80024e8:	0011      	movs	r1, r2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f002 fd50 	bl	8004f90 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 80024f0:	f7fe f816 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 80024f4:	250f      	movs	r5, #15
 80024f6:	197c      	adds	r4, r7, r5
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 80024fa:	2108      	movs	r1, #8
 80024fc:	0018      	movs	r0, r3
 80024fe:	f003 ff4b 	bl	8006398 <Get_Status_Bit>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10a      	bne.n	8002524 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002510:	8a5b      	ldrh	r3, [r3, #18]
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002516:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <ADC_DMA_conversion_complete_callback+0x8c>)
 800251a:	8b5b      	ldrh	r3, [r3, #26]
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002520:	835a      	strh	r2, [r3, #26]
 8002522:	e003      	b.n	800252c <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002526:	0018      	movs	r0, r3
 8002528:	f002 fb44 	bl	8004bb4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 800252e:	0018      	movs	r0, r3
 8002530:	f003 faa4 	bl	8005a7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 8002536:	2110      	movs	r1, #16
 8002538:	0018      	movs	r0, r3
 800253a:	f003 ff2d 	bl	8006398 <Get_Status_Bit>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d104      	bne.n	800254c <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 8002544:	2110      	movs	r1, #16
 8002546:	0018      	movs	r0, r3
 8002548:	f003 ff3a 	bl	80063c0 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	20000c50 	.word	0x20000c50
 8002558:	20000c80 	.word	0x20000c80
 800255c:	20000c3c 	.word	0x20000c3c
 8002560:	20000cc8 	.word	0x20000cc8
 8002564:	20000c5c 	.word	0x20000c5c

08002568 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2100      	movs	r1, #0
 8002574:	0018      	movs	r0, r3
 8002576:	f008 fd05 	bl	800af84 <HAL_TIM_ReadCapturedValue>
 800257a:	0002      	movs	r2, r0
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <TIM2_ch1_IP_capture_callback+0x100>)
 800257e:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <TIM2_ch1_IP_capture_callback+0x100>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b38      	ldr	r3, [pc, #224]	@ (800266c <TIM2_ch1_IP_capture_callback+0x104>)
 800258a:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 800258c:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002596:	f002 f9cd 	bl	8004934 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 800259a:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80025a6:	e05b      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d124      	bne.n	80025fc <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <TIM2_ch1_IP_capture_callback+0x104>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b80      	cmp	r3, #128	@ 0x80
 80025ba:	d951      	bls.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80025bc:	f002 f99c 	bl	80048f8 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80025cc:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <TIM2_ch1_IP_capture_callback+0x10c>)
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <TIM2_ch1_IP_capture_callback+0x110>)
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f002 f97e 	bl	80048d4 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d004      	beq.n	80025ec <TIM2_ch1_IP_capture_callback+0x84>
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d101      	bne.n	80025f0 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 80025ec:	f002 fe1c 	bl	8005228 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80025f0:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <TIM2_ch1_IP_capture_callback+0x118>)
 80025f2:	2104      	movs	r1, #4
 80025f4:	0018      	movs	r0, r3
 80025f6:	f003 fee3 	bl	80063c0 <Set_Status_Bit>
}
 80025fa:	e031      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80025fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d108      	bne.n	8002618 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002606:	f002 f995 	bl	8004934 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800260c:	2203      	movs	r2, #3
 800260e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 8002612:	2202      	movs	r2, #2
 8002614:	705a      	strb	r2, [r3, #1]
}
 8002616:	e023      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d11e      	bne.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002622:	f002 f969 	bl	80048f8 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800262e:	2203      	movs	r2, #3
 8002630:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <TIM2_ch1_IP_capture_callback+0x110>)
 8002636:	0011      	movs	r1, r2
 8002638:	0018      	movs	r0, r3
 800263a:	f002 f94b 	bl	80048d4 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b05      	cmp	r3, #5
 8002646:	d004      	beq.n	8002652 <TIM2_ch1_IP_capture_callback+0xea>
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b07      	cmp	r3, #7
 8002650:	d101      	bne.n	8002656 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002652:	f002 fde9 	bl	8005228 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <TIM2_ch1_IP_capture_callback+0x118>)
 8002658:	2104      	movs	r1, #4
 800265a:	0018      	movs	r0, r3
 800265c:	f003 feb0 	bl	80063c0 <Set_Status_Bit>
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000c34 	.word	0x20000c34
 800266c:	20000c38 	.word	0x20000c38
 8002670:	20000444 	.word	0x20000444
 8002674:	20000ca4 	.word	0x20000ca4
 8002678:	20000c5c 	.word	0x20000c5c
 800267c:	20000430 	.word	0x20000430
 8002680:	20000c3c 	.word	0x20000c3c

08002684 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 800268c:	240c      	movs	r4, #12
 800268e:	193b      	adds	r3, r7, r4
 8002690:	4a3a      	ldr	r2, [pc, #232]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	7852      	ldrb	r2, [r2, #1]
 8002694:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d131      	bne.n	8002704 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80026a0:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <TIM2_ch1_overflow_callback+0x100>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80026b2:	4b35      	ldr	r3, [pc, #212]	@ (8002788 <TIM2_ch1_overflow_callback+0x104>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	23a0      	movs	r3, #160	@ 0xa0
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	2201      	movs	r2, #1
 80026c2:	0018      	movs	r0, r3
 80026c4:	f005 ff2b 	bl	800851e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <TIM2_ch1_overflow_callback+0x108>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	2140      	movs	r1, #64	@ 0x40
 80026ce:	0018      	movs	r0, r3
 80026d0:	f005 ff25 	bl	800851e <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026d4:	4b29      	ldr	r3, [pc, #164]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d049      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80026de:	4b27      	ldr	r3, [pc, #156]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d044      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d03f      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026f4:	4a21      	ldr	r2, [pc, #132]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026fc:	193a      	adds	r2, r7, r4
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002702:	e036      	b.n	8002772 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002704:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d131      	bne.n	8002772 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800270e:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002716:	2203      	movs	r2, #3
 8002718:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <TIM2_ch1_overflow_callback+0x100>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <TIM2_ch1_overflow_callback+0x104>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	0099      	lsls	r1, r3, #2
 800272a:	23a0      	movs	r3, #160	@ 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	2201      	movs	r2, #1
 8002730:	0018      	movs	r0, r3
 8002732:	f005 fef4 	bl	800851e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <TIM2_ch1_overflow_callback+0x108>)
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	0018      	movs	r0, r3
 800273e:	f005 feee 	bl	800851e <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b04      	cmp	r3, #4
 800274a:	d012      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b06      	cmp	r3, #6
 8002754:	d00d      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800275c:	2b08      	cmp	r3, #8
 800275e:	d008      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002762:	4a06      	ldr	r2, [pc, #24]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 800276a:	220c      	movs	r2, #12
 800276c:	18ba      	adds	r2, r7, r2
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	701a      	strb	r2, [r3, #0]
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b005      	add	sp, #20
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	20000430 	.word	0x20000430
 8002780:	20000444 	.word	0x20000444
 8002784:	20000cec 	.word	0x20000cec
 8002788:	20000c3a 	.word	0x20000c3a
 800278c:	50000800 	.word	0x50000800

08002790 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b0b      	cmp	r3, #11
 80027a0:	d01c      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d017      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80027ac:	4b3c      	ldr	r3, [pc, #240]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b0d      	cmp	r3, #13
 80027b4:	d012      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80027b6:	4b3a      	ldr	r3, [pc, #232]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d00d      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d008      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80027d0:	2b12      	cmp	r3, #18
 80027d2:	d003      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80027d4:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f002 fa22 	bl	8004c20 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80027dc:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 80027de:	2100      	movs	r1, #0
 80027e0:	0018      	movs	r0, r3
 80027e2:	f003 fd72 	bl	80062ca <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 80027e6:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d106      	bne.n	80027fe <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 80027f0:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00a      	b.n	8002814 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d105      	bne.n	8002814 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002808:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800280e:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002810:	2203      	movs	r2, #3
 8002812:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002814:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b0b      	cmp	r3, #11
 800281c:	d03c      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d037      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b0d      	cmp	r3, #13
 8002830:	d032      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b10      	cmp	r3, #16
 800283a:	d02d      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800283c:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b11      	cmp	r3, #17
 8002844:	d028      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800284c:	2b12      	cmp	r3, #18
 800284e:	d023      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002850:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f002 f83c 	bl	80048d4 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 800285c:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f002 f836 	bl	80048d4 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 800286a:	2108      	movs	r1, #8
 800286c:	0018      	movs	r0, r3
 800286e:	f003 fda7 	bl	80063c0 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002874:	2100      	movs	r1, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f002 f9fe 	bl	8004c78 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800287c:	4a0f      	ldr	r2, [pc, #60]	@ (80028bc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f002 faee 	bl	8004e64 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	001a      	movs	r2, r3
 800288e:	490d      	ldr	r1, [pc, #52]	@ (80028c4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002892:	0018      	movs	r0, r3
 8002894:	f004 fa38 	bl	8006d08 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000430 	.word	0x20000430
 80028a4:	20000ca4 	.word	0x20000ca4
 80028a8:	200008d0 	.word	0x200008d0
 80028ac:	20000444 	.word	0x20000444
 80028b0:	20000cc8 	.word	0x20000cc8
 80028b4:	20000c5c 	.word	0x20000c5c
 80028b8:	20000c3c 	.word	0x20000c3c
 80028bc:	20000028 	.word	0x20000028
 80028c0:	0800e0ac 	.word	0x0800e0ac
 80028c4:	20000c50 	.word	0x20000c50
 80028c8:	200004fc 	.word	0x200004fc

080028cc <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 80028e4:	4bbe      	ldr	r3, [pc, #760]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe fc96 	bl	8001218 <Is_System_Real_Time_Status_Byte>
 80028ec:	0003      	movs	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <UART2_RX_transfer_complete_callback+0x1a>
 80028f2:	f000 fc0c 	bl	800310e <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 80028f6:	4bbb      	ldr	r3, [pc, #748]	@ (8002be4 <UART2_RX_transfer_complete_callback+0x308>)
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0018      	movs	r0, r3
 80028fc:	f003 fd4c 	bl	8006398 <Get_Status_Bit>
 8002900:	0003      	movs	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <UART2_RX_transfer_complete_callback+0x2e>
 8002906:	f001 f895 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 800290a:	4bb7      	ldr	r3, [pc, #732]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d159      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>
 8002914:	4bb5      	ldr	r3, [pc, #724]	@ (8002bec <UART2_RX_transfer_complete_callback+0x310>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d154      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800291e:	4bb4      	ldr	r3, [pc, #720]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b04      	cmp	r3, #4
 8002926:	d013      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002928:	4bb1      	ldr	r3, [pc, #708]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d00e      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002932:	4baf      	ldr	r3, [pc, #700]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b06      	cmp	r3, #6
 800293a:	d009      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 800293c:	4bac      	ldr	r3, [pc, #688]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d004      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002946:	4baa      	ldr	r3, [pc, #680]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d13b      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002950:	4ba3      	ldr	r3, [pc, #652]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2bfa      	cmp	r3, #250	@ 0xfa
 8002958:	d10b      	bne.n	8002972 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 800295a:	4ba5      	ldr	r3, [pc, #660]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800295c:	4aa4      	ldr	r2, [pc, #656]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002962:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002964:	2209      	movs	r2, #9
 8002966:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002968:	4ba2      	ldr	r3, [pc, #648]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800296e:	f001 f85e 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002972:	4b9b      	ldr	r3, [pc, #620]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2bf8      	cmp	r3, #248	@ 0xf8
 800297a:	d001      	beq.n	8002980 <UART2_RX_transfer_complete_callback+0xa4>
 800297c:	f001 f857 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002980:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002982:	4a9b      	ldr	r2, [pc, #620]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002988:	4b99      	ldr	r3, [pc, #612]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800298a:	220b      	movs	r2, #11
 800298c:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800298e:	4b99      	ldr	r3, [pc, #612]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	23a0      	movs	r3, #160	@ 0xa0
 800299a:	05db      	lsls	r3, r3, #23
 800299c:	2200      	movs	r2, #0
 800299e:	0018      	movs	r0, r3
 80029a0:	f005 fdbd 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029a4:	4b94      	ldr	r3, [pc, #592]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	0018      	movs	r0, r3
 80029ac:	f005 fdb7 	bl	800851e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029b6:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 80029c2:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80029c4:	f001 f833 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80029c8:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d123      	bne.n	8002a1a <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029d2:	4b83      	ldr	r3, [pc, #524]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2bf8      	cmp	r3, #248	@ 0xf8
 80029da:	d001      	beq.n	80029e0 <UART2_RX_transfer_complete_callback+0x104>
 80029dc:	f001 f82a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	23a0      	movs	r3, #160	@ 0xa0
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	2200      	movs	r2, #0
 80029ea:	0018      	movs	r0, r3
 80029ec:	f005 fd97 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029f0:	4b81      	ldr	r3, [pc, #516]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	2140      	movs	r1, #64	@ 0x40
 80029f6:	0018      	movs	r0, r3
 80029f8:	f005 fd91 	bl	800851e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a02:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a0e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a10:	4b77      	ldr	r3, [pc, #476]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a12:	220a      	movs	r2, #10
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	f001 f80d 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002a1a:	4b75      	ldr	r3, [pc, #468]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b0a      	cmp	r3, #10
 8002a22:	d145      	bne.n	8002ab0 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a24:	4b6e      	ldr	r3, [pc, #440]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a2c:	d001      	beq.n	8002a32 <UART2_RX_transfer_complete_callback+0x156>
 8002a2e:	f001 f801 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a38:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a44:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a46:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b0b      	cmp	r3, #11
 8002a4e:	d80f      	bhi.n	8002a70 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	23a0      	movs	r3, #160	@ 0xa0
 8002a56:	05db      	lsls	r3, r3, #23
 8002a58:	2200      	movs	r2, #0
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f005 fd5f 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a60:	4b65      	ldr	r3, [pc, #404]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	0018      	movs	r0, r3
 8002a68:	f005 fd59 	bl	800851e <HAL_GPIO_WritePin>
 8002a6c:	f000 ffe2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a70:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b18      	cmp	r3, #24
 8002a78:	d80f      	bhi.n	8002a9a <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	0099      	lsls	r1, r3, #2
 8002a7e:	23a0      	movs	r3, #160	@ 0xa0
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	2201      	movs	r2, #1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f005 fd4a 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	@ 0x40
 8002a90:	0018      	movs	r0, r3
 8002a92:	f005 fd44 	bl	800851e <HAL_GPIO_WritePin>
 8002a96:	f000 ffcd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a9a:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002aa0:	4b53      	ldr	r3, [pc, #332]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002aa6:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	f000 ffc2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b0b      	cmp	r3, #11
 8002ab8:	d142      	bne.n	8002b40 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ac2:	d001      	beq.n	8002ac8 <UART2_RX_transfer_complete_callback+0x1ec>
 8002ac4:	f000 ffb6 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002ac8:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b46      	ldr	r3, [pc, #280]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ada:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002adc:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b0b      	cmp	r3, #11
 8002ae4:	d80f      	bhi.n	8002b06 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	0099      	lsls	r1, r3, #2
 8002aea:	23a0      	movs	r3, #160	@ 0xa0
 8002aec:	05db      	lsls	r3, r3, #23
 8002aee:	2200      	movs	r2, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f005 fd14 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002af6:	4b40      	ldr	r3, [pc, #256]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	2140      	movs	r1, #64	@ 0x40
 8002afc:	0018      	movs	r0, r3
 8002afe:	f005 fd0e 	bl	800851e <HAL_GPIO_WritePin>
 8002b02:	f000 ff97 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b06:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b18      	cmp	r3, #24
 8002b0e:	d80f      	bhi.n	8002b30 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	23a0      	movs	r3, #160	@ 0xa0
 8002b16:	05db      	lsls	r3, r3, #23
 8002b18:	2201      	movs	r2, #1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f005 fcff 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b20:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	2140      	movs	r1, #64	@ 0x40
 8002b26:	0018      	movs	r0, r3
 8002b28:	f005 fcf9 	bl	800851e <HAL_GPIO_WritePin>
 8002b2c:	f000 ff82 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002b30:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002b36:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002b38:	220c      	movs	r2, #12
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	f000 ff7a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002b40:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d158      	bne.n	8002bfc <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b4a:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b52:	d138      	bne.n	8002bc6 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b54:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b66:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b0b      	cmp	r3, #11
 8002b70:	d80f      	bhi.n	8002b92 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	0099      	lsls	r1, r3, #2
 8002b76:	23a0      	movs	r3, #160	@ 0xa0
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f005 fcce 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	2140      	movs	r1, #64	@ 0x40
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f005 fcc8 	bl	800851e <HAL_GPIO_WritePin>
 8002b8e:	f000 ff51 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b18      	cmp	r3, #24
 8002b9a:	d80f      	bhi.n	8002bbc <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	23a0      	movs	r3, #160	@ 0xa0
 8002ba2:	05db      	lsls	r3, r3, #23
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f005 fcb9 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2140      	movs	r1, #64	@ 0x40
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f005 fcb3 	bl	800851e <HAL_GPIO_WritePin>
 8002bb8:	f000 ff3c 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	f000 ff37 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2bfa      	cmp	r3, #250	@ 0xfa
 8002bce:	d001      	beq.n	8002bd4 <UART2_RX_transfer_complete_callback+0x2f8>
 8002bd0:	f000 ff30 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002bd6:	220d      	movs	r2, #13
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	f000 ff2b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	200004dc 	.word	0x200004dc
 8002be4:	20000c3c 	.word	0x20000c3c
 8002be8:	20000cec 	.word	0x20000cec
 8002bec:	20000444 	.word	0x20000444
 8002bf0:	20000430 	.word	0x20000430
 8002bf4:	20000c3a 	.word	0x20000c3a
 8002bf8:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002bfc:	4bdc      	ldr	r3, [pc, #880]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b0d      	cmp	r3, #13
 8002c04:	d160      	bne.n	8002cc8 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c06:	4bdb      	ldr	r3, [pc, #876]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c0e:	d001      	beq.n	8002c14 <UART2_RX_transfer_complete_callback+0x338>
 8002c10:	f000 ff10 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002c14:	4bd8      	ldr	r3, [pc, #864]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f002 f802 	bl	8004c20 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	23a0      	movs	r3, #160	@ 0xa0
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	2201      	movs	r2, #1
 8002c26:	0018      	movs	r0, r3
 8002c28:	f005 fc79 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c2c:	4bd3      	ldr	r3, [pc, #844]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2140      	movs	r1, #64	@ 0x40
 8002c32:	0018      	movs	r0, r3
 8002c34:	f005 fc73 	bl	800851e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	23a0      	movs	r3, #160	@ 0xa0
 8002c3e:	05db      	lsls	r3, r3, #23
 8002c40:	2200      	movs	r2, #0
 8002c42:	0018      	movs	r0, r3
 8002c44:	f005 fc6b 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c48:	4bcc      	ldr	r3, [pc, #816]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2140      	movs	r1, #64	@ 0x40
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f005 fc65 	bl	800851e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c54:	4bca      	ldr	r3, [pc, #808]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002c5a:	4bca      	ldr	r3, [pc, #808]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002c60:	4bc3      	ldr	r3, [pc, #780]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002c62:	220d      	movs	r2, #13
 8002c64:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c66:	4bc2      	ldr	r3, [pc, #776]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002c68:	2208      	movs	r2, #8
 8002c6a:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002c6c:	4bc6      	ldr	r3, [pc, #792]	@ (8002f88 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002c6e:	2100      	movs	r1, #0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f003 fb2a 	bl	80062ca <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002c76:	4bc5      	ldr	r3, [pc, #788]	@ (8002f8c <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002c7c:	4ac4      	ldr	r2, [pc, #784]	@ (8002f90 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002c7e:	4bbe      	ldr	r3, [pc, #760]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f001 fe26 	bl	80048d4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002c88:	4ac2      	ldr	r2, [pc, #776]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002c8a:	4bbb      	ldr	r3, [pc, #748]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f001 fe20 	bl	80048d4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002c94:	4bc0      	ldr	r3, [pc, #768]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c96:	2108      	movs	r1, #8
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f003 fb91 	bl	80063c0 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002c9e:	4bbd      	ldr	r3, [pc, #756]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f001 ffe8 	bl	8004c78 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002ca8:	4abc      	ldr	r2, [pc, #752]	@ (8002f9c <UART2_RX_transfer_complete_callback+0x6c0>)
 8002caa:	4bba      	ldr	r3, [pc, #744]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002cac:	0011      	movs	r1, r2
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f002 f8d8 	bl	8004e64 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002cb4:	4bba      	ldr	r3, [pc, #744]	@ (8002fa0 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	001a      	movs	r2, r3
 8002cba:	49ba      	ldr	r1, [pc, #744]	@ (8002fa4 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002cbc:	4bba      	ldr	r3, [pc, #744]	@ (8002fa8 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f004 f822 	bl	8006d08 <HAL_ADC_Start_DMA>
 8002cc4:	f000 feb6 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002cc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d146      	bne.n	8002d60 <UART2_RX_transfer_complete_callback+0x484>
 8002cd2:	4bb1      	ldr	r3, [pc, #708]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f003 fb5e 	bl	8006398 <Get_Status_Bit>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d13f      	bne.n	8002d60 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ce0:	4ba4      	ldr	r3, [pc, #656]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ce8:	d001      	beq.n	8002cee <UART2_RX_transfer_complete_callback+0x412>
 8002cea:	f000 fea3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002cee:	4ba4      	ldr	r3, [pc, #656]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cf4:	4ba3      	ldr	r3, [pc, #652]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4ba1      	ldr	r3, [pc, #644]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d00:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d02:	4ba0      	ldr	r3, [pc, #640]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b0b      	cmp	r3, #11
 8002d0a:	d80f      	bhi.n	8002d2c <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	23a0      	movs	r3, #160	@ 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	2200      	movs	r2, #0
 8002d16:	0018      	movs	r0, r3
 8002d18:	f005 fc01 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d1c:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f005 fbfb 	bl	800851e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe84 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002d2c:	4b95      	ldr	r3, [pc, #596]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d80f      	bhi.n	8002d56 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	0099      	lsls	r1, r3, #2
 8002d3a:	23a0      	movs	r3, #160	@ 0xa0
 8002d3c:	05db      	lsls	r3, r3, #23
 8002d3e:	2201      	movs	r2, #1
 8002d40:	0018      	movs	r0, r3
 8002d42:	f005 fbec 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	@ 0x40
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f005 fbe6 	bl	800851e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d52:	f000 fe6f 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002d56:	4b8b      	ldr	r3, [pc, #556]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d5c:	f000 fe6a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002d60:	4b83      	ldr	r3, [pc, #524]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d14c      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>
 8002d6a:	4b88      	ldr	r3, [pc, #544]	@ (8002f8c <UART2_RX_transfer_complete_callback+0x6b0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d147      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>
 8002d74:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d76:	2120      	movs	r1, #32
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f003 fb0d 	bl	8006398 <Get_Status_Bit>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13f      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d84:	4b7b      	ldr	r3, [pc, #492]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d8c:	d11e      	bne.n	8002dcc <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d94:	4b7b      	ldr	r3, [pc, #492]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b79      	ldr	r3, [pc, #484]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002da2:	4b77      	ldr	r3, [pc, #476]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002da8:	4b71      	ldr	r3, [pc, #452]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002daa:	2210      	movs	r2, #16
 8002dac:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dae:	4b70      	ldr	r3, [pc, #448]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002db0:	2208      	movs	r2, #8
 8002db2:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002db4:	4b78      	ldr	r3, [pc, #480]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002db6:	2120      	movs	r1, #32
 8002db8:	0018      	movs	r0, r3
 8002dba:	f003 fb13 	bl	80063e4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002dbe:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dc0:	2140      	movs	r1, #64	@ 0x40
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f003 fb0e 	bl	80063e4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002dc8:	f000 fe33 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002dcc:	4b69      	ldr	r3, [pc, #420]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2bfa      	cmp	r3, #250	@ 0xfa
 8002dd4:	d001      	beq.n	8002dda <UART2_RX_transfer_complete_callback+0x4fe>
 8002dd6:	f000 fe2c 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002de0:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002de2:	220e      	movs	r2, #14
 8002de4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002de6:	4b62      	ldr	r3, [pc, #392]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002de8:	2208      	movs	r2, #8
 8002dea:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002dec:	4b6a      	ldr	r3, [pc, #424]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dee:	2120      	movs	r1, #32
 8002df0:	0018      	movs	r0, r3
 8002df2:	f003 faf7 	bl	80063e4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002df6:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002df8:	2140      	movs	r1, #64	@ 0x40
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f003 faf2 	bl	80063e4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e00:	f000 fe17 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002e04:	4b5a      	ldr	r3, [pc, #360]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b0e      	cmp	r3, #14
 8002e0c:	d123      	bne.n	8002e56 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e0e:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e16:	d001      	beq.n	8002e1c <UART2_RX_transfer_complete_callback+0x540>
 8002e18:	f000 fe0c 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	23a0      	movs	r3, #160	@ 0xa0
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f005 fb79 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e2c:	4b53      	ldr	r3, [pc, #332]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2140      	movs	r1, #64	@ 0x40
 8002e32:	0018      	movs	r0, r3
 8002e34:	f005 fb73 	bl	800851e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002e38:	4b51      	ldr	r3, [pc, #324]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002e3e:	4b51      	ldr	r3, [pc, #324]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b4e      	ldr	r3, [pc, #312]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e4a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e4e:	220f      	movs	r2, #15
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	f000 fdef 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002e56:	4b46      	ldr	r3, [pc, #280]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d142      	bne.n	8002ee6 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e60:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e68:	d001      	beq.n	8002e6e <UART2_RX_transfer_complete_callback+0x592>
 8002e6a:	f000 fde3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002e6e:	4b45      	ldr	r3, [pc, #276]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b42      	ldr	r3, [pc, #264]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e7a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e7c:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	d80f      	bhi.n	8002ea6 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	0099      	lsls	r1, r3, #2
 8002e8a:	23a0      	movs	r3, #160	@ 0xa0
 8002e8c:	05db      	lsls	r3, r3, #23
 8002e8e:	2200      	movs	r2, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f005 fb44 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2140      	movs	r1, #64	@ 0x40
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f005 fb3e 	bl	800851e <HAL_GPIO_WritePin>
 8002ea2:	f000 fdc7 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b18      	cmp	r3, #24
 8002eae:	d80f      	bhi.n	8002ed0 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	0099      	lsls	r1, r3, #2
 8002eb4:	23a0      	movs	r3, #160	@ 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	2201      	movs	r2, #1
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f005 fb2f 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2140      	movs	r1, #64	@ 0x40
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f005 fb29 	bl	800851e <HAL_GPIO_WritePin>
 8002ecc:	f000 fdb2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ed8:	2208      	movs	r2, #8
 8002eda:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002edc:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	f000 fda7 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d15d      	bne.n	8002fac <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ef8:	d001      	beq.n	8002efe <UART2_RX_transfer_complete_callback+0x622>
 8002efa:	f000 fd9b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002efe:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f0a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b0b      	cmp	r3, #11
 8002f14:	d80f      	bhi.n	8002f36 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	0099      	lsls	r1, r3, #2
 8002f1a:	23a0      	movs	r3, #160	@ 0xa0
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	2200      	movs	r2, #0
 8002f20:	0018      	movs	r0, r3
 8002f22:	f005 fafc 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2140      	movs	r1, #64	@ 0x40
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f005 faf6 	bl	800851e <HAL_GPIO_WritePin>
 8002f32:	f000 fd7f 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f36:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b18      	cmp	r3, #24
 8002f3e:	d80f      	bhi.n	8002f60 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	23a0      	movs	r3, #160	@ 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	2201      	movs	r2, #1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f005 fae7 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	2140      	movs	r1, #64	@ 0x40
 8002f56:	0018      	movs	r0, r3
 8002f58:	f005 fae1 	bl	800851e <HAL_GPIO_WritePin>
 8002f5c:	f000 fd6a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002f62:	2211      	movs	r2, #17
 8002f64:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	f000 fd62 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8002f70:	20000430 	.word	0x20000430
 8002f74:	200004dc 	.word	0x200004dc
 8002f78:	20000ca4 	.word	0x20000ca4
 8002f7c:	50000800 	.word	0x50000800
 8002f80:	20000cec 	.word	0x20000cec
 8002f84:	20000c3a 	.word	0x20000c3a
 8002f88:	200008d0 	.word	0x200008d0
 8002f8c:	20000444 	.word	0x20000444
 8002f90:	20000cc8 	.word	0x20000cc8
 8002f94:	20000c5c 	.word	0x20000c5c
 8002f98:	20000c3c 	.word	0x20000c3c
 8002f9c:	20000028 	.word	0x20000028
 8002fa0:	0800e0ac 	.word	0x0800e0ac
 8002fa4:	20000c50 	.word	0x20000c50
 8002fa8:	200004fc 	.word	0x200004fc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002fac:	4bed      	ldr	r3, [pc, #948]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	d146      	bne.n	8003044 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fb6:	4bec      	ldr	r3, [pc, #944]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fbe:	d135      	bne.n	800302c <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002fc0:	4bea      	ldr	r3, [pc, #936]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4be8      	ldr	r3, [pc, #928]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fcc:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002fce:	4be7      	ldr	r3, [pc, #924]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b0b      	cmp	r3, #11
 8002fd6:	d80f      	bhi.n	8002ff8 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	23a0      	movs	r3, #160	@ 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f005 fa9b 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fe8:	4be1      	ldr	r3, [pc, #900]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	2140      	movs	r1, #64	@ 0x40
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f005 fa95 	bl	800851e <HAL_GPIO_WritePin>
 8002ff4:	f000 fd1e 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ff8:	4bdc      	ldr	r3, [pc, #880]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d80f      	bhi.n	8003022 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	0099      	lsls	r1, r3, #2
 8003006:	23a0      	movs	r3, #160	@ 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	2201      	movs	r2, #1
 800300c:	0018      	movs	r0, r3
 800300e:	f005 fa86 	bl	800851e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003012:	4bd7      	ldr	r3, [pc, #860]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8003014:	2200      	movs	r2, #0
 8003016:	2140      	movs	r1, #64	@ 0x40
 8003018:	0018      	movs	r0, r3
 800301a:	f005 fa80 	bl	800851e <HAL_GPIO_WritePin>
 800301e:	f000 fd09 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003022:	4bd2      	ldr	r3, [pc, #840]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	f000 fd04 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800302c:	4bce      	ldr	r3, [pc, #824]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2bfa      	cmp	r3, #250	@ 0xfa
 8003034:	d001      	beq.n	800303a <UART2_RX_transfer_complete_callback+0x75e>
 8003036:	f000 fcfd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800303a:	4bca      	ldr	r3, [pc, #808]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 800303c:	2212      	movs	r2, #18
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	f000 fcf8 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8003044:	4bc7      	ldr	r3, [pc, #796]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b12      	cmp	r3, #18
 800304c:	d001      	beq.n	8003052 <UART2_RX_transfer_complete_callback+0x776>
 800304e:	f000 fcf1 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003052:	4bc5      	ldr	r3, [pc, #788]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2bf8      	cmp	r3, #248	@ 0xf8
 800305a:	d001      	beq.n	8003060 <UART2_RX_transfer_complete_callback+0x784>
 800305c:	f000 fcea 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003060:	4bc4      	ldr	r3, [pc, #784]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 8003062:	0018      	movs	r0, r3
 8003064:	f001 fddc 	bl	8004c20 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	23a0      	movs	r3, #160	@ 0xa0
 800306e:	05db      	lsls	r3, r3, #23
 8003070:	2201      	movs	r2, #1
 8003072:	0018      	movs	r0, r3
 8003074:	f005 fa53 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003078:	4bbd      	ldr	r3, [pc, #756]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	@ 0x40
 800307e:	0018      	movs	r0, r3
 8003080:	f005 fa4d 	bl	800851e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	23a0      	movs	r3, #160	@ 0xa0
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	2200      	movs	r2, #0
 800308e:	0018      	movs	r0, r3
 8003090:	f005 fa45 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003094:	4bb6      	ldr	r3, [pc, #728]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8003096:	2201      	movs	r2, #1
 8003098:	2140      	movs	r1, #64	@ 0x40
 800309a:	0018      	movs	r0, r3
 800309c:	f005 fa3f 	bl	800851e <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80030a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 80030a2:	2212      	movs	r2, #18
 80030a4:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80030a6:	4baf      	ldr	r3, [pc, #700]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 80030a8:	2208      	movs	r2, #8
 80030aa:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 80030ac:	4baf      	ldr	r3, [pc, #700]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80030b2:	4bb1      	ldr	r3, [pc, #708]	@ (8003378 <UART2_RX_transfer_complete_callback+0xa9c>)
 80030b4:	2100      	movs	r1, #0
 80030b6:	0018      	movs	r0, r3
 80030b8:	f003 f907 	bl	80062ca <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 80030bc:	4baf      	ldr	r3, [pc, #700]	@ (800337c <UART2_RX_transfer_complete_callback+0xaa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80030c2:	4aaf      	ldr	r2, [pc, #700]	@ (8003380 <UART2_RX_transfer_complete_callback+0xaa4>)
 80030c4:	4bab      	ldr	r3, [pc, #684]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f001 fc03 	bl	80048d4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 80030ce:	4aad      	ldr	r2, [pc, #692]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 fbfd 	bl	80048d4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80030da:	4bab      	ldr	r3, [pc, #684]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80030dc:	2108      	movs	r1, #8
 80030de:	0018      	movs	r0, r3
 80030e0:	f003 f96e 	bl	80063c0 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80030e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030e6:	2100      	movs	r1, #0
 80030e8:	0018      	movs	r0, r3
 80030ea:	f001 fdc5 	bl	8004c78 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80030ee:	4aa7      	ldr	r2, [pc, #668]	@ (800338c <UART2_RX_transfer_complete_callback+0xab0>)
 80030f0:	4ba4      	ldr	r3, [pc, #656]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f001 feb5 	bl	8004e64 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80030fa:	4ba5      	ldr	r3, [pc, #660]	@ (8003390 <UART2_RX_transfer_complete_callback+0xab4>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	001a      	movs	r2, r3
 8003100:	49a4      	ldr	r1, [pc, #656]	@ (8003394 <UART2_RX_transfer_complete_callback+0xab8>)
 8003102:	4ba5      	ldr	r3, [pc, #660]	@ (8003398 <UART2_RX_transfer_complete_callback+0xabc>)
 8003104:	0018      	movs	r0, r3
 8003106:	f003 fdff 	bl	8006d08 <HAL_ADC_Start_DMA>
 800310a:	f000 fc93 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 800310e:	4ba3      	ldr	r3, [pc, #652]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d000      	beq.n	800311a <UART2_RX_transfer_complete_callback+0x83e>
 8003118:	e29e      	b.n	8003658 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 800311a:	4ba1      	ldr	r3, [pc, #644]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d000      	beq.n	8003126 <UART2_RX_transfer_complete_callback+0x84a>
 8003124:	e0a3      	b.n	800326e <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003126:	4b9f      	ldr	r3, [pc, #636]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003128:	0018      	movs	r0, r3
 800312a:	f7fe f812 	bl	8001152 <Is_Data_Buffer_Empty>
 800312e:	0003      	movs	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d001      	beq.n	8003138 <UART2_RX_transfer_complete_callback+0x85c>
 8003134:	f000 fc7e 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003138:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800313a:	0018      	movs	r0, r3
 800313c:	f7fd fec8 	bl	8000ed0 <Is_Status_Byte>
 8003140:	0003      	movs	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <UART2_RX_transfer_complete_callback+0x86e>
 8003146:	f000 fc75 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fef1 	bl	8000f34 <Is_PC_Status_Byte>
 8003152:	0003      	movs	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d134      	bne.n	80031c2 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003158:	4b83      	ldr	r3, [pc, #524]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b90      	ldr	r3, [pc, #576]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003160:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003162:	4b91      	ldr	r3, [pc, #580]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b7f      	ldr	r3, [pc, #508]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f7fd ffcf 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003172:	0003      	movs	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10d      	bne.n	8003194 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8003178:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003180:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	4b80      	ldr	r3, [pc, #512]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f003 f918 	bl	80063c0 <Set_Status_Bit>
 8003190:	f000 fc50 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003196:	0018      	movs	r0, r3
 8003198:	f7fe f871 	bl	800127e <Is_OMNI_On>
 800319c:	0003      	movs	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <UART2_RX_transfer_complete_callback+0x8ca>
 80031a2:	f000 fc47 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80031a6:	4b70      	ldr	r3, [pc, #448]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 80031ae:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	005a      	lsls	r2, r3, #1
 80031b4:	4b74      	ldr	r3, [pc, #464]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80031b6:	0011      	movs	r1, r2
 80031b8:	0018      	movs	r0, r3
 80031ba:	f003 f901 	bl	80063c0 <Set_Status_Bit>
 80031be:	f000 fc39 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80031c2:	4b69      	ldr	r3, [pc, #420]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fed1 	bl	8000f6c <Is_CC_Status_Byte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d134      	bne.n	800323a <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80031d0:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b72      	ldr	r3, [pc, #456]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 80031d8:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80031da:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fd ff93 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031ea:	0003      	movs	r3, r0
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10d      	bne.n	800320c <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80031f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b69      	ldr	r3, [pc, #420]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 80031f8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f003 f8dc 	bl	80063c0 <Set_Status_Bit>
 8003208:	f000 fc14 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800320c:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7fe f835 	bl	800127e <Is_OMNI_On>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <UART2_RX_transfer_complete_callback+0x942>
 800321a:	f000 fc0b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800321e:	4b52      	ldr	r3, [pc, #328]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b5d      	ldr	r3, [pc, #372]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003226:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	005a      	lsls	r2, r3, #1
 800322c:	4b56      	ldr	r3, [pc, #344]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f003 f8c5 	bl	80063c0 <Set_Status_Bit>
 8003236:	f000 fbfd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800323a:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff57 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003242:	0003      	movs	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <UART2_RX_transfer_complete_callback+0x970>
 8003248:	f000 fbf4 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b52      	ldr	r3, [pc, #328]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003254:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003256:	4b52      	ldr	r3, [pc, #328]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	005a      	lsls	r2, r3, #1
 8003260:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003262:	0011      	movs	r1, r2
 8003264:	0018      	movs	r0, r3
 8003266:	f003 f8ab 	bl	80063c0 <Set_Status_Bit>
 800326a:	f000 fbe3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800326e:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <UART2_RX_transfer_complete_callback+0x9a0>
 8003278:	f000 fbdc 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 800327c:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd fe3f 	bl	8000f02 <Is_Data_Byte>
 8003284:	0003      	movs	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d000      	beq.n	800328c <UART2_RX_transfer_complete_callback+0x9b0>
 800328a:	e151      	b.n	8003530 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	005a      	lsls	r2, r3, #1
 8003290:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003292:	0011      	movs	r1, r2
 8003294:	0018      	movs	r0, r3
 8003296:	f003 f893 	bl	80063c0 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fe49 	bl	8000f34 <Is_PC_Status_Byte>
 80032a2:	0003      	movs	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d143      	bne.n	8003330 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80032a8:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd ff2c 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80032b8:	0003      	movs	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d008      	beq.n	80032d0 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80032be:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fd ffdc 	bl	800127e <Is_OMNI_On>
 80032c6:	0003      	movs	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d001      	beq.n	80032d0 <UART2_RX_transfer_complete_callback+0x9f4>
 80032cc:	f000 fbb2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80032d0:	4b34      	ldr	r3, [pc, #208]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd ff3d 	bl	8001152 <Is_Data_Buffer_Empty>
 80032d8:	0003      	movs	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <UART2_RX_transfer_complete_callback+0xa06>
 80032de:	f000 fba9 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80032e2:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032e4:	2104      	movs	r1, #4
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd ff81 	bl	80011ee <Is_Program_Change_Data_Byte_In_Range>
 80032ec:	0003      	movs	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10f      	bne.n	8003312 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80032f2:	f7fd fd39 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80032f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <UART2_RX_transfer_complete_callback+0xad0>)
 8003302:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003304:	f7fd f90c 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800330a:	2108      	movs	r1, #8
 800330c:	0018      	movs	r0, r3
 800330e:	f003 f869 	bl	80063e4 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ff4c 	bl	80011b2 <Clear_Data_Buffer>
								active_status_byte = 0;
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <UART2_RX_transfer_complete_callback+0xad4>)
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd ffc3 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 800332c:	f000 fb82 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003332:	0018      	movs	r0, r3
 8003334:	f7fd fe1a 	bl	8000f6c <Is_CC_Status_Byte>
 8003338:	0003      	movs	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <UART2_RX_transfer_complete_callback+0xa66>
 800333e:	f000 fb79 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd ff04 	bl	8001152 <Is_Data_Buffer_Empty>
 800334a:	0003      	movs	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d131      	bne.n	80033b4 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003358:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <UART2_RX_transfer_complete_callback+0xad4>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e368      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	20000430 	.word	0x20000430
 8003368:	200004dc 	.word	0x200004dc
 800336c:	20000c3a 	.word	0x20000c3a
 8003370:	50000800 	.word	0x50000800
 8003374:	20000ca4 	.word	0x20000ca4
 8003378:	200008d0 	.word	0x200008d0
 800337c:	20000444 	.word	0x20000444
 8003380:	20000cc8 	.word	0x20000cc8
 8003384:	20000c5c 	.word	0x20000c5c
 8003388:	20000c3c 	.word	0x20000c3c
 800338c:	20000028 	.word	0x20000028
 8003390:	0800e0ac 	.word	0x0800e0ac
 8003394:	20000c50 	.word	0x20000c50
 8003398:	200004fc 	.word	0x200004fc
 800339c:	200004cb 	.word	0x200004cb
 80033a0:	200004cc 	.word	0x200004cc
 80033a4:	200004d0 	.word	0x200004d0
 80033a8:	200004ca 	.word	0x200004ca
 80033ac:	200004bc 	.word	0x200004bc
 80033b0:	20000c44 	.word	0x20000c44

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80033b4:	4bd6      	ldr	r3, [pc, #856]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4bd6      	ldr	r3, [pc, #856]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033bc:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80033be:	4ad6      	ldr	r2, [pc, #856]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c0:	4bd6      	ldr	r3, [pc, #856]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd ff74 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80033ca:	4bd2      	ldr	r3, [pc, #840]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd fde9 	bl	8000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80033d2:	0003      	movs	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d14c      	bne.n	8003472 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 80033d8:	4bd1      	ldr	r3, [pc, #836]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4bd1      	ldr	r3, [pc, #836]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fe94 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033e8:	0003      	movs	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d139      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80033ee:	4ace      	ldr	r2, [pc, #824]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033f0:	4bc8      	ldr	r3, [pc, #800]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd fe34 	bl	8001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80033fa:	0003      	movs	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d130      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003400:	4bc4      	ldr	r3, [pc, #784]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b79      	cmp	r3, #121	@ 0x79
 8003408:	d10b      	bne.n	8003422 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 800340a:	4ac8      	ldr	r2, [pc, #800]	@ (800372c <UART2_RX_transfer_complete_callback+0xe50>)
 800340c:	4bc8      	ldr	r3, [pc, #800]	@ (8003730 <UART2_RX_transfer_complete_callback+0xe54>)
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7fd ff69 	bl	80012e8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003416:	4bc0      	ldr	r3, [pc, #768]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003418:	2108      	movs	r1, #8
 800341a:	0018      	movs	r0, r3
 800341c:	f002 ffe2 	bl	80063e4 <Clear_Status_Bit>
 8003420:	e01f      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003422:	4bbc      	ldr	r3, [pc, #752]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b7a      	cmp	r3, #122	@ 0x7a
 800342a:	d107      	bne.n	800343c <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 800342c:	f7fd ffb6 	bl	800139c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003430:	4bb9      	ldr	r3, [pc, #740]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003432:	2108      	movs	r1, #8
 8003434:	0018      	movs	r0, r3
 8003436:	f002 ffd5 	bl	80063e4 <Clear_Status_Bit>
 800343a:	e012      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 800343c:	4bb5      	ldr	r3, [pc, #724]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b7c      	cmp	r3, #124	@ 0x7c
 8003444:	d104      	bne.n	8003450 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8003446:	4bb4      	ldr	r3, [pc, #720]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd ffdf 	bl	800140c <Set_OMNI_Off>
 800344e:	e008      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003450:	4bb0      	ldr	r3, [pc, #704]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b7d      	cmp	r3, #125	@ 0x7d
 8003458:	d103      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 800345a:	4baf      	ldr	r3, [pc, #700]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800345c:	0018      	movs	r0, r3
 800345e:	f7fd ffe5 	bl	800142c <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003462:	4bb4      	ldr	r3, [pc, #720]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003468:	4baa      	ldr	r3, [pc, #680]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 800346a:	0018      	movs	r0, r3
 800346c:	f7fd fea1 	bl	80011b2 <Clear_Data_Buffer>
 8003470:	e2e0      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003472:	4ba8      	ldr	r3, [pc, #672]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003474:	0018      	movs	r0, r3
 8003476:	f7fd fdc1 	bl	8000ffc <Is_Utilised_CC_First_Data_Byte>
 800347a:	0003      	movs	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d14f      	bne.n	8003520 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003480:	4ba7      	ldr	r3, [pc, #668]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4ba7      	ldr	r3, [pc, #668]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f7fd fe40 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003490:	0003      	movs	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d006      	beq.n	80034a4 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003496:	4ba0      	ldr	r3, [pc, #640]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fef0 	bl	800127e <Is_OMNI_On>
 800349e:	0003      	movs	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d135      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80034a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b14      	cmp	r3, #20
 80034ac:	d104      	bne.n	80034b8 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fd fbd7 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 80034b6:	e02b      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80034b8:	4b96      	ldr	r3, [pc, #600]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b15      	cmp	r3, #21
 80034c0:	d109      	bne.n	80034d6 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034c2:	4b99      	ldr	r3, [pc, #612]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7fd fbe7 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80034ca:	4b93      	ldr	r3, [pc, #588]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034cc:	2108      	movs	r1, #8
 80034ce:	0018      	movs	r0, r3
 80034d0:	f002 ff88 	bl	80063e4 <Clear_Status_Bit>
 80034d4:	e01c      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80034d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b16      	cmp	r3, #22
 80034de:	d104      	bne.n	80034ea <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034e0:	4b91      	ldr	r3, [pc, #580]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fbf2 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80034e8:	e012      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80034ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b17      	cmp	r3, #23
 80034f2:	d104      	bne.n	80034fe <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7fd fc02 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80034fc:	e008      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b18      	cmp	r3, #24
 8003506:	d103      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003508:	4b87      	ldr	r3, [pc, #540]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 800350a:	0018      	movs	r0, r3
 800350c:	f7fd fc12 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003510:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003518:	0018      	movs	r0, r3
 800351a:	f7fd fe4a 	bl	80011b2 <Clear_Data_Buffer>
 800351e:	e289      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003520:	4b84      	ldr	r3, [pc, #528]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003526:	4b7b      	ldr	r3, [pc, #492]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe42 	bl	80011b2 <Clear_Data_Buffer>
 800352e:	e281      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003530:	4b78      	ldr	r3, [pc, #480]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fe3d 	bl	80011b2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003538:	4a77      	ldr	r2, [pc, #476]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800353a:	4b78      	ldr	r3, [pc, #480]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f7fd feb7 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003544:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003546:	0018      	movs	r0, r3
 8003548:	f7fd fcf4 	bl	8000f34 <Is_PC_Status_Byte>
 800354c:	0003      	movs	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d131      	bne.n	80035b6 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003552:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b72      	ldr	r3, [pc, #456]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 800355a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800355c:	4b70      	ldr	r3, [pc, #448]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b6b      	ldr	r3, [pc, #428]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f7fd fdd2 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800356c:	0003      	movs	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10c      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003572:	4b67      	ldr	r3, [pc, #412]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b6e      	ldr	r3, [pc, #440]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800357a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	005a      	lsls	r2, r3, #1
 8003580:	4b65      	ldr	r3, [pc, #404]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f002 ff1b 	bl	80063c0 <Set_Status_Bit>
 800358a:	e253      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800358c:	4b62      	ldr	r3, [pc, #392]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd fe75 	bl	800127e <Is_OMNI_On>
 8003594:	0003      	movs	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d000      	beq.n	800359c <UART2_RX_transfer_complete_callback+0xcc0>
 800359a:	e24b      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800359c:	4b5c      	ldr	r3, [pc, #368]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80035a4:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035a6:	2380      	movs	r3, #128	@ 0x80
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035ac:	0011      	movs	r1, r2
 80035ae:	0018      	movs	r0, r3
 80035b0:	f002 ff06 	bl	80063c0 <Set_Status_Bit>
 80035b4:	e23e      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80035b6:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fd fcd7 	bl	8000f6c <Is_CC_Status_Byte>
 80035be:	0003      	movs	r3, r0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d131      	bne.n	8003628 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80035c4:	4b52      	ldr	r3, [pc, #328]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b56      	ldr	r3, [pc, #344]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 80035cc:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80035ce:	4b54      	ldr	r3, [pc, #336]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fd99 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035de:	0003      	movs	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 80035e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80035ec:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	005a      	lsls	r2, r3, #1
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f002 fee2 	bl	80063c0 <Set_Status_Bit>
 80035fc:	e21a      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80035fe:	4b46      	ldr	r3, [pc, #280]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd fe3c 	bl	800127e <Is_OMNI_On>
 8003606:	0003      	movs	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d000      	beq.n	800360e <UART2_RX_transfer_complete_callback+0xd32>
 800360c:	e212      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800360e:	4b40      	ldr	r3, [pc, #256]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003616:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f002 fecd 	bl	80063c0 <Set_Status_Bit>
 8003626:	e205      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003628:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7fd fd60 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003630:	0003      	movs	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d000      	beq.n	8003638 <UART2_RX_transfer_complete_callback+0xd5c>
 8003636:	e1fd      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003638:	4b35      	ldr	r3, [pc, #212]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b3d      	ldr	r3, [pc, #244]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003640:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	005a      	lsls	r2, r3, #1
 800364c:	4b32      	ldr	r3, [pc, #200]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f002 feb5 	bl	80063c0 <Set_Status_Bit>
 8003656:	e1ed      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003658:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d100      	bne.n	8003664 <UART2_RX_transfer_complete_callback+0xd88>
 8003662:	e1e7      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	4b2b      	ldr	r3, [pc, #172]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f002 fe93 	bl	8006398 <Get_Status_Bit>
 8003672:	0003      	movs	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003678:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800367e:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd fd96 	bl	80011b2 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003686:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003688:	4b24      	ldr	r3, [pc, #144]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7fd fe10 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 8003692:	e1cf      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003694:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003696:	0018      	movs	r0, r3
 8003698:	f7fd fc33 	bl	8000f02 <Is_Data_Byte>
 800369c:	0003      	movs	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d000      	beq.n	80036a4 <UART2_RX_transfer_complete_callback+0xdc8>
 80036a2:	e133      	b.n	800390c <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80036a4:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7fd fc44 	bl	8000f34 <Is_PC_Status_Byte>
 80036ac:	0003      	movs	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d144      	bne.n	800373c <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7fd fd4c 	bl	8001152 <Is_Data_Buffer_Empty>
 80036ba:	0003      	movs	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d000      	beq.n	80036c2 <UART2_RX_transfer_complete_callback+0xde6>
 80036c0:	e1b8      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80036c4:	2104      	movs	r1, #4
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7fd fd91 	bl	80011ee <Is_Program_Change_Data_Byte_In_Range>
 80036cc:	0003      	movs	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10f      	bne.n	80036f2 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 80036d2:	f7fd fb49 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80036d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <UART2_RX_transfer_complete_callback+0xe5c>)
 80036e2:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80036e4:	f7fc ff1c 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80036ea:	2108      	movs	r1, #8
 80036ec:	0018      	movs	r0, r3
 80036ee:	f002 fe79 	bl	80063e4 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd fd5c 	bl	80011b2 <Clear_Data_Buffer>
							active_status_byte = 0;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f7fd fdd3 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 800370c:	e192      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	200004dc 	.word	0x200004dc
 8003714:	200004d0 	.word	0x200004d0
 8003718:	20000c3c 	.word	0x20000c3c
 800371c:	20000c44 	.word	0x20000c44
 8003720:	200004ca 	.word	0x200004ca
 8003724:	200004cc 	.word	0x200004cc
 8003728:	200004d1 	.word	0x200004d1
 800372c:	20000028 	.word	0x20000028
 8003730:	20000c5c 	.word	0x20000c5c
 8003734:	200004cb 	.word	0x200004cb
 8003738:	200004bc 	.word	0x200004bc

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 800373c:	4bc4      	ldr	r3, [pc, #784]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd fc14 	bl	8000f6c <Is_CC_Status_Byte>
 8003744:	0003      	movs	r3, r0
 8003746:	2b01      	cmp	r3, #1
 8003748:	d000      	beq.n	800374c <UART2_RX_transfer_complete_callback+0xe70>
 800374a:	e0d2      	b.n	80038f2 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800374c:	4bc1      	ldr	r3, [pc, #772]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd fcff 	bl	8001152 <Is_Data_Buffer_Empty>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800375a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4bbc      	ldr	r3, [pc, #752]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003762:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003764:	4bbd      	ldr	r3, [pc, #756]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e163      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 800376c:	4bba      	ldr	r3, [pc, #744]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4bb8      	ldr	r3, [pc, #736]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003774:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003776:	4aba      	ldr	r2, [pc, #744]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003778:	4bb8      	ldr	r3, [pc, #736]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f7fd fd98 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003782:	4bb7      	ldr	r3, [pc, #732]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003784:	2108      	movs	r1, #8
 8003786:	0018      	movs	r0, r3
 8003788:	f002 fe2c 	bl	80063e4 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800378c:	4bb1      	ldr	r3, [pc, #708]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800378e:	0018      	movs	r0, r3
 8003790:	f7fd fc08 	bl	8000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003794:	0003      	movs	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d14c      	bne.n	8003834 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 800379a:	4bb2      	ldr	r3, [pc, #712]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4bab      	ldr	r3, [pc, #684]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80037a2:	0011      	movs	r1, r2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fd fcb3 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037aa:	0003      	movs	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d139      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80037b0:	4aad      	ldr	r2, [pc, #692]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80037b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fc53 	bl	8001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80037bc:	0003      	movs	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d130      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80037c2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b79      	cmp	r3, #121	@ 0x79
 80037ca:	d10b      	bne.n	80037e4 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80037cc:	4aa7      	ldr	r2, [pc, #668]	@ (8003a6c <UART2_RX_transfer_complete_callback+0x1190>)
 80037ce:	4ba8      	ldr	r3, [pc, #672]	@ (8003a70 <UART2_RX_transfer_complete_callback+0x1194>)
 80037d0:	0011      	movs	r1, r2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd fd88 	bl	80012e8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80037da:	2108      	movs	r1, #8
 80037dc:	0018      	movs	r0, r3
 80037de:	f002 fe01 	bl	80063e4 <Clear_Status_Bit>
 80037e2:	e01f      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80037e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b7a      	cmp	r3, #122	@ 0x7a
 80037ec:	d107      	bne.n	80037fe <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 80037ee:	f7fd fdd5 	bl	800139c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037f2:	4b9b      	ldr	r3, [pc, #620]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80037f4:	2108      	movs	r1, #8
 80037f6:	0018      	movs	r0, r3
 80037f8:	f002 fdf4 	bl	80063e4 <Clear_Status_Bit>
 80037fc:	e012      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80037fe:	4b95      	ldr	r3, [pc, #596]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b7c      	cmp	r3, #124	@ 0x7c
 8003806:	d104      	bne.n	8003812 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003808:	4b95      	ldr	r3, [pc, #596]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fd fdfe 	bl	800140c <Set_OMNI_Off>
 8003810:	e008      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003812:	4b90      	ldr	r3, [pc, #576]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b7d      	cmp	r3, #125	@ 0x7d
 800381a:	d103      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 800381c:	4b90      	ldr	r3, [pc, #576]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7fd fe04 	bl	800142c <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003824:	4b8a      	ldr	r3, [pc, #552]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800382a:	4b8a      	ldr	r3, [pc, #552]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fcc0 	bl	80011b2 <Clear_Data_Buffer>
 8003832:	e0ff      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003834:	4b87      	ldr	r3, [pc, #540]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fbe0 	bl	8000ffc <Is_Utilised_CC_First_Data_Byte>
 800383c:	0003      	movs	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d14f      	bne.n	80038e2 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003842:	4b88      	ldr	r3, [pc, #544]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4b81      	ldr	r3, [pc, #516]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800384a:	0011      	movs	r1, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f7fd fc5f 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003852:	0003      	movs	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d006      	beq.n	8003866 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003858:	4b81      	ldr	r3, [pc, #516]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800385a:	0018      	movs	r0, r3
 800385c:	f7fd fd0f 	bl	800127e <Is_OMNI_On>
 8003860:	0003      	movs	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d135      	bne.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b14      	cmp	r3, #20
 800386e:	d104      	bne.n	800387a <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003870:	4b7d      	ldr	r3, [pc, #500]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 8003872:	0018      	movs	r0, r3
 8003874:	f7fd f9f6 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 8003878:	e02b      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 800387a:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b15      	cmp	r3, #21
 8003882:	d109      	bne.n	8003898 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003884:	4b78      	ldr	r3, [pc, #480]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 8003886:	0018      	movs	r0, r3
 8003888:	f7fd fa06 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800388c:	4b74      	ldr	r3, [pc, #464]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800388e:	2108      	movs	r1, #8
 8003890:	0018      	movs	r0, r3
 8003892:	f002 fda7 	bl	80063e4 <Clear_Status_Bit>
 8003896:	e01c      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003898:	4b6e      	ldr	r3, [pc, #440]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b16      	cmp	r3, #22
 80038a0:	d104      	bne.n	80038ac <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038a2:	4b71      	ldr	r3, [pc, #452]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fd fa11 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80038aa:	e012      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80038ac:	4b69      	ldr	r3, [pc, #420]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b17      	cmp	r3, #23
 80038b4:	d104      	bne.n	80038c0 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fd fa21 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80038be:	e008      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80038c0:	4b64      	ldr	r3, [pc, #400]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b18      	cmp	r3, #24
 80038c8:	d103      	bne.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038ca:	4b67      	ldr	r3, [pc, #412]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fd fa31 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80038d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fc69 	bl	80011b2 <Clear_Data_Buffer>
 80038e0:	e0a8      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80038e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fd fc61 	bl	80011b2 <Clear_Data_Buffer>
 80038f0:	e0a0      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 80038f2:	4b57      	ldr	r3, [pc, #348]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fd fbfb 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 80038fa:	0003      	movs	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d000      	beq.n	8003902 <UART2_RX_transfer_complete_callback+0x1026>
 8003900:	e098      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003902:	4b54      	ldr	r3, [pc, #336]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003904:	0018      	movs	r0, r3
 8003906:	f7fd fc24 	bl	8001152 <Is_Data_Buffer_Empty>
 800390a:	e093      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800390c:	4b51      	ldr	r3, [pc, #324]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800390e:	0018      	movs	r0, r3
 8003910:	f7fd fc4f 	bl	80011b2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003914:	4a52      	ldr	r2, [pc, #328]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003916:	4b51      	ldr	r3, [pc, #324]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f7fd fcc9 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003920:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fd fb06 	bl	8000f34 <Is_PC_Status_Byte>
 8003928:	0003      	movs	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d130      	bne.n	8003990 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 800392e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	4b4f      	ldr	r3, [pc, #316]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 8003936:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003938:	4b4a      	ldr	r3, [pc, #296]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f7fd fbe4 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003948:	0003      	movs	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10c      	bne.n	8003968 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 800394e:	4b42      	ldr	r3, [pc, #264]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b3e      	ldr	r3, [pc, #248]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003956:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	005a      	lsls	r2, r3, #1
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f002 fd2d 	bl	80063c0 <Set_Status_Bit>
 8003966:	e065      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003968:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7fd fc87 	bl	800127e <Is_OMNI_On>
 8003970:	0003      	movs	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d15e      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003976:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800397e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	005a      	lsls	r2, r3, #1
 8003984:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f002 fd19 	bl	80063c0 <Set_Status_Bit>
 800398e:	e051      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003990:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd faea 	bl	8000f6c <Is_CC_Status_Byte>
 8003998:	0003      	movs	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d130      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 800399e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 80039a6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fbac 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80039b8:	0003      	movs	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10c      	bne.n	80039d8 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80039c6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	005a      	lsls	r2, r3, #1
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f002 fcf5 	bl	80063c0 <Set_Status_Bit>
 80039d6:	e02d      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fd fc4f 	bl	800127e <Is_OMNI_On>
 80039e0:	0003      	movs	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d126      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80039ee:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	005a      	lsls	r2, r3, #1
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f002 fce1 	bl	80063c0 <Set_Status_Bit>
 80039fe:	e019      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003a00:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fd fb74 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d112      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003a16:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f002 fcca 	bl	80063c0 <Set_Status_Bit>
 8003a2c:	e002      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	e000      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003a32:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003a3a:	4907      	ldr	r1, [pc, #28]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <UART2_RX_transfer_complete_callback+0x119c>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f008 fbbf 	bl	800c1c4 <HAL_UART_Receive_DMA>
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	200004cb 	.word	0x200004cb
 8003a54:	200004d0 	.word	0x200004d0
 8003a58:	200004dc 	.word	0x200004dc
 8003a5c:	20000c44 	.word	0x20000c44
 8003a60:	20000c3c 	.word	0x20000c3c
 8003a64:	200004ca 	.word	0x200004ca
 8003a68:	200004d1 	.word	0x200004d1
 8003a6c:	20000028 	.word	0x20000028
 8003a70:	20000c5c 	.word	0x20000c5c
 8003a74:	200004cc 	.word	0x200004cc
 8003a78:	20000a48 	.word	0x20000a48

08003a7c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	0002      	movs	r2, r0
 8003a84:	1dbb      	adds	r3, r7, #6
 8003a86:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	2b80      	cmp	r3, #128	@ 0x80
 8003a8e:	d117      	bne.n	8003ac0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d004      	beq.n	8003aa4 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	23a0      	movs	r3, #160	@ 0xa0
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	2201      	movs	r2, #1
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f004 fd35 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	0018      	movs	r0, r3
 8003abc:	f004 fd2f 	bl	800851e <HAL_GPIO_WritePin>
		}
	}
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000430 	.word	0x20000430
 8003acc:	50000800 	.word	0x50000800

08003ad0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	d000      	beq.n	8003ae6 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003ae4:	e0dd      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003ae6:	4b71      	ldr	r3, [pc, #452]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d114      	bne.n	8003b1a <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	23a0      	movs	r3, #160	@ 0xa0
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	2200      	movs	r2, #0
 8003afa:	0018      	movs	r0, r3
 8003afc:	f004 fd0f 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b00:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f004 fd09 	bl	800851e <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003b0c:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b12:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003b18:	e0c3      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003b1a:	4b64      	ldr	r3, [pc, #400]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d114      	bne.n	8003b4e <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	23a0      	movs	r3, #160	@ 0xa0
 8003b2a:	05db      	lsls	r3, r3, #23
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f004 fcf5 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b34:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	2140      	movs	r1, #64	@ 0x40
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fcef 	bl	800851e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003b40:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b46:	4b59      	ldr	r3, [pc, #356]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	701a      	strb	r2, [r3, #0]
}
 8003b4c:	e0a9      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d114      	bne.n	8003b82 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	23a0      	movs	r3, #160	@ 0xa0
 8003b5e:	05db      	lsls	r3, r3, #23
 8003b60:	2200      	movs	r2, #0
 8003b62:	0018      	movs	r0, r3
 8003b64:	f004 fcdb 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b68:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f004 fcd5 	bl	800851e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003b74:	4b4d      	ldr	r3, [pc, #308]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b76:	2202      	movs	r2, #2
 8003b78:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
}
 8003b80:	e08f      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d12b      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b8c:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d126      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b96:	4b48      	ldr	r3, [pc, #288]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b98:	2120      	movs	r1, #32
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f002 fbfc 	bl	8006398 <Get_Status_Bit>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d11e      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	0099      	lsls	r1, r3, #2
 8003baa:	23a0      	movs	r3, #160	@ 0xa0
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	2200      	movs	r2, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f004 fcb4 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	2140      	movs	r1, #64	@ 0x40
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f004 fcae 	bl	800851e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bca:	2207      	movs	r2, #7
 8003bcc:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003bce:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f002 fc06 	bl	80063e4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003bd8:	4b37      	ldr	r3, [pc, #220]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f002 fc01 	bl	80063e4 <Clear_Status_Bit>
 8003be2:	e05e      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d12b      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bee:	4b31      	ldr	r3, [pc, #196]	@ (8003cb4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d126      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f002 fbcb 	bl	8006398 <Get_Status_Bit>
 8003c02:	0003      	movs	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d11e      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	23a0      	movs	r3, #160	@ 0xa0
 8003c0e:	05db      	lsls	r3, r3, #23
 8003c10:	2200      	movs	r2, #0
 8003c12:	0018      	movs	r0, r3
 8003c14:	f004 fc83 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	2140      	movs	r1, #64	@ 0x40
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f004 fc7d 	bl	800851e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003c24:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c26:	2208      	movs	r2, #8
 8003c28:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003c30:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c32:	2120      	movs	r1, #32
 8003c34:	0018      	movs	r0, r3
 8003c36:	f002 fbd5 	bl	80063e4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c3c:	2140      	movs	r1, #64	@ 0x40
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f002 fbd0 	bl	80063e4 <Clear_Status_Bit>
 8003c44:	e02d      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003c46:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d114      	bne.n	8003c7a <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	0099      	lsls	r1, r3, #2
 8003c54:	23a0      	movs	r3, #160	@ 0xa0
 8003c56:	05db      	lsls	r3, r3, #23
 8003c58:	2200      	movs	r2, #0
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f004 fc5f 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	2140      	movs	r1, #64	@ 0x40
 8003c66:	0018      	movs	r0, r3
 8003c68:	f004 fc59 	bl	800851e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c6e:	2207      	movs	r2, #7
 8003c70:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c74:	2206      	movs	r2, #6
 8003c76:	701a      	strb	r2, [r3, #0]
}
 8003c78:	e013      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d10e      	bne.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	23a0      	movs	r3, #160	@ 0xa0
 8003c8a:	05db      	lsls	r3, r3, #23
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f004 fc45 	bl	800851e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f004 fc3f 	bl	800851e <HAL_GPIO_WritePin>
}
 8003ca0:	e7ff      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	20000430 	.word	0x20000430
 8003cb0:	50000800 	.word	0x50000800
 8003cb4:	20000444 	.word	0x20000444
 8003cb8:	20000c3c 	.word	0x20000c3c

08003cbc <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};
	static volatile enum Validate preset_save_mode_is_inactive = YES;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003cc4:	250f      	movs	r5, #15
 8003cc6:	197c      	adds	r4, r7, r5
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	00da      	lsls	r2, r3, #3
 8003ccc:	23a0      	movs	r3, #160	@ 0xa0
 8003cce:	05db      	lsls	r3, r3, #23
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f004 fc06 	bl	80084e4 <HAL_GPIO_ReadPin>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_inactive == YES){
 8003cdc:	4bc2      	ldr	r3, [pc, #776]	@ (8003fe8 <LPTIM1_callback+0x32c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d000      	beq.n	8003ce8 <LPTIM1_callback+0x2c>
 8003ce6:	e1a2      	b.n	800402e <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003ce8:	4bc0      	ldr	r3, [pc, #768]	@ (8003fec <LPTIM1_callback+0x330>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10a      	bne.n	8003d08 <LPTIM1_callback+0x4c>
 8003cf2:	197b      	adds	r3, r7, r5
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003cfa:	4bbc      	ldr	r3, [pc, #752]	@ (8003fec <LPTIM1_callback+0x330>)
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003d00:	4bba      	ldr	r3, [pc, #744]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	705a      	strb	r2, [r3, #1]
 8003d06:	e070      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003d08:	4bb8      	ldr	r3, [pc, #736]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d10b      	bne.n	8003d2a <LPTIM1_callback+0x6e>
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d1c:	4bb3      	ldr	r3, [pc, #716]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d1e:	2205      	movs	r2, #5
 8003d20:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003d22:	4bb2      	ldr	r3, [pc, #712]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d24:	2202      	movs	r2, #2
 8003d26:	705a      	strb	r2, [r3, #1]
 8003d28:	e05f      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003d2a:	4bb0      	ldr	r3, [pc, #704]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d10b      	bne.n	8003d4c <LPTIM1_callback+0x90>
 8003d34:	230f      	movs	r3, #15
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d3e:	4bab      	ldr	r3, [pc, #684]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d40:	2205      	movs	r2, #5
 8003d42:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003d44:	4ba9      	ldr	r3, [pc, #676]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d46:	2203      	movs	r2, #3
 8003d48:	705a      	strb	r2, [r3, #1]
 8003d4a:	e04e      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d4c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d122      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d56:	230f      	movs	r3, #15
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d60:	4ba3      	ldr	r3, [pc, #652]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d6a:	4ba2      	ldr	r3, [pc, #648]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f002 fb12 	bl	8006398 <Get_Status_Bit>
 8003d74:	0003      	movs	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d110      	bne.n	8003d9c <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003d80:	4b9a      	ldr	r3, [pc, #616]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d82:	2206      	movs	r2, #6
 8003d84:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003d86:	4b9b      	ldr	r3, [pc, #620]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d88:	2120      	movs	r1, #32
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f002 fb2a 	bl	80063e4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d90:	4b98      	ldr	r3, [pc, #608]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d92:	2140      	movs	r1, #64	@ 0x40
 8003d94:	0018      	movs	r0, r3
 8003d96:	f002 fb25 	bl	80063e4 <Clear_Status_Bit>
 8003d9a:	e026      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d9c:	4b93      	ldr	r3, [pc, #588]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d121      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003da6:	230f      	movs	r3, #15
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11c      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003db0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d117      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003dba:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f002 faea 	bl	8006398 <Get_Status_Bit>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10f      	bne.n	8003dea <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003dca:	4b88      	ldr	r3, [pc, #544]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dcc:	2205      	movs	r2, #5
 8003dce:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003dd0:	4b86      	ldr	r3, [pc, #536]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003dd6:	4b87      	ldr	r3, [pc, #540]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003dd8:	2120      	movs	r1, #32
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f002 fb02 	bl	80063e4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003de0:	4b84      	ldr	r3, [pc, #528]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003de2:	2140      	movs	r1, #64	@ 0x40
 8003de4:	0018      	movs	r0, r3
 8003de6:	f002 fafd 	bl	80063e4 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003dea:	4b80      	ldr	r3, [pc, #512]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d004      	beq.n	8003dfe <LPTIM1_callback+0x142>
 8003df4:	4b7d      	ldr	r3, [pc, #500]	@ (8003fec <LPTIM1_callback+0x330>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d11a      	bne.n	8003e34 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff8 <LPTIM1_callback+0x33c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d108      	bne.n	8003e1a <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	0099      	lsls	r1, r3, #2
 8003e0c:	23a0      	movs	r3, #160	@ 0xa0
 8003e0e:	05db      	lsls	r3, r3, #23
 8003e10:	2200      	movs	r2, #0
 8003e12:	0018      	movs	r0, r3
 8003e14:	f004 fb83 	bl	800851e <HAL_GPIO_WritePin>
 8003e18:	e00c      	b.n	8003e34 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003e1a:	4b77      	ldr	r3, [pc, #476]	@ (8003ff8 <LPTIM1_callback+0x33c>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	0099      	lsls	r1, r3, #2
 8003e28:	23a0      	movs	r3, #160	@ 0xa0
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f004 fb75 	bl	800851e <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f002 faab 	bl	8006398 <Get_Status_Bit>
 8003e42:	0003      	movs	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d000      	beq.n	8003e4a <LPTIM1_callback+0x18e>
 8003e48:	e0c0      	b.n	8003fcc <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f002 fac6 	bl	80063e4 <Clear_Status_Bit>

			pots_counter = 0;
 8003e58:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <LPTIM1_callback+0x340>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003e5e:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d004      	beq.n	8003e72 <LPTIM1_callback+0x1b6>
 8003e68:	4b60      	ldr	r3, [pc, #384]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d105      	bne.n	8003e7e <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <LPTIM1_callback+0x344>)
 8003e74:	2101      	movs	r1, #1
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7fd faf8 	bl	800146c <Pot_Check>
 8003e7c:	e069      	b.n	8003f52 <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d117      	bne.n	8003eb8 <LPTIM1_callback+0x1fc>
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d112      	bne.n	8003eb8 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e92:	4b58      	ldr	r3, [pc, #352]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e94:	2140      	movs	r1, #64	@ 0x40
 8003e96:	0018      	movs	r0, r3
 8003e98:	f002 fa92 	bl	80063c0 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e9c:	4b55      	ldr	r3, [pc, #340]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e9e:	2120      	movs	r1, #32
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f002 fa79 	bl	8006398 <Get_Status_Bit>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d152      	bne.n	8003f52 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003eac:	4b54      	ldr	r3, [pc, #336]	@ (8004000 <LPTIM1_callback+0x344>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fd fadb 	bl	800146c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003eb6:	e04c      	b.n	8003f52 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fec <LPTIM1_callback+0x330>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d12b      	bne.n	8003f1a <LPTIM1_callback+0x25e>
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d126      	bne.n	8003f1a <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ecc:	4b49      	ldr	r3, [pc, #292]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003ece:	2140      	movs	r1, #64	@ 0x40
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f002 fa75 	bl	80063c0 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003ed8:	2120      	movs	r1, #32
 8003eda:	0018      	movs	r0, r3
 8003edc:	f002 fa5c 	bl	8006398 <Get_Status_Bit>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d135      	bne.n	8003f52 <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	0099      	lsls	r1, r3, #2
 8003eea:	23a0      	movs	r3, #160	@ 0xa0
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	2201      	movs	r2, #1
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f004 fb14 	bl	800851e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ef6:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <LPTIM1_callback+0x348>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2140      	movs	r1, #64	@ 0x40
 8003efc:	0018      	movs	r0, r3
 8003efe:	f004 fb0e 	bl	800851e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <LPTIM1_callback+0x34c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8003f08:	4b40      	ldr	r3, [pc, #256]	@ (800400c <LPTIM1_callback+0x350>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fd faaa 	bl	800146c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f18:	e01b      	b.n	8003f52 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003f1a:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <LPTIM1_callback+0x330>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d116      	bne.n	8003f52 <LPTIM1_callback+0x296>
 8003f24:	4b32      	ldr	r3, [pc, #200]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d111      	bne.n	8003f52 <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003f30:	2140      	movs	r1, #64	@ 0x40
 8003f32:	0018      	movs	r0, r3
 8003f34:	f002 fa44 	bl	80063c0 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f002 fa2b 	bl	8006398 <Get_Status_Bit>
 8003f42:	0003      	movs	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d104      	bne.n	8003f52 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f48:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fd fa8d 	bl	800146c <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003f52:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <LPTIM1_callback+0x354>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d004      	beq.n	8003f66 <LPTIM1_callback+0x2aa>
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <LPTIM1_callback+0x354>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d104      	bne.n	8003f70 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003f66:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd fa7e 	bl	800146c <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003f70:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <LPTIM1_callback+0x358>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d004      	beq.n	8003f84 <LPTIM1_callback+0x2c8>
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <LPTIM1_callback+0x358>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d104      	bne.n	8003f8e <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003f84:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f86:	2102      	movs	r1, #2
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fd fa6f 	bl	800146c <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003f8e:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <LPTIM1_callback+0x35c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d004      	beq.n	8003fa2 <LPTIM1_callback+0x2e6>
 8003f98:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <LPTIM1_callback+0x35c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d104      	bne.n	8003fac <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003fa2:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <LPTIM1_callback+0x344>)
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fd fa60 	bl	800146c <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <LPTIM1_callback+0x360>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d004      	beq.n	8003fc0 <LPTIM1_callback+0x304>
 8003fb6:	4b19      	ldr	r3, [pc, #100]	@ (800401c <LPTIM1_callback+0x360>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d136      	bne.n	800402e <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <LPTIM1_callback+0x344>)
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fd fa51 	bl	800146c <Pot_Check>
 8003fca:	e030      	b.n	800402e <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <LPTIM1_callback+0x340>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d124      	bne.n	8004020 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f002 f9ee 	bl	80063c0 <Set_Status_Bit>
 8003fe4:	e023      	b.n	800402e <LPTIM1_callback+0x372>
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	20000025 	.word	0x20000025
 8003fec:	20000430 	.word	0x20000430
 8003ff0:	20000444 	.word	0x20000444
 8003ff4:	20000c3c 	.word	0x20000c3c
 8003ff8:	20000c28 	.word	0x20000c28
 8003ffc:	200004e2 	.word	0x200004e2
 8004000:	20000c50 	.word	0x20000c50
 8004004:	50000800 	.word	0x50000800
 8004008:	20000cec 	.word	0x20000cec
 800400c:	20000c3a 	.word	0x20000c3a
 8004010:	20000438 	.word	0x20000438
 8004014:	20000434 	.word	0x20000434
 8004018:	2000043c 	.word	0x2000043c
 800401c:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 8004020:	4bc9      	ldr	r3, [pc, #804]	@ (8004348 <LPTIM1_callback+0x68c>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4bc7      	ldr	r3, [pc, #796]	@ (8004348 <LPTIM1_callback+0x68c>)
 800402c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 800402e:	4bc7      	ldr	r3, [pc, #796]	@ (800434c <LPTIM1_callback+0x690>)
 8004030:	0018      	movs	r0, r3
 8004032:	f7fd fb3b 	bl	80016ac <Check_Tap_Tempo_Switch_State>
	static enum Preset_Selected preset = PRESET_ONE;
	static enum Validate first_time = YES;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 8004036:	230e      	movs	r3, #14
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	4ac5      	ldr	r2, [pc, #788]	@ (8004350 <LPTIM1_callback+0x694>)
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]


	if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004040:	4bc2      	ldr	r3, [pc, #776]	@ (800434c <LPTIM1_callback+0x690>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d000      	beq.n	800404c <LPTIM1_callback+0x390>
 800404a:	e0b8      	b.n	80041be <LPTIM1_callback+0x502>

		//if switch gets depressed whilst timer hasn't yet timed out, essentially reset the timer
		if((Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == YES)
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	4bc0      	ldr	r3, [pc, #768]	@ (8004354 <LPTIM1_callback+0x698>)
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f002 f99f 	bl	8006398 <Get_Status_Bit>
 800405a:	0003      	movs	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d112      	bne.n	8004086 <LPTIM1_callback+0x3ca>
			&& (Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == NO)){
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	019a      	lsls	r2, r3, #6
 8004064:	4bbb      	ldr	r3, [pc, #748]	@ (8004354 <LPTIM1_callback+0x698>)
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f002 f995 	bl	8006398 <Get_Status_Bit>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d109      	bne.n	8004086 <LPTIM1_callback+0x3ca>

			Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	4bb7      	ldr	r3, [pc, #732]	@ (8004354 <LPTIM1_callback+0x698>)
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f002 f9b2 	bl	80063e4 <Clear_Status_Bit>
			advance_idle_counter = 0;
 8004080:	4bb5      	ldr	r3, [pc, #724]	@ (8004358 <LPTIM1_callback+0x69c>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
		}

		if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 8004086:	4bb5      	ldr	r3, [pc, #724]	@ (800435c <LPTIM1_callback+0x6a0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4ab5      	ldr	r2, [pc, #724]	@ (8004360 <LPTIM1_callback+0x6a4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d809      	bhi.n	80040a4 <LPTIM1_callback+0x3e8>
 8004090:	4bb2      	ldr	r3, [pc, #712]	@ (800435c <LPTIM1_callback+0x6a0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2bf9      	cmp	r3, #249	@ 0xf9
 8004096:	d805      	bhi.n	80040a4 <LPTIM1_callback+0x3e8>

			//save count will always be less than advance count
			depressed_num++;
 8004098:	4bb0      	ldr	r3, [pc, #704]	@ (800435c <LPTIM1_callback+0x6a0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	4baf      	ldr	r3, [pc, #700]	@ (800435c <LPTIM1_callback+0x6a0>)
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e146      	b.n	8004332 <LPTIM1_callback+0x676>
		}
		else if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 80040a4:	4bad      	ldr	r3, [pc, #692]	@ (800435c <LPTIM1_callback+0x6a0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4aad      	ldr	r2, [pc, #692]	@ (8004360 <LPTIM1_callback+0x6a4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d824      	bhi.n	80040f8 <LPTIM1_callback+0x43c>
 80040ae:	4bab      	ldr	r3, [pc, #684]	@ (800435c <LPTIM1_callback+0x6a0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2bf9      	cmp	r3, #249	@ 0xf9
 80040b4:	d920      	bls.n	80040f8 <LPTIM1_callback+0x43c>

			//if the depression of the switch after timeout 'becomes' a long press, reset the timer
			if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == YES){
 80040b6:	2380      	movs	r3, #128	@ 0x80
 80040b8:	019a      	lsls	r2, r3, #6
 80040ba:	4ba6      	ldr	r3, [pc, #664]	@ (8004354 <LPTIM1_callback+0x698>)
 80040bc:	0011      	movs	r1, r2
 80040be:	0018      	movs	r0, r3
 80040c0:	f002 f96a 	bl	8006398 <Get_Status_Bit>
 80040c4:	0003      	movs	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d110      	bne.n	80040ec <LPTIM1_callback+0x430>

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	4ba1      	ldr	r3, [pc, #644]	@ (8004354 <LPTIM1_callback+0x698>)
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f002 f986 	bl	80063e4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	019a      	lsls	r2, r3, #6
 80040dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004354 <LPTIM1_callback+0x698>)
 80040de:	0011      	movs	r1, r2
 80040e0:	0018      	movs	r0, r3
 80040e2:	f002 f97f 	bl	80063e4 <Clear_Status_Bit>
				advance_idle_counter = 0;
 80040e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004358 <LPTIM1_callback+0x69c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
			}

			depressed_num++;
 80040ec:	4b9b      	ldr	r3, [pc, #620]	@ (800435c <LPTIM1_callback+0x6a0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	4b9a      	ldr	r3, [pc, #616]	@ (800435c <LPTIM1_callback+0x6a0>)
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e11c      	b.n	8004332 <LPTIM1_callback+0x676>
		}
		else{

			preset_save_mode_is_inactive = NO;
 80040f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004364 <LPTIM1_callback+0x6a8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]

			//start counter
			Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	01da      	lsls	r2, r3, #7
 8004102:	4b94      	ldr	r3, [pc, #592]	@ (8004354 <LPTIM1_callback+0x698>)
 8004104:	0011      	movs	r1, r2
 8004106:	0018      	movs	r0, r3
 8004108:	f002 f95a 	bl	80063c0 <Set_Status_Bit>
			//reset counter
			preset_save_idle_counter = 0;
 800410c:	4b96      	ldr	r3, [pc, #600]	@ (8004368 <LPTIM1_callback+0x6ac>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

			depressed_num = 0;
 8004112:	4b92      	ldr	r3, [pc, #584]	@ (800435c <LPTIM1_callback+0x6a0>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

			if(first_time == YES){
 8004118:	4b94      	ldr	r3, [pc, #592]	@ (800436c <LPTIM1_callback+0x6b0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <LPTIM1_callback+0x474>

				first_time = NO;
 8004120:	4b92      	ldr	r3, [pc, #584]	@ (800436c <LPTIM1_callback+0x6b0>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
				led_state_saved = led_state;
 8004126:	4b92      	ldr	r3, [pc, #584]	@ (8004370 <LPTIM1_callback+0x6b4>)
 8004128:	220e      	movs	r2, #14
 800412a:	18ba      	adds	r2, r7, r2
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
			}

			if(preset == PRESET_ONE){
 8004130:	4b90      	ldr	r3, [pc, #576]	@ (8004374 <LPTIM1_callback+0x6b8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d108      	bne.n	800414a <LPTIM1_callback+0x48e>

				set_LED_to_state(&LED_fsm, LED_ONE_BLINK);
 8004138:	4b85      	ldr	r3, [pc, #532]	@ (8004350 <LPTIM1_callback+0x694>)
 800413a:	2103      	movs	r1, #3
 800413c:	0018      	movs	r0, r3
 800413e:	f7fc fe79 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_TWO;
 8004142:	4b8c      	ldr	r3, [pc, #560]	@ (8004374 <LPTIM1_callback+0x6b8>)
 8004144:	2202      	movs	r2, #2
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e025      	b.n	8004196 <LPTIM1_callback+0x4da>
			}
			else if(preset == PRESET_TWO){
 800414a:	4b8a      	ldr	r3, [pc, #552]	@ (8004374 <LPTIM1_callback+0x6b8>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d108      	bne.n	8004164 <LPTIM1_callback+0x4a8>

				set_LED_to_state(&LED_fsm, LED_TWO_BLINK);
 8004152:	4b7f      	ldr	r3, [pc, #508]	@ (8004350 <LPTIM1_callback+0x694>)
 8004154:	2104      	movs	r1, #4
 8004156:	0018      	movs	r0, r3
 8004158:	f7fc fe6c 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_THREE;
 800415c:	4b85      	ldr	r3, [pc, #532]	@ (8004374 <LPTIM1_callback+0x6b8>)
 800415e:	2203      	movs	r2, #3
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e018      	b.n	8004196 <LPTIM1_callback+0x4da>
			}
			else if(preset == PRESET_THREE){
 8004164:	4b83      	ldr	r3, [pc, #524]	@ (8004374 <LPTIM1_callback+0x6b8>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d108      	bne.n	800417e <LPTIM1_callback+0x4c2>

				set_LED_to_state(&LED_fsm, LED_THREE_BLINK);
 800416c:	4b78      	ldr	r3, [pc, #480]	@ (8004350 <LPTIM1_callback+0x694>)
 800416e:	2105      	movs	r1, #5
 8004170:	0018      	movs	r0, r3
 8004172:	f7fc fe5f 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_FOUR;
 8004176:	4b7f      	ldr	r3, [pc, #508]	@ (8004374 <LPTIM1_callback+0x6b8>)
 8004178:	2204      	movs	r2, #4
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e00b      	b.n	8004196 <LPTIM1_callback+0x4da>
			}
			else if(preset == PRESET_FOUR){
 800417e:	4b7d      	ldr	r3, [pc, #500]	@ (8004374 <LPTIM1_callback+0x6b8>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d107      	bne.n	8004196 <LPTIM1_callback+0x4da>

				set_LED_to_state(&LED_fsm, LED_FOUR_BLINK);
 8004186:	4b72      	ldr	r3, [pc, #456]	@ (8004350 <LPTIM1_callback+0x694>)
 8004188:	2106      	movs	r1, #6
 800418a:	0018      	movs	r0, r3
 800418c:	f7fc fe52 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_ONE;
 8004190:	4b78      	ldr	r3, [pc, #480]	@ (8004374 <LPTIM1_callback+0x6b8>)
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004196:	4b78      	ldr	r3, [pc, #480]	@ (8004378 <LPTIM1_callback+0x6bc>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b05      	cmp	r3, #5
 800419e:	d000      	beq.n	80041a2 <LPTIM1_callback+0x4e6>
 80041a0:	e0c7      	b.n	8004332 <LPTIM1_callback+0x676>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 80041a2:	210c      	movs	r1, #12
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	4a74      	ldr	r2, [pc, #464]	@ (8004378 <LPTIM1_callback+0x6bc>)
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 80041ac:	4b72      	ldr	r3, [pc, #456]	@ (8004378 <LPTIM1_callback+0x6bc>)
 80041ae:	4a72      	ldr	r2, [pc, #456]	@ (8004378 <LPTIM1_callback+0x6bc>)
 80041b0:	7852      	ldrb	r2, [r2, #1]
 80041b2:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 80041b4:	4b70      	ldr	r3, [pc, #448]	@ (8004378 <LPTIM1_callback+0x6bc>)
 80041b6:	187a      	adds	r2, r7, r1
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	705a      	strb	r2, [r3, #1]
 80041bc:	e0b9      	b.n	8004332 <LPTIM1_callback+0x676>
		}
	}
	else{

		//if preset save timer has timed out, come out of preset save mode
		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out) == YES){
 80041be:	2380      	movs	r3, #128	@ 0x80
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	4b64      	ldr	r3, [pc, #400]	@ (8004354 <LPTIM1_callback+0x698>)
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f002 f8e6 	bl	8006398 <Get_Status_Bit>
 80041cc:	0003      	movs	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d11b      	bne.n	800420a <LPTIM1_callback+0x54e>

			preset = PRESET_ONE;
 80041d2:	4b68      	ldr	r3, [pc, #416]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
			depressed_num = 0;
 80041d8:	4b60      	ldr	r3, [pc, #384]	@ (800435c <LPTIM1_callback+0x6a0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
			preset_save_mode_is_inactive = YES;
 80041de:	4b61      	ldr	r3, [pc, #388]	@ (8004364 <LPTIM1_callback+0x6a8>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	701a      	strb	r2, [r3, #0]
			first_time = NO;
 80041e4:	4b61      	ldr	r3, [pc, #388]	@ (800436c <LPTIM1_callback+0x6b0>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
			LED_fsm.prev_state = LED_fsm.current_state;
 80041ea:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <LPTIM1_callback+0x694>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	4b57      	ldr	r3, [pc, #348]	@ (8004350 <LPTIM1_callback+0x694>)
 80041f2:	705a      	strb	r2, [r3, #1]
			LED_fsm.current_state = led_state_saved;
 80041f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004370 <LPTIM1_callback+0x6b4>)
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <LPTIM1_callback+0x694>)
 80041fa:	701a      	strb	r2, [r3, #0]

			Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	4b54      	ldr	r3, [pc, #336]	@ (8004354 <LPTIM1_callback+0x698>)
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f002 f8ed 	bl	80063e4 <Clear_Status_Bit>
		}

		if((preset_save_mode_is_inactive == NO) && (depressed_num == 0)){ //timer only start counting if footswitch has been long pressed, to enter preset save mode, and then released
 800420a:	4b56      	ldr	r3, [pc, #344]	@ (8004364 <LPTIM1_callback+0x6a8>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d119      	bne.n	8004248 <LPTIM1_callback+0x58c>
 8004214:	4b51      	ldr	r3, [pc, #324]	@ (800435c <LPTIM1_callback+0x6a0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d115      	bne.n	8004248 <LPTIM1_callback+0x58c>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == NO){
 800421c:	2380      	movs	r3, #128	@ 0x80
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	4b4c      	ldr	r3, [pc, #304]	@ (8004354 <LPTIM1_callback+0x698>)
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f002 f8b7 	bl	8006398 <Get_Status_Bit>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d10c      	bne.n	8004248 <LPTIM1_callback+0x58c>

				Set_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	4b48      	ldr	r3, [pc, #288]	@ (8004354 <LPTIM1_callback+0x698>)
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f002 f8c2 	bl	80063c0 <Set_Status_Bit>

				//debug
				HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 1);
 800423c:	4b4f      	ldr	r3, [pc, #316]	@ (800437c <LPTIM1_callback+0x6c0>)
 800423e:	2201      	movs	r2, #1
 8004240:	2110      	movs	r1, #16
 8004242:	0018      	movs	r0, r3
 8004244:	f004 f96b 	bl	800851e <HAL_GPIO_WritePin>
				//debug end
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == YES){
 8004248:	2380      	movs	r3, #128	@ 0x80
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <LPTIM1_callback+0x698>)
 800424e:	0011      	movs	r1, r2
 8004250:	0018      	movs	r0, r3
 8004252:	f002 f8a1 	bl	8006398 <Get_Status_Bit>
 8004256:	0003      	movs	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d155      	bne.n	8004308 <LPTIM1_callback+0x64c>

			//don't clear timeout flag here, otherwise the depressed_num counter cannot accumulate to cause the below if statement to trigger

			//debug
			HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 800425c:	4b47      	ldr	r3, [pc, #284]	@ (800437c <LPTIM1_callback+0x6c0>)
 800425e:	2201      	movs	r2, #1
 8004260:	2140      	movs	r1, #64	@ 0x40
 8004262:	0018      	movs	r0, r3
 8004264:	f004 f95b 	bl	800851e <HAL_GPIO_WritePin>
			//debug end

			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT)){
 8004268:	4b3c      	ldr	r3, [pc, #240]	@ (800435c <LPTIM1_callback+0x6a0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2bf9      	cmp	r3, #249	@ 0xf9
 800426e:	d94b      	bls.n	8004308 <LPTIM1_callback+0x64c>
 8004270:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <LPTIM1_callback+0x6a0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3a      	ldr	r2, [pc, #232]	@ (8004360 <LPTIM1_callback+0x6a4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d846      	bhi.n	8004308 <LPTIM1_callback+0x64c>

				//led confirm - overwrite prev state with saved state
				LED_fsm.prev_state = led_state_saved;
 800427a:	4b3d      	ldr	r3, [pc, #244]	@ (8004370 <LPTIM1_callback+0x6b4>)
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	4b34      	ldr	r3, [pc, #208]	@ (8004350 <LPTIM1_callback+0x694>)
 8004280:	705a      	strb	r2, [r3, #1]
				set_LED_to_state(&LED_fsm, LED_CONFIRM);
 8004282:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <LPTIM1_callback+0x694>)
 8004284:	2107      	movs	r1, #7
 8004286:	0018      	movs	r0, r3
 8004288:	f7fc fdd4 	bl	8000e34 <set_LED_to_state>

				//reset
				first_time = YES;
 800428c:	4b37      	ldr	r3, [pc, #220]	@ (800436c <LPTIM1_callback+0x6b0>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 8004292:	4b34      	ldr	r3, [pc, #208]	@ (8004364 <LPTIM1_callback+0x6a8>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]

				//get correct preset, as it will be 'off by one'
				if(preset == PRESET_ONE){
 8004298:	4b36      	ldr	r3, [pc, #216]	@ (8004374 <LPTIM1_callback+0x6b8>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d103      	bne.n	80042a8 <LPTIM1_callback+0x5ec>

					preset = PRESET_FOUR;
 80042a0:	4b34      	ldr	r3, [pc, #208]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042a2:	2204      	movs	r2, #4
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e016      	b.n	80042d6 <LPTIM1_callback+0x61a>
				}
				else if(preset == PRESET_TWO){
 80042a8:	4b32      	ldr	r3, [pc, #200]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d103      	bne.n	80042b8 <LPTIM1_callback+0x5fc>

					preset = PRESET_ONE;
 80042b0:	4b30      	ldr	r3, [pc, #192]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e00e      	b.n	80042d6 <LPTIM1_callback+0x61a>
				}
				else if(preset == PRESET_THREE){
 80042b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d103      	bne.n	80042c8 <LPTIM1_callback+0x60c>

					preset = PRESET_TWO;
 80042c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042c2:	2202      	movs	r2, #2
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e006      	b.n	80042d6 <LPTIM1_callback+0x61a>
				}
				else if(preset == PRESET_FOUR){
 80042c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d102      	bne.n	80042d6 <LPTIM1_callback+0x61a>

					preset = PRESET_THREE;
 80042d0:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042d2:	2203      	movs	r2, #3
 80042d4:	701a      	strb	r2, [r3, #0]
				}

				//convert running params to preset, and update user preset and user preset used
				Store_Params_as_User_Preset(preset,
 80042d6:	4b27      	ldr	r3, [pc, #156]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042d8:	7818      	ldrb	r0, [r3, #0]
 80042da:	4c29      	ldr	r4, [pc, #164]	@ (8004380 <LPTIM1_callback+0x6c4>)
 80042dc:	4a29      	ldr	r2, [pc, #164]	@ (8004384 <LPTIM1_callback+0x6c8>)
 80042de:	492a      	ldr	r1, [pc, #168]	@ (8004388 <LPTIM1_callback+0x6cc>)
 80042e0:	4b2a      	ldr	r3, [pc, #168]	@ (800438c <LPTIM1_callback+0x6d0>)
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <LPTIM1_callback+0x6d4>)
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	0023      	movs	r3, r4
 80042ea:	f7fc fd75 	bl	8000dd8 <Store_Params_as_User_Preset>
											user_presets_array,
											factory_presets_array,
											presets_converted_array);

				//set the current pot mode to PC_MODE and update current preset active
				Set_All_Pots_to_PC_Mode();
 80042ee:	f7fc fd3b 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
				preset_selected = preset;
 80042f2:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <LPTIM1_callback+0x6b8>)
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <LPTIM1_callback+0x6d8>)
 80042f8:	701a      	strb	r2, [r3, #0]

				//store presets in flash
				//@TODO

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 80042fa:	2380      	movs	r3, #128	@ 0x80
 80042fc:	019a      	lsls	r2, r3, #6
 80042fe:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <LPTIM1_callback+0x698>)
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f002 f86e 	bl	80063e4 <Clear_Status_Bit>
			}
		}

		depressed_num = 0; //important if switch is released early
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <LPTIM1_callback+0x6a0>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

		if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <LPTIM1_callback+0x6bc>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b05      	cmp	r3, #5
 8004316:	d10c      	bne.n	8004332 <LPTIM1_callback+0x676>

			union Speed_FSM_States curr_state = speed_fsm.current_state;
 8004318:	2108      	movs	r1, #8
 800431a:	187b      	adds	r3, r7, r1
 800431c:	4a16      	ldr	r2, [pc, #88]	@ (8004378 <LPTIM1_callback+0x6bc>)
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
			speed_fsm.current_state = speed_fsm.prev_state;
 8004322:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <LPTIM1_callback+0x6bc>)
 8004324:	4a14      	ldr	r2, [pc, #80]	@ (8004378 <LPTIM1_callback+0x6bc>)
 8004326:	7852      	ldrb	r2, [r2, #1]
 8004328:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state = curr_state;
 800432a:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <LPTIM1_callback+0x6bc>)
 800432c:	187a      	adds	r2, r7, r1
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	705a      	strb	r2, [r3, #1]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004332:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <LPTIM1_callback+0x6dc>)
 8004334:	22fa      	movs	r2, #250	@ 0xfa
 8004336:	21fa      	movs	r1, #250	@ 0xfa
 8004338:	0018      	movs	r0, r3
 800433a:	f004 f9e7 	bl	800870c <HAL_LPTIM_SetOnce_Start_IT>

}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	b004      	add	sp, #16
 8004344:	bdb0      	pop	{r4, r5, r7, pc}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	200004e2 	.word	0x200004e2
 800434c:	20000c28 	.word	0x20000c28
 8004350:	20000448 	.word	0x20000448
 8004354:	20000c3c 	.word	0x20000c3c
 8004358:	20000c48 	.word	0x20000c48
 800435c:	20000c2c 	.word	0x20000c2c
 8004360:	000009c3 	.word	0x000009c3
 8004364:	20000025 	.word	0x20000025
 8004368:	20000c4c 	.word	0x20000c4c
 800436c:	20000026 	.word	0x20000026
 8004370:	20000c30 	.word	0x20000c30
 8004374:	20000027 	.word	0x20000027
 8004378:	20000430 	.word	0x20000430
 800437c:	50000400 	.word	0x50000400
 8004380:	20000484 	.word	0x20000484
 8004384:	200004c0 	.word	0x200004c0
 8004388:	20000c5c 	.word	0x20000c5c
 800438c:	20000494 	.word	0x20000494
 8004390:	20000474 	.word	0x20000474
 8004394:	200004bc 	.word	0x200004bc
 8004398:	20000bcc 	.word	0x20000bcc

0800439c <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]


}
 80043a4:	46c0      	nop			@ (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}

080043ac <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 80043b4:	4bd1      	ldr	r3, [pc, #836]	@ (80046fc <TIM14_callback+0x350>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d106      	bne.n	80043cc <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80043be:	4bd0      	ldr	r3, [pc, #832]	@ (8004700 <TIM14_callback+0x354>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	2140      	movs	r1, #64	@ 0x40
 80043c4:	0018      	movs	r0, r3
 80043c6:	f004 f8aa 	bl	800851e <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 80043ca:	e1c3      	b.n	8004754 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 80043cc:	4bcb      	ldr	r3, [pc, #812]	@ (80046fc <TIM14_callback+0x350>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d106      	bne.n	80043e4 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80043d6:	4bca      	ldr	r3, [pc, #808]	@ (8004700 <TIM14_callback+0x354>)
 80043d8:	2200      	movs	r2, #0
 80043da:	2140      	movs	r1, #64	@ 0x40
 80043dc:	0018      	movs	r0, r3
 80043de:	f004 f89e 	bl	800851e <HAL_GPIO_WritePin>
}
 80043e2:	e1b7      	b.n	8004754 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 80043e4:	4bc5      	ldr	r3, [pc, #788]	@ (80046fc <TIM14_callback+0x350>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d133      	bne.n	8004456 <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80043ee:	4bc5      	ldr	r3, [pc, #788]	@ (8004704 <TIM14_callback+0x358>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 80043f6:	4bc4      	ldr	r3, [pc, #784]	@ (8004708 <TIM14_callback+0x35c>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004400:	4bbf      	ldr	r3, [pc, #764]	@ (8004700 <TIM14_callback+0x354>)
 8004402:	2201      	movs	r2, #1
 8004404:	2140      	movs	r1, #64	@ 0x40
 8004406:	0018      	movs	r0, r3
 8004408:	f004 f889 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 800440c:	4bbe      	ldr	r3, [pc, #760]	@ (8004708 <TIM14_callback+0x35c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3301      	adds	r3, #1
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4bbc      	ldr	r3, [pc, #752]	@ (8004708 <TIM14_callback+0x35c>)
 8004418:	701a      	strb	r2, [r3, #0]
}
 800441a:	e19b      	b.n	8004754 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 800441c:	4bba      	ldr	r3, [pc, #744]	@ (8004708 <TIM14_callback+0x35c>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b04      	cmp	r3, #4
 8004424:	d900      	bls.n	8004428 <TIM14_callback+0x7c>
 8004426:	e195      	b.n	8004754 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004428:	4bb5      	ldr	r3, [pc, #724]	@ (8004700 <TIM14_callback+0x354>)
 800442a:	2200      	movs	r2, #0
 800442c:	2140      	movs	r1, #64	@ 0x40
 800442e:	0018      	movs	r0, r3
 8004430:	f004 f875 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 8004434:	4bb4      	ldr	r3, [pc, #720]	@ (8004708 <TIM14_callback+0x35c>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	3301      	adds	r3, #1
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4bb2      	ldr	r3, [pc, #712]	@ (8004708 <TIM14_callback+0x35c>)
 8004440:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 8004442:	4bb1      	ldr	r3, [pc, #708]	@ (8004708 <TIM14_callback+0x35c>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b05      	cmp	r3, #5
 800444a:	d000      	beq.n	800444e <TIM14_callback+0xa2>
 800444c:	e182      	b.n	8004754 <TIM14_callback+0x3a8>
				LED_counter = 0;
 800444e:	4bae      	ldr	r3, [pc, #696]	@ (8004708 <TIM14_callback+0x35c>)
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
}
 8004454:	e17e      	b.n	8004754 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 8004456:	4ba9      	ldr	r3, [pc, #676]	@ (80046fc <TIM14_callback+0x350>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b04      	cmp	r3, #4
 800445e:	d156      	bne.n	800450e <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004460:	4ba8      	ldr	r3, [pc, #672]	@ (8004704 <TIM14_callback+0x358>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2200      	movs	r2, #0
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8004468:	4ba7      	ldr	r3, [pc, #668]	@ (8004708 <TIM14_callback+0x35c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d815      	bhi.n	800449e <TIM14_callback+0xf2>
 8004472:	4ba5      	ldr	r3, [pc, #660]	@ (8004708 <TIM14_callback+0x35c>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004482:	4b9f      	ldr	r3, [pc, #636]	@ (8004700 <TIM14_callback+0x354>)
 8004484:	2201      	movs	r2, #1
 8004486:	2140      	movs	r1, #64	@ 0x40
 8004488:	0018      	movs	r0, r3
 800448a:	f004 f848 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 800448e:	4b9e      	ldr	r3, [pc, #632]	@ (8004708 <TIM14_callback+0x35c>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3301      	adds	r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	4b9b      	ldr	r3, [pc, #620]	@ (8004708 <TIM14_callback+0x35c>)
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e15a      	b.n	8004754 <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 800449e:	4b9a      	ldr	r3, [pc, #616]	@ (8004708 <TIM14_callback+0x35c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d815      	bhi.n	80044d4 <TIM14_callback+0x128>
 80044a8:	4b97      	ldr	r3, [pc, #604]	@ (8004708 <TIM14_callback+0x35c>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2201      	movs	r2, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d10d      	bne.n	80044d4 <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044b8:	4b91      	ldr	r3, [pc, #580]	@ (8004700 <TIM14_callback+0x354>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	2140      	movs	r1, #64	@ 0x40
 80044be:	0018      	movs	r0, r3
 80044c0:	f004 f82d 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 80044c4:	4b90      	ldr	r3, [pc, #576]	@ (8004708 <TIM14_callback+0x35c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b8e      	ldr	r3, [pc, #568]	@ (8004708 <TIM14_callback+0x35c>)
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e13f      	b.n	8004754 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 80044d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004708 <TIM14_callback+0x35c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d900      	bls.n	80044e0 <TIM14_callback+0x134>
 80044de:	e139      	b.n	8004754 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044e0:	4b87      	ldr	r3, [pc, #540]	@ (8004700 <TIM14_callback+0x354>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	2140      	movs	r1, #64	@ 0x40
 80044e6:	0018      	movs	r0, r3
 80044e8:	f004 f819 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 80044ec:	4b86      	ldr	r3, [pc, #536]	@ (8004708 <TIM14_callback+0x35c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b84      	ldr	r3, [pc, #528]	@ (8004708 <TIM14_callback+0x35c>)
 80044f8:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 80044fa:	4b83      	ldr	r3, [pc, #524]	@ (8004708 <TIM14_callback+0x35c>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b07      	cmp	r3, #7
 8004502:	d000      	beq.n	8004506 <TIM14_callback+0x15a>
 8004504:	e126      	b.n	8004754 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004506:	4b80      	ldr	r3, [pc, #512]	@ (8004708 <TIM14_callback+0x35c>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
}
 800450c:	e122      	b.n	8004754 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 800450e:	4b7b      	ldr	r3, [pc, #492]	@ (80046fc <TIM14_callback+0x350>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b05      	cmp	r3, #5
 8004516:	d156      	bne.n	80045c6 <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004518:	4b7a      	ldr	r3, [pc, #488]	@ (8004704 <TIM14_callback+0x358>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004520:	4b79      	ldr	r3, [pc, #484]	@ (8004708 <TIM14_callback+0x35c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b04      	cmp	r3, #4
 8004528:	d815      	bhi.n	8004556 <TIM14_callback+0x1aa>
 800452a:	4b77      	ldr	r3, [pc, #476]	@ (8004708 <TIM14_callback+0x35c>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800453a:	4b71      	ldr	r3, [pc, #452]	@ (8004700 <TIM14_callback+0x354>)
 800453c:	2201      	movs	r2, #1
 800453e:	2140      	movs	r1, #64	@ 0x40
 8004540:	0018      	movs	r0, r3
 8004542:	f003 ffec 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 8004546:	4b70      	ldr	r3, [pc, #448]	@ (8004708 <TIM14_callback+0x35c>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	3301      	adds	r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	4b6d      	ldr	r3, [pc, #436]	@ (8004708 <TIM14_callback+0x35c>)
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	e0fe      	b.n	8004754 <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8004556:	4b6c      	ldr	r3, [pc, #432]	@ (8004708 <TIM14_callback+0x35c>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b04      	cmp	r3, #4
 800455e:	d815      	bhi.n	800458c <TIM14_callback+0x1e0>
 8004560:	4b69      	ldr	r3, [pc, #420]	@ (8004708 <TIM14_callback+0x35c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2201      	movs	r2, #1
 8004568:	4013      	ands	r3, r2
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10d      	bne.n	800458c <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004570:	4b63      	ldr	r3, [pc, #396]	@ (8004700 <TIM14_callback+0x354>)
 8004572:	2200      	movs	r2, #0
 8004574:	2140      	movs	r1, #64	@ 0x40
 8004576:	0018      	movs	r0, r3
 8004578:	f003 ffd1 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 800457c:	4b62      	ldr	r3, [pc, #392]	@ (8004708 <TIM14_callback+0x35c>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3301      	adds	r3, #1
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4b60      	ldr	r3, [pc, #384]	@ (8004708 <TIM14_callback+0x35c>)
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e0e3      	b.n	8004754 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 800458c:	4b5e      	ldr	r3, [pc, #376]	@ (8004708 <TIM14_callback+0x35c>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b08      	cmp	r3, #8
 8004594:	d900      	bls.n	8004598 <TIM14_callback+0x1ec>
 8004596:	e0dd      	b.n	8004754 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004598:	4b59      	ldr	r3, [pc, #356]	@ (8004700 <TIM14_callback+0x354>)
 800459a:	2200      	movs	r2, #0
 800459c:	2140      	movs	r1, #64	@ 0x40
 800459e:	0018      	movs	r0, r3
 80045a0:	f003 ffbd 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 80045a4:	4b58      	ldr	r3, [pc, #352]	@ (8004708 <TIM14_callback+0x35c>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b56      	ldr	r3, [pc, #344]	@ (8004708 <TIM14_callback+0x35c>)
 80045b0:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 80045b2:	4b55      	ldr	r3, [pc, #340]	@ (8004708 <TIM14_callback+0x35c>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b09      	cmp	r3, #9
 80045ba:	d000      	beq.n	80045be <TIM14_callback+0x212>
 80045bc:	e0ca      	b.n	8004754 <TIM14_callback+0x3a8>
				LED_counter = 0;
 80045be:	4b52      	ldr	r3, [pc, #328]	@ (8004708 <TIM14_callback+0x35c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
}
 80045c4:	e0c6      	b.n	8004754 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 80045c6:	4b4d      	ldr	r3, [pc, #308]	@ (80046fc <TIM14_callback+0x350>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b06      	cmp	r3, #6
 80045ce:	d156      	bne.n	800467e <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80045d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004704 <TIM14_callback+0x358>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2200      	movs	r2, #0
 80045d6:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 80045d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004708 <TIM14_callback+0x35c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d815      	bhi.n	800460e <TIM14_callback+0x262>
 80045e2:	4b49      	ldr	r3, [pc, #292]	@ (8004708 <TIM14_callback+0x35c>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80045f2:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <TIM14_callback+0x354>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	2140      	movs	r1, #64	@ 0x40
 80045f8:	0018      	movs	r0, r3
 80045fa:	f003 ff90 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 80045fe:	4b42      	ldr	r3, [pc, #264]	@ (8004708 <TIM14_callback+0x35c>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	3301      	adds	r3, #1
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b3f      	ldr	r3, [pc, #252]	@ (8004708 <TIM14_callback+0x35c>)
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e0a2      	b.n	8004754 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 800460e:	4b3e      	ldr	r3, [pc, #248]	@ (8004708 <TIM14_callback+0x35c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b06      	cmp	r3, #6
 8004616:	d815      	bhi.n	8004644 <TIM14_callback+0x298>
 8004618:	4b3b      	ldr	r3, [pc, #236]	@ (8004708 <TIM14_callback+0x35c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2201      	movs	r2, #1
 8004620:	4013      	ands	r3, r2
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10d      	bne.n	8004644 <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004628:	4b35      	ldr	r3, [pc, #212]	@ (8004700 <TIM14_callback+0x354>)
 800462a:	2200      	movs	r2, #0
 800462c:	2140      	movs	r1, #64	@ 0x40
 800462e:	0018      	movs	r0, r3
 8004630:	f003 ff75 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 8004634:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <TIM14_callback+0x35c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	3301      	adds	r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4b32      	ldr	r3, [pc, #200]	@ (8004708 <TIM14_callback+0x35c>)
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e087      	b.n	8004754 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004644:	4b30      	ldr	r3, [pc, #192]	@ (8004708 <TIM14_callback+0x35c>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b0a      	cmp	r3, #10
 800464c:	d900      	bls.n	8004650 <TIM14_callback+0x2a4>
 800464e:	e081      	b.n	8004754 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <TIM14_callback+0x354>)
 8004652:	2200      	movs	r2, #0
 8004654:	2140      	movs	r1, #64	@ 0x40
 8004656:	0018      	movs	r0, r3
 8004658:	f003 ff61 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 800465c:	4b2a      	ldr	r3, [pc, #168]	@ (8004708 <TIM14_callback+0x35c>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3301      	adds	r3, #1
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4b28      	ldr	r3, [pc, #160]	@ (8004708 <TIM14_callback+0x35c>)
 8004668:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 800466a:	4b27      	ldr	r3, [pc, #156]	@ (8004708 <TIM14_callback+0x35c>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b0b      	cmp	r3, #11
 8004672:	d000      	beq.n	8004676 <TIM14_callback+0x2ca>
 8004674:	e06e      	b.n	8004754 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004676:	4b24      	ldr	r3, [pc, #144]	@ (8004708 <TIM14_callback+0x35c>)
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
}
 800467c:	e06a      	b.n	8004754 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 800467e:	4b1f      	ldr	r3, [pc, #124]	@ (80046fc <TIM14_callback+0x350>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b07      	cmp	r3, #7
 8004686:	d165      	bne.n	8004754 <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004688:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <TIM14_callback+0x358>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004690:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <TIM14_callback+0x35c>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b06      	cmp	r3, #6
 8004698:	d815      	bhi.n	80046c6 <TIM14_callback+0x31a>
 800469a:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <TIM14_callback+0x35c>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80046aa:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <TIM14_callback+0x354>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	2140      	movs	r1, #64	@ 0x40
 80046b0:	0018      	movs	r0, r3
 80046b2:	f003 ff34 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <TIM14_callback+0x35c>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <TIM14_callback+0x35c>)
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e046      	b.n	8004754 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <TIM14_callback+0x35c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b06      	cmp	r3, #6
 80046ce:	d81d      	bhi.n	800470c <TIM14_callback+0x360>
 80046d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <TIM14_callback+0x35c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2201      	movs	r2, #1
 80046d8:	4013      	ands	r3, r2
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d115      	bne.n	800470c <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80046e0:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <TIM14_callback+0x354>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	2140      	movs	r1, #64	@ 0x40
 80046e6:	0018      	movs	r0, r3
 80046e8:	f003 ff19 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <TIM14_callback+0x35c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <TIM14_callback+0x35c>)
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e02b      	b.n	8004754 <TIM14_callback+0x3a8>
 80046fc:	20000448 	.word	0x20000448
 8004700:	50000800 	.word	0x50000800
 8004704:	200005e0 	.word	0x200005e0
 8004708:	200004c9 	.word	0x200004c9
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 800470c:	4b13      	ldr	r3, [pc, #76]	@ (800475c <TIM14_callback+0x3b0>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b0a      	cmp	r3, #10
 8004714:	d81e      	bhi.n	8004754 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004716:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <TIM14_callback+0x3b4>)
 8004718:	2200      	movs	r2, #0
 800471a:	2140      	movs	r1, #64	@ 0x40
 800471c:	0018      	movs	r0, r3
 800471e:	f003 fefe 	bl	800851e <HAL_GPIO_WritePin>
			LED_counter++;
 8004722:	4b0e      	ldr	r3, [pc, #56]	@ (800475c <TIM14_callback+0x3b0>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3301      	adds	r3, #1
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <TIM14_callback+0x3b0>)
 800472e:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004730:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <TIM14_callback+0x3b0>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b0b      	cmp	r3, #11
 8004738:	d10c      	bne.n	8004754 <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 800473a:	210f      	movs	r1, #15
 800473c:	187b      	adds	r3, r7, r1
 800473e:	4a09      	ldr	r2, [pc, #36]	@ (8004764 <TIM14_callback+0x3b8>)
 8004740:	7852      	ldrb	r2, [r2, #1]
 8004742:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 8004744:	187b      	adds	r3, r7, r1
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <TIM14_callback+0x3b8>)
 800474a:	0011      	movs	r1, r2
 800474c:	0018      	movs	r0, r3
 800474e:	f7fc fb71 	bl	8000e34 <set_LED_to_state>
}
 8004752:	e7ff      	b.n	8004754 <TIM14_callback+0x3a8>
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b004      	add	sp, #16
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200004c9 	.word	0x200004c9
 8004760:	50000800 	.word	0x50000800
 8004764:	20000448 	.word	0x20000448

08004768 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	0002      	movs	r2, r0
 8004770:	6039      	str	r1, [r7, #0]
 8004772:	1dbb      	adds	r3, r7, #6
 8004774:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004776:	4b34      	ldr	r3, [pc, #208]	@ (8004848 <Input_Capture_Processing+0xe0>)
 8004778:	2104      	movs	r1, #4
 800477a:	0018      	movs	r0, r3
 800477c:	f001 fe32 	bl	80063e4 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004780:	1dbb      	adds	r3, r7, #6
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	0018      	movs	r0, r3
 8004788:	f001 fdbb 	bl	8006302 <isPrime>
 800478c:	0003      	movs	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d106      	bne.n	80047a0 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004792:	1dbb      	adds	r3, r7, #6
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	3301      	adds	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	1dbb      	adds	r3, r7, #6
 800479e:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 80047a0:	1dbb      	adds	r3, r7, #6
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	019b      	lsls	r3, r3, #6
 80047a8:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 80047aa:	2317      	movs	r3, #23
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e02d      	b.n	8004810 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 80047b4:	2317      	movs	r3, #23
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2280      	movs	r2, #128	@ 0x80
 80047be:	0052      	lsls	r2, r2, #1
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	1dbb      	adds	r3, r7, #6
 80047c6:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 80047c8:	1dbb      	adds	r3, r7, #6
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	001a      	movs	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	0011      	movs	r1, r2
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fb fd1b 	bl	8000210 <__aeabi_uidivmod>
 80047da:	000b      	movs	r3, r1
 80047dc:	001a      	movs	r2, r3
 80047de:	210e      	movs	r1, #14
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 80047ec:	1dbb      	adds	r3, r7, #6
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	0019      	movs	r1, r3
 80047f4:	6938      	ldr	r0, [r7, #16]
 80047f6:	f7fb fc85 	bl	8000104 <__udivsi3>
 80047fa:	0003      	movs	r3, r0
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	835a      	strh	r2, [r3, #26]
			break;
 8004802:	e00a      	b.n	800481a <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004804:	2117      	movs	r1, #23
 8004806:	187b      	adds	r3, r7, r1
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	187b      	adds	r3, r7, r1
 800480c:	3201      	adds	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	2317      	movs	r3, #23
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b80      	cmp	r3, #128	@ 0x80
 8004818:	d9cc      	bls.n	80047b4 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	2280      	movs	r2, #128	@ 0x80
 8004822:	0052      	lsls	r2, r2, #1
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	b29a      	uxth	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2101      	movs	r1, #1
 8004830:	0018      	movs	r0, r3
 8004832:	f000 fa21 	bl	8004c78 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	0018      	movs	r0, r3
 800483a:	f001 f91f 	bl	8005a7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 800483e:	2301      	movs	r3, #1
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b006      	add	sp, #24
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000c3c 	.word	0x20000c3c

0800484c <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004852:	1dfc      	adds	r4, r7, #7
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <Start_Input_Capture_Timer+0x30>)
 8004856:	2100      	movs	r1, #0
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f811 	bl	8004880 <Start_IC_TIM>
 800485e:	0003      	movs	r3, r0
 8004860:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 800486a:	f7fd fd7f 	bl	800236c <Error_Handler>
	}

	return ok;
 800486e:	1dfb      	adds	r3, r7, #7
 8004870:	781b      	ldrb	r3, [r3, #0]
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b003      	add	sp, #12
 8004878:	bd90      	pop	{r4, r7, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	20000814 	.word	0x20000814

08004880 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004880:	b5b0      	push	{r4, r5, r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 800488a:	250f      	movs	r5, #15
 800488c:	197c      	adds	r4, r7, r5
 800488e:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <Start_IC_TIM+0x50>)
 8004890:	0018      	movs	r0, r3
 8004892:	f005 f9d5 	bl	8009c40 <HAL_TIM_Base_Start_IT>
 8004896:	0003      	movs	r3, r0
 8004898:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <Start_IC_TIM+0x50>)
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f005 fe3b 	bl	800a51c <HAL_TIM_IC_Start_IT>
 80048a6:	0003      	movs	r3, r0
 80048a8:	0019      	movs	r1, r3
 80048aa:	197b      	adds	r3, r7, r5
 80048ac:	197a      	adds	r2, r7, r5
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	400a      	ands	r2, r1
 80048b2:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 80048b4:	197b      	adds	r3, r7, r5
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <Start_IC_TIM+0x40>

		Error_Handler();
 80048bc:	f7fd fd56 	bl	800236c <Error_Handler>
	}

	return ok_AND;
 80048c0:	230f      	movs	r3, #15
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	781b      	ldrb	r3, [r3, #0]
}
 80048c6:	0018      	movs	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b004      	add	sp, #16
 80048cc:	bdb0      	pop	{r4, r5, r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	20000814 	.word	0x20000814

080048d4 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0010      	movs	r0, r2
 80048e4:	0019      	movs	r1, r3
 80048e6:	2324      	movs	r3, #36	@ 0x24
 80048e8:	001a      	movs	r2, r3
 80048ea:	f008 ffb9 	bl	800d860 <memcpy>

	return 1;
 80048ee:	2301      	movs	r3, #1
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <Start_Measurement_Reelapse_Timer+0x34>)
 80048fe:	2100      	movs	r1, #0
 8004900:	0018      	movs	r0, r3
 8004902:	f001 fce2 	bl	80062ca <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004906:	4b09      	ldr	r3, [pc, #36]	@ (800492c <Start_Measurement_Reelapse_Timer+0x34>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <Start_Measurement_Reelapse_Timer+0x38>)
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29a      	uxth	r2, r3
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <Start_Measurement_Reelapse_Timer+0x34>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 800491a:	4b04      	ldr	r3, [pc, #16]	@ (800492c <Start_Measurement_Reelapse_Timer+0x34>)
 800491c:	2100      	movs	r1, #0
 800491e:	0018      	movs	r0, r3
 8004920:	f001 fcb7 	bl	8006292 <Start_OC_TIM>

	return 1;
 8004924:	2301      	movs	r3, #1
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	200008d0 	.word	0x200008d0
 8004930:	20000c38 	.word	0x20000c38

08004934 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004938:	4b03      	ldr	r3, [pc, #12]	@ (8004948 <Begin_Input_Capture_Measurement+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004940:	2301      	movs	r3, #1
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000814 	.word	0x20000814

0800494c <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004950:	f7fd fd12 	bl	8002378 <System_Init>

	//STARTUP
	Startup();
 8004954:	f000 fb86 	bl	8005064 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004958:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad8 <main+0x18c>)
 800495a:	2104      	movs	r1, #4
 800495c:	0018      	movs	r0, r3
 800495e:	f001 fd1b 	bl	8006398 <Get_Status_Bit>
 8004962:	0003      	movs	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004968:	4b5c      	ldr	r3, [pc, #368]	@ (8004adc <main+0x190>)
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ae0 <main+0x194>)
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7ff fef8 	bl	8004768 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004978:	4b57      	ldr	r3, [pc, #348]	@ (8004ad8 <main+0x18c>)
 800497a:	2140      	movs	r1, #64	@ 0x40
 800497c:	0018      	movs	r0, r3
 800497e:	f001 fd0b 	bl	8006398 <Get_Status_Bit>
 8004982:	0003      	movs	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d12b      	bne.n	80049e0 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004988:	4b56      	ldr	r3, [pc, #344]	@ (8004ae4 <main+0x198>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	23fa      	movs	r3, #250	@ 0xfa
 800498e:	01db      	lsls	r3, r3, #7
 8004990:	429a      	cmp	r2, r3
 8004992:	d218      	bcs.n	80049c6 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004994:	4b54      	ldr	r3, [pc, #336]	@ (8004ae8 <main+0x19c>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800499e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad8 <main+0x18c>)
 80049a0:	2140      	movs	r1, #64	@ 0x40
 80049a2:	0018      	movs	r0, r3
 80049a4:	f001 fd1e 	bl	80063e4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80049a8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad8 <main+0x18c>)
 80049aa:	2120      	movs	r1, #32
 80049ac:	0018      	movs	r0, r3
 80049ae:	f001 fd19 	bl	80063e4 <Clear_Status_Bit>
					idle_counter = 0;
 80049b2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae4 <main+0x198>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e012      	b.n	80049e0 <main+0x94>
				}
				else{

					idle_counter++;
 80049ba:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae4 <main+0x198>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	4b48      	ldr	r3, [pc, #288]	@ (8004ae4 <main+0x198>)
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e00c      	b.n	80049e0 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80049c6:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <main+0x18c>)
 80049c8:	2140      	movs	r1, #64	@ 0x40
 80049ca:	0018      	movs	r0, r3
 80049cc:	f001 fd0a 	bl	80063e4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80049d0:	4b41      	ldr	r3, [pc, #260]	@ (8004ad8 <main+0x18c>)
 80049d2:	2120      	movs	r1, #32
 80049d4:	0018      	movs	r0, r3
 80049d6:	f001 fcf3 	bl	80063c0 <Set_Status_Bit>
				idle_counter = 0;
 80049da:	4b42      	ldr	r3, [pc, #264]	@ (8004ae4 <main+0x198>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 80049e0:	2380      	movs	r3, #128	@ 0x80
 80049e2:	005a      	lsls	r2, r3, #1
 80049e4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad8 <main+0x18c>)
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f001 fcd5 	bl	8006398 <Get_Status_Bit>
 80049ee:	0003      	movs	r3, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d122      	bne.n	8004a3a <main+0xee>

			if(midi_counter < MIDI_COUNT){
 80049f4:	4b3d      	ldr	r3, [pc, #244]	@ (8004aec <main+0x1a0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a3d      	ldr	r2, [pc, #244]	@ (8004af0 <main+0x1a4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d805      	bhi.n	8004a0a <main+0xbe>

				midi_counter++;
 80049fe:	4b3b      	ldr	r3, [pc, #236]	@ (8004aec <main+0x1a0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <main+0x1a0>)
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e017      	b.n	8004a3a <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004a0a:	2380      	movs	r3, #128	@ 0x80
 8004a0c:	005a      	lsls	r2, r3, #1
 8004a0e:	4b32      	ldr	r3, [pc, #200]	@ (8004ad8 <main+0x18c>)
 8004a10:	0011      	movs	r1, r2
 8004a12:	0018      	movs	r0, r3
 8004a14:	f001 fce6 	bl	80063e4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad8 <main+0x18c>)
 8004a1e:	0011      	movs	r1, r2
 8004a20:	0018      	movs	r0, r3
 8004a22:	f001 fccd 	bl	80063c0 <Set_Status_Bit>
				active_status_byte = 0;
 8004a26:	4b33      	ldr	r3, [pc, #204]	@ (8004af4 <main+0x1a8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8004a2c:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <main+0x1ac>)
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7fc fbbf 	bl	80011b2 <Clear_Data_Buffer>
				midi_counter = 0;
 8004a34:	4b2d      	ldr	r3, [pc, #180]	@ (8004aec <main+0x1a0>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == YES){
 8004a3a:	2380      	movs	r3, #128	@ 0x80
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <main+0x18c>)
 8004a40:	0011      	movs	r1, r2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f001 fca8 	bl	8006398 <Get_Status_Bit>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d11b      	bne.n	8004a86 <main+0x13a>

			if(advance_idle_counter < ADVANCE_IDLE_COUNT){
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004afc <main+0x1b0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <main+0x1a4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d805      	bhi.n	8004a64 <main+0x118>

				advance_idle_counter++;
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <main+0x1b0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <main+0x1b0>)
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e010      	b.n	8004a86 <main+0x13a>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <main+0x18c>)
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f001 fcb9 	bl	80063e4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 8004a72:	2380      	movs	r3, #128	@ 0x80
 8004a74:	019a      	lsls	r2, r3, #6
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <main+0x18c>)
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f001 fca0 	bl	80063c0 <Set_Status_Bit>
				advance_idle_counter = 0;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <main+0x1b0>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	01da      	lsls	r2, r3, #7
 8004a8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <main+0x18c>)
 8004a8c:	0011      	movs	r1, r2
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f001 fc82 	bl	8006398 <Get_Status_Bit>
 8004a94:	0003      	movs	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d000      	beq.n	8004a9c <main+0x150>
 8004a9a:	e75d      	b.n	8004958 <main+0xc>

			if(preset_save_idle_counter < PRESET_SAVE_IDLE_COUNT){
 8004a9c:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <main+0x1b4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <main+0x1b8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d805      	bhi.n	8004ab2 <main+0x166>

				preset_save_idle_counter++;
 8004aa6:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <main+0x1b4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <main+0x1b4>)
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e752      	b.n	8004958 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	01da      	lsls	r2, r3, #7
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <main+0x18c>)
 8004ab8:	0011      	movs	r1, r2
 8004aba:	0018      	movs	r0, r3
 8004abc:	f001 fc92 	bl	80063e4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <main+0x18c>)
 8004ac6:	0011      	movs	r1, r2
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f001 fc79 	bl	80063c0 <Set_Status_Bit>
				preset_save_idle_counter = 0;
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <main+0x1b4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004ad4:	e740      	b.n	8004958 <main+0xc>
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	20000c3c 	.word	0x20000c3c
 8004adc:	20000c38 	.word	0x20000c38
 8004ae0:	20000ca4 	.word	0x20000ca4
 8004ae4:	20000c40 	.word	0x20000c40
 8004ae8:	20000444 	.word	0x20000444
 8004aec:	20000c44 	.word	0x20000c44
 8004af0:	00030d3f 	.word	0x00030d3f
 8004af4:	200004cb 	.word	0x200004cb
 8004af8:	200004d0 	.word	0x200004d0
 8004afc:	20000c48 	.word	0x20000c48
 8004b00:	20000c4c 	.word	0x20000c4c
 8004b04:	001c3a8f 	.word	0x001c3a8f

08004b08 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8004b14:	2417      	movs	r4, #23
 8004b16:	193b      	adds	r3, r7, r4
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f005 f842 	bl	8009ba8 <HAL_TIM_Base_Start>
 8004b24:	0003      	movs	r3, r0
 8004b26:	0019      	movs	r1, r3
 8004b28:	193b      	adds	r3, r7, r4
 8004b2a:	193a      	adds	r2, r7, r4
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0011      	movs	r1, r2
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f005 fba3 	bl	800a284 <HAL_TIM_PWM_Start>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	0019      	movs	r1, r3
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	193a      	adds	r2, r7, r4
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f005 fb96 	bl	800a284 <HAL_TIM_PWM_Start>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	193b      	adds	r3, r7, r4
 8004b5e:	193a      	adds	r2, r7, r4
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8004b66:	193b      	adds	r3, r7, r4
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8004b6e:	f7fd fbfd 	bl	800236c <Error_Handler>
	}

	return ok_OR;
 8004b72:	2317      	movs	r3, #23
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	781b      	ldrb	r3, [r3, #0]
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b007      	add	sp, #28
 8004b7e:	bd90      	pop	{r4, r7, pc}

08004b80 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8004b86:	1dfc      	adds	r4, r7, #7
 8004b88:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <Start_Freq_Gen_Timer+0x30>)
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f001 fb80 	bl	8006292 <Start_OC_TIM>
 8004b92:	0003      	movs	r3, r0
 8004b94:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004b96:	1dfb      	adds	r3, r7, #7
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004b9e:	f7fd fbe5 	bl	800236c <Error_Handler>
	}

	return ok;
 8004ba2:	1dfb      	adds	r3, r7, #7
 8004ba4:	781b      	ldrb	r3, [r3, #0]
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b003      	add	sp, #12
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	20000758 	.word	0x20000758

08004bb4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004bc0:	210b      	movs	r1, #11
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	891b      	ldrh	r3, [r3, #8]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	001a      	movs	r2, r3
 8004bd0:	0013      	movs	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	189b      	adds	r3, r3, r2
 8004bd6:	019b      	lsls	r3, r3, #6
 8004bd8:	189b      	adds	r3, r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	0a9b      	lsrs	r3, r3, #10
 8004be4:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	09da      	lsrs	r2, r3, #7
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	187b      	adds	r3, r7, r1
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	01db      	lsls	r3, r3, #7
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2280      	movs	r2, #128	@ 0x80
 8004c0a:	00d2      	lsls	r2, r2, #3
 8004c0c:	411a      	asrs	r2, r3
 8004c0e:	0013      	movs	r3, r2
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	835a      	strh	r2, [r3, #26]

    return 1;
 8004c16:	2301      	movs	r3, #1
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b004      	add	sp, #16
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8b1b      	ldrh	r3, [r3, #24]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <Set_Oscillator_Values+0x50>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8b1b      	ldrh	r3, [r3, #24]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <Set_Oscillator_Values+0x50>)
 8004c3e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8bdb      	ldrh	r3, [r3, #30]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <Set_Oscillator_Values+0x50>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	885b      	ldrh	r3, [r3, #2]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <Set_Oscillator_Values+0x54>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	889b      	ldrh	r3, [r3, #4]
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <Set_Oscillator_Values+0x54>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8004c64:	2301      	movs	r3, #1
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b002      	add	sp, #8
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	20000758 	.word	0x20000758
 8004c74:	2000098c 	.word	0x2000098c

08004c78 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	000a      	movs	r2, r1
 8004c82:	1cfb      	adds	r3, r7, #3
 8004c84:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 8004c86:	1cfb      	adds	r3, r7, #3
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d144      	bne.n	8004d18 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	89db      	ldrh	r3, [r3, #14]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	89db      	ldrh	r3, [r3, #14]
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d102      	bne.n	8004cb0 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	89db      	ldrh	r3, [r3, #14]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	741a      	strb	r2, [r3, #16]
 8004cc6:	e05a      	b.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	89db      	ldrh	r3, [r3, #14]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b80      	cmp	r3, #128	@ 0x80
 8004cd0:	d106      	bne.n	8004ce0 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	741a      	strb	r2, [r3, #16]
 8004cde:	e04e      	b.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	89db      	ldrh	r3, [r3, #14]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d106      	bne.n	8004cfc <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	741a      	strb	r2, [r3, #16]
 8004cfa:	e040      	b.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	89db      	ldrh	r3, [r3, #14]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	23c0      	movs	r3, #192	@ 0xc0
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d139      	bne.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	741a      	strb	r2, [r3, #16]
 8004d16:	e032      	b.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004d18:	1cfb      	adds	r3, r7, #3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d11f      	bne.n	8004d60 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	799b      	ldrb	r3, [r3, #6]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d004      	beq.n	8004d34 <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	799b      	ldrb	r3, [r3, #6]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	22a7      	movs	r2, #167	@ 0xa7
 8004d38:	0052      	lsls	r2, r2, #1
 8004d3a:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	741a      	strb	r2, [r3, #16]
 8004d48:	e019      	b.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	0052      	lsls	r2, r2, #1
 8004d50:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	741a      	strb	r2, [r3, #16]
 8004d5e:	e00e      	b.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004d60:	1cfb      	adds	r3, r7, #3
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d10a      	bne.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	89db      	ldrh	r3, [r3, #14]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d105      	bne.n	8004d7e <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	799b      	ldrb	r3, [r3, #6]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	89db      	ldrh	r3, [r3, #14]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004d92:	0052      	lsls	r2, r2, #1
 8004d94:	5ad2      	ldrh	r2, [r2, r3]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e029      	b.n	8004df0 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	799b      	ldrb	r3, [r3, #6]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d109      	bne.n	8004dba <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	89db      	ldrh	r3, [r3, #14]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	001a      	movs	r2, r3
 8004dae:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004db0:	0052      	lsls	r2, r2, #1
 8004db2:	5ad2      	ldrh	r2, [r2, r3]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	e01a      	b.n	8004df0 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	799b      	ldrb	r3, [r3, #6]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d108      	bne.n	8004dd6 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	89db      	ldrh	r3, [r3, #14]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2bff      	cmp	r3, #255	@ 0xff
 8004dcc:	d803      	bhi.n	8004dd6 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	e00c      	b.n	8004df0 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	799b      	ldrb	r3, [r3, #6]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d107      	bne.n	8004df0 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	89db      	ldrh	r3, [r3, #14]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2bff      	cmp	r3, #255	@ 0xff
 8004de8:	d902      	bls.n	8004df0 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7a9b      	ldrb	r3, [r3, #10]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df8:	d108      	bne.n	8004e0c <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	e01b      	b.n	8004e44 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7a9b      	ldrb	r3, [r3, #10]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d013      	beq.n	8004e3e <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	001a      	movs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7a9b      	ldrb	r3, [r3, #10]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	4353      	muls	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	09db      	lsrs	r3, r3, #7
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4a0b      	ldr	r2, [pc, #44]	@ (8004e60 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e002      	b.n	8004e44 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a07      	ldr	r2, [pc, #28]	@ (8004e60 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004e42:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	805a      	strh	r2, [r3, #2]

	return 1;
 8004e4e:	2301      	movs	r3, #1
}
 8004e50:	0018      	movs	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b004      	add	sp, #16
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	0800dcac 	.word	0x0800dcac
 8004e5c:	0800d8ac 	.word	0x0800d8ac
 8004e60:	000003ff 	.word	0x000003ff

08004e64 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	4a44      	ldr	r2, [pc, #272]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e72:	5a9b      	ldrh	r3, [r3, r2]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	4a41      	ldr	r2, [pc, #260]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e7e:	5a9b      	ldrh	r3, [r3, r2]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	1e5a      	subs	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b299      	uxth	r1, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	0052      	lsls	r2, r2, #1
 8004e8e:	52d1      	strh	r1, [r2, r3]
 8004e90:	e006      	b.n	8004ea0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b299      	uxth	r1, r3
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	2380      	movs	r3, #128	@ 0x80
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4a38      	ldr	r2, [pc, #224]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10e      	bne.n	8004eca <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4a35      	ldr	r2, [pc, #212]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004eb0:	2180      	movs	r1, #128	@ 0x80
 8004eb2:	0089      	lsls	r1, r1, #2
 8004eb4:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	4a33      	ldr	r2, [pc, #204]	@ (8004f88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004eba:	5a9b      	ldrh	r3, [r3, r2]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b299      	uxth	r1, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	4a30      	ldr	r2, [pc, #192]	@ (8004f88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004ec6:	5299      	strh	r1, [r3, r2]
 8004ec8:	e026      	b.n	8004f18 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8004f88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004ece:	5a9b      	ldrh	r3, [r3, r2]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10e      	bne.n	8004ef4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004eda:	2180      	movs	r1, #128	@ 0x80
 8004edc:	0089      	lsls	r1, r1, #2
 8004ede:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	4a28      	ldr	r2, [pc, #160]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ee4:	5a9b      	ldrh	r3, [r3, r2]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b299      	uxth	r1, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4a25      	ldr	r2, [pc, #148]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ef0:	5299      	strh	r1, [r3, r2]
 8004ef2:	e011      	b.n	8004f18 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4a23      	ldr	r2, [pc, #140]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ef8:	5a9b      	ldrh	r3, [r3, r2]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b299      	uxth	r1, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4a20      	ldr	r2, [pc, #128]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004f04:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004f0a:	5a9b      	ldrh	r3, [r3, r2]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b299      	uxth	r1, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004f16:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004f1c:	5a9b      	ldrh	r3, [r3, r2]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	001a      	movs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	dd13      	ble.n	8004f5a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4913      	ldr	r1, [pc, #76]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004f38:	5a5b      	ldrh	r3, [r3, r1]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	18cb      	adds	r3, r1, r3
 8004f46:	4911      	ldr	r1, [pc, #68]	@ (8004f8c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004f48:	468c      	mov	ip, r1
 8004f4a:	4463      	add	r3, ip
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	18d3      	adds	r3, r2, r3
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	809a      	strh	r2, [r3, #4]
 8004f58:	e00f      	b.n	8004f7a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	4909      	ldr	r1, [pc, #36]	@ (8004f84 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004f60:	5a5b      	ldrh	r3, [r3, r1]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	0019      	movs	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	18cb      	adds	r3, r1, r3
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	18d3      	adds	r3, r2, r3
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	00000402 	.word	0x00000402
 8004f88:	00000404 	.word	0x00000404
 8004f8c:	7ffffe00 	.word	0x7ffffe00

08004f90 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	2116      	movs	r1, #22
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	0952      	lsrs	r2, r2, #5
 8004fa6:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004fa8:	187b      	adds	r3, r7, r1
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fae:	d803      	bhi.n	8004fb8 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	719a      	strb	r2, [r3, #6]
 8004fb6:	e010      	b.n	8004fda <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004fb8:	2316      	movs	r3, #22
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	2b55      	cmp	r3, #85	@ 0x55
 8004fc0:	d803      	bhi.n	8004fca <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	719a      	strb	r2, [r3, #6]
 8004fc8:	e007      	b.n	8004fda <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004fca:	2316      	movs	r3, #22
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fd2:	d802      	bhi.n	8004fda <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	2114      	movs	r1, #20
 8004fe4:	187b      	adds	r3, r7, r1
 8004fe6:	0952      	lsrs	r2, r2, #5
 8004fe8:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004fea:	187b      	adds	r3, r7, r1
 8004fec:	187a      	adds	r2, r7, r1
 8004fee:	8812      	ldrh	r2, [r2, #0]
 8004ff0:	00d2      	lsls	r2, r2, #3
 8004ff2:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	187a      	adds	r2, r7, r1
 8004ff8:	8812      	ldrh	r2, [r2, #0]
 8004ffa:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	3304      	adds	r3, #4
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	b29a      	uxth	r2, r3
 8005008:	2113      	movs	r1, #19
 800500a:	187b      	adds	r3, r7, r1
 800500c:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	187a      	adds	r2, r7, r1
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	3306      	adds	r3, #6
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29a      	uxth	r2, r3
 800501e:	2110      	movs	r1, #16
 8005020:	187b      	adds	r3, r7, r1
 8005022:	0952      	lsrs	r2, r2, #5
 8005024:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8005026:	187a      	adds	r2, r7, r1
 8005028:	187b      	adds	r3, r7, r1
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	18db      	adds	r3, r3, r3
 800502e:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	187a      	adds	r2, r7, r1
 8005034:	8812      	ldrh	r2, [r2, #0]
 8005036:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	3308      	adds	r3, #8
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29a      	uxth	r2, r3
 8005040:	210e      	movs	r1, #14
 8005042:	187b      	adds	r3, r7, r1
 8005044:	0952      	lsrs	r2, r2, #5
 8005046:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8005048:	187b      	adds	r3, r7, r1
 800504a:	187a      	adds	r2, r7, r1
 800504c:	8812      	ldrh	r2, [r2, #0]
 800504e:	0092      	lsls	r2, r2, #2
 8005050:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	187a      	adds	r2, r7, r1
 8005056:	8812      	ldrh	r2, [r2, #0]
 8005058:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800505a:	2301      	movs	r3, #1
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	b006      	add	sp, #24
 8005062:	bd80      	pop	{r7, pc}

08005064 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800506a:	2007      	movs	r0, #7
 800506c:	f002 fd9b 	bl	8007ba6 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8005070:	4b5a      	ldr	r3, [pc, #360]	@ (80051dc <Startup+0x178>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	4b59      	ldr	r3, [pc, #356]	@ (80051dc <Startup+0x178>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2101      	movs	r1, #1
 800507c:	430a      	orrs	r2, r1
 800507e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8005080:	4b57      	ldr	r3, [pc, #348]	@ (80051e0 <Startup+0x17c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	4b56      	ldr	r3, [pc, #344]	@ (80051e0 <Startup+0x17c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2101      	movs	r1, #1
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	0099      	lsls	r1, r3, #2
 8005094:	23a0      	movs	r3, #160	@ 0xa0
 8005096:	05db      	lsls	r3, r3, #23
 8005098:	2201      	movs	r2, #1
 800509a:	0018      	movs	r0, r3
 800509c:	f003 fa3f 	bl	800851e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 80050a0:	2380      	movs	r3, #128	@ 0x80
 80050a2:	0159      	lsls	r1, r3, #5
 80050a4:	23a0      	movs	r3, #160	@ 0xa0
 80050a6:	05db      	lsls	r3, r3, #23
 80050a8:	2201      	movs	r2, #1
 80050aa:	0018      	movs	r0, r3
 80050ac:	f003 fa37 	bl	800851e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 80050b0:	23a0      	movs	r3, #160	@ 0xa0
 80050b2:	05db      	lsls	r3, r3, #23
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	@ 0x80
 80050b8:	0018      	movs	r0, r3
 80050ba:	f003 fa30 	bl	800851e <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 80050be:	f7fb f9c3 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 80050c2:	f7fb fd1d 	bl	8000b00 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <Startup+0x180>)
 80050c8:	4a47      	ldr	r2, [pc, #284]	@ (80051e8 <Startup+0x184>)
 80050ca:	4948      	ldr	r1, [pc, #288]	@ (80051ec <Startup+0x188>)
 80050cc:	4c48      	ldr	r4, [pc, #288]	@ (80051f0 <Startup+0x18c>)
 80050ce:	2004      	movs	r0, #4
 80050d0:	9000      	str	r0, [sp, #0]
 80050d2:	0020      	movs	r0, r4
 80050d4:	f7fb fc07 	bl	80008e6 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 80050d8:	4b46      	ldr	r3, [pc, #280]	@ (80051f4 <Startup+0x190>)
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <Startup+0x194>)
 80050dc:	4943      	ldr	r1, [pc, #268]	@ (80051ec <Startup+0x188>)
 80050de:	4847      	ldr	r0, [pc, #284]	@ (80051fc <Startup+0x198>)
 80050e0:	2404      	movs	r4, #4
 80050e2:	9400      	str	r4, [sp, #0]
 80050e4:	f7fb fcb5 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80050e8:	4b45      	ldr	r3, [pc, #276]	@ (8005200 <Startup+0x19c>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	001a      	movs	r2, r3
 80050ee:	4945      	ldr	r1, [pc, #276]	@ (8005204 <Startup+0x1a0>)
 80050f0:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <Startup+0x1a4>)
 80050f2:	0018      	movs	r0, r3
 80050f4:	f001 fe08 	bl	8006d08 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 80050f8:	46c0      	nop			@ (mov r8, r8)
 80050fa:	4b3b      	ldr	r3, [pc, #236]	@ (80051e8 <Startup+0x184>)
 80050fc:	2110      	movs	r1, #16
 80050fe:	0018      	movs	r0, r3
 8005100:	f001 f94a 	bl	8006398 <Get_Status_Bit>
 8005104:	1e03      	subs	r3, r0, #0
 8005106:	d0f8      	beq.n	80050fa <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005108:	1dbb      	adds	r3, r7, #6
 800510a:	2200      	movs	r2, #0
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e02c      	b.n	800516a <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8005110:	4b3e      	ldr	r3, [pc, #248]	@ (800520c <Startup+0x1a8>)
 8005112:	799b      	ldrb	r3, [r3, #6]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d111      	bne.n	800513e <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 800511a:	4b3c      	ldr	r3, [pc, #240]	@ (800520c <Startup+0x1a8>)
 800511c:	7a9b      	ldrb	r3, [r3, #10]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	001a      	movs	r2, r3
 8005122:	0013      	movs	r3, r2
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	11db      	asrs	r3, r3, #7
 800512a:	b29b      	uxth	r3, r3
 800512c:	1dba      	adds	r2, r7, #6
 800512e:	8812      	ldrh	r2, [r2, #0]
 8005130:	4937      	ldr	r1, [pc, #220]	@ (8005210 <Startup+0x1ac>)
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	b299      	uxth	r1, r3
 8005136:	4b37      	ldr	r3, [pc, #220]	@ (8005214 <Startup+0x1b0>)
 8005138:	0052      	lsls	r2, r2, #1
 800513a:	52d1      	strh	r1, [r2, r3]
 800513c:	e010      	b.n	8005160 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 800513e:	4b33      	ldr	r3, [pc, #204]	@ (800520c <Startup+0x1a8>)
 8005140:	7a9b      	ldrb	r3, [r3, #10]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	001a      	movs	r2, r3
 8005146:	0013      	movs	r3, r2
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	121b      	asrs	r3, r3, #8
 800514e:	b29b      	uxth	r3, r3
 8005150:	1dba      	adds	r2, r7, #6
 8005152:	8812      	ldrh	r2, [r2, #0]
 8005154:	492e      	ldr	r1, [pc, #184]	@ (8005210 <Startup+0x1ac>)
 8005156:	1acb      	subs	r3, r1, r3
 8005158:	b299      	uxth	r1, r3
 800515a:	4b2e      	ldr	r3, [pc, #184]	@ (8005214 <Startup+0x1b0>)
 800515c:	0052      	lsls	r2, r2, #1
 800515e:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005160:	1dbb      	adds	r3, r7, #6
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	1dbb      	adds	r3, r7, #6
 8005166:	3201      	adds	r2, #1
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	1dbb      	adds	r3, r7, #6
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	2380      	movs	r3, #128	@ 0x80
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	429a      	cmp	r2, r3
 8005174:	d9cc      	bls.n	8005110 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8005176:	4b25      	ldr	r3, [pc, #148]	@ (800520c <Startup+0x1a8>)
 8005178:	2102      	movs	r1, #2
 800517a:	0018      	movs	r0, r3
 800517c:	f7ff fd7c 	bl	8004c78 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8005180:	4a24      	ldr	r2, [pc, #144]	@ (8005214 <Startup+0x1b0>)
 8005182:	4b22      	ldr	r3, [pc, #136]	@ (800520c <Startup+0x1a8>)
 8005184:	0011      	movs	r1, r2
 8005186:	0018      	movs	r0, r3
 8005188:	f7ff fe6c 	bl	8004e64 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 800518c:	4b1f      	ldr	r3, [pc, #124]	@ (800520c <Startup+0x1a8>)
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff fd46 	bl	8004c20 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8005194:	4b20      	ldr	r3, [pc, #128]	@ (8005218 <Startup+0x1b4>)
 8005196:	220c      	movs	r2, #12
 8005198:	2104      	movs	r1, #4
 800519a:	0018      	movs	r0, r3
 800519c:	f7ff fcb4 	bl	8004b08 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80051a0:	f7ff fcee 	bl	8004b80 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80051a4:	f7fc f952 	bl	800144c <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80051a8:	f7ff fb50 	bl	800484c <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80051ac:	f001 f8ec 	bl	8006388 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80051b0:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <Startup+0x1b8>)
 80051b2:	22fa      	movs	r2, #250	@ 0xfa
 80051b4:	21fa      	movs	r1, #250	@ 0xfa
 80051b6:	0018      	movs	r0, r3
 80051b8:	f003 faa8 	bl	800870c <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 80051bc:	4b18      	ldr	r3, [pc, #96]	@ (8005220 <Startup+0x1bc>)
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 80051c2:	4b18      	ldr	r3, [pc, #96]	@ (8005224 <Startup+0x1c0>)
 80051c4:	2100      	movs	r1, #0
 80051c6:	0018      	movs	r0, r3
 80051c8:	f001 f863 	bl	8006292 <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80051cc:	2007      	movs	r0, #7
 80051ce:	f002 fcda 	bl	8007b86 <HAL_NVIC_EnableIRQ>

	return 1;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b003      	add	sp, #12
 80051da:	bd90      	pop	{r4, r7, pc}
 80051dc:	20000814 	.word	0x20000814
 80051e0:	20000758 	.word	0x20000758
 80051e4:	200004ca 	.word	0x200004ca
 80051e8:	20000c3c 	.word	0x20000c3c
 80051ec:	200004c0 	.word	0x200004c0
 80051f0:	0800f820 	.word	0x0800f820
 80051f4:	20000484 	.word	0x20000484
 80051f8:	20000474 	.word	0x20000474
 80051fc:	20000494 	.word	0x20000494
 8005200:	0800e0ac 	.word	0x0800e0ac
 8005204:	20000c50 	.word	0x20000c50
 8005208:	200004fc 	.word	0x200004fc
 800520c:	20000c5c 	.word	0x20000c5c
 8005210:	000003ff 	.word	0x000003ff
 8005214:	20000028 	.word	0x20000028
 8005218:	2000098c 	.word	0x2000098c
 800521c:	20000bcc 	.word	0x20000bcc
 8005220:	20000448 	.word	0x20000448
 8005224:	200005e0 	.word	0x200005e0

08005228 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	4a12      	ldr	r2, [pc, #72]	@ (800527c <Advance_Pending_States+0x54>)
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8005236:	4b11      	ldr	r3, [pc, #68]	@ (800527c <Advance_Pending_States+0x54>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b05      	cmp	r3, #5
 800523e:	d103      	bne.n	8005248 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <Advance_Pending_States+0x54>)
 8005242:	2204      	movs	r2, #4
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e007      	b.n	8005258 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <Advance_Pending_States+0x54>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b07      	cmp	r3, #7
 8005250:	d102      	bne.n	8005258 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <Advance_Pending_States+0x54>)
 8005254:	2206      	movs	r2, #6
 8005256:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b06      	cmp	r3, #6
 800525e:	d007      	beq.n	8005270 <Advance_Pending_States+0x48>
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d003      	beq.n	8005270 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8005268:	4b04      	ldr	r3, [pc, #16]	@ (800527c <Advance_Pending_States+0x54>)
 800526a:	1d3a      	adds	r2, r7, #4
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8005270:	2301      	movs	r3, #1
}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b002      	add	sp, #8
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	20000430 	.word	0x20000430

08005280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <HAL_MspInit+0x44>)
 8005288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800528a:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <HAL_MspInit+0x44>)
 800528c:	2101      	movs	r1, #1
 800528e:	430a      	orrs	r2, r1
 8005290:	641a      	str	r2, [r3, #64]	@ 0x40
 8005292:	4b0c      	ldr	r3, [pc, #48]	@ (80052c4 <HAL_MspInit+0x44>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	2201      	movs	r2, #1
 8005298:	4013      	ands	r3, r2
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <HAL_MspInit+0x44>)
 80052a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052a2:	4b08      	ldr	r3, [pc, #32]	@ (80052c4 <HAL_MspInit+0x44>)
 80052a4:	2180      	movs	r1, #128	@ 0x80
 80052a6:	0549      	lsls	r1, r1, #21
 80052a8:	430a      	orrs	r2, r1
 80052aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <HAL_MspInit+0x44>)
 80052ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b0:	2380      	movs	r3, #128	@ 0x80
 80052b2:	055b      	lsls	r3, r3, #21
 80052b4:	4013      	ands	r3, r2
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ba:	46c0      	nop			@ (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b002      	add	sp, #8
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	40021000 	.word	0x40021000

080052c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b08b      	sub	sp, #44	@ 0x2c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d0:	2414      	movs	r4, #20
 80052d2:	193b      	adds	r3, r7, r4
 80052d4:	0018      	movs	r0, r3
 80052d6:	2314      	movs	r3, #20
 80052d8:	001a      	movs	r2, r3
 80052da:	2100      	movs	r1, #0
 80052dc:	f008 fa94 	bl	800d808 <memset>
  if(hadc->Instance==ADC1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2e      	ldr	r2, [pc, #184]	@ (80053a0 <HAL_ADC_MspInit+0xd8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d155      	bne.n	8005396 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80052ea:	4b2e      	ldr	r3, [pc, #184]	@ (80053a4 <HAL_ADC_MspInit+0xdc>)
 80052ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ee:	4b2d      	ldr	r3, [pc, #180]	@ (80053a4 <HAL_ADC_MspInit+0xdc>)
 80052f0:	2180      	movs	r1, #128	@ 0x80
 80052f2:	0349      	lsls	r1, r1, #13
 80052f4:	430a      	orrs	r2, r1
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80052f8:	4b2a      	ldr	r3, [pc, #168]	@ (80053a4 <HAL_ADC_MspInit+0xdc>)
 80052fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	035b      	lsls	r3, r3, #13
 8005300:	4013      	ands	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005306:	4b27      	ldr	r3, [pc, #156]	@ (80053a4 <HAL_ADC_MspInit+0xdc>)
 8005308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800530a:	4b26      	ldr	r3, [pc, #152]	@ (80053a4 <HAL_ADC_MspInit+0xdc>)
 800530c:	2101      	movs	r1, #1
 800530e:	430a      	orrs	r2, r1
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34
 8005312:	4b24      	ldr	r3, [pc, #144]	@ (80053a4 <HAL_ADC_MspInit+0xdc>)
 8005314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005316:	2201      	movs	r2, #1
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800531e:	193b      	adds	r3, r7, r4
 8005320:	2273      	movs	r2, #115	@ 0x73
 8005322:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005324:	193b      	adds	r3, r7, r4
 8005326:	2203      	movs	r2, #3
 8005328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532a:	193b      	adds	r3, r7, r4
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005330:	193a      	adds	r2, r7, r4
 8005332:	23a0      	movs	r3, #160	@ 0xa0
 8005334:	05db      	lsls	r3, r3, #23
 8005336:	0011      	movs	r1, r2
 8005338:	0018      	movs	r0, r3
 800533a:	f002 ff6f 	bl	800821c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800533e:	4b1a      	ldr	r3, [pc, #104]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005340:	4a1a      	ldr	r2, [pc, #104]	@ (80053ac <HAL_ADC_MspInit+0xe4>)
 8005342:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005344:	4b18      	ldr	r3, [pc, #96]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005346:	2205      	movs	r2, #5
 8005348:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800534a:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 800534c:	2200      	movs	r2, #0
 800534e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005350:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005352:	2200      	movs	r2, #0
 8005354:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005356:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005358:	2280      	movs	r2, #128	@ 0x80
 800535a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800535c:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	0052      	lsls	r2, r2, #1
 8005362:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005366:	2280      	movs	r2, #128	@ 0x80
 8005368:	00d2      	lsls	r2, r2, #3
 800536a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800536c:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005374:	2280      	movs	r2, #128	@ 0x80
 8005376:	0192      	lsls	r2, r2, #6
 8005378:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800537a:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 800537c:	0018      	movs	r0, r3
 800537e:	f002 fc2f 	bl	8007be0 <HAL_DMA_Init>
 8005382:	1e03      	subs	r3, r0, #0
 8005384:	d001      	beq.n	800538a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8005386:	f7fc fff1 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a06      	ldr	r2, [pc, #24]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 800538e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005390:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_ADC_MspInit+0xe0>)
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b00b      	add	sp, #44	@ 0x2c
 800539c:	bd90      	pop	{r4, r7, pc}
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	40012400 	.word	0x40012400
 80053a4:	40021000 	.word	0x40021000
 80053a8:	20000584 	.word	0x20000584
 80053ac:	40020008 	.word	0x40020008

080053b0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b097      	sub	sp, #92	@ 0x5c
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b8:	2344      	movs	r3, #68	@ 0x44
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	0018      	movs	r0, r3
 80053be:	2314      	movs	r3, #20
 80053c0:	001a      	movs	r2, r3
 80053c2:	2100      	movs	r1, #0
 80053c4:	f008 fa20 	bl	800d808 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053c8:	241c      	movs	r4, #28
 80053ca:	193b      	adds	r3, r7, r4
 80053cc:	0018      	movs	r0, r3
 80053ce:	2328      	movs	r3, #40	@ 0x28
 80053d0:	001a      	movs	r2, r3
 80053d2:	2100      	movs	r1, #0
 80053d4:	f008 fa18 	bl	800d808 <memset>
  if(hlptim->Instance==LPTIM1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a46      	ldr	r2, [pc, #280]	@ (80054f8 <HAL_LPTIM_MspInit+0x148>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d13e      	bne.n	8005460 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	2280      	movs	r2, #128	@ 0x80
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 80053ea:	193b      	adds	r3, r7, r4
 80053ec:	2200      	movs	r2, #0
 80053ee:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053f0:	193b      	adds	r3, r7, r4
 80053f2:	0018      	movs	r0, r3
 80053f4:	f004 f9f8 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 80053f8:	1e03      	subs	r3, r0, #0
 80053fa:	d001      	beq.n	8005400 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 80053fc:	f7fc ffb6 	bl	800236c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005400:	4b3e      	ldr	r3, [pc, #248]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 8005402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005404:	4b3d      	ldr	r3, [pc, #244]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 8005406:	2180      	movs	r1, #128	@ 0x80
 8005408:	0609      	lsls	r1, r1, #24
 800540a:	430a      	orrs	r2, r1
 800540c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800540e:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	0fdb      	lsrs	r3, r3, #31
 8005414:	07db      	lsls	r3, r3, #31
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800541a:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 800541c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541e:	4b37      	ldr	r3, [pc, #220]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 8005420:	2102      	movs	r1, #2
 8005422:	430a      	orrs	r2, r1
 8005424:	635a      	str	r2, [r3, #52]	@ 0x34
 8005426:	4b35      	ldr	r3, [pc, #212]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 8005428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542a:	2202      	movs	r2, #2
 800542c:	4013      	ands	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005432:	2144      	movs	r1, #68	@ 0x44
 8005434:	187b      	adds	r3, r7, r1
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543a:	187b      	adds	r3, r7, r1
 800543c:	2202      	movs	r2, #2
 800543e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	187b      	adds	r3, r7, r1
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005446:	187b      	adds	r3, r7, r1
 8005448:	2200      	movs	r2, #0
 800544a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 800544c:	187b      	adds	r3, r7, r1
 800544e:	2205      	movs	r2, #5
 8005450:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005452:	187b      	adds	r3, r7, r1
 8005454:	4a2a      	ldr	r2, [pc, #168]	@ (8005500 <HAL_LPTIM_MspInit+0x150>)
 8005456:	0019      	movs	r1, r3
 8005458:	0010      	movs	r0, r2
 800545a:	f002 fedf 	bl	800821c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800545e:	e046      	b.n	80054ee <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <HAL_LPTIM_MspInit+0x154>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d141      	bne.n	80054ee <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800546a:	211c      	movs	r1, #28
 800546c:	187b      	adds	r3, r7, r1
 800546e:	2280      	movs	r2, #128	@ 0x80
 8005470:	00d2      	lsls	r2, r2, #3
 8005472:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8005474:	187b      	adds	r3, r7, r1
 8005476:	2200      	movs	r2, #0
 8005478:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800547a:	187b      	adds	r3, r7, r1
 800547c:	0018      	movs	r0, r3
 800547e:	f004 f9b3 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8005482:	1e03      	subs	r3, r0, #0
 8005484:	d001      	beq.n	800548a <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8005486:	f7fc ff71 	bl	800236c <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800548a:	4b1c      	ldr	r3, [pc, #112]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 800548c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800548e:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 8005490:	2180      	movs	r1, #128	@ 0x80
 8005492:	05c9      	lsls	r1, r1, #23
 8005494:	430a      	orrs	r2, r1
 8005496:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005498:	4b18      	ldr	r3, [pc, #96]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 800549a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	05db      	lsls	r3, r3, #23
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a6:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 80054a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054aa:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <HAL_LPTIM_MspInit+0x14c>)
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	2201      	movs	r2, #1
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054be:	2144      	movs	r1, #68	@ 0x44
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	2280      	movs	r2, #128	@ 0x80
 80054c4:	0052      	lsls	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	2202      	movs	r2, #2
 80054cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	2200      	movs	r2, #0
 80054d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	2205      	movs	r2, #5
 80054de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e0:	187a      	adds	r2, r7, r1
 80054e2:	23a0      	movs	r3, #160	@ 0xa0
 80054e4:	05db      	lsls	r3, r3, #23
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f002 fe97 	bl	800821c <HAL_GPIO_Init>
}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b017      	add	sp, #92	@ 0x5c
 80054f4:	bd90      	pop	{r4, r7, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	40007c00 	.word	0x40007c00
 80054fc:	40021000 	.word	0x40021000
 8005500:	50000400 	.word	0x50000400
 8005504:	40009400 	.word	0x40009400

08005508 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b099      	sub	sp, #100	@ 0x64
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	234c      	movs	r3, #76	@ 0x4c
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	0018      	movs	r0, r3
 8005516:	2314      	movs	r3, #20
 8005518:	001a      	movs	r2, r3
 800551a:	2100      	movs	r1, #0
 800551c:	f008 f974 	bl	800d808 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005520:	2424      	movs	r4, #36	@ 0x24
 8005522:	193b      	adds	r3, r7, r4
 8005524:	0018      	movs	r0, r3
 8005526:	2328      	movs	r3, #40	@ 0x28
 8005528:	001a      	movs	r2, r3
 800552a:	2100      	movs	r1, #0
 800552c:	f008 f96c 	bl	800d808 <memset>
  if(htim_base->Instance==TIM1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a68      	ldr	r2, [pc, #416]	@ (80056d8 <HAL_TIM_Base_MspInit+0x1d0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d11d      	bne.n	8005576 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800553a:	193b      	adds	r3, r7, r4
 800553c:	2280      	movs	r2, #128	@ 0x80
 800553e:	0392      	lsls	r2, r2, #14
 8005540:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8005542:	193b      	adds	r3, r7, r4
 8005544:	2200      	movs	r2, #0
 8005546:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005548:	193b      	adds	r3, r7, r4
 800554a:	0018      	movs	r0, r3
 800554c:	f004 f94c 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8005550:	1e03      	subs	r3, r0, #0
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005554:	f7fc ff0a 	bl	800236c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005558:	4b60      	ldr	r3, [pc, #384]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 800555a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800555c:	4b5f      	ldr	r3, [pc, #380]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 800555e:	2180      	movs	r1, #128	@ 0x80
 8005560:	0109      	lsls	r1, r1, #4
 8005562:	430a      	orrs	r2, r1
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
 8005566:	4b5d      	ldr	r3, [pc, #372]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	4013      	ands	r3, r2
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005574:	e0ab      	b.n	80056ce <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	2380      	movs	r3, #128	@ 0x80
 800557c:	05db      	lsls	r3, r3, #23
 800557e:	429a      	cmp	r2, r3
 8005580:	d138      	bne.n	80055f4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005582:	4b56      	ldr	r3, [pc, #344]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005586:	4b55      	ldr	r3, [pc, #340]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005588:	2101      	movs	r1, #1
 800558a:	430a      	orrs	r2, r1
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800558e:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005592:	2201      	movs	r2, #1
 8005594:	4013      	ands	r3, r2
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800559a:	4b50      	ldr	r3, [pc, #320]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 800559c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800559e:	4b4f      	ldr	r3, [pc, #316]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 80055a0:	2101      	movs	r1, #1
 80055a2:	430a      	orrs	r2, r1
 80055a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80055a6:	4b4d      	ldr	r3, [pc, #308]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 80055a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055aa:	2201      	movs	r2, #1
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80055b2:	214c      	movs	r1, #76	@ 0x4c
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	2280      	movs	r2, #128	@ 0x80
 80055b8:	0212      	lsls	r2, r2, #8
 80055ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	2202      	movs	r2, #2
 80055c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80055c2:	187b      	adds	r3, r7, r1
 80055c4:	2201      	movs	r2, #1
 80055c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c8:	187b      	adds	r3, r7, r1
 80055ca:	2200      	movs	r2, #0
 80055cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	2202      	movs	r2, #2
 80055d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80055d4:	187a      	adds	r2, r7, r1
 80055d6:	23a0      	movs	r3, #160	@ 0xa0
 80055d8:	05db      	lsls	r3, r3, #23
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f002 fe1d 	bl	800821c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 80055e2:	2202      	movs	r2, #2
 80055e4:	2102      	movs	r1, #2
 80055e6:	200f      	movs	r0, #15
 80055e8:	f002 fab8 	bl	8007b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80055ec:	200f      	movs	r0, #15
 80055ee:	f002 faca 	bl	8007b86 <HAL_NVIC_EnableIRQ>
}
 80055f2:	e06c      	b.n	80056ce <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a39      	ldr	r2, [pc, #228]	@ (80056e0 <HAL_TIM_Base_MspInit+0x1d8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d114      	bne.n	8005628 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055fe:	4b37      	ldr	r3, [pc, #220]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005602:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005604:	2102      	movs	r1, #2
 8005606:	430a      	orrs	r2, r1
 8005608:	63da      	str	r2, [r3, #60]	@ 0x3c
 800560a:	4b34      	ldr	r3, [pc, #208]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	2202      	movs	r2, #2
 8005610:	4013      	ands	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005616:	2200      	movs	r2, #0
 8005618:	2100      	movs	r1, #0
 800561a:	2010      	movs	r0, #16
 800561c:	f002 fa9e 	bl	8007b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005620:	2010      	movs	r0, #16
 8005622:	f002 fab0 	bl	8007b86 <HAL_NVIC_EnableIRQ>
}
 8005626:	e052      	b.n	80056ce <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2d      	ldr	r2, [pc, #180]	@ (80056e4 <HAL_TIM_Base_MspInit+0x1dc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d116      	bne.n	8005660 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005632:	4b2a      	ldr	r3, [pc, #168]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005636:	4b29      	ldr	r3, [pc, #164]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005638:	2180      	movs	r1, #128	@ 0x80
 800563a:	0289      	lsls	r1, r1, #10
 800563c:	430a      	orrs	r2, r1
 800563e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005640:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800564e:	2200      	movs	r2, #0
 8005650:	2100      	movs	r1, #0
 8005652:	2015      	movs	r0, #21
 8005654:	f002 fa82 	bl	8007b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005658:	2015      	movs	r0, #21
 800565a:	f002 fa94 	bl	8007b86 <HAL_NVIC_EnableIRQ>
}
 800565e:	e036      	b.n	80056ce <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a20      	ldr	r2, [pc, #128]	@ (80056e8 <HAL_TIM_Base_MspInit+0x1e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d116      	bne.n	8005698 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 800566c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800566e:	4b1b      	ldr	r3, [pc, #108]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 8005670:	2180      	movs	r1, #128	@ 0x80
 8005672:	02c9      	lsls	r1, r1, #11
 8005674:	430a      	orrs	r2, r1
 8005676:	641a      	str	r2, [r3, #64]	@ 0x40
 8005678:	4b18      	ldr	r3, [pc, #96]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 800567a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	02db      	lsls	r3, r3, #11
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8005686:	2203      	movs	r2, #3
 8005688:	2103      	movs	r1, #3
 800568a:	2016      	movs	r0, #22
 800568c:	f002 fa66 	bl	8007b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005690:	2016      	movs	r0, #22
 8005692:	f002 fa78 	bl	8007b86 <HAL_NVIC_EnableIRQ>
}
 8005696:	e01a      	b.n	80056ce <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a13      	ldr	r2, [pc, #76]	@ (80056ec <HAL_TIM_Base_MspInit+0x1e4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d115      	bne.n	80056ce <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 80056a2:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 80056a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 80056a8:	2180      	movs	r1, #128	@ 0x80
 80056aa:	0209      	lsls	r1, r1, #8
 80056ac:	430a      	orrs	r2, r1
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80056b0:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <HAL_TIM_Base_MspInit+0x1d4>)
 80056b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	4013      	ands	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 80056be:	2203      	movs	r2, #3
 80056c0:	2103      	movs	r1, #3
 80056c2:	2013      	movs	r0, #19
 80056c4:	f002 fa4a 	bl	8007b5c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80056c8:	2013      	movs	r0, #19
 80056ca:	f002 fa5c 	bl	8007b86 <HAL_NVIC_EnableIRQ>
}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b019      	add	sp, #100	@ 0x64
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800
 80056ec:	40002000 	.word	0x40002000

080056f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b08b      	sub	sp, #44	@ 0x2c
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	2414      	movs	r4, #20
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	0018      	movs	r0, r3
 80056fe:	2314      	movs	r3, #20
 8005700:	001a      	movs	r2, r3
 8005702:	2100      	movs	r1, #0
 8005704:	f008 f880 	bl	800d808 <memset>
  if(htim->Instance==TIM1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a25      	ldr	r2, [pc, #148]	@ (80057a4 <HAL_TIM_MspPostInit+0xb4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d144      	bne.n	800579c <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005712:	4b25      	ldr	r3, [pc, #148]	@ (80057a8 <HAL_TIM_MspPostInit+0xb8>)
 8005714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005716:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <HAL_TIM_MspPostInit+0xb8>)
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34
 800571e:	4b22      	ldr	r3, [pc, #136]	@ (80057a8 <HAL_TIM_MspPostInit+0xb8>)
 8005720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005722:	2201      	movs	r2, #1
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800572a:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <HAL_TIM_MspPostInit+0xb8>)
 800572c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800572e:	4b1e      	ldr	r3, [pc, #120]	@ (80057a8 <HAL_TIM_MspPostInit+0xb8>)
 8005730:	2102      	movs	r1, #2
 8005732:	430a      	orrs	r2, r1
 8005734:	635a      	str	r2, [r3, #52]	@ 0x34
 8005736:	4b1c      	ldr	r3, [pc, #112]	@ (80057a8 <HAL_TIM_MspPostInit+0xb8>)
 8005738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573a:	2202      	movs	r2, #2
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8005742:	193b      	adds	r3, r7, r4
 8005744:	2280      	movs	r2, #128	@ 0x80
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574a:	193b      	adds	r3, r7, r4
 800574c:	2202      	movs	r2, #2
 800574e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	193b      	adds	r3, r7, r4
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005756:	193b      	adds	r3, r7, r4
 8005758:	2200      	movs	r2, #0
 800575a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800575c:	193b      	adds	r3, r7, r4
 800575e:	2202      	movs	r2, #2
 8005760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005762:	193a      	adds	r2, r7, r4
 8005764:	23a0      	movs	r3, #160	@ 0xa0
 8005766:	05db      	lsls	r3, r3, #23
 8005768:	0011      	movs	r1, r2
 800576a:	0018      	movs	r0, r3
 800576c:	f002 fd56 	bl	800821c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8005770:	0021      	movs	r1, r4
 8005772:	187b      	adds	r3, r7, r1
 8005774:	2208      	movs	r2, #8
 8005776:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005778:	187b      	adds	r3, r7, r1
 800577a:	2202      	movs	r2, #2
 800577c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	187b      	adds	r3, r7, r1
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005784:	187b      	adds	r3, r7, r1
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800578a:	187b      	adds	r3, r7, r1
 800578c:	2201      	movs	r2, #1
 800578e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005790:	187b      	adds	r3, r7, r1
 8005792:	4a06      	ldr	r2, [pc, #24]	@ (80057ac <HAL_TIM_MspPostInit+0xbc>)
 8005794:	0019      	movs	r1, r3
 8005796:	0010      	movs	r0, r2
 8005798:	f002 fd40 	bl	800821c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800579c:	46c0      	nop			@ (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b00b      	add	sp, #44	@ 0x2c
 80057a2:	bd90      	pop	{r4, r7, pc}
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40021000 	.word	0x40021000
 80057ac:	50000400 	.word	0x50000400

080057b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b08b      	sub	sp, #44	@ 0x2c
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b8:	2414      	movs	r4, #20
 80057ba:	193b      	adds	r3, r7, r4
 80057bc:	0018      	movs	r0, r3
 80057be:	2314      	movs	r3, #20
 80057c0:	001a      	movs	r2, r3
 80057c2:	2100      	movs	r1, #0
 80057c4:	f008 f820 	bl	800d808 <memset>
  if(huart->Instance==USART2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a4a      	ldr	r2, [pc, #296]	@ (80058f8 <HAL_UART_MspInit+0x148>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d000      	beq.n	80057d4 <HAL_UART_MspInit+0x24>
 80057d2:	e08d      	b.n	80058f0 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80057d4:	4b49      	ldr	r3, [pc, #292]	@ (80058fc <HAL_UART_MspInit+0x14c>)
 80057d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d8:	4b48      	ldr	r3, [pc, #288]	@ (80058fc <HAL_UART_MspInit+0x14c>)
 80057da:	2180      	movs	r1, #128	@ 0x80
 80057dc:	0289      	lsls	r1, r1, #10
 80057de:	430a      	orrs	r2, r1
 80057e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057e2:	4b46      	ldr	r3, [pc, #280]	@ (80058fc <HAL_UART_MspInit+0x14c>)
 80057e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	029b      	lsls	r3, r3, #10
 80057ea:	4013      	ands	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f0:	4b42      	ldr	r3, [pc, #264]	@ (80058fc <HAL_UART_MspInit+0x14c>)
 80057f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057f4:	4b41      	ldr	r3, [pc, #260]	@ (80058fc <HAL_UART_MspInit+0x14c>)
 80057f6:	2101      	movs	r1, #1
 80057f8:	430a      	orrs	r2, r1
 80057fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80057fc:	4b3f      	ldr	r3, [pc, #252]	@ (80058fc <HAL_UART_MspInit+0x14c>)
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	2201      	movs	r2, #1
 8005802:	4013      	ands	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005808:	0021      	movs	r1, r4
 800580a:	187b      	adds	r3, r7, r1
 800580c:	220c      	movs	r2, #12
 800580e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	187b      	adds	r3, r7, r1
 8005812:	2202      	movs	r2, #2
 8005814:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005816:	187b      	adds	r3, r7, r1
 8005818:	2201      	movs	r2, #1
 800581a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800581c:	187b      	adds	r3, r7, r1
 800581e:	2200      	movs	r2, #0
 8005820:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005822:	187b      	adds	r3, r7, r1
 8005824:	2201      	movs	r2, #1
 8005826:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005828:	187a      	adds	r2, r7, r1
 800582a:	23a0      	movs	r3, #160	@ 0xa0
 800582c:	05db      	lsls	r3, r3, #23
 800582e:	0011      	movs	r1, r2
 8005830:	0018      	movs	r0, r3
 8005832:	f002 fcf3 	bl	800821c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005836:	4b32      	ldr	r3, [pc, #200]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005838:	4a32      	ldr	r2, [pc, #200]	@ (8005904 <HAL_UART_MspInit+0x154>)
 800583a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800583c:	4b30      	ldr	r3, [pc, #192]	@ (8005900 <HAL_UART_MspInit+0x150>)
 800583e:	2234      	movs	r2, #52	@ 0x34
 8005840:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005842:	4b2f      	ldr	r3, [pc, #188]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005844:	2200      	movs	r2, #0
 8005846:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005848:	4b2d      	ldr	r3, [pc, #180]	@ (8005900 <HAL_UART_MspInit+0x150>)
 800584a:	2200      	movs	r2, #0
 800584c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800584e:	4b2c      	ldr	r3, [pc, #176]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005850:	2280      	movs	r2, #128	@ 0x80
 8005852:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005854:	4b2a      	ldr	r3, [pc, #168]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005856:	2200      	movs	r2, #0
 8005858:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800585a:	4b29      	ldr	r3, [pc, #164]	@ (8005900 <HAL_UART_MspInit+0x150>)
 800585c:	2200      	movs	r2, #0
 800585e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005860:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005862:	2200      	movs	r2, #0
 8005864:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005866:	4b26      	ldr	r3, [pc, #152]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	0152      	lsls	r2, r2, #5
 800586c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800586e:	4b24      	ldr	r3, [pc, #144]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005870:	0018      	movs	r0, r3
 8005872:	f002 f9b5 	bl	8007be0 <HAL_DMA_Init>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d001      	beq.n	800587e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800587a:	f7fc fd77 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2180      	movs	r1, #128	@ 0x80
 8005882:	4a1f      	ldr	r2, [pc, #124]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005884:	505a      	str	r2, [r3, r1]
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <HAL_UART_MspInit+0x150>)
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800588c:	4b1e      	ldr	r3, [pc, #120]	@ (8005908 <HAL_UART_MspInit+0x158>)
 800588e:	4a1f      	ldr	r2, [pc, #124]	@ (800590c <HAL_UART_MspInit+0x15c>)
 8005890:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005892:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <HAL_UART_MspInit+0x158>)
 8005894:	2235      	movs	r2, #53	@ 0x35
 8005896:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <HAL_UART_MspInit+0x158>)
 800589a:	2210      	movs	r2, #16
 800589c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800589e:	4b1a      	ldr	r3, [pc, #104]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058a4:	4b18      	ldr	r3, [pc, #96]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058a6:	2280      	movs	r2, #128	@ 0x80
 80058a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058aa:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058b0:	4b15      	ldr	r3, [pc, #84]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80058b6:	4b14      	ldr	r3, [pc, #80]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058bc:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	0152      	lsls	r2, r2, #5
 80058c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058c6:	0018      	movs	r0, r3
 80058c8:	f002 f98a 	bl	8007be0 <HAL_DMA_Init>
 80058cc:	1e03      	subs	r3, r0, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80058d0:	f7fc fd4c 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80058da:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_UART_MspInit+0x158>)
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80058e0:	2201      	movs	r2, #1
 80058e2:	2101      	movs	r1, #1
 80058e4:	201c      	movs	r0, #28
 80058e6:	f002 f939 	bl	8007b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80058ea:	201c      	movs	r0, #28
 80058ec:	f002 f94b 	bl	8007b86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80058f0:	46c0      	nop			@ (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b00b      	add	sp, #44	@ 0x2c
 80058f6:	bd90      	pop	{r4, r7, pc}
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40021000 	.word	0x40021000
 8005900:	20000b14 	.word	0x20000b14
 8005904:	4002001c 	.word	0x4002001c
 8005908:	20000b70 	.word	0x20000b70
 800590c:	40020030 	.word	0x40020030

08005910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005914:	46c0      	nop			@ (mov r8, r8)
 8005916:	e7fd      	b.n	8005914 <NMI_Handler+0x4>

08005918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	e7fd      	b.n	800591c <HardFault_Handler+0x4>

08005920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005924:	46c0      	nop			@ (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005938:	f000 fdfc 	bl	8006534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005946:	2080      	movs	r0, #128	@ 0x80
 8005948:	f002 fe06 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005958:	4b03      	ldr	r3, [pc, #12]	@ (8005968 <DMA1_Channel1_IRQHandler+0x14>)
 800595a:	0018      	movs	r0, r3
 800595c:	f002 fb1c 	bl	8007f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005960:	46c0      	nop			@ (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	20000584 	.word	0x20000584

0800596c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005970:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005972:	0018      	movs	r0, r3
 8005974:	f002 fb10 	bl	8007f98 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005978:	4b04      	ldr	r3, [pc, #16]	@ (800598c <DMA1_Channel2_3_IRQHandler+0x20>)
 800597a:	0018      	movs	r0, r3
 800597c:	f002 fb0c 	bl	8007f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005980:	46c0      	nop			@ (mov r8, r8)
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	20000b14 	.word	0x20000b14
 800598c:	20000b70 	.word	0x20000b70

08005990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <TIM2_IRQHandler+0x14>)
 8005996:	0018      	movs	r0, r3
 8005998:	f004 fef0 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800599c:	46c0      	nop			@ (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	20000814 	.word	0x20000814

080059a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80059ac:	4b03      	ldr	r3, [pc, #12]	@ (80059bc <TIM3_IRQHandler+0x14>)
 80059ae:	0018      	movs	r0, r3
 80059b0:	f004 fee4 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80059b4:	46c0      	nop			@ (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	200008d0 	.word	0x200008d0

080059c0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80059c4:	4b03      	ldr	r3, [pc, #12]	@ (80059d4 <TIM16_IRQHandler+0x14>)
 80059c6:	0018      	movs	r0, r3
 80059c8:	f004 fed8 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			@ (mov r8, r8)
 80059d4:	20000758 	.word	0x20000758

080059d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80059dc:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <USART2_IRQHandler+0x14>)
 80059de:	0018      	movs	r0, r3
 80059e0:	f006 fc4e 	bl	800c280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80059e4:	46c0      	nop			@ (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	20000a48 	.word	0x20000a48

080059f0 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 80059f4:	4b03      	ldr	r3, [pc, #12]	@ (8005a04 <LPTIM1_IRQHandler+0x14>)
 80059f6:	0018      	movs	r0, r3
 80059f8:	f002 ff1c 	bl	8008834 <HAL_LPTIM_IRQHandler>
}
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	20000bcc 	.word	0x20000bcc

08005a08 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005a0c:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <TIM17_IRQHandler+0x14>)
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f004 feb4 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005a14:	46c0      	nop			@ (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	2000069c 	.word	0x2000069c

08005a20 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005a24:	4b03      	ldr	r3, [pc, #12]	@ (8005a34 <TIM14_IRQHandler+0x14>)
 8005a26:	0018      	movs	r0, r3
 8005a28:	f004 fea8 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005a2c:	46c0      	nop			@ (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	200005e0 	.word	0x200005e0

08005a38 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	5c9b      	ldrb	r3, [r3, r2]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d107      	bne.n	8005a5c <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8b5b      	ldrh	r3, [r3, #26]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	18db      	adds	r3, r3, r3
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	839a      	strh	r2, [r3, #28]
 8005a5a:	e00a      	b.n	8005a72 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	5c9b      	ldrb	r3, [r3, r2]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8b5b      	ldrh	r3, [r3, #26]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005a72:	2301      	movs	r3, #1
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8005a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a84:	2317      	movs	r3, #23
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8005a8c:	2316      	movs	r3, #22
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8005a94:	2315      	movs	r3, #21
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8005a9c:	2114      	movs	r1, #20
 8005a9e:	187b      	adds	r3, r7, r1
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	899b      	ldrh	r3, [r3, #12]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aac:	d803      	bhi.n	8005ab6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e003      	b.n	8005abe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8005ab6:	2314      	movs	r3, #20
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	799b      	ldrb	r3, [r3, #6]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d004      	beq.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	799b      	ldrb	r3, [r3, #6]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d146      	bne.n	8005b60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7c1b      	ldrb	r3, [r3, #16]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7c5b      	ldrb	r3, [r3, #17]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	7c1b      	ldrb	r3, [r3, #16]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d113      	bne.n	8005b18 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7c5b      	ldrb	r3, [r3, #17]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10e      	bne.n	8005b18 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8005afa:	2314      	movs	r3, #20
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005b04:	2316      	movs	r3, #22
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005b0c:	e027      	b.n	8005b5e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005b0e:	2316      	movs	r3, #22
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005b16:	e022      	b.n	8005b5e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7c1b      	ldrb	r3, [r3, #16]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7c5b      	ldrb	r3, [r3, #17]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d009      	beq.n	8005b40 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7c1b      	ldrb	r3, [r3, #16]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d13c      	bne.n	8005bb0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7c5b      	ldrb	r3, [r3, #17]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d137      	bne.n	8005bb0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005b40:	2314      	movs	r3, #20
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d104      	bne.n	8005b54 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8005b4a:	2316      	movs	r3, #22
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005b52:	e02d      	b.n	8005bb0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005b54:	2316      	movs	r3, #22
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005b5c:	e028      	b.n	8005bb0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005b5e:	e027      	b.n	8005bb0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	799b      	ldrb	r3, [r3, #6]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d123      	bne.n	8005bb2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	7c1b      	ldrb	r3, [r3, #16]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8005b74:	2314      	movs	r3, #20
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005b7e:	2316      	movs	r3, #22
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e014      	b.n	8005bb2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005b88:	2316      	movs	r3, #22
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	e00f      	b.n	8005bb2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8005b92:	2314      	movs	r3, #20
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8005b9c:	2316      	movs	r3, #22
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e005      	b.n	8005bb2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005ba6:	2316      	movs	r3, #22
 8005ba8:	18fb      	adds	r3, r7, r3
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e000      	b.n	8005bb2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005bb0:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005bb2:	2314      	movs	r3, #20
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	899b      	ldrh	r3, [r3, #12]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	2315      	movs	r3, #21
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	217f      	movs	r1, #127	@ 0x7f
 8005bca:	1a8a      	subs	r2, r1, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e007      	b.n	8005be0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	899b      	ldrh	r3, [r3, #12]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	2315      	movs	r3, #21
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	3a80      	subs	r2, #128	@ 0x80
 8005bde:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8a5b      	ldrh	r3, [r3, #18]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	200e      	movs	r0, #14
 8005be8:	183b      	adds	r3, r7, r0
 8005bea:	2180      	movs	r1, #128	@ 0x80
 8005bec:	0049      	lsls	r1, r1, #1
 8005bee:	1a8a      	subs	r2, r1, r2
 8005bf0:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005bf2:	0001      	movs	r1, r0
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	2215      	movs	r2, #21
 8005bfa:	18ba      	adds	r2, r7, r2
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	435a      	muls	r2, r3
 8005c00:	0013      	movs	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	10da      	asrs	r2, r3, #3
 8005c0a:	240c      	movs	r4, #12
 8005c0c:	193b      	adds	r3, r7, r4
 8005c0e:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005c10:	250a      	movs	r5, #10
 8005c12:	197b      	adds	r3, r7, r5
 8005c14:	193a      	adds	r2, r7, r4
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	0a12      	lsrs	r2, r2, #8
 8005c1a:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005c1c:	2312      	movs	r3, #18
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	0008      	movs	r0, r1
 8005c22:	1879      	adds	r1, r7, r1
 8005c24:	197a      	adds	r2, r7, r5
 8005c26:	8809      	ldrh	r1, [r1, #0]
 8005c28:	8812      	ldrh	r2, [r2, #0]
 8005c2a:	1a8a      	subs	r2, r1, r2
 8005c2c:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005c2e:	2610      	movs	r6, #16
 8005c30:	19bb      	adds	r3, r7, r6
 8005c32:	1839      	adds	r1, r7, r0
 8005c34:	197a      	adds	r2, r7, r5
 8005c36:	8809      	ldrh	r1, [r1, #0]
 8005c38:	8812      	ldrh	r2, [r2, #0]
 8005c3a:	188a      	adds	r2, r1, r2
 8005c3c:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005c3e:	19bb      	adds	r3, r7, r6
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	2bff      	cmp	r3, #255	@ 0xff
 8005c44:	d90f      	bls.n	8005c66 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005c46:	19bb      	adds	r3, r7, r6
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	2380      	movs	r3, #128	@ 0x80
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d000      	beq.n	8005c54 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8005c52:	e0b0      	b.n	8005db6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8005c54:	193b      	adds	r3, r7, r4
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2108      	movs	r1, #8
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 fb80 	bl	8006360 <unsigned_bitwise_modulo>
 8005c60:	1e03      	subs	r3, r0, #0
 8005c62:	d000      	beq.n	8005c66 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005c64:	e0a7      	b.n	8005db6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005c66:	230c      	movs	r3, #12
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	2108      	movs	r1, #8
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f000 fb76 	bl	8006360 <unsigned_bitwise_modulo>
 8005c74:	0003      	movs	r3, r0
 8005c76:	2b80      	cmp	r3, #128	@ 0x80
 8005c78:	d117      	bne.n	8005caa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005c7a:	2316      	movs	r3, #22
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8005c84:	2317      	movs	r3, #23
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	2202      	movs	r2, #2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e008      	b.n	8005ca0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c8e:	2316      	movs	r3, #22
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d103      	bne.n	8005ca0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005c98:	2317      	movs	r3, #23
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005ca8:	e21f      	b.n	80060ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005caa:	230c      	movs	r3, #12
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	2108      	movs	r1, #8
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f000 fb54 	bl	8006360 <unsigned_bitwise_modulo>
 8005cb8:	1e03      	subs	r3, r0, #0
 8005cba:	d121      	bne.n	8005d00 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005cbc:	2212      	movs	r2, #18
 8005cbe:	18bb      	adds	r3, r7, r2
 8005cc0:	18ba      	adds	r2, r7, r2
 8005cc2:	8812      	ldrh	r2, [r2, #0]
 8005cc4:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	18bb      	adds	r3, r7, r2
 8005cca:	18ba      	adds	r2, r7, r2
 8005ccc:	8812      	ldrh	r2, [r2, #0]
 8005cce:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005cd0:	2316      	movs	r3, #22
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d104      	bne.n	8005ce4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005cda:	2317      	movs	r3, #23
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e008      	b.n	8005cf6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ce4:	2316      	movs	r3, #22
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d103      	bne.n	8005cf6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005cee:	2317      	movs	r3, #23
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005cfe:	e1f4      	b.n	80060ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005d00:	230c      	movs	r3, #12
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	2108      	movs	r1, #8
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 fb29 	bl	8006360 <unsigned_bitwise_modulo>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d12:	d821      	bhi.n	8005d58 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005d14:	2212      	movs	r2, #18
 8005d16:	18bb      	adds	r3, r7, r2
 8005d18:	18ba      	adds	r2, r7, r2
 8005d1a:	8812      	ldrh	r2, [r2, #0]
 8005d1c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005d1e:	2210      	movs	r2, #16
 8005d20:	18bb      	adds	r3, r7, r2
 8005d22:	18ba      	adds	r2, r7, r2
 8005d24:	8812      	ldrh	r2, [r2, #0]
 8005d26:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005d28:	2316      	movs	r3, #22
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d32:	2317      	movs	r3, #23
 8005d34:	18fb      	adds	r3, r7, r3
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e008      	b.n	8005d4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d3c:	2316      	movs	r3, #22
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d103      	bne.n	8005d4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d46:	2317      	movs	r3, #23
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	2100      	movs	r1, #0
 8005d54:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005d56:	e1c8      	b.n	80060ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005d58:	230c      	movs	r3, #12
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	2108      	movs	r1, #8
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 fafd 	bl	8006360 <unsigned_bitwise_modulo>
 8005d66:	0003      	movs	r3, r0
 8005d68:	2b80      	cmp	r3, #128	@ 0x80
 8005d6a:	d800      	bhi.n	8005d6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005d6c:	e1bd      	b.n	80060ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005d6e:	2212      	movs	r2, #18
 8005d70:	18bb      	adds	r3, r7, r2
 8005d72:	18ba      	adds	r2, r7, r2
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	3a01      	subs	r2, #1
 8005d78:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	18bb      	adds	r3, r7, r2
 8005d7e:	18ba      	adds	r2, r7, r2
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	3201      	adds	r2, #1
 8005d84:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005d86:	2316      	movs	r3, #22
 8005d88:	18fb      	adds	r3, r7, r3
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d90:	2317      	movs	r3, #23
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e008      	b.n	8005dac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d9a:	2316      	movs	r3, #22
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d103      	bne.n	8005dac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005da4:	2317      	movs	r3, #23
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	2100      	movs	r1, #0
 8005db2:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005db4:	e199      	b.n	80060ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005db6:	2110      	movs	r1, #16
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	881a      	ldrh	r2, [r3, #0]
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d810      	bhi.n	8005de6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005dc4:	187b      	adds	r3, r7, r1
 8005dc6:	881a      	ldrh	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d000      	beq.n	8005dd2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005dd0:	e18c      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	2108      	movs	r1, #8
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f000 fac0 	bl	8006360 <unsigned_bitwise_modulo>
 8005de0:	1e03      	subs	r3, r0, #0
 8005de2:	d100      	bne.n	8005de6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005de4:	e182      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005de6:	230c      	movs	r3, #12
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	2108      	movs	r1, #8
 8005dee:	0018      	movs	r0, r3
 8005df0:	f000 fab6 	bl	8006360 <unsigned_bitwise_modulo>
 8005df4:	0003      	movs	r3, r0
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d159      	bne.n	8005eae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005dfa:	2212      	movs	r2, #18
 8005dfc:	18bb      	adds	r3, r7, r2
 8005dfe:	18ba      	adds	r2, r7, r2
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	3a01      	subs	r2, #1
 8005e04:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005e06:	2110      	movs	r1, #16
 8005e08:	187b      	adds	r3, r7, r1
 8005e0a:	187a      	adds	r2, r7, r1
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	3201      	adds	r2, #1
 8005e10:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005e12:	000c      	movs	r4, r1
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 faa0 	bl	8006360 <unsigned_bitwise_modulo>
 8005e20:	1e03      	subs	r3, r0, #0
 8005e22:	d121      	bne.n	8005e68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	193a      	adds	r2, r7, r4
 8005e28:	8812      	ldrh	r2, [r2, #0]
 8005e2a:	0852      	lsrs	r2, r2, #1
 8005e2c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005e2e:	2316      	movs	r3, #22
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e38:	2317      	movs	r3, #23
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	2100      	movs	r1, #0
 8005e46:	5499      	strb	r1, [r3, r2]
 8005e48:	e150      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e4a:	2316      	movs	r3, #22
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d000      	beq.n	8005e56 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005e54:	e14a      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e56:	2317      	movs	r3, #23
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	2101      	movs	r1, #1
 8005e64:	5499      	strb	r1, [r3, r2]
 8005e66:	e141      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005e68:	2210      	movs	r2, #16
 8005e6a:	18bb      	adds	r3, r7, r2
 8005e6c:	18ba      	adds	r2, r7, r2
 8005e6e:	8812      	ldrh	r2, [r2, #0]
 8005e70:	0852      	lsrs	r2, r2, #1
 8005e72:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005e74:	2316      	movs	r3, #22
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e7e:	2317      	movs	r3, #23
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	5499      	strb	r1, [r3, r2]
 8005e8e:	e12d      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e90:	2316      	movs	r3, #22
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d000      	beq.n	8005e9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005e9a:	e127      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005e9c:	2317      	movs	r3, #23
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	5499      	strb	r1, [r3, r2]
 8005eac:	e11e      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005eae:	230c      	movs	r3, #12
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	2108      	movs	r1, #8
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f000 fa52 	bl	8006360 <unsigned_bitwise_modulo>
 8005ebc:	1e03      	subs	r3, r0, #0
 8005ebe:	d152      	bne.n	8005f66 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005ec0:	2212      	movs	r2, #18
 8005ec2:	18bb      	adds	r3, r7, r2
 8005ec4:	18ba      	adds	r2, r7, r2
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005eca:	2410      	movs	r4, #16
 8005ecc:	193b      	adds	r3, r7, r4
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 fa44 	bl	8006360 <unsigned_bitwise_modulo>
 8005ed8:	1e03      	subs	r3, r0, #0
 8005eda:	d121      	bne.n	8005f20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005edc:	193b      	adds	r3, r7, r4
 8005ede:	193a      	adds	r2, r7, r4
 8005ee0:	8812      	ldrh	r2, [r2, #0]
 8005ee2:	0852      	lsrs	r2, r2, #1
 8005ee4:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005ee6:	2316      	movs	r3, #22
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ef0:	2317      	movs	r3, #23
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	2100      	movs	r1, #0
 8005efe:	5499      	strb	r1, [r3, r2]
 8005f00:	e0f4      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005f02:	2316      	movs	r3, #22
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d000      	beq.n	8005f0e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005f0c:	e0ee      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005f0e:	2317      	movs	r3, #23
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]
 8005f1e:	e0e5      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005f20:	2210      	movs	r2, #16
 8005f22:	18bb      	adds	r3, r7, r2
 8005f24:	18ba      	adds	r2, r7, r2
 8005f26:	8812      	ldrh	r2, [r2, #0]
 8005f28:	0852      	lsrs	r2, r2, #1
 8005f2a:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005f2c:	2316      	movs	r3, #22
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d108      	bne.n	8005f48 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005f36:	2317      	movs	r3, #23
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	2100      	movs	r1, #0
 8005f44:	5499      	strb	r1, [r3, r2]
 8005f46:	e0d1      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005f48:	2316      	movs	r3, #22
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d000      	beq.n	8005f54 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005f52:	e0cb      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005f54:	2317      	movs	r3, #23
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	2201      	movs	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	2101      	movs	r1, #1
 8005f62:	5499      	strb	r1, [r3, r2]
 8005f64:	e0c2      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005f66:	230c      	movs	r3, #12
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 f9f6 	bl	8006360 <unsigned_bitwise_modulo>
 8005f74:	0003      	movs	r3, r0
 8005f76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f78:	d856      	bhi.n	8006028 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005f7a:	2212      	movs	r2, #18
 8005f7c:	18bb      	adds	r3, r7, r2
 8005f7e:	18ba      	adds	r2, r7, r2
 8005f80:	8812      	ldrh	r2, [r2, #0]
 8005f82:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005f84:	2410      	movs	r4, #16
 8005f86:	193b      	adds	r3, r7, r4
 8005f88:	193a      	adds	r2, r7, r4
 8005f8a:	8812      	ldrh	r2, [r2, #0]
 8005f8c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005f8e:	193b      	adds	r3, r7, r4
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	2101      	movs	r1, #1
 8005f94:	0018      	movs	r0, r3
 8005f96:	f000 f9e3 	bl	8006360 <unsigned_bitwise_modulo>
 8005f9a:	1e03      	subs	r3, r0, #0
 8005f9c:	d121      	bne.n	8005fe2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005f9e:	193b      	adds	r3, r7, r4
 8005fa0:	193a      	adds	r2, r7, r4
 8005fa2:	8812      	ldrh	r2, [r2, #0]
 8005fa4:	0852      	lsrs	r2, r2, #1
 8005fa6:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005fa8:	2316      	movs	r3, #22
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d108      	bne.n	8005fc4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fb2:	2317      	movs	r3, #23
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	5499      	strb	r1, [r3, r2]
 8005fc2:	e093      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005fc4:	2316      	movs	r3, #22
 8005fc6:	18fb      	adds	r3, r7, r3
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d000      	beq.n	8005fd0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005fce:	e08d      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fd0:	2317      	movs	r3, #23
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	2101      	movs	r1, #1
 8005fde:	5499      	strb	r1, [r3, r2]
 8005fe0:	e084      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005fe2:	2210      	movs	r2, #16
 8005fe4:	18bb      	adds	r3, r7, r2
 8005fe6:	18ba      	adds	r2, r7, r2
 8005fe8:	8812      	ldrh	r2, [r2, #0]
 8005fea:	0852      	lsrs	r2, r2, #1
 8005fec:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005fee:	2316      	movs	r3, #22
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d108      	bne.n	800600a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ff8:	2317      	movs	r3, #23
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	2100      	movs	r1, #0
 8006006:	5499      	strb	r1, [r3, r2]
 8006008:	e070      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800600a:	2316      	movs	r3, #22
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d000      	beq.n	8006016 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8006014:	e06a      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006016:	2317      	movs	r3, #23
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	2101      	movs	r1, #1
 8006024:	5499      	strb	r1, [r3, r2]
 8006026:	e061      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8006028:	230c      	movs	r3, #12
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	2108      	movs	r1, #8
 8006030:	0018      	movs	r0, r3
 8006032:	f000 f995 	bl	8006360 <unsigned_bitwise_modulo>
 8006036:	0003      	movs	r3, r0
 8006038:	2b80      	cmp	r3, #128	@ 0x80
 800603a:	d957      	bls.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800603c:	2212      	movs	r2, #18
 800603e:	18bb      	adds	r3, r7, r2
 8006040:	18ba      	adds	r2, r7, r2
 8006042:	8812      	ldrh	r2, [r2, #0]
 8006044:	3a01      	subs	r2, #1
 8006046:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8006048:	2410      	movs	r4, #16
 800604a:	193b      	adds	r3, r7, r4
 800604c:	193a      	adds	r2, r7, r4
 800604e:	8812      	ldrh	r2, [r2, #0]
 8006050:	3201      	adds	r2, #1
 8006052:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8006054:	193b      	adds	r3, r7, r4
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	2101      	movs	r1, #1
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f980 	bl	8006360 <unsigned_bitwise_modulo>
 8006060:	1e03      	subs	r3, r0, #0
 8006062:	d120      	bne.n	80060a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006064:	193b      	adds	r3, r7, r4
 8006066:	193a      	adds	r2, r7, r4
 8006068:	8812      	ldrh	r2, [r2, #0]
 800606a:	0852      	lsrs	r2, r2, #1
 800606c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800606e:	2316      	movs	r3, #22
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d108      	bne.n	800608a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006078:	2317      	movs	r3, #23
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	2100      	movs	r1, #0
 8006086:	5499      	strb	r1, [r3, r2]
 8006088:	e030      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800608a:	2316      	movs	r3, #22
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d12b      	bne.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006094:	2317      	movs	r3, #23
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	2101      	movs	r1, #1
 80060a2:	5499      	strb	r1, [r3, r2]
 80060a4:	e022      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80060a6:	2210      	movs	r2, #16
 80060a8:	18bb      	adds	r3, r7, r2
 80060aa:	18ba      	adds	r2, r7, r2
 80060ac:	8812      	ldrh	r2, [r2, #0]
 80060ae:	0852      	lsrs	r2, r2, #1
 80060b0:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80060b2:	2316      	movs	r3, #22
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80060bc:	2317      	movs	r3, #23
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]
 80060cc:	e00e      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80060ce:	2316      	movs	r3, #22
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d109      	bne.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80060d8:	2317      	movs	r3, #23
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	2101      	movs	r1, #1
 80060e6:	5499      	strb	r1, [r3, r2]
 80060e8:	e000      	b.n	80060ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80060ea:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 80060ec:	2316      	movs	r3, #22
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d152      	bne.n	800619c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80060f6:	2317      	movs	r3, #23
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006100:	2312      	movs	r3, #18
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	2280      	movs	r2, #128	@ 0x80
 8006108:	0052      	lsls	r2, r2, #1
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	829a      	strh	r2, [r3, #20]
 8006112:	e099      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006114:	2317      	movs	r3, #23
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d11b      	bne.n	8006156 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	89db      	ldrh	r3, [r3, #14]
 8006122:	b29b      	uxth	r3, r3
 8006124:	2101      	movs	r1, #1
 8006126:	0018      	movs	r0, r3
 8006128:	f000 f91a 	bl	8006360 <unsigned_bitwise_modulo>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d109      	bne.n	8006144 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006130:	2312      	movs	r3, #18
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	2280      	movs	r2, #128	@ 0x80
 8006138:	0052      	lsls	r2, r2, #1
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	829a      	strh	r2, [r3, #20]
 8006142:	e081      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8006144:	2312      	movs	r3, #18
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	22ff      	movs	r2, #255	@ 0xff
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	829a      	strh	r2, [r3, #20]
 8006154:	e078      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006156:	2317      	movs	r3, #23
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d000      	beq.n	8006162 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8006160:	e072      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	89db      	ldrh	r3, [r3, #14]
 8006166:	b29b      	uxth	r3, r3
 8006168:	2101      	movs	r1, #1
 800616a:	0018      	movs	r0, r3
 800616c:	f000 f8f8 	bl	8006360 <unsigned_bitwise_modulo>
 8006170:	1e03      	subs	r3, r0, #0
 8006172:	d109      	bne.n	8006188 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006174:	2312      	movs	r3, #18
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	2280      	movs	r2, #128	@ 0x80
 800617c:	0052      	lsls	r2, r2, #1
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	829a      	strh	r2, [r3, #20]
 8006186:	e05f      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8006188:	2312      	movs	r3, #18
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2202      	movs	r2, #2
 8006190:	32ff      	adds	r2, #255	@ 0xff
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	829a      	strh	r2, [r3, #20]
 800619a:	e055      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 800619c:	2316      	movs	r3, #22
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d150      	bne.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80061a6:	2317      	movs	r3, #23
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80061b0:	2310      	movs	r3, #16
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	2280      	movs	r2, #128	@ 0x80
 80061b8:	0052      	lsls	r2, r2, #1
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	829a      	strh	r2, [r3, #20]
 80061c2:	e041      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80061c4:	2317      	movs	r3, #23
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d11b      	bne.n	8006206 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	89db      	ldrh	r3, [r3, #14]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2101      	movs	r1, #1
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 f8c2 	bl	8006360 <unsigned_bitwise_modulo>
 80061dc:	1e03      	subs	r3, r0, #0
 80061de:	d109      	bne.n	80061f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80061e0:	2310      	movs	r3, #16
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	2280      	movs	r2, #128	@ 0x80
 80061e8:	0052      	lsls	r2, r2, #1
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	829a      	strh	r2, [r3, #20]
 80061f2:	e029      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 80061f4:	2310      	movs	r3, #16
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	22ff      	movs	r2, #255	@ 0xff
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	829a      	strh	r2, [r3, #20]
 8006204:	e020      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006206:	2317      	movs	r3, #23
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d11b      	bne.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	89db      	ldrh	r3, [r3, #14]
 8006214:	b29b      	uxth	r3, r3
 8006216:	2101      	movs	r1, #1
 8006218:	0018      	movs	r0, r3
 800621a:	f000 f8a1 	bl	8006360 <unsigned_bitwise_modulo>
 800621e:	1e03      	subs	r3, r0, #0
 8006220:	d109      	bne.n	8006236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8006222:	2310      	movs	r3, #16
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	2280      	movs	r2, #128	@ 0x80
 800622a:	0052      	lsls	r2, r2, #1
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	829a      	strh	r2, [r3, #20]
 8006234:	e008      	b.n	8006248 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8006236:	2310      	movs	r3, #16
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	2202      	movs	r2, #2
 800623e:	32ff      	adds	r2, #255	@ 0xff
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	0018      	movs	r0, r3
 800624c:	f7ff fbf4 	bl	8005a38 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8a9b      	ldrh	r3, [r3, #20]
 8006254:	b29b      	uxth	r3, r3
 8006256:	2280      	movs	r2, #128	@ 0x80
 8006258:	0052      	lsls	r2, r2, #1
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8adb      	ldrh	r3, [r3, #22]
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	8b9b      	ldrh	r3, [r3, #28]
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	83da      	strh	r2, [r3, #30]

    return 1;
 800627e:	2301      	movs	r3, #1
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b007      	add	sp, #28
 8006286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800628c:	46c0      	nop			@ (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8006292:	b5b0      	push	{r4, r5, r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 800629c:	250f      	movs	r5, #15
 800629e:	197c      	adds	r4, r7, r5
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0011      	movs	r1, r2
 80062a6:	0018      	movs	r0, r3
 80062a8:	f003 fd8c 	bl	8009dc4 <HAL_TIM_OC_Start_IT>
 80062ac:	0003      	movs	r3, r0
 80062ae:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80062b0:	197b      	adds	r3, r7, r5
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <Start_OC_TIM+0x2a>

		Error_Handler();
 80062b8:	f7fc f858 	bl	800236c <Error_Handler>
	}

	return ok;
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	781b      	ldrb	r3, [r3, #0]
}
 80062c2:	0018      	movs	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b004      	add	sp, #16
 80062c8:	bdb0      	pop	{r4, r5, r7, pc}

080062ca <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80062ca:	b5b0      	push	{r4, r5, r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 80062d4:	250f      	movs	r5, #15
 80062d6:	197c      	adds	r4, r7, r5
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f003 fe94 	bl	800a00c <HAL_TIM_OC_Stop_IT>
 80062e4:	0003      	movs	r3, r0
 80062e6:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80062e8:	197b      	adds	r3, r7, r5
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <Stop_OC_TIM+0x2a>

		Error_Handler();
 80062f0:	f7fc f83c 	bl	800236c <Error_Handler>
	}

	return ok;
 80062f4:	230f      	movs	r3, #15
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	781b      	ldrb	r3, [r3, #0]
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bdb0      	pop	{r4, r5, r7, pc}

08006302 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	0002      	movs	r2, r0
 800630a:	1dbb      	adds	r3, r7, #6
 800630c:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800630e:	230e      	movs	r3, #14
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	2202      	movs	r2, #2
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e014      	b.n	8006342 <isPrime+0x40>
        if (x % d == 0)
 8006318:	1dba      	adds	r2, r7, #6
 800631a:	230e      	movs	r3, #14
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	8812      	ldrh	r2, [r2, #0]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	0019      	movs	r1, r3
 8006324:	0010      	movs	r0, r2
 8006326:	f7f9 ff73 	bl	8000210 <__aeabi_uidivmod>
 800632a:	000b      	movs	r3, r1
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <isPrime+0x34>
            return NO;
 8006332:	2300      	movs	r3, #0
 8006334:	e010      	b.n	8006358 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8006336:	210e      	movs	r1, #14
 8006338:	187b      	adds	r3, r7, r1
 800633a:	881a      	ldrh	r2, [r3, #0]
 800633c:	187b      	adds	r3, r7, r1
 800633e:	3201      	adds	r2, #1
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	220e      	movs	r2, #14
 8006344:	18bb      	adds	r3, r7, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	18ba      	adds	r2, r7, r2
 800634a:	8812      	ldrh	r2, [r2, #0]
 800634c:	435a      	muls	r2, r3
 800634e:	1dbb      	adds	r3, r7, #6
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	dde0      	ble.n	8006318 <isPrime+0x16>
    }
    return YES;
 8006356:	2301      	movs	r3, #1
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b004      	add	sp, #16
 800635e:	bd80      	pop	{r7, pc}

08006360 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	000a      	movs	r2, r1
 800636a:	1cfb      	adds	r3, r7, #3
 800636c:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 800636e:	1cfb      	adds	r3, r7, #3
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2201      	movs	r2, #1
 8006374:	409a      	lsls	r2, r3
 8006376:	0013      	movs	r3, r2
 8006378:	3b01      	subs	r3, #1
 800637a:	001a      	movs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4013      	ands	r3, r2
}
 8006380:	0018      	movs	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	b002      	add	sp, #8
 8006386:	bd80      	pop	{r7, pc}

08006388 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800638c:	b662      	cpsie	i
}
 800638e:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8006390:	2301      	movs	r3, #1
}
 8006392:	0018      	movs	r0, r3
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	000a      	movs	r2, r1
 80063a2:	1cbb      	adds	r3, r7, #2
 80063a4:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	1cba      	adds	r2, r7, #2
 80063ac:	8812      	ldrh	r2, [r2, #0]
 80063ae:	4013      	ands	r3, r2
 80063b0:	d001      	beq.n	80063b6 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 80063b6:	2300      	movs	r3, #0
    }
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	000a      	movs	r2, r1
 80063ca:	1cbb      	adds	r3, r7, #2
 80063cc:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	1cbb      	adds	r3, r7, #2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]
}
 80063dc:	46c0      	nop			@ (mov r8, r8)
 80063de:	46bd      	mov	sp, r7
 80063e0:	b002      	add	sp, #8
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	000a      	movs	r2, r1
 80063ee:	1cbb      	adds	r3, r7, #2
 80063f0:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	1cba      	adds	r2, r7, #2
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	43d2      	mvns	r2, r2
 80063fc:	401a      	ands	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b002      	add	sp, #8
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800640c:	480d      	ldr	r0, [pc, #52]	@ (8006444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800640e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006410:	f7ff ff3a 	bl	8006288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006414:	480c      	ldr	r0, [pc, #48]	@ (8006448 <LoopForever+0x6>)
  ldr r1, =_edata
 8006416:	490d      	ldr	r1, [pc, #52]	@ (800644c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006418:	4a0d      	ldr	r2, [pc, #52]	@ (8006450 <LoopForever+0xe>)
  movs r3, #0
 800641a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800641c:	e002      	b.n	8006424 <LoopCopyDataInit>

0800641e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800641e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006422:	3304      	adds	r3, #4

08006424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006428:	d3f9      	bcc.n	800641e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800642a:	4a0a      	ldr	r2, [pc, #40]	@ (8006454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800642c:	4c0a      	ldr	r4, [pc, #40]	@ (8006458 <LoopForever+0x16>)
  movs r3, #0
 800642e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006430:	e001      	b.n	8006436 <LoopFillZerobss>

08006432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006434:	3204      	adds	r2, #4

08006436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006438:	d3fb      	bcc.n	8006432 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800643a:	f007 f9ed 	bl	800d818 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800643e:	f7fe fa85 	bl	800494c <main>

08006442 <LoopForever>:

LoopForever:
  b LoopForever
 8006442:	e7fe      	b.n	8006442 <LoopForever>
  ldr   r0, =_estack
 8006444:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800644c:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8006450:	0800e30c 	.word	0x0800e30c
  ldr r2, =_sbss
 8006454:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8006458:	20000cf4 	.word	0x20000cf4

0800645c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800645c:	e7fe      	b.n	800645c <ADC1_IRQHandler>
	...

08006460 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006466:	1dfb      	adds	r3, r7, #7
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800646c:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <HAL_Init+0x3c>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <HAL_Init+0x3c>)
 8006472:	2180      	movs	r1, #128	@ 0x80
 8006474:	0049      	lsls	r1, r1, #1
 8006476:	430a      	orrs	r2, r1
 8006478:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800647a:	2000      	movs	r0, #0
 800647c:	f000 f810 	bl	80064a0 <HAL_InitTick>
 8006480:	1e03      	subs	r3, r0, #0
 8006482:	d003      	beq.n	800648c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006484:	1dfb      	adds	r3, r7, #7
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e001      	b.n	8006490 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800648c:	f7fe fef8 	bl	8005280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006490:	1dfb      	adds	r3, r7, #7
 8006492:	781b      	ldrb	r3, [r3, #0]
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b002      	add	sp, #8
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40022000 	.word	0x40022000

080064a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80064a8:	230f      	movs	r3, #15
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80064b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006528 <HAL_InitTick+0x88>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d02b      	beq.n	8006510 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80064b8:	4b1c      	ldr	r3, [pc, #112]	@ (800652c <HAL_InitTick+0x8c>)
 80064ba:	681c      	ldr	r4, [r3, #0]
 80064bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006528 <HAL_InitTick+0x88>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	0019      	movs	r1, r3
 80064c2:	23fa      	movs	r3, #250	@ 0xfa
 80064c4:	0098      	lsls	r0, r3, #2
 80064c6:	f7f9 fe1d 	bl	8000104 <__udivsi3>
 80064ca:	0003      	movs	r3, r0
 80064cc:	0019      	movs	r1, r3
 80064ce:	0020      	movs	r0, r4
 80064d0:	f7f9 fe18 	bl	8000104 <__udivsi3>
 80064d4:	0003      	movs	r3, r0
 80064d6:	0018      	movs	r0, r3
 80064d8:	f001 fb75 	bl	8007bc6 <HAL_SYSTICK_Config>
 80064dc:	1e03      	subs	r3, r0, #0
 80064de:	d112      	bne.n	8006506 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d80a      	bhi.n	80064fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	2301      	movs	r3, #1
 80064ea:	425b      	negs	r3, r3
 80064ec:	2200      	movs	r2, #0
 80064ee:	0018      	movs	r0, r3
 80064f0:	f001 fb34 	bl	8007b5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006530 <HAL_InitTick+0x90>)
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e00d      	b.n	8006518 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80064fc:	230f      	movs	r3, #15
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006506:	230f      	movs	r3, #15
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e003      	b.n	8006518 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006510:	230f      	movs	r3, #15
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006518:	230f      	movs	r3, #15
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	781b      	ldrb	r3, [r3, #0]
}
 800651e:	0018      	movs	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	b005      	add	sp, #20
 8006524:	bd90      	pop	{r4, r7, pc}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	20000454 	.word	0x20000454
 800652c:	2000044c 	.word	0x2000044c
 8006530:	20000450 	.word	0x20000450

08006534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <HAL_IncTick+0x1c>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	001a      	movs	r2, r3
 800653e:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <HAL_IncTick+0x20>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	18d2      	adds	r2, r2, r3
 8006544:	4b03      	ldr	r3, [pc, #12]	@ (8006554 <HAL_IncTick+0x20>)
 8006546:	601a      	str	r2, [r3, #0]
}
 8006548:	46c0      	nop			@ (mov r8, r8)
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	20000454 	.word	0x20000454
 8006554:	20000cf0 	.word	0x20000cf0

08006558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  return uwTick;
 800655c:	4b02      	ldr	r3, [pc, #8]	@ (8006568 <HAL_GetTick+0x10>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	0018      	movs	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	46c0      	nop			@ (mov r8, r8)
 8006568:	20000cf0 	.word	0x20000cf0

0800656c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a05      	ldr	r2, [pc, #20]	@ (8006590 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800657c:	401a      	ands	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
}
 8006586:	46c0      	nop			@ (mov r8, r8)
 8006588:	46bd      	mov	sp, r7
 800658a:	b002      	add	sp, #8
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			@ (mov r8, r8)
 8006590:	fe3fffff 	.word	0xfe3fffff

08006594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	23e0      	movs	r3, #224	@ 0xe0
 80065a2:	045b      	lsls	r3, r3, #17
 80065a4:	4013      	ands	r3, r2
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b002      	add	sp, #8
 80065ac:	bd80      	pop	{r7, pc}

080065ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	2104      	movs	r1, #4
 80065c2:	400a      	ands	r2, r1
 80065c4:	2107      	movs	r1, #7
 80065c6:	4091      	lsls	r1, r2
 80065c8:	000a      	movs	r2, r1
 80065ca:	43d2      	mvns	r2, r2
 80065cc:	401a      	ands	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2104      	movs	r1, #4
 80065d2:	400b      	ands	r3, r1
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4099      	lsls	r1, r3
 80065d8:	000b      	movs	r3, r1
 80065da:	431a      	orrs	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80065e0:	46c0      	nop			@ (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b004      	add	sp, #16
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	2104      	movs	r1, #4
 80065fa:	400a      	ands	r2, r1
 80065fc:	2107      	movs	r1, #7
 80065fe:	4091      	lsls	r1, r2
 8006600:	000a      	movs	r2, r1
 8006602:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2104      	movs	r1, #4
 8006608:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800660a:	40da      	lsrs	r2, r3
 800660c:	0013      	movs	r3, r2
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}

08006616 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	23c0      	movs	r3, #192	@ 0xc0
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4013      	ands	r3, r2
 8006628:	d101      	bne.n	800662e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800662e:	2300      	movs	r3, #0
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}

08006638 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	211f      	movs	r1, #31
 800664c:	400a      	ands	r2, r1
 800664e:	210f      	movs	r1, #15
 8006650:	4091      	lsls	r1, r2
 8006652:	000a      	movs	r2, r1
 8006654:	43d2      	mvns	r2, r2
 8006656:	401a      	ands	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0e9b      	lsrs	r3, r3, #26
 800665c:	210f      	movs	r1, #15
 800665e:	4019      	ands	r1, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	201f      	movs	r0, #31
 8006664:	4003      	ands	r3, r0
 8006666:	4099      	lsls	r1, r3
 8006668:	000b      	movs	r3, r1
 800666a:	431a      	orrs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006670:	46c0      	nop			@ (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}

08006678 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	035b      	lsls	r3, r3, #13
 800668a:	0b5b      	lsrs	r3, r3, #13
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006692:	46c0      	nop			@ (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b002      	add	sp, #8
 8006698:	bd80      	pop	{r7, pc}

0800669a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	0352      	lsls	r2, r2, #13
 80066ac:	0b52      	lsrs	r2, r2, #13
 80066ae:	43d2      	mvns	r2, r2
 80066b0:	401a      	ands	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b002      	add	sp, #8
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	0212      	lsls	r2, r2, #8
 80066d4:	43d2      	mvns	r2, r2
 80066d6:	401a      	ands	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	400b      	ands	r3, r1
 80066e0:	4904      	ldr	r1, [pc, #16]	@ (80066f4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80066e2:	400b      	ands	r3, r1
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	07ffff00 	.word	0x07ffff00

080066f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4a05      	ldr	r2, [pc, #20]	@ (800671c <LL_ADC_EnableInternalRegulator+0x24>)
 8006706:	4013      	ands	r3, r2
 8006708:	2280      	movs	r2, #128	@ 0x80
 800670a:	0552      	lsls	r2, r2, #21
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	46bd      	mov	sp, r7
 8006716:	b002      	add	sp, #8
 8006718:	bd80      	pop	{r7, pc}
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	6fffffe8 	.word	0x6fffffe8

08006720 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	2380      	movs	r3, #128	@ 0x80
 800672e:	055b      	lsls	r3, r3, #21
 8006730:	401a      	ands	r2, r3
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	055b      	lsls	r3, r3, #21
 8006736:	429a      	cmp	r2, r3
 8006738:	d101      	bne.n	800673e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800673e:	2300      	movs	r3, #0
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}

08006748 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a04      	ldr	r2, [pc, #16]	@ (8006768 <LL_ADC_Enable+0x20>)
 8006756:	4013      	ands	r3, r2
 8006758:	2201      	movs	r2, #1
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006760:	46c0      	nop			@ (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b002      	add	sp, #8
 8006766:	bd80      	pop	{r7, pc}
 8006768:	7fffffe8 	.word	0x7fffffe8

0800676c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4a04      	ldr	r2, [pc, #16]	@ (800678c <LL_ADC_Disable+0x20>)
 800677a:	4013      	ands	r3, r2
 800677c:	2202      	movs	r2, #2
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006784:	46c0      	nop			@ (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}
 800678c:	7fffffe8 	.word	0x7fffffe8

08006790 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2201      	movs	r2, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <LL_ADC_IsEnabled+0x18>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <LL_ADC_IsEnabled+0x1a>
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	0018      	movs	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b002      	add	sp, #8
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2202      	movs	r2, #2
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d101      	bne.n	80067ca <LL_ADC_IsDisableOngoing+0x18>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <LL_ADC_IsDisableOngoing+0x1a>
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4a04      	ldr	r2, [pc, #16]	@ (80067f4 <LL_ADC_REG_StartConversion+0x20>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	2204      	movs	r2, #4
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80067ec:	46c0      	nop			@ (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	7fffffe8 	.word	0x7fffffe8

080067f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	4a04      	ldr	r2, [pc, #16]	@ (8006818 <LL_ADC_REG_StopConversion+0x20>)
 8006806:	4013      	ands	r3, r2
 8006808:	2210      	movs	r2, #16
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006810:	46c0      	nop			@ (mov r8, r8)
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}
 8006818:	7fffffe8 	.word	0x7fffffe8

0800681c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2204      	movs	r2, #4
 800682a:	4013      	ands	r3, r2
 800682c:	2b04      	cmp	r3, #4
 800682e:	d101      	bne.n	8006834 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006834:	2300      	movs	r3, #0
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b002      	add	sp, #8
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006848:	231f      	movs	r3, #31
 800684a:	18fb      	adds	r3, r7, r3
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006850:	2300      	movs	r3, #0
 8006852:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e19f      	b.n	8006ba6 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686a:	2b00      	cmp	r3, #0
 800686c:	d12a      	bne.n	80068c4 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4acf      	ldr	r2, [pc, #828]	@ (8006bb0 <HAL_ADC_Init+0x370>)
 8006872:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4acf      	ldr	r2, [pc, #828]	@ (8006bb4 <HAL_ADC_Init+0x374>)
 8006878:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4ace      	ldr	r2, [pc, #824]	@ (8006bb8 <HAL_ADC_Init+0x378>)
 800687e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4ace      	ldr	r2, [pc, #824]	@ (8006bbc <HAL_ADC_Init+0x37c>)
 8006884:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4acd      	ldr	r2, [pc, #820]	@ (8006bc0 <HAL_ADC_Init+0x380>)
 800688a:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4acd      	ldr	r2, [pc, #820]	@ (8006bc4 <HAL_ADC_Init+0x384>)
 8006890:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4acc      	ldr	r2, [pc, #816]	@ (8006bc8 <HAL_ADC_Init+0x388>)
 8006896:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2280      	movs	r2, #128	@ 0x80
 800689c:	589b      	ldr	r3, [r3, r2]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2180      	movs	r1, #128	@ 0x80
 80068a6:	4ac9      	ldr	r2, [pc, #804]	@ (8006bcc <HAL_ADC_Init+0x38c>)
 80068a8:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2280      	movs	r2, #128	@ 0x80
 80068ae:	589b      	ldr	r3, [r3, r2]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	0010      	movs	r0, r2
 80068b4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2254      	movs	r2, #84	@ 0x54
 80068c0:	2100      	movs	r1, #0
 80068c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f7ff ff29 	bl	8006720 <LL_ADC_IsInternalRegulatorEnabled>
 80068ce:	1e03      	subs	r3, r0, #0
 80068d0:	d115      	bne.n	80068fe <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	0018      	movs	r0, r3
 80068d8:	f7ff ff0e 	bl	80066f8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068dc:	4bbc      	ldr	r3, [pc, #752]	@ (8006bd0 <HAL_ADC_Init+0x390>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	49bc      	ldr	r1, [pc, #752]	@ (8006bd4 <HAL_ADC_Init+0x394>)
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7f9 fc0e 	bl	8000104 <__udivsi3>
 80068e8:	0003      	movs	r3, r0
 80068ea:	3301      	adds	r3, #1
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068f0:	e002      	b.n	80068f8 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f9      	bne.n	80068f2 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	0018      	movs	r0, r3
 8006904:	f7ff ff0c 	bl	8006720 <LL_ADC_IsInternalRegulatorEnabled>
 8006908:	1e03      	subs	r3, r0, #0
 800690a:	d10f      	bne.n	800692c <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006910:	2210      	movs	r2, #16
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691c:	2201      	movs	r2, #1
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006924:	231f      	movs	r3, #31
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	0018      	movs	r0, r3
 8006932:	f7ff ff73 	bl	800681c <LL_ADC_REG_IsConversionOngoing>
 8006936:	0003      	movs	r3, r0
 8006938:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693e:	2210      	movs	r2, #16
 8006940:	4013      	ands	r3, r2
 8006942:	d000      	beq.n	8006946 <HAL_ADC_Init+0x106>
 8006944:	e122      	b.n	8006b8c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d000      	beq.n	800694e <HAL_ADC_Init+0x10e>
 800694c:	e11e      	b.n	8006b8c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	4aa1      	ldr	r2, [pc, #644]	@ (8006bd8 <HAL_ADC_Init+0x398>)
 8006954:	4013      	ands	r3, r2
 8006956:	2202      	movs	r2, #2
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	0018      	movs	r0, r3
 8006964:	f7ff ff14 	bl	8006790 <LL_ADC_IsEnabled>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d000      	beq.n	800696e <HAL_ADC_Init+0x12e>
 800696c:	e0ad      	b.n	8006aca <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7e1b      	ldrb	r3, [r3, #24]
 8006976:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006978:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7e5b      	ldrb	r3, [r3, #25]
 800697e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006980:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7e9b      	ldrb	r3, [r3, #26]
 8006986:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006988:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_ADC_Init+0x158>
 8006992:	2380      	movs	r3, #128	@ 0x80
 8006994:	015b      	lsls	r3, r3, #5
 8006996:	e000      	b.n	800699a <HAL_ADC_Init+0x15a>
 8006998:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800699a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80069a0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da04      	bge.n	80069b4 <HAL_ADC_Init+0x174>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	e001      	b.n	80069b8 <HAL_ADC_Init+0x178>
 80069b4:	2380      	movs	r3, #128	@ 0x80
 80069b6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80069b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	212c      	movs	r1, #44	@ 0x2c
 80069be:	5c5b      	ldrb	r3, [r3, r1]
 80069c0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80069c2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	5c9b      	ldrb	r3, [r3, r2]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d115      	bne.n	8006a00 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7e9b      	ldrb	r3, [r3, #26]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	2280      	movs	r2, #128	@ 0x80
 80069e0:	0252      	lsls	r2, r2, #9
 80069e2:	4313      	orrs	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	e00b      	b.n	8006a00 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ec:	2220      	movs	r2, #32
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f8:	2201      	movs	r2, #1
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a0c:	23e0      	movs	r3, #224	@ 0xe0
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006a16:	4313      	orrs	r3, r2
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a6d      	ldr	r2, [pc, #436]	@ (8006bdc <HAL_ADC_Init+0x39c>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	0019      	movs	r1, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	0f9b      	lsrs	r3, r3, #30
 8006a3a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006a40:	4313      	orrs	r3, r2
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	223c      	movs	r2, #60	@ 0x3c
 8006a4c:	5c9b      	ldrb	r3, [r3, r2]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d111      	bne.n	8006a76 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	0f9b      	lsrs	r3, r3, #30
 8006a58:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006a5e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006a64:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8006a6a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	2201      	movs	r2, #1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	4a58      	ldr	r2, [pc, #352]	@ (8006be0 <HAL_ADC_Init+0x3a0>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	23c0      	movs	r3, #192	@ 0xc0
 8006a92:	061b      	lsls	r3, r3, #24
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d018      	beq.n	8006aca <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006a9c:	2380      	movs	r3, #128	@ 0x80
 8006a9e:	05db      	lsls	r3, r3, #23
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d012      	beq.n	8006aca <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006aa8:	2380      	movs	r3, #128	@ 0x80
 8006aaa:	061b      	lsls	r3, r3, #24
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d00c      	beq.n	8006aca <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8006be4 <HAL_ADC_Init+0x3a4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8006be8 <HAL_ADC_Init+0x3a8>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	0019      	movs	r1, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	23f0      	movs	r3, #240	@ 0xf0
 8006ac0:	039b      	lsls	r3, r3, #14
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	4b47      	ldr	r3, [pc, #284]	@ (8006be4 <HAL_ADC_Init+0x3a4>)
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad2:	001a      	movs	r2, r3
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f7ff fd6a 	bl	80065ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae2:	4942      	ldr	r1, [pc, #264]	@ (8006bec <HAL_ADC_Init+0x3ac>)
 8006ae4:	001a      	movs	r2, r3
 8006ae6:	f7ff fd62 	bl	80065ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2110      	movs	r1, #16
 8006afe:	4249      	negs	r1, r1
 8006b00:	430a      	orrs	r2, r1
 8006b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b04:	e018      	b.n	8006b38 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	039b      	lsls	r3, r3, #14
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d112      	bne.n	8006b38 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	221c      	movs	r2, #28
 8006b22:	4013      	ands	r3, r2
 8006b24:	2210      	movs	r2, #16
 8006b26:	4252      	negs	r2, r2
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	0011      	movs	r1, r2
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7ff fd52 	bl	80065e8 <LL_ADC_GetSamplingTimeCommonChannels>
 8006b44:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d10b      	bne.n	8006b66 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4393      	bics	r3, r2
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006b64:	e01c      	b.n	8006ba0 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6a:	2212      	movs	r2, #18
 8006b6c:	4393      	bics	r3, r2
 8006b6e:	2210      	movs	r2, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006b82:	231f      	movs	r3, #31
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006b8a:	e009      	b.n	8006ba0 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b90:	2210      	movs	r2, #16
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006b98:	231f      	movs	r3, #31
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006ba0:	231f      	movs	r3, #31
 8006ba2:	18fb      	adds	r3, r7, r3
 8006ba4:	781b      	ldrb	r3, [r3, #0]
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b008      	add	sp, #32
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	08006f09 	.word	0x08006f09
 8006bb4:	08006f19 	.word	0x08006f19
 8006bb8:	08006f29 	.word	0x08006f29
 8006bbc:	08006f39 	.word	0x08006f39
 8006bc0:	08007991 	.word	0x08007991
 8006bc4:	080079a1 	.word	0x080079a1
 8006bc8:	080079b1 	.word	0x080079b1
 8006bcc:	080052c9 	.word	0x080052c9
 8006bd0:	2000044c 	.word	0x2000044c
 8006bd4:	00030d40 	.word	0x00030d40
 8006bd8:	fffffefd 	.word	0xfffffefd
 8006bdc:	ffde0201 	.word	0xffde0201
 8006be0:	1ffffc02 	.word	0x1ffffc02
 8006be4:	40012708 	.word	0x40012708
 8006be8:	ffc3ffff 	.word	0xffc3ffff
 8006bec:	07ffff04 	.word	0x07ffff04

08006bf0 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	230b      	movs	r3, #11
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	1c0a      	adds	r2, r1, #0
 8006c00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2317      	movs	r3, #23
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d107      	bne.n	8006c20 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c14:	2210      	movs	r2, #16
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e06d      	b.n	8006cfc <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c24:	2201      	movs	r2, #1
 8006c26:	4013      	ands	r3, r2
 8006c28:	d03a      	beq.n	8006ca0 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8006c2a:	230b      	movs	r3, #11
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b0a      	cmp	r3, #10
 8006c32:	d82a      	bhi.n	8006c8a <HAL_ADC_RegisterCallback+0x9a>
 8006c34:	009a      	lsls	r2, r3, #2
 8006c36:	4b33      	ldr	r3, [pc, #204]	@ (8006d04 <HAL_ADC_RegisterCallback+0x114>)
 8006c38:	18d3      	adds	r3, r2, r3
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006c44:	e057      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006c4c:	e053      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006c54:	e04f      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006c5c:	e04b      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006c64:	e047      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006c6c:	e043      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006c74:	e03f      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2180      	movs	r1, #128	@ 0x80
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	505a      	str	r2, [r3, r1]
        break;
 8006c7e:	e03a      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2184      	movs	r1, #132	@ 0x84
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	505a      	str	r2, [r3, r1]
        break;
 8006c88:	e035      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c8e:	2210      	movs	r2, #16
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006c96:	2317      	movs	r3, #23
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	701a      	strb	r2, [r3, #0]
        break;
 8006c9e:	e02a      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11c      	bne.n	8006ce2 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006ca8:	230b      	movs	r3, #11
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d002      	beq.n	8006cb8 <HAL_ADC_RegisterCallback+0xc8>
 8006cb2:	2b0a      	cmp	r3, #10
 8006cb4:	d005      	beq.n	8006cc2 <HAL_ADC_RegisterCallback+0xd2>
 8006cb6:	e009      	b.n	8006ccc <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2180      	movs	r1, #128	@ 0x80
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	505a      	str	r2, [r3, r1]
        break;
 8006cc0:	e019      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2184      	movs	r1, #132	@ 0x84
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	505a      	str	r2, [r3, r1]
        break;
 8006cca:	e014      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006cd8:	2317      	movs	r3, #23
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
        break;
 8006ce0:	e009      	b.n	8006cf6 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006cee:	2317      	movs	r3, #23
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006cf6:	2317      	movs	r3, #23
 8006cf8:	18fb      	adds	r3, r7, r3
 8006cfa:	781b      	ldrb	r3, [r3, #0]
}
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b006      	add	sp, #24
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	0800e110 	.word	0x0800e110

08006d08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006d08:	b5b0      	push	{r4, r5, r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7ff fd7f 	bl	800681c <LL_ADC_REG_IsConversionOngoing>
 8006d1e:	1e03      	subs	r3, r0, #0
 8006d20:	d16c      	bne.n	8006dfc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2254      	movs	r2, #84	@ 0x54
 8006d26:	5c9b      	ldrb	r3, [r3, r2]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_ADC_Start_DMA+0x28>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e06c      	b.n	8006e0a <HAL_ADC_Start_DMA+0x102>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2254      	movs	r2, #84	@ 0x54
 8006d34:	2101      	movs	r1, #1
 8006d36:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	d113      	bne.n	8006d6c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f7ff fd21 	bl	8006790 <LL_ADC_IsEnabled>
 8006d4e:	1e03      	subs	r3, r0, #0
 8006d50:	d004      	beq.n	8006d5c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7ff fd08 	bl	800676c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2101      	movs	r1, #1
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006d6c:	2517      	movs	r5, #23
 8006d6e:	197c      	adds	r4, r7, r5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f000 fb02 	bl	800737c <ADC_Enable>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006d7c:	002c      	movs	r4, r5
 8006d7e:	193b      	adds	r3, r7, r4
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d13e      	bne.n	8006e04 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8a:	4a22      	ldr	r2, [pc, #136]	@ (8006e14 <HAL_ADC_Start_DMA+0x10c>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2280      	movs	r2, #128	@ 0x80
 8006d90:	0052      	lsls	r2, r2, #1
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e18 <HAL_ADC_Start_DMA+0x110>)
 8006da4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006daa:	4a1c      	ldr	r2, [pc, #112]	@ (8006e1c <HAL_ADC_Start_DMA+0x114>)
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e20 <HAL_ADC_Start_DMA+0x118>)
 8006db4:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	221c      	movs	r2, #28
 8006dbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2254      	movs	r2, #84	@ 0x54
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2110      	movs	r1, #16
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3340      	adds	r3, #64	@ 0x40
 8006de0:	0019      	movs	r1, r3
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	193c      	adds	r4, r7, r4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f000 ff84 	bl	8007cf4 <HAL_DMA_Start_IT>
 8006dec:	0003      	movs	r3, r0
 8006dee:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7ff fced 	bl	80067d4 <LL_ADC_REG_StartConversion>
 8006dfa:	e003      	b.n	8006e04 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006dfc:	2317      	movs	r3, #23
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	2202      	movs	r2, #2
 8006e02:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006e04:	2317      	movs	r3, #23
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	781b      	ldrb	r3, [r3, #0]
}
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b006      	add	sp, #24
 8006e10:	bdb0      	pop	{r4, r5, r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	fffff0fe 	.word	0xfffff0fe
 8006e18:	08007545 	.word	0x08007545
 8006e1c:	08007611 	.word	0x08007611
 8006e20:	08007631 	.word	0x08007631

08006e24 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006e24:	b5b0      	push	{r4, r5, r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2254      	movs	r2, #84	@ 0x54
 8006e30:	5c9b      	ldrb	r3, [r3, r2]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_ADC_Stop_DMA+0x16>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e05f      	b.n	8006efa <HAL_ADC_Stop_DMA+0xd6>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2254      	movs	r2, #84	@ 0x54
 8006e3e:	2101      	movs	r1, #1
 8006e40:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006e42:	250f      	movs	r5, #15
 8006e44:	197c      	adds	r4, r7, r5
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f000 fa55 	bl	80072f8 <ADC_ConversionStop>
 8006e4e:	0003      	movs	r3, r0
 8006e50:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006e52:	0029      	movs	r1, r5
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d147      	bne.n	8006eec <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e60:	2225      	movs	r2, #37	@ 0x25
 8006e62:	5c9b      	ldrb	r3, [r3, r2]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d112      	bne.n	8006e90 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6e:	000d      	movs	r5, r1
 8006e70:	187c      	adds	r4, r7, r1
 8006e72:	0018      	movs	r0, r3
 8006e74:	f000 ffc4 	bl	8007e00 <HAL_DMA_Abort>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006e7c:	197b      	adds	r3, r7, r5
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e88:	2240      	movs	r2, #64	@ 0x40
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006ea0:	220f      	movs	r2, #15
 8006ea2:	18bb      	adds	r3, r7, r2
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d107      	bne.n	8006eba <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006eaa:	18bc      	adds	r4, r7, r2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f000 faea 	bl	8007488 <ADC_Disable>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	7023      	strb	r3, [r4, #0]
 8006eb8:	e003      	b.n	8006ec2 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 fae3 	bl	8007488 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006ec2:	230f      	movs	r3, #15
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <HAL_ADC_Stop_DMA+0xe0>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	438a      	bics	r2, r1
 8006eea:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2254      	movs	r2, #84	@ 0x54
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	781b      	ldrb	r3, [r3, #0]
}
 8006efa:	0018      	movs	r0, r3
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b004      	add	sp, #16
 8006f00:	bdb0      	pop	{r4, r5, r7, pc}
 8006f02:	46c0      	nop			@ (mov r8, r8)
 8006f04:	fffffefe 	.word	0xfffffefe

08006f08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006f10:	46c0      	nop			@ (mov r8, r8)
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b002      	add	sp, #8
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006f20:	46c0      	nop			@ (mov r8, r8)
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006f30:	46c0      	nop			@ (mov r8, r8)
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b002      	add	sp, #8
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006f40:	46c0      	nop			@ (mov r8, r8)
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b002      	add	sp, #8
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f52:	2317      	movs	r3, #23
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2254      	movs	r2, #84	@ 0x54
 8006f62:	5c9b      	ldrb	r3, [r3, r2]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x24>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e1c0      	b.n	80072ee <HAL_ADC_ConfigChannel+0x3a6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2254      	movs	r2, #84	@ 0x54
 8006f70:	2101      	movs	r1, #1
 8006f72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7ff fc4f 	bl	800681c <LL_ADC_REG_IsConversionOngoing>
 8006f7e:	1e03      	subs	r3, r0, #0
 8006f80:	d000      	beq.n	8006f84 <HAL_ADC_ConfigChannel+0x3c>
 8006f82:	e1a3      	b.n	80072cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d100      	bne.n	8006f8e <HAL_ADC_ConfigChannel+0x46>
 8006f8c:	e143      	b.n	8007216 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	061b      	lsls	r3, r3, #24
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d004      	beq.n	8006fa4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f9e:	4ac1      	ldr	r2, [pc, #772]	@ (80072a4 <HAL_ADC_ConfigChannel+0x35c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d108      	bne.n	8006fb6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	0019      	movs	r1, r3
 8006fae:	0010      	movs	r0, r2
 8006fb0:	f7ff fb62 	bl	8006678 <LL_ADC_REG_SetSequencerChAdd>
 8006fb4:	e0c9      	b.n	800714a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	211f      	movs	r1, #31
 8006fc0:	400b      	ands	r3, r1
 8006fc2:	210f      	movs	r1, #15
 8006fc4:	4099      	lsls	r1, r3
 8006fc6:	000b      	movs	r3, r1
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	4013      	ands	r3, r2
 8006fcc:	0019      	movs	r1, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	035b      	lsls	r3, r3, #13
 8006fd4:	0b5b      	lsrs	r3, r3, #13
 8006fd6:	d105      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x9c>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	0e9b      	lsrs	r3, r3, #26
 8006fde:	221f      	movs	r2, #31
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	e098      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	4013      	ands	r3, r2
 8006fec:	d000      	beq.n	8006ff0 <HAL_ADC_ConfigChannel+0xa8>
 8006fee:	e091      	b.n	8007114 <HAL_ADC_ConfigChannel+0x1cc>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d000      	beq.n	8006ffc <HAL_ADC_ConfigChannel+0xb4>
 8006ffa:	e089      	b.n	8007110 <HAL_ADC_ConfigChannel+0x1c8>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2204      	movs	r2, #4
 8007002:	4013      	ands	r3, r2
 8007004:	d000      	beq.n	8007008 <HAL_ADC_ConfigChannel+0xc0>
 8007006:	e081      	b.n	800710c <HAL_ADC_ConfigChannel+0x1c4>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2208      	movs	r2, #8
 800700e:	4013      	ands	r3, r2
 8007010:	d000      	beq.n	8007014 <HAL_ADC_ConfigChannel+0xcc>
 8007012:	e079      	b.n	8007108 <HAL_ADC_ConfigChannel+0x1c0>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2210      	movs	r2, #16
 800701a:	4013      	ands	r3, r2
 800701c:	d000      	beq.n	8007020 <HAL_ADC_ConfigChannel+0xd8>
 800701e:	e071      	b.n	8007104 <HAL_ADC_ConfigChannel+0x1bc>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2220      	movs	r2, #32
 8007026:	4013      	ands	r3, r2
 8007028:	d000      	beq.n	800702c <HAL_ADC_ConfigChannel+0xe4>
 800702a:	e069      	b.n	8007100 <HAL_ADC_ConfigChannel+0x1b8>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2240      	movs	r2, #64	@ 0x40
 8007032:	4013      	ands	r3, r2
 8007034:	d000      	beq.n	8007038 <HAL_ADC_ConfigChannel+0xf0>
 8007036:	e061      	b.n	80070fc <HAL_ADC_ConfigChannel+0x1b4>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2280      	movs	r2, #128	@ 0x80
 800703e:	4013      	ands	r3, r2
 8007040:	d000      	beq.n	8007044 <HAL_ADC_ConfigChannel+0xfc>
 8007042:	e059      	b.n	80070f8 <HAL_ADC_ConfigChannel+0x1b0>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	2380      	movs	r3, #128	@ 0x80
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	4013      	ands	r3, r2
 800704e:	d151      	bne.n	80070f4 <HAL_ADC_ConfigChannel+0x1ac>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	2380      	movs	r3, #128	@ 0x80
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4013      	ands	r3, r2
 800705a:	d149      	bne.n	80070f0 <HAL_ADC_ConfigChannel+0x1a8>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4013      	ands	r3, r2
 8007066:	d141      	bne.n	80070ec <HAL_ADC_ConfigChannel+0x1a4>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	2380      	movs	r3, #128	@ 0x80
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4013      	ands	r3, r2
 8007072:	d139      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x1a0>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	015b      	lsls	r3, r3, #5
 800707c:	4013      	ands	r3, r2
 800707e:	d131      	bne.n	80070e4 <HAL_ADC_ConfigChannel+0x19c>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	019b      	lsls	r3, r3, #6
 8007088:	4013      	ands	r3, r2
 800708a:	d129      	bne.n	80070e0 <HAL_ADC_ConfigChannel+0x198>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	2380      	movs	r3, #128	@ 0x80
 8007092:	01db      	lsls	r3, r3, #7
 8007094:	4013      	ands	r3, r2
 8007096:	d121      	bne.n	80070dc <HAL_ADC_ConfigChannel+0x194>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	2380      	movs	r3, #128	@ 0x80
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	4013      	ands	r3, r2
 80070a2:	d119      	bne.n	80070d8 <HAL_ADC_ConfigChannel+0x190>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	2380      	movs	r3, #128	@ 0x80
 80070aa:	025b      	lsls	r3, r3, #9
 80070ac:	4013      	ands	r3, r2
 80070ae:	d111      	bne.n	80070d4 <HAL_ADC_ConfigChannel+0x18c>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	2380      	movs	r3, #128	@ 0x80
 80070b6:	029b      	lsls	r3, r3, #10
 80070b8:	4013      	ands	r3, r2
 80070ba:	d109      	bne.n	80070d0 <HAL_ADC_ConfigChannel+0x188>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	02db      	lsls	r3, r3, #11
 80070c4:	4013      	ands	r3, r2
 80070c6:	d001      	beq.n	80070cc <HAL_ADC_ConfigChannel+0x184>
 80070c8:	2312      	movs	r3, #18
 80070ca:	e024      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070cc:	2300      	movs	r3, #0
 80070ce:	e022      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070d0:	2311      	movs	r3, #17
 80070d2:	e020      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070d4:	2310      	movs	r3, #16
 80070d6:	e01e      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070d8:	230f      	movs	r3, #15
 80070da:	e01c      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070dc:	230e      	movs	r3, #14
 80070de:	e01a      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070e0:	230d      	movs	r3, #13
 80070e2:	e018      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070e4:	230c      	movs	r3, #12
 80070e6:	e016      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070e8:	230b      	movs	r3, #11
 80070ea:	e014      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070ec:	230a      	movs	r3, #10
 80070ee:	e012      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070f0:	2309      	movs	r3, #9
 80070f2:	e010      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070f4:	2308      	movs	r3, #8
 80070f6:	e00e      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070f8:	2307      	movs	r3, #7
 80070fa:	e00c      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 80070fc:	2306      	movs	r3, #6
 80070fe:	e00a      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 8007100:	2305      	movs	r3, #5
 8007102:	e008      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 8007104:	2304      	movs	r3, #4
 8007106:	e006      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 8007108:	2303      	movs	r3, #3
 800710a:	e004      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 800710c:	2302      	movs	r3, #2
 800710e:	e002      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1ce>
 8007114:	2300      	movs	r3, #0
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	201f      	movs	r0, #31
 800711c:	4002      	ands	r2, r0
 800711e:	4093      	lsls	r3, r2
 8007120:	000a      	movs	r2, r1
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	089b      	lsrs	r3, r3, #2
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	429a      	cmp	r2, r3
 8007136:	d808      	bhi.n	800714a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	6859      	ldr	r1, [r3, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	001a      	movs	r2, r3
 8007146:	f7ff fa77 	bl	8006638 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	001a      	movs	r2, r3
 8007158:	f7ff fab2 	bl	80066c0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	db00      	blt.n	8007166 <HAL_ADC_ConfigChannel+0x21e>
 8007164:	e0bc      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007166:	4b50      	ldr	r3, [pc, #320]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff fa13 	bl	8006594 <LL_ADC_GetCommonPathInternalCh>
 800716e:	0003      	movs	r3, r0
 8007170:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a4d      	ldr	r2, [pc, #308]	@ (80072ac <HAL_ADC_ConfigChannel+0x364>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d122      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	2380      	movs	r3, #128	@ 0x80
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007184:	d11d      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2280      	movs	r2, #128	@ 0x80
 800718a:	0412      	lsls	r2, r2, #16
 800718c:	4313      	orrs	r3, r2
 800718e:	4a46      	ldr	r2, [pc, #280]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 8007190:	0019      	movs	r1, r3
 8007192:	0010      	movs	r0, r2
 8007194:	f7ff f9ea 	bl	800656c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007198:	4b45      	ldr	r3, [pc, #276]	@ (80072b0 <HAL_ADC_ConfigChannel+0x368>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4945      	ldr	r1, [pc, #276]	@ (80072b4 <HAL_ADC_ConfigChannel+0x36c>)
 800719e:	0018      	movs	r0, r3
 80071a0:	f7f8 ffb0 	bl	8000104 <__udivsi3>
 80071a4:	0003      	movs	r3, r0
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	0013      	movs	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	189b      	adds	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071b2:	e002      	b.n	80071ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f9      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80071c0:	e08e      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a3c      	ldr	r2, [pc, #240]	@ (80072b8 <HAL_ADC_ConfigChannel+0x370>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d10e      	bne.n	80071ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	2380      	movs	r3, #128	@ 0x80
 80071d0:	045b      	lsls	r3, r3, #17
 80071d2:	4013      	ands	r3, r2
 80071d4:	d109      	bne.n	80071ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2280      	movs	r2, #128	@ 0x80
 80071da:	0452      	lsls	r2, r2, #17
 80071dc:	4313      	orrs	r3, r2
 80071de:	4a32      	ldr	r2, [pc, #200]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 80071e0:	0019      	movs	r1, r3
 80071e2:	0010      	movs	r0, r2
 80071e4:	f7ff f9c2 	bl	800656c <LL_ADC_SetCommonPathInternalCh>
 80071e8:	e07a      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a33      	ldr	r2, [pc, #204]	@ (80072bc <HAL_ADC_ConfigChannel+0x374>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d000      	beq.n	80071f6 <HAL_ADC_ConfigChannel+0x2ae>
 80071f4:	e074      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	2380      	movs	r3, #128	@ 0x80
 80071fa:	03db      	lsls	r3, r3, #15
 80071fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80071fe:	d000      	beq.n	8007202 <HAL_ADC_ConfigChannel+0x2ba>
 8007200:	e06e      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2280      	movs	r2, #128	@ 0x80
 8007206:	03d2      	lsls	r2, r2, #15
 8007208:	4313      	orrs	r3, r2
 800720a:	4a27      	ldr	r2, [pc, #156]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 800720c:	0019      	movs	r1, r3
 800720e:	0010      	movs	r0, r2
 8007210:	f7ff f9ac 	bl	800656c <LL_ADC_SetCommonPathInternalCh>
 8007214:	e064      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	2380      	movs	r3, #128	@ 0x80
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	429a      	cmp	r2, r3
 8007220:	d004      	beq.n	800722c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007226:	4a1f      	ldr	r2, [pc, #124]	@ (80072a4 <HAL_ADC_ConfigChannel+0x35c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d107      	bne.n	800723c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	0019      	movs	r1, r3
 8007236:	0010      	movs	r0, r2
 8007238:	f7ff fa2f 	bl	800669a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	da4d      	bge.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007244:	4b18      	ldr	r3, [pc, #96]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 8007246:	0018      	movs	r0, r3
 8007248:	f7ff f9a4 	bl	8006594 <LL_ADC_GetCommonPathInternalCh>
 800724c:	0003      	movs	r3, r0
 800724e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a15      	ldr	r2, [pc, #84]	@ (80072ac <HAL_ADC_ConfigChannel+0x364>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d108      	bne.n	800726c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	4a18      	ldr	r2, [pc, #96]	@ (80072c0 <HAL_ADC_ConfigChannel+0x378>)
 800725e:	4013      	ands	r3, r2
 8007260:	4a11      	ldr	r2, [pc, #68]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 8007262:	0019      	movs	r1, r3
 8007264:	0010      	movs	r0, r2
 8007266:	f7ff f981 	bl	800656c <LL_ADC_SetCommonPathInternalCh>
 800726a:	e039      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a11      	ldr	r2, [pc, #68]	@ (80072b8 <HAL_ADC_ConfigChannel+0x370>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d108      	bne.n	8007288 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4a12      	ldr	r2, [pc, #72]	@ (80072c4 <HAL_ADC_ConfigChannel+0x37c>)
 800727a:	4013      	ands	r3, r2
 800727c:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 800727e:	0019      	movs	r1, r3
 8007280:	0010      	movs	r0, r2
 8007282:	f7ff f973 	bl	800656c <LL_ADC_SetCommonPathInternalCh>
 8007286:	e02b      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a0b      	ldr	r2, [pc, #44]	@ (80072bc <HAL_ADC_ConfigChannel+0x374>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d126      	bne.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4a0c      	ldr	r2, [pc, #48]	@ (80072c8 <HAL_ADC_ConfigChannel+0x380>)
 8007296:	4013      	ands	r3, r2
 8007298:	4a03      	ldr	r2, [pc, #12]	@ (80072a8 <HAL_ADC_ConfigChannel+0x360>)
 800729a:	0019      	movs	r1, r3
 800729c:	0010      	movs	r0, r2
 800729e:	f7ff f965 	bl	800656c <LL_ADC_SetCommonPathInternalCh>
 80072a2:	e01d      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x398>
 80072a4:	80000004 	.word	0x80000004
 80072a8:	40012708 	.word	0x40012708
 80072ac:	b0001000 	.word	0xb0001000
 80072b0:	2000044c 	.word	0x2000044c
 80072b4:	00030d40 	.word	0x00030d40
 80072b8:	b8004000 	.word	0xb8004000
 80072bc:	b4002000 	.word	0xb4002000
 80072c0:	ff7fffff 	.word	0xff7fffff
 80072c4:	feffffff 	.word	0xfeffffff
 80072c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d0:	2220      	movs	r2, #32
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80072d8:	2317      	movs	r3, #23
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	2201      	movs	r2, #1
 80072de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2254      	movs	r2, #84	@ 0x54
 80072e4:	2100      	movs	r1, #0
 80072e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80072e8:	2317      	movs	r3, #23
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	781b      	ldrb	r3, [r3, #0]
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b006      	add	sp, #24
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			@ (mov r8, r8)

080072f8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	0018      	movs	r0, r3
 8007306:	f7ff fa89 	bl	800681c <LL_ADC_REG_IsConversionOngoing>
 800730a:	1e03      	subs	r3, r0, #0
 800730c:	d031      	beq.n	8007372 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	0018      	movs	r0, r3
 8007314:	f7ff fa4d 	bl	80067b2 <LL_ADC_IsDisableOngoing>
 8007318:	1e03      	subs	r3, r0, #0
 800731a:	d104      	bne.n	8007326 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	0018      	movs	r0, r3
 8007322:	f7ff fa69 	bl	80067f8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007326:	f7ff f917 	bl	8006558 <HAL_GetTick>
 800732a:	0003      	movs	r3, r0
 800732c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800732e:	e01a      	b.n	8007366 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007330:	f7ff f912 	bl	8006558 <HAL_GetTick>
 8007334:	0002      	movs	r2, r0
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d913      	bls.n	8007366 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2204      	movs	r2, #4
 8007346:	4013      	ands	r3, r2
 8007348:	d00d      	beq.n	8007366 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734e:	2210      	movs	r2, #16
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	2201      	movs	r2, #1
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e006      	b.n	8007374 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2204      	movs	r2, #4
 800736e:	4013      	ands	r3, r2
 8007370:	d1de      	bne.n	8007330 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	0018      	movs	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	b004      	add	sp, #16
 800737a:	bd80      	pop	{r7, pc}

0800737c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007384:	2300      	movs	r3, #0
 8007386:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	0018      	movs	r0, r3
 800738e:	f7ff f9ff 	bl	8006790 <LL_ADC_IsEnabled>
 8007392:	1e03      	subs	r3, r0, #0
 8007394:	d000      	beq.n	8007398 <ADC_Enable+0x1c>
 8007396:	e069      	b.n	800746c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4a36      	ldr	r2, [pc, #216]	@ (8007478 <ADC_Enable+0xfc>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	d00d      	beq.n	80073c0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a8:	2210      	movs	r2, #16
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b4:	2201      	movs	r2, #1
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e056      	b.n	800746e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7ff f9bf 	bl	8006748 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80073ca:	4b2c      	ldr	r3, [pc, #176]	@ (800747c <ADC_Enable+0x100>)
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7ff f8e1 	bl	8006594 <LL_ADC_GetCommonPathInternalCh>
 80073d2:	0002      	movs	r2, r0
 80073d4:	2380      	movs	r3, #128	@ 0x80
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	4013      	ands	r3, r2
 80073da:	d00f      	beq.n	80073fc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073dc:	4b28      	ldr	r3, [pc, #160]	@ (8007480 <ADC_Enable+0x104>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4928      	ldr	r1, [pc, #160]	@ (8007484 <ADC_Enable+0x108>)
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7f8 fe8e 	bl	8000104 <__udivsi3>
 80073e8:	0003      	movs	r3, r0
 80073ea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80073ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80073ee:	e002      	b.n	80073f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f9      	bne.n	80073f0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7e5b      	ldrb	r3, [r3, #25]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d033      	beq.n	800746c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007404:	f7ff f8a8 	bl	8006558 <HAL_GetTick>
 8007408:	0003      	movs	r3, r0
 800740a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800740c:	e027      	b.n	800745e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	0018      	movs	r0, r3
 8007414:	f7ff f9bc 	bl	8006790 <LL_ADC_IsEnabled>
 8007418:	1e03      	subs	r3, r0, #0
 800741a:	d104      	bne.n	8007426 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	0018      	movs	r0, r3
 8007422:	f7ff f991 	bl	8006748 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007426:	f7ff f897 	bl	8006558 <HAL_GetTick>
 800742a:	0002      	movs	r2, r0
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d914      	bls.n	800745e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2201      	movs	r2, #1
 800743c:	4013      	ands	r3, r2
 800743e:	2b01      	cmp	r3, #1
 8007440:	d00d      	beq.n	800745e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	2210      	movs	r2, #16
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007452:	2201      	movs	r2, #1
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e007      	b.n	800746e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2201      	movs	r2, #1
 8007466:	4013      	ands	r3, r2
 8007468:	2b01      	cmp	r3, #1
 800746a:	d1d0      	bne.n	800740e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b004      	add	sp, #16
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	80000017 	.word	0x80000017
 800747c:	40012708 	.word	0x40012708
 8007480:	2000044c 	.word	0x2000044c
 8007484:	00030d40 	.word	0x00030d40

08007488 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0018      	movs	r0, r3
 8007496:	f7ff f98c 	bl	80067b2 <LL_ADC_IsDisableOngoing>
 800749a:	0003      	movs	r3, r0
 800749c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	0018      	movs	r0, r3
 80074a4:	f7ff f974 	bl	8006790 <LL_ADC_IsEnabled>
 80074a8:	1e03      	subs	r3, r0, #0
 80074aa:	d046      	beq.n	800753a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d143      	bne.n	800753a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2205      	movs	r2, #5
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10d      	bne.n	80074dc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	0018      	movs	r0, r3
 80074c6:	f7ff f951 	bl	800676c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2203      	movs	r2, #3
 80074d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80074d2:	f7ff f841 	bl	8006558 <HAL_GetTick>
 80074d6:	0003      	movs	r3, r0
 80074d8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80074da:	e028      	b.n	800752e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e0:	2210      	movs	r2, #16
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ec:	2201      	movs	r2, #1
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e021      	b.n	800753c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80074f8:	f7ff f82e 	bl	8006558 <HAL_GetTick>
 80074fc:	0002      	movs	r2, r0
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d913      	bls.n	800752e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2201      	movs	r2, #1
 800750e:	4013      	ands	r3, r2
 8007510:	d00d      	beq.n	800752e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007516:	2210      	movs	r2, #16
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007522:	2201      	movs	r2, #1
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e006      	b.n	800753c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2201      	movs	r2, #1
 8007536:	4013      	ands	r3, r2
 8007538:	d1de      	bne.n	80074f8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	0018      	movs	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	b004      	add	sp, #16
 8007542:	bd80      	pop	{r7, pc}

08007544 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007556:	2250      	movs	r2, #80	@ 0x50
 8007558:	4013      	ands	r3, r2
 800755a:	d142      	bne.n	80075e2 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007560:	2280      	movs	r2, #128	@ 0x80
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	431a      	orrs	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	0018      	movs	r0, r3
 8007570:	f7ff f851 	bl	8006616 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007574:	1e03      	subs	r3, r0, #0
 8007576:	d02e      	beq.n	80075d6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	7e9b      	ldrb	r3, [r3, #26]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d12a      	bne.n	80075d6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2208      	movs	r2, #8
 8007588:	4013      	ands	r3, r2
 800758a:	2b08      	cmp	r3, #8
 800758c:	d123      	bne.n	80075d6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	0018      	movs	r0, r3
 8007594:	f7ff f942 	bl	800681c <LL_ADC_REG_IsConversionOngoing>
 8007598:	1e03      	subs	r3, r0, #0
 800759a:	d110      	bne.n	80075be <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	210c      	movs	r1, #12
 80075a8:	438a      	bics	r2, r1
 80075aa:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b0:	4a16      	ldr	r2, [pc, #88]	@ (800760c <ADC_DMAConvCplt+0xc8>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	2201      	movs	r2, #1
 80075b6:	431a      	orrs	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80075bc:	e00b      	b.n	80075d6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c2:	2220      	movs	r2, #32
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ce:	2201      	movs	r2, #1
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	0010      	movs	r0, r2
 80075de:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80075e0:	e010      	b.n	8007604 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e6:	2210      	movs	r2, #16
 80075e8:	4013      	ands	r3, r2
 80075ea:	d005      	beq.n	80075f8 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	0010      	movs	r0, r2
 80075f4:	4798      	blx	r3
}
 80075f6:	e005      	b.n	8007604 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	0010      	movs	r0, r2
 8007602:	4798      	blx	r3
}
 8007604:	46c0      	nop			@ (mov r8, r8)
 8007606:	46bd      	mov	sp, r7
 8007608:	b004      	add	sp, #16
 800760a:	bd80      	pop	{r7, pc}
 800760c:	fffffefe 	.word	0xfffffefe

08007610 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	0010      	movs	r0, r2
 8007626:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007628:	46c0      	nop			@ (mov r8, r8)
 800762a:	46bd      	mov	sp, r7
 800762c:	b004      	add	sp, #16
 800762e:	bd80      	pop	{r7, pc}

08007630 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007642:	2240      	movs	r2, #64	@ 0x40
 8007644:	431a      	orrs	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764e:	2204      	movs	r2, #4
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	0010      	movs	r0, r2
 800765e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007660:	46c0      	nop			@ (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b004      	add	sp, #16
 8007666:	bd80      	pop	{r7, pc}

08007668 <LL_ADC_GetCommonClock>:
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	23f0      	movs	r3, #240	@ 0xf0
 8007676:	039b      	lsls	r3, r3, #14
 8007678:	4013      	ands	r3, r2
}
 800767a:	0018      	movs	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	b002      	add	sp, #8
 8007680:	bd80      	pop	{r7, pc}

08007682 <LL_ADC_GetClock>:
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	0f9b      	lsrs	r3, r3, #30
 8007690:	079b      	lsls	r3, r3, #30
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b002      	add	sp, #8
 8007698:	bd80      	pop	{r7, pc}

0800769a <LL_ADC_SetCalibrationFactor>:
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	22b4      	movs	r2, #180	@ 0xb4
 80076a8:	589b      	ldr	r3, [r3, r2]
 80076aa:	227f      	movs	r2, #127	@ 0x7f
 80076ac:	4393      	bics	r3, r2
 80076ae:	001a      	movs	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	21b4      	movs	r1, #180	@ 0xb4
 80076b8:	505a      	str	r2, [r3, r1]
}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	b002      	add	sp, #8
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <LL_ADC_GetCalibrationFactor>:
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	22b4      	movs	r2, #180	@ 0xb4
 80076ce:	589b      	ldr	r3, [r3, r2]
 80076d0:	227f      	movs	r2, #127	@ 0x7f
 80076d2:	4013      	ands	r3, r2
}
 80076d4:	0018      	movs	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b002      	add	sp, #8
 80076da:	bd80      	pop	{r7, pc}

080076dc <LL_ADC_Enable>:
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	4a04      	ldr	r2, [pc, #16]	@ (80076fc <LL_ADC_Enable+0x20>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	2201      	movs	r2, #1
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	46c0      	nop			@ (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b002      	add	sp, #8
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	7fffffe8 	.word	0x7fffffe8

08007700 <LL_ADC_Disable>:
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a04      	ldr	r2, [pc, #16]	@ (8007720 <LL_ADC_Disable+0x20>)
 800770e:	4013      	ands	r3, r2
 8007710:	2202      	movs	r2, #2
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	609a      	str	r2, [r3, #8]
}
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	b002      	add	sp, #8
 800771e:	bd80      	pop	{r7, pc}
 8007720:	7fffffe8 	.word	0x7fffffe8

08007724 <LL_ADC_IsEnabled>:
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2201      	movs	r2, #1
 8007732:	4013      	ands	r3, r2
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <LL_ADC_IsEnabled+0x18>
 8007738:	2301      	movs	r3, #1
 800773a:	e000      	b.n	800773e <LL_ADC_IsEnabled+0x1a>
 800773c:	2300      	movs	r3, #0
}
 800773e:	0018      	movs	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	b002      	add	sp, #8
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <LL_ADC_StartCalibration>:
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a05      	ldr	r2, [pc, #20]	@ (800776c <LL_ADC_StartCalibration+0x24>)
 8007756:	4013      	ands	r3, r2
 8007758:	2280      	movs	r2, #128	@ 0x80
 800775a:	0612      	lsls	r2, r2, #24
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	609a      	str	r2, [r3, #8]
}
 8007762:	46c0      	nop			@ (mov r8, r8)
 8007764:	46bd      	mov	sp, r7
 8007766:	b002      	add	sp, #8
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	7fffffe8 	.word	0x7fffffe8

08007770 <LL_ADC_IsCalibrationOnGoing>:
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	0fdb      	lsrs	r3, r3, #31
 800777e:	07da      	lsls	r2, r3, #31
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	061b      	lsls	r3, r3, #24
 8007784:	429a      	cmp	r2, r3
 8007786:	d101      	bne.n	800778c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800778c:	2300      	movs	r3, #0
}
 800778e:	0018      	movs	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	b002      	add	sp, #8
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b08b      	sub	sp, #44	@ 0x2c
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2254      	movs	r2, #84	@ 0x54
 80077ac:	5c9b      	ldrb	r3, [r3, r2]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_ADCEx_Calibration_Start+0x1e>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0dd      	b.n	8007972 <HAL_ADCEx_Calibration_Start+0x1da>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2254      	movs	r2, #84	@ 0x54
 80077ba:	2101      	movs	r1, #1
 80077bc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80077be:	231f      	movs	r3, #31
 80077c0:	18fc      	adds	r4, r7, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7ff fe5f 	bl	8007488 <ADC_Disable>
 80077ca:	0003      	movs	r3, r0
 80077cc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7ff ffa6 	bl	8007724 <LL_ADC_IsEnabled>
 80077d8:	1e03      	subs	r3, r0, #0
 80077da:	d000      	beq.n	80077de <HAL_ADCEx_Calibration_Start+0x46>
 80077dc:	e0bc      	b.n	8007958 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e2:	4a66      	ldr	r2, [pc, #408]	@ (800797c <HAL_ADCEx_Calibration_Start+0x1e4>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	2202      	movs	r2, #2
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4a62      	ldr	r2, [pc, #392]	@ (8007980 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	495f      	ldr	r1, [pc, #380]	@ (8007984 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007806:	400a      	ands	r2, r1
 8007808:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
 800780e:	e02d      	b.n	800786c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	0018      	movs	r0, r3
 8007816:	f7ff ff97 	bl	8007748 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800781a:	e014      	b.n	8007846 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a58      	ldr	r2, [pc, #352]	@ (8007988 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d90d      	bls.n	8007846 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800782e:	2212      	movs	r2, #18
 8007830:	4393      	bics	r3, r2
 8007832:	2210      	movs	r2, #16
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2254      	movs	r2, #84	@ 0x54
 800783e:	2100      	movs	r1, #0
 8007840:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e095      	b.n	8007972 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	0018      	movs	r0, r3
 800784c:	f7ff ff90 	bl	8007770 <LL_ADC_IsCalibrationOnGoing>
 8007850:	1e03      	subs	r3, r0, #0
 8007852:	d1e3      	bne.n	800781c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	0018      	movs	r0, r3
 800785a:	f7ff ff32 	bl	80076c2 <LL_ADC_GetCalibrationFactor>
 800785e:	0002      	movs	r2, r0
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	189b      	adds	r3, r3, r2
 8007864:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	3301      	adds	r3, #1
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	2b07      	cmp	r3, #7
 8007870:	d9ce      	bls.n	8007810 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007872:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007874:	6a38      	ldr	r0, [r7, #32]
 8007876:	f7f8 fc45 	bl	8000104 <__udivsi3>
 800787a:	0003      	movs	r3, r0
 800787c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	0018      	movs	r0, r3
 8007884:	f7ff ff2a 	bl	80076dc <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	0018      	movs	r0, r3
 800788e:	f7ff fef8 	bl	8007682 <LL_ADC_GetClock>
 8007892:	1e03      	subs	r3, r0, #0
 8007894:	d11b      	bne.n	80078ce <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007896:	4b3d      	ldr	r3, [pc, #244]	@ (800798c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8007898:	0018      	movs	r0, r3
 800789a:	f7ff fee5 	bl	8007668 <LL_ADC_GetCommonClock>
 800789e:	0003      	movs	r3, r0
 80078a0:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	23e0      	movs	r3, #224	@ 0xe0
 80078a6:	035b      	lsls	r3, r3, #13
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d310      	bcc.n	80078ce <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	0c9b      	lsrs	r3, r3, #18
 80078b0:	3b03      	subs	r3, #3
 80078b2:	2201      	movs	r2, #1
 80078b4:	409a      	lsls	r2, r3
 80078b6:	0013      	movs	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80078c0:	e002      	b.n	80078c8 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f9      	bne.n	80078c2 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	0011      	movs	r1, r2
 80078d6:	0018      	movs	r0, r3
 80078d8:	f7ff fedf 	bl	800769a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	0018      	movs	r0, r3
 80078e2:	f7ff ff0d 	bl	8007700 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80078e6:	f7fe fe37 	bl	8006558 <HAL_GetTick>
 80078ea:	0003      	movs	r3, r0
 80078ec:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80078ee:	e01b      	b.n	8007928 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80078f0:	f7fe fe32 	bl	8006558 <HAL_GetTick>
 80078f4:	0002      	movs	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d914      	bls.n	8007928 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	0018      	movs	r0, r3
 8007904:	f7ff ff0e 	bl	8007724 <LL_ADC_IsEnabled>
 8007908:	1e03      	subs	r3, r0, #0
 800790a:	d00d      	beq.n	8007928 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007910:	2210      	movs	r2, #16
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800791c:	2201      	movs	r2, #1
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e024      	b.n	8007972 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	0018      	movs	r0, r3
 800792e:	f7ff fef9 	bl	8007724 <LL_ADC_IsEnabled>
 8007932:	1e03      	subs	r3, r0, #0
 8007934:	d1dc      	bne.n	80078f0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68d9      	ldr	r1, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	430a      	orrs	r2, r1
 8007944:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794a:	2203      	movs	r2, #3
 800794c:	4393      	bics	r3, r2
 800794e:	2201      	movs	r2, #1
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	659a      	str	r2, [r3, #88]	@ 0x58
 8007956:	e005      	b.n	8007964 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795c:	2210      	movs	r2, #16
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2254      	movs	r2, #84	@ 0x54
 8007968:	2100      	movs	r1, #0
 800796a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800796c:	231f      	movs	r3, #31
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	781b      	ldrb	r3, [r3, #0]
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b00b      	add	sp, #44	@ 0x2c
 8007978:	bd90      	pop	{r4, r7, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	fffffefd 	.word	0xfffffefd
 8007980:	00008003 	.word	0x00008003
 8007984:	ffff7ffc 	.word	0xffff7ffc
 8007988:	0002f1ff 	.word	0x0002f1ff
 800798c:	40012708 	.word	0x40012708

08007990 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007998:	46c0      	nop			@ (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	b002      	add	sp, #8
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80079a8:	46c0      	nop			@ (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b002      	add	sp, #8
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80079b8:	46c0      	nop			@ (mov r8, r8)
 80079ba:	46bd      	mov	sp, r7
 80079bc:	b002      	add	sp, #8
 80079be:	bd80      	pop	{r7, pc}

080079c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	0002      	movs	r2, r0
 80079c8:	1dfb      	adds	r3, r7, #7
 80079ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80079cc:	1dfb      	adds	r3, r7, #7
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80079d2:	d809      	bhi.n	80079e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079d4:	1dfb      	adds	r3, r7, #7
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	001a      	movs	r2, r3
 80079da:	231f      	movs	r3, #31
 80079dc:	401a      	ands	r2, r3
 80079de:	4b04      	ldr	r3, [pc, #16]	@ (80079f0 <__NVIC_EnableIRQ+0x30>)
 80079e0:	2101      	movs	r1, #1
 80079e2:	4091      	lsls	r1, r2
 80079e4:	000a      	movs	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80079e8:	46c0      	nop			@ (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b002      	add	sp, #8
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	e000e100 	.word	0xe000e100

080079f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	0002      	movs	r2, r0
 80079fc:	1dfb      	adds	r3, r7, #7
 80079fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007a00:	1dfb      	adds	r3, r7, #7
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a06:	d810      	bhi.n	8007a2a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	001a      	movs	r2, r3
 8007a0e:	231f      	movs	r3, #31
 8007a10:	4013      	ands	r3, r2
 8007a12:	4908      	ldr	r1, [pc, #32]	@ (8007a34 <__NVIC_DisableIRQ+0x40>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	409a      	lsls	r2, r3
 8007a18:	0013      	movs	r3, r2
 8007a1a:	2280      	movs	r2, #128	@ 0x80
 8007a1c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007a1e:	f3bf 8f4f 	dsb	sy
}
 8007a22:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007a24:	f3bf 8f6f 	isb	sy
}
 8007a28:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	b002      	add	sp, #8
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	e000e100 	.word	0xe000e100

08007a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	0002      	movs	r2, r0
 8007a40:	6039      	str	r1, [r7, #0]
 8007a42:	1dfb      	adds	r3, r7, #7
 8007a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007a46:	1dfb      	adds	r3, r7, #7
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a4c:	d828      	bhi.n	8007aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8007b0c <__NVIC_SetPriority+0xd4>)
 8007a50:	1dfb      	adds	r3, r7, #7
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	089b      	lsrs	r3, r3, #2
 8007a58:	33c0      	adds	r3, #192	@ 0xc0
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	589b      	ldr	r3, [r3, r2]
 8007a5e:	1dfa      	adds	r2, r7, #7
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	0011      	movs	r1, r2
 8007a64:	2203      	movs	r2, #3
 8007a66:	400a      	ands	r2, r1
 8007a68:	00d2      	lsls	r2, r2, #3
 8007a6a:	21ff      	movs	r1, #255	@ 0xff
 8007a6c:	4091      	lsls	r1, r2
 8007a6e:	000a      	movs	r2, r1
 8007a70:	43d2      	mvns	r2, r2
 8007a72:	401a      	ands	r2, r3
 8007a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	22ff      	movs	r2, #255	@ 0xff
 8007a7c:	401a      	ands	r2, r3
 8007a7e:	1dfb      	adds	r3, r7, #7
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	0018      	movs	r0, r3
 8007a84:	2303      	movs	r3, #3
 8007a86:	4003      	ands	r3, r0
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a8c:	481f      	ldr	r0, [pc, #124]	@ (8007b0c <__NVIC_SetPriority+0xd4>)
 8007a8e:	1dfb      	adds	r3, r7, #7
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	b25b      	sxtb	r3, r3
 8007a94:	089b      	lsrs	r3, r3, #2
 8007a96:	430a      	orrs	r2, r1
 8007a98:	33c0      	adds	r3, #192	@ 0xc0
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007a9e:	e031      	b.n	8007b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b10 <__NVIC_SetPriority+0xd8>)
 8007aa2:	1dfb      	adds	r3, r7, #7
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	0019      	movs	r1, r3
 8007aa8:	230f      	movs	r3, #15
 8007aaa:	400b      	ands	r3, r1
 8007aac:	3b08      	subs	r3, #8
 8007aae:	089b      	lsrs	r3, r3, #2
 8007ab0:	3306      	adds	r3, #6
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	18d3      	adds	r3, r2, r3
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	1dfa      	adds	r2, r7, #7
 8007abc:	7812      	ldrb	r2, [r2, #0]
 8007abe:	0011      	movs	r1, r2
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	400a      	ands	r2, r1
 8007ac4:	00d2      	lsls	r2, r2, #3
 8007ac6:	21ff      	movs	r1, #255	@ 0xff
 8007ac8:	4091      	lsls	r1, r2
 8007aca:	000a      	movs	r2, r1
 8007acc:	43d2      	mvns	r2, r2
 8007ace:	401a      	ands	r2, r3
 8007ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	019b      	lsls	r3, r3, #6
 8007ad6:	22ff      	movs	r2, #255	@ 0xff
 8007ad8:	401a      	ands	r2, r3
 8007ada:	1dfb      	adds	r3, r7, #7
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	4003      	ands	r3, r0
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ae8:	4809      	ldr	r0, [pc, #36]	@ (8007b10 <__NVIC_SetPriority+0xd8>)
 8007aea:	1dfb      	adds	r3, r7, #7
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	001c      	movs	r4, r3
 8007af0:	230f      	movs	r3, #15
 8007af2:	4023      	ands	r3, r4
 8007af4:	3b08      	subs	r3, #8
 8007af6:	089b      	lsrs	r3, r3, #2
 8007af8:	430a      	orrs	r2, r1
 8007afa:	3306      	adds	r3, #6
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	18c3      	adds	r3, r0, r3
 8007b00:	3304      	adds	r3, #4
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	46c0      	nop			@ (mov r8, r8)
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b003      	add	sp, #12
 8007b0a:	bd90      	pop	{r4, r7, pc}
 8007b0c:	e000e100 	.word	0xe000e100
 8007b10:	e000ed00 	.word	0xe000ed00

08007b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	2380      	movs	r3, #128	@ 0x80
 8007b22:	045b      	lsls	r3, r3, #17
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d301      	bcc.n	8007b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e010      	b.n	8007b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b58 <SysTick_Config+0x44>)
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	3a01      	subs	r2, #1
 8007b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b34:	2301      	movs	r3, #1
 8007b36:	425b      	negs	r3, r3
 8007b38:	2103      	movs	r1, #3
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7ff ff7c 	bl	8007a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b40:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <SysTick_Config+0x44>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b46:	4b04      	ldr	r3, [pc, #16]	@ (8007b58 <SysTick_Config+0x44>)
 8007b48:	2207      	movs	r2, #7
 8007b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b002      	add	sp, #8
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	e000e010 	.word	0xe000e010

08007b5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	210f      	movs	r1, #15
 8007b68:	187b      	adds	r3, r7, r1
 8007b6a:	1c02      	adds	r2, r0, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	187b      	adds	r3, r7, r1
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	0011      	movs	r1, r2
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f7ff ff5d 	bl	8007a38 <__NVIC_SetPriority>
}
 8007b7e:	46c0      	nop			@ (mov r8, r8)
 8007b80:	46bd      	mov	sp, r7
 8007b82:	b004      	add	sp, #16
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	0002      	movs	r2, r0
 8007b8e:	1dfb      	adds	r3, r7, #7
 8007b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b92:	1dfb      	adds	r3, r7, #7
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f7ff ff11 	bl	80079c0 <__NVIC_EnableIRQ>
}
 8007b9e:	46c0      	nop			@ (mov r8, r8)
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b002      	add	sp, #8
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	0002      	movs	r2, r0
 8007bae:	1dfb      	adds	r3, r7, #7
 8007bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bb2:	1dfb      	adds	r3, r7, #7
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b25b      	sxtb	r3, r3
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f7ff ff1b 	bl	80079f4 <__NVIC_DisableIRQ>
}
 8007bbe:	46c0      	nop			@ (mov r8, r8)
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	b002      	add	sp, #8
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7ff ff9f 	bl	8007b14 <SysTick_Config>
 8007bd6:	0003      	movs	r3, r0
}
 8007bd8:	0018      	movs	r0, r3
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e077      	b.n	8007ce2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a3d      	ldr	r2, [pc, #244]	@ (8007cec <HAL_DMA_Init+0x10c>)
 8007bf8:	4694      	mov	ip, r2
 8007bfa:	4463      	add	r3, ip
 8007bfc:	2114      	movs	r1, #20
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7f8 fa80 	bl	8000104 <__udivsi3>
 8007c04:	0003      	movs	r3, r0
 8007c06:	009a      	lsls	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2225      	movs	r2, #37	@ 0x25
 8007c10:	2102      	movs	r1, #2
 8007c12:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4934      	ldr	r1, [pc, #208]	@ (8007cf0 <HAL_DMA_Init+0x110>)
 8007c20:	400a      	ands	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 fa8d 	bl	800817c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	2380      	movs	r3, #128	@ 0x80
 8007c68:	01db      	lsls	r3, r3, #7
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d102      	bne.n	8007c74 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7c:	213f      	movs	r1, #63	@ 0x3f
 8007c7e:	400a      	ands	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007c8a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d011      	beq.n	8007cb8 <HAL_DMA_Init+0xd8>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d80d      	bhi.n	8007cb8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f000 fa98 	bl	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	e008      	b.n	8007cca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2225      	movs	r2, #37	@ 0x25
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2224      	movs	r2, #36	@ 0x24
 8007cdc:	2100      	movs	r1, #0
 8007cde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b002      	add	sp, #8
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	bffdfff8 	.word	0xbffdfff8
 8007cf0:	ffff800f 	.word	0xffff800f

08007cf4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d02:	2317      	movs	r3, #23
 8007d04:	18fb      	adds	r3, r7, r3
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2224      	movs	r2, #36	@ 0x24
 8007d0e:	5c9b      	ldrb	r3, [r3, r2]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_DMA_Start_IT+0x24>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e06f      	b.n	8007df8 <HAL_DMA_Start_IT+0x104>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2224      	movs	r2, #36	@ 0x24
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2225      	movs	r2, #37	@ 0x25
 8007d24:	5c9b      	ldrb	r3, [r3, r2]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d157      	bne.n	8007ddc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2225      	movs	r2, #37	@ 0x25
 8007d30:	2102      	movs	r1, #2
 8007d32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2101      	movs	r1, #1
 8007d46:	438a      	bics	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f9d3 	bl	80080fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	210e      	movs	r1, #14
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e00f      	b.n	8007d90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	438a      	bics	r2, r1
 8007d7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	210a      	movs	r1, #10
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	2380      	movs	r3, #128	@ 0x80
 8007d98:	025b      	lsls	r3, r3, #9
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d008      	beq.n	8007db0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da8:	2180      	movs	r1, #128	@ 0x80
 8007daa:	0049      	lsls	r1, r1, #1
 8007dac:	430a      	orrs	r2, r1
 8007dae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc2:	2180      	movs	r1, #128	@ 0x80
 8007dc4:	0049      	lsls	r1, r1, #1
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	e00a      	b.n	8007df2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2280      	movs	r2, #128	@ 0x80
 8007de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2224      	movs	r2, #36	@ 0x24
 8007de6:	2100      	movs	r1, #0
 8007de8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007dea:	2317      	movs	r3, #23
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	2201      	movs	r2, #1
 8007df0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007df2:	2317      	movs	r3, #23
 8007df4:	18fb      	adds	r3, r7, r3
 8007df6:	781b      	ldrb	r3, [r3, #0]
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b006      	add	sp, #24
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e050      	b.n	8007eb4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2225      	movs	r2, #37	@ 0x25
 8007e16:	5c9b      	ldrb	r3, [r3, r2]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d008      	beq.n	8007e30 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2204      	movs	r2, #4
 8007e22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2224      	movs	r2, #36	@ 0x24
 8007e28:	2100      	movs	r1, #0
 8007e2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e041      	b.n	8007eb4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	210e      	movs	r1, #14
 8007e3c:	438a      	bics	r2, r1
 8007e3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4a:	491c      	ldr	r1, [pc, #112]	@ (8007ebc <HAL_DMA_Abort+0xbc>)
 8007e4c:	400a      	ands	r2, r1
 8007e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	438a      	bics	r2, r1
 8007e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007e60:	4b17      	ldr	r3, [pc, #92]	@ (8007ec0 <HAL_DMA_Abort+0xc0>)
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	221c      	movs	r2, #28
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	409a      	lsls	r2, r3
 8007e70:	4b13      	ldr	r3, [pc, #76]	@ (8007ec0 <HAL_DMA_Abort+0xc0>)
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007e7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00c      	beq.n	8007ea2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e92:	490a      	ldr	r1, [pc, #40]	@ (8007ebc <HAL_DMA_Abort+0xbc>)
 8007e94:	400a      	ands	r2, r1
 8007e96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007ea0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2225      	movs	r2, #37	@ 0x25
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2224      	movs	r2, #36	@ 0x24
 8007eae:	2100      	movs	r1, #0
 8007eb0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	b002      	add	sp, #8
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	fffffeff 	.word	0xfffffeff
 8007ec0:	40020000 	.word	0x40020000

08007ec4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ecc:	210f      	movs	r1, #15
 8007ece:	187b      	adds	r3, r7, r1
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2225      	movs	r2, #37	@ 0x25
 8007ed8:	5c9b      	ldrb	r3, [r3, r2]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d006      	beq.n	8007eee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007ee6:	187b      	adds	r3, r7, r1
 8007ee8:	2201      	movs	r2, #1
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	e049      	b.n	8007f82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	210e      	movs	r1, #14
 8007efa:	438a      	bics	r2, r1
 8007efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2101      	movs	r1, #1
 8007f0a:	438a      	bics	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f18:	491d      	ldr	r1, [pc, #116]	@ (8007f90 <HAL_DMA_Abort_IT+0xcc>)
 8007f1a:	400a      	ands	r2, r1
 8007f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f94 <HAL_DMA_Abort_IT+0xd0>)
 8007f20:	6859      	ldr	r1, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	221c      	movs	r2, #28
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	409a      	lsls	r2, r3
 8007f2e:	4b19      	ldr	r3, [pc, #100]	@ (8007f94 <HAL_DMA_Abort_IT+0xd0>)
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007f3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	490f      	ldr	r1, [pc, #60]	@ (8007f90 <HAL_DMA_Abort_IT+0xcc>)
 8007f52:	400a      	ands	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007f5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2225      	movs	r2, #37	@ 0x25
 8007f64:	2101      	movs	r1, #1
 8007f66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	@ 0x24
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	0010      	movs	r0, r2
 8007f80:	4798      	blx	r3
    }
  }
  return status;
 8007f82:	230f      	movs	r3, #15
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	781b      	ldrb	r3, [r3, #0]
}
 8007f88:	0018      	movs	r0, r3
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	b004      	add	sp, #16
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	fffffeff 	.word	0xfffffeff
 8007f94:	40020000 	.word	0x40020000

08007f98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007fa0:	4b55      	ldr	r3, [pc, #340]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	221c      	movs	r2, #28
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	409a      	lsls	r2, r3
 8007fba:	0013      	movs	r3, r2
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	d027      	beq.n	8008012 <HAL_DMA_IRQHandler+0x7a>
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	d023      	beq.n	8008012 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d107      	bne.n	8007fe6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2104      	movs	r1, #4
 8007fe2:	438a      	bics	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007fe6:	4b44      	ldr	r3, [pc, #272]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	221c      	movs	r2, #28
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	409a      	lsls	r2, r3
 8007ff6:	4b40      	ldr	r3, [pc, #256]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	2b00      	cmp	r3, #0
 8008002:	d100      	bne.n	8008006 <HAL_DMA_IRQHandler+0x6e>
 8008004:	e073      	b.n	80080ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	0010      	movs	r0, r2
 800800e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8008010:	e06d      	b.n	80080ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008016:	221c      	movs	r2, #28
 8008018:	4013      	ands	r3, r2
 800801a:	2202      	movs	r2, #2
 800801c:	409a      	lsls	r2, r3
 800801e:	0013      	movs	r3, r2
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4013      	ands	r3, r2
 8008024:	d02e      	beq.n	8008084 <HAL_DMA_IRQHandler+0xec>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2202      	movs	r2, #2
 800802a:	4013      	ands	r3, r2
 800802c:	d02a      	beq.n	8008084 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2220      	movs	r2, #32
 8008036:	4013      	ands	r3, r2
 8008038:	d10b      	bne.n	8008052 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	210a      	movs	r1, #10
 8008046:	438a      	bics	r2, r1
 8008048:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2225      	movs	r2, #37	@ 0x25
 800804e:	2101      	movs	r1, #1
 8008050:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8008052:	4b29      	ldr	r3, [pc, #164]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 8008054:	6859      	ldr	r1, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805a:	221c      	movs	r2, #28
 800805c:	4013      	ands	r3, r2
 800805e:	2202      	movs	r2, #2
 8008060:	409a      	lsls	r2, r3
 8008062:	4b25      	ldr	r3, [pc, #148]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 8008064:	430a      	orrs	r2, r1
 8008066:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2224      	movs	r2, #36	@ 0x24
 800806c:	2100      	movs	r1, #0
 800806e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d03a      	beq.n	80080ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	0010      	movs	r0, r2
 8008080:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8008082:	e034      	b.n	80080ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008088:	221c      	movs	r2, #28
 800808a:	4013      	ands	r3, r2
 800808c:	2208      	movs	r2, #8
 800808e:	409a      	lsls	r2, r3
 8008090:	0013      	movs	r3, r2
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4013      	ands	r3, r2
 8008096:	d02b      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x158>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2208      	movs	r2, #8
 800809c:	4013      	ands	r3, r2
 800809e:	d027      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	210e      	movs	r1, #14
 80080ac:	438a      	bics	r2, r1
 80080ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80080b0:	4b11      	ldr	r3, [pc, #68]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 80080b2:	6859      	ldr	r1, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b8:	221c      	movs	r2, #28
 80080ba:	4013      	ands	r3, r2
 80080bc:	2201      	movs	r2, #1
 80080be:	409a      	lsls	r2, r3
 80080c0:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <HAL_DMA_IRQHandler+0x160>)
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2225      	movs	r2, #37	@ 0x25
 80080d0:	2101      	movs	r1, #1
 80080d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2224      	movs	r2, #36	@ 0x24
 80080d8:	2100      	movs	r1, #0
 80080da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	0010      	movs	r0, r2
 80080ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080ee:	46c0      	nop			@ (mov r8, r8)
 80080f0:	46c0      	nop			@ (mov r8, r8)
}
 80080f2:	46bd      	mov	sp, r7
 80080f4:	b004      	add	sp, #16
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40020000 	.word	0x40020000

080080fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008112:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008124:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008126:	4b14      	ldr	r3, [pc, #80]	@ (8008178 <DMA_SetConfig+0x7c>)
 8008128:	6859      	ldr	r1, [r3, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	221c      	movs	r2, #28
 8008130:	4013      	ands	r3, r2
 8008132:	2201      	movs	r2, #1
 8008134:	409a      	lsls	r2, r3
 8008136:	4b10      	ldr	r3, [pc, #64]	@ (8008178 <DMA_SetConfig+0x7c>)
 8008138:	430a      	orrs	r2, r1
 800813a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b10      	cmp	r3, #16
 800814a:	d108      	bne.n	800815e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800815c:	e007      	b.n	800816e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	60da      	str	r2, [r3, #12]
}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	46bd      	mov	sp, r7
 8008172:	b004      	add	sp, #16
 8008174:	bd80      	pop	{r7, pc}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	40020000 	.word	0x40020000

0800817c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008188:	089b      	lsrs	r3, r3, #2
 800818a:	4a10      	ldr	r2, [pc, #64]	@ (80081cc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800818c:	4694      	mov	ip, r2
 800818e:	4463      	add	r3, ip
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	001a      	movs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	001a      	movs	r2, r3
 800819e:	23ff      	movs	r3, #255	@ 0xff
 80081a0:	4013      	ands	r3, r2
 80081a2:	3b08      	subs	r3, #8
 80081a4:	2114      	movs	r1, #20
 80081a6:	0018      	movs	r0, r3
 80081a8:	f7f7 ffac 	bl	8000104 <__udivsi3>
 80081ac:	0003      	movs	r3, r0
 80081ae:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a07      	ldr	r2, [pc, #28]	@ (80081d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80081b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	221f      	movs	r2, #31
 80081ba:	4013      	ands	r3, r2
 80081bc:	2201      	movs	r2, #1
 80081be:	409a      	lsls	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80081c4:	46c0      	nop			@ (mov r8, r8)
 80081c6:	46bd      	mov	sp, r7
 80081c8:	b004      	add	sp, #16
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	10008200 	.word	0x10008200
 80081d0:	40020880 	.word	0x40020880

080081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	223f      	movs	r2, #63	@ 0x3f
 80081e2:	4013      	ands	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80081ea:	4694      	mov	ip, r2
 80081ec:	4463      	add	r3, ip
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	001a      	movs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a07      	ldr	r2, [pc, #28]	@ (8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80081fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3b01      	subs	r3, #1
 8008200:	2203      	movs	r2, #3
 8008202:	4013      	ands	r3, r2
 8008204:	2201      	movs	r2, #1
 8008206:	409a      	lsls	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800820c:	46c0      	nop			@ (mov r8, r8)
 800820e:	46bd      	mov	sp, r7
 8008210:	b004      	add	sp, #16
 8008212:	bd80      	pop	{r7, pc}
 8008214:	1000823f 	.word	0x1000823f
 8008218:	40020940 	.word	0x40020940

0800821c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800822a:	e147      	b.n	80084bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2101      	movs	r1, #1
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4091      	lsls	r1, r2
 8008236:	000a      	movs	r2, r1
 8008238:	4013      	ands	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d100      	bne.n	8008244 <HAL_GPIO_Init+0x28>
 8008242:	e138      	b.n	80084b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2203      	movs	r2, #3
 800824a:	4013      	ands	r3, r2
 800824c:	2b01      	cmp	r3, #1
 800824e:	d005      	beq.n	800825c <HAL_GPIO_Init+0x40>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2203      	movs	r2, #3
 8008256:	4013      	ands	r3, r2
 8008258:	2b02      	cmp	r3, #2
 800825a:	d130      	bne.n	80082be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	2203      	movs	r2, #3
 8008268:	409a      	lsls	r2, r3
 800826a:	0013      	movs	r3, r2
 800826c:	43da      	mvns	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4013      	ands	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	409a      	lsls	r2, r3
 800827e:	0013      	movs	r3, r2
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008292:	2201      	movs	r2, #1
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	409a      	lsls	r2, r3
 8008298:	0013      	movs	r3, r2
 800829a:	43da      	mvns	r2, r3
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4013      	ands	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	091b      	lsrs	r3, r3, #4
 80082a8:	2201      	movs	r2, #1
 80082aa:	401a      	ands	r2, r3
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	409a      	lsls	r2, r3
 80082b0:	0013      	movs	r3, r2
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2203      	movs	r2, #3
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d017      	beq.n	80082fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	2203      	movs	r2, #3
 80082d6:	409a      	lsls	r2, r3
 80082d8:	0013      	movs	r3, r2
 80082da:	43da      	mvns	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4013      	ands	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	409a      	lsls	r2, r3
 80082ec:	0013      	movs	r3, r2
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	4013      	ands	r3, r2
 8008302:	2b02      	cmp	r3, #2
 8008304:	d123      	bne.n	800834e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	08da      	lsrs	r2, r3, #3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3208      	adds	r2, #8
 800830e:	0092      	lsls	r2, r2, #2
 8008310:	58d3      	ldr	r3, [r2, r3]
 8008312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2207      	movs	r2, #7
 8008318:	4013      	ands	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	220f      	movs	r2, #15
 800831e:	409a      	lsls	r2, r3
 8008320:	0013      	movs	r3, r2
 8008322:	43da      	mvns	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4013      	ands	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2107      	movs	r1, #7
 8008332:	400b      	ands	r3, r1
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	409a      	lsls	r2, r3
 8008338:	0013      	movs	r3, r2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	08da      	lsrs	r2, r3, #3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3208      	adds	r2, #8
 8008348:	0092      	lsls	r2, r2, #2
 800834a:	6939      	ldr	r1, [r7, #16]
 800834c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	2203      	movs	r2, #3
 800835a:	409a      	lsls	r2, r3
 800835c:	0013      	movs	r3, r2
 800835e:	43da      	mvns	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4013      	ands	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2203      	movs	r2, #3
 800836c:	401a      	ands	r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	409a      	lsls	r2, r3
 8008374:	0013      	movs	r3, r2
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	23c0      	movs	r3, #192	@ 0xc0
 8008388:	029b      	lsls	r3, r3, #10
 800838a:	4013      	ands	r3, r2
 800838c:	d100      	bne.n	8008390 <HAL_GPIO_Init+0x174>
 800838e:	e092      	b.n	80084b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008390:	4a50      	ldr	r2, [pc, #320]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	089b      	lsrs	r3, r3, #2
 8008396:	3318      	adds	r3, #24
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	589b      	ldr	r3, [r3, r2]
 800839c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2203      	movs	r2, #3
 80083a2:	4013      	ands	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	220f      	movs	r2, #15
 80083a8:	409a      	lsls	r2, r3
 80083aa:	0013      	movs	r3, r2
 80083ac:	43da      	mvns	r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4013      	ands	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	23a0      	movs	r3, #160	@ 0xa0
 80083b8:	05db      	lsls	r3, r3, #23
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d013      	beq.n	80083e6 <HAL_GPIO_Init+0x1ca>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a45      	ldr	r2, [pc, #276]	@ (80084d8 <HAL_GPIO_Init+0x2bc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00d      	beq.n	80083e2 <HAL_GPIO_Init+0x1c6>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a44      	ldr	r2, [pc, #272]	@ (80084dc <HAL_GPIO_Init+0x2c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d007      	beq.n	80083de <HAL_GPIO_Init+0x1c2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a43      	ldr	r2, [pc, #268]	@ (80084e0 <HAL_GPIO_Init+0x2c4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d101      	bne.n	80083da <HAL_GPIO_Init+0x1be>
 80083d6:	2303      	movs	r3, #3
 80083d8:	e006      	b.n	80083e8 <HAL_GPIO_Init+0x1cc>
 80083da:	2305      	movs	r3, #5
 80083dc:	e004      	b.n	80083e8 <HAL_GPIO_Init+0x1cc>
 80083de:	2302      	movs	r3, #2
 80083e0:	e002      	b.n	80083e8 <HAL_GPIO_Init+0x1cc>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <HAL_GPIO_Init+0x1cc>
 80083e6:	2300      	movs	r3, #0
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	2103      	movs	r1, #3
 80083ec:	400a      	ands	r2, r1
 80083ee:	00d2      	lsls	r2, r2, #3
 80083f0:	4093      	lsls	r3, r2
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80083f8:	4936      	ldr	r1, [pc, #216]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	089b      	lsrs	r3, r3, #2
 80083fe:	3318      	adds	r3, #24
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008406:	4b33      	ldr	r3, [pc, #204]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	43da      	mvns	r2, r3
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	4013      	ands	r3, r2
 8008414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	2380      	movs	r3, #128	@ 0x80
 800841c:	035b      	lsls	r3, r3, #13
 800841e:	4013      	ands	r3, r2
 8008420:	d003      	beq.n	800842a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800842a:	4b2a      	ldr	r3, [pc, #168]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008430:	4b28      	ldr	r3, [pc, #160]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	43da      	mvns	r2, r3
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4013      	ands	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	2380      	movs	r3, #128	@ 0x80
 8008446:	039b      	lsls	r3, r3, #14
 8008448:	4013      	ands	r3, r2
 800844a:	d003      	beq.n	8008454 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008454:	4b1f      	ldr	r3, [pc, #124]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800845a:	4a1e      	ldr	r2, [pc, #120]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 800845c:	2384      	movs	r3, #132	@ 0x84
 800845e:	58d3      	ldr	r3, [r2, r3]
 8008460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	43da      	mvns	r2, r3
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	4013      	ands	r3, r2
 800846a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	2380      	movs	r3, #128	@ 0x80
 8008472:	029b      	lsls	r3, r3, #10
 8008474:	4013      	ands	r3, r2
 8008476:	d003      	beq.n	8008480 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008480:	4914      	ldr	r1, [pc, #80]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 8008482:	2284      	movs	r2, #132	@ 0x84
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008488:	4a12      	ldr	r2, [pc, #72]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 800848a:	2380      	movs	r3, #128	@ 0x80
 800848c:	58d3      	ldr	r3, [r2, r3]
 800848e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	43da      	mvns	r2, r3
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4013      	ands	r3, r2
 8008498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	2380      	movs	r3, #128	@ 0x80
 80084a0:	025b      	lsls	r3, r3, #9
 80084a2:	4013      	ands	r3, r2
 80084a4:	d003      	beq.n	80084ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084ae:	4909      	ldr	r1, [pc, #36]	@ (80084d4 <HAL_GPIO_Init+0x2b8>)
 80084b0:	2280      	movs	r2, #128	@ 0x80
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	3301      	adds	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	40da      	lsrs	r2, r3
 80084c4:	1e13      	subs	r3, r2, #0
 80084c6:	d000      	beq.n	80084ca <HAL_GPIO_Init+0x2ae>
 80084c8:	e6b0      	b.n	800822c <HAL_GPIO_Init+0x10>
  }
}
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	46c0      	nop			@ (mov r8, r8)
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b006      	add	sp, #24
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	40021800 	.word	0x40021800
 80084d8:	50000400 	.word	0x50000400
 80084dc:	50000800 	.word	0x50000800
 80084e0:	50000c00 	.word	0x50000c00

080084e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	000a      	movs	r2, r1
 80084ee:	1cbb      	adds	r3, r7, #2
 80084f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	1cba      	adds	r2, r7, #2
 80084f8:	8812      	ldrh	r2, [r2, #0]
 80084fa:	4013      	ands	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80084fe:	230f      	movs	r3, #15
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	2201      	movs	r2, #1
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	e003      	b.n	8008510 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008508:	230f      	movs	r3, #15
 800850a:	18fb      	adds	r3, r7, r3
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008510:	230f      	movs	r3, #15
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	781b      	ldrb	r3, [r3, #0]
}
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b004      	add	sp, #16
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	0008      	movs	r0, r1
 8008528:	0011      	movs	r1, r2
 800852a:	1cbb      	adds	r3, r7, #2
 800852c:	1c02      	adds	r2, r0, #0
 800852e:	801a      	strh	r2, [r3, #0]
 8008530:	1c7b      	adds	r3, r7, #1
 8008532:	1c0a      	adds	r2, r1, #0
 8008534:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008536:	1c7b      	adds	r3, r7, #1
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800853e:	1cbb      	adds	r3, r7, #2
 8008540:	881a      	ldrh	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008546:	e003      	b.n	8008550 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008548:	1cbb      	adds	r3, r7, #2
 800854a:	881a      	ldrh	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008550:	46c0      	nop			@ (mov r8, r8)
 8008552:	46bd      	mov	sp, r7
 8008554:	b002      	add	sp, #8
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	0002      	movs	r2, r0
 8008560:	1dbb      	adds	r3, r7, #6
 8008562:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008564:	4b10      	ldr	r3, [pc, #64]	@ (80085a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	1dba      	adds	r2, r7, #6
 800856a:	8812      	ldrh	r2, [r2, #0]
 800856c:	4013      	ands	r3, r2
 800856e:	d008      	beq.n	8008582 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008570:	4b0d      	ldr	r3, [pc, #52]	@ (80085a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008572:	1dba      	adds	r2, r7, #6
 8008574:	8812      	ldrh	r2, [r2, #0]
 8008576:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008578:	1dbb      	adds	r3, r7, #6
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	0018      	movs	r0, r3
 800857e:	f7fb faa7 	bl	8003ad0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008582:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	1dba      	adds	r2, r7, #6
 8008588:	8812      	ldrh	r2, [r2, #0]
 800858a:	4013      	ands	r3, r2
 800858c:	d008      	beq.n	80085a0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800858e:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008590:	1dba      	adds	r2, r7, #6
 8008592:	8812      	ldrh	r2, [r2, #0]
 8008594:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008596:	1dbb      	adds	r3, r7, #6
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	0018      	movs	r0, r3
 800859c:	f7fb fa6e 	bl	8003a7c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80085a0:	46c0      	nop			@ (mov r8, r8)
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b002      	add	sp, #8
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40021800 	.word	0x40021800

080085ac <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e097      	b.n	80086ee <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2236      	movs	r2, #54	@ 0x36
 80085c2:	5c9b      	ldrb	r3, [r3, r2]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d113      	bne.n	80085f2 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2235      	movs	r2, #53	@ 0x35
 80085ce:	2100      	movs	r1, #0
 80085d0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	0018      	movs	r0, r3
 80085d6:	f000 fa8f 	bl	8008af8 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a44      	ldr	r2, [pc, #272]	@ (80086f8 <HAL_LPTIM_Init+0x14c>)
 80085e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	0010      	movs	r0, r2
 80085f0:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2236      	movs	r2, #54	@ 0x36
 80085f6:	2102      	movs	r1, #2
 80085f8:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d005      	beq.n	8008616 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800860e:	2380      	movs	r3, #128	@ 0x80
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	429a      	cmp	r2, r3
 8008614:	d103      	bne.n	800861e <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	221e      	movs	r2, #30
 800861a:	4393      	bics	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	4a36      	ldr	r2, [pc, #216]	@ (80086fc <HAL_LPTIM_Init+0x150>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4a35      	ldr	r2, [pc, #212]	@ (8008700 <HAL_LPTIM_Init+0x154>)
 800862c:	4013      	ands	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a34      	ldr	r2, [pc, #208]	@ (8008704 <HAL_LPTIM_Init+0x158>)
 8008634:	4013      	ands	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008640:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008646:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800864c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8008652:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d107      	bne.n	8008672 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800866a:	4313      	orrs	r3, r2
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d005      	beq.n	8008686 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800867e:	2380      	movs	r3, #128	@ 0x80
 8008680:	041b      	lsls	r3, r3, #16
 8008682:	429a      	cmp	r2, r3
 8008684:	d107      	bne.n	8008696 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800868e:	4313      	orrs	r3, r2
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	4a18      	ldr	r2, [pc, #96]	@ (80086fc <HAL_LPTIM_Init+0x150>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00a      	beq.n	80086b6 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80086a8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80086ae:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a11      	ldr	r2, [pc, #68]	@ (8008708 <HAL_LPTIM_Init+0x15c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d108      	bne.n	80086da <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80086d8:	e004      	b.n	80086e4 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086e2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2236      	movs	r2, #54	@ 0x36
 80086e8:	2101      	movs	r1, #1
 80086ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	0018      	movs	r0, r3
 80086f0:	46bd      	mov	sp, r7
 80086f2:	b004      	add	sp, #16
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	46c0      	nop			@ (mov r8, r8)
 80086f8:	080053b1 	.word	0x080053b1
 80086fc:	0000ffff 	.word	0x0000ffff
 8008700:	ffff1f3f 	.word	0xffff1f3f
 8008704:	ff19f1fe 	.word	0xff19f1fe
 8008708:	40007c00 	.word	0x40007c00

0800870c <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2236      	movs	r2, #54	@ 0x36
 800871c:	2102      	movs	r1, #2
 800871e:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2180      	movs	r1, #128	@ 0x80
 800872c:	0349      	lsls	r1, r1, #13
 800872e:	430a      	orrs	r2, r1
 8008730:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691a      	ldr	r2, [r3, #16]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2101      	movs	r1, #1
 800873e:	430a      	orrs	r2, r1
 8008740:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2210      	movs	r2, #16
 8008748:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2110      	movs	r1, #16
 8008756:	0018      	movs	r0, r3
 8008758:	f000 f9fa 	bl	8008b50 <LPTIM_WaitForFlag>
 800875c:	0003      	movs	r3, r0
 800875e:	2b03      	cmp	r3, #3
 8008760:	d101      	bne.n	8008766 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e060      	b.n	8008828 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2208      	movs	r2, #8
 800876c:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2108      	movs	r1, #8
 800877a:	0018      	movs	r0, r3
 800877c:	f000 f9e8 	bl	8008b50 <LPTIM_WaitForFlag>
 8008780:	0003      	movs	r3, r0
 8008782:	2b03      	cmp	r3, #3
 8008784:	d101      	bne.n	800878a <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e04e      	b.n	8008828 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	0018      	movs	r0, r3
 800878e:	f000 fa17 	bl	8008bc0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	0018      	movs	r0, r3
 8008796:	f000 f9a3 	bl	8008ae0 <HAL_LPTIM_GetState>
 800879a:	0003      	movs	r3, r0
 800879c:	2b03      	cmp	r3, #3
 800879e:	d101      	bne.n	80087a4 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e041      	b.n	8008828 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689a      	ldr	r2, [r3, #8]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2110      	movs	r1, #16
 80087b0:	430a      	orrs	r2, r1
 80087b2:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2108      	movs	r1, #8
 80087c0:	430a      	orrs	r2, r1
 80087c2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2102      	movs	r1, #2
 80087d0:	430a      	orrs	r2, r1
 80087d2:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2101      	movs	r1, #1
 80087e0:	430a      	orrs	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	4a11      	ldr	r2, [pc, #68]	@ (8008830 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2104      	movs	r1, #4
 80087fa:	430a      	orrs	r2, r1
 80087fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2101      	movs	r1, #1
 800880a:	430a      	orrs	r2, r1
 800880c:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2102      	movs	r1, #2
 800881a:	430a      	orrs	r2, r1
 800881c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2236      	movs	r2, #54	@ 0x36
 8008822:	2101      	movs	r1, #1
 8008824:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b004      	add	sp, #16
 800882e:	bd80      	pop	{r7, pc}
 8008830:	0000ffff 	.word	0x0000ffff

08008834 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2201      	movs	r2, #1
 8008844:	4013      	ands	r3, r2
 8008846:	2b01      	cmp	r3, #1
 8008848:	d10f      	bne.n	800886a <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2201      	movs	r2, #1
 8008852:	4013      	ands	r3, r2
 8008854:	2b01      	cmp	r3, #1
 8008856:	d108      	bne.n	800886a <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2201      	movs	r2, #1
 800885e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	0010      	movs	r0, r2
 8008868:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2202      	movs	r2, #2
 8008872:	4013      	ands	r3, r2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d10f      	bne.n	8008898 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2202      	movs	r2, #2
 8008880:	4013      	ands	r3, r2
 8008882:	2b02      	cmp	r3, #2
 8008884:	d108      	bne.n	8008898 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2202      	movs	r2, #2
 800888c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	0010      	movs	r0, r2
 8008896:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2204      	movs	r2, #4
 80088a0:	4013      	ands	r3, r2
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d10f      	bne.n	80088c6 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2204      	movs	r2, #4
 80088ae:	4013      	ands	r3, r2
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d108      	bne.n	80088c6 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2204      	movs	r2, #4
 80088ba:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	0010      	movs	r0, r2
 80088c4:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2208      	movs	r2, #8
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d10f      	bne.n	80088f4 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2208      	movs	r2, #8
 80088dc:	4013      	ands	r3, r2
 80088de:	2b08      	cmp	r3, #8
 80088e0:	d108      	bne.n	80088f4 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2208      	movs	r2, #8
 80088e8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	0010      	movs	r0, r2
 80088f2:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2210      	movs	r2, #16
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d10f      	bne.n	8008922 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2210      	movs	r2, #16
 800890a:	4013      	ands	r3, r2
 800890c:	2b10      	cmp	r3, #16
 800890e:	d108      	bne.n	8008922 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2210      	movs	r2, #16
 8008916:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	0010      	movs	r0, r2
 8008920:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2220      	movs	r2, #32
 800892a:	4013      	ands	r3, r2
 800892c:	2b20      	cmp	r3, #32
 800892e:	d10f      	bne.n	8008950 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2220      	movs	r2, #32
 8008938:	4013      	ands	r3, r2
 800893a:	2b20      	cmp	r3, #32
 800893c:	d108      	bne.n	8008950 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2220      	movs	r2, #32
 8008944:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	0010      	movs	r0, r2
 800894e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2240      	movs	r2, #64	@ 0x40
 8008958:	4013      	ands	r3, r2
 800895a:	2b40      	cmp	r3, #64	@ 0x40
 800895c:	d10f      	bne.n	800897e <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2240      	movs	r2, #64	@ 0x40
 8008966:	4013      	ands	r3, r2
 8008968:	2b40      	cmp	r3, #64	@ 0x40
 800896a:	d108      	bne.n	800897e <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2240      	movs	r2, #64	@ 0x40
 8008972:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	0010      	movs	r0, r2
 800897c:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	46bd      	mov	sp, r7
 8008982:	b002      	add	sp, #8
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800898e:	46c0      	nop			@ (mov r8, r8)
 8008990:	46bd      	mov	sp, r7
 8008992:	b002      	add	sp, #8
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800899e:	46c0      	nop			@ (mov r8, r8)
 80089a0:	46bd      	mov	sp, r7
 80089a2:	b002      	add	sp, #8
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80089ae:	46c0      	nop			@ (mov r8, r8)
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b002      	add	sp, #8
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80089be:	46c0      	nop			@ (mov r8, r8)
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b002      	add	sp, #8
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80089ce:	46c0      	nop			@ (mov r8, r8)
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b002      	add	sp, #8
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80089de:	46c0      	nop			@ (mov r8, r8)
 80089e0:	46bd      	mov	sp, r7
 80089e2:	b002      	add	sp, #8
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80089ee:	46c0      	nop			@ (mov r8, r8)
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b002      	add	sp, #8
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	230b      	movs	r3, #11
 8008a04:	18fb      	adds	r3, r7, r3
 8008a06:	1c0a      	adds	r2, r1, #0
 8008a08:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a0a:	2317      	movs	r3, #23
 8008a0c:	18fb      	adds	r3, r7, r3
 8008a0e:	2200      	movs	r2, #0
 8008a10:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e05a      	b.n	8008ad2 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2236      	movs	r2, #54	@ 0x36
 8008a20:	5c9b      	ldrb	r3, [r3, r2]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d132      	bne.n	8008a8e <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008a28:	230b      	movs	r3, #11
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b08      	cmp	r3, #8
 8008a30:	d828      	bhi.n	8008a84 <HAL_LPTIM_RegisterCallback+0x8c>
 8008a32:	009a      	lsls	r2, r3, #2
 8008a34:	4b29      	ldr	r3, [pc, #164]	@ (8008adc <HAL_LPTIM_RegisterCallback+0xe4>)
 8008a36:	18d3      	adds	r3, r2, r3
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008a42:	e043      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008a4a:	e03f      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8008a52:	e03b      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8008a5a:	e037      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8008a62:	e033      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008a6a:	e02f      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008a72:	e02b      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008a7a:	e027      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008a82:	e023      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008a84:	2317      	movs	r3, #23
 8008a86:	18fb      	adds	r3, r7, r3
 8008a88:	2201      	movs	r2, #1
 8008a8a:	701a      	strb	r2, [r3, #0]
        break;
 8008a8c:	e01e      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2236      	movs	r2, #54	@ 0x36
 8008a92:	5c9b      	ldrb	r3, [r3, r2]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d114      	bne.n	8008ac4 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 8008a9a:	230b      	movs	r3, #11
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <HAL_LPTIM_RegisterCallback+0xb2>
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d004      	beq.n	8008ab2 <HAL_LPTIM_RegisterCallback+0xba>
 8008aa8:	e007      	b.n	8008aba <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008ab0:	e00c      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008ab8:	e008      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008aba:	2317      	movs	r3, #23
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	2201      	movs	r2, #1
 8008ac0:	701a      	strb	r2, [r3, #0]
        break;
 8008ac2:	e003      	b.n	8008acc <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008ac4:	2317      	movs	r3, #23
 8008ac6:	18fb      	adds	r3, r7, r3
 8008ac8:	2201      	movs	r2, #1
 8008aca:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008acc:	2317      	movs	r3, #23
 8008ace:	18fb      	adds	r3, r7, r3
 8008ad0:	781b      	ldrb	r3, [r3, #0]
}
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	b006      	add	sp, #24
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			@ (mov r8, r8)
 8008adc:	0800e13c 	.word	0x0800e13c

08008ae0 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2236      	movs	r2, #54	@ 0x36
 8008aec:	5c9b      	ldrb	r3, [r3, r2]
 8008aee:	b2db      	uxtb	r3, r3
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b002      	add	sp, #8
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a0c      	ldr	r2, [pc, #48]	@ (8008b34 <LPTIM_ResetCallback+0x3c>)
 8008b04:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a0b      	ldr	r2, [pc, #44]	@ (8008b38 <LPTIM_ResetCallback+0x40>)
 8008b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8008b3c <LPTIM_ResetCallback+0x44>)
 8008b10:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a0a      	ldr	r2, [pc, #40]	@ (8008b40 <LPTIM_ResetCallback+0x48>)
 8008b16:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b44 <LPTIM_ResetCallback+0x4c>)
 8008b1c:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a09      	ldr	r2, [pc, #36]	@ (8008b48 <LPTIM_ResetCallback+0x50>)
 8008b22:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a09      	ldr	r2, [pc, #36]	@ (8008b4c <LPTIM_ResetCallback+0x54>)
 8008b28:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008b2a:	46c0      	nop			@ (mov r8, r8)
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	b002      	add	sp, #8
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	46c0      	nop			@ (mov r8, r8)
 8008b34:	08008987 	.word	0x08008987
 8008b38:	08008997 	.word	0x08008997
 8008b3c:	080089a7 	.word	0x080089a7
 8008b40:	080089b7 	.word	0x080089b7
 8008b44:	080089c7 	.word	0x080089c7
 8008b48:	080089d7 	.word	0x080089d7
 8008b4c:	080089e7 	.word	0x080089e7

08008b50 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008b5a:	230f      	movs	r3, #15
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	2200      	movs	r2, #0
 8008b60:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008b62:	4b15      	ldr	r3, [pc, #84]	@ (8008bb8 <LPTIM_WaitForFlag+0x68>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4915      	ldr	r1, [pc, #84]	@ (8008bbc <LPTIM_WaitForFlag+0x6c>)
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7f7 facb 	bl	8000104 <__udivsi3>
 8008b6e:	0003      	movs	r3, r0
 8008b70:	001a      	movs	r2, r3
 8008b72:	0013      	movs	r3, r2
 8008b74:	015b      	lsls	r3, r3, #5
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	189b      	adds	r3, r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d103      	bne.n	8008b94 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8008b8c:	230f      	movs	r3, #15
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	2203      	movs	r2, #3
 8008b92:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d002      	beq.n	8008baa <LPTIM_WaitForFlag+0x5a>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1ea      	bne.n	8008b80 <LPTIM_WaitForFlag+0x30>

  return result;
 8008baa:	230f      	movs	r3, #15
 8008bac:	18fb      	adds	r3, r7, r3
 8008bae:	781b      	ldrb	r3, [r3, #0]
}
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	b004      	add	sp, #16
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	2000044c 	.word	0x2000044c
 8008bbc:	00004e20 	.word	0x00004e20

08008bc0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08c      	sub	sp, #48	@ 0x30
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f383 8810 	msr	PRIMASK, r3
}
 8008be0:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a72      	ldr	r2, [pc, #456]	@ (8008db0 <LPTIM_Disable+0x1f0>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <LPTIM_Disable+0x34>
 8008bec:	4a71      	ldr	r2, [pc, #452]	@ (8008db4 <LPTIM_Disable+0x1f4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008bf2:	e00d      	b.n	8008c10 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008bf4:	4b70      	ldr	r3, [pc, #448]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008bf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bf8:	23c0      	movs	r3, #192	@ 0xc0
 8008bfa:	031b      	lsls	r3, r3, #12
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008c00:	e006      	b.n	8008c10 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008c02:	4b6d      	ldr	r3, [pc, #436]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c06:	23c0      	movs	r3, #192	@ 0xc0
 8008c08:	039b      	lsls	r3, r3, #14
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008c0e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c36:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8008db0 <LPTIM_Disable+0x1f0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d003      	beq.n	8008c4a <LPTIM_Disable+0x8a>
 8008c42:	4a5c      	ldr	r2, [pc, #368]	@ (8008db4 <LPTIM_Disable+0x1f4>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00e      	beq.n	8008c66 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008c48:	e01b      	b.n	8008c82 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c50:	2180      	movs	r1, #128	@ 0x80
 8008c52:	0609      	lsls	r1, r1, #24
 8008c54:	430a      	orrs	r2, r1
 8008c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008c58:	4b57      	ldr	r3, [pc, #348]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5c:	4b56      	ldr	r3, [pc, #344]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c5e:	0052      	lsls	r2, r2, #1
 8008c60:	0852      	lsrs	r2, r2, #1
 8008c62:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008c64:	e00d      	b.n	8008c82 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008c66:	4b54      	ldr	r3, [pc, #336]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6a:	4b53      	ldr	r3, [pc, #332]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c6c:	2180      	movs	r1, #128	@ 0x80
 8008c6e:	05c9      	lsls	r1, r1, #23
 8008c70:	430a      	orrs	r2, r1
 8008c72:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008c74:	4b50      	ldr	r3, [pc, #320]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c78:	4b4f      	ldr	r3, [pc, #316]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008c7a:	4950      	ldr	r1, [pc, #320]	@ (8008dbc <LPTIM_Disable+0x1fc>)
 8008c7c:	400a      	ands	r2, r1
 8008c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008c80:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <LPTIM_Disable+0xd0>
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d100      	bne.n	8008c90 <LPTIM_Disable+0xd0>
 8008c8e:	e071      	b.n	8008d74 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a46      	ldr	r2, [pc, #280]	@ (8008db0 <LPTIM_Disable+0x1f0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d003      	beq.n	8008ca2 <LPTIM_Disable+0xe2>
 8008c9a:	4a46      	ldr	r2, [pc, #280]	@ (8008db4 <LPTIM_Disable+0x1f4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d007      	beq.n	8008cb0 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008ca0:	e00d      	b.n	8008cbe <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008ca2:	4b45      	ldr	r3, [pc, #276]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ca6:	4b44      	ldr	r3, [pc, #272]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008ca8:	4945      	ldr	r1, [pc, #276]	@ (8008dc0 <LPTIM_Disable+0x200>)
 8008caa:	400a      	ands	r2, r1
 8008cac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008cae:	e006      	b.n	8008cbe <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008cb0:	4b41      	ldr	r3, [pc, #260]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008cb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008cb4:	4b40      	ldr	r3, [pc, #256]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008cb6:	4943      	ldr	r1, [pc, #268]	@ (8008dc4 <LPTIM_Disable+0x204>)
 8008cb8:	400a      	ands	r2, r1
 8008cba:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008cbc:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01b      	beq.n	8008cfc <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691a      	ldr	r2, [r3, #16]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2101      	movs	r1, #1
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2108      	movs	r1, #8
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f7ff ff35 	bl	8008b50 <LPTIM_WaitForFlag>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d103      	bne.n	8008cf4 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2236      	movs	r2, #54	@ 0x36
 8008cf0:	2103      	movs	r1, #3
 8008cf2:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01b      	beq.n	8008d3a <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2110      	movs	r1, #16
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f7ff ff16 	bl	8008b50 <LPTIM_WaitForFlag>
 8008d24:	0003      	movs	r3, r0
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d103      	bne.n	8008d32 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2236      	movs	r2, #54	@ 0x36
 8008d2e:	2103      	movs	r1, #3
 8008d30:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2210      	movs	r2, #16
 8008d38:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008db0 <LPTIM_Disable+0x1f0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d003      	beq.n	8008d4c <LPTIM_Disable+0x18c>
 8008d44:	4a1b      	ldr	r2, [pc, #108]	@ (8008db4 <LPTIM_Disable+0x1f4>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00a      	beq.n	8008d60 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008d4a:	e013      	b.n	8008d74 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d50:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc0 <LPTIM_Disable+0x200>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	0019      	movs	r1, r3
 8008d56:	4b18      	ldr	r3, [pc, #96]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008d5e:	e009      	b.n	8008d74 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008d60:	4b15      	ldr	r3, [pc, #84]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d64:	4a17      	ldr	r2, [pc, #92]	@ (8008dc4 <LPTIM_Disable+0x204>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	0019      	movs	r1, r3
 8008d6a:	4b13      	ldr	r3, [pc, #76]	@ (8008db8 <LPTIM_Disable+0x1f8>)
 8008d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008d72:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2101      	movs	r1, #1
 8008d80:	438a      	bics	r2, r1
 8008d82:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d8a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6a3a      	ldr	r2, [r7, #32]
 8008d92:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f383 8810 	msr	PRIMASK, r3
}
 8008da6:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008da8:	46c0      	nop			@ (mov r8, r8)
 8008daa:	46bd      	mov	sp, r7
 8008dac:	b00c      	add	sp, #48	@ 0x30
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40007c00 	.word	0x40007c00
 8008db4:	40009400 	.word	0x40009400
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	bfffffff 	.word	0xbfffffff
 8008dc0:	fff3ffff 	.word	0xfff3ffff
 8008dc4:	ffcfffff 	.word	0xffcfffff

08008dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008dd0:	4b19      	ldr	r3, [pc, #100]	@ (8008e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a19      	ldr	r2, [pc, #100]	@ (8008e3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	0019      	movs	r1, r3
 8008dda:	4b17      	ldr	r3, [pc, #92]	@ (8008e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d11f      	bne.n	8008e2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008dec:	4b14      	ldr	r3, [pc, #80]	@ (8008e40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	0013      	movs	r3, r2
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	189b      	adds	r3, r3, r2
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	4912      	ldr	r1, [pc, #72]	@ (8008e44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f7f7 f982 	bl	8000104 <__udivsi3>
 8008e00:	0003      	movs	r3, r0
 8008e02:	3301      	adds	r3, #1
 8008e04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e06:	e008      	b.n	8008e1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e001      	b.n	8008e1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e009      	b.n	8008e2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e1a:	4b07      	ldr	r3, [pc, #28]	@ (8008e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008e1c:	695a      	ldr	r2, [r3, #20]
 8008e1e:	2380      	movs	r3, #128	@ 0x80
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	401a      	ands	r2, r3
 8008e24:	2380      	movs	r3, #128	@ 0x80
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d0ed      	beq.n	8008e08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	0018      	movs	r0, r3
 8008e30:	46bd      	mov	sp, r7
 8008e32:	b004      	add	sp, #16
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	46c0      	nop			@ (mov r8, r8)
 8008e38:	40007000 	.word	0x40007000
 8008e3c:	fffff9ff 	.word	0xfffff9ff
 8008e40:	2000044c 	.word	0x2000044c
 8008e44:	000f4240 	.word	0x000f4240

08008e48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008e4c:	4b03      	ldr	r3, [pc, #12]	@ (8008e5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	23e0      	movs	r3, #224	@ 0xe0
 8008e52:	01db      	lsls	r3, r3, #7
 8008e54:	4013      	ands	r3, r2
}
 8008e56:	0018      	movs	r0, r3
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40021000 	.word	0x40021000

08008e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e2fe      	b.n	8009470 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2201      	movs	r2, #1
 8008e78:	4013      	ands	r3, r2
 8008e7a:	d100      	bne.n	8008e7e <HAL_RCC_OscConfig+0x1e>
 8008e7c:	e07c      	b.n	8008f78 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e7e:	4bc3      	ldr	r3, [pc, #780]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2238      	movs	r2, #56	@ 0x38
 8008e84:	4013      	ands	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e88:	4bc0      	ldr	r3, [pc, #768]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2203      	movs	r2, #3
 8008e8e:	4013      	ands	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d102      	bne.n	8008e9e <HAL_RCC_OscConfig+0x3e>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d002      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d10b      	bne.n	8008ebc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ea4:	4bb9      	ldr	r3, [pc, #740]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	2380      	movs	r3, #128	@ 0x80
 8008eaa:	029b      	lsls	r3, r3, #10
 8008eac:	4013      	ands	r3, r2
 8008eae:	d062      	beq.n	8008f76 <HAL_RCC_OscConfig+0x116>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d15e      	bne.n	8008f76 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e2d9      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	025b      	lsls	r3, r3, #9
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d107      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x78>
 8008ec8:	4bb0      	ldr	r3, [pc, #704]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	4baf      	ldr	r3, [pc, #700]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008ece:	2180      	movs	r1, #128	@ 0x80
 8008ed0:	0249      	lsls	r1, r1, #9
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e020      	b.n	8008f1a <HAL_RCC_OscConfig+0xba>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	23a0      	movs	r3, #160	@ 0xa0
 8008ede:	02db      	lsls	r3, r3, #11
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d10e      	bne.n	8008f02 <HAL_RCC_OscConfig+0xa2>
 8008ee4:	4ba9      	ldr	r3, [pc, #676]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008eea:	2180      	movs	r1, #128	@ 0x80
 8008eec:	02c9      	lsls	r1, r1, #11
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	4ba6      	ldr	r3, [pc, #664]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4ba5      	ldr	r3, [pc, #660]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008ef8:	2180      	movs	r1, #128	@ 0x80
 8008efa:	0249      	lsls	r1, r1, #9
 8008efc:	430a      	orrs	r2, r1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e00b      	b.n	8008f1a <HAL_RCC_OscConfig+0xba>
 8008f02:	4ba2      	ldr	r3, [pc, #648]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4ba1      	ldr	r3, [pc, #644]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f08:	49a1      	ldr	r1, [pc, #644]	@ (8009190 <HAL_RCC_OscConfig+0x330>)
 8008f0a:	400a      	ands	r2, r1
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	4b9f      	ldr	r3, [pc, #636]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b9e      	ldr	r3, [pc, #632]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f14:	499f      	ldr	r1, [pc, #636]	@ (8009194 <HAL_RCC_OscConfig+0x334>)
 8008f16:	400a      	ands	r2, r1
 8008f18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d014      	beq.n	8008f4c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f22:	f7fd fb19 	bl	8006558 <HAL_GetTick>
 8008f26:	0003      	movs	r3, r0
 8008f28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f2a:	e008      	b.n	8008f3e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f2c:	f7fd fb14 	bl	8006558 <HAL_GetTick>
 8008f30:	0002      	movs	r2, r0
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b64      	cmp	r3, #100	@ 0x64
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e298      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f3e:	4b93      	ldr	r3, [pc, #588]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	2380      	movs	r3, #128	@ 0x80
 8008f44:	029b      	lsls	r3, r3, #10
 8008f46:	4013      	ands	r3, r2
 8008f48:	d0f0      	beq.n	8008f2c <HAL_RCC_OscConfig+0xcc>
 8008f4a:	e015      	b.n	8008f78 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4c:	f7fd fb04 	bl	8006558 <HAL_GetTick>
 8008f50:	0003      	movs	r3, r0
 8008f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f54:	e008      	b.n	8008f68 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f56:	f7fd faff 	bl	8006558 <HAL_GetTick>
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b64      	cmp	r3, #100	@ 0x64
 8008f62:	d901      	bls.n	8008f68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e283      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f68:	4b88      	ldr	r3, [pc, #544]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	2380      	movs	r3, #128	@ 0x80
 8008f6e:	029b      	lsls	r3, r3, #10
 8008f70:	4013      	ands	r3, r2
 8008f72:	d1f0      	bne.n	8008f56 <HAL_RCC_OscConfig+0xf6>
 8008f74:	e000      	b.n	8008f78 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f76:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	4013      	ands	r3, r2
 8008f80:	d100      	bne.n	8008f84 <HAL_RCC_OscConfig+0x124>
 8008f82:	e099      	b.n	80090b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f84:	4b81      	ldr	r3, [pc, #516]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2238      	movs	r2, #56	@ 0x38
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	2203      	movs	r2, #3
 8008f94:	4013      	ands	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d102      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x144>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d002      	beq.n	8008faa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d135      	bne.n	8009016 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008faa:	4b78      	ldr	r3, [pc, #480]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	2380      	movs	r3, #128	@ 0x80
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d005      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x162>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e256      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc2:	4b72      	ldr	r3, [pc, #456]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	4a74      	ldr	r2, [pc, #464]	@ (8009198 <HAL_RCC_OscConfig+0x338>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	0019      	movs	r1, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	021a      	lsls	r2, r3, #8
 8008fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d112      	bne.n	8009004 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008fde:	4b6b      	ldr	r3, [pc, #428]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800919c <HAL_RCC_OscConfig+0x33c>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	0019      	movs	r1, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	4b67      	ldr	r3, [pc, #412]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008ff2:	4b66      	ldr	r3, [pc, #408]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	0adb      	lsrs	r3, r3, #11
 8008ff8:	2207      	movs	r2, #7
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	4a68      	ldr	r2, [pc, #416]	@ (80091a0 <HAL_RCC_OscConfig+0x340>)
 8008ffe:	40da      	lsrs	r2, r3
 8009000:	4b68      	ldr	r3, [pc, #416]	@ (80091a4 <HAL_RCC_OscConfig+0x344>)
 8009002:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009004:	4b68      	ldr	r3, [pc, #416]	@ (80091a8 <HAL_RCC_OscConfig+0x348>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	0018      	movs	r0, r3
 800900a:	f7fd fa49 	bl	80064a0 <HAL_InitTick>
 800900e:	1e03      	subs	r3, r0, #0
 8009010:	d051      	beq.n	80090b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e22c      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d030      	beq.n	8009080 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800901e:	4b5b      	ldr	r3, [pc, #364]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a5e      	ldr	r2, [pc, #376]	@ (800919c <HAL_RCC_OscConfig+0x33c>)
 8009024:	4013      	ands	r3, r2
 8009026:	0019      	movs	r1, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691a      	ldr	r2, [r3, #16]
 800902c:	4b57      	ldr	r3, [pc, #348]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 800902e:	430a      	orrs	r2, r1
 8009030:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009032:	4b56      	ldr	r3, [pc, #344]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	4b55      	ldr	r3, [pc, #340]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009038:	2180      	movs	r1, #128	@ 0x80
 800903a:	0049      	lsls	r1, r1, #1
 800903c:	430a      	orrs	r2, r1
 800903e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7fd fa8a 	bl	8006558 <HAL_GetTick>
 8009044:	0003      	movs	r3, r0
 8009046:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009048:	e008      	b.n	800905c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800904a:	f7fd fa85 	bl	8006558 <HAL_GetTick>
 800904e:	0002      	movs	r2, r0
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	2b02      	cmp	r3, #2
 8009056:	d901      	bls.n	800905c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e209      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800905c:	4b4b      	ldr	r3, [pc, #300]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	2380      	movs	r3, #128	@ 0x80
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4013      	ands	r3, r2
 8009066:	d0f0      	beq.n	800904a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009068:	4b48      	ldr	r3, [pc, #288]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4a4a      	ldr	r2, [pc, #296]	@ (8009198 <HAL_RCC_OscConfig+0x338>)
 800906e:	4013      	ands	r3, r2
 8009070:	0019      	movs	r1, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	021a      	lsls	r2, r3, #8
 8009078:	4b44      	ldr	r3, [pc, #272]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 800907a:	430a      	orrs	r2, r1
 800907c:	605a      	str	r2, [r3, #4]
 800907e:	e01b      	b.n	80090b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009080:	4b42      	ldr	r3, [pc, #264]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b41      	ldr	r3, [pc, #260]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009086:	4949      	ldr	r1, [pc, #292]	@ (80091ac <HAL_RCC_OscConfig+0x34c>)
 8009088:	400a      	ands	r2, r1
 800908a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908c:	f7fd fa64 	bl	8006558 <HAL_GetTick>
 8009090:	0003      	movs	r3, r0
 8009092:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009096:	f7fd fa5f 	bl	8006558 <HAL_GetTick>
 800909a:	0002      	movs	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e1e3      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090a8:	4b38      	ldr	r3, [pc, #224]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	2380      	movs	r3, #128	@ 0x80
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	4013      	ands	r3, r2
 80090b2:	d1f0      	bne.n	8009096 <HAL_RCC_OscConfig+0x236>
 80090b4:	e000      	b.n	80090b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2208      	movs	r2, #8
 80090be:	4013      	ands	r3, r2
 80090c0:	d047      	beq.n	8009152 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80090c2:	4b32      	ldr	r3, [pc, #200]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2238      	movs	r2, #56	@ 0x38
 80090c8:	4013      	ands	r3, r2
 80090ca:	2b18      	cmp	r3, #24
 80090cc:	d10a      	bne.n	80090e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80090ce:	4b2f      	ldr	r3, [pc, #188]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 80090d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090d2:	2202      	movs	r2, #2
 80090d4:	4013      	ands	r3, r2
 80090d6:	d03c      	beq.n	8009152 <HAL_RCC_OscConfig+0x2f2>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d138      	bne.n	8009152 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e1c5      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d019      	beq.n	8009120 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80090ec:	4b27      	ldr	r3, [pc, #156]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 80090ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80090f0:	4b26      	ldr	r3, [pc, #152]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 80090f2:	2101      	movs	r1, #1
 80090f4:	430a      	orrs	r2, r1
 80090f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f8:	f7fd fa2e 	bl	8006558 <HAL_GetTick>
 80090fc:	0003      	movs	r3, r0
 80090fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009100:	e008      	b.n	8009114 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009102:	f7fd fa29 	bl	8006558 <HAL_GetTick>
 8009106:	0002      	movs	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b02      	cmp	r3, #2
 800910e:	d901      	bls.n	8009114 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e1ad      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009114:	4b1d      	ldr	r3, [pc, #116]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009118:	2202      	movs	r2, #2
 800911a:	4013      	ands	r3, r2
 800911c:	d0f1      	beq.n	8009102 <HAL_RCC_OscConfig+0x2a2>
 800911e:	e018      	b.n	8009152 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009120:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009122:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009124:	4b19      	ldr	r3, [pc, #100]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009126:	2101      	movs	r1, #1
 8009128:	438a      	bics	r2, r1
 800912a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800912c:	f7fd fa14 	bl	8006558 <HAL_GetTick>
 8009130:	0003      	movs	r3, r0
 8009132:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009134:	e008      	b.n	8009148 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009136:	f7fd fa0f 	bl	8006558 <HAL_GetTick>
 800913a:	0002      	movs	r2, r0
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e193      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009148:	4b10      	ldr	r3, [pc, #64]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 800914a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800914c:	2202      	movs	r2, #2
 800914e:	4013      	ands	r3, r2
 8009150:	d1f1      	bne.n	8009136 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2204      	movs	r2, #4
 8009158:	4013      	ands	r3, r2
 800915a:	d100      	bne.n	800915e <HAL_RCC_OscConfig+0x2fe>
 800915c:	e0c6      	b.n	80092ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800915e:	231f      	movs	r3, #31
 8009160:	18fb      	adds	r3, r7, r3
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009166:	4b09      	ldr	r3, [pc, #36]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2238      	movs	r2, #56	@ 0x38
 800916c:	4013      	ands	r3, r2
 800916e:	2b20      	cmp	r3, #32
 8009170:	d11e      	bne.n	80091b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009172:	4b06      	ldr	r3, [pc, #24]	@ (800918c <HAL_RCC_OscConfig+0x32c>)
 8009174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009176:	2202      	movs	r2, #2
 8009178:	4013      	ands	r3, r2
 800917a:	d100      	bne.n	800917e <HAL_RCC_OscConfig+0x31e>
 800917c:	e0b6      	b.n	80092ec <HAL_RCC_OscConfig+0x48c>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d000      	beq.n	8009188 <HAL_RCC_OscConfig+0x328>
 8009186:	e0b1      	b.n	80092ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e171      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
 800918c:	40021000 	.word	0x40021000
 8009190:	fffeffff 	.word	0xfffeffff
 8009194:	fffbffff 	.word	0xfffbffff
 8009198:	ffff80ff 	.word	0xffff80ff
 800919c:	ffffc7ff 	.word	0xffffc7ff
 80091a0:	00f42400 	.word	0x00f42400
 80091a4:	2000044c 	.word	0x2000044c
 80091a8:	20000450 	.word	0x20000450
 80091ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091b0:	4bb1      	ldr	r3, [pc, #708]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80091b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091b4:	2380      	movs	r3, #128	@ 0x80
 80091b6:	055b      	lsls	r3, r3, #21
 80091b8:	4013      	ands	r3, r2
 80091ba:	d101      	bne.n	80091c0 <HAL_RCC_OscConfig+0x360>
 80091bc:	2301      	movs	r3, #1
 80091be:	e000      	b.n	80091c2 <HAL_RCC_OscConfig+0x362>
 80091c0:	2300      	movs	r3, #0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d011      	beq.n	80091ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80091c6:	4bac      	ldr	r3, [pc, #688]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80091c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ca:	4bab      	ldr	r3, [pc, #684]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80091cc:	2180      	movs	r1, #128	@ 0x80
 80091ce:	0549      	lsls	r1, r1, #21
 80091d0:	430a      	orrs	r2, r1
 80091d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091d4:	4ba8      	ldr	r3, [pc, #672]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80091d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091d8:	2380      	movs	r3, #128	@ 0x80
 80091da:	055b      	lsls	r3, r3, #21
 80091dc:	4013      	ands	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80091e2:	231f      	movs	r3, #31
 80091e4:	18fb      	adds	r3, r7, r3
 80091e6:	2201      	movs	r2, #1
 80091e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091ea:	4ba4      	ldr	r3, [pc, #656]	@ (800947c <HAL_RCC_OscConfig+0x61c>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	2380      	movs	r3, #128	@ 0x80
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	4013      	ands	r3, r2
 80091f4:	d11a      	bne.n	800922c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091f6:	4ba1      	ldr	r3, [pc, #644]	@ (800947c <HAL_RCC_OscConfig+0x61c>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4ba0      	ldr	r3, [pc, #640]	@ (800947c <HAL_RCC_OscConfig+0x61c>)
 80091fc:	2180      	movs	r1, #128	@ 0x80
 80091fe:	0049      	lsls	r1, r1, #1
 8009200:	430a      	orrs	r2, r1
 8009202:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009204:	f7fd f9a8 	bl	8006558 <HAL_GetTick>
 8009208:	0003      	movs	r3, r0
 800920a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920e:	f7fd f9a3 	bl	8006558 <HAL_GetTick>
 8009212:	0002      	movs	r2, r0
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e127      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009220:	4b96      	ldr	r3, [pc, #600]	@ (800947c <HAL_RCC_OscConfig+0x61c>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	2380      	movs	r3, #128	@ 0x80
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	4013      	ands	r3, r2
 800922a:	d0f0      	beq.n	800920e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d106      	bne.n	8009242 <HAL_RCC_OscConfig+0x3e2>
 8009234:	4b90      	ldr	r3, [pc, #576]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009238:	4b8f      	ldr	r3, [pc, #572]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800923a:	2101      	movs	r1, #1
 800923c:	430a      	orrs	r2, r1
 800923e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009240:	e01c      	b.n	800927c <HAL_RCC_OscConfig+0x41c>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	2b05      	cmp	r3, #5
 8009248:	d10c      	bne.n	8009264 <HAL_RCC_OscConfig+0x404>
 800924a:	4b8b      	ldr	r3, [pc, #556]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800924c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800924e:	4b8a      	ldr	r3, [pc, #552]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009250:	2104      	movs	r1, #4
 8009252:	430a      	orrs	r2, r1
 8009254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009256:	4b88      	ldr	r3, [pc, #544]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009258:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800925a:	4b87      	ldr	r3, [pc, #540]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800925c:	2101      	movs	r1, #1
 800925e:	430a      	orrs	r2, r1
 8009260:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009262:	e00b      	b.n	800927c <HAL_RCC_OscConfig+0x41c>
 8009264:	4b84      	ldr	r3, [pc, #528]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009268:	4b83      	ldr	r3, [pc, #524]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800926a:	2101      	movs	r1, #1
 800926c:	438a      	bics	r2, r1
 800926e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009270:	4b81      	ldr	r3, [pc, #516]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009272:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009274:	4b80      	ldr	r3, [pc, #512]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009276:	2104      	movs	r1, #4
 8009278:	438a      	bics	r2, r1
 800927a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d014      	beq.n	80092ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009284:	f7fd f968 	bl	8006558 <HAL_GetTick>
 8009288:	0003      	movs	r3, r0
 800928a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800928c:	e009      	b.n	80092a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800928e:	f7fd f963 	bl	8006558 <HAL_GetTick>
 8009292:	0002      	movs	r2, r0
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	4a79      	ldr	r2, [pc, #484]	@ (8009480 <HAL_RCC_OscConfig+0x620>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e0e6      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092a2:	4b75      	ldr	r3, [pc, #468]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80092a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a6:	2202      	movs	r2, #2
 80092a8:	4013      	ands	r3, r2
 80092aa:	d0f0      	beq.n	800928e <HAL_RCC_OscConfig+0x42e>
 80092ac:	e013      	b.n	80092d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ae:	f7fd f953 	bl	8006558 <HAL_GetTick>
 80092b2:	0003      	movs	r3, r0
 80092b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092b6:	e009      	b.n	80092cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092b8:	f7fd f94e 	bl	8006558 <HAL_GetTick>
 80092bc:	0002      	movs	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	4a6f      	ldr	r2, [pc, #444]	@ (8009480 <HAL_RCC_OscConfig+0x620>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e0d1      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092cc:	4b6a      	ldr	r3, [pc, #424]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80092ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d0:	2202      	movs	r2, #2
 80092d2:	4013      	ands	r3, r2
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80092d6:	231f      	movs	r3, #31
 80092d8:	18fb      	adds	r3, r7, r3
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d105      	bne.n	80092ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80092e0:	4b65      	ldr	r3, [pc, #404]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80092e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092e4:	4b64      	ldr	r3, [pc, #400]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80092e6:	4967      	ldr	r1, [pc, #412]	@ (8009484 <HAL_RCC_OscConfig+0x624>)
 80092e8:	400a      	ands	r2, r1
 80092ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d100      	bne.n	80092f6 <HAL_RCC_OscConfig+0x496>
 80092f4:	e0bb      	b.n	800946e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092f6:	4b60      	ldr	r3, [pc, #384]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2238      	movs	r2, #56	@ 0x38
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b10      	cmp	r3, #16
 8009300:	d100      	bne.n	8009304 <HAL_RCC_OscConfig+0x4a4>
 8009302:	e07b      	b.n	80093fc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d156      	bne.n	80093ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800930c:	4b5a      	ldr	r3, [pc, #360]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	4b59      	ldr	r3, [pc, #356]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009312:	495d      	ldr	r1, [pc, #372]	@ (8009488 <HAL_RCC_OscConfig+0x628>)
 8009314:	400a      	ands	r2, r1
 8009316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009318:	f7fd f91e 	bl	8006558 <HAL_GetTick>
 800931c:	0003      	movs	r3, r0
 800931e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009320:	e008      	b.n	8009334 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009322:	f7fd f919 	bl	8006558 <HAL_GetTick>
 8009326:	0002      	movs	r2, r0
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	2b02      	cmp	r3, #2
 800932e:	d901      	bls.n	8009334 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e09d      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009334:	4b50      	ldr	r3, [pc, #320]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	2380      	movs	r3, #128	@ 0x80
 800933a:	049b      	lsls	r3, r3, #18
 800933c:	4013      	ands	r3, r2
 800933e:	d1f0      	bne.n	8009322 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009340:	4b4d      	ldr	r3, [pc, #308]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	4a51      	ldr	r2, [pc, #324]	@ (800948c <HAL_RCC_OscConfig+0x62c>)
 8009346:	4013      	ands	r3, r2
 8009348:	0019      	movs	r1, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1a      	ldr	r2, [r3, #32]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800936c:	431a      	orrs	r2, r3
 800936e:	4b42      	ldr	r3, [pc, #264]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009370:	430a      	orrs	r2, r1
 8009372:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009374:	4b40      	ldr	r3, [pc, #256]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	4b3f      	ldr	r3, [pc, #252]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800937a:	2180      	movs	r1, #128	@ 0x80
 800937c:	0449      	lsls	r1, r1, #17
 800937e:	430a      	orrs	r2, r1
 8009380:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009382:	4b3d      	ldr	r3, [pc, #244]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	4b3c      	ldr	r3, [pc, #240]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 8009388:	2180      	movs	r1, #128	@ 0x80
 800938a:	0549      	lsls	r1, r1, #21
 800938c:	430a      	orrs	r2, r1
 800938e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009390:	f7fd f8e2 	bl	8006558 <HAL_GetTick>
 8009394:	0003      	movs	r3, r0
 8009396:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009398:	e008      	b.n	80093ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800939a:	f7fd f8dd 	bl	8006558 <HAL_GetTick>
 800939e:	0002      	movs	r2, r0
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d901      	bls.n	80093ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e061      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ac:	4b32      	ldr	r3, [pc, #200]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	049b      	lsls	r3, r3, #18
 80093b4:	4013      	ands	r3, r2
 80093b6:	d0f0      	beq.n	800939a <HAL_RCC_OscConfig+0x53a>
 80093b8:	e059      	b.n	800946e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b2e      	ldr	r3, [pc, #184]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80093c0:	4931      	ldr	r1, [pc, #196]	@ (8009488 <HAL_RCC_OscConfig+0x628>)
 80093c2:	400a      	ands	r2, r1
 80093c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c6:	f7fd f8c7 	bl	8006558 <HAL_GetTick>
 80093ca:	0003      	movs	r3, r0
 80093cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093ce:	e008      	b.n	80093e2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093d0:	f7fd f8c2 	bl	8006558 <HAL_GetTick>
 80093d4:	0002      	movs	r2, r0
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e046      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093e2:	4b25      	ldr	r3, [pc, #148]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	2380      	movs	r3, #128	@ 0x80
 80093e8:	049b      	lsls	r3, r3, #18
 80093ea:	4013      	ands	r3, r2
 80093ec:	d1f0      	bne.n	80093d0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80093ee:	4b22      	ldr	r3, [pc, #136]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	4b21      	ldr	r3, [pc, #132]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 80093f4:	4926      	ldr	r1, [pc, #152]	@ (8009490 <HAL_RCC_OscConfig+0x630>)
 80093f6:	400a      	ands	r2, r1
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	e038      	b.n	800946e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e033      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009408:	4b1b      	ldr	r3, [pc, #108]	@ (8009478 <HAL_RCC_OscConfig+0x618>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2203      	movs	r2, #3
 8009412:	401a      	ands	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	429a      	cmp	r2, r3
 800941a:	d126      	bne.n	800946a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2270      	movs	r2, #112	@ 0x70
 8009420:	401a      	ands	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009426:	429a      	cmp	r2, r3
 8009428:	d11f      	bne.n	800946a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	23fe      	movs	r3, #254	@ 0xfe
 800942e:	01db      	lsls	r3, r3, #7
 8009430:	401a      	ands	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009436:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009438:	429a      	cmp	r2, r3
 800943a:	d116      	bne.n	800946a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	23f8      	movs	r3, #248	@ 0xf8
 8009440:	039b      	lsls	r3, r3, #14
 8009442:	401a      	ands	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009448:	429a      	cmp	r2, r3
 800944a:	d10e      	bne.n	800946a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	23e0      	movs	r3, #224	@ 0xe0
 8009450:	051b      	lsls	r3, r3, #20
 8009452:	401a      	ands	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009458:	429a      	cmp	r2, r3
 800945a:	d106      	bne.n	800946a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	0f5b      	lsrs	r3, r3, #29
 8009460:	075a      	lsls	r2, r3, #29
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009466:	429a      	cmp	r2, r3
 8009468:	d001      	beq.n	800946e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	0018      	movs	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	b008      	add	sp, #32
 8009476:	bd80      	pop	{r7, pc}
 8009478:	40021000 	.word	0x40021000
 800947c:	40007000 	.word	0x40007000
 8009480:	00001388 	.word	0x00001388
 8009484:	efffffff 	.word	0xefffffff
 8009488:	feffffff 	.word	0xfeffffff
 800948c:	11c1808c 	.word	0x11c1808c
 8009490:	eefefffc 	.word	0xeefefffc

08009494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e0e9      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094a8:	4b76      	ldr	r3, [pc, #472]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2207      	movs	r2, #7
 80094ae:	4013      	ands	r3, r2
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d91e      	bls.n	80094f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094b6:	4b73      	ldr	r3, [pc, #460]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2207      	movs	r2, #7
 80094bc:	4393      	bics	r3, r2
 80094be:	0019      	movs	r1, r3
 80094c0:	4b70      	ldr	r3, [pc, #448]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80094c8:	f7fd f846 	bl	8006558 <HAL_GetTick>
 80094cc:	0003      	movs	r3, r0
 80094ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80094d0:	e009      	b.n	80094e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094d2:	f7fd f841 	bl	8006558 <HAL_GetTick>
 80094d6:	0002      	movs	r2, r0
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	4a6a      	ldr	r2, [pc, #424]	@ (8009688 <HAL_RCC_ClockConfig+0x1f4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e0ca      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80094e6:	4b67      	ldr	r3, [pc, #412]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2207      	movs	r2, #7
 80094ec:	4013      	ands	r3, r2
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d1ee      	bne.n	80094d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2202      	movs	r2, #2
 80094fa:	4013      	ands	r3, r2
 80094fc:	d015      	beq.n	800952a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2204      	movs	r2, #4
 8009504:	4013      	ands	r3, r2
 8009506:	d006      	beq.n	8009516 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009508:	4b60      	ldr	r3, [pc, #384]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	4b5f      	ldr	r3, [pc, #380]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 800950e:	21e0      	movs	r1, #224	@ 0xe0
 8009510:	01c9      	lsls	r1, r1, #7
 8009512:	430a      	orrs	r2, r1
 8009514:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009516:	4b5d      	ldr	r3, [pc, #372]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	4a5d      	ldr	r2, [pc, #372]	@ (8009690 <HAL_RCC_ClockConfig+0x1fc>)
 800951c:	4013      	ands	r3, r2
 800951e:	0019      	movs	r1, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	4b59      	ldr	r3, [pc, #356]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 8009526:	430a      	orrs	r2, r1
 8009528:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2201      	movs	r2, #1
 8009530:	4013      	ands	r3, r2
 8009532:	d057      	beq.n	80095e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d107      	bne.n	800954c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800953c:	4b53      	ldr	r3, [pc, #332]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	2380      	movs	r3, #128	@ 0x80
 8009542:	029b      	lsls	r3, r3, #10
 8009544:	4013      	ands	r3, r2
 8009546:	d12b      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e097      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d107      	bne.n	8009564 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009554:	4b4d      	ldr	r3, [pc, #308]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	2380      	movs	r3, #128	@ 0x80
 800955a:	049b      	lsls	r3, r3, #18
 800955c:	4013      	ands	r3, r2
 800955e:	d11f      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e08b      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d107      	bne.n	800957c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800956c:	4b47      	ldr	r3, [pc, #284]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	2380      	movs	r3, #128	@ 0x80
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	4013      	ands	r3, r2
 8009576:	d113      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e07f      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b03      	cmp	r3, #3
 8009582:	d106      	bne.n	8009592 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009584:	4b41      	ldr	r3, [pc, #260]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 8009586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009588:	2202      	movs	r2, #2
 800958a:	4013      	ands	r3, r2
 800958c:	d108      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e074      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009592:	4b3e      	ldr	r3, [pc, #248]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 8009594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009596:	2202      	movs	r2, #2
 8009598:	4013      	ands	r3, r2
 800959a:	d101      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e06d      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095a0:	4b3a      	ldr	r3, [pc, #232]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	2207      	movs	r2, #7
 80095a6:	4393      	bics	r3, r2
 80095a8:	0019      	movs	r1, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	4b37      	ldr	r3, [pc, #220]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 80095b0:	430a      	orrs	r2, r1
 80095b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095b4:	f7fc ffd0 	bl	8006558 <HAL_GetTick>
 80095b8:	0003      	movs	r3, r0
 80095ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095bc:	e009      	b.n	80095d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095be:	f7fc ffcb 	bl	8006558 <HAL_GetTick>
 80095c2:	0002      	movs	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	4a2f      	ldr	r2, [pc, #188]	@ (8009688 <HAL_RCC_ClockConfig+0x1f4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e054      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095d2:	4b2e      	ldr	r3, [pc, #184]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2238      	movs	r2, #56	@ 0x38
 80095d8:	401a      	ands	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d1ec      	bne.n	80095be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095e4:	4b27      	ldr	r3, [pc, #156]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2207      	movs	r2, #7
 80095ea:	4013      	ands	r3, r2
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d21e      	bcs.n	8009630 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095f2:	4b24      	ldr	r3, [pc, #144]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2207      	movs	r2, #7
 80095f8:	4393      	bics	r3, r2
 80095fa:	0019      	movs	r1, r3
 80095fc:	4b21      	ldr	r3, [pc, #132]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009604:	f7fc ffa8 	bl	8006558 <HAL_GetTick>
 8009608:	0003      	movs	r3, r0
 800960a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800960c:	e009      	b.n	8009622 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800960e:	f7fc ffa3 	bl	8006558 <HAL_GetTick>
 8009612:	0002      	movs	r2, r0
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	4a1b      	ldr	r2, [pc, #108]	@ (8009688 <HAL_RCC_ClockConfig+0x1f4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d901      	bls.n	8009622 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e02c      	b.n	800967c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009622:	4b18      	ldr	r3, [pc, #96]	@ (8009684 <HAL_RCC_ClockConfig+0x1f0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2207      	movs	r2, #7
 8009628:	4013      	ands	r3, r2
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d1ee      	bne.n	800960e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2204      	movs	r2, #4
 8009636:	4013      	ands	r3, r2
 8009638:	d009      	beq.n	800964e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800963a:	4b14      	ldr	r3, [pc, #80]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	4a15      	ldr	r2, [pc, #84]	@ (8009694 <HAL_RCC_ClockConfig+0x200>)
 8009640:	4013      	ands	r3, r2
 8009642:	0019      	movs	r1, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	4b10      	ldr	r3, [pc, #64]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 800964a:	430a      	orrs	r2, r1
 800964c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800964e:	f000 f829 	bl	80096a4 <HAL_RCC_GetSysClockFreq>
 8009652:	0001      	movs	r1, r0
 8009654:	4b0d      	ldr	r3, [pc, #52]	@ (800968c <HAL_RCC_ClockConfig+0x1f8>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	0a1b      	lsrs	r3, r3, #8
 800965a:	220f      	movs	r2, #15
 800965c:	401a      	ands	r2, r3
 800965e:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <HAL_RCC_ClockConfig+0x204>)
 8009660:	0092      	lsls	r2, r2, #2
 8009662:	58d3      	ldr	r3, [r2, r3]
 8009664:	221f      	movs	r2, #31
 8009666:	4013      	ands	r3, r2
 8009668:	000a      	movs	r2, r1
 800966a:	40da      	lsrs	r2, r3
 800966c:	4b0b      	ldr	r3, [pc, #44]	@ (800969c <HAL_RCC_ClockConfig+0x208>)
 800966e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009670:	4b0b      	ldr	r3, [pc, #44]	@ (80096a0 <HAL_RCC_ClockConfig+0x20c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	0018      	movs	r0, r3
 8009676:	f7fc ff13 	bl	80064a0 <HAL_InitTick>
 800967a:	0003      	movs	r3, r0
}
 800967c:	0018      	movs	r0, r3
 800967e:	46bd      	mov	sp, r7
 8009680:	b004      	add	sp, #16
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40022000 	.word	0x40022000
 8009688:	00001388 	.word	0x00001388
 800968c:	40021000 	.word	0x40021000
 8009690:	fffff0ff 	.word	0xfffff0ff
 8009694:	ffff8fff 	.word	0xffff8fff
 8009698:	0800e0b0 	.word	0x0800e0b0
 800969c:	2000044c 	.word	0x2000044c
 80096a0:	20000450 	.word	0x20000450

080096a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80096aa:	4b3c      	ldr	r3, [pc, #240]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	2238      	movs	r2, #56	@ 0x38
 80096b0:	4013      	ands	r3, r2
 80096b2:	d10f      	bne.n	80096d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80096b4:	4b39      	ldr	r3, [pc, #228]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	0adb      	lsrs	r3, r3, #11
 80096ba:	2207      	movs	r2, #7
 80096bc:	4013      	ands	r3, r2
 80096be:	2201      	movs	r2, #1
 80096c0:	409a      	lsls	r2, r3
 80096c2:	0013      	movs	r3, r2
 80096c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	4835      	ldr	r0, [pc, #212]	@ (80097a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80096ca:	f7f6 fd1b 	bl	8000104 <__udivsi3>
 80096ce:	0003      	movs	r3, r0
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	e05d      	b.n	8009790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80096d4:	4b31      	ldr	r3, [pc, #196]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2238      	movs	r2, #56	@ 0x38
 80096da:	4013      	ands	r3, r2
 80096dc:	2b08      	cmp	r3, #8
 80096de:	d102      	bne.n	80096e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80096e0:	4b30      	ldr	r3, [pc, #192]	@ (80097a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80096e2:	613b      	str	r3, [r7, #16]
 80096e4:	e054      	b.n	8009790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096e6:	4b2d      	ldr	r3, [pc, #180]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2238      	movs	r2, #56	@ 0x38
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d138      	bne.n	8009764 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80096f2:	4b2a      	ldr	r3, [pc, #168]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	2203      	movs	r2, #3
 80096f8:	4013      	ands	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80096fc:	4b27      	ldr	r3, [pc, #156]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	091b      	lsrs	r3, r3, #4
 8009702:	2207      	movs	r2, #7
 8009704:	4013      	ands	r3, r2
 8009706:	3301      	adds	r3, #1
 8009708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d10d      	bne.n	800972c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	4824      	ldr	r0, [pc, #144]	@ (80097a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8009714:	f7f6 fcf6 	bl	8000104 <__udivsi3>
 8009718:	0003      	movs	r3, r0
 800971a:	0019      	movs	r1, r3
 800971c:	4b1f      	ldr	r3, [pc, #124]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	0a1b      	lsrs	r3, r3, #8
 8009722:	227f      	movs	r2, #127	@ 0x7f
 8009724:	4013      	ands	r3, r2
 8009726:	434b      	muls	r3, r1
 8009728:	617b      	str	r3, [r7, #20]
        break;
 800972a:	e00d      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	481c      	ldr	r0, [pc, #112]	@ (80097a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009730:	f7f6 fce8 	bl	8000104 <__udivsi3>
 8009734:	0003      	movs	r3, r0
 8009736:	0019      	movs	r1, r3
 8009738:	4b18      	ldr	r3, [pc, #96]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	0a1b      	lsrs	r3, r3, #8
 800973e:	227f      	movs	r2, #127	@ 0x7f
 8009740:	4013      	ands	r3, r2
 8009742:	434b      	muls	r3, r1
 8009744:	617b      	str	r3, [r7, #20]
        break;
 8009746:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009748:	4b14      	ldr	r3, [pc, #80]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	0f5b      	lsrs	r3, r3, #29
 800974e:	2207      	movs	r2, #7
 8009750:	4013      	ands	r3, r2
 8009752:	3301      	adds	r3, #1
 8009754:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	6978      	ldr	r0, [r7, #20]
 800975a:	f7f6 fcd3 	bl	8000104 <__udivsi3>
 800975e:	0003      	movs	r3, r0
 8009760:	613b      	str	r3, [r7, #16]
 8009762:	e015      	b.n	8009790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009764:	4b0d      	ldr	r3, [pc, #52]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2238      	movs	r2, #56	@ 0x38
 800976a:	4013      	ands	r3, r2
 800976c:	2b20      	cmp	r3, #32
 800976e:	d103      	bne.n	8009778 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009770:	2380      	movs	r3, #128	@ 0x80
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e00b      	b.n	8009790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009778:	4b08      	ldr	r3, [pc, #32]	@ (800979c <HAL_RCC_GetSysClockFreq+0xf8>)
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	2238      	movs	r2, #56	@ 0x38
 800977e:	4013      	ands	r3, r2
 8009780:	2b18      	cmp	r3, #24
 8009782:	d103      	bne.n	800978c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009784:	23fa      	movs	r3, #250	@ 0xfa
 8009786:	01db      	lsls	r3, r3, #7
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	e001      	b.n	8009790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009790:	693b      	ldr	r3, [r7, #16]
}
 8009792:	0018      	movs	r0, r3
 8009794:	46bd      	mov	sp, r7
 8009796:	b006      	add	sp, #24
 8009798:	bd80      	pop	{r7, pc}
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	40021000 	.word	0x40021000
 80097a0:	00f42400 	.word	0x00f42400
 80097a4:	007a1200 	.word	0x007a1200

080097a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097ac:	4b02      	ldr	r3, [pc, #8]	@ (80097b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80097ae:	681b      	ldr	r3, [r3, #0]
}
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	2000044c 	.word	0x2000044c

080097bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097bc:	b5b0      	push	{r4, r5, r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80097c0:	f7ff fff2 	bl	80097a8 <HAL_RCC_GetHCLKFreq>
 80097c4:	0004      	movs	r4, r0
 80097c6:	f7ff fb3f 	bl	8008e48 <LL_RCC_GetAPB1Prescaler>
 80097ca:	0003      	movs	r3, r0
 80097cc:	0b1a      	lsrs	r2, r3, #12
 80097ce:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097d0:	0092      	lsls	r2, r2, #2
 80097d2:	58d3      	ldr	r3, [r2, r3]
 80097d4:	221f      	movs	r2, #31
 80097d6:	4013      	ands	r3, r2
 80097d8:	40dc      	lsrs	r4, r3
 80097da:	0023      	movs	r3, r4
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	bdb0      	pop	{r4, r5, r7, pc}
 80097e2:	46c0      	nop			@ (mov r8, r8)
 80097e4:	0800e0f0 	.word	0x0800e0f0

080097e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80097f0:	2313      	movs	r3, #19
 80097f2:	18fb      	adds	r3, r7, r3
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097f8:	2312      	movs	r3, #18
 80097fa:	18fb      	adds	r3, r7, r3
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	2380      	movs	r3, #128	@ 0x80
 8009806:	029b      	lsls	r3, r3, #10
 8009808:	4013      	ands	r3, r2
 800980a:	d100      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800980c:	e0a3      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800980e:	2011      	movs	r0, #17
 8009810:	183b      	adds	r3, r7, r0
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009816:	4ba5      	ldr	r3, [pc, #660]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800981a:	2380      	movs	r3, #128	@ 0x80
 800981c:	055b      	lsls	r3, r3, #21
 800981e:	4013      	ands	r3, r2
 8009820:	d110      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009822:	4ba2      	ldr	r3, [pc, #648]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009826:	4ba1      	ldr	r3, [pc, #644]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009828:	2180      	movs	r1, #128	@ 0x80
 800982a:	0549      	lsls	r1, r1, #21
 800982c:	430a      	orrs	r2, r1
 800982e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009830:	4b9e      	ldr	r3, [pc, #632]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009834:	2380      	movs	r3, #128	@ 0x80
 8009836:	055b      	lsls	r3, r3, #21
 8009838:	4013      	ands	r3, r2
 800983a:	60bb      	str	r3, [r7, #8]
 800983c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800983e:	183b      	adds	r3, r7, r0
 8009840:	2201      	movs	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009844:	4b9a      	ldr	r3, [pc, #616]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b99      	ldr	r3, [pc, #612]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800984a:	2180      	movs	r1, #128	@ 0x80
 800984c:	0049      	lsls	r1, r1, #1
 800984e:	430a      	orrs	r2, r1
 8009850:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009852:	f7fc fe81 	bl	8006558 <HAL_GetTick>
 8009856:	0003      	movs	r3, r0
 8009858:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800985a:	e00b      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800985c:	f7fc fe7c 	bl	8006558 <HAL_GetTick>
 8009860:	0002      	movs	r2, r0
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d904      	bls.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800986a:	2313      	movs	r3, #19
 800986c:	18fb      	adds	r3, r7, r3
 800986e:	2203      	movs	r2, #3
 8009870:	701a      	strb	r2, [r3, #0]
        break;
 8009872:	e005      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009874:	4b8e      	ldr	r3, [pc, #568]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	2380      	movs	r3, #128	@ 0x80
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	4013      	ands	r3, r2
 800987e:	d0ed      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009880:	2313      	movs	r3, #19
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d154      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800988a:	4b88      	ldr	r3, [pc, #544]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800988c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800988e:	23c0      	movs	r3, #192	@ 0xc0
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4013      	ands	r3, r2
 8009894:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d019      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d014      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80098a6:	4b81      	ldr	r3, [pc, #516]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098aa:	4a82      	ldr	r2, [pc, #520]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098b0:	4b7e      	ldr	r3, [pc, #504]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098b4:	4b7d      	ldr	r3, [pc, #500]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098b6:	2180      	movs	r1, #128	@ 0x80
 80098b8:	0249      	lsls	r1, r1, #9
 80098ba:	430a      	orrs	r2, r1
 80098bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098be:	4b7b      	ldr	r3, [pc, #492]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098c2:	4b7a      	ldr	r3, [pc, #488]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098c4:	497c      	ldr	r1, [pc, #496]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80098c6:	400a      	ands	r2, r1
 80098c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098ca:	4b78      	ldr	r3, [pc, #480]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2201      	movs	r2, #1
 80098d4:	4013      	ands	r3, r2
 80098d6:	d016      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d8:	f7fc fe3e 	bl	8006558 <HAL_GetTick>
 80098dc:	0003      	movs	r3, r0
 80098de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e0:	e00c      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098e2:	f7fc fe39 	bl	8006558 <HAL_GetTick>
 80098e6:	0002      	movs	r2, r0
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	4a73      	ldr	r2, [pc, #460]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d904      	bls.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80098f2:	2313      	movs	r3, #19
 80098f4:	18fb      	adds	r3, r7, r3
 80098f6:	2203      	movs	r2, #3
 80098f8:	701a      	strb	r2, [r3, #0]
            break;
 80098fa:	e004      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098fc:	4b6b      	ldr	r3, [pc, #428]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009900:	2202      	movs	r2, #2
 8009902:	4013      	ands	r3, r2
 8009904:	d0ed      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009906:	2313      	movs	r3, #19
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009910:	4b66      	ldr	r3, [pc, #408]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009914:	4a67      	ldr	r2, [pc, #412]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009916:	4013      	ands	r3, r2
 8009918:	0019      	movs	r1, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800991e:	4b63      	ldr	r3, [pc, #396]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009920:	430a      	orrs	r2, r1
 8009922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009924:	e00c      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009926:	2312      	movs	r3, #18
 8009928:	18fb      	adds	r3, r7, r3
 800992a:	2213      	movs	r2, #19
 800992c:	18ba      	adds	r2, r7, r2
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	701a      	strb	r2, [r3, #0]
 8009932:	e005      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009934:	2312      	movs	r3, #18
 8009936:	18fb      	adds	r3, r7, r3
 8009938:	2213      	movs	r2, #19
 800993a:	18ba      	adds	r2, r7, r2
 800993c:	7812      	ldrb	r2, [r2, #0]
 800993e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009940:	2311      	movs	r3, #17
 8009942:	18fb      	adds	r3, r7, r3
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d105      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800994a:	4b58      	ldr	r3, [pc, #352]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800994c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800994e:	4b57      	ldr	r3, [pc, #348]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009950:	495b      	ldr	r1, [pc, #364]	@ (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009952:	400a      	ands	r2, r1
 8009954:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	4013      	ands	r3, r2
 800995e:	d009      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009960:	4b52      	ldr	r3, [pc, #328]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009964:	2203      	movs	r2, #3
 8009966:	4393      	bics	r3, r2
 8009968:	0019      	movs	r1, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	4b4f      	ldr	r3, [pc, #316]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009970:	430a      	orrs	r2, r1
 8009972:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2210      	movs	r2, #16
 800997a:	4013      	ands	r3, r2
 800997c:	d009      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800997e:	4b4b      	ldr	r3, [pc, #300]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	4a50      	ldr	r2, [pc, #320]	@ (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8009984:	4013      	ands	r3, r2
 8009986:	0019      	movs	r1, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	4b47      	ldr	r3, [pc, #284]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800998e:	430a      	orrs	r2, r1
 8009990:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	2380      	movs	r3, #128	@ 0x80
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4013      	ands	r3, r2
 800999c:	d009      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800999e:	4b43      	ldr	r3, [pc, #268]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	4a49      	ldr	r2, [pc, #292]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	0019      	movs	r1, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	695a      	ldr	r2, [r3, #20]
 80099ac:	4b3f      	ldr	r3, [pc, #252]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099ae:	430a      	orrs	r2, r1
 80099b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	2380      	movs	r3, #128	@ 0x80
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	4013      	ands	r3, r2
 80099bc:	d009      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80099be:	4b3b      	ldr	r3, [pc, #236]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c2:	4a42      	ldr	r2, [pc, #264]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	0019      	movs	r1, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	4b37      	ldr	r3, [pc, #220]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099ce:	430a      	orrs	r2, r1
 80099d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2220      	movs	r2, #32
 80099d8:	4013      	ands	r3, r2
 80099da:	d009      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099dc:	4b33      	ldr	r3, [pc, #204]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e0:	4a3b      	ldr	r2, [pc, #236]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80099e2:	4013      	ands	r3, r2
 80099e4:	0019      	movs	r1, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	4b30      	ldr	r3, [pc, #192]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099ec:	430a      	orrs	r2, r1
 80099ee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	2380      	movs	r3, #128	@ 0x80
 80099f6:	01db      	lsls	r3, r3, #7
 80099f8:	4013      	ands	r3, r2
 80099fa:	d015      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099fc:	4b2b      	ldr	r3, [pc, #172]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	0899      	lsrs	r1, r3, #2
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	69da      	ldr	r2, [r3, #28]
 8009a08:	4b28      	ldr	r3, [pc, #160]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	69da      	ldr	r2, [r3, #28]
 8009a12:	2380      	movs	r3, #128	@ 0x80
 8009a14:	05db      	lsls	r3, r3, #23
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d106      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009a1a:	4b24      	ldr	r3, [pc, #144]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	4b23      	ldr	r3, [pc, #140]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a20:	2180      	movs	r1, #128	@ 0x80
 8009a22:	0249      	lsls	r1, r1, #9
 8009a24:	430a      	orrs	r2, r1
 8009a26:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	2380      	movs	r3, #128	@ 0x80
 8009a2e:	039b      	lsls	r3, r3, #14
 8009a30:	4013      	ands	r3, r2
 8009a32:	d016      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009a34:	4b1d      	ldr	r3, [pc, #116]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a38:	4a26      	ldr	r2, [pc, #152]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	0019      	movs	r1, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1a      	ldr	r2, [r3, #32]
 8009a42:	4b1a      	ldr	r3, [pc, #104]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a44:	430a      	orrs	r2, r1
 8009a46:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1a      	ldr	r2, [r3, #32]
 8009a4c:	2380      	movs	r3, #128	@ 0x80
 8009a4e:	03db      	lsls	r3, r3, #15
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d106      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009a54:	4b15      	ldr	r3, [pc, #84]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	4b14      	ldr	r3, [pc, #80]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a5a:	2180      	movs	r1, #128	@ 0x80
 8009a5c:	0449      	lsls	r1, r1, #17
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	2380      	movs	r3, #128	@ 0x80
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	d016      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a72:	4a19      	ldr	r2, [pc, #100]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009a74:	4013      	ands	r3, r2
 8009a76:	0019      	movs	r1, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	2380      	movs	r3, #128	@ 0x80
 8009a88:	01db      	lsls	r3, r3, #7
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d106      	bne.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009a8e:	4b07      	ldr	r3, [pc, #28]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a94:	2180      	movs	r1, #128	@ 0x80
 8009a96:	0249      	lsls	r1, r1, #9
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009a9c:	2312      	movs	r3, #18
 8009a9e:	18fb      	adds	r3, r7, r3
 8009aa0:	781b      	ldrb	r3, [r3, #0]
}
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	b006      	add	sp, #24
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	46c0      	nop			@ (mov r8, r8)
 8009aac:	40021000 	.word	0x40021000
 8009ab0:	40007000 	.word	0x40007000
 8009ab4:	fffffcff 	.word	0xfffffcff
 8009ab8:	fffeffff 	.word	0xfffeffff
 8009abc:	00001388 	.word	0x00001388
 8009ac0:	efffffff 	.word	0xefffffff
 8009ac4:	fffff3ff 	.word	0xfffff3ff
 8009ac8:	fff3ffff 	.word	0xfff3ffff
 8009acc:	ffcfffff 	.word	0xffcfffff
 8009ad0:	ffffcfff 	.word	0xffffcfff
 8009ad4:	ffbfffff 	.word	0xffbfffff
 8009ad8:	ffff3fff 	.word	0xffff3fff

08009adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e056      	b.n	8009b9c <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	223d      	movs	r2, #61	@ 0x3d
 8009af2:	5c9b      	ldrb	r3, [r3, r2]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d113      	bne.n	8009b22 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	223c      	movs	r2, #60	@ 0x3c
 8009afe:	2100      	movs	r1, #0
 8009b00:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	0018      	movs	r0, r3
 8009b06:	f002 f8c5 	bl	800bc94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a23      	ldr	r2, [pc, #140]	@ (8009ba4 <HAL_TIM_Base_Init+0xc8>)
 8009b16:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	0010      	movs	r0, r2
 8009b20:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	223d      	movs	r2, #61	@ 0x3d
 8009b26:	2102      	movs	r1, #2
 8009b28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3304      	adds	r3, #4
 8009b32:	0019      	movs	r1, r3
 8009b34:	0010      	movs	r0, r2
 8009b36:	f001 fbaf 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2248      	movs	r2, #72	@ 0x48
 8009b3e:	2101      	movs	r1, #1
 8009b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	223e      	movs	r2, #62	@ 0x3e
 8009b46:	2101      	movs	r1, #1
 8009b48:	5499      	strb	r1, [r3, r2]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	223f      	movs	r2, #63	@ 0x3f
 8009b4e:	2101      	movs	r1, #1
 8009b50:	5499      	strb	r1, [r3, r2]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2240      	movs	r2, #64	@ 0x40
 8009b56:	2101      	movs	r1, #1
 8009b58:	5499      	strb	r1, [r3, r2]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2241      	movs	r2, #65	@ 0x41
 8009b5e:	2101      	movs	r1, #1
 8009b60:	5499      	strb	r1, [r3, r2]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2242      	movs	r2, #66	@ 0x42
 8009b66:	2101      	movs	r1, #1
 8009b68:	5499      	strb	r1, [r3, r2]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2243      	movs	r2, #67	@ 0x43
 8009b6e:	2101      	movs	r1, #1
 8009b70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2244      	movs	r2, #68	@ 0x44
 8009b76:	2101      	movs	r1, #1
 8009b78:	5499      	strb	r1, [r3, r2]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2245      	movs	r2, #69	@ 0x45
 8009b7e:	2101      	movs	r1, #1
 8009b80:	5499      	strb	r1, [r3, r2]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2246      	movs	r2, #70	@ 0x46
 8009b86:	2101      	movs	r1, #1
 8009b88:	5499      	strb	r1, [r3, r2]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2247      	movs	r2, #71	@ 0x47
 8009b8e:	2101      	movs	r1, #1
 8009b90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	223d      	movs	r2, #61	@ 0x3d
 8009b96:	2101      	movs	r1, #1
 8009b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	08005509 	.word	0x08005509

08009ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	223d      	movs	r2, #61	@ 0x3d
 8009bb4:	5c9b      	ldrb	r3, [r3, r2]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d001      	beq.n	8009bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e035      	b.n	8009c2c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	223d      	movs	r2, #61	@ 0x3d
 8009bc4:	2102      	movs	r1, #2
 8009bc6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a19      	ldr	r2, [pc, #100]	@ (8009c34 <HAL_TIM_Base_Start+0x8c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d00a      	beq.n	8009be8 <HAL_TIM_Base_Start+0x40>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	2380      	movs	r3, #128	@ 0x80
 8009bd8:	05db      	lsls	r3, r3, #23
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d004      	beq.n	8009be8 <HAL_TIM_Base_Start+0x40>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a15      	ldr	r2, [pc, #84]	@ (8009c38 <HAL_TIM_Base_Start+0x90>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d116      	bne.n	8009c16 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	4a13      	ldr	r2, [pc, #76]	@ (8009c3c <HAL_TIM_Base_Start+0x94>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b06      	cmp	r3, #6
 8009bf8:	d016      	beq.n	8009c28 <HAL_TIM_Base_Start+0x80>
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	2380      	movs	r3, #128	@ 0x80
 8009bfe:	025b      	lsls	r3, r3, #9
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d011      	beq.n	8009c28 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2101      	movs	r1, #1
 8009c10:	430a      	orrs	r2, r1
 8009c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c14:	e008      	b.n	8009c28 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2101      	movs	r1, #1
 8009c22:	430a      	orrs	r2, r1
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	e000      	b.n	8009c2a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c28:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	b004      	add	sp, #16
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40012c00 	.word	0x40012c00
 8009c38:	40000400 	.word	0x40000400
 8009c3c:	00010007 	.word	0x00010007

08009c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	223d      	movs	r2, #61	@ 0x3d
 8009c4c:	5c9b      	ldrb	r3, [r3, r2]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d001      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e03d      	b.n	8009cd4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	223d      	movs	r2, #61	@ 0x3d
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68da      	ldr	r2, [r3, #12]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a19      	ldr	r2, [pc, #100]	@ (8009cdc <HAL_TIM_Base_Start_IT+0x9c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00a      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x50>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	2380      	movs	r3, #128	@ 0x80
 8009c80:	05db      	lsls	r3, r3, #23
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d004      	beq.n	8009c90 <HAL_TIM_Base_Start_IT+0x50>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ce0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d116      	bne.n	8009cbe <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	4a13      	ldr	r2, [pc, #76]	@ (8009ce4 <HAL_TIM_Base_Start_IT+0xa4>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b06      	cmp	r3, #6
 8009ca0:	d016      	beq.n	8009cd0 <HAL_TIM_Base_Start_IT+0x90>
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	2380      	movs	r3, #128	@ 0x80
 8009ca6:	025b      	lsls	r3, r3, #9
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d011      	beq.n	8009cd0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cbc:	e008      	b.n	8009cd0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2101      	movs	r1, #1
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	e000      	b.n	8009cd2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	b004      	add	sp, #16
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	40012c00 	.word	0x40012c00
 8009ce0:	40000400 	.word	0x40000400
 8009ce4:	00010007 	.word	0x00010007

08009ce8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e056      	b.n	8009da8 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	223d      	movs	r2, #61	@ 0x3d
 8009cfe:	5c9b      	ldrb	r3, [r3, r2]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d113      	bne.n	8009d2e <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	223c      	movs	r2, #60	@ 0x3c
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	0018      	movs	r0, r3
 8009d12:	f001 ffbf 	bl	800bc94 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a23      	ldr	r2, [pc, #140]	@ (8009db0 <HAL_TIM_OC_Init+0xc8>)
 8009d22:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	0010      	movs	r0, r2
 8009d2c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	223d      	movs	r2, #61	@ 0x3d
 8009d32:	2102      	movs	r1, #2
 8009d34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	0019      	movs	r1, r3
 8009d40:	0010      	movs	r0, r2
 8009d42:	f001 faa9 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2248      	movs	r2, #72	@ 0x48
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	223e      	movs	r2, #62	@ 0x3e
 8009d52:	2101      	movs	r1, #1
 8009d54:	5499      	strb	r1, [r3, r2]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	223f      	movs	r2, #63	@ 0x3f
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	5499      	strb	r1, [r3, r2]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2240      	movs	r2, #64	@ 0x40
 8009d62:	2101      	movs	r1, #1
 8009d64:	5499      	strb	r1, [r3, r2]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2241      	movs	r2, #65	@ 0x41
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	5499      	strb	r1, [r3, r2]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2242      	movs	r2, #66	@ 0x42
 8009d72:	2101      	movs	r1, #1
 8009d74:	5499      	strb	r1, [r3, r2]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2243      	movs	r2, #67	@ 0x43
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2244      	movs	r2, #68	@ 0x44
 8009d82:	2101      	movs	r1, #1
 8009d84:	5499      	strb	r1, [r3, r2]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2245      	movs	r2, #69	@ 0x45
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	5499      	strb	r1, [r3, r2]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2246      	movs	r2, #70	@ 0x46
 8009d92:	2101      	movs	r1, #1
 8009d94:	5499      	strb	r1, [r3, r2]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2247      	movs	r2, #71	@ 0x47
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	223d      	movs	r2, #61	@ 0x3d
 8009da2:	2101      	movs	r1, #1
 8009da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	0018      	movs	r0, r3
 8009daa:	46bd      	mov	sp, r7
 8009dac:	b002      	add	sp, #8
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	08009db5 	.word	0x08009db5

08009db4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009dbc:	46c0      	nop			@ (mov r8, r8)
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dce:	230f      	movs	r3, #15
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d108      	bne.n	8009dee <HAL_TIM_OC_Start_IT+0x2a>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	223e      	movs	r2, #62	@ 0x3e
 8009de0:	5c9b      	ldrb	r3, [r3, r2]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	3b01      	subs	r3, #1
 8009de6:	1e5a      	subs	r2, r3, #1
 8009de8:	4193      	sbcs	r3, r2
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	e037      	b.n	8009e5e <HAL_TIM_OC_Start_IT+0x9a>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d108      	bne.n	8009e06 <HAL_TIM_OC_Start_IT+0x42>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	223f      	movs	r2, #63	@ 0x3f
 8009df8:	5c9b      	ldrb	r3, [r3, r2]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	1e5a      	subs	r2, r3, #1
 8009e00:	4193      	sbcs	r3, r2
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	e02b      	b.n	8009e5e <HAL_TIM_OC_Start_IT+0x9a>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	d108      	bne.n	8009e1e <HAL_TIM_OC_Start_IT+0x5a>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2240      	movs	r2, #64	@ 0x40
 8009e10:	5c9b      	ldrb	r3, [r3, r2]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	1e5a      	subs	r2, r3, #1
 8009e18:	4193      	sbcs	r3, r2
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	e01f      	b.n	8009e5e <HAL_TIM_OC_Start_IT+0x9a>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b0c      	cmp	r3, #12
 8009e22:	d108      	bne.n	8009e36 <HAL_TIM_OC_Start_IT+0x72>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2241      	movs	r2, #65	@ 0x41
 8009e28:	5c9b      	ldrb	r3, [r3, r2]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	1e5a      	subs	r2, r3, #1
 8009e30:	4193      	sbcs	r3, r2
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	e013      	b.n	8009e5e <HAL_TIM_OC_Start_IT+0x9a>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b10      	cmp	r3, #16
 8009e3a:	d108      	bne.n	8009e4e <HAL_TIM_OC_Start_IT+0x8a>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2242      	movs	r2, #66	@ 0x42
 8009e40:	5c9b      	ldrb	r3, [r3, r2]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	3b01      	subs	r3, #1
 8009e46:	1e5a      	subs	r2, r3, #1
 8009e48:	4193      	sbcs	r3, r2
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	e007      	b.n	8009e5e <HAL_TIM_OC_Start_IT+0x9a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2243      	movs	r2, #67	@ 0x43
 8009e52:	5c9b      	ldrb	r3, [r3, r2]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	3b01      	subs	r3, #1
 8009e58:	1e5a      	subs	r2, r3, #1
 8009e5a:	4193      	sbcs	r3, r2
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e0c4      	b.n	8009ff0 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d104      	bne.n	8009e76 <HAL_TIM_OC_Start_IT+0xb2>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	223e      	movs	r2, #62	@ 0x3e
 8009e70:	2102      	movs	r1, #2
 8009e72:	5499      	strb	r1, [r3, r2]
 8009e74:	e023      	b.n	8009ebe <HAL_TIM_OC_Start_IT+0xfa>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d104      	bne.n	8009e86 <HAL_TIM_OC_Start_IT+0xc2>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	223f      	movs	r2, #63	@ 0x3f
 8009e80:	2102      	movs	r1, #2
 8009e82:	5499      	strb	r1, [r3, r2]
 8009e84:	e01b      	b.n	8009ebe <HAL_TIM_OC_Start_IT+0xfa>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d104      	bne.n	8009e96 <HAL_TIM_OC_Start_IT+0xd2>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2240      	movs	r2, #64	@ 0x40
 8009e90:	2102      	movs	r1, #2
 8009e92:	5499      	strb	r1, [r3, r2]
 8009e94:	e013      	b.n	8009ebe <HAL_TIM_OC_Start_IT+0xfa>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b0c      	cmp	r3, #12
 8009e9a:	d104      	bne.n	8009ea6 <HAL_TIM_OC_Start_IT+0xe2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2241      	movs	r2, #65	@ 0x41
 8009ea0:	2102      	movs	r1, #2
 8009ea2:	5499      	strb	r1, [r3, r2]
 8009ea4:	e00b      	b.n	8009ebe <HAL_TIM_OC_Start_IT+0xfa>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b10      	cmp	r3, #16
 8009eaa:	d104      	bne.n	8009eb6 <HAL_TIM_OC_Start_IT+0xf2>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2242      	movs	r2, #66	@ 0x42
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	5499      	strb	r1, [r3, r2]
 8009eb4:	e003      	b.n	8009ebe <HAL_TIM_OC_Start_IT+0xfa>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2243      	movs	r2, #67	@ 0x43
 8009eba:	2102      	movs	r1, #2
 8009ebc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b0c      	cmp	r3, #12
 8009ec2:	d02a      	beq.n	8009f1a <HAL_TIM_OC_Start_IT+0x156>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2b0c      	cmp	r3, #12
 8009ec8:	d830      	bhi.n	8009f2c <HAL_TIM_OC_Start_IT+0x168>
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	d01b      	beq.n	8009f08 <HAL_TIM_OC_Start_IT+0x144>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d82a      	bhi.n	8009f2c <HAL_TIM_OC_Start_IT+0x168>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <HAL_TIM_OC_Start_IT+0x120>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d009      	beq.n	8009ef6 <HAL_TIM_OC_Start_IT+0x132>
 8009ee2:	e023      	b.n	8009f2c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2102      	movs	r1, #2
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	60da      	str	r2, [r3, #12]
      break;
 8009ef4:	e01f      	b.n	8009f36 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2104      	movs	r1, #4
 8009f02:	430a      	orrs	r2, r1
 8009f04:	60da      	str	r2, [r3, #12]
      break;
 8009f06:	e016      	b.n	8009f36 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2108      	movs	r1, #8
 8009f14:	430a      	orrs	r2, r1
 8009f16:	60da      	str	r2, [r3, #12]
      break;
 8009f18:	e00d      	b.n	8009f36 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2110      	movs	r1, #16
 8009f26:	430a      	orrs	r2, r1
 8009f28:	60da      	str	r2, [r3, #12]
      break;
 8009f2a:	e004      	b.n	8009f36 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009f2c:	230f      	movs	r3, #15
 8009f2e:	18fb      	adds	r3, r7, r3
 8009f30:	2201      	movs	r2, #1
 8009f32:	701a      	strb	r2, [r3, #0]
      break;
 8009f34:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009f36:	230f      	movs	r3, #15
 8009f38:	18fb      	adds	r3, r7, r3
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d154      	bne.n	8009fea <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	2201      	movs	r2, #1
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f001 fe7f 	bl	800bc4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a29      	ldr	r2, [pc, #164]	@ (8009ff8 <HAL_TIM_OC_Start_IT+0x234>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d009      	beq.n	8009f6c <HAL_TIM_OC_Start_IT+0x1a8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a27      	ldr	r2, [pc, #156]	@ (8009ffc <HAL_TIM_OC_Start_IT+0x238>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d004      	beq.n	8009f6c <HAL_TIM_OC_Start_IT+0x1a8>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a26      	ldr	r2, [pc, #152]	@ (800a000 <HAL_TIM_OC_Start_IT+0x23c>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d101      	bne.n	8009f70 <HAL_TIM_OC_Start_IT+0x1ac>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e000      	b.n	8009f72 <HAL_TIM_OC_Start_IT+0x1ae>
 8009f70:	2300      	movs	r3, #0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d008      	beq.n	8009f88 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2180      	movs	r1, #128	@ 0x80
 8009f82:	0209      	lsls	r1, r1, #8
 8009f84:	430a      	orrs	r2, r1
 8009f86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ff8 <HAL_TIM_OC_Start_IT+0x234>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d00a      	beq.n	8009fa8 <HAL_TIM_OC_Start_IT+0x1e4>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	2380      	movs	r3, #128	@ 0x80
 8009f98:	05db      	lsls	r3, r3, #23
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d004      	beq.n	8009fa8 <HAL_TIM_OC_Start_IT+0x1e4>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a18      	ldr	r2, [pc, #96]	@ (800a004 <HAL_TIM_OC_Start_IT+0x240>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d116      	bne.n	8009fd6 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	4a16      	ldr	r2, [pc, #88]	@ (800a008 <HAL_TIM_OC_Start_IT+0x244>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2b06      	cmp	r3, #6
 8009fb8:	d016      	beq.n	8009fe8 <HAL_TIM_OC_Start_IT+0x224>
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	025b      	lsls	r3, r3, #9
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d011      	beq.n	8009fe8 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2101      	movs	r1, #1
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd4:	e008      	b.n	8009fe8 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	e000      	b.n	8009fea <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009fea:	230f      	movs	r3, #15
 8009fec:	18fb      	adds	r3, r7, r3
 8009fee:	781b      	ldrb	r3, [r3, #0]
}
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b004      	add	sp, #16
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40012c00 	.word	0x40012c00
 8009ffc:	40014400 	.word	0x40014400
 800a000:	40014800 	.word	0x40014800
 800a004:	40000400 	.word	0x40000400
 800a008:	00010007 	.word	0x00010007

0800a00c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a016:	230f      	movs	r3, #15
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b0c      	cmp	r3, #12
 800a022:	d02a      	beq.n	800a07a <HAL_TIM_OC_Stop_IT+0x6e>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b0c      	cmp	r3, #12
 800a028:	d830      	bhi.n	800a08c <HAL_TIM_OC_Stop_IT+0x80>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d01b      	beq.n	800a068 <HAL_TIM_OC_Stop_IT+0x5c>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b08      	cmp	r3, #8
 800a034:	d82a      	bhi.n	800a08c <HAL_TIM_OC_Stop_IT+0x80>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <HAL_TIM_OC_Stop_IT+0x38>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d009      	beq.n	800a056 <HAL_TIM_OC_Stop_IT+0x4a>
 800a042:	e023      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2102      	movs	r1, #2
 800a050:	438a      	bics	r2, r1
 800a052:	60da      	str	r2, [r3, #12]
      break;
 800a054:	e01f      	b.n	800a096 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2104      	movs	r1, #4
 800a062:	438a      	bics	r2, r1
 800a064:	60da      	str	r2, [r3, #12]
      break;
 800a066:	e016      	b.n	800a096 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2108      	movs	r1, #8
 800a074:	438a      	bics	r2, r1
 800a076:	60da      	str	r2, [r3, #12]
      break;
 800a078:	e00d      	b.n	800a096 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2110      	movs	r1, #16
 800a086:	438a      	bics	r2, r1
 800a088:	60da      	str	r2, [r3, #12]
      break;
 800a08a:	e004      	b.n	800a096 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800a08c:	230f      	movs	r3, #15
 800a08e:	18fb      	adds	r3, r7, r3
 800a090:	2201      	movs	r2, #1
 800a092:	701a      	strb	r2, [r3, #0]
      break;
 800a094:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a096:	230f      	movs	r3, #15
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d000      	beq.n	800a0a2 <HAL_TIM_OC_Stop_IT+0x96>
 800a0a0:	e06e      	b.n	800a180 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f001 fdce 	bl	800bc4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a36      	ldr	r2, [pc, #216]	@ (800a190 <HAL_TIM_OC_Stop_IT+0x184>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d009      	beq.n	800a0ce <HAL_TIM_OC_Stop_IT+0xc2>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a35      	ldr	r2, [pc, #212]	@ (800a194 <HAL_TIM_OC_Stop_IT+0x188>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d004      	beq.n	800a0ce <HAL_TIM_OC_Stop_IT+0xc2>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a33      	ldr	r2, [pc, #204]	@ (800a198 <HAL_TIM_OC_Stop_IT+0x18c>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d101      	bne.n	800a0d2 <HAL_TIM_OC_Stop_IT+0xc6>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e000      	b.n	800a0d4 <HAL_TIM_OC_Stop_IT+0xc8>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d013      	beq.n	800a100 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	4a2f      	ldr	r2, [pc, #188]	@ (800a19c <HAL_TIM_OC_Stop_IT+0x190>)
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	d10d      	bne.n	800a100 <HAL_TIM_OC_Stop_IT+0xf4>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	4a2d      	ldr	r2, [pc, #180]	@ (800a1a0 <HAL_TIM_OC_Stop_IT+0x194>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	d107      	bne.n	800a100 <HAL_TIM_OC_Stop_IT+0xf4>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	492a      	ldr	r1, [pc, #168]	@ (800a1a4 <HAL_TIM_OC_Stop_IT+0x198>)
 800a0fc:	400a      	ands	r2, r1
 800a0fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	4a25      	ldr	r2, [pc, #148]	@ (800a19c <HAL_TIM_OC_Stop_IT+0x190>)
 800a108:	4013      	ands	r3, r2
 800a10a:	d10d      	bne.n	800a128 <HAL_TIM_OC_Stop_IT+0x11c>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	4a23      	ldr	r2, [pc, #140]	@ (800a1a0 <HAL_TIM_OC_Stop_IT+0x194>)
 800a114:	4013      	ands	r3, r2
 800a116:	d107      	bne.n	800a128 <HAL_TIM_OC_Stop_IT+0x11c>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2101      	movs	r1, #1
 800a124:	438a      	bics	r2, r1
 800a126:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d104      	bne.n	800a138 <HAL_TIM_OC_Stop_IT+0x12c>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	223e      	movs	r2, #62	@ 0x3e
 800a132:	2101      	movs	r1, #1
 800a134:	5499      	strb	r1, [r3, r2]
 800a136:	e023      	b.n	800a180 <HAL_TIM_OC_Stop_IT+0x174>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d104      	bne.n	800a148 <HAL_TIM_OC_Stop_IT+0x13c>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	223f      	movs	r2, #63	@ 0x3f
 800a142:	2101      	movs	r1, #1
 800a144:	5499      	strb	r1, [r3, r2]
 800a146:	e01b      	b.n	800a180 <HAL_TIM_OC_Stop_IT+0x174>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b08      	cmp	r3, #8
 800a14c:	d104      	bne.n	800a158 <HAL_TIM_OC_Stop_IT+0x14c>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2240      	movs	r2, #64	@ 0x40
 800a152:	2101      	movs	r1, #1
 800a154:	5499      	strb	r1, [r3, r2]
 800a156:	e013      	b.n	800a180 <HAL_TIM_OC_Stop_IT+0x174>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b0c      	cmp	r3, #12
 800a15c:	d104      	bne.n	800a168 <HAL_TIM_OC_Stop_IT+0x15c>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2241      	movs	r2, #65	@ 0x41
 800a162:	2101      	movs	r1, #1
 800a164:	5499      	strb	r1, [r3, r2]
 800a166:	e00b      	b.n	800a180 <HAL_TIM_OC_Stop_IT+0x174>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b10      	cmp	r3, #16
 800a16c:	d104      	bne.n	800a178 <HAL_TIM_OC_Stop_IT+0x16c>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2242      	movs	r2, #66	@ 0x42
 800a172:	2101      	movs	r1, #1
 800a174:	5499      	strb	r1, [r3, r2]
 800a176:	e003      	b.n	800a180 <HAL_TIM_OC_Stop_IT+0x174>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2243      	movs	r2, #67	@ 0x43
 800a17c:	2101      	movs	r1, #1
 800a17e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800a180:	230f      	movs	r3, #15
 800a182:	18fb      	adds	r3, r7, r3
 800a184:	781b      	ldrb	r3, [r3, #0]
}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	b004      	add	sp, #16
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	46c0      	nop			@ (mov r8, r8)
 800a190:	40012c00 	.word	0x40012c00
 800a194:	40014400 	.word	0x40014400
 800a198:	40014800 	.word	0x40014800
 800a19c:	00001111 	.word	0x00001111
 800a1a0:	00000444 	.word	0x00000444
 800a1a4:	ffff7fff 	.word	0xffff7fff

0800a1a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e056      	b.n	800a268 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	223d      	movs	r2, #61	@ 0x3d
 800a1be:	5c9b      	ldrb	r3, [r3, r2]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d113      	bne.n	800a1ee <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	223c      	movs	r2, #60	@ 0x3c
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	f001 fd5f 	bl	800bc94 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a23      	ldr	r2, [pc, #140]	@ (800a270 <HAL_TIM_PWM_Init+0xc8>)
 800a1e2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	0010      	movs	r0, r2
 800a1ec:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	223d      	movs	r2, #61	@ 0x3d
 800a1f2:	2102      	movs	r1, #2
 800a1f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	0019      	movs	r1, r3
 800a200:	0010      	movs	r0, r2
 800a202:	f001 f849 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2248      	movs	r2, #72	@ 0x48
 800a20a:	2101      	movs	r1, #1
 800a20c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	223e      	movs	r2, #62	@ 0x3e
 800a212:	2101      	movs	r1, #1
 800a214:	5499      	strb	r1, [r3, r2]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	223f      	movs	r2, #63	@ 0x3f
 800a21a:	2101      	movs	r1, #1
 800a21c:	5499      	strb	r1, [r3, r2]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2240      	movs	r2, #64	@ 0x40
 800a222:	2101      	movs	r1, #1
 800a224:	5499      	strb	r1, [r3, r2]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2241      	movs	r2, #65	@ 0x41
 800a22a:	2101      	movs	r1, #1
 800a22c:	5499      	strb	r1, [r3, r2]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2242      	movs	r2, #66	@ 0x42
 800a232:	2101      	movs	r1, #1
 800a234:	5499      	strb	r1, [r3, r2]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2243      	movs	r2, #67	@ 0x43
 800a23a:	2101      	movs	r1, #1
 800a23c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2244      	movs	r2, #68	@ 0x44
 800a242:	2101      	movs	r1, #1
 800a244:	5499      	strb	r1, [r3, r2]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2245      	movs	r2, #69	@ 0x45
 800a24a:	2101      	movs	r1, #1
 800a24c:	5499      	strb	r1, [r3, r2]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2246      	movs	r2, #70	@ 0x46
 800a252:	2101      	movs	r1, #1
 800a254:	5499      	strb	r1, [r3, r2]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2247      	movs	r2, #71	@ 0x47
 800a25a:	2101      	movs	r1, #1
 800a25c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	223d      	movs	r2, #61	@ 0x3d
 800a262:	2101      	movs	r1, #1
 800a264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	0018      	movs	r0, r3
 800a26a:	46bd      	mov	sp, r7
 800a26c:	b002      	add	sp, #8
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	0800a275 	.word	0x0800a275

0800a274 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a27c:	46c0      	nop			@ (mov r8, r8)
 800a27e:	46bd      	mov	sp, r7
 800a280:	b002      	add	sp, #8
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d108      	bne.n	800a2a6 <HAL_TIM_PWM_Start+0x22>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	223e      	movs	r2, #62	@ 0x3e
 800a298:	5c9b      	ldrb	r3, [r3, r2]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	3b01      	subs	r3, #1
 800a29e:	1e5a      	subs	r2, r3, #1
 800a2a0:	4193      	sbcs	r3, r2
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	e037      	b.n	800a316 <HAL_TIM_PWM_Start+0x92>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d108      	bne.n	800a2be <HAL_TIM_PWM_Start+0x3a>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	223f      	movs	r2, #63	@ 0x3f
 800a2b0:	5c9b      	ldrb	r3, [r3, r2]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	1e5a      	subs	r2, r3, #1
 800a2b8:	4193      	sbcs	r3, r2
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	e02b      	b.n	800a316 <HAL_TIM_PWM_Start+0x92>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d108      	bne.n	800a2d6 <HAL_TIM_PWM_Start+0x52>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2240      	movs	r2, #64	@ 0x40
 800a2c8:	5c9b      	ldrb	r3, [r3, r2]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	1e5a      	subs	r2, r3, #1
 800a2d0:	4193      	sbcs	r3, r2
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	e01f      	b.n	800a316 <HAL_TIM_PWM_Start+0x92>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b0c      	cmp	r3, #12
 800a2da:	d108      	bne.n	800a2ee <HAL_TIM_PWM_Start+0x6a>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2241      	movs	r2, #65	@ 0x41
 800a2e0:	5c9b      	ldrb	r3, [r3, r2]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	4193      	sbcs	r3, r2
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	e013      	b.n	800a316 <HAL_TIM_PWM_Start+0x92>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d108      	bne.n	800a306 <HAL_TIM_PWM_Start+0x82>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2242      	movs	r2, #66	@ 0x42
 800a2f8:	5c9b      	ldrb	r3, [r3, r2]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	1e5a      	subs	r2, r3, #1
 800a300:	4193      	sbcs	r3, r2
 800a302:	b2db      	uxtb	r3, r3
 800a304:	e007      	b.n	800a316 <HAL_TIM_PWM_Start+0x92>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2243      	movs	r2, #67	@ 0x43
 800a30a:	5c9b      	ldrb	r3, [r3, r2]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	3b01      	subs	r3, #1
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	4193      	sbcs	r3, r2
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e081      	b.n	800a422 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <HAL_TIM_PWM_Start+0xaa>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	223e      	movs	r2, #62	@ 0x3e
 800a328:	2102      	movs	r1, #2
 800a32a:	5499      	strb	r1, [r3, r2]
 800a32c:	e023      	b.n	800a376 <HAL_TIM_PWM_Start+0xf2>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b04      	cmp	r3, #4
 800a332:	d104      	bne.n	800a33e <HAL_TIM_PWM_Start+0xba>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	223f      	movs	r2, #63	@ 0x3f
 800a338:	2102      	movs	r1, #2
 800a33a:	5499      	strb	r1, [r3, r2]
 800a33c:	e01b      	b.n	800a376 <HAL_TIM_PWM_Start+0xf2>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b08      	cmp	r3, #8
 800a342:	d104      	bne.n	800a34e <HAL_TIM_PWM_Start+0xca>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2240      	movs	r2, #64	@ 0x40
 800a348:	2102      	movs	r1, #2
 800a34a:	5499      	strb	r1, [r3, r2]
 800a34c:	e013      	b.n	800a376 <HAL_TIM_PWM_Start+0xf2>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b0c      	cmp	r3, #12
 800a352:	d104      	bne.n	800a35e <HAL_TIM_PWM_Start+0xda>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2241      	movs	r2, #65	@ 0x41
 800a358:	2102      	movs	r1, #2
 800a35a:	5499      	strb	r1, [r3, r2]
 800a35c:	e00b      	b.n	800a376 <HAL_TIM_PWM_Start+0xf2>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b10      	cmp	r3, #16
 800a362:	d104      	bne.n	800a36e <HAL_TIM_PWM_Start+0xea>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2242      	movs	r2, #66	@ 0x42
 800a368:	2102      	movs	r1, #2
 800a36a:	5499      	strb	r1, [r3, r2]
 800a36c:	e003      	b.n	800a376 <HAL_TIM_PWM_Start+0xf2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2243      	movs	r2, #67	@ 0x43
 800a372:	2102      	movs	r1, #2
 800a374:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	2201      	movs	r2, #1
 800a37e:	0018      	movs	r0, r3
 800a380:	f001 fc64 	bl	800bc4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a28      	ldr	r2, [pc, #160]	@ (800a42c <HAL_TIM_PWM_Start+0x1a8>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d009      	beq.n	800a3a2 <HAL_TIM_PWM_Start+0x11e>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a27      	ldr	r2, [pc, #156]	@ (800a430 <HAL_TIM_PWM_Start+0x1ac>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d004      	beq.n	800a3a2 <HAL_TIM_PWM_Start+0x11e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a25      	ldr	r2, [pc, #148]	@ (800a434 <HAL_TIM_PWM_Start+0x1b0>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d101      	bne.n	800a3a6 <HAL_TIM_PWM_Start+0x122>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e000      	b.n	800a3a8 <HAL_TIM_PWM_Start+0x124>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2180      	movs	r1, #128	@ 0x80
 800a3b8:	0209      	lsls	r1, r1, #8
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a1a      	ldr	r2, [pc, #104]	@ (800a42c <HAL_TIM_PWM_Start+0x1a8>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d00a      	beq.n	800a3de <HAL_TIM_PWM_Start+0x15a>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	2380      	movs	r3, #128	@ 0x80
 800a3ce:	05db      	lsls	r3, r3, #23
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d004      	beq.n	800a3de <HAL_TIM_PWM_Start+0x15a>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a17      	ldr	r2, [pc, #92]	@ (800a438 <HAL_TIM_PWM_Start+0x1b4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d116      	bne.n	800a40c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	4a15      	ldr	r2, [pc, #84]	@ (800a43c <HAL_TIM_PWM_Start+0x1b8>)
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b06      	cmp	r3, #6
 800a3ee:	d016      	beq.n	800a41e <HAL_TIM_PWM_Start+0x19a>
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	2380      	movs	r3, #128	@ 0x80
 800a3f4:	025b      	lsls	r3, r3, #9
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d011      	beq.n	800a41e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2101      	movs	r1, #1
 800a406:	430a      	orrs	r2, r1
 800a408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a40a:	e008      	b.n	800a41e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2101      	movs	r1, #1
 800a418:	430a      	orrs	r2, r1
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	e000      	b.n	800a420 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a41e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	0018      	movs	r0, r3
 800a424:	46bd      	mov	sp, r7
 800a426:	b004      	add	sp, #16
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	46c0      	nop			@ (mov r8, r8)
 800a42c:	40012c00 	.word	0x40012c00
 800a430:	40014400 	.word	0x40014400
 800a434:	40014800 	.word	0x40014800
 800a438:	40000400 	.word	0x40000400
 800a43c:	00010007 	.word	0x00010007

0800a440 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e056      	b.n	800a500 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	223d      	movs	r2, #61	@ 0x3d
 800a456:	5c9b      	ldrb	r3, [r3, r2]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d113      	bne.n	800a486 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	223c      	movs	r2, #60	@ 0x3c
 800a462:	2100      	movs	r1, #0
 800a464:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	0018      	movs	r0, r3
 800a46a:	f001 fc13 	bl	800bc94 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a23      	ldr	r2, [pc, #140]	@ (800a508 <HAL_TIM_IC_Init+0xc8>)
 800a47a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	0010      	movs	r0, r2
 800a484:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	223d      	movs	r2, #61	@ 0x3d
 800a48a:	2102      	movs	r1, #2
 800a48c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3304      	adds	r3, #4
 800a496:	0019      	movs	r1, r3
 800a498:	0010      	movs	r0, r2
 800a49a:	f000 fefd 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2248      	movs	r2, #72	@ 0x48
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	223e      	movs	r2, #62	@ 0x3e
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	5499      	strb	r1, [r3, r2]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	223f      	movs	r2, #63	@ 0x3f
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	5499      	strb	r1, [r3, r2]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2240      	movs	r2, #64	@ 0x40
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	5499      	strb	r1, [r3, r2]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2241      	movs	r2, #65	@ 0x41
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	5499      	strb	r1, [r3, r2]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2242      	movs	r2, #66	@ 0x42
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	5499      	strb	r1, [r3, r2]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2243      	movs	r2, #67	@ 0x43
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2244      	movs	r2, #68	@ 0x44
 800a4da:	2101      	movs	r1, #1
 800a4dc:	5499      	strb	r1, [r3, r2]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2245      	movs	r2, #69	@ 0x45
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	5499      	strb	r1, [r3, r2]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2246      	movs	r2, #70	@ 0x46
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	5499      	strb	r1, [r3, r2]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2247      	movs	r2, #71	@ 0x47
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	223d      	movs	r2, #61	@ 0x3d
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	0018      	movs	r0, r3
 800a502:	46bd      	mov	sp, r7
 800a504:	b002      	add	sp, #8
 800a506:	bd80      	pop	{r7, pc}
 800a508:	0800a50d 	.word	0x0800a50d

0800a50c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a514:	46c0      	nop			@ (mov r8, r8)
 800a516:	46bd      	mov	sp, r7
 800a518:	b002      	add	sp, #8
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a526:	230f      	movs	r3, #15
 800a528:	18fb      	adds	r3, r7, r3
 800a52a:	2200      	movs	r2, #0
 800a52c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d104      	bne.n	800a53e <HAL_TIM_IC_Start_IT+0x22>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	223e      	movs	r2, #62	@ 0x3e
 800a538:	5c9b      	ldrb	r3, [r3, r2]
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	e023      	b.n	800a586 <HAL_TIM_IC_Start_IT+0x6a>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b04      	cmp	r3, #4
 800a542:	d104      	bne.n	800a54e <HAL_TIM_IC_Start_IT+0x32>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	223f      	movs	r2, #63	@ 0x3f
 800a548:	5c9b      	ldrb	r3, [r3, r2]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	e01b      	b.n	800a586 <HAL_TIM_IC_Start_IT+0x6a>
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b08      	cmp	r3, #8
 800a552:	d104      	bne.n	800a55e <HAL_TIM_IC_Start_IT+0x42>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2240      	movs	r2, #64	@ 0x40
 800a558:	5c9b      	ldrb	r3, [r3, r2]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	e013      	b.n	800a586 <HAL_TIM_IC_Start_IT+0x6a>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b0c      	cmp	r3, #12
 800a562:	d104      	bne.n	800a56e <HAL_TIM_IC_Start_IT+0x52>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2241      	movs	r2, #65	@ 0x41
 800a568:	5c9b      	ldrb	r3, [r3, r2]
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	e00b      	b.n	800a586 <HAL_TIM_IC_Start_IT+0x6a>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b10      	cmp	r3, #16
 800a572:	d104      	bne.n	800a57e <HAL_TIM_IC_Start_IT+0x62>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2242      	movs	r2, #66	@ 0x42
 800a578:	5c9b      	ldrb	r3, [r3, r2]
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	e003      	b.n	800a586 <HAL_TIM_IC_Start_IT+0x6a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2243      	movs	r2, #67	@ 0x43
 800a582:	5c9b      	ldrb	r3, [r3, r2]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	220e      	movs	r2, #14
 800a588:	18ba      	adds	r2, r7, r2
 800a58a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d104      	bne.n	800a59c <HAL_TIM_IC_Start_IT+0x80>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2244      	movs	r2, #68	@ 0x44
 800a596:	5c9b      	ldrb	r3, [r3, r2]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	e013      	b.n	800a5c4 <HAL_TIM_IC_Start_IT+0xa8>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d104      	bne.n	800a5ac <HAL_TIM_IC_Start_IT+0x90>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2245      	movs	r2, #69	@ 0x45
 800a5a6:	5c9b      	ldrb	r3, [r3, r2]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	e00b      	b.n	800a5c4 <HAL_TIM_IC_Start_IT+0xa8>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b08      	cmp	r3, #8
 800a5b0:	d104      	bne.n	800a5bc <HAL_TIM_IC_Start_IT+0xa0>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2246      	movs	r2, #70	@ 0x46
 800a5b6:	5c9b      	ldrb	r3, [r3, r2]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	e003      	b.n	800a5c4 <HAL_TIM_IC_Start_IT+0xa8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2247      	movs	r2, #71	@ 0x47
 800a5c0:	5c9b      	ldrb	r3, [r3, r2]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	210d      	movs	r1, #13
 800a5c6:	187a      	adds	r2, r7, r1
 800a5c8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5ca:	230e      	movs	r3, #14
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d103      	bne.n	800a5dc <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5d4:	187b      	adds	r3, r7, r1
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d001      	beq.n	800a5e0 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e0c3      	b.n	800a768 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d104      	bne.n	800a5f0 <HAL_TIM_IC_Start_IT+0xd4>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	223e      	movs	r2, #62	@ 0x3e
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	5499      	strb	r1, [r3, r2]
 800a5ee:	e023      	b.n	800a638 <HAL_TIM_IC_Start_IT+0x11c>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	d104      	bne.n	800a600 <HAL_TIM_IC_Start_IT+0xe4>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	223f      	movs	r2, #63	@ 0x3f
 800a5fa:	2102      	movs	r1, #2
 800a5fc:	5499      	strb	r1, [r3, r2]
 800a5fe:	e01b      	b.n	800a638 <HAL_TIM_IC_Start_IT+0x11c>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b08      	cmp	r3, #8
 800a604:	d104      	bne.n	800a610 <HAL_TIM_IC_Start_IT+0xf4>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2240      	movs	r2, #64	@ 0x40
 800a60a:	2102      	movs	r1, #2
 800a60c:	5499      	strb	r1, [r3, r2]
 800a60e:	e013      	b.n	800a638 <HAL_TIM_IC_Start_IT+0x11c>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b0c      	cmp	r3, #12
 800a614:	d104      	bne.n	800a620 <HAL_TIM_IC_Start_IT+0x104>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2241      	movs	r2, #65	@ 0x41
 800a61a:	2102      	movs	r1, #2
 800a61c:	5499      	strb	r1, [r3, r2]
 800a61e:	e00b      	b.n	800a638 <HAL_TIM_IC_Start_IT+0x11c>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b10      	cmp	r3, #16
 800a624:	d104      	bne.n	800a630 <HAL_TIM_IC_Start_IT+0x114>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2242      	movs	r2, #66	@ 0x42
 800a62a:	2102      	movs	r1, #2
 800a62c:	5499      	strb	r1, [r3, r2]
 800a62e:	e003      	b.n	800a638 <HAL_TIM_IC_Start_IT+0x11c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2243      	movs	r2, #67	@ 0x43
 800a634:	2102      	movs	r1, #2
 800a636:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <HAL_TIM_IC_Start_IT+0x12c>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2244      	movs	r2, #68	@ 0x44
 800a642:	2102      	movs	r1, #2
 800a644:	5499      	strb	r1, [r3, r2]
 800a646:	e013      	b.n	800a670 <HAL_TIM_IC_Start_IT+0x154>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d104      	bne.n	800a658 <HAL_TIM_IC_Start_IT+0x13c>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2245      	movs	r2, #69	@ 0x45
 800a652:	2102      	movs	r1, #2
 800a654:	5499      	strb	r1, [r3, r2]
 800a656:	e00b      	b.n	800a670 <HAL_TIM_IC_Start_IT+0x154>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b08      	cmp	r3, #8
 800a65c:	d104      	bne.n	800a668 <HAL_TIM_IC_Start_IT+0x14c>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2246      	movs	r2, #70	@ 0x46
 800a662:	2102      	movs	r1, #2
 800a664:	5499      	strb	r1, [r3, r2]
 800a666:	e003      	b.n	800a670 <HAL_TIM_IC_Start_IT+0x154>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2247      	movs	r2, #71	@ 0x47
 800a66c:	2102      	movs	r1, #2
 800a66e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b0c      	cmp	r3, #12
 800a674:	d02a      	beq.n	800a6cc <HAL_TIM_IC_Start_IT+0x1b0>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b0c      	cmp	r3, #12
 800a67a:	d830      	bhi.n	800a6de <HAL_TIM_IC_Start_IT+0x1c2>
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d01b      	beq.n	800a6ba <HAL_TIM_IC_Start_IT+0x19e>
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b08      	cmp	r3, #8
 800a686:	d82a      	bhi.n	800a6de <HAL_TIM_IC_Start_IT+0x1c2>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <HAL_TIM_IC_Start_IT+0x17a>
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b04      	cmp	r3, #4
 800a692:	d009      	beq.n	800a6a8 <HAL_TIM_IC_Start_IT+0x18c>
 800a694:	e023      	b.n	800a6de <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2102      	movs	r1, #2
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	60da      	str	r2, [r3, #12]
      break;
 800a6a6:	e01f      	b.n	800a6e8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	430a      	orrs	r2, r1
 800a6b6:	60da      	str	r2, [r3, #12]
      break;
 800a6b8:	e016      	b.n	800a6e8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2108      	movs	r1, #8
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	60da      	str	r2, [r3, #12]
      break;
 800a6ca:	e00d      	b.n	800a6e8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2110      	movs	r1, #16
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	60da      	str	r2, [r3, #12]
      break;
 800a6dc:	e004      	b.n	800a6e8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a6de:	230f      	movs	r3, #15
 800a6e0:	18fb      	adds	r3, r7, r3
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	701a      	strb	r2, [r3, #0]
      break;
 800a6e6:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a6e8:	230f      	movs	r3, #15
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d137      	bne.n	800a762 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f001 faa6 	bl	800bc4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1a      	ldr	r2, [pc, #104]	@ (800a770 <HAL_TIM_IC_Start_IT+0x254>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d00a      	beq.n	800a720 <HAL_TIM_IC_Start_IT+0x204>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	2380      	movs	r3, #128	@ 0x80
 800a710:	05db      	lsls	r3, r3, #23
 800a712:	429a      	cmp	r2, r3
 800a714:	d004      	beq.n	800a720 <HAL_TIM_IC_Start_IT+0x204>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a16      	ldr	r2, [pc, #88]	@ (800a774 <HAL_TIM_IC_Start_IT+0x258>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d116      	bne.n	800a74e <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	4a14      	ldr	r2, [pc, #80]	@ (800a778 <HAL_TIM_IC_Start_IT+0x25c>)
 800a728:	4013      	ands	r3, r2
 800a72a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b06      	cmp	r3, #6
 800a730:	d016      	beq.n	800a760 <HAL_TIM_IC_Start_IT+0x244>
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	2380      	movs	r3, #128	@ 0x80
 800a736:	025b      	lsls	r3, r3, #9
 800a738:	429a      	cmp	r2, r3
 800a73a:	d011      	beq.n	800a760 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2101      	movs	r1, #1
 800a748:	430a      	orrs	r2, r1
 800a74a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74c:	e008      	b.n	800a760 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2101      	movs	r1, #1
 800a75a:	430a      	orrs	r2, r1
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	e000      	b.n	800a762 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a760:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a762:	230f      	movs	r3, #15
 800a764:	18fb      	adds	r3, r7, r3
 800a766:	781b      	ldrb	r3, [r3, #0]
}
 800a768:	0018      	movs	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	b004      	add	sp, #16
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	40012c00 	.word	0x40012c00
 800a774:	40000400 	.word	0x40000400
 800a778:	00010007 	.word	0x00010007

0800a77c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2202      	movs	r2, #2
 800a798:	4013      	ands	r3, r2
 800a79a:	d027      	beq.n	800a7ec <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	d023      	beq.n	800a7ec <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	4252      	negs	r2, r2
 800a7ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	4013      	ands	r3, r2
 800a7be:	d006      	beq.n	800a7ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2294      	movs	r2, #148	@ 0x94
 800a7c4:	589b      	ldr	r3, [r3, r2]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	0010      	movs	r0, r2
 800a7ca:	4798      	blx	r3
 800a7cc:	e00b      	b.n	800a7e6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	229c      	movs	r2, #156	@ 0x9c
 800a7d2:	589b      	ldr	r3, [r3, r2]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	0010      	movs	r0, r2
 800a7d8:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	22a0      	movs	r2, #160	@ 0xa0
 800a7de:	589b      	ldr	r3, [r3, r2]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	0010      	movs	r0, r2
 800a7e4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2204      	movs	r2, #4
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	d028      	beq.n	800a846 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	d024      	beq.n	800a846 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2205      	movs	r2, #5
 800a802:	4252      	negs	r2, r2
 800a804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2202      	movs	r2, #2
 800a80a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	23c0      	movs	r3, #192	@ 0xc0
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4013      	ands	r3, r2
 800a818:	d006      	beq.n	800a828 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2294      	movs	r2, #148	@ 0x94
 800a81e:	589b      	ldr	r3, [r3, r2]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	0010      	movs	r0, r2
 800a824:	4798      	blx	r3
 800a826:	e00b      	b.n	800a840 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	229c      	movs	r2, #156	@ 0x9c
 800a82c:	589b      	ldr	r3, [r3, r2]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	0010      	movs	r0, r2
 800a832:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	22a0      	movs	r2, #160	@ 0xa0
 800a838:	589b      	ldr	r3, [r3, r2]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	0010      	movs	r0, r2
 800a83e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2208      	movs	r2, #8
 800a84a:	4013      	ands	r3, r2
 800a84c:	d027      	beq.n	800a89e <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2208      	movs	r2, #8
 800a852:	4013      	ands	r3, r2
 800a854:	d023      	beq.n	800a89e <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2209      	movs	r2, #9
 800a85c:	4252      	negs	r2, r2
 800a85e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2204      	movs	r2, #4
 800a864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	2203      	movs	r2, #3
 800a86e:	4013      	ands	r3, r2
 800a870:	d006      	beq.n	800a880 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2294      	movs	r2, #148	@ 0x94
 800a876:	589b      	ldr	r3, [r3, r2]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	0010      	movs	r0, r2
 800a87c:	4798      	blx	r3
 800a87e:	e00b      	b.n	800a898 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	229c      	movs	r2, #156	@ 0x9c
 800a884:	589b      	ldr	r3, [r3, r2]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	0010      	movs	r0, r2
 800a88a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	22a0      	movs	r2, #160	@ 0xa0
 800a890:	589b      	ldr	r3, [r3, r2]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	0010      	movs	r0, r2
 800a896:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2210      	movs	r2, #16
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	d028      	beq.n	800a8f8 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2210      	movs	r2, #16
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	d024      	beq.n	800a8f8 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2211      	movs	r2, #17
 800a8b4:	4252      	negs	r2, r2
 800a8b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69da      	ldr	r2, [r3, #28]
 800a8c4:	23c0      	movs	r3, #192	@ 0xc0
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	d006      	beq.n	800a8da <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2294      	movs	r2, #148	@ 0x94
 800a8d0:	589b      	ldr	r3, [r3, r2]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	0010      	movs	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	e00b      	b.n	800a8f2 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	229c      	movs	r2, #156	@ 0x9c
 800a8de:	589b      	ldr	r3, [r3, r2]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	0010      	movs	r0, r2
 800a8e4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	22a0      	movs	r2, #160	@ 0xa0
 800a8ea:	589b      	ldr	r3, [r3, r2]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	0010      	movs	r0, r2
 800a8f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	d00e      	beq.n	800a91e <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2201      	movs	r2, #1
 800a904:	4013      	ands	r3, r2
 800a906:	d00a      	beq.n	800a91e <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2202      	movs	r2, #2
 800a90e:	4252      	negs	r2, r2
 800a910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2284      	movs	r2, #132	@ 0x84
 800a916:	589b      	ldr	r3, [r3, r2]
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	0010      	movs	r0, r2
 800a91c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2280      	movs	r2, #128	@ 0x80
 800a922:	4013      	ands	r3, r2
 800a924:	d104      	bne.n	800a930 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	2380      	movs	r3, #128	@ 0x80
 800a92a:	019b      	lsls	r3, r3, #6
 800a92c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a92e:	d00d      	beq.n	800a94c <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2280      	movs	r2, #128	@ 0x80
 800a934:	4013      	ands	r3, r2
 800a936:	d009      	beq.n	800a94c <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a22      	ldr	r2, [pc, #136]	@ (800a9c8 <HAL_TIM_IRQHandler+0x24c>)
 800a93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	22b4      	movs	r2, #180	@ 0xb4
 800a944:	589b      	ldr	r3, [r3, r2]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	0010      	movs	r0, r2
 800a94a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	2380      	movs	r3, #128	@ 0x80
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	4013      	ands	r3, r2
 800a954:	d00d      	beq.n	800a972 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2280      	movs	r2, #128	@ 0x80
 800a95a:	4013      	ands	r3, r2
 800a95c:	d009      	beq.n	800a972 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a1a      	ldr	r2, [pc, #104]	@ (800a9cc <HAL_TIM_IRQHandler+0x250>)
 800a964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	22b8      	movs	r2, #184	@ 0xb8
 800a96a:	589b      	ldr	r3, [r3, r2]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	0010      	movs	r0, r2
 800a970:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2240      	movs	r2, #64	@ 0x40
 800a976:	4013      	ands	r3, r2
 800a978:	d00e      	beq.n	800a998 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2240      	movs	r2, #64	@ 0x40
 800a97e:	4013      	ands	r3, r2
 800a980:	d00a      	beq.n	800a998 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2241      	movs	r2, #65	@ 0x41
 800a988:	4252      	negs	r2, r2
 800a98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	228c      	movs	r2, #140	@ 0x8c
 800a990:	589b      	ldr	r3, [r3, r2]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	0010      	movs	r0, r2
 800a996:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2220      	movs	r2, #32
 800a99c:	4013      	ands	r3, r2
 800a99e:	d00e      	beq.n	800a9be <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d00a      	beq.n	800a9be <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2221      	movs	r2, #33	@ 0x21
 800a9ae:	4252      	negs	r2, r2
 800a9b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	22ac      	movs	r2, #172	@ 0xac
 800a9b6:	589b      	ldr	r3, [r3, r2]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	0010      	movs	r0, r2
 800a9bc:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9be:	46c0      	nop			@ (mov r8, r8)
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	b004      	add	sp, #16
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	46c0      	nop			@ (mov r8, r8)
 800a9c8:	ffffdf7f 	.word	0xffffdf7f
 800a9cc:	fffffeff 	.word	0xfffffeff

0800a9d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9dc:	2317      	movs	r3, #23
 800a9de:	18fb      	adds	r3, r7, r3
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	223c      	movs	r2, #60	@ 0x3c
 800a9e8:	5c9b      	ldrb	r3, [r3, r2]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_OC_ConfigChannel+0x22>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e048      	b.n	800aa84 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	223c      	movs	r2, #60	@ 0x3c
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b14      	cmp	r3, #20
 800a9fe:	d835      	bhi.n	800aa6c <HAL_TIM_OC_ConfigChannel+0x9c>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	009a      	lsls	r2, r3, #2
 800aa04:	4b21      	ldr	r3, [pc, #132]	@ (800aa8c <HAL_TIM_OC_ConfigChannel+0xbc>)
 800aa06:	18d3      	adds	r3, r2, r3
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	0011      	movs	r1, r2
 800aa14:	0018      	movs	r0, r3
 800aa16:	f000 fcc3 	bl	800b3a0 <TIM_OC1_SetConfig>
      break;
 800aa1a:	e02c      	b.n	800aa76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	0011      	movs	r1, r2
 800aa24:	0018      	movs	r0, r3
 800aa26:	f000 fd3b 	bl	800b4a0 <TIM_OC2_SetConfig>
      break;
 800aa2a:	e024      	b.n	800aa76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	0011      	movs	r1, r2
 800aa34:	0018      	movs	r0, r3
 800aa36:	f000 fdb1 	bl	800b59c <TIM_OC3_SetConfig>
      break;
 800aa3a:	e01c      	b.n	800aa76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	0011      	movs	r1, r2
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 fe2b 	bl	800b6a0 <TIM_OC4_SetConfig>
      break;
 800aa4a:	e014      	b.n	800aa76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	0011      	movs	r1, r2
 800aa54:	0018      	movs	r0, r3
 800aa56:	f000 fe87 	bl	800b768 <TIM_OC5_SetConfig>
      break;
 800aa5a:	e00c      	b.n	800aa76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	0011      	movs	r1, r2
 800aa64:	0018      	movs	r0, r3
 800aa66:	f000 fed9 	bl	800b81c <TIM_OC6_SetConfig>
      break;
 800aa6a:	e004      	b.n	800aa76 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800aa6c:	2317      	movs	r3, #23
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	2201      	movs	r2, #1
 800aa72:	701a      	strb	r2, [r3, #0]
      break;
 800aa74:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	223c      	movs	r2, #60	@ 0x3c
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	5499      	strb	r1, [r3, r2]

  return status;
 800aa7e:	2317      	movs	r3, #23
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	781b      	ldrb	r3, [r3, #0]
}
 800aa84:	0018      	movs	r0, r3
 800aa86:	46bd      	mov	sp, r7
 800aa88:	b006      	add	sp, #24
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	0800e160 	.word	0x0800e160

0800aa90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa9c:	2317      	movs	r3, #23
 800aa9e:	18fb      	adds	r3, r7, r3
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	223c      	movs	r2, #60	@ 0x3c
 800aaa8:	5c9b      	ldrb	r3, [r3, r2]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_TIM_IC_ConfigChannel+0x22>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e08c      	b.n	800abcc <HAL_TIM_IC_ConfigChannel+0x13c>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	223c      	movs	r2, #60	@ 0x3c
 800aab6:	2101      	movs	r1, #1
 800aab8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11b      	bne.n	800aaf8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800aad0:	f000 ff02 	bl	800b8d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	210c      	movs	r1, #12
 800aae0:	438a      	bics	r2, r1
 800aae2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6999      	ldr	r1, [r3, #24]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	619a      	str	r2, [r3, #24]
 800aaf6:	e062      	b.n	800abbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d11c      	bne.n	800ab38 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ab0e:	f000 ff67 	bl	800b9e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	699a      	ldr	r2, [r3, #24]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	492d      	ldr	r1, [pc, #180]	@ (800abd4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800ab1e:	400a      	ands	r2, r1
 800ab20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6999      	ldr	r1, [r3, #24]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	021a      	lsls	r2, r3, #8
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	619a      	str	r2, [r3, #24]
 800ab36:	e042      	b.n	800abbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d11b      	bne.n	800ab76 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ab4e:	f000 ffbb 	bl	800bac8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69da      	ldr	r2, [r3, #28]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	210c      	movs	r1, #12
 800ab5e:	438a      	bics	r2, r1
 800ab60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69d9      	ldr	r1, [r3, #28]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	61da      	str	r2, [r3, #28]
 800ab74:	e023      	b.n	800abbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b0c      	cmp	r3, #12
 800ab7a:	d11c      	bne.n	800abb6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ab8c:	f000 ffdc 	bl	800bb48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	69da      	ldr	r2, [r3, #28]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	490e      	ldr	r1, [pc, #56]	@ (800abd4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800ab9c:	400a      	ands	r2, r1
 800ab9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	69d9      	ldr	r1, [r3, #28]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	021a      	lsls	r2, r3, #8
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	430a      	orrs	r2, r1
 800abb2:	61da      	str	r2, [r3, #28]
 800abb4:	e003      	b.n	800abbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800abb6:	2317      	movs	r3, #23
 800abb8:	18fb      	adds	r3, r7, r3
 800abba:	2201      	movs	r2, #1
 800abbc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	223c      	movs	r2, #60	@ 0x3c
 800abc2:	2100      	movs	r1, #0
 800abc4:	5499      	strb	r1, [r3, r2]

  return status;
 800abc6:	2317      	movs	r3, #23
 800abc8:	18fb      	adds	r3, r7, r3
 800abca:	781b      	ldrb	r3, [r3, #0]
}
 800abcc:	0018      	movs	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	b006      	add	sp, #24
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	fffff3ff 	.word	0xfffff3ff

0800abd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abe4:	2317      	movs	r3, #23
 800abe6:	18fb      	adds	r3, r7, r3
 800abe8:	2200      	movs	r2, #0
 800abea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	223c      	movs	r2, #60	@ 0x3c
 800abf0:	5c9b      	ldrb	r3, [r3, r2]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d101      	bne.n	800abfa <HAL_TIM_PWM_ConfigChannel+0x22>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e0e5      	b.n	800adc6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	223c      	movs	r2, #60	@ 0x3c
 800abfe:	2101      	movs	r1, #1
 800ac00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b14      	cmp	r3, #20
 800ac06:	d900      	bls.n	800ac0a <HAL_TIM_PWM_ConfigChannel+0x32>
 800ac08:	e0d1      	b.n	800adae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	009a      	lsls	r2, r3, #2
 800ac0e:	4b70      	ldr	r3, [pc, #448]	@ (800add0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800ac10:	18d3      	adds	r3, r2, r3
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	0011      	movs	r1, r2
 800ac1e:	0018      	movs	r0, r3
 800ac20:	f000 fbbe 	bl	800b3a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2108      	movs	r1, #8
 800ac30:	430a      	orrs	r2, r1
 800ac32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2104      	movs	r1, #4
 800ac40:	438a      	bics	r2, r1
 800ac42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6999      	ldr	r1, [r3, #24]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691a      	ldr	r2, [r3, #16]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	619a      	str	r2, [r3, #24]
      break;
 800ac56:	e0af      	b.n	800adb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	0011      	movs	r1, r2
 800ac60:	0018      	movs	r0, r3
 800ac62:	f000 fc1d 	bl	800b4a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	699a      	ldr	r2, [r3, #24]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2180      	movs	r1, #128	@ 0x80
 800ac72:	0109      	lsls	r1, r1, #4
 800ac74:	430a      	orrs	r2, r1
 800ac76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	699a      	ldr	r2, [r3, #24]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4954      	ldr	r1, [pc, #336]	@ (800add4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ac84:	400a      	ands	r2, r1
 800ac86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6999      	ldr	r1, [r3, #24]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	021a      	lsls	r2, r3, #8
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	619a      	str	r2, [r3, #24]
      break;
 800ac9c:	e08c      	b.n	800adb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	0011      	movs	r1, r2
 800aca6:	0018      	movs	r0, r3
 800aca8:	f000 fc78 	bl	800b59c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69da      	ldr	r2, [r3, #28]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2108      	movs	r1, #8
 800acb8:	430a      	orrs	r2, r1
 800acba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	69da      	ldr	r2, [r3, #28]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2104      	movs	r1, #4
 800acc8:	438a      	bics	r2, r1
 800acca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	69d9      	ldr	r1, [r3, #28]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	61da      	str	r2, [r3, #28]
      break;
 800acde:	e06b      	b.n	800adb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	0011      	movs	r1, r2
 800ace8:	0018      	movs	r0, r3
 800acea:	f000 fcd9 	bl	800b6a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2180      	movs	r1, #128	@ 0x80
 800acfa:	0109      	lsls	r1, r1, #4
 800acfc:	430a      	orrs	r2, r1
 800acfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	69da      	ldr	r2, [r3, #28]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4932      	ldr	r1, [pc, #200]	@ (800add4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ad0c:	400a      	ands	r2, r1
 800ad0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	69d9      	ldr	r1, [r3, #28]
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	021a      	lsls	r2, r3, #8
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	61da      	str	r2, [r3, #28]
      break;
 800ad24:	e048      	b.n	800adb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	0011      	movs	r1, r2
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f000 fd1a 	bl	800b768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2108      	movs	r1, #8
 800ad40:	430a      	orrs	r2, r1
 800ad42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2104      	movs	r1, #4
 800ad50:	438a      	bics	r2, r1
 800ad52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	691a      	ldr	r2, [r3, #16]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ad66:	e027      	b.n	800adb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	0011      	movs	r1, r2
 800ad70:	0018      	movs	r0, r3
 800ad72:	f000 fd53 	bl	800b81c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2180      	movs	r1, #128	@ 0x80
 800ad82:	0109      	lsls	r1, r1, #4
 800ad84:	430a      	orrs	r2, r1
 800ad86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4910      	ldr	r1, [pc, #64]	@ (800add4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ad94:	400a      	ands	r2, r1
 800ad96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	021a      	lsls	r2, r3, #8
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800adac:	e004      	b.n	800adb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800adae:	2317      	movs	r3, #23
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	2201      	movs	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
      break;
 800adb6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	223c      	movs	r2, #60	@ 0x3c
 800adbc:	2100      	movs	r1, #0
 800adbe:	5499      	strb	r1, [r3, r2]

  return status;
 800adc0:	2317      	movs	r3, #23
 800adc2:	18fb      	adds	r3, r7, r3
 800adc4:	781b      	ldrb	r3, [r3, #0]
}
 800adc6:	0018      	movs	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	b006      	add	sp, #24
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	46c0      	nop			@ (mov r8, r8)
 800add0:	0800e1b4 	.word	0x0800e1b4
 800add4:	fffffbff 	.word	0xfffffbff

0800add8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ade2:	230f      	movs	r3, #15
 800ade4:	18fb      	adds	r3, r7, r3
 800ade6:	2200      	movs	r2, #0
 800ade8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	223c      	movs	r2, #60	@ 0x3c
 800adee:	5c9b      	ldrb	r3, [r3, r2]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d101      	bne.n	800adf8 <HAL_TIM_ConfigClockSource+0x20>
 800adf4:	2302      	movs	r3, #2
 800adf6:	e0bc      	b.n	800af72 <HAL_TIM_ConfigClockSource+0x19a>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	223c      	movs	r2, #60	@ 0x3c
 800adfc:	2101      	movs	r1, #1
 800adfe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	223d      	movs	r2, #61	@ 0x3d
 800ae04:	2102      	movs	r1, #2
 800ae06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	4a5a      	ldr	r2, [pc, #360]	@ (800af7c <HAL_TIM_ConfigClockSource+0x1a4>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	4a59      	ldr	r2, [pc, #356]	@ (800af80 <HAL_TIM_ConfigClockSource+0x1a8>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2280      	movs	r2, #128	@ 0x80
 800ae2e:	0192      	lsls	r2, r2, #6
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d040      	beq.n	800aeb6 <HAL_TIM_ConfigClockSource+0xde>
 800ae34:	2280      	movs	r2, #128	@ 0x80
 800ae36:	0192      	lsls	r2, r2, #6
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d900      	bls.n	800ae3e <HAL_TIM_ConfigClockSource+0x66>
 800ae3c:	e088      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae3e:	2280      	movs	r2, #128	@ 0x80
 800ae40:	0152      	lsls	r2, r2, #5
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d100      	bne.n	800ae48 <HAL_TIM_ConfigClockSource+0x70>
 800ae46:	e088      	b.n	800af5a <HAL_TIM_ConfigClockSource+0x182>
 800ae48:	2280      	movs	r2, #128	@ 0x80
 800ae4a:	0152      	lsls	r2, r2, #5
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d900      	bls.n	800ae52 <HAL_TIM_ConfigClockSource+0x7a>
 800ae50:	e07e      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae52:	2b70      	cmp	r3, #112	@ 0x70
 800ae54:	d018      	beq.n	800ae88 <HAL_TIM_ConfigClockSource+0xb0>
 800ae56:	d900      	bls.n	800ae5a <HAL_TIM_ConfigClockSource+0x82>
 800ae58:	e07a      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae5a:	2b60      	cmp	r3, #96	@ 0x60
 800ae5c:	d04f      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0x126>
 800ae5e:	d900      	bls.n	800ae62 <HAL_TIM_ConfigClockSource+0x8a>
 800ae60:	e076      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae62:	2b50      	cmp	r3, #80	@ 0x50
 800ae64:	d03b      	beq.n	800aede <HAL_TIM_ConfigClockSource+0x106>
 800ae66:	d900      	bls.n	800ae6a <HAL_TIM_ConfigClockSource+0x92>
 800ae68:	e072      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae6a:	2b40      	cmp	r3, #64	@ 0x40
 800ae6c:	d057      	beq.n	800af1e <HAL_TIM_ConfigClockSource+0x146>
 800ae6e:	d900      	bls.n	800ae72 <HAL_TIM_ConfigClockSource+0x9a>
 800ae70:	e06e      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae72:	2b30      	cmp	r3, #48	@ 0x30
 800ae74:	d063      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x166>
 800ae76:	d86b      	bhi.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	d060      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x166>
 800ae7c:	d868      	bhi.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d05d      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x166>
 800ae82:	2b10      	cmp	r3, #16
 800ae84:	d05b      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x166>
 800ae86:	e063      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae98:	f000 feb8 	bl	800bc0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2277      	movs	r2, #119	@ 0x77
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	609a      	str	r2, [r3, #8]
      break;
 800aeb4:	e052      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aec6:	f000 fea1 	bl	800bc0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2180      	movs	r1, #128	@ 0x80
 800aed6:	01c9      	lsls	r1, r1, #7
 800aed8:	430a      	orrs	r2, r1
 800aeda:	609a      	str	r2, [r3, #8]
      break;
 800aedc:	e03e      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeea:	001a      	movs	r2, r3
 800aeec:	f000 fd4a 	bl	800b984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2150      	movs	r1, #80	@ 0x50
 800aef6:	0018      	movs	r0, r3
 800aef8:	f000 fe6c 	bl	800bbd4 <TIM_ITRx_SetConfig>
      break;
 800aefc:	e02e      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af0a:	001a      	movs	r2, r3
 800af0c:	f000 fdaa 	bl	800ba64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2160      	movs	r1, #96	@ 0x60
 800af16:	0018      	movs	r0, r3
 800af18:	f000 fe5c 	bl	800bbd4 <TIM_ITRx_SetConfig>
      break;
 800af1c:	e01e      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af2a:	001a      	movs	r2, r3
 800af2c:	f000 fd2a 	bl	800b984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2140      	movs	r1, #64	@ 0x40
 800af36:	0018      	movs	r0, r3
 800af38:	f000 fe4c 	bl	800bbd4 <TIM_ITRx_SetConfig>
      break;
 800af3c:	e00e      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	0019      	movs	r1, r3
 800af48:	0010      	movs	r0, r2
 800af4a:	f000 fe43 	bl	800bbd4 <TIM_ITRx_SetConfig>
      break;
 800af4e:	e005      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800af50:	230f      	movs	r3, #15
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	2201      	movs	r2, #1
 800af56:	701a      	strb	r2, [r3, #0]
      break;
 800af58:	e000      	b.n	800af5c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800af5a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	223d      	movs	r2, #61	@ 0x3d
 800af60:	2101      	movs	r1, #1
 800af62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	223c      	movs	r2, #60	@ 0x3c
 800af68:	2100      	movs	r1, #0
 800af6a:	5499      	strb	r1, [r3, r2]

  return status;
 800af6c:	230f      	movs	r3, #15
 800af6e:	18fb      	adds	r3, r7, r3
 800af70:	781b      	ldrb	r3, [r3, #0]
}
 800af72:	0018      	movs	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	b004      	add	sp, #16
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	46c0      	nop			@ (mov r8, r8)
 800af7c:	ffceff88 	.word	0xffceff88
 800af80:	ffff00ff 	.word	0xffff00ff

0800af84 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b0c      	cmp	r3, #12
 800af96:	d01e      	beq.n	800afd6 <HAL_TIM_ReadCapturedValue+0x52>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b0c      	cmp	r3, #12
 800af9c:	d820      	bhi.n	800afe0 <HAL_TIM_ReadCapturedValue+0x5c>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d013      	beq.n	800afcc <HAL_TIM_ReadCapturedValue+0x48>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d81a      	bhi.n	800afe0 <HAL_TIM_ReadCapturedValue+0x5c>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <HAL_TIM_ReadCapturedValue+0x34>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	d005      	beq.n	800afc2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800afb6:	e013      	b.n	800afe0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afbe:	60fb      	str	r3, [r7, #12]
      break;
 800afc0:	e00f      	b.n	800afe2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc8:	60fb      	str	r3, [r7, #12]
      break;
 800afca:	e00a      	b.n	800afe2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd2:	60fb      	str	r3, [r7, #12]
      break;
 800afd4:	e005      	b.n	800afe2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afdc:	60fb      	str	r3, [r7, #12]
      break;
 800afde:	e000      	b.n	800afe2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800afe0:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800afe2:	68fb      	ldr	r3, [r7, #12]
}
 800afe4:	0018      	movs	r0, r3
 800afe6:	46bd      	mov	sp, r7
 800afe8:	b004      	add	sp, #16
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aff4:	46c0      	nop			@ (mov r8, r8)
 800aff6:	46bd      	mov	sp, r7
 800aff8:	b002      	add	sp, #8
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b004:	46c0      	nop			@ (mov r8, r8)
 800b006:	46bd      	mov	sp, r7
 800b008:	b002      	add	sp, #8
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b014:	46c0      	nop			@ (mov r8, r8)
 800b016:	46bd      	mov	sp, r7
 800b018:	b002      	add	sp, #8
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b024:	46c0      	nop			@ (mov r8, r8)
 800b026:	46bd      	mov	sp, r7
 800b028:	b002      	add	sp, #8
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b034:	46c0      	nop			@ (mov r8, r8)
 800b036:	46bd      	mov	sp, r7
 800b038:	b002      	add	sp, #8
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b044:	46c0      	nop			@ (mov r8, r8)
 800b046:	46bd      	mov	sp, r7
 800b048:	b002      	add	sp, #8
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b054:	46c0      	nop			@ (mov r8, r8)
 800b056:	46bd      	mov	sp, r7
 800b058:	b002      	add	sp, #8
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b064:	46c0      	nop			@ (mov r8, r8)
 800b066:	46bd      	mov	sp, r7
 800b068:	b002      	add	sp, #8
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b074:	46c0      	nop			@ (mov r8, r8)
 800b076:	46bd      	mov	sp, r7
 800b078:	b002      	add	sp, #8
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b084:	46c0      	nop			@ (mov r8, r8)
 800b086:	46bd      	mov	sp, r7
 800b088:	b002      	add	sp, #8
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	607a      	str	r2, [r7, #4]
 800b096:	230b      	movs	r3, #11
 800b098:	18fb      	adds	r3, r7, r3
 800b09a:	1c0a      	adds	r2, r1, #0
 800b09c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b09e:	2317      	movs	r3, #23
 800b0a0:	18fb      	adds	r3, r7, r3
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e0ea      	b.n	800b286 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	223d      	movs	r2, #61	@ 0x3d
 800b0b4:	5c9b      	ldrb	r3, [r3, r2]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d000      	beq.n	800b0be <HAL_TIM_RegisterCallback+0x32>
 800b0bc:	e08e      	b.n	800b1dc <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b0be:	230b      	movs	r3, #11
 800b0c0:	18fb      	adds	r3, r7, r3
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	2b1b      	cmp	r3, #27
 800b0c6:	d900      	bls.n	800b0ca <HAL_TIM_RegisterCallback+0x3e>
 800b0c8:	e083      	b.n	800b1d2 <HAL_TIM_RegisterCallback+0x146>
 800b0ca:	009a      	lsls	r2, r3, #2
 800b0cc:	4b70      	ldr	r3, [pc, #448]	@ (800b290 <HAL_TIM_RegisterCallback+0x204>)
 800b0ce:	18d3      	adds	r3, r2, r3
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b0da:	e0d1      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b0e2:	e0cd      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b0ea:	e0c9      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b0f2:	e0c5      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b0fa:	e0c1      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b102:	e0bd      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b10a:	e0b9      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b112:	e0b5      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b11a:	e0b1      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b122:	e0ad      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b12a:	e0a9      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b132:	e0a5      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b13a:	e0a1      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2180      	movs	r1, #128	@ 0x80
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	505a      	str	r2, [r3, r1]
        break;
 800b144:	e09c      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2184      	movs	r1, #132	@ 0x84
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	505a      	str	r2, [r3, r1]
        break;
 800b14e:	e097      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2188      	movs	r1, #136	@ 0x88
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	505a      	str	r2, [r3, r1]
        break;
 800b158:	e092      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	218c      	movs	r1, #140	@ 0x8c
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	505a      	str	r2, [r3, r1]
        break;
 800b162:	e08d      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2190      	movs	r1, #144	@ 0x90
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	505a      	str	r2, [r3, r1]
        break;
 800b16c:	e088      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2194      	movs	r1, #148	@ 0x94
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	505a      	str	r2, [r3, r1]
        break;
 800b176:	e083      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2198      	movs	r1, #152	@ 0x98
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	505a      	str	r2, [r3, r1]
        break;
 800b180:	e07e      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	219c      	movs	r1, #156	@ 0x9c
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	505a      	str	r2, [r3, r1]
        break;
 800b18a:	e079      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	21a0      	movs	r1, #160	@ 0xa0
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	505a      	str	r2, [r3, r1]
        break;
 800b194:	e074      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	21a4      	movs	r1, #164	@ 0xa4
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	505a      	str	r2, [r3, r1]
        break;
 800b19e:	e06f      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	21a8      	movs	r1, #168	@ 0xa8
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	505a      	str	r2, [r3, r1]
        break;
 800b1a8:	e06a      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	21ac      	movs	r1, #172	@ 0xac
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	505a      	str	r2, [r3, r1]
        break;
 800b1b2:	e065      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	21b0      	movs	r1, #176	@ 0xb0
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	505a      	str	r2, [r3, r1]
        break;
 800b1bc:	e060      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	21b4      	movs	r1, #180	@ 0xb4
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	505a      	str	r2, [r3, r1]
        break;
 800b1c6:	e05b      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	21b8      	movs	r1, #184	@ 0xb8
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	505a      	str	r2, [r3, r1]
        break;
 800b1d0:	e056      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b1d2:	2317      	movs	r3, #23
 800b1d4:	18fb      	adds	r3, r7, r3
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	701a      	strb	r2, [r3, #0]
        break;
 800b1da:	e051      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	223d      	movs	r2, #61	@ 0x3d
 800b1e0:	5c9b      	ldrb	r3, [r3, r2]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d147      	bne.n	800b278 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800b1e8:	230b      	movs	r3, #11
 800b1ea:	18fb      	adds	r3, r7, r3
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b0d      	cmp	r3, #13
 800b1f0:	d83d      	bhi.n	800b26e <HAL_TIM_RegisterCallback+0x1e2>
 800b1f2:	009a      	lsls	r2, r3, #2
 800b1f4:	4b27      	ldr	r3, [pc, #156]	@ (800b294 <HAL_TIM_RegisterCallback+0x208>)
 800b1f6:	18d3      	adds	r3, r2, r3
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b202:	e03d      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b20a:	e039      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b212:	e035      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b21a:	e031      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b222:	e02d      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b22a:	e029      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b232:	e025      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b23a:	e021      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b242:	e01d      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b24a:	e019      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b252:	e015      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b25a:	e011      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b262:	e00d      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2180      	movs	r1, #128	@ 0x80
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	505a      	str	r2, [r3, r1]
        break;
 800b26c:	e008      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b26e:	2317      	movs	r3, #23
 800b270:	18fb      	adds	r3, r7, r3
 800b272:	2201      	movs	r2, #1
 800b274:	701a      	strb	r2, [r3, #0]
        break;
 800b276:	e003      	b.n	800b280 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b278:	2317      	movs	r3, #23
 800b27a:	18fb      	adds	r3, r7, r3
 800b27c:	2201      	movs	r2, #1
 800b27e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b280:	2317      	movs	r3, #23
 800b282:	18fb      	adds	r3, r7, r3
 800b284:	781b      	ldrb	r3, [r3, #0]
}
 800b286:	0018      	movs	r0, r3
 800b288:	46bd      	mov	sp, r7
 800b28a:	b006      	add	sp, #24
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	46c0      	nop			@ (mov r8, r8)
 800b290:	0800e208 	.word	0x0800e208
 800b294:	0800e278 	.word	0x0800e278

0800b298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a37      	ldr	r2, [pc, #220]	@ (800b388 <TIM_Base_SetConfig+0xf0>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d008      	beq.n	800b2c2 <TIM_Base_SetConfig+0x2a>
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	2380      	movs	r3, #128	@ 0x80
 800b2b4:	05db      	lsls	r3, r3, #23
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d003      	beq.n	800b2c2 <TIM_Base_SetConfig+0x2a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a33      	ldr	r2, [pc, #204]	@ (800b38c <TIM_Base_SetConfig+0xf4>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d108      	bne.n	800b2d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2270      	movs	r2, #112	@ 0x70
 800b2c6:	4393      	bics	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a2c      	ldr	r2, [pc, #176]	@ (800b388 <TIM_Base_SetConfig+0xf0>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d014      	beq.n	800b306 <TIM_Base_SetConfig+0x6e>
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	2380      	movs	r3, #128	@ 0x80
 800b2e0:	05db      	lsls	r3, r3, #23
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d00f      	beq.n	800b306 <TIM_Base_SetConfig+0x6e>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a28      	ldr	r2, [pc, #160]	@ (800b38c <TIM_Base_SetConfig+0xf4>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00b      	beq.n	800b306 <TIM_Base_SetConfig+0x6e>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a27      	ldr	r2, [pc, #156]	@ (800b390 <TIM_Base_SetConfig+0xf8>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d007      	beq.n	800b306 <TIM_Base_SetConfig+0x6e>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a26      	ldr	r2, [pc, #152]	@ (800b394 <TIM_Base_SetConfig+0xfc>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d003      	beq.n	800b306 <TIM_Base_SetConfig+0x6e>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a25      	ldr	r2, [pc, #148]	@ (800b398 <TIM_Base_SetConfig+0x100>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d108      	bne.n	800b318 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a24      	ldr	r2, [pc, #144]	@ (800b39c <TIM_Base_SetConfig+0x104>)
 800b30a:	4013      	ands	r3, r2
 800b30c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4313      	orrs	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2280      	movs	r2, #128	@ 0x80
 800b31c:	4393      	bics	r3, r2
 800b31e:	001a      	movs	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	4313      	orrs	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	689a      	ldr	r2, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a11      	ldr	r2, [pc, #68]	@ (800b388 <TIM_Base_SetConfig+0xf0>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d007      	beq.n	800b356 <TIM_Base_SetConfig+0xbe>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a12      	ldr	r2, [pc, #72]	@ (800b394 <TIM_Base_SetConfig+0xfc>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d003      	beq.n	800b356 <TIM_Base_SetConfig+0xbe>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a11      	ldr	r2, [pc, #68]	@ (800b398 <TIM_Base_SetConfig+0x100>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d103      	bne.n	800b35e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	691a      	ldr	r2, [r3, #16]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2201      	movs	r2, #1
 800b362:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	2201      	movs	r2, #1
 800b36a:	4013      	ands	r3, r2
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d106      	bne.n	800b37e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	2201      	movs	r2, #1
 800b376:	4393      	bics	r3, r2
 800b378:	001a      	movs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	611a      	str	r2, [r3, #16]
  }
}
 800b37e:	46c0      	nop			@ (mov r8, r8)
 800b380:	46bd      	mov	sp, r7
 800b382:	b004      	add	sp, #16
 800b384:	bd80      	pop	{r7, pc}
 800b386:	46c0      	nop			@ (mov r8, r8)
 800b388:	40012c00 	.word	0x40012c00
 800b38c:	40000400 	.word	0x40000400
 800b390:	40002000 	.word	0x40002000
 800b394:	40014400 	.word	0x40014400
 800b398:	40014800 	.word	0x40014800
 800b39c:	fffffcff 	.word	0xfffffcff

0800b3a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a1b      	ldr	r3, [r3, #32]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	4393      	bics	r3, r2
 800b3b8:	001a      	movs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4a2e      	ldr	r2, [pc, #184]	@ (800b488 <TIM_OC1_SetConfig+0xe8>)
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2203      	movs	r2, #3
 800b3d6:	4393      	bics	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	4393      	bics	r3, r2
 800b3ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	697a      	ldr	r2, [r7, #20]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a24      	ldr	r2, [pc, #144]	@ (800b48c <TIM_OC1_SetConfig+0xec>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d007      	beq.n	800b40e <TIM_OC1_SetConfig+0x6e>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a23      	ldr	r2, [pc, #140]	@ (800b490 <TIM_OC1_SetConfig+0xf0>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d003      	beq.n	800b40e <TIM_OC1_SetConfig+0x6e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a22      	ldr	r2, [pc, #136]	@ (800b494 <TIM_OC1_SetConfig+0xf4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d10c      	bne.n	800b428 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2208      	movs	r2, #8
 800b412:	4393      	bics	r3, r2
 800b414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	2204      	movs	r2, #4
 800b424:	4393      	bics	r3, r2
 800b426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a18      	ldr	r2, [pc, #96]	@ (800b48c <TIM_OC1_SetConfig+0xec>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d007      	beq.n	800b440 <TIM_OC1_SetConfig+0xa0>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a17      	ldr	r2, [pc, #92]	@ (800b490 <TIM_OC1_SetConfig+0xf0>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d003      	beq.n	800b440 <TIM_OC1_SetConfig+0xa0>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a16      	ldr	r2, [pc, #88]	@ (800b494 <TIM_OC1_SetConfig+0xf4>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d111      	bne.n	800b464 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	4a15      	ldr	r2, [pc, #84]	@ (800b498 <TIM_OC1_SetConfig+0xf8>)
 800b444:	4013      	ands	r3, r2
 800b446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4a14      	ldr	r2, [pc, #80]	@ (800b49c <TIM_OC1_SetConfig+0xfc>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	4313      	orrs	r3, r2
 800b458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	4313      	orrs	r3, r2
 800b462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	621a      	str	r2, [r3, #32]
}
 800b47e:	46c0      	nop			@ (mov r8, r8)
 800b480:	46bd      	mov	sp, r7
 800b482:	b006      	add	sp, #24
 800b484:	bd80      	pop	{r7, pc}
 800b486:	46c0      	nop			@ (mov r8, r8)
 800b488:	fffeff8f 	.word	0xfffeff8f
 800b48c:	40012c00 	.word	0x40012c00
 800b490:	40014400 	.word	0x40014400
 800b494:	40014800 	.word	0x40014800
 800b498:	fffffeff 	.word	0xfffffeff
 800b49c:	fffffdff 	.word	0xfffffdff

0800b4a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	2210      	movs	r2, #16
 800b4b6:	4393      	bics	r3, r2
 800b4b8:	001a      	movs	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4a2c      	ldr	r2, [pc, #176]	@ (800b580 <TIM_OC2_SetConfig+0xe0>)
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4a2b      	ldr	r2, [pc, #172]	@ (800b584 <TIM_OC2_SetConfig+0xe4>)
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	021b      	lsls	r3, r3, #8
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	4393      	bics	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a22      	ldr	r2, [pc, #136]	@ (800b588 <TIM_OC2_SetConfig+0xe8>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10d      	bne.n	800b51e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2280      	movs	r2, #128	@ 0x80
 800b506:	4393      	bics	r3, r2
 800b508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2240      	movs	r2, #64	@ 0x40
 800b51a:	4393      	bics	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a19      	ldr	r2, [pc, #100]	@ (800b588 <TIM_OC2_SetConfig+0xe8>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d007      	beq.n	800b536 <TIM_OC2_SetConfig+0x96>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a18      	ldr	r2, [pc, #96]	@ (800b58c <TIM_OC2_SetConfig+0xec>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d003      	beq.n	800b536 <TIM_OC2_SetConfig+0x96>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a17      	ldr	r2, [pc, #92]	@ (800b590 <TIM_OC2_SetConfig+0xf0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d113      	bne.n	800b55e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	4a16      	ldr	r2, [pc, #88]	@ (800b594 <TIM_OC2_SetConfig+0xf4>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	4a15      	ldr	r2, [pc, #84]	@ (800b598 <TIM_OC2_SetConfig+0xf8>)
 800b542:	4013      	ands	r3, r2
 800b544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	621a      	str	r2, [r3, #32]
}
 800b578:	46c0      	nop			@ (mov r8, r8)
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b006      	add	sp, #24
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	feff8fff 	.word	0xfeff8fff
 800b584:	fffffcff 	.word	0xfffffcff
 800b588:	40012c00 	.word	0x40012c00
 800b58c:	40014400 	.word	0x40014400
 800b590:	40014800 	.word	0x40014800
 800b594:	fffffbff 	.word	0xfffffbff
 800b598:	fffff7ff 	.word	0xfffff7ff

0800b59c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	4a31      	ldr	r2, [pc, #196]	@ (800b678 <TIM_OC3_SetConfig+0xdc>)
 800b5b2:	401a      	ands	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b67c <TIM_OC3_SetConfig+0xe0>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	4393      	bics	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	4a27      	ldr	r2, [pc, #156]	@ (800b680 <TIM_OC3_SetConfig+0xe4>)
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	021b      	lsls	r3, r3, #8
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a23      	ldr	r2, [pc, #140]	@ (800b684 <TIM_OC3_SetConfig+0xe8>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d10d      	bne.n	800b616 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	4a22      	ldr	r2, [pc, #136]	@ (800b688 <TIM_OC3_SetConfig+0xec>)
 800b5fe:	4013      	ands	r3, r2
 800b600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	021b      	lsls	r3, r3, #8
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	4a1e      	ldr	r2, [pc, #120]	@ (800b68c <TIM_OC3_SetConfig+0xf0>)
 800b612:	4013      	ands	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a1a      	ldr	r2, [pc, #104]	@ (800b684 <TIM_OC3_SetConfig+0xe8>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d007      	beq.n	800b62e <TIM_OC3_SetConfig+0x92>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a1b      	ldr	r2, [pc, #108]	@ (800b690 <TIM_OC3_SetConfig+0xf4>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d003      	beq.n	800b62e <TIM_OC3_SetConfig+0x92>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a1a      	ldr	r2, [pc, #104]	@ (800b694 <TIM_OC3_SetConfig+0xf8>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d113      	bne.n	800b656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	4a19      	ldr	r2, [pc, #100]	@ (800b698 <TIM_OC3_SetConfig+0xfc>)
 800b632:	4013      	ands	r3, r2
 800b634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	4a18      	ldr	r2, [pc, #96]	@ (800b69c <TIM_OC3_SetConfig+0x100>)
 800b63a:	4013      	ands	r3, r2
 800b63c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	4313      	orrs	r3, r2
 800b648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	4313      	orrs	r3, r2
 800b654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	697a      	ldr	r2, [r7, #20]
 800b66e:	621a      	str	r2, [r3, #32]
}
 800b670:	46c0      	nop			@ (mov r8, r8)
 800b672:	46bd      	mov	sp, r7
 800b674:	b006      	add	sp, #24
 800b676:	bd80      	pop	{r7, pc}
 800b678:	fffffeff 	.word	0xfffffeff
 800b67c:	fffeff8f 	.word	0xfffeff8f
 800b680:	fffffdff 	.word	0xfffffdff
 800b684:	40012c00 	.word	0x40012c00
 800b688:	fffff7ff 	.word	0xfffff7ff
 800b68c:	fffffbff 	.word	0xfffffbff
 800b690:	40014400 	.word	0x40014400
 800b694:	40014800 	.word	0x40014800
 800b698:	ffffefff 	.word	0xffffefff
 800b69c:	ffffdfff 	.word	0xffffdfff

0800b6a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	4a24      	ldr	r2, [pc, #144]	@ (800b748 <TIM_OC4_SetConfig+0xa8>)
 800b6b6:	401a      	ands	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4a20      	ldr	r2, [pc, #128]	@ (800b74c <TIM_OC4_SetConfig+0xac>)
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4a1f      	ldr	r2, [pc, #124]	@ (800b750 <TIM_OC4_SetConfig+0xb0>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	021b      	lsls	r3, r3, #8
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b754 <TIM_OC4_SetConfig+0xb4>)
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	031b      	lsls	r3, r3, #12
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a17      	ldr	r2, [pc, #92]	@ (800b758 <TIM_OC4_SetConfig+0xb8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d007      	beq.n	800b710 <TIM_OC4_SetConfig+0x70>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a16      	ldr	r2, [pc, #88]	@ (800b75c <TIM_OC4_SetConfig+0xbc>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d003      	beq.n	800b710 <TIM_OC4_SetConfig+0x70>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a15      	ldr	r2, [pc, #84]	@ (800b760 <TIM_OC4_SetConfig+0xc0>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d109      	bne.n	800b724 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	4a14      	ldr	r2, [pc, #80]	@ (800b764 <TIM_OC4_SetConfig+0xc4>)
 800b714:	4013      	ands	r3, r2
 800b716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	019b      	lsls	r3, r3, #6
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	621a      	str	r2, [r3, #32]
}
 800b73e:	46c0      	nop			@ (mov r8, r8)
 800b740:	46bd      	mov	sp, r7
 800b742:	b006      	add	sp, #24
 800b744:	bd80      	pop	{r7, pc}
 800b746:	46c0      	nop			@ (mov r8, r8)
 800b748:	ffffefff 	.word	0xffffefff
 800b74c:	feff8fff 	.word	0xfeff8fff
 800b750:	fffffcff 	.word	0xfffffcff
 800b754:	ffffdfff 	.word	0xffffdfff
 800b758:	40012c00 	.word	0x40012c00
 800b75c:	40014400 	.word	0x40014400
 800b760:	40014800 	.word	0x40014800
 800b764:	ffffbfff 	.word	0xffffbfff

0800b768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	4a21      	ldr	r2, [pc, #132]	@ (800b804 <TIM_OC5_SetConfig+0x9c>)
 800b77e:	401a      	ands	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	4a1d      	ldr	r2, [pc, #116]	@ (800b808 <TIM_OC5_SetConfig+0xa0>)
 800b794:	4013      	ands	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	4a19      	ldr	r2, [pc, #100]	@ (800b80c <TIM_OC5_SetConfig+0xa4>)
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	041b      	lsls	r3, r3, #16
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a15      	ldr	r2, [pc, #84]	@ (800b810 <TIM_OC5_SetConfig+0xa8>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d007      	beq.n	800b7ce <TIM_OC5_SetConfig+0x66>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a14      	ldr	r2, [pc, #80]	@ (800b814 <TIM_OC5_SetConfig+0xac>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d003      	beq.n	800b7ce <TIM_OC5_SetConfig+0x66>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a13      	ldr	r2, [pc, #76]	@ (800b818 <TIM_OC5_SetConfig+0xb0>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d109      	bne.n	800b7e2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b804 <TIM_OC5_SetConfig+0x9c>)
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	021b      	lsls	r3, r3, #8
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	621a      	str	r2, [r3, #32]
}
 800b7fc:	46c0      	nop			@ (mov r8, r8)
 800b7fe:	46bd      	mov	sp, r7
 800b800:	b006      	add	sp, #24
 800b802:	bd80      	pop	{r7, pc}
 800b804:	fffeffff 	.word	0xfffeffff
 800b808:	fffeff8f 	.word	0xfffeff8f
 800b80c:	fffdffff 	.word	0xfffdffff
 800b810:	40012c00 	.word	0x40012c00
 800b814:	40014400 	.word	0x40014400
 800b818:	40014800 	.word	0x40014800

0800b81c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	4a22      	ldr	r2, [pc, #136]	@ (800b8bc <TIM_OC6_SetConfig+0xa0>)
 800b832:	401a      	ands	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4a1e      	ldr	r2, [pc, #120]	@ (800b8c0 <TIM_OC6_SetConfig+0xa4>)
 800b848:	4013      	ands	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	4a1a      	ldr	r2, [pc, #104]	@ (800b8c4 <TIM_OC6_SetConfig+0xa8>)
 800b85c:	4013      	ands	r3, r2
 800b85e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	051b      	lsls	r3, r3, #20
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a16      	ldr	r2, [pc, #88]	@ (800b8c8 <TIM_OC6_SetConfig+0xac>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d007      	beq.n	800b884 <TIM_OC6_SetConfig+0x68>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a15      	ldr	r2, [pc, #84]	@ (800b8cc <TIM_OC6_SetConfig+0xb0>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d003      	beq.n	800b884 <TIM_OC6_SetConfig+0x68>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a14      	ldr	r2, [pc, #80]	@ (800b8d0 <TIM_OC6_SetConfig+0xb4>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d109      	bne.n	800b898 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	4a13      	ldr	r2, [pc, #76]	@ (800b8d4 <TIM_OC6_SetConfig+0xb8>)
 800b888:	4013      	ands	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	029b      	lsls	r3, r3, #10
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	4313      	orrs	r3, r2
 800b896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	621a      	str	r2, [r3, #32]
}
 800b8b2:	46c0      	nop			@ (mov r8, r8)
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	b006      	add	sp, #24
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	46c0      	nop			@ (mov r8, r8)
 800b8bc:	ffefffff 	.word	0xffefffff
 800b8c0:	feff8fff 	.word	0xfeff8fff
 800b8c4:	ffdfffff 	.word	0xffdfffff
 800b8c8:	40012c00 	.word	0x40012c00
 800b8cc:	40014400 	.word	0x40014400
 800b8d0:	40014800 	.word	0x40014800
 800b8d4:	fffbffff 	.word	0xfffbffff

0800b8d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6a1b      	ldr	r3, [r3, #32]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	4393      	bics	r3, r2
 800b8f4:	001a      	movs	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	4a1e      	ldr	r2, [pc, #120]	@ (800b97c <TIM_TI1_SetConfig+0xa4>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d008      	beq.n	800b91a <TIM_TI1_SetConfig+0x42>
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	2380      	movs	r3, #128	@ 0x80
 800b90c:	05db      	lsls	r3, r3, #23
 800b90e:	429a      	cmp	r2, r3
 800b910:	d003      	beq.n	800b91a <TIM_TI1_SetConfig+0x42>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4a1a      	ldr	r2, [pc, #104]	@ (800b980 <TIM_TI1_SetConfig+0xa8>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d101      	bne.n	800b91e <TIM_TI1_SetConfig+0x46>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e000      	b.n	800b920 <TIM_TI1_SetConfig+0x48>
 800b91e:	2300      	movs	r3, #0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d008      	beq.n	800b936 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2203      	movs	r2, #3
 800b928:	4393      	bics	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4313      	orrs	r3, r2
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e003      	b.n	800b93e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2201      	movs	r2, #1
 800b93a:	4313      	orrs	r3, r2
 800b93c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	22f0      	movs	r2, #240	@ 0xf0
 800b942:	4393      	bics	r3, r2
 800b944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	22ff      	movs	r2, #255	@ 0xff
 800b94c:	4013      	ands	r3, r2
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	220a      	movs	r2, #10
 800b958:	4393      	bics	r3, r2
 800b95a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	220a      	movs	r2, #10
 800b960:	4013      	ands	r3, r2
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	4313      	orrs	r3, r2
 800b966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	621a      	str	r2, [r3, #32]
}
 800b974:	46c0      	nop			@ (mov r8, r8)
 800b976:	46bd      	mov	sp, r7
 800b978:	b006      	add	sp, #24
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	40012c00 	.word	0x40012c00
 800b980:	40000400 	.word	0x40000400

0800b984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	2201      	movs	r2, #1
 800b99c:	4393      	bics	r3, r2
 800b99e:	001a      	movs	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	22f0      	movs	r2, #240	@ 0xf0
 800b9ae:	4393      	bics	r3, r2
 800b9b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	011b      	lsls	r3, r3, #4
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	220a      	movs	r2, #10
 800b9c0:	4393      	bics	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	621a      	str	r2, [r3, #32]
}
 800b9d8:	46c0      	nop			@ (mov r8, r8)
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	b006      	add	sp, #24
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	2210      	movs	r2, #16
 800b9fa:	4393      	bics	r3, r2
 800b9fc:	001a      	movs	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	4a14      	ldr	r2, [pc, #80]	@ (800ba5c <TIM_TI2_SetConfig+0x7c>)
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	021b      	lsls	r3, r3, #8
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	4a10      	ldr	r2, [pc, #64]	@ (800ba60 <TIM_TI2_SetConfig+0x80>)
 800ba1e:	4013      	ands	r3, r2
 800ba20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	031b      	lsls	r3, r3, #12
 800ba26:	041b      	lsls	r3, r3, #16
 800ba28:	0c1b      	lsrs	r3, r3, #16
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	22a0      	movs	r2, #160	@ 0xa0
 800ba34:	4393      	bics	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	22a0      	movs	r2, #160	@ 0xa0
 800ba3e:	4013      	ands	r3, r2
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	621a      	str	r2, [r3, #32]
}
 800ba52:	46c0      	nop			@ (mov r8, r8)
 800ba54:	46bd      	mov	sp, r7
 800ba56:	b006      	add	sp, #24
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	46c0      	nop			@ (mov r8, r8)
 800ba5c:	fffffcff 	.word	0xfffffcff
 800ba60:	ffff0fff 	.word	0xffff0fff

0800ba64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	2210      	movs	r2, #16
 800ba7c:	4393      	bics	r3, r2
 800ba7e:	001a      	movs	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	@ (800bac4 <TIM_TI2_ConfigInputStage+0x60>)
 800ba8e:	4013      	ands	r3, r2
 800ba90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	031b      	lsls	r3, r3, #12
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	22a0      	movs	r2, #160	@ 0xa0
 800baa0:	4393      	bics	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	4313      	orrs	r3, r2
 800baac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	621a      	str	r2, [r3, #32]
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b006      	add	sp, #24
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	ffff0fff 	.word	0xffff0fff

0800bac8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	4a17      	ldr	r2, [pc, #92]	@ (800bb40 <TIM_TI3_SetConfig+0x78>)
 800bae2:	401a      	ands	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2203      	movs	r2, #3
 800baf2:	4393      	bics	r3, r2
 800baf4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	22f0      	movs	r2, #240	@ 0xf0
 800bb02:	4393      	bics	r3, r2
 800bb04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	011b      	lsls	r3, r3, #4
 800bb0a:	22ff      	movs	r2, #255	@ 0xff
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	4a0b      	ldr	r2, [pc, #44]	@ (800bb44 <TIM_TI3_SetConfig+0x7c>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	021a      	lsls	r2, r3, #8
 800bb20:	23a0      	movs	r3, #160	@ 0xa0
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	4013      	ands	r3, r2
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	621a      	str	r2, [r3, #32]
}
 800bb38:	46c0      	nop			@ (mov r8, r8)
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	b006      	add	sp, #24
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	fffffeff 	.word	0xfffffeff
 800bb44:	fffff5ff 	.word	0xfffff5ff

0800bb48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	4a18      	ldr	r2, [pc, #96]	@ (800bbc4 <TIM_TI4_SetConfig+0x7c>)
 800bb62:	401a      	ands	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	4a15      	ldr	r2, [pc, #84]	@ (800bbc8 <TIM_TI4_SetConfig+0x80>)
 800bb72:	4013      	ands	r3, r2
 800bb74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	021b      	lsls	r3, r3, #8
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	4a12      	ldr	r2, [pc, #72]	@ (800bbcc <TIM_TI4_SetConfig+0x84>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	031b      	lsls	r3, r3, #12
 800bb8c:	041b      	lsls	r3, r3, #16
 800bb8e:	0c1b      	lsrs	r3, r3, #16
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	4a0d      	ldr	r2, [pc, #52]	@ (800bbd0 <TIM_TI4_SetConfig+0x88>)
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	031a      	lsls	r2, r3, #12
 800bba2:	23a0      	movs	r3, #160	@ 0xa0
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	4013      	ands	r3, r2
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	621a      	str	r2, [r3, #32]
}
 800bbba:	46c0      	nop			@ (mov r8, r8)
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	b006      	add	sp, #24
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	46c0      	nop			@ (mov r8, r8)
 800bbc4:	ffffefff 	.word	0xffffefff
 800bbc8:	fffffcff 	.word	0xfffffcff
 800bbcc:	ffff0fff 	.word	0xffff0fff
 800bbd0:	ffff5fff 	.word	0xffff5fff

0800bbd4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4a08      	ldr	r2, [pc, #32]	@ (800bc08 <TIM_ITRx_SetConfig+0x34>)
 800bbe8:	4013      	ands	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	2207      	movs	r2, #7
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	609a      	str	r2, [r3, #8]
}
 800bbfe:	46c0      	nop			@ (mov r8, r8)
 800bc00:	46bd      	mov	sp, r7
 800bc02:	b004      	add	sp, #16
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	46c0      	nop			@ (mov r8, r8)
 800bc08:	ffcfff8f 	.word	0xffcfff8f

0800bc0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	4a09      	ldr	r2, [pc, #36]	@ (800bc48 <TIM_ETR_SetConfig+0x3c>)
 800bc24:	4013      	ands	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	021a      	lsls	r2, r3, #8
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	609a      	str	r2, [r3, #8]
}
 800bc40:	46c0      	nop			@ (mov r8, r8)
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b006      	add	sp, #24
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	ffff00ff 	.word	0xffff00ff

0800bc4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	221f      	movs	r2, #31
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	2201      	movs	r2, #1
 800bc60:	409a      	lsls	r2, r3
 800bc62:	0013      	movs	r3, r2
 800bc64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	43d2      	mvns	r2, r2
 800bc6e:	401a      	ands	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a1a      	ldr	r2, [r3, #32]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	211f      	movs	r1, #31
 800bc7c:	400b      	ands	r3, r1
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	4099      	lsls	r1, r3
 800bc82:	000b      	movs	r3, r1
 800bc84:	431a      	orrs	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	621a      	str	r2, [r3, #32]
}
 800bc8a:	46c0      	nop			@ (mov r8, r8)
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	b006      	add	sp, #24
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2184      	movs	r1, #132	@ 0x84
 800bca0:	4a1c      	ldr	r2, [pc, #112]	@ (800bd14 <TIM_ResetCallback+0x80>)
 800bca2:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2188      	movs	r1, #136	@ 0x88
 800bca8:	4a1b      	ldr	r2, [pc, #108]	@ (800bd18 <TIM_ResetCallback+0x84>)
 800bcaa:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	218c      	movs	r1, #140	@ 0x8c
 800bcb0:	4a1a      	ldr	r2, [pc, #104]	@ (800bd1c <TIM_ResetCallback+0x88>)
 800bcb2:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2190      	movs	r1, #144	@ 0x90
 800bcb8:	4a19      	ldr	r2, [pc, #100]	@ (800bd20 <TIM_ResetCallback+0x8c>)
 800bcba:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2194      	movs	r1, #148	@ 0x94
 800bcc0:	4a18      	ldr	r2, [pc, #96]	@ (800bd24 <TIM_ResetCallback+0x90>)
 800bcc2:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2198      	movs	r1, #152	@ 0x98
 800bcc8:	4a17      	ldr	r2, [pc, #92]	@ (800bd28 <TIM_ResetCallback+0x94>)
 800bcca:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	219c      	movs	r1, #156	@ 0x9c
 800bcd0:	4a16      	ldr	r2, [pc, #88]	@ (800bd2c <TIM_ResetCallback+0x98>)
 800bcd2:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	21a0      	movs	r1, #160	@ 0xa0
 800bcd8:	4a15      	ldr	r2, [pc, #84]	@ (800bd30 <TIM_ResetCallback+0x9c>)
 800bcda:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	21a4      	movs	r1, #164	@ 0xa4
 800bce0:	4a14      	ldr	r2, [pc, #80]	@ (800bd34 <TIM_ResetCallback+0xa0>)
 800bce2:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	21a8      	movs	r1, #168	@ 0xa8
 800bce8:	4a13      	ldr	r2, [pc, #76]	@ (800bd38 <TIM_ResetCallback+0xa4>)
 800bcea:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	21ac      	movs	r1, #172	@ 0xac
 800bcf0:	4a12      	ldr	r2, [pc, #72]	@ (800bd3c <TIM_ResetCallback+0xa8>)
 800bcf2:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	21b0      	movs	r1, #176	@ 0xb0
 800bcf8:	4a11      	ldr	r2, [pc, #68]	@ (800bd40 <TIM_ResetCallback+0xac>)
 800bcfa:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	21b4      	movs	r1, #180	@ 0xb4
 800bd00:	4a10      	ldr	r2, [pc, #64]	@ (800bd44 <TIM_ResetCallback+0xb0>)
 800bd02:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	21b8      	movs	r1, #184	@ 0xb8
 800bd08:	4a0f      	ldr	r2, [pc, #60]	@ (800bd48 <TIM_ResetCallback+0xb4>)
 800bd0a:	505a      	str	r2, [r3, r1]
}
 800bd0c:	46c0      	nop			@ (mov r8, r8)
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	b002      	add	sp, #8
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	0800afed 	.word	0x0800afed
 800bd18:	0800affd 	.word	0x0800affd
 800bd1c:	0800b05d 	.word	0x0800b05d
 800bd20:	0800b06d 	.word	0x0800b06d
 800bd24:	0800b01d 	.word	0x0800b01d
 800bd28:	0800b02d 	.word	0x0800b02d
 800bd2c:	0800b00d 	.word	0x0800b00d
 800bd30:	0800b03d 	.word	0x0800b03d
 800bd34:	0800b04d 	.word	0x0800b04d
 800bd38:	0800b07d 	.word	0x0800b07d
 800bd3c:	0800bf55 	.word	0x0800bf55
 800bd40:	0800bf65 	.word	0x0800bf65
 800bd44:	0800bf75 	.word	0x0800bf75
 800bd48:	0800bf85 	.word	0x0800bf85

0800bd4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	223c      	movs	r2, #60	@ 0x3c
 800bd5a:	5c9b      	ldrb	r3, [r3, r2]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d101      	bne.n	800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd60:	2302      	movs	r3, #2
 800bd62:	e050      	b.n	800be06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	223c      	movs	r2, #60	@ 0x3c
 800bd68:	2101      	movs	r1, #1
 800bd6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	223d      	movs	r2, #61	@ 0x3d
 800bd70:	2102      	movs	r1, #2
 800bd72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a21      	ldr	r2, [pc, #132]	@ (800be10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d108      	bne.n	800bda0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4a20      	ldr	r2, [pc, #128]	@ (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2270      	movs	r2, #112	@ 0x70
 800bda4:	4393      	bics	r3, r2
 800bda6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a14      	ldr	r2, [pc, #80]	@ (800be10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d00a      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	2380      	movs	r3, #128	@ 0x80
 800bdca:	05db      	lsls	r3, r3, #23
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d004      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a10      	ldr	r2, [pc, #64]	@ (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d10c      	bne.n	800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2280      	movs	r2, #128	@ 0x80
 800bdde:	4393      	bics	r3, r2
 800bde0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	223d      	movs	r2, #61	@ 0x3d
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	223c      	movs	r2, #60	@ 0x3c
 800be00:	2100      	movs	r1, #0
 800be02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	0018      	movs	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	b004      	add	sp, #16
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	46c0      	nop			@ (mov r8, r8)
 800be10:	40012c00 	.word	0x40012c00
 800be14:	ff0fffff 	.word	0xff0fffff
 800be18:	40000400 	.word	0x40000400

0800be1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be26:	2300      	movs	r3, #0
 800be28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	223c      	movs	r2, #60	@ 0x3c
 800be2e:	5c9b      	ldrb	r3, [r3, r2]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d101      	bne.n	800be38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800be34:	2302      	movs	r3, #2
 800be36:	e06f      	b.n	800bf18 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	223c      	movs	r2, #60	@ 0x3c
 800be3c:	2101      	movs	r1, #1
 800be3e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	22ff      	movs	r2, #255	@ 0xff
 800be44:	4393      	bics	r3, r2
 800be46:	001a      	movs	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	4313      	orrs	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4a33      	ldr	r2, [pc, #204]	@ (800bf20 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800be54:	401a      	ands	r2, r3
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4a30      	ldr	r2, [pc, #192]	@ (800bf24 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800be62:	401a      	ands	r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	4313      	orrs	r3, r2
 800be6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4a2e      	ldr	r2, [pc, #184]	@ (800bf28 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800be70:	401a      	ands	r2, r3
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4313      	orrs	r3, r2
 800be78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	4a2b      	ldr	r2, [pc, #172]	@ (800bf2c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800be7e:	401a      	ands	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	4313      	orrs	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4a29      	ldr	r2, [pc, #164]	@ (800bf30 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800be8c:	401a      	ands	r2, r3
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	4313      	orrs	r3, r2
 800be94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4a26      	ldr	r2, [pc, #152]	@ (800bf34 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800be9a:	401a      	ands	r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bea0:	4313      	orrs	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	4a24      	ldr	r2, [pc, #144]	@ (800bf38 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bea8:	401a      	ands	r2, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	041b      	lsls	r3, r3, #16
 800beb0:	4313      	orrs	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4a21      	ldr	r2, [pc, #132]	@ (800bf3c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800beb8:	401a      	ands	r2, r3
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a1e      	ldr	r2, [pc, #120]	@ (800bf40 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d11c      	bne.n	800bf06 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4a1d      	ldr	r2, [pc, #116]	@ (800bf44 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bed0:	401a      	ands	r2, r3
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed6:	051b      	lsls	r3, r3, #20
 800bed8:	4313      	orrs	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4a1a      	ldr	r2, [pc, #104]	@ (800bf48 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bee0:	401a      	ands	r2, r3
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	4a17      	ldr	r2, [pc, #92]	@ (800bf4c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800beee:	401a      	ands	r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4a15      	ldr	r2, [pc, #84]	@ (800bf50 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800befc:	401a      	ands	r2, r3
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	223c      	movs	r2, #60	@ 0x3c
 800bf12:	2100      	movs	r1, #0
 800bf14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	0018      	movs	r0, r3
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	b004      	add	sp, #16
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	fffffcff 	.word	0xfffffcff
 800bf24:	fffffbff 	.word	0xfffffbff
 800bf28:	fffff7ff 	.word	0xfffff7ff
 800bf2c:	ffffefff 	.word	0xffffefff
 800bf30:	ffffdfff 	.word	0xffffdfff
 800bf34:	ffffbfff 	.word	0xffffbfff
 800bf38:	fff0ffff 	.word	0xfff0ffff
 800bf3c:	efffffff 	.word	0xefffffff
 800bf40:	40012c00 	.word	0x40012c00
 800bf44:	ff0fffff 	.word	0xff0fffff
 800bf48:	feffffff 	.word	0xfeffffff
 800bf4c:	fdffffff 	.word	0xfdffffff
 800bf50:	dfffffff 	.word	0xdfffffff

0800bf54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf5c:	46c0      	nop			@ (mov r8, r8)
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	b002      	add	sp, #8
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bf6c:	46c0      	nop			@ (mov r8, r8)
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	b002      	add	sp, #8
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf7c:	46c0      	nop			@ (mov r8, r8)
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	b002      	add	sp, #8
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf8c:	46c0      	nop			@ (mov r8, r8)
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	b002      	add	sp, #8
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e055      	b.n	800c052 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2288      	movs	r2, #136	@ 0x88
 800bfaa:	589b      	ldr	r3, [r3, r2]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d116      	bne.n	800bfde <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2284      	movs	r2, #132	@ 0x84
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	0018      	movs	r0, r3
 800bfbc:	f000 fce0 	bl	800c980 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	22c4      	movs	r2, #196	@ 0xc4
 800bfc4:	589b      	ldr	r3, [r3, r2]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d103      	bne.n	800bfd2 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	21c4      	movs	r1, #196	@ 0xc4
 800bfce:	4a23      	ldr	r2, [pc, #140]	@ (800c05c <HAL_UART_Init+0xc8>)
 800bfd0:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	22c4      	movs	r2, #196	@ 0xc4
 800bfd6:	589b      	ldr	r3, [r3, r2]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	0010      	movs	r0, r2
 800bfdc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2288      	movs	r2, #136	@ 0x88
 800bfe2:	2124      	movs	r1, #36	@ 0x24
 800bfe4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2101      	movs	r1, #1
 800bff2:	438a      	bics	r2, r1
 800bff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	0018      	movs	r0, r3
 800c002:	f000 ff85 	bl	800cf10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	0018      	movs	r0, r3
 800c00a:	f000 fd09 	bl	800ca20 <UART_SetConfig>
 800c00e:	0003      	movs	r3, r0
 800c010:	2b01      	cmp	r3, #1
 800c012:	d101      	bne.n	800c018 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e01c      	b.n	800c052 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	490f      	ldr	r1, [pc, #60]	@ (800c060 <HAL_UART_Init+0xcc>)
 800c024:	400a      	ands	r2, r1
 800c026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	689a      	ldr	r2, [r3, #8]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	212a      	movs	r1, #42	@ 0x2a
 800c034:	438a      	bics	r2, r1
 800c036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2101      	movs	r1, #1
 800c044:	430a      	orrs	r2, r1
 800c046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	0018      	movs	r0, r3
 800c04c:	f001 f814 	bl	800d078 <UART_CheckIdleState>
 800c050:	0003      	movs	r3, r0
}
 800c052:	0018      	movs	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	b002      	add	sp, #8
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	46c0      	nop			@ (mov r8, r8)
 800c05c:	080057b1 	.word	0x080057b1
 800c060:	ffffb7ff 	.word	0xffffb7ff

0800c064 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	230b      	movs	r3, #11
 800c070:	18fb      	adds	r3, r7, r3
 800c072:	1c0a      	adds	r2, r1, #0
 800c074:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c076:	2317      	movs	r3, #23
 800c078:	18fb      	adds	r3, r7, r3
 800c07a:	2200      	movs	r2, #0
 800c07c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d109      	bne.n	800c098 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2290      	movs	r2, #144	@ 0x90
 800c088:	589b      	ldr	r3, [r3, r2]
 800c08a:	2240      	movs	r2, #64	@ 0x40
 800c08c:	431a      	orrs	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2190      	movs	r1, #144	@ 0x90
 800c092:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e08f      	b.n	800c1b8 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2288      	movs	r2, #136	@ 0x88
 800c09c:	589b      	ldr	r3, [r3, r2]
 800c09e:	2b20      	cmp	r3, #32
 800c0a0:	d157      	bne.n	800c152 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800c0a2:	230b      	movs	r3, #11
 800c0a4:	18fb      	adds	r3, r7, r3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b0c      	cmp	r3, #12
 800c0aa:	d845      	bhi.n	800c138 <HAL_UART_RegisterCallback+0xd4>
 800c0ac:	009a      	lsls	r2, r3, #2
 800c0ae:	4b44      	ldr	r3, [pc, #272]	@ (800c1c0 <HAL_UART_RegisterCallback+0x15c>)
 800c0b0:	18d3      	adds	r3, r2, r3
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2194      	movs	r1, #148	@ 0x94
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	505a      	str	r2, [r3, r1]
        break;
 800c0be:	e078      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2198      	movs	r1, #152	@ 0x98
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	505a      	str	r2, [r3, r1]
        break;
 800c0c8:	e073      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	219c      	movs	r1, #156	@ 0x9c
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	505a      	str	r2, [r3, r1]
        break;
 800c0d2:	e06e      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	21a0      	movs	r1, #160	@ 0xa0
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	505a      	str	r2, [r3, r1]
        break;
 800c0dc:	e069      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	21a4      	movs	r1, #164	@ 0xa4
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	505a      	str	r2, [r3, r1]
        break;
 800c0e6:	e064      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	21a8      	movs	r1, #168	@ 0xa8
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	505a      	str	r2, [r3, r1]
        break;
 800c0f0:	e05f      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	21ac      	movs	r1, #172	@ 0xac
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	505a      	str	r2, [r3, r1]
        break;
 800c0fa:	e05a      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	21b0      	movs	r1, #176	@ 0xb0
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	505a      	str	r2, [r3, r1]
        break;
 800c104:	e055      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	21b4      	movs	r1, #180	@ 0xb4
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	505a      	str	r2, [r3, r1]
        break;
 800c10e:	e050      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	21b8      	movs	r1, #184	@ 0xb8
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	505a      	str	r2, [r3, r1]
        break;
 800c118:	e04b      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	21bc      	movs	r1, #188	@ 0xbc
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	505a      	str	r2, [r3, r1]
        break;
 800c122:	e046      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	21c4      	movs	r1, #196	@ 0xc4
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	505a      	str	r2, [r3, r1]
        break;
 800c12c:	e041      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	21c8      	movs	r1, #200	@ 0xc8
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	505a      	str	r2, [r3, r1]
        break;
 800c136:	e03c      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2290      	movs	r2, #144	@ 0x90
 800c13c:	589b      	ldr	r3, [r3, r2]
 800c13e:	2240      	movs	r2, #64	@ 0x40
 800c140:	431a      	orrs	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2190      	movs	r1, #144	@ 0x90
 800c146:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800c148:	2317      	movs	r3, #23
 800c14a:	18fb      	adds	r3, r7, r3
 800c14c:	2201      	movs	r2, #1
 800c14e:	701a      	strb	r2, [r3, #0]
        break;
 800c150:	e02f      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2288      	movs	r2, #136	@ 0x88
 800c156:	589b      	ldr	r3, [r3, r2]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d11e      	bne.n	800c19a <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800c15c:	230b      	movs	r3, #11
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b0b      	cmp	r3, #11
 800c164:	d002      	beq.n	800c16c <HAL_UART_RegisterCallback+0x108>
 800c166:	2b0c      	cmp	r3, #12
 800c168:	d005      	beq.n	800c176 <HAL_UART_RegisterCallback+0x112>
 800c16a:	e009      	b.n	800c180 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	21c4      	movs	r1, #196	@ 0xc4
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	505a      	str	r2, [r3, r1]
        break;
 800c174:	e01d      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	21c8      	movs	r1, #200	@ 0xc8
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	505a      	str	r2, [r3, r1]
        break;
 800c17e:	e018      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2290      	movs	r2, #144	@ 0x90
 800c184:	589b      	ldr	r3, [r3, r2]
 800c186:	2240      	movs	r2, #64	@ 0x40
 800c188:	431a      	orrs	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2190      	movs	r1, #144	@ 0x90
 800c18e:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800c190:	2317      	movs	r3, #23
 800c192:	18fb      	adds	r3, r7, r3
 800c194:	2201      	movs	r2, #1
 800c196:	701a      	strb	r2, [r3, #0]
        break;
 800c198:	e00b      	b.n	800c1b2 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2290      	movs	r2, #144	@ 0x90
 800c19e:	589b      	ldr	r3, [r3, r2]
 800c1a0:	2240      	movs	r2, #64	@ 0x40
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2190      	movs	r1, #144	@ 0x90
 800c1a8:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800c1aa:	2317      	movs	r3, #23
 800c1ac:	18fb      	adds	r3, r7, r3
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c1b2:	2317      	movs	r3, #23
 800c1b4:	18fb      	adds	r3, r7, r3
 800c1b6:	781b      	ldrb	r3, [r3, #0]
}
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	b006      	add	sp, #24
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	0800e2c8 	.word	0x0800e2c8

0800c1c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	1dbb      	adds	r3, r7, #6
 800c1d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	228c      	movs	r2, #140	@ 0x8c
 800c1d6:	589b      	ldr	r3, [r3, r2]
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d14a      	bne.n	800c272 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <HAL_UART_Receive_DMA+0x26>
 800c1e2:	1dbb      	adds	r3, r7, #6
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e042      	b.n	800c274 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	689a      	ldr	r2, [r3, #8]
 800c1f2:	2380      	movs	r3, #128	@ 0x80
 800c1f4:	015b      	lsls	r3, r3, #5
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d109      	bne.n	800c20e <HAL_UART_Receive_DMA+0x4a>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d105      	bne.n	800c20e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2201      	movs	r2, #1
 800c206:	4013      	ands	r3, r2
 800c208:	d001      	beq.n	800c20e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e032      	b.n	800c274 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a18      	ldr	r2, [pc, #96]	@ (800c27c <HAL_UART_Receive_DMA+0xb8>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d020      	beq.n	800c260 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	2380      	movs	r3, #128	@ 0x80
 800c226:	041b      	lsls	r3, r3, #16
 800c228:	4013      	ands	r3, r2
 800c22a:	d019      	beq.n	800c260 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c22c:	f3ef 8310 	mrs	r3, PRIMASK
 800c230:	613b      	str	r3, [r7, #16]
  return(result);
 800c232:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	2301      	movs	r3, #1
 800c238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f383 8810 	msr	PRIMASK, r3
}
 800c240:	46c0      	nop			@ (mov r8, r8)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2180      	movs	r1, #128	@ 0x80
 800c24e:	04c9      	lsls	r1, r1, #19
 800c250:	430a      	orrs	r2, r1
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	f383 8810 	msr	PRIMASK, r3
}
 800c25e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c260:	1dbb      	adds	r3, r7, #6
 800c262:	881a      	ldrh	r2, [r3, #0]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	0018      	movs	r0, r3
 800c26a:	f001 f81f 	bl	800d2ac <UART_Start_Receive_DMA>
 800c26e:	0003      	movs	r3, r0
 800c270:	e000      	b.n	800c274 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c272:	2302      	movs	r3, #2
  }
}
 800c274:	0018      	movs	r0, r3
 800c276:	46bd      	mov	sp, r7
 800c278:	b008      	add	sp, #32
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	40008000 	.word	0x40008000

0800c280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c280:	b5b0      	push	{r4, r5, r7, lr}
 800c282:	b0aa      	sub	sp, #168	@ 0xa8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	22a4      	movs	r2, #164	@ 0xa4
 800c290:	18b9      	adds	r1, r7, r2
 800c292:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	20a0      	movs	r0, #160	@ 0xa0
 800c29c:	1839      	adds	r1, r7, r0
 800c29e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	249c      	movs	r4, #156	@ 0x9c
 800c2a8:	1939      	adds	r1, r7, r4
 800c2aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c2ac:	0011      	movs	r1, r2
 800c2ae:	18bb      	adds	r3, r7, r2
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4aa5      	ldr	r2, [pc, #660]	@ (800c548 <HAL_UART_IRQHandler+0x2c8>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	2298      	movs	r2, #152	@ 0x98
 800c2b8:	18bd      	adds	r5, r7, r2
 800c2ba:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c2bc:	18bb      	adds	r3, r7, r2
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d11a      	bne.n	800c2fa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2c4:	187b      	adds	r3, r7, r1
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	d015      	beq.n	800c2fa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2ce:	183b      	adds	r3, r7, r0
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2220      	movs	r2, #32
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	d105      	bne.n	800c2e4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2d8:	193b      	adds	r3, r7, r4
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	2380      	movs	r3, #128	@ 0x80
 800c2de:	055b      	lsls	r3, r3, #21
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	d00a      	beq.n	800c2fa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d100      	bne.n	800c2ee <HAL_UART_IRQHandler+0x6e>
 800c2ec:	e2ea      	b.n	800c8c4 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	0010      	movs	r0, r2
 800c2f6:	4798      	blx	r3
      }
      return;
 800c2f8:	e2e4      	b.n	800c8c4 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2fa:	2398      	movs	r3, #152	@ 0x98
 800c2fc:	18fb      	adds	r3, r7, r3
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d100      	bne.n	800c306 <HAL_UART_IRQHandler+0x86>
 800c304:	e128      	b.n	800c558 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c306:	239c      	movs	r3, #156	@ 0x9c
 800c308:	18fb      	adds	r3, r7, r3
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a8f      	ldr	r2, [pc, #572]	@ (800c54c <HAL_UART_IRQHandler+0x2cc>)
 800c30e:	4013      	ands	r3, r2
 800c310:	d106      	bne.n	800c320 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c312:	23a0      	movs	r3, #160	@ 0xa0
 800c314:	18fb      	adds	r3, r7, r3
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a8d      	ldr	r2, [pc, #564]	@ (800c550 <HAL_UART_IRQHandler+0x2d0>)
 800c31a:	4013      	ands	r3, r2
 800c31c:	d100      	bne.n	800c320 <HAL_UART_IRQHandler+0xa0>
 800c31e:	e11b      	b.n	800c558 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c320:	23a4      	movs	r3, #164	@ 0xa4
 800c322:	18fb      	adds	r3, r7, r3
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2201      	movs	r2, #1
 800c328:	4013      	ands	r3, r2
 800c32a:	d012      	beq.n	800c352 <HAL_UART_IRQHandler+0xd2>
 800c32c:	23a0      	movs	r3, #160	@ 0xa0
 800c32e:	18fb      	adds	r3, r7, r3
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	2380      	movs	r3, #128	@ 0x80
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	4013      	ands	r3, r2
 800c338:	d00b      	beq.n	800c352 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2201      	movs	r2, #1
 800c340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2290      	movs	r2, #144	@ 0x90
 800c346:	589b      	ldr	r3, [r3, r2]
 800c348:	2201      	movs	r2, #1
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2190      	movs	r1, #144	@ 0x90
 800c350:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c352:	23a4      	movs	r3, #164	@ 0xa4
 800c354:	18fb      	adds	r3, r7, r3
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2202      	movs	r2, #2
 800c35a:	4013      	ands	r3, r2
 800c35c:	d011      	beq.n	800c382 <HAL_UART_IRQHandler+0x102>
 800c35e:	239c      	movs	r3, #156	@ 0x9c
 800c360:	18fb      	adds	r3, r7, r3
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2201      	movs	r2, #1
 800c366:	4013      	ands	r3, r2
 800c368:	d00b      	beq.n	800c382 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2202      	movs	r2, #2
 800c370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2290      	movs	r2, #144	@ 0x90
 800c376:	589b      	ldr	r3, [r3, r2]
 800c378:	2204      	movs	r2, #4
 800c37a:	431a      	orrs	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2190      	movs	r1, #144	@ 0x90
 800c380:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c382:	23a4      	movs	r3, #164	@ 0xa4
 800c384:	18fb      	adds	r3, r7, r3
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2204      	movs	r2, #4
 800c38a:	4013      	ands	r3, r2
 800c38c:	d011      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x132>
 800c38e:	239c      	movs	r3, #156	@ 0x9c
 800c390:	18fb      	adds	r3, r7, r3
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2201      	movs	r2, #1
 800c396:	4013      	ands	r3, r2
 800c398:	d00b      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2204      	movs	r2, #4
 800c3a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2290      	movs	r2, #144	@ 0x90
 800c3a6:	589b      	ldr	r3, [r3, r2]
 800c3a8:	2202      	movs	r2, #2
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2190      	movs	r1, #144	@ 0x90
 800c3b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c3b2:	23a4      	movs	r3, #164	@ 0xa4
 800c3b4:	18fb      	adds	r3, r7, r3
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2208      	movs	r2, #8
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	d017      	beq.n	800c3ee <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c3be:	23a0      	movs	r3, #160	@ 0xa0
 800c3c0:	18fb      	adds	r3, r7, r3
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	d105      	bne.n	800c3d6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c3ca:	239c      	movs	r3, #156	@ 0x9c
 800c3cc:	18fb      	adds	r3, r7, r3
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a5e      	ldr	r2, [pc, #376]	@ (800c54c <HAL_UART_IRQHandler+0x2cc>)
 800c3d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c3d4:	d00b      	beq.n	800c3ee <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2208      	movs	r2, #8
 800c3dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2290      	movs	r2, #144	@ 0x90
 800c3e2:	589b      	ldr	r3, [r3, r2]
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2190      	movs	r1, #144	@ 0x90
 800c3ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3ee:	23a4      	movs	r3, #164	@ 0xa4
 800c3f0:	18fb      	adds	r3, r7, r3
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	2380      	movs	r3, #128	@ 0x80
 800c3f6:	011b      	lsls	r3, r3, #4
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	d013      	beq.n	800c424 <HAL_UART_IRQHandler+0x1a4>
 800c3fc:	23a0      	movs	r3, #160	@ 0xa0
 800c3fe:	18fb      	adds	r3, r7, r3
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	2380      	movs	r3, #128	@ 0x80
 800c404:	04db      	lsls	r3, r3, #19
 800c406:	4013      	ands	r3, r2
 800c408:	d00c      	beq.n	800c424 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2280      	movs	r2, #128	@ 0x80
 800c410:	0112      	lsls	r2, r2, #4
 800c412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2290      	movs	r2, #144	@ 0x90
 800c418:	589b      	ldr	r3, [r3, r2]
 800c41a:	2220      	movs	r2, #32
 800c41c:	431a      	orrs	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2190      	movs	r1, #144	@ 0x90
 800c422:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2290      	movs	r2, #144	@ 0x90
 800c428:	589b      	ldr	r3, [r3, r2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d100      	bne.n	800c430 <HAL_UART_IRQHandler+0x1b0>
 800c42e:	e24b      	b.n	800c8c8 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c430:	23a4      	movs	r3, #164	@ 0xa4
 800c432:	18fb      	adds	r3, r7, r3
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2220      	movs	r2, #32
 800c438:	4013      	ands	r3, r2
 800c43a:	d015      	beq.n	800c468 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c43c:	23a0      	movs	r3, #160	@ 0xa0
 800c43e:	18fb      	adds	r3, r7, r3
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2220      	movs	r2, #32
 800c444:	4013      	ands	r3, r2
 800c446:	d106      	bne.n	800c456 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c448:	239c      	movs	r3, #156	@ 0x9c
 800c44a:	18fb      	adds	r3, r7, r3
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	2380      	movs	r3, #128	@ 0x80
 800c450:	055b      	lsls	r3, r3, #21
 800c452:	4013      	ands	r3, r2
 800c454:	d008      	beq.n	800c468 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	0010      	movs	r0, r2
 800c466:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2290      	movs	r2, #144	@ 0x90
 800c46c:	589b      	ldr	r3, [r3, r2]
 800c46e:	2194      	movs	r1, #148	@ 0x94
 800c470:	187a      	adds	r2, r7, r1
 800c472:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	2240      	movs	r2, #64	@ 0x40
 800c47c:	4013      	ands	r3, r2
 800c47e:	2b40      	cmp	r3, #64	@ 0x40
 800c480:	d004      	beq.n	800c48c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c482:	187b      	adds	r3, r7, r1
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2228      	movs	r2, #40	@ 0x28
 800c488:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c48a:	d050      	beq.n	800c52e <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	0018      	movs	r0, r3
 800c490:	f000 fff2 	bl	800d478 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	2240      	movs	r2, #64	@ 0x40
 800c49c:	4013      	ands	r3, r2
 800c49e:	2b40      	cmp	r3, #64	@ 0x40
 800c4a0:	d13e      	bne.n	800c520 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c4a6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c4a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4aa:	2090      	movs	r0, #144	@ 0x90
 800c4ac:	183a      	adds	r2, r7, r0
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4b6:	f383 8810 	msr	PRIMASK, r3
}
 800c4ba:	46c0      	nop			@ (mov r8, r8)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2140      	movs	r1, #64	@ 0x40
 800c4c8:	438a      	bics	r2, r1
 800c4ca:	609a      	str	r2, [r3, #8]
 800c4cc:	183b      	adds	r3, r7, r0
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c4d4:	f383 8810 	msr	PRIMASK, r3
}
 800c4d8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2280      	movs	r2, #128	@ 0x80
 800c4de:	589b      	ldr	r3, [r3, r2]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d016      	beq.n	800c512 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2280      	movs	r2, #128	@ 0x80
 800c4e8:	589b      	ldr	r3, [r3, r2]
 800c4ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c554 <HAL_UART_IRQHandler+0x2d4>)
 800c4ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2280      	movs	r2, #128	@ 0x80
 800c4f2:	589b      	ldr	r3, [r3, r2]
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	f7fb fce5 	bl	8007ec4 <HAL_DMA_Abort_IT>
 800c4fa:	1e03      	subs	r3, r0, #0
 800c4fc:	d022      	beq.n	800c544 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2280      	movs	r2, #128	@ 0x80
 800c502:	589b      	ldr	r3, [r3, r2]
 800c504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	2180      	movs	r1, #128	@ 0x80
 800c50a:	5852      	ldr	r2, [r2, r1]
 800c50c:	0010      	movs	r0, r2
 800c50e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c510:	e018      	b.n	800c544 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	22a4      	movs	r2, #164	@ 0xa4
 800c516:	589b      	ldr	r3, [r3, r2]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	0010      	movs	r0, r2
 800c51c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c51e:	e011      	b.n	800c544 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	22a4      	movs	r2, #164	@ 0xa4
 800c524:	589b      	ldr	r3, [r3, r2]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	0010      	movs	r0, r2
 800c52a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c52c:	e00a      	b.n	800c544 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	22a4      	movs	r2, #164	@ 0xa4
 800c532:	589b      	ldr	r3, [r3, r2]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	0010      	movs	r0, r2
 800c538:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2290      	movs	r2, #144	@ 0x90
 800c53e:	2100      	movs	r1, #0
 800c540:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c542:	e1c1      	b.n	800c8c8 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c544:	46c0      	nop			@ (mov r8, r8)
    return;
 800c546:	e1bf      	b.n	800c8c8 <HAL_UART_IRQHandler+0x648>
 800c548:	0000080f 	.word	0x0000080f
 800c54c:	10000001 	.word	0x10000001
 800c550:	04000120 	.word	0x04000120
 800c554:	0800d74b 	.word	0x0800d74b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d000      	beq.n	800c562 <HAL_UART_IRQHandler+0x2e2>
 800c560:	e140      	b.n	800c7e4 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c562:	23a4      	movs	r3, #164	@ 0xa4
 800c564:	18fb      	adds	r3, r7, r3
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2210      	movs	r2, #16
 800c56a:	4013      	ands	r3, r2
 800c56c:	d100      	bne.n	800c570 <HAL_UART_IRQHandler+0x2f0>
 800c56e:	e139      	b.n	800c7e4 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c570:	23a0      	movs	r3, #160	@ 0xa0
 800c572:	18fb      	adds	r3, r7, r3
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2210      	movs	r2, #16
 800c578:	4013      	ands	r3, r2
 800c57a:	d100      	bne.n	800c57e <HAL_UART_IRQHandler+0x2fe>
 800c57c:	e132      	b.n	800c7e4 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2210      	movs	r2, #16
 800c584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	2240      	movs	r2, #64	@ 0x40
 800c58e:	4013      	ands	r3, r2
 800c590:	2b40      	cmp	r3, #64	@ 0x40
 800c592:	d000      	beq.n	800c596 <HAL_UART_IRQHandler+0x316>
 800c594:	e0a5      	b.n	800c6e2 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2280      	movs	r2, #128	@ 0x80
 800c59a:	589b      	ldr	r3, [r3, r2]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	217e      	movs	r1, #126	@ 0x7e
 800c5a2:	187b      	adds	r3, r7, r1
 800c5a4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c5a6:	187b      	adds	r3, r7, r1
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d100      	bne.n	800c5b0 <HAL_UART_IRQHandler+0x330>
 800c5ae:	e18d      	b.n	800c8cc <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	225c      	movs	r2, #92	@ 0x5c
 800c5b4:	5a9b      	ldrh	r3, [r3, r2]
 800c5b6:	187a      	adds	r2, r7, r1
 800c5b8:	8812      	ldrh	r2, [r2, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d300      	bcc.n	800c5c0 <HAL_UART_IRQHandler+0x340>
 800c5be:	e185      	b.n	800c8cc <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	187a      	adds	r2, r7, r1
 800c5c4:	215e      	movs	r1, #94	@ 0x5e
 800c5c6:	8812      	ldrh	r2, [r2, #0]
 800c5c8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2280      	movs	r2, #128	@ 0x80
 800c5ce:	589b      	ldr	r3, [r3, r2]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	d170      	bne.n	800c6bc <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5da:	f3ef 8310 	mrs	r3, PRIMASK
 800c5de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ea:	f383 8810 	msr	PRIMASK, r3
}
 800c5ee:	46c0      	nop			@ (mov r8, r8)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	49b8      	ldr	r1, [pc, #736]	@ (800c8dc <HAL_UART_IRQHandler+0x65c>)
 800c5fc:	400a      	ands	r2, r1
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c602:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c606:	f383 8810 	msr	PRIMASK, r3
}
 800c60a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c60c:	f3ef 8310 	mrs	r3, PRIMASK
 800c610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c614:	677b      	str	r3, [r7, #116]	@ 0x74
 800c616:	2301      	movs	r3, #1
 800c618:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c61c:	f383 8810 	msr	PRIMASK, r3
}
 800c620:	46c0      	nop			@ (mov r8, r8)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	689a      	ldr	r2, [r3, #8]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2101      	movs	r1, #1
 800c62e:	438a      	bics	r2, r1
 800c630:	609a      	str	r2, [r3, #8]
 800c632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c634:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c638:	f383 8810 	msr	PRIMASK, r3
}
 800c63c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c63e:	f3ef 8310 	mrs	r3, PRIMASK
 800c642:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c646:	673b      	str	r3, [r7, #112]	@ 0x70
 800c648:	2301      	movs	r3, #1
 800c64a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c64c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c64e:	f383 8810 	msr	PRIMASK, r3
}
 800c652:	46c0      	nop			@ (mov r8, r8)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689a      	ldr	r2, [r3, #8]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2140      	movs	r1, #64	@ 0x40
 800c660:	438a      	bics	r2, r1
 800c662:	609a      	str	r2, [r3, #8]
 800c664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c666:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c66a:	f383 8810 	msr	PRIMASK, r3
}
 800c66e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	228c      	movs	r2, #140	@ 0x8c
 800c674:	2120      	movs	r1, #32
 800c676:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c67e:	f3ef 8310 	mrs	r3, PRIMASK
 800c682:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c686:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c688:	2301      	movs	r3, #1
 800c68a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c68c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c68e:	f383 8810 	msr	PRIMASK, r3
}
 800c692:	46c0      	nop			@ (mov r8, r8)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2110      	movs	r1, #16
 800c6a0:	438a      	bics	r2, r1
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6aa:	f383 8810 	msr	PRIMASK, r3
}
 800c6ae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2280      	movs	r2, #128	@ 0x80
 800c6b4:	589b      	ldr	r3, [r3, r2]
 800c6b6:	0018      	movs	r0, r3
 800c6b8:	f7fb fba2 	bl	8007e00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	22c0      	movs	r2, #192	@ 0xc0
 800c6c6:	589b      	ldr	r3, [r3, r2]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	215c      	movs	r1, #92	@ 0x5c
 800c6cc:	5a51      	ldrh	r1, [r2, r1]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	205e      	movs	r0, #94	@ 0x5e
 800c6d2:	5a12      	ldrh	r2, [r2, r0]
 800c6d4:	b292      	uxth	r2, r2
 800c6d6:	1a8a      	subs	r2, r1, r2
 800c6d8:	b291      	uxth	r1, r2
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	0010      	movs	r0, r2
 800c6de:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6e0:	e0f4      	b.n	800c8cc <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	225c      	movs	r2, #92	@ 0x5c
 800c6e6:	5a99      	ldrh	r1, [r3, r2]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	225e      	movs	r2, #94	@ 0x5e
 800c6ec:	5a9b      	ldrh	r3, [r3, r2]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	208e      	movs	r0, #142	@ 0x8e
 800c6f2:	183b      	adds	r3, r7, r0
 800c6f4:	1a8a      	subs	r2, r1, r2
 800c6f6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	225e      	movs	r2, #94	@ 0x5e
 800c6fc:	5a9b      	ldrh	r3, [r3, r2]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	2b00      	cmp	r3, #0
 800c702:	d100      	bne.n	800c706 <HAL_UART_IRQHandler+0x486>
 800c704:	e0e4      	b.n	800c8d0 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c706:	183b      	adds	r3, r7, r0
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d100      	bne.n	800c710 <HAL_UART_IRQHandler+0x490>
 800c70e:	e0df      	b.n	800c8d0 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c710:	f3ef 8310 	mrs	r3, PRIMASK
 800c714:	60fb      	str	r3, [r7, #12]
  return(result);
 800c716:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c718:	2488      	movs	r4, #136	@ 0x88
 800c71a:	193a      	adds	r2, r7, r4
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	2301      	movs	r3, #1
 800c720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f383 8810 	msr	PRIMASK, r3
}
 800c728:	46c0      	nop			@ (mov r8, r8)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	496a      	ldr	r1, [pc, #424]	@ (800c8e0 <HAL_UART_IRQHandler+0x660>)
 800c736:	400a      	ands	r2, r1
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	193b      	adds	r3, r7, r4
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f383 8810 	msr	PRIMASK, r3
}
 800c746:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c748:	f3ef 8310 	mrs	r3, PRIMASK
 800c74c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c74e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c750:	2484      	movs	r4, #132	@ 0x84
 800c752:	193a      	adds	r2, r7, r4
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	2301      	movs	r3, #1
 800c758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	f383 8810 	msr	PRIMASK, r3
}
 800c760:	46c0      	nop			@ (mov r8, r8)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	495d      	ldr	r1, [pc, #372]	@ (800c8e4 <HAL_UART_IRQHandler+0x664>)
 800c76e:	400a      	ands	r2, r1
 800c770:	609a      	str	r2, [r3, #8]
 800c772:	193b      	adds	r3, r7, r4
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	f383 8810 	msr	PRIMASK, r3
}
 800c77e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	228c      	movs	r2, #140	@ 0x8c
 800c784:	2120      	movs	r1, #32
 800c786:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c794:	f3ef 8310 	mrs	r3, PRIMASK
 800c798:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79c:	2480      	movs	r4, #128	@ 0x80
 800c79e:	193a      	adds	r2, r7, r4
 800c7a0:	6013      	str	r3, [r2, #0]
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a8:	f383 8810 	msr	PRIMASK, r3
}
 800c7ac:	46c0      	nop			@ (mov r8, r8)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2110      	movs	r1, #16
 800c7ba:	438a      	bics	r2, r1
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	193b      	adds	r3, r7, r4
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ca:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	22c0      	movs	r2, #192	@ 0xc0
 800c7d6:	589b      	ldr	r3, [r3, r2]
 800c7d8:	183a      	adds	r2, r7, r0
 800c7da:	8811      	ldrh	r1, [r2, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	0010      	movs	r0, r2
 800c7e0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7e2:	e075      	b.n	800c8d0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7e4:	23a4      	movs	r3, #164	@ 0xa4
 800c7e6:	18fb      	adds	r3, r7, r3
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	2380      	movs	r3, #128	@ 0x80
 800c7ec:	035b      	lsls	r3, r3, #13
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	d012      	beq.n	800c818 <HAL_UART_IRQHandler+0x598>
 800c7f2:	239c      	movs	r3, #156	@ 0x9c
 800c7f4:	18fb      	adds	r3, r7, r3
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	2380      	movs	r3, #128	@ 0x80
 800c7fa:	03db      	lsls	r3, r3, #15
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	d00b      	beq.n	800c818 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2280      	movs	r2, #128	@ 0x80
 800c806:	0352      	lsls	r2, r2, #13
 800c808:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	22b4      	movs	r2, #180	@ 0xb4
 800c80e:	589b      	ldr	r3, [r3, r2]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	0010      	movs	r0, r2
 800c814:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c816:	e05e      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c818:	23a4      	movs	r3, #164	@ 0xa4
 800c81a:	18fb      	adds	r3, r7, r3
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2280      	movs	r2, #128	@ 0x80
 800c820:	4013      	ands	r3, r2
 800c822:	d016      	beq.n	800c852 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c824:	23a0      	movs	r3, #160	@ 0xa0
 800c826:	18fb      	adds	r3, r7, r3
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2280      	movs	r2, #128	@ 0x80
 800c82c:	4013      	ands	r3, r2
 800c82e:	d106      	bne.n	800c83e <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c830:	239c      	movs	r3, #156	@ 0x9c
 800c832:	18fb      	adds	r3, r7, r3
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	2380      	movs	r3, #128	@ 0x80
 800c838:	041b      	lsls	r3, r3, #16
 800c83a:	4013      	ands	r3, r2
 800c83c:	d009      	beq.n	800c852 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c842:	2b00      	cmp	r3, #0
 800c844:	d046      	beq.n	800c8d4 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	0010      	movs	r0, r2
 800c84e:	4798      	blx	r3
    }
    return;
 800c850:	e040      	b.n	800c8d4 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c852:	23a4      	movs	r3, #164	@ 0xa4
 800c854:	18fb      	adds	r3, r7, r3
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2240      	movs	r2, #64	@ 0x40
 800c85a:	4013      	ands	r3, r2
 800c85c:	d00a      	beq.n	800c874 <HAL_UART_IRQHandler+0x5f4>
 800c85e:	23a0      	movs	r3, #160	@ 0xa0
 800c860:	18fb      	adds	r3, r7, r3
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2240      	movs	r2, #64	@ 0x40
 800c866:	4013      	ands	r3, r2
 800c868:	d004      	beq.n	800c874 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	0018      	movs	r0, r3
 800c86e:	f000 ff85 	bl	800d77c <UART_EndTransmit_IT>
    return;
 800c872:	e030      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c874:	23a4      	movs	r3, #164	@ 0xa4
 800c876:	18fb      	adds	r3, r7, r3
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	2380      	movs	r3, #128	@ 0x80
 800c87c:	041b      	lsls	r3, r3, #16
 800c87e:	4013      	ands	r3, r2
 800c880:	d00d      	beq.n	800c89e <HAL_UART_IRQHandler+0x61e>
 800c882:	23a0      	movs	r3, #160	@ 0xa0
 800c884:	18fb      	adds	r3, r7, r3
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	2380      	movs	r3, #128	@ 0x80
 800c88a:	05db      	lsls	r3, r3, #23
 800c88c:	4013      	ands	r3, r2
 800c88e:	d006      	beq.n	800c89e <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	22bc      	movs	r2, #188	@ 0xbc
 800c894:	589b      	ldr	r3, [r3, r2]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	0010      	movs	r0, r2
 800c89a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c89c:	e01b      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c89e:	23a4      	movs	r3, #164	@ 0xa4
 800c8a0:	18fb      	adds	r3, r7, r3
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	2380      	movs	r3, #128	@ 0x80
 800c8a6:	045b      	lsls	r3, r3, #17
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	d014      	beq.n	800c8d6 <HAL_UART_IRQHandler+0x656>
 800c8ac:	23a0      	movs	r3, #160	@ 0xa0
 800c8ae:	18fb      	adds	r3, r7, r3
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da0f      	bge.n	800c8d6 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	22b8      	movs	r2, #184	@ 0xb8
 800c8ba:	589b      	ldr	r3, [r3, r2]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	0010      	movs	r0, r2
 800c8c0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8c2:	e008      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
      return;
 800c8c4:	46c0      	nop			@ (mov r8, r8)
 800c8c6:	e006      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
    return;
 800c8c8:	46c0      	nop			@ (mov r8, r8)
 800c8ca:	e004      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
      return;
 800c8cc:	46c0      	nop			@ (mov r8, r8)
 800c8ce:	e002      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
      return;
 800c8d0:	46c0      	nop			@ (mov r8, r8)
 800c8d2:	e000      	b.n	800c8d6 <HAL_UART_IRQHandler+0x656>
    return;
 800c8d4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b02a      	add	sp, #168	@ 0xa8
 800c8da:	bdb0      	pop	{r4, r5, r7, pc}
 800c8dc:	fffffeff 	.word	0xfffffeff
 800c8e0:	fffffedf 	.word	0xfffffedf
 800c8e4:	effffffe 	.word	0xeffffffe

0800c8e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c8f0:	46c0      	nop			@ (mov r8, r8)
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	b002      	add	sp, #8
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c900:	46c0      	nop			@ (mov r8, r8)
 800c902:	46bd      	mov	sp, r7
 800c904:	b002      	add	sp, #8
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c910:	46c0      	nop			@ (mov r8, r8)
 800c912:	46bd      	mov	sp, r7
 800c914:	b002      	add	sp, #8
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c920:	46c0      	nop			@ (mov r8, r8)
 800c922:	46bd      	mov	sp, r7
 800c924:	b002      	add	sp, #8
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c930:	46c0      	nop			@ (mov r8, r8)
 800c932:	46bd      	mov	sp, r7
 800c934:	b002      	add	sp, #8
 800c936:	bd80      	pop	{r7, pc}

0800c938 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c940:	46c0      	nop			@ (mov r8, r8)
 800c942:	46bd      	mov	sp, r7
 800c944:	b002      	add	sp, #8
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c950:	46c0      	nop			@ (mov r8, r8)
 800c952:	46bd      	mov	sp, r7
 800c954:	b002      	add	sp, #8
 800c956:	bd80      	pop	{r7, pc}

0800c958 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c960:	46c0      	nop			@ (mov r8, r8)
 800c962:	46bd      	mov	sp, r7
 800c964:	b002      	add	sp, #8
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	000a      	movs	r2, r1
 800c972:	1cbb      	adds	r3, r7, #2
 800c974:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c976:	46c0      	nop			@ (mov r8, r8)
 800c978:	46bd      	mov	sp, r7
 800c97a:	b002      	add	sp, #8
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2194      	movs	r1, #148	@ 0x94
 800c98c:	4a18      	ldr	r2, [pc, #96]	@ (800c9f0 <UART_InitCallbacksToDefault+0x70>)
 800c98e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2198      	movs	r1, #152	@ 0x98
 800c994:	4a17      	ldr	r2, [pc, #92]	@ (800c9f4 <UART_InitCallbacksToDefault+0x74>)
 800c996:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	219c      	movs	r1, #156	@ 0x9c
 800c99c:	4a16      	ldr	r2, [pc, #88]	@ (800c9f8 <UART_InitCallbacksToDefault+0x78>)
 800c99e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	21a0      	movs	r1, #160	@ 0xa0
 800c9a4:	4a15      	ldr	r2, [pc, #84]	@ (800c9fc <UART_InitCallbacksToDefault+0x7c>)
 800c9a6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	21a4      	movs	r1, #164	@ 0xa4
 800c9ac:	4a14      	ldr	r2, [pc, #80]	@ (800ca00 <UART_InitCallbacksToDefault+0x80>)
 800c9ae:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	21a8      	movs	r1, #168	@ 0xa8
 800c9b4:	4a13      	ldr	r2, [pc, #76]	@ (800ca04 <UART_InitCallbacksToDefault+0x84>)
 800c9b6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	21ac      	movs	r1, #172	@ 0xac
 800c9bc:	4a12      	ldr	r2, [pc, #72]	@ (800ca08 <UART_InitCallbacksToDefault+0x88>)
 800c9be:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	21b0      	movs	r1, #176	@ 0xb0
 800c9c4:	4a11      	ldr	r2, [pc, #68]	@ (800ca0c <UART_InitCallbacksToDefault+0x8c>)
 800c9c6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	21b4      	movs	r1, #180	@ 0xb4
 800c9cc:	4a10      	ldr	r2, [pc, #64]	@ (800ca10 <UART_InitCallbacksToDefault+0x90>)
 800c9ce:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	21b8      	movs	r1, #184	@ 0xb8
 800c9d4:	4a0f      	ldr	r2, [pc, #60]	@ (800ca14 <UART_InitCallbacksToDefault+0x94>)
 800c9d6:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	21bc      	movs	r1, #188	@ 0xbc
 800c9dc:	4a0e      	ldr	r2, [pc, #56]	@ (800ca18 <UART_InitCallbacksToDefault+0x98>)
 800c9de:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	21c0      	movs	r1, #192	@ 0xc0
 800c9e4:	4a0d      	ldr	r2, [pc, #52]	@ (800ca1c <UART_InitCallbacksToDefault+0x9c>)
 800c9e6:	505a      	str	r2, [r3, r1]

}
 800c9e8:	46c0      	nop			@ (mov r8, r8)
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	b002      	add	sp, #8
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	0800c8f9 	.word	0x0800c8f9
 800c9f4:	0800c8e9 	.word	0x0800c8e9
 800c9f8:	0800c919 	.word	0x0800c919
 800c9fc:	0800c909 	.word	0x0800c909
 800ca00:	0800c929 	.word	0x0800c929
 800ca04:	0800c939 	.word	0x0800c939
 800ca08:	0800c949 	.word	0x0800c949
 800ca0c:	0800c959 	.word	0x0800c959
 800ca10:	0800d7d9 	.word	0x0800d7d9
 800ca14:	0800d7e9 	.word	0x0800d7e9
 800ca18:	0800d7f9 	.word	0x0800d7f9
 800ca1c:	0800c969 	.word	0x0800c969

0800ca20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca20:	b5b0      	push	{r4, r5, r7, lr}
 800ca22:	b090      	sub	sp, #64	@ 0x40
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca28:	231a      	movs	r3, #26
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	189b      	adds	r3, r3, r2
 800ca2e:	19db      	adds	r3, r3, r7
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca36:	689a      	ldr	r2, [r3, #8]
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	431a      	orrs	r2, r3
 800ca44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca46:	69db      	ldr	r3, [r3, #28]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4ac4      	ldr	r2, [pc, #784]	@ (800cd64 <UART_SetConfig+0x344>)
 800ca54:	4013      	ands	r3, r2
 800ca56:	0019      	movs	r1, r3
 800ca58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca5e:	430b      	orrs	r3, r1
 800ca60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	4abf      	ldr	r2, [pc, #764]	@ (800cd68 <UART_SetConfig+0x348>)
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca70:	68d9      	ldr	r1, [r3, #12]
 800ca72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	0003      	movs	r3, r0
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4ab9      	ldr	r2, [pc, #740]	@ (800cd6c <UART_SetConfig+0x34c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d004      	beq.n	800ca96 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca92:	4313      	orrs	r3, r2
 800ca94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	4ab4      	ldr	r2, [pc, #720]	@ (800cd70 <UART_SetConfig+0x350>)
 800ca9e:	4013      	ands	r3, r2
 800caa0:	0019      	movs	r1, r3
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa8:	430b      	orrs	r3, r1
 800caaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800caac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab2:	220f      	movs	r2, #15
 800cab4:	4393      	bics	r3, r2
 800cab6:	0018      	movs	r0, r3
 800cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	0003      	movs	r3, r0
 800cac2:	430b      	orrs	r3, r1
 800cac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4aaa      	ldr	r2, [pc, #680]	@ (800cd74 <UART_SetConfig+0x354>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d131      	bne.n	800cb34 <UART_SetConfig+0x114>
 800cad0:	4ba9      	ldr	r3, [pc, #676]	@ (800cd78 <UART_SetConfig+0x358>)
 800cad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cad4:	2203      	movs	r2, #3
 800cad6:	4013      	ands	r3, r2
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d01d      	beq.n	800cb18 <UART_SetConfig+0xf8>
 800cadc:	d823      	bhi.n	800cb26 <UART_SetConfig+0x106>
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d00c      	beq.n	800cafc <UART_SetConfig+0xdc>
 800cae2:	d820      	bhi.n	800cb26 <UART_SetConfig+0x106>
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <UART_SetConfig+0xce>
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d00e      	beq.n	800cb0a <UART_SetConfig+0xea>
 800caec:	e01b      	b.n	800cb26 <UART_SetConfig+0x106>
 800caee:	231b      	movs	r3, #27
 800caf0:	2220      	movs	r2, #32
 800caf2:	189b      	adds	r3, r3, r2
 800caf4:	19db      	adds	r3, r3, r7
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]
 800cafa:	e071      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cafc:	231b      	movs	r3, #27
 800cafe:	2220      	movs	r2, #32
 800cb00:	189b      	adds	r3, r3, r2
 800cb02:	19db      	adds	r3, r3, r7
 800cb04:	2202      	movs	r2, #2
 800cb06:	701a      	strb	r2, [r3, #0]
 800cb08:	e06a      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cb0a:	231b      	movs	r3, #27
 800cb0c:	2220      	movs	r2, #32
 800cb0e:	189b      	adds	r3, r3, r2
 800cb10:	19db      	adds	r3, r3, r7
 800cb12:	2204      	movs	r2, #4
 800cb14:	701a      	strb	r2, [r3, #0]
 800cb16:	e063      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cb18:	231b      	movs	r3, #27
 800cb1a:	2220      	movs	r2, #32
 800cb1c:	189b      	adds	r3, r3, r2
 800cb1e:	19db      	adds	r3, r3, r7
 800cb20:	2208      	movs	r2, #8
 800cb22:	701a      	strb	r2, [r3, #0]
 800cb24:	e05c      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cb26:	231b      	movs	r3, #27
 800cb28:	2220      	movs	r2, #32
 800cb2a:	189b      	adds	r3, r3, r2
 800cb2c:	19db      	adds	r3, r3, r7
 800cb2e:	2210      	movs	r2, #16
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	e055      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a90      	ldr	r2, [pc, #576]	@ (800cd7c <UART_SetConfig+0x35c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d106      	bne.n	800cb4c <UART_SetConfig+0x12c>
 800cb3e:	231b      	movs	r3, #27
 800cb40:	2220      	movs	r2, #32
 800cb42:	189b      	adds	r3, r3, r2
 800cb44:	19db      	adds	r3, r3, r7
 800cb46:	2200      	movs	r2, #0
 800cb48:	701a      	strb	r2, [r3, #0]
 800cb4a:	e049      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a86      	ldr	r2, [pc, #536]	@ (800cd6c <UART_SetConfig+0x34c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d13e      	bne.n	800cbd4 <UART_SetConfig+0x1b4>
 800cb56:	4b88      	ldr	r3, [pc, #544]	@ (800cd78 <UART_SetConfig+0x358>)
 800cb58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb5a:	23c0      	movs	r3, #192	@ 0xc0
 800cb5c:	011b      	lsls	r3, r3, #4
 800cb5e:	4013      	ands	r3, r2
 800cb60:	22c0      	movs	r2, #192	@ 0xc0
 800cb62:	0112      	lsls	r2, r2, #4
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d027      	beq.n	800cbb8 <UART_SetConfig+0x198>
 800cb68:	22c0      	movs	r2, #192	@ 0xc0
 800cb6a:	0112      	lsls	r2, r2, #4
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d82a      	bhi.n	800cbc6 <UART_SetConfig+0x1a6>
 800cb70:	2280      	movs	r2, #128	@ 0x80
 800cb72:	0112      	lsls	r2, r2, #4
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d011      	beq.n	800cb9c <UART_SetConfig+0x17c>
 800cb78:	2280      	movs	r2, #128	@ 0x80
 800cb7a:	0112      	lsls	r2, r2, #4
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d822      	bhi.n	800cbc6 <UART_SetConfig+0x1a6>
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <UART_SetConfig+0x16e>
 800cb84:	2280      	movs	r2, #128	@ 0x80
 800cb86:	00d2      	lsls	r2, r2, #3
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d00e      	beq.n	800cbaa <UART_SetConfig+0x18a>
 800cb8c:	e01b      	b.n	800cbc6 <UART_SetConfig+0x1a6>
 800cb8e:	231b      	movs	r3, #27
 800cb90:	2220      	movs	r2, #32
 800cb92:	189b      	adds	r3, r3, r2
 800cb94:	19db      	adds	r3, r3, r7
 800cb96:	2200      	movs	r2, #0
 800cb98:	701a      	strb	r2, [r3, #0]
 800cb9a:	e021      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cb9c:	231b      	movs	r3, #27
 800cb9e:	2220      	movs	r2, #32
 800cba0:	189b      	adds	r3, r3, r2
 800cba2:	19db      	adds	r3, r3, r7
 800cba4:	2202      	movs	r2, #2
 800cba6:	701a      	strb	r2, [r3, #0]
 800cba8:	e01a      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cbaa:	231b      	movs	r3, #27
 800cbac:	2220      	movs	r2, #32
 800cbae:	189b      	adds	r3, r3, r2
 800cbb0:	19db      	adds	r3, r3, r7
 800cbb2:	2204      	movs	r2, #4
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e013      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cbb8:	231b      	movs	r3, #27
 800cbba:	2220      	movs	r2, #32
 800cbbc:	189b      	adds	r3, r3, r2
 800cbbe:	19db      	adds	r3, r3, r7
 800cbc0:	2208      	movs	r2, #8
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	e00c      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cbc6:	231b      	movs	r3, #27
 800cbc8:	2220      	movs	r2, #32
 800cbca:	189b      	adds	r3, r3, r2
 800cbcc:	19db      	adds	r3, r3, r7
 800cbce:	2210      	movs	r2, #16
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	e005      	b.n	800cbe0 <UART_SetConfig+0x1c0>
 800cbd4:	231b      	movs	r3, #27
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	189b      	adds	r3, r3, r2
 800cbda:	19db      	adds	r3, r3, r7
 800cbdc:	2210      	movs	r2, #16
 800cbde:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a61      	ldr	r2, [pc, #388]	@ (800cd6c <UART_SetConfig+0x34c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d000      	beq.n	800cbec <UART_SetConfig+0x1cc>
 800cbea:	e092      	b.n	800cd12 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cbec:	231b      	movs	r3, #27
 800cbee:	2220      	movs	r2, #32
 800cbf0:	189b      	adds	r3, r3, r2
 800cbf2:	19db      	adds	r3, r3, r7
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b08      	cmp	r3, #8
 800cbf8:	d015      	beq.n	800cc26 <UART_SetConfig+0x206>
 800cbfa:	dc18      	bgt.n	800cc2e <UART_SetConfig+0x20e>
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d00d      	beq.n	800cc1c <UART_SetConfig+0x1fc>
 800cc00:	dc15      	bgt.n	800cc2e <UART_SetConfig+0x20e>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <UART_SetConfig+0x1ec>
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d005      	beq.n	800cc16 <UART_SetConfig+0x1f6>
 800cc0a:	e010      	b.n	800cc2e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc0c:	f7fc fdd6 	bl	80097bc <HAL_RCC_GetPCLK1Freq>
 800cc10:	0003      	movs	r3, r0
 800cc12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc14:	e014      	b.n	800cc40 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc16:	4b5a      	ldr	r3, [pc, #360]	@ (800cd80 <UART_SetConfig+0x360>)
 800cc18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc1a:	e011      	b.n	800cc40 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc1c:	f7fc fd42 	bl	80096a4 <HAL_RCC_GetSysClockFreq>
 800cc20:	0003      	movs	r3, r0
 800cc22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc24:	e00c      	b.n	800cc40 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc26:	2380      	movs	r3, #128	@ 0x80
 800cc28:	021b      	lsls	r3, r3, #8
 800cc2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc2c:	e008      	b.n	800cc40 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cc32:	231a      	movs	r3, #26
 800cc34:	2220      	movs	r2, #32
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	19db      	adds	r3, r3, r7
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	701a      	strb	r2, [r3, #0]
        break;
 800cc3e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d100      	bne.n	800cc48 <UART_SetConfig+0x228>
 800cc46:	e147      	b.n	800ced8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc4c:	4b4d      	ldr	r3, [pc, #308]	@ (800cd84 <UART_SetConfig+0x364>)
 800cc4e:	0052      	lsls	r2, r2, #1
 800cc50:	5ad3      	ldrh	r3, [r2, r3]
 800cc52:	0019      	movs	r1, r3
 800cc54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cc56:	f7f3 fa55 	bl	8000104 <__udivsi3>
 800cc5a:	0003      	movs	r3, r0
 800cc5c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	0013      	movs	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	189b      	adds	r3, r3, r2
 800cc68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d305      	bcc.n	800cc7a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d906      	bls.n	800cc88 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800cc7a:	231a      	movs	r3, #26
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	189b      	adds	r3, r3, r2
 800cc80:	19db      	adds	r3, r3, r7
 800cc82:	2201      	movs	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]
 800cc86:	e127      	b.n	800ced8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc8a:	61bb      	str	r3, [r7, #24]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc94:	4b3b      	ldr	r3, [pc, #236]	@ (800cd84 <UART_SetConfig+0x364>)
 800cc96:	0052      	lsls	r2, r2, #1
 800cc98:	5ad3      	ldrh	r3, [r2, r3]
 800cc9a:	613b      	str	r3, [r7, #16]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	617b      	str	r3, [r7, #20]
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	69b8      	ldr	r0, [r7, #24]
 800cca6:	69f9      	ldr	r1, [r7, #28]
 800cca8:	f7f3 fab8 	bl	800021c <__aeabi_uldivmod>
 800ccac:	0002      	movs	r2, r0
 800ccae:	000b      	movs	r3, r1
 800ccb0:	0e11      	lsrs	r1, r2, #24
 800ccb2:	021d      	lsls	r5, r3, #8
 800ccb4:	430d      	orrs	r5, r1
 800ccb6:	0214      	lsls	r4, r2, #8
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	085b      	lsrs	r3, r3, #1
 800ccbe:	60bb      	str	r3, [r7, #8]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	68b8      	ldr	r0, [r7, #8]
 800ccc6:	68f9      	ldr	r1, [r7, #12]
 800ccc8:	1900      	adds	r0, r0, r4
 800ccca:	4169      	adcs	r1, r5
 800cccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	603b      	str	r3, [r7, #0]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	607b      	str	r3, [r7, #4]
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f7f3 fa9f 	bl	800021c <__aeabi_uldivmod>
 800ccde:	0002      	movs	r2, r0
 800cce0:	000b      	movs	r3, r1
 800cce2:	0013      	movs	r3, r2
 800cce4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cce8:	23c0      	movs	r3, #192	@ 0xc0
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d309      	bcc.n	800cd04 <UART_SetConfig+0x2e4>
 800ccf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccf2:	2380      	movs	r3, #128	@ 0x80
 800ccf4:	035b      	lsls	r3, r3, #13
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d204      	bcs.n	800cd04 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd00:	60da      	str	r2, [r3, #12]
 800cd02:	e0e9      	b.n	800ced8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800cd04:	231a      	movs	r3, #26
 800cd06:	2220      	movs	r2, #32
 800cd08:	189b      	adds	r3, r3, r2
 800cd0a:	19db      	adds	r3, r3, r7
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	701a      	strb	r2, [r3, #0]
 800cd10:	e0e2      	b.n	800ced8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	69da      	ldr	r2, [r3, #28]
 800cd16:	2380      	movs	r3, #128	@ 0x80
 800cd18:	021b      	lsls	r3, r3, #8
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d000      	beq.n	800cd20 <UART_SetConfig+0x300>
 800cd1e:	e083      	b.n	800ce28 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800cd20:	231b      	movs	r3, #27
 800cd22:	2220      	movs	r2, #32
 800cd24:	189b      	adds	r3, r3, r2
 800cd26:	19db      	adds	r3, r3, r7
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b08      	cmp	r3, #8
 800cd2c:	d015      	beq.n	800cd5a <UART_SetConfig+0x33a>
 800cd2e:	dc2b      	bgt.n	800cd88 <UART_SetConfig+0x368>
 800cd30:	2b04      	cmp	r3, #4
 800cd32:	d00d      	beq.n	800cd50 <UART_SetConfig+0x330>
 800cd34:	dc28      	bgt.n	800cd88 <UART_SetConfig+0x368>
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <UART_SetConfig+0x320>
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d005      	beq.n	800cd4a <UART_SetConfig+0x32a>
 800cd3e:	e023      	b.n	800cd88 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd40:	f7fc fd3c 	bl	80097bc <HAL_RCC_GetPCLK1Freq>
 800cd44:	0003      	movs	r3, r0
 800cd46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd48:	e027      	b.n	800cd9a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd80 <UART_SetConfig+0x360>)
 800cd4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd4e:	e024      	b.n	800cd9a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd50:	f7fc fca8 	bl	80096a4 <HAL_RCC_GetSysClockFreq>
 800cd54:	0003      	movs	r3, r0
 800cd56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd58:	e01f      	b.n	800cd9a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd5a:	2380      	movs	r3, #128	@ 0x80
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd60:	e01b      	b.n	800cd9a <UART_SetConfig+0x37a>
 800cd62:	46c0      	nop			@ (mov r8, r8)
 800cd64:	cfff69f3 	.word	0xcfff69f3
 800cd68:	ffffcfff 	.word	0xffffcfff
 800cd6c:	40008000 	.word	0x40008000
 800cd70:	11fff4ff 	.word	0x11fff4ff
 800cd74:	40013800 	.word	0x40013800
 800cd78:	40021000 	.word	0x40021000
 800cd7c:	40004400 	.word	0x40004400
 800cd80:	00f42400 	.word	0x00f42400
 800cd84:	0800e2b0 	.word	0x0800e2b0
      default:
        pclk = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cd8c:	231a      	movs	r3, #26
 800cd8e:	2220      	movs	r2, #32
 800cd90:	189b      	adds	r3, r3, r2
 800cd92:	19db      	adds	r3, r3, r7
 800cd94:	2201      	movs	r2, #1
 800cd96:	701a      	strb	r2, [r3, #0]
        break;
 800cd98:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d100      	bne.n	800cda2 <UART_SetConfig+0x382>
 800cda0:	e09a      	b.n	800ced8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cda6:	4b58      	ldr	r3, [pc, #352]	@ (800cf08 <UART_SetConfig+0x4e8>)
 800cda8:	0052      	lsls	r2, r2, #1
 800cdaa:	5ad3      	ldrh	r3, [r2, r3]
 800cdac:	0019      	movs	r1, r3
 800cdae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cdb0:	f7f3 f9a8 	bl	8000104 <__udivsi3>
 800cdb4:	0003      	movs	r3, r0
 800cdb6:	005a      	lsls	r2, r3, #1
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	085b      	lsrs	r3, r3, #1
 800cdbe:	18d2      	adds	r2, r2, r3
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	0019      	movs	r1, r3
 800cdc6:	0010      	movs	r0, r2
 800cdc8:	f7f3 f99c 	bl	8000104 <__udivsi3>
 800cdcc:	0003      	movs	r3, r0
 800cdce:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd2:	2b0f      	cmp	r3, #15
 800cdd4:	d921      	bls.n	800ce1a <UART_SetConfig+0x3fa>
 800cdd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdd8:	2380      	movs	r3, #128	@ 0x80
 800cdda:	025b      	lsls	r3, r3, #9
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d21c      	bcs.n	800ce1a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	200e      	movs	r0, #14
 800cde6:	2420      	movs	r4, #32
 800cde8:	1903      	adds	r3, r0, r4
 800cdea:	19db      	adds	r3, r3, r7
 800cdec:	210f      	movs	r1, #15
 800cdee:	438a      	bics	r2, r1
 800cdf0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	085b      	lsrs	r3, r3, #1
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	2207      	movs	r2, #7
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	b299      	uxth	r1, r3
 800cdfe:	1903      	adds	r3, r0, r4
 800ce00:	19db      	adds	r3, r3, r7
 800ce02:	1902      	adds	r2, r0, r4
 800ce04:	19d2      	adds	r2, r2, r7
 800ce06:	8812      	ldrh	r2, [r2, #0]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	1902      	adds	r2, r0, r4
 800ce12:	19d2      	adds	r2, r2, r7
 800ce14:	8812      	ldrh	r2, [r2, #0]
 800ce16:	60da      	str	r2, [r3, #12]
 800ce18:	e05e      	b.n	800ced8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800ce1a:	231a      	movs	r3, #26
 800ce1c:	2220      	movs	r2, #32
 800ce1e:	189b      	adds	r3, r3, r2
 800ce20:	19db      	adds	r3, r3, r7
 800ce22:	2201      	movs	r2, #1
 800ce24:	701a      	strb	r2, [r3, #0]
 800ce26:	e057      	b.n	800ced8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce28:	231b      	movs	r3, #27
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	189b      	adds	r3, r3, r2
 800ce2e:	19db      	adds	r3, r3, r7
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b08      	cmp	r3, #8
 800ce34:	d015      	beq.n	800ce62 <UART_SetConfig+0x442>
 800ce36:	dc18      	bgt.n	800ce6a <UART_SetConfig+0x44a>
 800ce38:	2b04      	cmp	r3, #4
 800ce3a:	d00d      	beq.n	800ce58 <UART_SetConfig+0x438>
 800ce3c:	dc15      	bgt.n	800ce6a <UART_SetConfig+0x44a>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d002      	beq.n	800ce48 <UART_SetConfig+0x428>
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d005      	beq.n	800ce52 <UART_SetConfig+0x432>
 800ce46:	e010      	b.n	800ce6a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce48:	f7fc fcb8 	bl	80097bc <HAL_RCC_GetPCLK1Freq>
 800ce4c:	0003      	movs	r3, r0
 800ce4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce50:	e014      	b.n	800ce7c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce52:	4b2e      	ldr	r3, [pc, #184]	@ (800cf0c <UART_SetConfig+0x4ec>)
 800ce54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce56:	e011      	b.n	800ce7c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce58:	f7fc fc24 	bl	80096a4 <HAL_RCC_GetSysClockFreq>
 800ce5c:	0003      	movs	r3, r0
 800ce5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce60:	e00c      	b.n	800ce7c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce62:	2380      	movs	r3, #128	@ 0x80
 800ce64:	021b      	lsls	r3, r3, #8
 800ce66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce68:	e008      	b.n	800ce7c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800ce6e:	231a      	movs	r3, #26
 800ce70:	2220      	movs	r2, #32
 800ce72:	189b      	adds	r3, r3, r2
 800ce74:	19db      	adds	r3, r3, r7
 800ce76:	2201      	movs	r2, #1
 800ce78:	701a      	strb	r2, [r3, #0]
        break;
 800ce7a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d02a      	beq.n	800ced8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce86:	4b20      	ldr	r3, [pc, #128]	@ (800cf08 <UART_SetConfig+0x4e8>)
 800ce88:	0052      	lsls	r2, r2, #1
 800ce8a:	5ad3      	ldrh	r3, [r2, r3]
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ce90:	f7f3 f938 	bl	8000104 <__udivsi3>
 800ce94:	0003      	movs	r3, r0
 800ce96:	001a      	movs	r2, r3
 800ce98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	085b      	lsrs	r3, r3, #1
 800ce9e:	18d2      	adds	r2, r2, r3
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	0019      	movs	r1, r3
 800cea6:	0010      	movs	r0, r2
 800cea8:	f7f3 f92c 	bl	8000104 <__udivsi3>
 800ceac:	0003      	movs	r3, r0
 800ceae:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb2:	2b0f      	cmp	r3, #15
 800ceb4:	d90a      	bls.n	800cecc <UART_SetConfig+0x4ac>
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb8:	2380      	movs	r3, #128	@ 0x80
 800ceba:	025b      	lsls	r3, r3, #9
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d205      	bcs.n	800cecc <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	60da      	str	r2, [r3, #12]
 800ceca:	e005      	b.n	800ced8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cecc:	231a      	movs	r3, #26
 800cece:	2220      	movs	r2, #32
 800ced0:	189b      	adds	r3, r3, r2
 800ced2:	19db      	adds	r3, r3, r7
 800ced4:	2201      	movs	r2, #1
 800ced6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceda:	226a      	movs	r2, #106	@ 0x6a
 800cedc:	2101      	movs	r1, #1
 800cede:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee2:	2268      	movs	r2, #104	@ 0x68
 800cee4:	2101      	movs	r1, #1
 800cee6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceea:	2200      	movs	r2, #0
 800ceec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ceee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef0:	2200      	movs	r2, #0
 800cef2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cef4:	231a      	movs	r3, #26
 800cef6:	2220      	movs	r2, #32
 800cef8:	189b      	adds	r3, r3, r2
 800cefa:	19db      	adds	r3, r3, r7
 800cefc:	781b      	ldrb	r3, [r3, #0]
}
 800cefe:	0018      	movs	r0, r3
 800cf00:	46bd      	mov	sp, r7
 800cf02:	b010      	add	sp, #64	@ 0x40
 800cf04:	bdb0      	pop	{r4, r5, r7, pc}
 800cf06:	46c0      	nop			@ (mov r8, r8)
 800cf08:	0800e2b0 	.word	0x0800e2b0
 800cf0c:	00f42400 	.word	0x00f42400

0800cf10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	4013      	ands	r3, r2
 800cf20:	d00b      	beq.n	800cf3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	4a4a      	ldr	r2, [pc, #296]	@ (800d054 <UART_AdvFeatureConfig+0x144>)
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	0019      	movs	r1, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	430a      	orrs	r2, r1
 800cf38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4013      	ands	r3, r2
 800cf42:	d00b      	beq.n	800cf5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	4a43      	ldr	r2, [pc, #268]	@ (800d058 <UART_AdvFeatureConfig+0x148>)
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	0019      	movs	r1, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	430a      	orrs	r2, r1
 800cf5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf60:	2202      	movs	r2, #2
 800cf62:	4013      	ands	r3, r2
 800cf64:	d00b      	beq.n	800cf7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	4a3b      	ldr	r2, [pc, #236]	@ (800d05c <UART_AdvFeatureConfig+0x14c>)
 800cf6e:	4013      	ands	r3, r2
 800cf70:	0019      	movs	r1, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf82:	2204      	movs	r2, #4
 800cf84:	4013      	ands	r3, r2
 800cf86:	d00b      	beq.n	800cfa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	4a34      	ldr	r2, [pc, #208]	@ (800d060 <UART_AdvFeatureConfig+0x150>)
 800cf90:	4013      	ands	r3, r2
 800cf92:	0019      	movs	r1, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	430a      	orrs	r2, r1
 800cf9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa4:	2210      	movs	r2, #16
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	d00b      	beq.n	800cfc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	4a2c      	ldr	r2, [pc, #176]	@ (800d064 <UART_AdvFeatureConfig+0x154>)
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	0019      	movs	r1, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	430a      	orrs	r2, r1
 800cfc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	4013      	ands	r3, r2
 800cfca:	d00b      	beq.n	800cfe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	4a25      	ldr	r2, [pc, #148]	@ (800d068 <UART_AdvFeatureConfig+0x158>)
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	0019      	movs	r1, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	430a      	orrs	r2, r1
 800cfe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfe8:	2240      	movs	r2, #64	@ 0x40
 800cfea:	4013      	ands	r3, r2
 800cfec:	d01d      	beq.n	800d02a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	4a1d      	ldr	r2, [pc, #116]	@ (800d06c <UART_AdvFeatureConfig+0x15c>)
 800cff6:	4013      	ands	r3, r2
 800cff8:	0019      	movs	r1, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	430a      	orrs	r2, r1
 800d004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d00a:	2380      	movs	r3, #128	@ 0x80
 800d00c:	035b      	lsls	r3, r3, #13
 800d00e:	429a      	cmp	r2, r3
 800d010:	d10b      	bne.n	800d02a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	4a15      	ldr	r2, [pc, #84]	@ (800d070 <UART_AdvFeatureConfig+0x160>)
 800d01a:	4013      	ands	r3, r2
 800d01c:	0019      	movs	r1, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	430a      	orrs	r2, r1
 800d028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d02e:	2280      	movs	r2, #128	@ 0x80
 800d030:	4013      	ands	r3, r2
 800d032:	d00b      	beq.n	800d04c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4a0e      	ldr	r2, [pc, #56]	@ (800d074 <UART_AdvFeatureConfig+0x164>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	0019      	movs	r1, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	605a      	str	r2, [r3, #4]
  }
}
 800d04c:	46c0      	nop			@ (mov r8, r8)
 800d04e:	46bd      	mov	sp, r7
 800d050:	b002      	add	sp, #8
 800d052:	bd80      	pop	{r7, pc}
 800d054:	ffff7fff 	.word	0xffff7fff
 800d058:	fffdffff 	.word	0xfffdffff
 800d05c:	fffeffff 	.word	0xfffeffff
 800d060:	fffbffff 	.word	0xfffbffff
 800d064:	ffffefff 	.word	0xffffefff
 800d068:	ffffdfff 	.word	0xffffdfff
 800d06c:	ffefffff 	.word	0xffefffff
 800d070:	ff9fffff 	.word	0xff9fffff
 800d074:	fff7ffff 	.word	0xfff7ffff

0800d078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b092      	sub	sp, #72	@ 0x48
 800d07c:	af02      	add	r7, sp, #8
 800d07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2290      	movs	r2, #144	@ 0x90
 800d084:	2100      	movs	r1, #0
 800d086:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d088:	f7f9 fa66 	bl	8006558 <HAL_GetTick>
 800d08c:	0003      	movs	r3, r0
 800d08e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2208      	movs	r2, #8
 800d098:	4013      	ands	r3, r2
 800d09a:	2b08      	cmp	r3, #8
 800d09c:	d12d      	bne.n	800d0fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0a0:	2280      	movs	r2, #128	@ 0x80
 800d0a2:	0391      	lsls	r1, r2, #14
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	4a47      	ldr	r2, [pc, #284]	@ (800d1c4 <UART_CheckIdleState+0x14c>)
 800d0a8:	9200      	str	r2, [sp, #0]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f000 f88e 	bl	800d1cc <UART_WaitOnFlagUntilTimeout>
 800d0b0:	1e03      	subs	r3, r0, #0
 800d0b2:	d022      	beq.n	800d0fa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d0bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0be:	2301      	movs	r3, #1
 800d0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c4:	f383 8810 	msr	PRIMASK, r3
}
 800d0c8:	46c0      	nop			@ (mov r8, r8)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2180      	movs	r1, #128	@ 0x80
 800d0d6:	438a      	bics	r2, r1
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e0:	f383 8810 	msr	PRIMASK, r3
}
 800d0e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2288      	movs	r2, #136	@ 0x88
 800d0ea:	2120      	movs	r1, #32
 800d0ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2284      	movs	r2, #132	@ 0x84
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e060      	b.n	800d1bc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2204      	movs	r2, #4
 800d102:	4013      	ands	r3, r2
 800d104:	2b04      	cmp	r3, #4
 800d106:	d146      	bne.n	800d196 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d10a:	2280      	movs	r2, #128	@ 0x80
 800d10c:	03d1      	lsls	r1, r2, #15
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	4a2c      	ldr	r2, [pc, #176]	@ (800d1c4 <UART_CheckIdleState+0x14c>)
 800d112:	9200      	str	r2, [sp, #0]
 800d114:	2200      	movs	r2, #0
 800d116:	f000 f859 	bl	800d1cc <UART_WaitOnFlagUntilTimeout>
 800d11a:	1e03      	subs	r3, r0, #0
 800d11c:	d03b      	beq.n	800d196 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d11e:	f3ef 8310 	mrs	r3, PRIMASK
 800d122:	60fb      	str	r3, [r7, #12]
  return(result);
 800d124:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d126:	637b      	str	r3, [r7, #52]	@ 0x34
 800d128:	2301      	movs	r3, #1
 800d12a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	f383 8810 	msr	PRIMASK, r3
}
 800d132:	46c0      	nop			@ (mov r8, r8)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4922      	ldr	r1, [pc, #136]	@ (800d1c8 <UART_CheckIdleState+0x150>)
 800d140:	400a      	ands	r2, r1
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	f383 8810 	msr	PRIMASK, r3
}
 800d14e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d150:	f3ef 8310 	mrs	r3, PRIMASK
 800d154:	61bb      	str	r3, [r7, #24]
  return(result);
 800d156:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d158:	633b      	str	r3, [r7, #48]	@ 0x30
 800d15a:	2301      	movs	r3, #1
 800d15c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	f383 8810 	msr	PRIMASK, r3
}
 800d164:	46c0      	nop			@ (mov r8, r8)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2101      	movs	r1, #1
 800d172:	438a      	bics	r2, r1
 800d174:	609a      	str	r2, [r3, #8]
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	f383 8810 	msr	PRIMASK, r3
}
 800d180:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	228c      	movs	r2, #140	@ 0x8c
 800d186:	2120      	movs	r1, #32
 800d188:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2284      	movs	r2, #132	@ 0x84
 800d18e:	2100      	movs	r1, #0
 800d190:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	e012      	b.n	800d1bc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2288      	movs	r2, #136	@ 0x88
 800d19a:	2120      	movs	r1, #32
 800d19c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	228c      	movs	r2, #140	@ 0x8c
 800d1a2:	2120      	movs	r1, #32
 800d1a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2284      	movs	r2, #132	@ 0x84
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	0018      	movs	r0, r3
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	b010      	add	sp, #64	@ 0x40
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	01ffffff 	.word	0x01ffffff
 800d1c8:	fffffedf 	.word	0xfffffedf

0800d1cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	603b      	str	r3, [r7, #0]
 800d1d8:	1dfb      	adds	r3, r7, #7
 800d1da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1dc:	e051      	b.n	800d282 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	d04e      	beq.n	800d282 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1e4:	f7f9 f9b8 	bl	8006558 <HAL_GetTick>
 800d1e8:	0002      	movs	r2, r0
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	69ba      	ldr	r2, [r7, #24]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d302      	bcc.n	800d1fa <UART_WaitOnFlagUntilTimeout+0x2e>
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	e051      	b.n	800d2a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2204      	movs	r2, #4
 800d206:	4013      	ands	r3, r2
 800d208:	d03b      	beq.n	800d282 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	2b80      	cmp	r3, #128	@ 0x80
 800d20e:	d038      	beq.n	800d282 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b40      	cmp	r3, #64	@ 0x40
 800d214:	d035      	beq.n	800d282 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69db      	ldr	r3, [r3, #28]
 800d21c:	2208      	movs	r2, #8
 800d21e:	4013      	ands	r3, r2
 800d220:	2b08      	cmp	r3, #8
 800d222:	d111      	bne.n	800d248 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2208      	movs	r2, #8
 800d22a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	0018      	movs	r0, r3
 800d230:	f000 f922 	bl	800d478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2290      	movs	r2, #144	@ 0x90
 800d238:	2108      	movs	r1, #8
 800d23a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2284      	movs	r2, #132	@ 0x84
 800d240:	2100      	movs	r1, #0
 800d242:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e02c      	b.n	800d2a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	69da      	ldr	r2, [r3, #28]
 800d24e:	2380      	movs	r3, #128	@ 0x80
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	401a      	ands	r2, r3
 800d254:	2380      	movs	r3, #128	@ 0x80
 800d256:	011b      	lsls	r3, r3, #4
 800d258:	429a      	cmp	r2, r3
 800d25a:	d112      	bne.n	800d282 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2280      	movs	r2, #128	@ 0x80
 800d262:	0112      	lsls	r2, r2, #4
 800d264:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	0018      	movs	r0, r3
 800d26a:	f000 f905 	bl	800d478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2290      	movs	r2, #144	@ 0x90
 800d272:	2120      	movs	r1, #32
 800d274:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2284      	movs	r2, #132	@ 0x84
 800d27a:	2100      	movs	r1, #0
 800d27c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d27e:	2303      	movs	r3, #3
 800d280:	e00f      	b.n	800d2a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	4013      	ands	r3, r2
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	425a      	negs	r2, r3
 800d292:	4153      	adcs	r3, r2
 800d294:	b2db      	uxtb	r3, r3
 800d296:	001a      	movs	r2, r3
 800d298:	1dfb      	adds	r3, r7, #7
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d09e      	beq.n	800d1de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b004      	add	sp, #16
 800d2a8:	bd80      	pop	{r7, pc}
	...

0800d2ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b090      	sub	sp, #64	@ 0x40
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	1dbb      	adds	r3, r7, #6
 800d2b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	1dba      	adds	r2, r7, #6
 800d2c4:	215c      	movs	r1, #92	@ 0x5c
 800d2c6:	8812      	ldrh	r2, [r2, #0]
 800d2c8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2290      	movs	r2, #144	@ 0x90
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	228c      	movs	r2, #140	@ 0x8c
 800d2d6:	2122      	movs	r1, #34	@ 0x22
 800d2d8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2280      	movs	r2, #128	@ 0x80
 800d2de:	589b      	ldr	r3, [r3, r2]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d02d      	beq.n	800d340 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2280      	movs	r2, #128	@ 0x80
 800d2e8:	589b      	ldr	r3, [r3, r2]
 800d2ea:	4a40      	ldr	r2, [pc, #256]	@ (800d3ec <UART_Start_Receive_DMA+0x140>)
 800d2ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2280      	movs	r2, #128	@ 0x80
 800d2f2:	589b      	ldr	r3, [r3, r2]
 800d2f4:	4a3e      	ldr	r2, [pc, #248]	@ (800d3f0 <UART_Start_Receive_DMA+0x144>)
 800d2f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2280      	movs	r2, #128	@ 0x80
 800d2fc:	589b      	ldr	r3, [r3, r2]
 800d2fe:	4a3d      	ldr	r2, [pc, #244]	@ (800d3f4 <UART_Start_Receive_DMA+0x148>)
 800d300:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2280      	movs	r2, #128	@ 0x80
 800d306:	589b      	ldr	r3, [r3, r2]
 800d308:	2200      	movs	r2, #0
 800d30a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2280      	movs	r2, #128	@ 0x80
 800d310:	5898      	ldr	r0, [r3, r2]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3324      	adds	r3, #36	@ 0x24
 800d318:	0019      	movs	r1, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d31e:	001a      	movs	r2, r3
 800d320:	1dbb      	adds	r3, r7, #6
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	f7fa fce6 	bl	8007cf4 <HAL_DMA_Start_IT>
 800d328:	1e03      	subs	r3, r0, #0
 800d32a:	d009      	beq.n	800d340 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2290      	movs	r2, #144	@ 0x90
 800d330:	2110      	movs	r1, #16
 800d332:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	228c      	movs	r2, #140	@ 0x8c
 800d338:	2120      	movs	r1, #32
 800d33a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e050      	b.n	800d3e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d019      	beq.n	800d37c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d348:	f3ef 8310 	mrs	r3, PRIMASK
 800d34c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800d34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d352:	2301      	movs	r3, #1
 800d354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	f383 8810 	msr	PRIMASK, r3
}
 800d35c:	46c0      	nop			@ (mov r8, r8)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2180      	movs	r1, #128	@ 0x80
 800d36a:	0049      	lsls	r1, r1, #1
 800d36c:	430a      	orrs	r2, r1
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d372:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	f383 8810 	msr	PRIMASK, r3
}
 800d37a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d37c:	f3ef 8310 	mrs	r3, PRIMASK
 800d380:	613b      	str	r3, [r7, #16]
  return(result);
 800d382:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d384:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d386:	2301      	movs	r3, #1
 800d388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f383 8810 	msr	PRIMASK, r3
}
 800d390:	46c0      	nop			@ (mov r8, r8)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2101      	movs	r1, #1
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	609a      	str	r2, [r3, #8]
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	f383 8810 	msr	PRIMASK, r3
}
 800d3ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d3b2:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3b4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	f383 8810 	msr	PRIMASK, r3
}
 800d3c2:	46c0      	nop			@ (mov r8, r8)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	689a      	ldr	r2, [r3, #8]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2140      	movs	r1, #64	@ 0x40
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	609a      	str	r2, [r3, #8]
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3da:	f383 8810 	msr	PRIMASK, r3
}
 800d3de:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	b010      	add	sp, #64	@ 0x40
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	46c0      	nop			@ (mov r8, r8)
 800d3ec:	0800d545 	.word	0x0800d545
 800d3f0:	0800d679 	.word	0x0800d679
 800d3f4:	0800d6c1 	.word	0x0800d6c1

0800d3f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08a      	sub	sp, #40	@ 0x28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d400:	f3ef 8310 	mrs	r3, PRIMASK
 800d404:	60bb      	str	r3, [r7, #8]
  return(result);
 800d406:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d408:	627b      	str	r3, [r7, #36]	@ 0x24
 800d40a:	2301      	movs	r3, #1
 800d40c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f383 8810 	msr	PRIMASK, r3
}
 800d414:	46c0      	nop			@ (mov r8, r8)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	21c0      	movs	r1, #192	@ 0xc0
 800d422:	438a      	bics	r2, r1
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f383 8810 	msr	PRIMASK, r3
}
 800d430:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d432:	f3ef 8310 	mrs	r3, PRIMASK
 800d436:	617b      	str	r3, [r7, #20]
  return(result);
 800d438:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d43a:	623b      	str	r3, [r7, #32]
 800d43c:	2301      	movs	r3, #1
 800d43e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	f383 8810 	msr	PRIMASK, r3
}
 800d446:	46c0      	nop			@ (mov r8, r8)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	689a      	ldr	r2, [r3, #8]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4908      	ldr	r1, [pc, #32]	@ (800d474 <UART_EndTxTransfer+0x7c>)
 800d454:	400a      	ands	r2, r1
 800d456:	609a      	str	r2, [r3, #8]
 800d458:	6a3b      	ldr	r3, [r7, #32]
 800d45a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	f383 8810 	msr	PRIMASK, r3
}
 800d462:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2288      	movs	r2, #136	@ 0x88
 800d468:	2120      	movs	r1, #32
 800d46a:	5099      	str	r1, [r3, r2]
}
 800d46c:	46c0      	nop			@ (mov r8, r8)
 800d46e:	46bd      	mov	sp, r7
 800d470:	b00a      	add	sp, #40	@ 0x28
 800d472:	bd80      	pop	{r7, pc}
 800d474:	ff7fffff 	.word	0xff7fffff

0800d478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08e      	sub	sp, #56	@ 0x38
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d480:	f3ef 8310 	mrs	r3, PRIMASK
 800d484:	617b      	str	r3, [r7, #20]
  return(result);
 800d486:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d488:	637b      	str	r3, [r7, #52]	@ 0x34
 800d48a:	2301      	movs	r3, #1
 800d48c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	f383 8810 	msr	PRIMASK, r3
}
 800d494:	46c0      	nop			@ (mov r8, r8)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4926      	ldr	r1, [pc, #152]	@ (800d53c <UART_EndRxTransfer+0xc4>)
 800d4a2:	400a      	ands	r2, r1
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	f383 8810 	msr	PRIMASK, r3
}
 800d4b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d4b6:	623b      	str	r3, [r7, #32]
  return(result);
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4bc:	2301      	movs	r3, #1
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c2:	f383 8810 	msr	PRIMASK, r3
}
 800d4c6:	46c0      	nop			@ (mov r8, r8)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	491b      	ldr	r1, [pc, #108]	@ (800d540 <UART_EndRxTransfer+0xc8>)
 800d4d4:	400a      	ands	r2, r1
 800d4d6:	609a      	str	r2, [r3, #8]
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4de:	f383 8810 	msr	PRIMASK, r3
}
 800d4e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d118      	bne.n	800d51e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d4f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f383 8810 	msr	PRIMASK, r3
}
 800d500:	46c0      	nop			@ (mov r8, r8)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2110      	movs	r1, #16
 800d50e:	438a      	bics	r2, r1
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	f383 8810 	msr	PRIMASK, r3
}
 800d51c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	228c      	movs	r2, #140	@ 0x8c
 800d522:	2120      	movs	r1, #32
 800d524:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d532:	46c0      	nop			@ (mov r8, r8)
 800d534:	46bd      	mov	sp, r7
 800d536:	b00e      	add	sp, #56	@ 0x38
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	46c0      	nop			@ (mov r8, r8)
 800d53c:	fffffedf 	.word	0xfffffedf
 800d540:	effffffe 	.word	0xeffffffe

0800d544 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b094      	sub	sp, #80	@ 0x50
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d550:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2220      	movs	r2, #32
 800d55a:	4013      	ands	r3, r2
 800d55c:	d16f      	bne.n	800d63e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d55e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d560:	225e      	movs	r2, #94	@ 0x5e
 800d562:	2100      	movs	r1, #0
 800d564:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d566:	f3ef 8310 	mrs	r3, PRIMASK
 800d56a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d56c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d56e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d570:	2301      	movs	r3, #1
 800d572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	f383 8810 	msr	PRIMASK, r3
}
 800d57a:	46c0      	nop			@ (mov r8, r8)
 800d57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	493b      	ldr	r1, [pc, #236]	@ (800d674 <UART_DMAReceiveCplt+0x130>)
 800d588:	400a      	ands	r2, r1
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d58e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	f383 8810 	msr	PRIMASK, r3
}
 800d596:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d598:	f3ef 8310 	mrs	r3, PRIMASK
 800d59c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a8:	f383 8810 	msr	PRIMASK, r3
}
 800d5ac:	46c0      	nop			@ (mov r8, r8)
 800d5ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2101      	movs	r1, #1
 800d5ba:	438a      	bics	r2, r1
 800d5bc:	609a      	str	r2, [r3, #8]
 800d5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c4:	f383 8810 	msr	PRIMASK, r3
}
 800d5c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d5ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5da:	f383 8810 	msr	PRIMASK, r3
}
 800d5de:	46c0      	nop			@ (mov r8, r8)
 800d5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	689a      	ldr	r2, [r3, #8]
 800d5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2140      	movs	r1, #64	@ 0x40
 800d5ec:	438a      	bics	r2, r1
 800d5ee:	609a      	str	r2, [r3, #8]
 800d5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	f383 8810 	msr	PRIMASK, r3
}
 800d5fa:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5fe:	228c      	movs	r2, #140	@ 0x8c
 800d600:	2120      	movs	r1, #32
 800d602:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d118      	bne.n	800d63e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d60c:	f3ef 8310 	mrs	r3, PRIMASK
 800d610:	60fb      	str	r3, [r7, #12]
  return(result);
 800d612:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d616:	2301      	movs	r3, #1
 800d618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	f383 8810 	msr	PRIMASK, r3
}
 800d620:	46c0      	nop			@ (mov r8, r8)
 800d622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2110      	movs	r1, #16
 800d62e:	438a      	bics	r2, r1
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d634:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f383 8810 	msr	PRIMASK, r3
}
 800d63c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d63e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d640:	2200      	movs	r2, #0
 800d642:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d109      	bne.n	800d660 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d64c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d64e:	22c0      	movs	r2, #192	@ 0xc0
 800d650:	589b      	ldr	r3, [r3, r2]
 800d652:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d654:	215c      	movs	r1, #92	@ 0x5c
 800d656:	5a51      	ldrh	r1, [r2, r1]
 800d658:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d65a:	0010      	movs	r0, r2
 800d65c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d65e:	e005      	b.n	800d66c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d662:	22a0      	movs	r2, #160	@ 0xa0
 800d664:	589b      	ldr	r3, [r3, r2]
 800d666:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d668:	0010      	movs	r0, r2
 800d66a:	4798      	blx	r3
}
 800d66c:	46c0      	nop			@ (mov r8, r8)
 800d66e:	46bd      	mov	sp, r7
 800d670:	b014      	add	sp, #80	@ 0x50
 800d672:	bd80      	pop	{r7, pc}
 800d674:	fffffeff 	.word	0xfffffeff

0800d678 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d684:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2201      	movs	r2, #1
 800d68a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d690:	2b01      	cmp	r3, #1
 800d692:	d10b      	bne.n	800d6ac <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	22c0      	movs	r2, #192	@ 0xc0
 800d698:	589b      	ldr	r3, [r3, r2]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	215c      	movs	r1, #92	@ 0x5c
 800d69e:	5a52      	ldrh	r2, [r2, r1]
 800d6a0:	0852      	lsrs	r2, r2, #1
 800d6a2:	b291      	uxth	r1, r2
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	0010      	movs	r0, r2
 800d6a8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6aa:	e005      	b.n	800d6b8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	229c      	movs	r2, #156	@ 0x9c
 800d6b0:	589b      	ldr	r3, [r3, r2]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	0010      	movs	r0, r2
 800d6b6:	4798      	blx	r3
}
 800d6b8:	46c0      	nop			@ (mov r8, r8)
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	b004      	add	sp, #16
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2288      	movs	r2, #136	@ 0x88
 800d6d2:	589b      	ldr	r3, [r3, r2]
 800d6d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	228c      	movs	r2, #140	@ 0x8c
 800d6da:	589b      	ldr	r3, [r3, r2]
 800d6dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	2280      	movs	r2, #128	@ 0x80
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	2b80      	cmp	r3, #128	@ 0x80
 800d6ea:	d10a      	bne.n	800d702 <UART_DMAError+0x42>
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2b21      	cmp	r3, #33	@ 0x21
 800d6f0:	d107      	bne.n	800d702 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2256      	movs	r2, #86	@ 0x56
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	0018      	movs	r0, r3
 800d6fe:	f7ff fe7b 	bl	800d3f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	2240      	movs	r2, #64	@ 0x40
 800d70a:	4013      	ands	r3, r2
 800d70c:	2b40      	cmp	r3, #64	@ 0x40
 800d70e:	d10a      	bne.n	800d726 <UART_DMAError+0x66>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b22      	cmp	r3, #34	@ 0x22
 800d714:	d107      	bne.n	800d726 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	225e      	movs	r2, #94	@ 0x5e
 800d71a:	2100      	movs	r1, #0
 800d71c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	0018      	movs	r0, r3
 800d722:	f7ff fea9 	bl	800d478 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2290      	movs	r2, #144	@ 0x90
 800d72a:	589b      	ldr	r3, [r3, r2]
 800d72c:	2210      	movs	r2, #16
 800d72e:	431a      	orrs	r2, r3
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2190      	movs	r1, #144	@ 0x90
 800d734:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	22a4      	movs	r2, #164	@ 0xa4
 800d73a:	589b      	ldr	r3, [r3, r2]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	0010      	movs	r0, r2
 800d740:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d742:	46c0      	nop			@ (mov r8, r8)
 800d744:	46bd      	mov	sp, r7
 800d746:	b006      	add	sp, #24
 800d748:	bd80      	pop	{r7, pc}

0800d74a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d756:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	225e      	movs	r2, #94	@ 0x5e
 800d75c:	2100      	movs	r1, #0
 800d75e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2256      	movs	r2, #86	@ 0x56
 800d764:	2100      	movs	r1, #0
 800d766:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	22a4      	movs	r2, #164	@ 0xa4
 800d76c:	589b      	ldr	r3, [r3, r2]
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	0010      	movs	r0, r2
 800d772:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d774:	46c0      	nop			@ (mov r8, r8)
 800d776:	46bd      	mov	sp, r7
 800d778:	b004      	add	sp, #16
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d784:	f3ef 8310 	mrs	r3, PRIMASK
 800d788:	60bb      	str	r3, [r7, #8]
  return(result);
 800d78a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d78c:	617b      	str	r3, [r7, #20]
 800d78e:	2301      	movs	r3, #1
 800d790:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f383 8810 	msr	PRIMASK, r3
}
 800d798:	46c0      	nop			@ (mov r8, r8)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2140      	movs	r1, #64	@ 0x40
 800d7a6:	438a      	bics	r2, r1
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	f383 8810 	msr	PRIMASK, r3
}
 800d7b4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2288      	movs	r2, #136	@ 0x88
 800d7ba:	2120      	movs	r1, #32
 800d7bc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2298      	movs	r2, #152	@ 0x98
 800d7c8:	589b      	ldr	r3, [r3, r2]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	0010      	movs	r0, r2
 800d7ce:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7d0:	46c0      	nop			@ (mov r8, r8)
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	b006      	add	sp, #24
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d7e0:	46c0      	nop			@ (mov r8, r8)
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	b002      	add	sp, #8
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7f0:	46c0      	nop			@ (mov r8, r8)
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	b002      	add	sp, #8
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d800:	46c0      	nop			@ (mov r8, r8)
 800d802:	46bd      	mov	sp, r7
 800d804:	b002      	add	sp, #8
 800d806:	bd80      	pop	{r7, pc}

0800d808 <memset>:
 800d808:	0003      	movs	r3, r0
 800d80a:	1882      	adds	r2, r0, r2
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d100      	bne.n	800d812 <memset+0xa>
 800d810:	4770      	bx	lr
 800d812:	7019      	strb	r1, [r3, #0]
 800d814:	3301      	adds	r3, #1
 800d816:	e7f9      	b.n	800d80c <memset+0x4>

0800d818 <__libc_init_array>:
 800d818:	b570      	push	{r4, r5, r6, lr}
 800d81a:	2600      	movs	r6, #0
 800d81c:	4c0c      	ldr	r4, [pc, #48]	@ (800d850 <__libc_init_array+0x38>)
 800d81e:	4d0d      	ldr	r5, [pc, #52]	@ (800d854 <__libc_init_array+0x3c>)
 800d820:	1b64      	subs	r4, r4, r5
 800d822:	10a4      	asrs	r4, r4, #2
 800d824:	42a6      	cmp	r6, r4
 800d826:	d109      	bne.n	800d83c <__libc_init_array+0x24>
 800d828:	2600      	movs	r6, #0
 800d82a:	f000 f823 	bl	800d874 <_init>
 800d82e:	4c0a      	ldr	r4, [pc, #40]	@ (800d858 <__libc_init_array+0x40>)
 800d830:	4d0a      	ldr	r5, [pc, #40]	@ (800d85c <__libc_init_array+0x44>)
 800d832:	1b64      	subs	r4, r4, r5
 800d834:	10a4      	asrs	r4, r4, #2
 800d836:	42a6      	cmp	r6, r4
 800d838:	d105      	bne.n	800d846 <__libc_init_array+0x2e>
 800d83a:	bd70      	pop	{r4, r5, r6, pc}
 800d83c:	00b3      	lsls	r3, r6, #2
 800d83e:	58eb      	ldr	r3, [r5, r3]
 800d840:	4798      	blx	r3
 800d842:	3601      	adds	r6, #1
 800d844:	e7ee      	b.n	800d824 <__libc_init_array+0xc>
 800d846:	00b3      	lsls	r3, r6, #2
 800d848:	58eb      	ldr	r3, [r5, r3]
 800d84a:	4798      	blx	r3
 800d84c:	3601      	adds	r6, #1
 800d84e:	e7f2      	b.n	800d836 <__libc_init_array+0x1e>
 800d850:	0800e304 	.word	0x0800e304
 800d854:	0800e304 	.word	0x0800e304
 800d858:	0800e308 	.word	0x0800e308
 800d85c:	0800e304 	.word	0x0800e304

0800d860 <memcpy>:
 800d860:	2300      	movs	r3, #0
 800d862:	b510      	push	{r4, lr}
 800d864:	429a      	cmp	r2, r3
 800d866:	d100      	bne.n	800d86a <memcpy+0xa>
 800d868:	bd10      	pop	{r4, pc}
 800d86a:	5ccc      	ldrb	r4, [r1, r3]
 800d86c:	54c4      	strb	r4, [r0, r3]
 800d86e:	3301      	adds	r3, #1
 800d870:	e7f8      	b.n	800d864 <memcpy+0x4>
	...

0800d874 <_init>:
 800d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d876:	46c0      	nop			@ (mov r8, r8)
 800d878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d87a:	bc08      	pop	{r3}
 800d87c:	469e      	mov	lr, r3
 800d87e:	4770      	bx	lr

0800d880 <_fini>:
 800d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d882:	46c0      	nop			@ (mov r8, r8)
 800d884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d886:	bc08      	pop	{r3}
 800d888:	469e      	mov	lr, r3
 800d88a:	4770      	bx	lr
