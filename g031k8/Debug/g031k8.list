
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc40  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800ccfc  0800ccfc  0000dcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d76c  0800d76c  0000f44c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d76c  0800d76c  0000e76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d774  0800d774  0000f44c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d774  0800d774  0000e774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d778  0800d778  0000e778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000044c  20000000  0800d77c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  2000044c  0800dbc8  0000f44c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd0  0800dbc8  0000fcd0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f44c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020326  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459c  00000000  00000000  0002f79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  000354e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015c5c  00000000  00000000  0003673f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000081f6  00000000  00000000  0004c39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00054591  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005470  00000000  00000000  000545d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  00059a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000044c 	.word	0x2000044c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cce4 	.word	0x0800cce4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000450 	.word	0x20000450
 8000100:	0800cce4 	.word	0x0800cce4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000468 	.word	0x20000468
 80004fc:	0800ccfc 	.word	0x0800ccfc
 8000500:	20000478 	.word	0x20000478
 8000504:	20000000 	.word	0x20000000
 8000508:	0800cd04 	.word	0x0800cd04
 800050c:	20000008 	.word	0x20000008
 8000510:	0800cd0c 	.word	0x0800cd0c
 8000514:	20000010 	.word	0x20000010
 8000518:	0800cd14 	.word	0x0800cd14
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8d1 	bl	8000752 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e6 	bl	80007a4 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e1 	bl	80007c2 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d7 	bl	80007fe <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa4f 	bl	8000b04 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa69 	bl	8000b4e <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa77 	bl	8000b80 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa7f 	bl	8000ba6 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa8d 	bl	8000bd8 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000430 	.word	0x20000430
 80006cc:	20000c5c 	.word	0x20000c5c
 80006d0:	20000c38 	.word	0x20000c38
 80006d4:	20000428 	.word	0x20000428
 80006d8:	2000042c 	.word	0x2000042c
 80006dc:	20000434 	.word	0x20000434
 80006e0:	20000438 	.word	0x20000438
 80006e4:	200004b0 	.word	0x200004b0
 80006e8:	20000488 	.word	0x20000488
 80006ec:	200004b8 	.word	0x200004b8
 80006f0:	200004b9 	.word	0x200004b9
 80006f4:	200004ba 	.word	0x200004ba
 80006f8:	200004bb 	.word	0x200004bb
 80006fc:	200004bc 	.word	0x200004bc

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, volatile struct Params* params_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 800075c:	210f      	movs	r1, #15
 800075e:	187b      	adds	r3, r7, r1
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2a      	cmp	r3, #42	@ 0x2a
 800076c:	d803      	bhi.n	8000776 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
 8000774:	e011      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b55      	cmp	r3, #85	@ 0x55
 800077e:	d803      	bhi.n	8000788 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	719a      	strb	r2, [r3, #6]
 8000786:	e008      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	db02      	blt.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2202      	movs	r2, #2
 8000798:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, volatile struct Params* params_ptr){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	811a      	strh	r2, [r3, #8]

	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, volatile struct Params* params_ptr){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	729a      	strb	r2, [r3, #10]

	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, volatile struct Params* params_ptr){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, volatile struct Params* params_ptr){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e020      	b.n	800087a <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000838:	2117      	movs	r1, #23
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	227f      	movs	r2, #127	@ 0x7f
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00a      	b.n	800086e <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000858:	2117      	movs	r1, #23
 800085a:	187b      	adds	r3, r7, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	18cb      	adds	r3, r1, r3
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800086e:	2117      	movs	r1, #23
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	3201      	adds	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d9d9      	bls.n	8000838 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}

0800088e <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800088e:	b580      	push	{r7, lr}
 8000890:	b088      	sub	sp, #32
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008a0:	2316      	movs	r3, #22
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 80008a8:	231f      	movs	r3, #31
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e02c      	b.n	800090c <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 80008b2:	211f      	movs	r1, #31
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2016      	movs	r0, #22
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e011      	b.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008dc:	2216      	movs	r2, #22
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d004      	beq.n	80008f2 <Read_and_Interpret_Misc_From_Flash+0x64>
 80008e8:	18bb      	adds	r3, r7, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008f2:	231f      	movs	r3, #31
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	211f      	movs	r1, #31
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	18fa      	adds	r2, r7, r3
 8000910:	2128      	movs	r1, #40	@ 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ca      	bcc.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2116      	movs	r1, #22
 8000928:	187b      	adds	r3, r7, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f004 ff8a 	bl	8005854 <Clear_Status_Bit>
 8000940:	e00f      	b.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000942:	2216      	movs	r2, #22
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d004      	beq.n	8000958 <Read_and_Interpret_Misc_From_Flash+0xca>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	@ 0xff
 8000956:	d104      	bne.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f004 ff67 	bl	8005830 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000962:	2328      	movs	r3, #40	@ 0x28
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2116      	movs	r1, #22
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <Read_and_Interpret_Misc_From_Flash+0x102>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f004 ff63 	bl	8005854 <Clear_Status_Bit>
 800098e:	e011      	b.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000990:	2216      	movs	r2, #22
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d004      	beq.n	80009a6 <Read_and_Interpret_Misc_From_Flash+0x118>
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d106      	bne.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 ff3e 	bl	8005830 <Set_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 80009b4:	2328      	movs	r3, #40	@ 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	2116      	movs	r1, #22
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d908      	bls.n	80009e4 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 80009d2:	2117      	movs	r1, #23
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e005      	b.n	80009f0 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a08:	2317      	movs	r3, #23
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e03c      	b.n	8000a8c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a12:	2117      	movs	r1, #23
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff fe5c 	bl	8000700 <Convert_All_Preset_Values>
 8000a48:	e01a      	b.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000a4a:	2117      	movs	r1, #23
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	f7ff fe40 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a80:	2117      	movs	r1, #23
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fa      	adds	r2, r7, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ba      	bcc.n	8000a12 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff feb2 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff feac 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f7ff fea6 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f7ff fea0 	bl	800081c <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	0800f800 	.word	0x0800f800
 8000aec:	20000008 	.word	0x20000008
 8000af0:	0800f808 	.word	0x0800f808
 8000af4:	20000010 	.word	0x20000010
 8000af8:	0800f810 	.word	0x0800f810
 8000afc:	20000018 	.word	0x20000018
 8000b00:	0800f818 	.word	0x0800f818

08000b04 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, volatile struct Params* params_ptr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b16:	d803      	bhi.n	8000b20 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e011      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b55      	cmp	r3, #85	@ 0x55
 8000b28:	d803      	bhi.n	8000b32 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e008      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db02      	blt.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2202      	movs	r2, #2
 8000b42:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, volatile struct Params* params_ptr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	811a      	strh	r2, [r3, #8]

	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, volatile struct Params* params_ptr){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	729a      	strb	r2, [r3, #10]

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, volatile struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	819a      	strh	r2, [r3, #12]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, volatile struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000430 	.word	0x20000430
 8000c3c:	200004b8 	.word	0x200004b8

08000c40 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c50:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000c5e:	705a      	strb	r2, [r3, #1]

	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000428 	.word	0x20000428
 8000c70:	200004b8 	.word	0x200004b8

08000c74 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c84:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000c92:	709a      	strb	r2, [r3, #2]

	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	2000042c 	.word	0x2000042c
 8000ca4:	200004b8 	.word	0x200004b8

08000ca8 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000cc6:	70da      	strb	r2, [r3, #3]

	return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000434 	.word	0x20000434
 8000cd8:	200004b8 	.word	0x200004b8

08000cdc <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cec:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000cfa:	711a      	strb	r2, [r3, #4]

	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000438 	.word	0x20000438
 8000d0c:	200004b8 	.word	0x200004b8

08000d10 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d2c:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d3c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d4c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d5c:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000430 	.word	0x20000430
 8000d70:	20000428 	.word	0x20000428
 8000d74:	2000042c 	.word	0x2000042c
 8000d78:	20000434 	.word	0x20000434
 8000d7c:	20000438 	.word	0x20000438

08000d80 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000d88:	210f      	movs	r1, #15
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	187a      	adds	r2, r7, r1
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	09d2      	lsrs	r2, r2, #7
 8000d9a:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000da8:	2300      	movs	r3, #0
	}
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000dba:	210f      	movs	r1, #15
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	187a      	adds	r2, r7, r1
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	09d2      	lsrs	r2, r2, #7
 8000dcc:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000dda:	2301      	movs	r3, #1
	}
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000dec:	210f      	movs	r1, #15
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	220c      	movs	r2, #12
 8000df2:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	200e      	movs	r0, #14
 8000dfc:	183b      	adds	r3, r7, r0
 8000dfe:	0912      	lsrs	r2, r2, #4
 8000e00:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e02:	183a      	adds	r2, r7, r0
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d101      	bne.n	8000e12 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e12:	2300      	movs	r3, #0
	}
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000e24:	210f      	movs	r1, #15
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	220b      	movs	r2, #11
 8000e2a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	200e      	movs	r0, #14
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	0912      	lsrs	r2, r2, #4
 8000e38:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e3a:	183a      	adds	r2, r7, r0
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d101      	bne.n	8000e4a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e4a:	2300      	movs	r3, #0
	}
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b77      	cmp	r3, #119	@ 0x77
 8000e64:	d91d      	bls.n	8000ea2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b79      	cmp	r3, #121	@ 0x79
 8000e6e:	d101      	bne.n	8000e74 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e017      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e7c:	d101      	bne.n	8000e82 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e010      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e8a:	d101      	bne.n	8000e90 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e009      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e98:	d101      	bne.n	8000e9e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e002      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ea2:	2300      	movs	r3, #0
	}
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b77      	cmp	r3, #119	@ 0x77
 8000ebc:	d901      	bls.n	8000ec2 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e023      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b14      	cmp	r3, #20
 8000eca:	d101      	bne.n	8000ed0 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e01c      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b15      	cmp	r3, #21
 8000ed8:	d101      	bne.n	8000ede <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e015      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b16      	cmp	r3, #22
 8000ee6:	d101      	bne.n	8000eec <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e00e      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d101      	bne.n	8000efa <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e007      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d101      	bne.n	8000f08 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000f08:	2300      	movs	r3, #0
		}
	}
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b79      	cmp	r3, #121	@ 0x79
 8000f24:	d108      	bne.n	8000f38 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e031      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e02f      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f40:	d10d      	bne.n	8000f5e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f54:	d101      	bne.n	8000f5a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e01e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e01c      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f66:	d108      	bne.n	8000f7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e010      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e00e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f82:	d108      	bne.n	8000f96 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e002      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8000f96:	2300      	movs	r3, #0
	}
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fb0:	d101      	bne.n	8000fb6 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8000fb6:	2300      	movs	r3, #0
	}
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	400a      	ands	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000fde:	210e      	movs	r1, #14
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	1cfa      	adds	r2, r7, #3
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8000fe8:	183a      	adds	r2, r7, r0
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d101      	bne.n	8000ff8 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800100a:	230e      	movs	r3, #14
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001012:	230d      	movs	r3, #13
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e011      	b.n	8001040 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800101c:	200d      	movs	r0, #13
 800101e:	183b      	adds	r3, r7, r0
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	0019      	movs	r1, r3
 800102a:	220e      	movs	r2, #14
 800102c:	18bb      	adds	r3, r7, r2
 800102e:	18ba      	adds	r2, r7, r2
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	188a      	adds	r2, r1, r2
 8001034:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001036:	183b      	adds	r3, r7, r0
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	183b      	adds	r3, r7, r0
 800103c:	3201      	adds	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	230d      	movs	r3, #13
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9e8      	bls.n	800101c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800104a:	230e      	movs	r3, #14
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e00a      	b.n	800108a <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001074:	200f      	movs	r0, #15
 8001076:	183b      	adds	r3, r7, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001080:	183b      	adds	r3, r7, r0
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	183b      	adds	r3, r7, r0
 8001086:	3201      	adds	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d9ef      	bls.n	8001074 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	000a      	movs	r2, r1
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1cfa      	adds	r2, r7, #3
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d901      	bls.n	80010be <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80010be:	2300      	movs	r3, #0
	}
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80010d8:	d101      	bne.n	80010de <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80010da:	2301      	movs	r3, #1
 80010dc:	e023      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2bfa      	cmp	r3, #250	@ 0xfa
 80010e6:	d101      	bne.n	80010ec <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01c      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2bfb      	cmp	r3, #251	@ 0xfb
 80010f4:	d101      	bne.n	80010fa <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e015      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2bfc      	cmp	r3, #252	@ 0xfc
 8001102:	d101      	bne.n	8001108 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001104:	2301      	movs	r3, #1
 8001106:	e00e      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001110:	d101      	bne.n	8001116 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2bff      	cmp	r3, #255	@ 0xff
 800111e:	d101      	bne.n	8001124 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001124:	2300      	movs	r3, #0
	}
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001136:	250f      	movs	r5, #15
 8001138:	197c      	adds	r4, r7, r5
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	00da      	lsls	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f004 fb60 	bl	8005808 <Get_Status_Bit>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001158:	2300      	movs	r3, #0
	}
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bdb0      	pop	{r4, r5, r7, pc}

08001162 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	005a      	lsls	r2, r3, #1
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f004 fb6d 	bl	8005854 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	009a      	lsls	r2, r3, #2
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f004 fb66 	bl	8005854 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

	return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011a2:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011aa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011b4:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011be:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c8:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011d2:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80011f2:	230e      	movs	r3, #14
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	223f      	movs	r2, #63	@ 0x3f
 80011f8:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e00c      	b.n	800121e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001204:	200f      	movs	r0, #15
 8001206:	183b      	adds	r3, r7, r0
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <Reset_All_Controllers+0xb0>)
 800120c:	210e      	movs	r1, #14
 800120e:	1879      	adds	r1, r7, r1
 8001210:	7809      	ldrb	r1, [r1, #0]
 8001212:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001214:	183b      	adds	r3, r7, r0
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	183b      	adds	r3, r7, r0
 800121a:	3201      	adds	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d9ed      	bls.n	8001204 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	20000430 	.word	0x20000430
 8001238:	20000428 	.word	0x20000428
 800123c:	2000042c 	.word	0x2000042c
 8001240:	20000434 	.word	0x20000434
 8001244:	20000438 	.word	0x20000438
 8001248:	200004b8 	.word	0x200004b8

0800124c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001258:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <Set_Local_Control+0x60>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <Set_Local_Control+0x60>)
 8001262:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Set_Local_Control+0x64>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <Set_Local_Control+0x64>)
 800126c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <Set_Local_Control+0x68>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <Set_Local_Control+0x68>)
 8001276:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <Set_Local_Control+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <Set_Local_Control+0x6c>)
 8001280:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <Set_Local_Control+0x60>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <Set_Local_Control+0x64>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <Set_Local_Control+0x68>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <Set_Local_Control+0x6c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]

	return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000430 	.word	0x20000430
 80012ac:	20000428 	.word	0x20000428
 80012b0:	2000042c 	.word	0x2000042c
 80012b4:	20000434 	.word	0x20000434
 80012b8:	20000438 	.word	0x20000438

080012bc <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	00da      	lsls	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f004 fac1 	bl	8005854 <Clear_Status_Bit>

	return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 fa9f 	bl	8005830 <Set_Status_Bit>

	return 1;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <Start_UART_Receive+0x18>)
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <Start_UART_Receive+0x1c>)
 8001304:	2201      	movs	r2, #1
 8001306:	0018      	movs	r0, r3
 8001308:	f00a f994 	bl	800b634 <HAL_UART_Receive_DMA>

	return 1;
 800130c:	2301      	movs	r3, #1
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004cc 	.word	0x200004cc
 8001318:	20000a34 	.word	0x20000a34

0800131c <Pot_Check>:
volatile uint8_t depth_pot_adc_measurement_num = 0;
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile struct Params* params_ptr, enum Pot_Type pot_type){
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	000a      	movs	r2, r1
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	701a      	strb	r2, [r3, #0]

	Global_Interrupt_Disable();
 800132a:	f004 fa65 	bl	80057f8 <Global_Interrupt_Disable>
	static volatile uint16_t second_symmetry_measurement;

	static volatile uint16_t first_phase_measurement;
	static volatile uint16_t second_phase_measurement;

	volatile uint16_t *first_measurement_ptr = NULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
	volatile uint16_t *second_measurement_ptr = NULL;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
	volatile uint8_t tolerance = 0;
 800133e:	210d      	movs	r1, #13
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]

	if(pot_type == WAVESHAPE_POT){
 800134e:	1cfb      	adds	r3, r7, #3
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10e      	bne.n	8001374 <Pot_Check+0x58>

		first_measurement_ptr = &first_waveshape_measurement;
 8001356:	4b76      	ldr	r3, [pc, #472]	@ (8001530 <Pot_Check+0x214>)
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 800135a:	4b76      	ldr	r3, [pc, #472]	@ (8001534 <Pot_Check+0x218>)
 800135c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 800135e:	4b76      	ldr	r3, [pc, #472]	@ (8001538 <Pot_Check+0x21c>)
 8001360:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->waveshape;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2206      	movs	r2, #6
 800136c:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 800136e:	4b73      	ldr	r3, [pc, #460]	@ (800153c <Pot_Check+0x220>)
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e04e      	b.n	8001412 <Pot_Check+0xf6>
	}
	else if(pot_type == SPEED_POT){
 8001374:	1cfb      	adds	r3, r7, #3
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d10f      	bne.n	800139c <Pot_Check+0x80>

		first_measurement_ptr = &first_speed_measurement;
 800137c:	4b70      	ldr	r3, [pc, #448]	@ (8001540 <Pot_Check+0x224>)
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001380:	4b70      	ldr	r3, [pc, #448]	@ (8001544 <Pot_Check+0x228>)
 8001382:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001384:	4b70      	ldr	r3, [pc, #448]	@ (8001548 <Pot_Check+0x22c>)
 8001386:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->speed;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3308      	adds	r3, #8
 800138c:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 800138e:	230d      	movs	r3, #13
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2206      	movs	r2, #6
 8001394:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001396:	4b6d      	ldr	r3, [pc, #436]	@ (800154c <Pot_Check+0x230>)
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	e03a      	b.n	8001412 <Pot_Check+0xf6>
	}
	else if(pot_type == DEPTH_POT){
 800139c:	1cfb      	adds	r3, r7, #3
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d10f      	bne.n	80013c4 <Pot_Check+0xa8>

		first_measurement_ptr = &first_depth_measurement;
 80013a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001550 <Pot_Check+0x234>)
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80013a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001554 <Pot_Check+0x238>)
 80013aa:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80013ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001558 <Pot_Check+0x23c>)
 80013ae:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->depth;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	330a      	adds	r3, #10
 80013b4:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 80013b6:	230d      	movs	r3, #13
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	2206      	movs	r2, #6
 80013bc:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 80013be:	4b67      	ldr	r3, [pc, #412]	@ (800155c <Pot_Check+0x240>)
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e026      	b.n	8001412 <Pot_Check+0xf6>
	}
	else if(pot_type == SYMMETRY_POT){
 80013c4:	1cfb      	adds	r3, r7, #3
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d10f      	bne.n	80013ec <Pot_Check+0xd0>

		first_measurement_ptr = &first_symmetry_measurement;
 80013cc:	4b64      	ldr	r3, [pc, #400]	@ (8001560 <Pot_Check+0x244>)
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 80013d0:	4b64      	ldr	r3, [pc, #400]	@ (8001564 <Pot_Check+0x248>)
 80013d2:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 80013d4:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <Pot_Check+0x24c>)
 80013d6:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->symmetry;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	330c      	adds	r3, #12
 80013dc:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 80013de:	230d      	movs	r3, #13
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2206      	movs	r2, #6
 80013e4:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 80013e6:	4b61      	ldr	r3, [pc, #388]	@ (800156c <Pot_Check+0x250>)
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e012      	b.n	8001412 <Pot_Check+0xf6>
	}
	else if(pot_type == PHASE_POT){
 80013ec:	1cfb      	adds	r3, r7, #3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d10e      	bne.n	8001412 <Pot_Check+0xf6>

		first_measurement_ptr = &first_phase_measurement;
 80013f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001570 <Pot_Check+0x254>)
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 80013f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001574 <Pot_Check+0x258>)
 80013fa:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80013fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001578 <Pot_Check+0x25c>)
 80013fe:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->duty_delay_line_read_pointer_offset;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3322      	adds	r3, #34	@ 0x22
 8001404:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001406:	230d      	movs	r3, #13
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	2206      	movs	r2, #6
 800140c:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 800140e:	4b5b      	ldr	r3, [pc, #364]	@ (800157c <Pot_Check+0x260>)
 8001410:	617b      	str	r3, [r7, #20]
	}

	if(*measurement_num_ptr == 0){
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10b      	bne.n	8001434 <Pot_Check+0x118>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e075      	b.n	8001520 <Pot_Check+0x204>
	}
	else if(*measurement_num_ptr == 1){
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10b      	bne.n	8001456 <Pot_Check+0x13a>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	881a      	ldrh	r2, [r3, #0]
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e064      	b.n	8001520 <Pot_Check+0x204>
	}
	else if(*measurement_num_ptr == 2){
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d15f      	bne.n	8001520 <Pot_Check+0x204>

		*measurement_num_ptr = 0;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001466:	200e      	movs	r0, #14
 8001468:	183b      	adds	r3, r7, r0
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29a      	uxth	r2, r3
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	429a      	cmp	r2, r3
 800147c:	d909      	bls.n	8001492 <Pot_Check+0x176>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b299      	uxth	r1, r3
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b29a      	uxth	r2, r3
 800148a:	183b      	adds	r3, r7, r0
 800148c:	1a8a      	subs	r2, r1, r2
 800148e:	801a      	strh	r2, [r3, #0]
 8001490:	e011      	b.n	80014b6 <Pot_Check+0x19a>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29a      	uxth	r2, r3
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	429a      	cmp	r2, r3
 80014a0:	d909      	bls.n	80014b6 <Pot_Check+0x19a>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b299      	uxth	r1, r3
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	230e      	movs	r3, #14
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	1a8a      	subs	r2, r1, r2
 80014b4:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80014b6:	230d      	movs	r3, #13
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	001a      	movs	r2, r3
 80014c0:	230e      	movs	r3, #14
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d924      	bls.n	8001514 <Pot_Check+0x1f8>

			if(normal_fsm_ptr != NULL){
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <Pot_Check+0x1c6>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e018      	b.n	8001514 <Pot_Check+0x1f8>

			}
			else if(speed_fsm_ptr != NULL){
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d015      	beq.n	8001514 <Pot_Check+0x1f8>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <Pot_Check+0x264>)
 80014f8:	2120      	movs	r1, #32
 80014fa:	0018      	movs	r0, r3
 80014fc:	f004 f9aa 	bl	8005854 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <Pot_Check+0x264>)
 8001502:	2140      	movs	r1, #64	@ 0x40
 8001504:	0018      	movs	r0, r3
 8001506:	f004 f9a5 	bl	8005854 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <Pot_Check+0x264>)
 800150c:	2108      	movs	r1, #8
 800150e:	0018      	movs	r0, r3
 8001510:	f004 f9a0 	bl	8005854 <Clear_Status_Bit>
			}
		}

		*first_measurement_ptr = 0;
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	2200      	movs	r2, #0
 8001518:	801a      	strh	r2, [r3, #0]
		*second_measurement_ptr = 0;
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	2200      	movs	r2, #0
 800151e:	801a      	strh	r2, [r3, #0]
	}

	Global_Interrupt_Enable();
 8001520:	f004 f962 	bl	80057e8 <Global_Interrupt_Enable>

	return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b00a      	add	sp, #40	@ 0x28
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	200004d2 	.word	0x200004d2
 8001534:	200004d4 	.word	0x200004d4
 8001538:	200004cd 	.word	0x200004cd
 800153c:	20000430 	.word	0x20000430
 8001540:	200004d6 	.word	0x200004d6
 8001544:	200004d8 	.word	0x200004d8
 8001548:	200004ce 	.word	0x200004ce
 800154c:	20000428 	.word	0x20000428
 8001550:	200004da 	.word	0x200004da
 8001554:	200004dc 	.word	0x200004dc
 8001558:	200004cf 	.word	0x200004cf
 800155c:	2000042c 	.word	0x2000042c
 8001560:	200004de 	.word	0x200004de
 8001564:	200004e0 	.word	0x200004e0
 8001568:	200004d0 	.word	0x200004d0
 800156c:	20000434 	.word	0x20000434
 8001570:	200004e2 	.word	0x200004e2
 8001574:	200004e4 	.word	0x200004e4
 8001578:	200004d1 	.word	0x200004d1
 800157c:	20000438 	.word	0x20000438
 8001580:	20000c20 	.word	0x20000c20

08001584 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 800158c:	250f      	movs	r5, #15
 800158e:	197c      	adds	r4, r7, r5
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	00da      	lsls	r2, r3, #3
 8001594:	23a0      	movs	r3, #160	@ 0xa0
 8001596:	05db      	lsls	r3, r3, #23
 8001598:	0011      	movs	r1, r2
 800159a:	0018      	movs	r0, r3
 800159c:	f006 f9da 	bl	8007954 <HAL_GPIO_ReadPin>
 80015a0:	0003      	movs	r3, r0
 80015a2:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 80015a4:	197b      	adds	r3, r7, r5
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10a      	bne.n	80015c2 <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01e      	beq.n	80015f2 <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e017      	b.n	80015f2 <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b0e      	cmp	r3, #14
 80015c8:	d013      	beq.n	80015f2 <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d109      	bne.n	80015e6 <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015dc:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e005      	b.n	80015f2 <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015f0:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d103      	bne.n	8001602 <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e006      	b.n	8001610 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <Check_Tap_Tempo_Switch_State+0x98>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0e      	cmp	r3, #14
 8001608:	d102      	bne.n	8001610 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bdb0      	pop	{r4, r5, r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	2000001d 	.word	0x2000001d
 8001620:	200004e6 	.word	0x200004e6

08001624 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b093      	sub	sp, #76	@ 0x4c
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	2410      	movs	r4, #16
 800162c:	193b      	adds	r3, r7, r4
 800162e:	0018      	movs	r0, r3
 8001630:	2338      	movs	r3, #56	@ 0x38
 8001632:	001a      	movs	r2, r3
 8001634:	2100      	movs	r1, #0
 8001636:	f00b fb1f 	bl	800cc78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163a:	003b      	movs	r3, r7
 800163c:	0018      	movs	r0, r3
 800163e:	2310      	movs	r3, #16
 8001640:	001a      	movs	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	f00b fb18 	bl	800cc78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	0018      	movs	r0, r3
 800164e:	f006 fdf3 	bl	8008238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001652:	193b      	adds	r3, r7, r4
 8001654:	2202      	movs	r2, #2
 8001656:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	193b      	adds	r3, r7, r4
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	0052      	lsls	r2, r2, #1
 800165e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001660:	0021      	movs	r1, r4
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2202      	movs	r2, #2
 8001672:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2202      	movs	r2, #2
 8001678:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2208      	movs	r2, #8
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2280      	movs	r2, #128	@ 0x80
 800168a:	0292      	lsls	r2, r2, #10
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	22c0      	movs	r2, #192	@ 0xc0
 8001692:	04d2      	lsls	r2, r2, #19
 8001694:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2280      	movs	r2, #128	@ 0x80
 800169a:	0592      	lsls	r2, r2, #22
 800169c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	0018      	movs	r0, r3
 80016a2:	f006 fe15 	bl	80082d0 <HAL_RCC_OscConfig>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016aa:	f000 fdb1 	bl	8002210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ae:	003b      	movs	r3, r7
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b4:	003b      	movs	r3, r7
 80016b6:	2202      	movs	r2, #2
 80016b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	003b      	movs	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c0:	003b      	movs	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c6:	003b      	movs	r3, r7
 80016c8:	2102      	movs	r1, #2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f007 f91a 	bl	8008904 <HAL_RCC_ClockConfig>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016d4:	f000 fd9c 	bl	8002210 <Error_Handler>
  }
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b013      	add	sp, #76	@ 0x4c
 80016de:	bd90      	pop	{r4, r7, pc}

080016e0 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	0018      	movs	r0, r3
 80016ea:	230c      	movs	r3, #12
 80016ec:	001a      	movs	r2, r3
 80016ee:	2100      	movs	r1, #0
 80016f0:	f00b fac2 	bl	800cc78 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f4:	4b54      	ldr	r3, [pc, #336]	@ (8001848 <MX_ADC1_Init+0x168>)
 80016f6:	4a55      	ldr	r2, [pc, #340]	@ (800184c <MX_ADC1_Init+0x16c>)
 80016f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016fa:	4b53      	ldr	r3, [pc, #332]	@ (8001848 <MX_ADC1_Init+0x168>)
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	05d2      	lsls	r2, r2, #23
 8001700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001702:	4b51      	ldr	r3, [pc, #324]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001708:	4b4f      	ldr	r3, [pc, #316]	@ (8001848 <MX_ADC1_Init+0x168>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800170e:	4b4e      	ldr	r3, [pc, #312]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	0392      	lsls	r2, r2, #14
 8001714:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001716:	4b4c      	ldr	r3, [pc, #304]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001718:	2208      	movs	r2, #8
 800171a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800171c:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <MX_ADC1_Init+0x168>)
 800171e:	2200      	movs	r2, #0
 8001720:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001722:	4b49      	ldr	r3, [pc, #292]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001724:	2200      	movs	r2, #0
 8001726:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001728:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <MX_ADC1_Init+0x168>)
 800172a:	2200      	movs	r2, #0
 800172c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 800172e:	4b46      	ldr	r3, [pc, #280]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001730:	2205      	movs	r2, #5
 8001732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001734:	4b44      	ldr	r3, [pc, #272]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001736:	2220      	movs	r2, #32
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173c:	4b42      	ldr	r3, [pc, #264]	@ (8001848 <MX_ADC1_Init+0x168>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001742:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001748:	4b3f      	ldr	r3, [pc, #252]	@ (8001848 <MX_ADC1_Init+0x168>)
 800174a:	222c      	movs	r2, #44	@ 0x2c
 800174c:	2100      	movs	r1, #0
 800174e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001750:	4b3d      	ldr	r3, [pc, #244]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001756:	4b3c      	ldr	r3, [pc, #240]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800175c:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <MX_ADC1_Init+0x168>)
 800175e:	2200      	movs	r2, #0
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001762:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001764:	223c      	movs	r2, #60	@ 0x3c
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <MX_ADC1_Init+0x168>)
 800176c:	2200      	movs	r2, #0
 800176e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001772:	0018      	movs	r0, r3
 8001774:	f004 fa9c 	bl	8005cb0 <HAL_ADC_Init>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800177c:	f000 fd48 	bl	8002210 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	4b2c      	ldr	r3, [pc, #176]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f004 fe0d 	bl	80063b8 <HAL_ADC_ConfigChannel>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80017a2:	f000 fd35 	bl	8002210 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4a29      	ldr	r2, [pc, #164]	@ (8001850 <MX_ADC1_Init+0x170>)
 80017aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2204      	movs	r2, #4
 80017b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b8:	1d3a      	adds	r2, r7, #4
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <MX_ADC1_Init+0x168>)
 80017bc:	0011      	movs	r1, r2
 80017be:	0018      	movs	r0, r3
 80017c0:	f004 fdfa 	bl	80063b8 <HAL_ADC_ConfigChannel>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80017c8:	f000 fd22 	bl	8002210 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <MX_ADC1_Init+0x174>)
 80017d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2208      	movs	r2, #8
 80017d6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017de:	1d3a      	adds	r2, r7, #4
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <MX_ADC1_Init+0x168>)
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f004 fde7 	bl	80063b8 <HAL_ADC_ConfigChannel>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d001      	beq.n	80017f2 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80017ee:	f000 fd0f 	bl	8002210 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <MX_ADC1_Init+0x178>)
 80017f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	220c      	movs	r2, #12
 80017fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001804:	1d3a      	adds	r2, r7, #4
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <MX_ADC1_Init+0x168>)
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f004 fdd4 	bl	80063b8 <HAL_ADC_ConfigChannel>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001814:	f000 fcfc 	bl	8002210 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <MX_ADC1_Init+0x17c>)
 800181c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2210      	movs	r2, #16
 8001822:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182a:	1d3a      	adds	r2, r7, #4
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_ADC1_Init+0x168>)
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f004 fdc1 	bl	80063b8 <HAL_ADC_ConfigChannel>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800183a:	f000 fce9 	bl	8002210 <Error_Handler>
  }
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	200004e8 	.word	0x200004e8
 800184c:	40012400 	.word	0x40012400
 8001850:	04000002 	.word	0x04000002
 8001854:	10000010 	.word	0x10000010
 8001858:	14000020 	.word	0x14000020
 800185c:	18000040 	.word	0x18000040

08001860 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	@ 0x50
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	2334      	movs	r3, #52	@ 0x34
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	0018      	movs	r0, r3
 800186c:	231c      	movs	r3, #28
 800186e:	001a      	movs	r2, r3
 8001870:	2100      	movs	r1, #0
 8001872:	f00b fa01 	bl	800cc78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001876:	003b      	movs	r3, r7
 8001878:	0018      	movs	r0, r3
 800187a:	2334      	movs	r3, #52	@ 0x34
 800187c:	001a      	movs	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	f00b f9fa 	bl	800cc78 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001886:	4a3b      	ldr	r2, [pc, #236]	@ (8001974 <MX_TIM16_Init+0x114>)
 8001888:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800188a:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <MX_TIM16_Init+0x110>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8001896:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001898:	22ff      	movs	r2, #255	@ 0xff
 800189a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800189c:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <MX_TIM16_Init+0x110>)
 800189e:	2280      	movs	r2, #128	@ 0x80
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018a4:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <MX_TIM16_Init+0x110>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018aa:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <MX_TIM16_Init+0x110>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <MX_TIM16_Init+0x110>)
 80018b2:	0018      	movs	r0, r3
 80018b4:	f007 fb4a 	bl	8008f4c <HAL_TIM_Base_Init>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80018bc:	f000 fca8 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80018c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <MX_TIM16_Init+0x110>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f007 fc48 	bl	8009158 <HAL_TIM_OC_Init>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80018cc:	f000 fca0 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018d0:	2134      	movs	r1, #52	@ 0x34
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	22ff      	movs	r2, #255	@ 0xff
 80018dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fc:	1879      	adds	r1, r7, r1
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001900:	2200      	movs	r2, #0
 8001902:	0018      	movs	r0, r3
 8001904:	f008 fa9c 	bl	8009e40 <HAL_TIM_OC_ConfigChannel>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 800190c:	f000 fc80 	bl	8002210 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2108      	movs	r1, #8
 800191c:	438a      	bics	r2, r1
 800191e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001920:	003b      	movs	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001926:	003b      	movs	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192c:	003b      	movs	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001932:	003b      	movs	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001938:	003b      	movs	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800193e:	003b      	movs	r3, r7
 8001940:	2280      	movs	r2, #128	@ 0x80
 8001942:	0192      	lsls	r2, r2, #6
 8001944:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001946:	003b      	movs	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194c:	003b      	movs	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001952:	003a      	movs	r2, r7
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_TIM16_Init+0x110>)
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f009 fc97 	bl	800b28c <HAL_TIMEx_ConfigBreakDeadTime>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8001962:	f000 fc55 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b014      	add	sp, #80	@ 0x50
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	20000744 	.word	0x20000744
 8001974:	40014400 	.word	0x40014400

08001978 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	@ 0x30
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	2320      	movs	r3, #32
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	0018      	movs	r0, r3
 8001984:	2310      	movs	r3, #16
 8001986:	001a      	movs	r2, r3
 8001988:	2100      	movs	r1, #0
 800198a:	f00b f975 	bl	800cc78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	2314      	movs	r3, #20
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	0018      	movs	r0, r3
 8001994:	230c      	movs	r3, #12
 8001996:	001a      	movs	r2, r3
 8001998:	2100      	movs	r1, #0
 800199a:	f00b f96d 	bl	800cc78 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	0018      	movs	r0, r3
 80019a2:	2310      	movs	r3, #16
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f00b f966 	bl	800cc78 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	05d2      	lsls	r2, r2, #23
 80019b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 80019b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019b6:	223f      	movs	r2, #63	@ 0x3f
 80019b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019c2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <MX_TIM2_Init+0xf4>)
 80019c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019c6:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ce:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f007 fab8 	bl	8008f4c <HAL_TIM_Base_Init>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80019e0:	f000 fc16 	bl	8002210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	2120      	movs	r1, #32
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2280      	movs	r2, #128	@ 0x80
 80019ea:	0152      	lsls	r2, r2, #5
 80019ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ee:	187a      	adds	r2, r7, r1
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 80019f2:	0011      	movs	r1, r2
 80019f4:	0018      	movs	r0, r3
 80019f6:	f008 fc27 	bl	800a248 <HAL_TIM_ConfigClockSource>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80019fe:	f000 fc07 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 8001a04:	0018      	movs	r0, r3
 8001a06:	f007 ff53 	bl	80098b0 <HAL_TIM_IC_Init>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a0e:	f000 fbff 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2114      	movs	r1, #20
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a20:	187a      	adds	r2, r7, r1
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f009 fbc8 	bl	800b1bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001a30:	f000 fbee 	bl	8002210 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	220f      	movs	r2, #15
 8001a4a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	1d39      	adds	r1, r7, #4
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_TIM2_Init+0xf0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	0018      	movs	r0, r3
 8001a54:	f008 fa54 	bl	8009f00 <HAL_TIM_IC_ConfigChannel>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001a5c:	f000 fbd8 	bl	8002210 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b00c      	add	sp, #48	@ 0x30
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000800 	.word	0x20000800
 8001a6c:	001fffff 	.word	0x001fffff

08001a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	@ 0x38
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	2328      	movs	r3, #40	@ 0x28
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f00b f8f9 	bl	800cc78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a86:	231c      	movs	r3, #28
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	001a      	movs	r2, r3
 8001a90:	2100      	movs	r1, #0
 8001a92:	f00b f8f1 	bl	800cc78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	003b      	movs	r3, r7
 8001a98:	0018      	movs	r0, r3
 8001a9a:	231c      	movs	r3, #28
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f00b f8ea 	bl	800cc78 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa4:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001aa6:	4a33      	ldr	r2, [pc, #204]	@ (8001b74 <MX_TIM3_Init+0x104>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001aaa:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001aac:	4a32      	ldr	r2, [pc, #200]	@ (8001b78 <MX_TIM3_Init+0x108>)
 8001aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001ab8:	4a30      	ldr	r2, [pc, #192]	@ (8001b7c <MX_TIM3_Init+0x10c>)
 8001aba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001abc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001ac6:	2280      	movs	r2, #128	@ 0x80
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aca:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001acc:	0018      	movs	r0, r3
 8001ace:	f007 fa3d 	bl	8008f4c <HAL_TIM_Base_Init>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001ad6:	f000 fb9b 	bl	8002210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	2128      	movs	r1, #40	@ 0x28
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	0152      	lsls	r2, r2, #5
 8001ae2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae4:	187a      	adds	r2, r7, r1
 8001ae6:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001ae8:	0011      	movs	r1, r2
 8001aea:	0018      	movs	r0, r3
 8001aec:	f008 fbac 	bl	800a248 <HAL_TIM_ConfigClockSource>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001af4:	f000 fb8c 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001afa:	0018      	movs	r0, r3
 8001afc:	f007 fb2c 	bl	8009158 <HAL_TIM_OC_Init>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b04:	f000 fb84 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	211c      	movs	r1, #28
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b16:	187a      	adds	r2, r7, r1
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f009 fb4d 	bl	800b1bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001b26:	f000 fb73 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b2a:	003b      	movs	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b30:	003b      	movs	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b36:	003b      	movs	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3c:	003b      	movs	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b42:	0039      	movs	r1, r7
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f008 f979 	bl	8009e40 <HAL_TIM_OC_ConfigChannel>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001b52:	f000 fb5d 	bl	8002210 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <MX_TIM3_Init+0x100>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2108      	movs	r1, #8
 8001b62:	438a      	bics	r2, r1
 8001b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b00e      	add	sp, #56	@ 0x38
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	200008bc 	.word	0x200008bc
 8001b74:	40000400 	.word	0x40000400
 8001b78:	00007fff 	.word	0x00007fff
 8001b7c:	00000fff 	.word	0x00000fff

08001b80 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09c      	sub	sp, #112	@ 0x70
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	2360      	movs	r3, #96	@ 0x60
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	001a      	movs	r2, r3
 8001b90:	2100      	movs	r1, #0
 8001b92:	f00b f871 	bl	800cc78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b96:	2354      	movs	r3, #84	@ 0x54
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f00b f869 	bl	800cc78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba6:	2338      	movs	r3, #56	@ 0x38
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	0018      	movs	r0, r3
 8001bac:	231c      	movs	r3, #28
 8001bae:	001a      	movs	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f00b f861 	bl	800cc78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	2334      	movs	r3, #52	@ 0x34
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f00b f85a 	bl	800cc78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bc4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bc6:	4a60      	ldr	r2, [pc, #384]	@ (8001d48 <MX_TIM1_Init+0x1c8>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bca:	4b5e      	ldr	r3, [pc, #376]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <MX_TIM1_Init+0x1cc>)
 8001bda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001bdc:	4b59      	ldr	r3, [pc, #356]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	0052      	lsls	r2, r2, #1
 8001be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be4:	4b57      	ldr	r3, [pc, #348]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bea:	4b56      	ldr	r3, [pc, #344]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bec:	2280      	movs	r2, #128	@ 0x80
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bf0:	4b54      	ldr	r3, [pc, #336]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f007 f9aa 	bl	8008f4c <HAL_TIM_Base_Init>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001bfc:	f000 fb08 	bl	8002210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	2160      	movs	r1, #96	@ 0x60
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	0152      	lsls	r2, r2, #5
 8001c08:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c0a:	187a      	adds	r2, r7, r1
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f008 fb19 	bl	800a248 <HAL_TIM_ConfigClockSource>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c1a:	f000 faf9 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c1e:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001c20:	0018      	movs	r0, r3
 8001c22:	f007 fcf9 	bl	8009618 <HAL_TIM_PWM_Init>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001c2a:	f000 faf1 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2154      	movs	r1, #84	@ 0x54
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c42:	187a      	adds	r2, r7, r1
 8001c44:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f009 fab7 	bl	800b1bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c52:	f000 fadd 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c56:	2138      	movs	r1, #56	@ 0x38
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2260      	movs	r2, #96	@ 0x60
 8001c5c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c82:	1879      	adds	r1, r7, r1
 8001c84:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001c86:	2204      	movs	r2, #4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f008 f9dd 	bl	800a048 <HAL_TIM_PWM_ConfigChannel>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c92:	f000 fabd 	bl	8002210 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	492b      	ldr	r1, [pc, #172]	@ (8001d50 <MX_TIM1_Init+0x1d0>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ca6:	2338      	movs	r3, #56	@ 0x38
 8001ca8:	18f9      	adds	r1, r7, r3
 8001caa:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001cac:	220c      	movs	r2, #12
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f008 f9ca 	bl	800a048 <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001cb8:	f000 faaa 	bl	8002210 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4922      	ldr	r1, [pc, #136]	@ (8001d50 <MX_TIM1_Init+0x1d0>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	0192      	lsls	r2, r2, #6
 8001cf0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	0492      	lsls	r2, r2, #18
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1e:	1d3a      	adds	r2, r7, #4
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001d22:	0011      	movs	r1, r2
 8001d24:	0018      	movs	r0, r3
 8001d26:	f009 fab1 	bl	800b28c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2a:	1e03      	subs	r3, r0, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001d2e:	f000 fa6f 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <MX_TIM1_Init+0x1c4>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f002 ff0b 	bl	8004b50 <HAL_TIM_MspPostInit>

}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b01c      	add	sp, #112	@ 0x70
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	20000978 	.word	0x20000978
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	000003ff 	.word	0x000003ff
 8001d50:	fffff7ff 	.word	0xfffff7ff

08001d54 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	@ 0x50
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	2334      	movs	r3, #52	@ 0x34
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	0018      	movs	r0, r3
 8001d60:	231c      	movs	r3, #28
 8001d62:	001a      	movs	r2, r3
 8001d64:	2100      	movs	r1, #0
 8001d66:	f00a ff87 	bl	800cc78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d6a:	003b      	movs	r3, r7
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	2334      	movs	r3, #52	@ 0x34
 8001d70:	001a      	movs	r2, r3
 8001d72:	2100      	movs	r1, #0
 8001d74:	f00a ff80 	bl	800cc78 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e68 <MX_TIM17_Init+0x114>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001d80:	4a3a      	ldr	r2, [pc, #232]	@ (8001e6c <MX_TIM17_Init+0x118>)
 8001d82:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001d90:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d98:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9e:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001da0:	2280      	movs	r2, #128	@ 0x80
 8001da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001da4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f007 f8d0 	bl	8008f4c <HAL_TIM_Base_Init>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001db0:	f000 fa2e 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f007 f9ce 	bl	8009158 <HAL_TIM_OC_Init>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001dc0:	f000 fa26 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dc4:	2134      	movs	r1, #52	@ 0x34
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dea:	187b      	adds	r3, r7, r1
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	1879      	adds	r1, r7, r1
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	0018      	movs	r0, r3
 8001df8:	f008 f822 	bl	8009e40 <HAL_TIM_OC_ConfigChannel>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001e00:	f000 fa06 	bl	8002210 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001e04:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2108      	movs	r1, #8
 8001e10:	430a      	orrs	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e14:	003b      	movs	r3, r7
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e1a:	003b      	movs	r3, r7
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e20:	003b      	movs	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e26:	003b      	movs	r3, r7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e2c:	003b      	movs	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e32:	003b      	movs	r3, r7
 8001e34:	2280      	movs	r2, #128	@ 0x80
 8001e36:	0192      	lsls	r2, r2, #6
 8001e38:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e3a:	003b      	movs	r3, r7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e40:	003b      	movs	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e46:	003a      	movs	r2, r7
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_TIM17_Init+0x110>)
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f009 fa1d 	bl	800b28c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001e56:	f000 f9db 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b014      	add	sp, #80	@ 0x50
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	20000688 	.word	0x20000688
 8001e68:	40014800 	.word	0x40014800
 8001e6c:	00007fff 	.word	0x00007fff

08001e70 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001e74:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <MX_LPTIM1_Init+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e82:	22e0      	movs	r2, #224	@ 0xe0
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <MX_LPTIM1_Init+0x6c>)
 8001e8c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	03d2      	lsls	r2, r2, #15
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_LPTIM1_Init+0x64>)
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f005 fdb3 	bl	8007a1c <HAL_LPTIM_Init>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001eba:	f000 f9a9 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	2011      	movs	r0, #17
 8001ec4:	f005 f882 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f005 f894 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000bb8 	.word	0x20000bb8
 8001ed8:	40007c00 	.word	0x40007c00
 8001edc:	0000ffff 	.word	0x0000ffff

08001ee0 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	0018      	movs	r0, r3
 8001eea:	231c      	movs	r3, #28
 8001eec:	001a      	movs	r2, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f00a fec2 	bl	800cc78 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f74 <MX_TIM14_Init+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001efc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <MX_TIM14_Init+0x98>)
 8001efe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f0e:	2280      	movs	r2, #128	@ 0x80
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f007 f815 	bl	8008f4c <HAL_TIM_Base_Init>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8001f26:	f000 f973 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f007 f913 	bl	8009158 <HAL_TIM_OC_Init>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8001f36:	f000 f96b 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f52:	1d39      	adds	r1, r7, #4
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_TIM14_Init+0x90>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f007 ff71 	bl	8009e40 <HAL_TIM_OC_ConfigChannel>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001f62:	f000 f955 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b008      	add	sp, #32
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	200005cc 	.word	0x200005cc
 8001f74:	40002000 	.word	0x40002000
 8001f78:	00007fff 	.word	0x00007fff

08001f7c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001f82:	4a16      	ldr	r2, [pc, #88]	@ (8001fdc <MX_USART2_UART_Init+0x60>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8001f86:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001f88:	4a15      	ldr	r2, [pc, #84]	@ (8001fe0 <MX_USART2_UART_Init+0x64>)
 8001f8a:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <MX_USART2_UART_Init+0x5c>)
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f009 fa1d 	bl	800b404 <HAL_UART_Init>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001fce:	f000 f91f 	bl	8002210 <Error_Handler>
  }
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000a34 	.word	0x20000a34
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	00007a12 	.word	0x00007a12

08001fe4 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <MX_DMA_Init+0x48>)
 8001fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <MX_DMA_Init+0x48>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <MX_DMA_Init+0x48>)
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2009      	movs	r0, #9
 8002008:	f004 ffe0 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800200c:	2009      	movs	r0, #9
 800200e:	f004 fff2 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8002012:	2202      	movs	r2, #2
 8002014:	2102      	movs	r1, #2
 8002016:	200a      	movs	r0, #10
 8002018:	f004 ffd8 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800201c:	200a      	movs	r0, #10
 800201e:	f004 ffea 	bl	8006ff6 <HAL_NVIC_EnableIRQ>

}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	40021000 	.word	0x40021000

08002030 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08b      	sub	sp, #44	@ 0x2c
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	2414      	movs	r4, #20
 8002038:	193b      	adds	r3, r7, r4
 800203a:	0018      	movs	r0, r3
 800203c:	2314      	movs	r3, #20
 800203e:	001a      	movs	r2, r3
 8002040:	2100      	movs	r1, #0
 8002042:	f00a fe19 	bl	800cc78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	4b6e      	ldr	r3, [pc, #440]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800204a:	4b6d      	ldr	r3, [pc, #436]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800204c:	2104      	movs	r1, #4
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
 8002052:	4b6b      	ldr	r3, [pc, #428]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800205e:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002062:	4b67      	ldr	r3, [pc, #412]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002064:	2120      	movs	r1, #32
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800206c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206e:	2220      	movs	r2, #32
 8002070:	4013      	ands	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b62      	ldr	r3, [pc, #392]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207a:	4b61      	ldr	r3, [pc, #388]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	635a      	str	r2, [r3, #52]	@ 0x34
 8002082:	4b5f      	ldr	r3, [pc, #380]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002092:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002094:	2102      	movs	r1, #2
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	@ 0x34
 800209a:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020a6:	4b57      	ldr	r3, [pc, #348]	@ (8002204 <MX_GPIO_Init+0x1d4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	0018      	movs	r0, r3
 80020ae:	f005 fc6e 	bl	800798e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	2204      	movs	r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	2288      	movs	r2, #136	@ 0x88
 80020bc:	0352      	lsls	r2, r2, #13
 80020be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002208 <MX_GPIO_Init+0x1d8>)
 80020ca:	0019      	movs	r1, r3
 80020cc:	0010      	movs	r0, r2
 80020ce:	f005 fadd 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80020d2:	0021      	movs	r1, r4
 80020d4:	193b      	adds	r3, r7, r4
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	000c      	movs	r4, r1
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	2201      	movs	r2, #1
 80020e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	193b      	adds	r3, r7, r4
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80020f0:	193a      	adds	r2, r7, r4
 80020f2:	23a0      	movs	r3, #160	@ 0xa0
 80020f4:	05db      	lsls	r3, r3, #23
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f005 fac7 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	2240      	movs	r2, #64	@ 0x40
 8002102:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	193b      	adds	r3, r7, r4
 8002106:	2201      	movs	r2, #1
 8002108:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	193b      	adds	r3, r7, r4
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	193b      	adds	r3, r7, r4
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002116:	193b      	adds	r3, r7, r4
 8002118:	4a3a      	ldr	r2, [pc, #232]	@ (8002204 <MX_GPIO_Init+0x1d4>)
 800211a:	0019      	movs	r1, r3
 800211c:	0010      	movs	r0, r2
 800211e:	f005 fab5 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8002122:	193b      	adds	r3, r7, r4
 8002124:	2280      	movs	r2, #128	@ 0x80
 8002126:	00d2      	lsls	r2, r2, #3
 8002128:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212a:	193b      	adds	r3, r7, r4
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002130:	193b      	adds	r3, r7, r4
 8002132:	2201      	movs	r2, #1
 8002134:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8002136:	193a      	adds	r2, r7, r4
 8002138:	23a0      	movs	r3, #160	@ 0xa0
 800213a:	05db      	lsls	r3, r3, #23
 800213c:	0011      	movs	r1, r2
 800213e:	0018      	movs	r0, r3
 8002140:	f005 faa4 	bl	800768c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 8002144:	193b      	adds	r3, r7, r4
 8002146:	2240      	movs	r2, #64	@ 0x40
 8002148:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	193b      	adds	r3, r7, r4
 800214c:	2201      	movs	r2, #1
 800214e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	193b      	adds	r3, r7, r4
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	193b      	adds	r3, r7, r4
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800215c:	193b      	adds	r3, r7, r4
 800215e:	4a2b      	ldr	r2, [pc, #172]	@ (800220c <MX_GPIO_Init+0x1dc>)
 8002160:	0019      	movs	r1, r3
 8002162:	0010      	movs	r0, r2
 8002164:	f005 fa92 	bl	800768c <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002168:	0021      	movs	r1, r4
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2280      	movs	r2, #128	@ 0x80
 800216e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	22c4      	movs	r2, #196	@ 0xc4
 8002174:	0392      	lsls	r2, r2, #14
 8002176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002178:	000c      	movs	r4, r1
 800217a:	193b      	adds	r3, r7, r4
 800217c:	2202      	movs	r2, #2
 800217e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	193b      	adds	r3, r7, r4
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002186:	193b      	adds	r3, r7, r4
 8002188:	4a20      	ldr	r2, [pc, #128]	@ (800220c <MX_GPIO_Init+0x1dc>)
 800218a:	0019      	movs	r1, r3
 800218c:	0010      	movs	r0, r2
 800218e:	f005 fa7d 	bl	800768c <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8002192:	0021      	movs	r1, r4
 8002194:	187b      	adds	r3, r7, r1
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	0152      	lsls	r2, r2, #5
 800219a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	000c      	movs	r4, r1
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	2201      	movs	r2, #1
 80021a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 80021b0:	193a      	adds	r2, r7, r4
 80021b2:	23a0      	movs	r3, #160	@ 0xa0
 80021b4:	05db      	lsls	r3, r3, #23
 80021b6:	0011      	movs	r1, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	f005 fa67 	bl	800768c <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 80021be:	0021      	movs	r1, r4
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2201      	movs	r2, #1
 80021ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80021d8:	187a      	adds	r2, r7, r1
 80021da:	23a0      	movs	r3, #160	@ 0xa0
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f005 fa53 	bl	800768c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80021e6:	2202      	movs	r2, #2
 80021e8:	2102      	movs	r1, #2
 80021ea:	2007      	movs	r0, #7
 80021ec:	f004 feee 	bl	8006fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021f0:	2007      	movs	r0, #7
 80021f2:	f004 ff00 	bl	8006ff6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b00b      	add	sp, #44	@ 0x2c
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	40021000 	.word	0x40021000
 8002204:	50000800 	.word	0x50000800
 8002208:	50001400 	.word	0x50001400
 800220c:	50000400 	.word	0x50000400

08002210 <Error_Handler>:

void Error_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	e7fd      	b.n	8002218 <Error_Handler+0x8>

0800221c <System_Init>:
  {

  }
}

void System_Init(void){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002220:	f003 fb56 	bl	80058d0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002224:	f7ff f9fe 	bl	8001624 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002228:	f7ff ff02 	bl	8002030 <MX_GPIO_Init>
	MX_DMA_Init();
 800222c:	f7ff feda 	bl	8001fe4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002230:	f7ff fea4 	bl	8001f7c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002234:	f7ff fa54 	bl	80016e0 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002238:	f7ff fb12 	bl	8001860 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 800223c:	f7ff fb9c 	bl	8001978 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002240:	f7ff fc16 	bl	8001a70 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 8002244:	f7ff fc9c 	bl	8001b80 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002248:	f7ff fd84 	bl	8001d54 <MX_TIM17_Init>
	MX_TIM14_Init();
 800224c:	f7ff fe48 	bl	8001ee0 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002250:	f7ff fe0e 	bl	8001e70 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002254:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <System_Init+0xc0>)
 8002256:	0018      	movs	r0, r3
 8002258:	f004 fcd6 	bl	8006c08 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 800225c:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <System_Init+0xc4>)
 800225e:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <System_Init+0xc8>)
 8002260:	210e      	movs	r1, #14
 8002262:	0018      	movs	r0, r3
 8002264:	f008 f94a 	bl	800a4fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002268:	4a1f      	ldr	r2, [pc, #124]	@ (80022e8 <System_Init+0xcc>)
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <System_Init+0xc0>)
 800226c:	2100      	movs	r1, #0
 800226e:	0018      	movs	r0, r3
 8002270:	f003 fef6 	bl	8006060 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <System_Init+0xd0>)
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <System_Init+0xd4>)
 8002278:	2112      	movs	r1, #18
 800227a:	0018      	movs	r0, r3
 800227c:	f008 f93e 	bl	800a4fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002280:	4a1c      	ldr	r2, [pc, #112]	@ (80022f4 <System_Init+0xd8>)
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <System_Init+0xd4>)
 8002284:	210e      	movs	r1, #14
 8002286:	0018      	movs	r0, r3
 8002288:	f008 f938 	bl	800a4fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 800228c:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <System_Init+0xdc>)
 800228e:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <System_Init+0xe0>)
 8002290:	2114      	movs	r1, #20
 8002292:	0018      	movs	r0, r3
 8002294:	f008 f932 	bl	800a4fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8002298:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <System_Init+0xe4>)
 800229a:	4b1a      	ldr	r3, [pc, #104]	@ (8002304 <System_Init+0xe8>)
 800229c:	2101      	movs	r1, #1
 800229e:	0018      	movs	r0, r3
 80022a0:	f009 f918 	bl	800b4d4 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 80022a4:	4a18      	ldr	r2, [pc, #96]	@ (8002308 <System_Init+0xec>)
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <System_Init+0xe8>)
 80022a8:	2103      	movs	r1, #3
 80022aa:	0018      	movs	r0, r3
 80022ac:	f009 f912 	bl	800b4d4 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 80022b0:	4a16      	ldr	r2, [pc, #88]	@ (800230c <System_Init+0xf0>)
 80022b2:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <System_Init+0xf4>)
 80022b4:	2102      	movs	r1, #2
 80022b6:	0018      	movs	r0, r3
 80022b8:	f005 fdd6 	bl	8007e68 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80022bc:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <System_Init+0xf8>)
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <System_Init+0xfc>)
 80022c0:	2114      	movs	r1, #20
 80022c2:	0018      	movs	r0, r3
 80022c4:	f008 f91a 	bl	800a4fc <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <System_Init+0x100>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <System_Init+0x104>)
 80022cc:	2114      	movs	r1, #20
 80022ce:	0018      	movs	r0, r3
 80022d0:	f008 f914 	bl	800a4fc <HAL_TIM_RegisterCallback>
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	200004e8 	.word	0x200004e8
 80022e0:	08002325 	.word	0x08002325
 80022e4:	20000744 	.word	0x20000744
 80022e8:	08002379 	.word	0x08002379
 80022ec:	08002415 	.word	0x08002415
 80022f0:	20000800 	.word	0x20000800
 80022f4:	08002531 	.word	0x08002531
 80022f8:	0800263d 	.word	0x0800263d
 80022fc:	200008bc 	.word	0x200008bc
 8002300:	08002779 	.word	0x08002779
 8002304:	20000a34 	.word	0x20000a34
 8002308:	08002789 	.word	0x08002789
 800230c:	08003aa1 	.word	0x08003aa1
 8002310:	20000bb8 	.word	0x20000bb8
 8002314:	08003c81 	.word	0x08003c81
 8002318:	20000688 	.word	0x20000688
 800231c:	08003c91 	.word	0x08003c91
 8002320:	200005cc 	.word	0x200005cc

08002324 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <TIM16_callback+0x40>)
 800232e:	0018      	movs	r0, r3
 8002330:	f001 feb2 	bl	8004098 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <TIM16_callback+0x40>)
 8002336:	2100      	movs	r1, #0
 8002338:	0018      	movs	r0, r3
 800233a:	f001 fed9 	bl	80040f0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <TIM16_callback+0x44>)
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <TIM16_callback+0x40>)
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f001 ffc9 	bl	80042dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <TIM16_callback+0x48>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	001a      	movs	r2, r3
 8002350:	4907      	ldr	r1, [pc, #28]	@ (8002370 <TIM16_callback+0x4c>)
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <TIM16_callback+0x50>)
 8002354:	0018      	movs	r0, r3
 8002356:	f003 ff0f 	bl	8006178 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	b002      	add	sp, #8
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	20000c38 	.word	0x20000c38
 8002368:	20000020 	.word	0x20000020
 800236c:	0800d51c 	.word	0x0800d51c
 8002370:	20000c2c 	.word	0x20000c2c
 8002374:	200004e8 	.word	0x200004e8

08002378 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	Global_Interrupt_Disable();
 8002380:	f003 fa3a 	bl	80057f8 <Global_Interrupt_Disable>
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f003 ff84 	bl	8006294 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 800238c:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <ADC_DMA_conversion_complete_callback+0x88>)
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f002 f838 	bl	8004408 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002398:	f7fe f8c2 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 800239c:	250f      	movs	r5, #15
 800239e:	197c      	adds	r4, r7, r5
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <ADC_DMA_conversion_complete_callback+0x90>)
 80023a2:	2108      	movs	r1, #8
 80023a4:	0018      	movs	r0, r3
 80023a6:	f003 fa2f 	bl	8005808 <Get_Status_Bit>
 80023aa:	0003      	movs	r3, r0
 80023ac:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10a      	bne.n	80023cc <ADC_DMA_conversion_complete_callback+0x54>

		params.raw_start_value = params_working.raw_start_value;
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <ADC_DMA_conversion_complete_callback+0x94>)
 80023b8:	8a5b      	ldrh	r3, [r3, #18]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <ADC_DMA_conversion_complete_callback+0x98>)
 80023be:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <ADC_DMA_conversion_complete_callback+0x94>)
 80023c2:	8b5b      	ldrh	r3, [r3, #26]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <ADC_DMA_conversion_complete_callback+0x98>)
 80023c8:	835a      	strh	r2, [r3, #26]
 80023ca:	e003      	b.n	80023d4 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <ADC_DMA_conversion_complete_callback+0x98>)
 80023ce:	0018      	movs	r0, r3
 80023d0:	f001 fe2c 	bl	800402c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <ADC_DMA_conversion_complete_callback+0x98>)
 80023d6:	0018      	movs	r0, r3
 80023d8:	f002 fd80 	bl	8004edc <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 80023dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <ADC_DMA_conversion_complete_callback+0x90>)
 80023de:	2110      	movs	r1, #16
 80023e0:	0018      	movs	r0, r3
 80023e2:	f003 fa11 	bl	8005808 <Get_Status_Bit>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d104      	bne.n	80023f4 <ADC_DMA_conversion_complete_callback+0x7c>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 80023ea:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <ADC_DMA_conversion_complete_callback+0x90>)
 80023ec:	2110      	movs	r1, #16
 80023ee:	0018      	movs	r0, r3
 80023f0:	f003 fa1e 	bl	8005830 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
	Global_Interrupt_Enable();
 80023f4:	f003 f9f8 	bl	80057e8 <Global_Interrupt_Enable>
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002400:	20000c2c 	.word	0x20000c2c
 8002404:	20000c5c 	.word	0x20000c5c
 8002408:	20000c20 	.word	0x20000c20
 800240c:	20000ca4 	.word	0x20000ca4
 8002410:	20000c38 	.word	0x20000c38

08002414 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2100      	movs	r1, #0
 8002420:	0018      	movs	r0, r3
 8002422:	f007 ffe7 	bl	800a3f4 <HAL_TIM_ReadCapturedValue>
 8002426:	0002      	movs	r2, r0
 8002428:	4b3a      	ldr	r3, [pc, #232]	@ (8002514 <TIM2_ch1_IP_capture_callback+0x100>)
 800242a:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 800242c:	4b39      	ldr	r3, [pc, #228]	@ (8002514 <TIM2_ch1_IP_capture_callback+0x100>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0a5b      	lsrs	r3, r3, #9
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <TIM2_ch1_IP_capture_callback+0x104>)
 8002436:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002438:	4b38      	ldr	r3, [pc, #224]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d108      	bne.n	8002454 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002442:	f001 fd13 	bl	8003e6c <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002446:	4b35      	ldr	r3, [pc, #212]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 800244e:	2200      	movs	r2, #0
 8002450:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002452:	e05b      	b.n	800250c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002454:	4b31      	ldr	r3, [pc, #196]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d124      	bne.n	80024a8 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 800245e:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <TIM2_ch1_IP_capture_callback+0x104>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b80      	cmp	r3, #128	@ 0x80
 8002466:	d951      	bls.n	800250c <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002468:	f001 fce2 	bl	8003e30 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 8002474:	2201      	movs	r2, #1
 8002476:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002478:	4a29      	ldr	r2, [pc, #164]	@ (8002520 <TIM2_ch1_IP_capture_callback+0x10c>)
 800247a:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <TIM2_ch1_IP_capture_callback+0x110>)
 800247c:	0011      	movs	r1, r2
 800247e:	0018      	movs	r0, r3
 8002480:	f001 fcc4 	bl	8003e0c <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002484:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <TIM2_ch1_IP_capture_callback+0x114>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b05      	cmp	r3, #5
 800248c:	d004      	beq.n	8002498 <TIM2_ch1_IP_capture_callback+0x84>
 800248e:	4b26      	ldr	r3, [pc, #152]	@ (8002528 <TIM2_ch1_IP_capture_callback+0x114>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b07      	cmp	r3, #7
 8002496:	d101      	bne.n	800249c <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002498:	f002 f8f6 	bl	8004688 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <TIM2_ch1_IP_capture_callback+0x118>)
 800249e:	2104      	movs	r1, #4
 80024a0:	0018      	movs	r0, r3
 80024a2:	f003 f9c5 	bl	8005830 <Set_Status_Bit>
}
 80024a6:	e031      	b.n	800250c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80024a8:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d108      	bne.n	80024c4 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 80024b2:	f001 fcdb 	bl	8003e6c <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 80024be:	2202      	movs	r2, #2
 80024c0:	705a      	strb	r2, [r3, #1]
}
 80024c2:	e023      	b.n	800250c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d11e      	bne.n	800250c <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 80024ce:	f001 fcaf 	bl	8003e30 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <TIM2_ch1_IP_capture_callback+0x108>)
 80024da:	2203      	movs	r2, #3
 80024dc:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 80024de:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <TIM2_ch1_IP_capture_callback+0x10c>)
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <TIM2_ch1_IP_capture_callback+0x110>)
 80024e2:	0011      	movs	r1, r2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f001 fc91 	bl	8003e0c <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80024ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <TIM2_ch1_IP_capture_callback+0x114>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d004      	beq.n	80024fe <TIM2_ch1_IP_capture_callback+0xea>
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <TIM2_ch1_IP_capture_callback+0x114>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d101      	bne.n	8002502 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 80024fe:	f002 f8c3 	bl	8004688 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002502:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <TIM2_ch1_IP_capture_callback+0x118>)
 8002504:	2104      	movs	r1, #4
 8002506:	0018      	movs	r0, r3
 8002508:	f003 f992 	bl	8005830 <Set_Status_Bit>
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000c18 	.word	0x20000c18
 8002518:	20000c1c 	.word	0x20000c1c
 800251c:	2000043c 	.word	0x2000043c
 8002520:	20000c80 	.word	0x20000c80
 8002524:	20000c38 	.word	0x20000c38
 8002528:	20000428 	.word	0x20000428
 800252c:	20000c20 	.word	0x20000c20

08002530 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002538:	240c      	movs	r4, #12
 800253a:	193b      	adds	r3, r7, r4
 800253c:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 800253e:	7852      	ldrb	r2, [r2, #1]
 8002540:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002542:	4b3a      	ldr	r3, [pc, #232]	@ (800262c <TIM2_ch1_overflow_callback+0xfc>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d131      	bne.n	80025b0 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 800254c:	4b37      	ldr	r3, [pc, #220]	@ (800262c <TIM2_ch1_overflow_callback+0xfc>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002552:	4b36      	ldr	r3, [pc, #216]	@ (800262c <TIM2_ch1_overflow_callback+0xfc>)
 8002554:	2201      	movs	r2, #1
 8002556:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <TIM2_ch1_overflow_callback+0x100>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800255e:	4b35      	ldr	r3, [pc, #212]	@ (8002634 <TIM2_ch1_overflow_callback+0x104>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	23a0      	movs	r3, #160	@ 0xa0
 800256a:	05db      	lsls	r3, r3, #23
 800256c:	2201      	movs	r2, #1
 800256e:	0018      	movs	r0, r3
 8002570:	f005 fa0d 	bl	800798e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002574:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <TIM2_ch1_overflow_callback+0x108>)
 8002576:	2200      	movs	r2, #0
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	0018      	movs	r0, r3
 800257c:	f005 fa07 	bl	800798e <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002580:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b04      	cmp	r3, #4
 8002588:	d049      	beq.n	800261e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800258a:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b06      	cmp	r3, #6
 8002592:	d044      	beq.n	800261e <TIM2_ch1_overflow_callback+0xee>
 8002594:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800259a:	2b08      	cmp	r3, #8
 800259c:	d03f      	beq.n	800261e <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800259e:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 80025a0:	4a21      	ldr	r2, [pc, #132]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 80025a2:	7812      	ldrb	r2, [r2, #0]
 80025a4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 80025a8:	193a      	adds	r2, r7, r4
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 80025ae:	e036      	b.n	800261e <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <TIM2_ch1_overflow_callback+0xfc>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d131      	bne.n	800261e <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <TIM2_ch1_overflow_callback+0xfc>)
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <TIM2_ch1_overflow_callback+0xfc>)
 80025c2:	2203      	movs	r2, #3
 80025c4:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <TIM2_ch1_overflow_callback+0x100>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80025cc:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <TIM2_ch1_overflow_callback+0x104>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	0099      	lsls	r1, r3, #2
 80025d6:	23a0      	movs	r3, #160	@ 0xa0
 80025d8:	05db      	lsls	r3, r3, #23
 80025da:	2201      	movs	r2, #1
 80025dc:	0018      	movs	r0, r3
 80025de:	f005 f9d6 	bl	800798e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <TIM2_ch1_overflow_callback+0x108>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	2140      	movs	r1, #64	@ 0x40
 80025e8:	0018      	movs	r0, r3
 80025ea:	f005 f9d0 	bl	800798e <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d012      	beq.n	800261e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d00d      	beq.n	800261e <TIM2_ch1_overflow_callback+0xee>
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002608:	2b08      	cmp	r3, #8
 800260a:	d008      	beq.n	800261e <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 800260e:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <TIM2_ch1_overflow_callback+0xf8>)
 8002616:	220c      	movs	r2, #12
 8002618:	18ba      	adds	r2, r7, r2
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	701a      	strb	r2, [r3, #0]
}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b005      	add	sp, #20
 8002624:	bd90      	pop	{r4, r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	20000428 	.word	0x20000428
 800262c:	2000043c 	.word	0x2000043c
 8002630:	20000cc8 	.word	0x20000cc8
 8002634:	20000c1e 	.word	0x20000c1e
 8002638:	50000800 	.word	0x50000800

0800263c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002644:	4b41      	ldr	r3, [pc, #260]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b0b      	cmp	r3, #11
 800264c:	d01c      	beq.n	8002688 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800264e:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d017      	beq.n	8002688 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002658:	4b3c      	ldr	r3, [pc, #240]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b0d      	cmp	r3, #13
 8002660:	d012      	beq.n	8002688 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002662:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b10      	cmp	r3, #16
 800266a:	d00d      	beq.n	8002688 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800266c:	4b37      	ldr	r3, [pc, #220]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b11      	cmp	r3, #17
 8002674:	d008      	beq.n	8002688 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002676:	4b35      	ldr	r3, [pc, #212]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800267c:	2b12      	cmp	r3, #18
 800267e:	d003      	beq.n	8002688 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002680:	4b33      	ldr	r3, [pc, #204]	@ (8002750 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002682:	0018      	movs	r0, r3
 8002684:	f001 fd08 	bl	8004098 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002688:	4b32      	ldr	r3, [pc, #200]	@ (8002754 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 800268a:	2100      	movs	r1, #0
 800268c:	0018      	movs	r0, r3
 800268e:	f003 f84c 	bl	800572a <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d106      	bne.n	80026aa <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 800269c:	4b2e      	ldr	r3, [pc, #184]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80026a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80026a4:	2202      	movs	r2, #2
 80026a6:	705a      	strb	r2, [r3, #1]
 80026a8:	e00a      	b.n	80026c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d105      	bne.n	80026c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80026b4:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80026bc:	2203      	movs	r2, #3
 80026be:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c0:	4b22      	ldr	r3, [pc, #136]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	d03c      	beq.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80026ca:	4b20      	ldr	r3, [pc, #128]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d037      	beq.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b0d      	cmp	r3, #13
 80026dc:	d032      	beq.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d02d      	beq.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026e8:	4b18      	ldr	r3, [pc, #96]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d028      	beq.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026f2:	4b16      	ldr	r3, [pc, #88]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d023      	beq.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80026fc:	4a17      	ldr	r2, [pc, #92]	@ (800275c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 80026fe:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002700:	0011      	movs	r1, r2
 8002702:	0018      	movs	r0, r3
 8002704:	f001 fb82 	bl	8003e0c <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002708:	4a15      	ldr	r2, [pc, #84]	@ (8002760 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f001 fb7c 	bl	8003e0c <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002716:	2108      	movs	r1, #8
 8002718:	0018      	movs	r0, r3
 800271a:	f003 f889 	bl	8005830 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002720:	2100      	movs	r1, #0
 8002722:	0018      	movs	r0, r3
 8002724:	f001 fce4 	bl	80040f0 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f001 fdd4 	bl	80042dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002734:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	001a      	movs	r2, r3
 800273a:	490d      	ldr	r1, [pc, #52]	@ (8002770 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 800273c:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 800273e:	0018      	movs	r0, r3
 8002740:	f003 fd1a 	bl	8006178 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000428 	.word	0x20000428
 8002750:	20000c80 	.word	0x20000c80
 8002754:	200008bc 	.word	0x200008bc
 8002758:	2000043c 	.word	0x2000043c
 800275c:	20000ca4 	.word	0x20000ca4
 8002760:	20000c38 	.word	0x20000c38
 8002764:	20000c20 	.word	0x20000c20
 8002768:	20000020 	.word	0x20000020
 800276c:	0800d51c 	.word	0x0800d51c
 8002770:	20000c2c 	.word	0x20000c2c
 8002774:	200004e8 	.word	0x200004e8

08002778 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002790:	4bbe      	ldr	r3, [pc, #760]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 8002792:	0018      	movs	r0, r3
 8002794:	f7fe fc98 	bl	80010c8 <Is_System_Real_Time_Status_Byte>
 8002798:	0003      	movs	r3, r0
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <UART2_RX_transfer_complete_callback+0x1a>
 800279e:	f000 fc0c 	bl	8002fba <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 80027a2:	4bbb      	ldr	r3, [pc, #748]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x308>)
 80027a4:	2180      	movs	r1, #128	@ 0x80
 80027a6:	0018      	movs	r0, r3
 80027a8:	f003 f82e 	bl	8005808 <Get_Status_Bit>
 80027ac:	0003      	movs	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <UART2_RX_transfer_complete_callback+0x2e>
 80027b2:	f001 f831 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 80027b6:	4bb7      	ldr	r3, [pc, #732]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x30c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d159      	bne.n	8002874 <UART2_RX_transfer_complete_callback+0xec>
 80027c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002a98 <UART2_RX_transfer_complete_callback+0x310>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d154      	bne.n	8002874 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80027ca:	4bb4      	ldr	r3, [pc, #720]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d013      	beq.n	80027fc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 80027d4:	4bb1      	ldr	r3, [pc, #708]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d00e      	beq.n	80027fc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 80027de:	4baf      	ldr	r3, [pc, #700]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b06      	cmp	r3, #6
 80027e6:	d009      	beq.n	80027fc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 80027e8:	4bac      	ldr	r3, [pc, #688]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d004      	beq.n	80027fc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 80027f2:	4baa      	ldr	r3, [pc, #680]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d13b      	bne.n	8002874 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80027fc:	4ba3      	ldr	r3, [pc, #652]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2bfa      	cmp	r3, #250	@ 0xfa
 8002804:	d10b      	bne.n	800281e <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002806:	4ba5      	ldr	r3, [pc, #660]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002808:	4aa4      	ldr	r2, [pc, #656]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 800280e:	4ba3      	ldr	r3, [pc, #652]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002810:	2209      	movs	r2, #9
 8002812:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002814:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800281a:	f000 fffa 	bl	8003812 <UART2_RX_transfer_complete_callback+0x108a>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800281e:	4b9b      	ldr	r3, [pc, #620]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2bf8      	cmp	r3, #248	@ 0xf8
 8002826:	d001      	beq.n	800282c <UART2_RX_transfer_complete_callback+0xa4>
 8002828:	f000 fff3 	bl	8003812 <UART2_RX_transfer_complete_callback+0x108a>

					speed_fsm.prev_state = speed_fsm.current_state;
 800282c:	4b9b      	ldr	r3, [pc, #620]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 800282e:	4a9b      	ldr	r2, [pc, #620]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002834:	4b99      	ldr	r3, [pc, #612]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002836:	220b      	movs	r2, #11
 8002838:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800283a:	4b99      	ldr	r3, [pc, #612]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	0099      	lsls	r1, r3, #2
 8002844:	23a0      	movs	r3, #160	@ 0xa0
 8002846:	05db      	lsls	r3, r3, #23
 8002848:	2200      	movs	r2, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f005 f89f 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002850:	4b94      	ldr	r3, [pc, #592]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002852:	2201      	movs	r2, #1
 8002854:	2140      	movs	r1, #64	@ 0x40
 8002856:	0018      	movs	r0, r3
 8002858:	f005 f899 	bl	800798e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800285c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x30c>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002862:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b8c      	ldr	r3, [pc, #560]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 800286e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002870:	f000 ffcf 	bl	8003812 <UART2_RX_transfer_complete_callback+0x108a>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002874:	4b89      	ldr	r3, [pc, #548]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b09      	cmp	r3, #9
 800287c:	d123      	bne.n	80028c6 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800287e:	4b83      	ldr	r3, [pc, #524]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2bf8      	cmp	r3, #248	@ 0xf8
 8002886:	d001      	beq.n	800288c <UART2_RX_transfer_complete_callback+0x104>
 8002888:	f000 ffc6 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	23a0      	movs	r3, #160	@ 0xa0
 8002892:	05db      	lsls	r3, r3, #23
 8002894:	2200      	movs	r2, #0
 8002896:	0018      	movs	r0, r3
 8002898:	f005 f879 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800289c:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 800289e:	2201      	movs	r2, #1
 80028a0:	2140      	movs	r1, #64	@ 0x40
 80028a2:	0018      	movs	r0, r3
 80028a4:	f005 f873 	bl	800798e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80028a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x30c>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b79      	ldr	r3, [pc, #484]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80028ba:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80028bc:	4b77      	ldr	r3, [pc, #476]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80028be:	220a      	movs	r2, #10
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	f000 ffa9 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 80028c6:	4b75      	ldr	r3, [pc, #468]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	d145      	bne.n	800295c <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028d0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80028d8:	d001      	beq.n	80028de <UART2_RX_transfer_complete_callback+0x156>
 80028da:	f000 ff9d 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_fsm = COMPILING; //just in case
 80028de:	4b6d      	ldr	r3, [pc, #436]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x30c>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028e4:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80028f0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80028f2:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b0b      	cmp	r3, #11
 80028fa:	d80f      	bhi.n	800291c <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	0099      	lsls	r1, r3, #2
 8002900:	23a0      	movs	r3, #160	@ 0xa0
 8002902:	05db      	lsls	r3, r3, #23
 8002904:	2200      	movs	r2, #0
 8002906:	0018      	movs	r0, r3
 8002908:	f005 f841 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800290c:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 800290e:	2201      	movs	r2, #1
 8002910:	2140      	movs	r1, #64	@ 0x40
 8002912:	0018      	movs	r0, r3
 8002914:	f005 f83b 	bl	800798e <HAL_GPIO_WritePin>
 8002918:	f000 ff7e 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 800291c:	4b60      	ldr	r3, [pc, #384]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b18      	cmp	r3, #24
 8002924:	d80f      	bhi.n	8002946 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	0099      	lsls	r1, r3, #2
 800292a:	23a0      	movs	r3, #160	@ 0xa0
 800292c:	05db      	lsls	r3, r3, #23
 800292e:	2201      	movs	r2, #1
 8002930:	0018      	movs	r0, r3
 8002932:	f005 f82c 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002936:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002938:	2200      	movs	r2, #0
 800293a:	2140      	movs	r1, #64	@ 0x40
 800293c:	0018      	movs	r0, r3
 800293e:	f005 f826 	bl	800798e <HAL_GPIO_WritePin>
 8002942:	f000 ff69 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002946:	4b55      	ldr	r3, [pc, #340]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002948:	220a      	movs	r2, #10
 800294a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800294c:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 800294e:	2208      	movs	r2, #8
 8002950:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002952:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	f000 ff5e 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 800295c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b0b      	cmp	r3, #11
 8002964:	d142      	bne.n	80029ec <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002966:	4b49      	ldr	r3, [pc, #292]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2bf8      	cmp	r3, #248	@ 0xf8
 800296e:	d001      	beq.n	8002974 <UART2_RX_transfer_complete_callback+0x1ec>
 8002970:	f000 ff52 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002974:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x30c>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800297a:	4b49      	ldr	r3, [pc, #292]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b46      	ldr	r3, [pc, #280]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002986:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002988:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b0b      	cmp	r3, #11
 8002990:	d80f      	bhi.n	80029b2 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	0099      	lsls	r1, r3, #2
 8002996:	23a0      	movs	r3, #160	@ 0xa0
 8002998:	05db      	lsls	r3, r3, #23
 800299a:	2200      	movs	r2, #0
 800299c:	0018      	movs	r0, r3
 800299e:	f004 fff6 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029a2:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	2140      	movs	r1, #64	@ 0x40
 80029a8:	0018      	movs	r0, r3
 80029aa:	f004 fff0 	bl	800798e <HAL_GPIO_WritePin>
 80029ae:	f000 ff33 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 80029b2:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b18      	cmp	r3, #24
 80029ba:	d80f      	bhi.n	80029dc <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	23a0      	movs	r3, #160	@ 0xa0
 80029c2:	05db      	lsls	r3, r3, #23
 80029c4:	2201      	movs	r2, #1
 80029c6:	0018      	movs	r0, r3
 80029c8:	f004 ffe1 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80029cc:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	2140      	movs	r1, #64	@ 0x40
 80029d2:	0018      	movs	r0, r3
 80029d4:	f004 ffdb 	bl	800798e <HAL_GPIO_WritePin>
 80029d8:	f000 ff1e 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 80029dc:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80029e2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80029e4:	220c      	movs	r2, #12
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	f000 ff16 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80029ec:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d158      	bne.n	8002aa8 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029f6:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2bf8      	cmp	r3, #248	@ 0xf8
 80029fe:	d138      	bne.n	8002a72 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a06:	4b26      	ldr	r3, [pc, #152]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a12:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b0b      	cmp	r3, #11
 8002a1c:	d80f      	bhi.n	8002a3e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	0099      	lsls	r1, r3, #2
 8002a22:	23a0      	movs	r3, #160	@ 0xa0
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	2200      	movs	r2, #0
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f004 ffb0 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	2140      	movs	r1, #64	@ 0x40
 8002a34:	0018      	movs	r0, r3
 8002a36:	f004 ffaa 	bl	800798e <HAL_GPIO_WritePin>
 8002a3a:	f000 feed 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002a3e:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b18      	cmp	r3, #24
 8002a46:	d80f      	bhi.n	8002a68 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	23a0      	movs	r3, #160	@ 0xa0
 8002a4e:	05db      	lsls	r3, r3, #23
 8002a50:	2201      	movs	r2, #1
 8002a52:	0018      	movs	r0, r3
 8002a54:	f004 ff9b 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2140      	movs	r1, #64	@ 0x40
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f004 ff95 	bl	800798e <HAL_GPIO_WritePin>
 8002a64:	f000 fed8 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <UART2_RX_transfer_complete_callback+0x318>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	f000 fed3 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x304>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a7a:	d001      	beq.n	8002a80 <UART2_RX_transfer_complete_callback+0x2f8>
 8002a7c:	f000 fecc 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <UART2_RX_transfer_complete_callback+0x314>)
 8002a82:	220d      	movs	r2, #13
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	f000 fec7 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	200004cc 	.word	0x200004cc
 8002a90:	20000c20 	.word	0x20000c20
 8002a94:	20000cc8 	.word	0x20000cc8
 8002a98:	2000043c 	.word	0x2000043c
 8002a9c:	20000428 	.word	0x20000428
 8002aa0:	20000c1e 	.word	0x20000c1e
 8002aa4:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002aa8:	4bdc      	ldr	r3, [pc, #880]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b0d      	cmp	r3, #13
 8002ab0:	d160      	bne.n	8002b74 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ab2:	4bdb      	ldr	r3, [pc, #876]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2bf8      	cmp	r3, #248	@ 0xf8
 8002aba:	d001      	beq.n	8002ac0 <UART2_RX_transfer_complete_callback+0x338>
 8002abc:	f000 feac 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002ac0:	4bd8      	ldr	r3, [pc, #864]	@ (8002e24 <UART2_RX_transfer_complete_callback+0x69c>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f001 fae8 	bl	8004098 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	23a0      	movs	r3, #160	@ 0xa0
 8002ace:	05db      	lsls	r3, r3, #23
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f004 ff5b 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ad8:	4bd3      	ldr	r3, [pc, #844]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	2140      	movs	r1, #64	@ 0x40
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f004 ff55 	bl	800798e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	0099      	lsls	r1, r3, #2
 8002ae8:	23a0      	movs	r3, #160	@ 0xa0
 8002aea:	05db      	lsls	r3, r3, #23
 8002aec:	2200      	movs	r2, #0
 8002aee:	0018      	movs	r0, r3
 8002af0:	f004 ff4d 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002af4:	4bcc      	ldr	r3, [pc, #816]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	2140      	movs	r1, #64	@ 0x40
 8002afa:	0018      	movs	r0, r3
 8002afc:	f004 ff47 	bl	800798e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b00:	4bca      	ldr	r3, [pc, #808]	@ (8002e2c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002b06:	4bca      	ldr	r3, [pc, #808]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002b0e:	220d      	movs	r2, #13
 8002b10:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002b12:	4bc2      	ldr	r3, [pc, #776]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002b14:	2208      	movs	r2, #8
 8002b16:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002b18:	4bc6      	ldr	r3, [pc, #792]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 fe04 	bl	800572a <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002b22:	4bc5      	ldr	r3, [pc, #788]	@ (8002e38 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002b28:	4ac4      	ldr	r2, [pc, #784]	@ (8002e3c <UART2_RX_transfer_complete_callback+0x6b4>)
 8002b2a:	4bbe      	ldr	r3, [pc, #760]	@ (8002e24 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b2c:	0011      	movs	r1, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f001 f96c 	bl	8003e0c <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002b34:	4ac2      	ldr	r2, [pc, #776]	@ (8002e40 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b36:	4bbb      	ldr	r3, [pc, #748]	@ (8002e24 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b38:	0011      	movs	r1, r2
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f001 f966 	bl	8003e0c <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002b40:	4bc0      	ldr	r3, [pc, #768]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b42:	2108      	movs	r1, #8
 8002b44:	0018      	movs	r0, r3
 8002b46:	f002 fe73 	bl	8005830 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002b4a:	4bbd      	ldr	r3, [pc, #756]	@ (8002e40 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 face 	bl	80040f0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002b54:	4abc      	ldr	r2, [pc, #752]	@ (8002e48 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002b56:	4bba      	ldr	r3, [pc, #744]	@ (8002e40 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b58:	0011      	movs	r1, r2
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 fbbe 	bl	80042dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002b60:	4bba      	ldr	r3, [pc, #744]	@ (8002e4c <UART2_RX_transfer_complete_callback+0x6c4>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	001a      	movs	r2, r3
 8002b66:	49ba      	ldr	r1, [pc, #744]	@ (8002e50 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002b68:	4bba      	ldr	r3, [pc, #744]	@ (8002e54 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f003 fb04 	bl	8006178 <HAL_ADC_Start_DMA>
 8002b70:	f000 fe52 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002b74:	4ba9      	ldr	r3, [pc, #676]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d146      	bne.n	8002c0c <UART2_RX_transfer_complete_callback+0x484>
 8002b7e:	4bb1      	ldr	r3, [pc, #708]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b80:	2120      	movs	r1, #32
 8002b82:	0018      	movs	r0, r3
 8002b84:	f002 fe40 	bl	8005808 <Get_Status_Bit>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d13f      	bne.n	8002c0c <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b8c:	4ba4      	ldr	r3, [pc, #656]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b94:	d001      	beq.n	8002b9a <UART2_RX_transfer_complete_callback+0x412>
 8002b96:	f000 fe3f 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b9a:	4ba4      	ldr	r3, [pc, #656]	@ (8002e2c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002ba0:	4ba3      	ldr	r3, [pc, #652]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4ba1      	ldr	r3, [pc, #644]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bac:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002bae:	4ba0      	ldr	r3, [pc, #640]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b0b      	cmp	r3, #11
 8002bb6:	d80f      	bhi.n	8002bd8 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	0099      	lsls	r1, r3, #2
 8002bbc:	23a0      	movs	r3, #160	@ 0xa0
 8002bbe:	05db      	lsls	r3, r3, #23
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f004 fee3 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002bc8:	4b97      	ldr	r3, [pc, #604]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2140      	movs	r1, #64	@ 0x40
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f004 fedd 	bl	800798e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bd4:	f000 fe20 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002bd8:	4b95      	ldr	r3, [pc, #596]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b18      	cmp	r3, #24
 8002be0:	d80f      	bhi.n	8002c02 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	0099      	lsls	r1, r3, #2
 8002be6:	23a0      	movs	r3, #160	@ 0xa0
 8002be8:	05db      	lsls	r3, r3, #23
 8002bea:	2201      	movs	r2, #1
 8002bec:	0018      	movs	r0, r3
 8002bee:	f004 fece 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	@ 0x40
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f004 fec8 	bl	800798e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bfe:	f000 fe0b 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 8002c02:	4b8b      	ldr	r3, [pc, #556]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c08:	f000 fe06 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002c0c:	4b83      	ldr	r3, [pc, #524]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d14c      	bne.n	8002cb0 <UART2_RX_transfer_complete_callback+0x528>
 8002c16:	4b88      	ldr	r3, [pc, #544]	@ (8002e38 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d147      	bne.n	8002cb0 <UART2_RX_transfer_complete_callback+0x528>
 8002c20:	4b88      	ldr	r3, [pc, #544]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c22:	2120      	movs	r1, #32
 8002c24:	0018      	movs	r0, r3
 8002c26:	f002 fdef 	bl	8005808 <Get_Status_Bit>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d13f      	bne.n	8002cb0 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c30:	4b7b      	ldr	r3, [pc, #492]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c38:	d11e      	bne.n	8002c78 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c40:	4b7b      	ldr	r3, [pc, #492]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b79      	ldr	r3, [pc, #484]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c4c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002c4e:	4b77      	ldr	r3, [pc, #476]	@ (8002e2c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002c54:	4b71      	ldr	r3, [pc, #452]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002c56:	2210      	movs	r2, #16
 8002c58:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c5a:	4b70      	ldr	r3, [pc, #448]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c60:	4b78      	ldr	r3, [pc, #480]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c62:	2120      	movs	r1, #32
 8002c64:	0018      	movs	r0, r3
 8002c66:	f002 fdf5 	bl	8005854 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c6a:	4b76      	ldr	r3, [pc, #472]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c6c:	2140      	movs	r1, #64	@ 0x40
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f002 fdf0 	bl	8005854 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c74:	f000 fdcf 	bl	8003816 <UART2_RX_transfer_complete_callback+0x108e>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002c78:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002c80:	d001      	beq.n	8002c86 <UART2_RX_transfer_complete_callback+0x4fe>
 8002c82:	f000 fdc8 	bl	8003816 <UART2_RX_transfer_complete_callback+0x108e>

					MIDI_CLK_tag = 0; //just in case
 8002c86:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002c8c:	4b63      	ldr	r3, [pc, #396]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002c8e:	220e      	movs	r2, #14
 8002c90:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c92:	4b62      	ldr	r3, [pc, #392]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002c94:	2208      	movs	r2, #8
 8002c96:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c98:	4b6a      	ldr	r3, [pc, #424]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f002 fdd9 	bl	8005854 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002ca2:	4b68      	ldr	r3, [pc, #416]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ca4:	2140      	movs	r1, #64	@ 0x40
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f002 fdd4 	bl	8005854 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cac:	f000 fdb3 	bl	8003816 <UART2_RX_transfer_complete_callback+0x108e>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b0e      	cmp	r3, #14
 8002cb8:	d123      	bne.n	8002d02 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cba:	4b59      	ldr	r3, [pc, #356]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cc2:	d001      	beq.n	8002cc8 <UART2_RX_transfer_complete_callback+0x540>
 8002cc4:	f000 fda8 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	0099      	lsls	r1, r3, #2
 8002ccc:	23a0      	movs	r3, #160	@ 0xa0
 8002cce:	05db      	lsls	r3, r3, #23
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f004 fe5b 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002cd8:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	2140      	movs	r1, #64	@ 0x40
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f004 fe55 	bl	800798e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002ce4:	4b51      	ldr	r3, [pc, #324]	@ (8002e2c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cea:	4b51      	ldr	r3, [pc, #324]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cf6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002cf8:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	f000 fd8b 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002d02:	4b46      	ldr	r3, [pc, #280]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d142      	bne.n	8002d92 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d0c:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d14:	d001      	beq.n	8002d1a <UART2_RX_transfer_complete_callback+0x592>
 8002d16:	f000 fd7f 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_tag++;
 8002d1a:	4b45      	ldr	r3, [pc, #276]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b42      	ldr	r3, [pc, #264]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d26:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d28:	4b41      	ldr	r3, [pc, #260]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b0b      	cmp	r3, #11
 8002d30:	d80f      	bhi.n	8002d52 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	0099      	lsls	r1, r3, #2
 8002d36:	23a0      	movs	r3, #160	@ 0xa0
 8002d38:	05db      	lsls	r3, r3, #23
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f004 fe26 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d42:	4b39      	ldr	r3, [pc, #228]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	2140      	movs	r1, #64	@ 0x40
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f004 fe20 	bl	800798e <HAL_GPIO_WritePin>
 8002d4e:	f000 fd63 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002d52:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b18      	cmp	r3, #24
 8002d5a:	d80f      	bhi.n	8002d7c <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	23a0      	movs	r3, #160	@ 0xa0
 8002d62:	05db      	lsls	r3, r3, #23
 8002d64:	2201      	movs	r2, #1
 8002d66:	0018      	movs	r0, r3
 8002d68:	f004 fe11 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2140      	movs	r1, #64	@ 0x40
 8002d72:	0018      	movs	r0, r3
 8002d74:	f004 fe0b 	bl	800798e <HAL_GPIO_WritePin>
 8002d78:	f000 fd4e 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002d7e:	220f      	movs	r2, #15
 8002d80:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d82:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002d84:	2208      	movs	r2, #8
 8002d86:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002d88:	4b29      	ldr	r3, [pc, #164]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	f000 fd43 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002d92:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d15d      	bne.n	8002e58 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d9c:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x698>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002da4:	d001      	beq.n	8002daa <UART2_RX_transfer_complete_callback+0x622>
 8002da6:	f000 fd37 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002daa:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002db6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b0b      	cmp	r3, #11
 8002dc0:	d80f      	bhi.n	8002de2 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	0099      	lsls	r1, r3, #2
 8002dc6:	23a0      	movs	r3, #160	@ 0xa0
 8002dc8:	05db      	lsls	r3, r3, #23
 8002dca:	2200      	movs	r2, #0
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f004 fdde 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2140      	movs	r1, #64	@ 0x40
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f004 fdd8 	bl	800798e <HAL_GPIO_WritePin>
 8002dde:	f000 fd1b 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002de2:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b18      	cmp	r3, #24
 8002dea:	d80f      	bhi.n	8002e0c <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	0099      	lsls	r1, r3, #2
 8002df0:	23a0      	movs	r3, #160	@ 0xa0
 8002df2:	05db      	lsls	r3, r3, #23
 8002df4:	2201      	movs	r2, #1
 8002df6:	0018      	movs	r0, r3
 8002df8:	f004 fdc9 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2140      	movs	r1, #64	@ 0x40
 8002e02:	0018      	movs	r0, r3
 8002e04:	f004 fdc3 	bl	800798e <HAL_GPIO_WritePin>
 8002e08:	f000 fd06 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x694>)
 8002e0e:	2211      	movs	r2, #17
 8002e10:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002e12:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	f000 fcfe 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
 8002e1c:	20000428 	.word	0x20000428
 8002e20:	200004cc 	.word	0x200004cc
 8002e24:	20000c80 	.word	0x20000c80
 8002e28:	50000800 	.word	0x50000800
 8002e2c:	20000cc8 	.word	0x20000cc8
 8002e30:	20000c1e 	.word	0x20000c1e
 8002e34:	200008bc 	.word	0x200008bc
 8002e38:	2000043c 	.word	0x2000043c
 8002e3c:	20000ca4 	.word	0x20000ca4
 8002e40:	20000c38 	.word	0x20000c38
 8002e44:	20000c20 	.word	0x20000c20
 8002e48:	20000020 	.word	0x20000020
 8002e4c:	0800d51c 	.word	0x0800d51c
 8002e50:	20000c2c 	.word	0x20000c2c
 8002e54:	200004e8 	.word	0x200004e8
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002e58:	4bd9      	ldr	r3, [pc, #868]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d146      	bne.n	8002ef0 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e62:	4bd8      	ldr	r3, [pc, #864]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e6a:	d135      	bne.n	8002ed8 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002e6c:	4bd6      	ldr	r3, [pc, #856]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4bd4      	ldr	r3, [pc, #848]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e78:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e7a:	4bd3      	ldr	r3, [pc, #844]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b0b      	cmp	r3, #11
 8002e82:	d80f      	bhi.n	8002ea4 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	23a0      	movs	r3, #160	@ 0xa0
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f004 fd7d 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e94:	4bcd      	ldr	r3, [pc, #820]	@ (80031cc <UART2_RX_transfer_complete_callback+0xa44>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	2140      	movs	r1, #64	@ 0x40
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f004 fd77 	bl	800798e <HAL_GPIO_WritePin>
 8002ea0:	f000 fcba 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002ea4:	4bc8      	ldr	r3, [pc, #800]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b18      	cmp	r3, #24
 8002eac:	d80f      	bhi.n	8002ece <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	0099      	lsls	r1, r3, #2
 8002eb2:	23a0      	movs	r3, #160	@ 0xa0
 8002eb4:	05db      	lsls	r3, r3, #23
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f004 fd68 	bl	800798e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ebe:	4bc3      	ldr	r3, [pc, #780]	@ (80031cc <UART2_RX_transfer_complete_callback+0xa44>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2140      	movs	r1, #64	@ 0x40
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f004 fd62 	bl	800798e <HAL_GPIO_WritePin>
 8002eca:	f000 fca5 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 8002ece:	4bbe      	ldr	r3, [pc, #760]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	f000 fca0 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002ed8:	4bba      	ldr	r3, [pc, #744]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2bfa      	cmp	r3, #250	@ 0xfa
 8002ee0:	d001      	beq.n	8002ee6 <UART2_RX_transfer_complete_callback+0x75e>
 8002ee2:	f000 fc99 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002ee6:	4bb6      	ldr	r3, [pc, #728]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002ee8:	2212      	movs	r2, #18
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	f000 fc94 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002ef0:	4bb3      	ldr	r3, [pc, #716]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b12      	cmp	r3, #18
 8002ef8:	d001      	beq.n	8002efe <UART2_RX_transfer_complete_callback+0x776>
 8002efa:	f000 fc8d 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002efe:	4bb1      	ldr	r3, [pc, #708]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f06:	d001      	beq.n	8002f0c <UART2_RX_transfer_complete_callback+0x784>
 8002f08:	f000 fc86 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002f0c:	4bb0      	ldr	r3, [pc, #704]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa48>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 f8c2 	bl	8004098 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	23a0      	movs	r3, #160	@ 0xa0
 8002f1a:	05db      	lsls	r3, r3, #23
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f004 fd35 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f24:	4ba9      	ldr	r3, [pc, #676]	@ (80031cc <UART2_RX_transfer_complete_callback+0xa44>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	2140      	movs	r1, #64	@ 0x40
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f004 fd2f 	bl	800798e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	0099      	lsls	r1, r3, #2
 8002f34:	23a0      	movs	r3, #160	@ 0xa0
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	2200      	movs	r2, #0
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f004 fd27 	bl	800798e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f40:	4ba2      	ldr	r3, [pc, #648]	@ (80031cc <UART2_RX_transfer_complete_callback+0xa44>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	2140      	movs	r1, #64	@ 0x40
 8002f46:	0018      	movs	r0, r3
 8002f48:	f004 fd21 	bl	800798e <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002f4e:	2212      	movs	r2, #18
 8002f50:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002f52:	4b9b      	ldr	r3, [pc, #620]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002f54:	2208      	movs	r2, #8
 8002f56:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002f58:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002f5e:	4b9d      	ldr	r3, [pc, #628]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa4c>)
 8002f60:	2100      	movs	r1, #0
 8002f62:	0018      	movs	r0, r3
 8002f64:	f002 fbe1 	bl	800572a <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002f68:	4b9b      	ldr	r3, [pc, #620]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa50>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002f6e:	4a9b      	ldr	r2, [pc, #620]	@ (80031dc <UART2_RX_transfer_complete_callback+0xa54>)
 8002f70:	4b97      	ldr	r3, [pc, #604]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa48>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 ff49 	bl	8003e0c <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002f7a:	4a99      	ldr	r2, [pc, #612]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa58>)
 8002f7c:	4b94      	ldr	r3, [pc, #592]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa48>)
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 ff43 	bl	8003e0c <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002f86:	4b97      	ldr	r3, [pc, #604]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002f88:	2108      	movs	r1, #8
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f002 fc50 	bl	8005830 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002f90:	4b93      	ldr	r3, [pc, #588]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa58>)
 8002f92:	2100      	movs	r1, #0
 8002f94:	0018      	movs	r0, r3
 8002f96:	f001 f8ab 	bl	80040f0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002f9a:	4a93      	ldr	r2, [pc, #588]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002f9c:	4b90      	ldr	r3, [pc, #576]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa58>)
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f001 f99b 	bl	80042dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002fa6:	4b91      	ldr	r3, [pc, #580]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa64>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	001a      	movs	r2, r3
 8002fac:	4990      	ldr	r1, [pc, #576]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa68>)
 8002fae:	4b91      	ldr	r3, [pc, #580]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa6c>)
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f003 f8e1 	bl	8006178 <HAL_ADC_Start_DMA>
 8002fb6:	f000 fc2f 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8002fba:	4b8f      	ldr	r3, [pc, #572]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d000      	beq.n	8002fc6 <UART2_RX_transfer_complete_callback+0x83e>
 8002fc4:	e25d      	b.n	8003482 <UART2_RX_transfer_complete_callback+0xcfa>

			if(running_status_byte == 0){
 8002fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d000      	beq.n	8002fd2 <UART2_RX_transfer_complete_callback+0x84a>
 8002fd0:	e099      	b.n	8003106 <UART2_RX_transfer_complete_callback+0x97e>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003200 <UART2_RX_transfer_complete_callback+0xa78>)
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fe f814 	bl	8001002 <Is_Data_Buffer_Empty>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <UART2_RX_transfer_complete_callback+0x85c>
 8002fe0:	f000 fc1a 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					if(Is_Status_Byte(rx_buffer) == YES){
 8002fe4:	4b77      	ldr	r3, [pc, #476]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd feca 	bl	8000d80 <Is_Status_Byte>
 8002fec:	0003      	movs	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d001      	beq.n	8002ff6 <UART2_RX_transfer_complete_callback+0x86e>
 8002ff2:	f000 fc11 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002ff6:	4b73      	ldr	r3, [pc, #460]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7fd fef3 	bl	8000de4 <Is_PC_Status_Byte>
 8002ffe:	0003      	movs	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d130      	bne.n	8003066 <UART2_RX_transfer_complete_callback+0x8de>

							running_status_byte = (uint8_t)*rx_buffer;
 8003004:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b7c      	ldr	r3, [pc, #496]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 800300c:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800300e:	4b7d      	ldr	r3, [pc, #500]	@ (8003204 <UART2_RX_transfer_complete_callback+0xa7c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	4b6b      	ldr	r3, [pc, #428]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003016:	0011      	movs	r1, r2
 8003018:	0018      	movs	r0, r3
 800301a:	f7fd ffd1 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800301e:	0003      	movs	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10b      	bne.n	800303c <UART2_RX_transfer_complete_callback+0x8b4>

								active_status_byte = (uint8_t)*rx_buffer;
 8003024:	4b67      	ldr	r3, [pc, #412]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b73      	ldr	r3, [pc, #460]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 800302c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800302e:	4b6d      	ldr	r3, [pc, #436]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003030:	2140      	movs	r1, #64	@ 0x40
 8003032:	0018      	movs	r0, r3
 8003034:	f002 fbfc 	bl	8005830 <Set_Status_Bit>
 8003038:	f000 fbee 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800303c:	4b69      	ldr	r3, [pc, #420]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 800303e:	0018      	movs	r0, r3
 8003040:	f7fe f875 	bl	800112e <Is_OMNI_On>
 8003044:	0003      	movs	r3, r0
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <UART2_RX_transfer_complete_callback+0x8c6>
 800304a:	f000 fbe5 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

									active_status_byte = (uint8_t)*rx_buffer;
 800304e:	4b5d      	ldr	r3, [pc, #372]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b68      	ldr	r3, [pc, #416]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 8003056:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003058:	4b62      	ldr	r3, [pc, #392]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 800305a:	2140      	movs	r1, #64	@ 0x40
 800305c:	0018      	movs	r0, r3
 800305e:	f002 fbe7 	bl	8005830 <Set_Status_Bit>
 8003062:	f000 fbd9 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003066:	4b57      	ldr	r3, [pc, #348]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd fed7 	bl	8000e1c <Is_CC_Status_Byte>
 800306e:	0003      	movs	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d130      	bne.n	80030d6 <UART2_RX_transfer_complete_callback+0x94e>

							running_status_byte = (uint8_t)*rx_buffer;
 8003074:	4b53      	ldr	r3, [pc, #332]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4b60      	ldr	r3, [pc, #384]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 800307c:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800307e:	4b61      	ldr	r3, [pc, #388]	@ (8003204 <UART2_RX_transfer_complete_callback+0xa7c>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b4f      	ldr	r3, [pc, #316]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f7fd ff99 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800308e:	0003      	movs	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10b      	bne.n	80030ac <UART2_RX_transfer_complete_callback+0x924>

								active_status_byte = (uint8_t)*rx_buffer;
 8003094:	4b4b      	ldr	r3, [pc, #300]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b57      	ldr	r3, [pc, #348]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 800309c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800309e:	4b51      	ldr	r3, [pc, #324]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 80030a0:	2140      	movs	r1, #64	@ 0x40
 80030a2:	0018      	movs	r0, r3
 80030a4:	f002 fbc4 	bl	8005830 <Set_Status_Bit>
 80030a8:	f000 fbb6 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80030ac:	4b4d      	ldr	r3, [pc, #308]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fe f83d 	bl	800112e <Is_OMNI_On>
 80030b4:	0003      	movs	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d001      	beq.n	80030be <UART2_RX_transfer_complete_callback+0x936>
 80030ba:	f000 fbad 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

									active_status_byte = (uint8_t)*rx_buffer;
 80030be:	4b41      	ldr	r3, [pc, #260]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b4c      	ldr	r3, [pc, #304]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 80030c6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80030c8:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	0018      	movs	r0, r3
 80030ce:	f002 fbaf 	bl	8005830 <Set_Status_Bit>
 80030d2:	f000 fba1 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80030d8:	0018      	movs	r0, r3
 80030da:	f7fd ff61 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80030de:	0003      	movs	r3, r0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <UART2_RX_transfer_complete_callback+0x960>
 80030e4:	f000 fb98 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							active_status_byte = (uint8_t)*rx_buffer;
 80030e8:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b42      	ldr	r3, [pc, #264]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 80030f0:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 80030f2:	4b42      	ldr	r3, [pc, #264]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80030f8:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 80030fa:	2140      	movs	r1, #64	@ 0x40
 80030fc:	0018      	movs	r0, r3
 80030fe:	f002 fb97 	bl	8005830 <Set_Status_Bit>
 8003102:	f000 fb89 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 8003106:	4b3d      	ldr	r3, [pc, #244]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <UART2_RX_transfer_complete_callback+0x98c>
 8003110:	f000 fb82 	bl	8003818 <UART2_RX_transfer_complete_callback+0x1090>

				if(Is_Data_Byte(rx_buffer) == YES){
 8003114:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003116:	0018      	movs	r0, r3
 8003118:	f7fd fe4b 	bl	8000db2 <Is_Data_Byte>
 800311c:	0003      	movs	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d000      	beq.n	8003124 <UART2_RX_transfer_complete_callback+0x99c>
 8003122:	e124      	b.n	800336e <UART2_RX_transfer_complete_callback+0xbe6>

					Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003124:	4b2f      	ldr	r3, [pc, #188]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003126:	2140      	movs	r1, #64	@ 0x40
 8003128:	0018      	movs	r0, r3
 800312a:	f002 fb81 	bl	8005830 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800312e:	4b33      	ldr	r3, [pc, #204]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 8003130:	0018      	movs	r0, r3
 8003132:	f7fd fe57 	bl	8000de4 <Is_PC_Status_Byte>
 8003136:	0003      	movs	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d128      	bne.n	800318e <UART2_RX_transfer_complete_callback+0xa06>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800313c:	4b30      	ldr	r3, [pc, #192]	@ (8003200 <UART2_RX_transfer_complete_callback+0xa78>)
 800313e:	0018      	movs	r0, r3
 8003140:	f7fd ff5f 	bl	8001002 <Is_Data_Buffer_Empty>
 8003144:	0003      	movs	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d000      	beq.n	800314c <UART2_RX_transfer_complete_callback+0x9c4>
 800314a:	e365      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800314c:	4b1d      	ldr	r3, [pc, #116]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 800314e:	2104      	movs	r1, #4
 8003150:	0018      	movs	r0, r3
 8003152:	f7fd ffa4 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 8003156:	0003      	movs	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10a      	bne.n	8003172 <UART2_RX_transfer_complete_callback+0x9ea>

								Set_All_Pots_to_PC_Mode();
 800315c:	f7fd fdd8 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003160:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	3301      	adds	r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <UART2_RX_transfer_complete_callback+0xa80>)
 800316c:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800316e:	f7fd f9d7 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <UART2_RX_transfer_complete_callback+0xa78>)
 8003174:	0018      	movs	r0, r3
 8003176:	f7fd ff74 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 800317a:	4b1f      	ldr	r3, [pc, #124]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa70>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]

							//not really required
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003180:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <UART2_RX_transfer_complete_callback+0xa84>)
 8003184:	0011      	movs	r1, r2
 8003186:	0018      	movs	r0, r3
 8003188:	f7fd ffeb 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 800318c:	e344      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 800318e:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa74>)
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd fe43 	bl	8000e1c <Is_CC_Status_Byte>
 8003196:	0003      	movs	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d000      	beq.n	800319e <UART2_RX_transfer_complete_callback+0xa16>
 800319c:	e33c      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800319e:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <UART2_RX_transfer_complete_callback+0xa78>)
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7fd ff2e 	bl	8001002 <Is_Data_Buffer_Empty>
 80031a6:	0003      	movs	r3, r0
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d131      	bne.n	8003210 <UART2_RX_transfer_complete_callback+0xa88>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <UART2_RX_transfer_complete_callback+0xa78>)
 80031b4:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80031b6:	4b15      	ldr	r3, [pc, #84]	@ (800320c <UART2_RX_transfer_complete_callback+0xa84>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e32c      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	20000428 	.word	0x20000428
 80031c4:	200004cc 	.word	0x200004cc
 80031c8:	20000c1e 	.word	0x20000c1e
 80031cc:	50000800 	.word	0x50000800
 80031d0:	20000c80 	.word	0x20000c80
 80031d4:	200008bc 	.word	0x200008bc
 80031d8:	2000043c 	.word	0x2000043c
 80031dc:	20000ca4 	.word	0x20000ca4
 80031e0:	20000c38 	.word	0x20000c38
 80031e4:	20000c20 	.word	0x20000c20
 80031e8:	20000020 	.word	0x20000020
 80031ec:	0800d51c 	.word	0x0800d51c
 80031f0:	20000c2c 	.word	0x20000c2c
 80031f4:	200004e8 	.word	0x200004e8
 80031f8:	200004be 	.word	0x200004be
 80031fc:	200004bf 	.word	0x200004bf
 8003200:	200004c0 	.word	0x200004c0
 8003204:	200004bd 	.word	0x200004bd
 8003208:	200004b0 	.word	0x200004b0
 800320c:	20000c28 	.word	0x20000c28

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003210:	4bd3      	ldr	r3, [pc, #844]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4bd3      	ldr	r3, [pc, #844]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003218:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800321a:	4ad3      	ldr	r2, [pc, #844]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 800321c:	4bd3      	ldr	r3, [pc, #844]	@ (800356c <UART2_RX_transfer_complete_callback+0xde4>)
 800321e:	0011      	movs	r1, r2
 8003220:	0018      	movs	r0, r3
 8003222:	f7fd ff9e 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003226:	4bcf      	ldr	r3, [pc, #828]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003228:	0018      	movs	r0, r3
 800322a:	f7fd fe13 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800322e:	0003      	movs	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d142      	bne.n	80032ba <UART2_RX_transfer_complete_callback+0xb32>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003234:	4bce      	ldr	r3, [pc, #824]	@ (8003570 <UART2_RX_transfer_complete_callback+0xde8>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4bce      	ldr	r3, [pc, #824]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f7fd febe 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003244:	0003      	movs	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d12f      	bne.n	80032aa <UART2_RX_transfer_complete_callback+0xb22>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800324a:	4acb      	ldr	r2, [pc, #812]	@ (8003578 <UART2_RX_transfer_complete_callback+0xdf0>)
 800324c:	4bc5      	ldr	r3, [pc, #788]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 800324e:	0011      	movs	r1, r2
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd fe5e 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003256:	0003      	movs	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d126      	bne.n	80032aa <UART2_RX_transfer_complete_callback+0xb22>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800325c:	4bc1      	ldr	r3, [pc, #772]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b79      	cmp	r3, #121	@ 0x79
 8003264:	d106      	bne.n	8003274 <UART2_RX_transfer_complete_callback+0xaec>

											Reset_All_Controllers(&params, &delay_line);
 8003266:	4ac5      	ldr	r2, [pc, #788]	@ (800357c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003268:	4bc5      	ldr	r3, [pc, #788]	@ (8003580 <UART2_RX_transfer_complete_callback+0xdf8>)
 800326a:	0011      	movs	r1, r2
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd ff93 	bl	8001198 <Reset_All_Controllers>
 8003272:	e01a      	b.n	80032aa <UART2_RX_transfer_complete_callback+0xb22>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003274:	4bbb      	ldr	r3, [pc, #748]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b7a      	cmp	r3, #122	@ 0x7a
 800327c:	d102      	bne.n	8003284 <UART2_RX_transfer_complete_callback+0xafc>

											Set_Local_Control();
 800327e:	f7fd ffe5 	bl	800124c <Set_Local_Control>
 8003282:	e012      	b.n	80032aa <UART2_RX_transfer_complete_callback+0xb22>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003284:	4bb7      	ldr	r3, [pc, #732]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b7c      	cmp	r3, #124	@ 0x7c
 800328c:	d104      	bne.n	8003298 <UART2_RX_transfer_complete_callback+0xb10>

											Set_OMNI_Off(&statuses);
 800328e:	4bb6      	ldr	r3, [pc, #728]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003290:	0018      	movs	r0, r3
 8003292:	f7fe f813 	bl	80012bc <Set_OMNI_Off>
 8003296:	e008      	b.n	80032aa <UART2_RX_transfer_complete_callback+0xb22>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003298:	4bb2      	ldr	r3, [pc, #712]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b7d      	cmp	r3, #125	@ 0x7d
 80032a0:	d103      	bne.n	80032aa <UART2_RX_transfer_complete_callback+0xb22>

											Set_OMNI_On(&statuses);
 80032a2:	4bb1      	ldr	r3, [pc, #708]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7fe f819 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 80032aa:	4bb2      	ldr	r3, [pc, #712]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80032b0:	4bac      	ldr	r3, [pc, #688]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd fed5 	bl	8001062 <Clear_Data_Buffer>
 80032b8:	e2ae      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032ba:	4baa      	ldr	r3, [pc, #680]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fd fdf5 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 80032c2:	0003      	movs	r3, r0
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d14a      	bne.n	800335e <UART2_RX_transfer_complete_callback+0xbd6>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 80032c8:	4ba9      	ldr	r3, [pc, #676]	@ (8003570 <UART2_RX_transfer_complete_callback+0xde8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4ba9      	ldr	r3, [pc, #676]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 80032d0:	0011      	movs	r1, r2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd fe74 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80032d8:	0003      	movs	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d006      	beq.n	80032ec <UART2_RX_transfer_complete_callback+0xb64>
										|| (Is_OMNI_On(&statuses) == YES)){
 80032de:	4ba2      	ldr	r3, [pc, #648]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fd ff24 	bl	800112e <Is_OMNI_On>
 80032e6:	0003      	movs	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d130      	bne.n	800334e <UART2_RX_transfer_complete_callback+0xbc6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80032ec:	4b9d      	ldr	r3, [pc, #628]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b14      	cmp	r3, #20
 80032f4:	d104      	bne.n	8003300 <UART2_RX_transfer_complete_callback+0xb78>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80032f6:	4ba0      	ldr	r3, [pc, #640]	@ (8003578 <UART2_RX_transfer_complete_callback+0xdf0>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fd fc87 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80032fe:	e026      	b.n	800334e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003300:	4b98      	ldr	r3, [pc, #608]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b15      	cmp	r3, #21
 8003308:	d104      	bne.n	8003314 <UART2_RX_transfer_complete_callback+0xb8c>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800330a:	4b9b      	ldr	r3, [pc, #620]	@ (8003578 <UART2_RX_transfer_complete_callback+0xdf0>)
 800330c:	0018      	movs	r0, r3
 800330e:	f7fd fc97 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
 8003312:	e01c      	b.n	800334e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003314:	4b93      	ldr	r3, [pc, #588]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b16      	cmp	r3, #22
 800331c:	d104      	bne.n	8003328 <UART2_RX_transfer_complete_callback+0xba0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800331e:	4b96      	ldr	r3, [pc, #600]	@ (8003578 <UART2_RX_transfer_complete_callback+0xdf0>)
 8003320:	0018      	movs	r0, r3
 8003322:	f7fd fca7 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003326:	e012      	b.n	800334e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003328:	4b8e      	ldr	r3, [pc, #568]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b17      	cmp	r3, #23
 8003330:	d104      	bne.n	800333c <UART2_RX_transfer_complete_callback+0xbb4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003332:	4b91      	ldr	r3, [pc, #580]	@ (8003578 <UART2_RX_transfer_complete_callback+0xdf0>)
 8003334:	0018      	movs	r0, r3
 8003336:	f7fd fcb7 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 800333a:	e008      	b.n	800334e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800333c:	4b89      	ldr	r3, [pc, #548]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b18      	cmp	r3, #24
 8003344:	d103      	bne.n	800334e <UART2_RX_transfer_complete_callback+0xbc6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003346:	4b8c      	ldr	r3, [pc, #560]	@ (8003578 <UART2_RX_transfer_complete_callback+0xdf0>)
 8003348:	0018      	movs	r0, r3
 800334a:	f7fd fcc7 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 800334e:	4b89      	ldr	r3, [pc, #548]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003354:	4b83      	ldr	r3, [pc, #524]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003356:	0018      	movs	r0, r3
 8003358:	f7fd fe83 	bl	8001062 <Clear_Data_Buffer>
 800335c:	e25c      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800335e:	4b85      	ldr	r3, [pc, #532]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003364:	4b7f      	ldr	r3, [pc, #508]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003366:	0018      	movs	r0, r3
 8003368:	f7fd fe7b 	bl	8001062 <Clear_Data_Buffer>
 800336c:	e254      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800336e:	4b7d      	ldr	r3, [pc, #500]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fe76 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003376:	4a7c      	ldr	r2, [pc, #496]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003378:	4b7c      	ldr	r3, [pc, #496]	@ (800356c <UART2_RX_transfer_complete_callback+0xde4>)
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f7fd fef0 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003382:	4b77      	ldr	r3, [pc, #476]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003384:	0018      	movs	r0, r3
 8003386:	f7fd fd2d 	bl	8000de4 <Is_PC_Status_Byte>
 800338a:	0003      	movs	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d12d      	bne.n	80033ec <UART2_RX_transfer_complete_callback+0xc64>

						running_status_byte = (uint8_t)*rx_buffer;
 8003390:	4b73      	ldr	r3, [pc, #460]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b7b      	ldr	r3, [pc, #492]	@ (8003584 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003398:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800339a:	4b75      	ldr	r3, [pc, #468]	@ (8003570 <UART2_RX_transfer_complete_callback+0xde8>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033a2:	0011      	movs	r1, r2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fd fe0b 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033aa:	0003      	movs	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10a      	bne.n	80033c6 <UART2_RX_transfer_complete_callback+0xc3e>

							active_status_byte = (uint8_t)*rx_buffer;
 80033b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 80033b8:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 80033bc:	2140      	movs	r1, #64	@ 0x40
 80033be:	0018      	movs	r0, r3
 80033c0:	f002 fa36 	bl	8005830 <Set_Status_Bit>
 80033c4:	e228      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80033c6:	4b68      	ldr	r3, [pc, #416]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fd feb0 	bl	800112e <Is_OMNI_On>
 80033ce:	0003      	movs	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d000      	beq.n	80033d6 <UART2_RX_transfer_complete_callback+0xc4e>
 80033d4:	e220      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 80033d6:	4b62      	ldr	r3, [pc, #392]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 80033de:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033e0:	4b61      	ldr	r3, [pc, #388]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 80033e2:	2140      	movs	r1, #64	@ 0x40
 80033e4:	0018      	movs	r0, r3
 80033e6:	f002 fa23 	bl	8005830 <Set_Status_Bit>
 80033ea:	e215      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80033ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fd fd14 	bl	8000e1c <Is_CC_Status_Byte>
 80033f4:	0003      	movs	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d12d      	bne.n	8003456 <UART2_RX_transfer_complete_callback+0xcce>

						running_status_byte = (uint8_t)*rx_buffer;
 80033fa:	4b59      	ldr	r3, [pc, #356]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b60      	ldr	r3, [pc, #384]	@ (8003584 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003402:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003404:	4b5a      	ldr	r3, [pc, #360]	@ (8003570 <UART2_RX_transfer_complete_callback+0xde8>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b55      	ldr	r3, [pc, #340]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 800340c:	0011      	movs	r1, r2
 800340e:	0018      	movs	r0, r3
 8003410:	f7fd fdd6 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003414:	0003      	movs	r3, r0
 8003416:	2b01      	cmp	r3, #1
 8003418:	d10a      	bne.n	8003430 <UART2_RX_transfer_complete_callback+0xca8>

							active_status_byte = (uint8_t)*rx_buffer;
 800341a:	4b51      	ldr	r3, [pc, #324]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b54      	ldr	r3, [pc, #336]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 8003422:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003424:	4b50      	ldr	r3, [pc, #320]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003426:	2140      	movs	r1, #64	@ 0x40
 8003428:	0018      	movs	r0, r3
 800342a:	f002 fa01 	bl	8005830 <Set_Status_Bit>
 800342e:	e1f3      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003430:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003432:	0018      	movs	r0, r3
 8003434:	f7fd fe7b 	bl	800112e <Is_OMNI_On>
 8003438:	0003      	movs	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d000      	beq.n	8003440 <UART2_RX_transfer_complete_callback+0xcb8>
 800343e:	e1eb      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 8003440:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b4b      	ldr	r3, [pc, #300]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 8003448:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 800344c:	2140      	movs	r1, #64	@ 0x40
 800344e:	0018      	movs	r0, r3
 8003450:	f002 f9ee 	bl	8005830 <Set_Status_Bit>
 8003454:	e1e0      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003456:	4b42      	ldr	r3, [pc, #264]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003458:	0018      	movs	r0, r3
 800345a:	f7fd fda1 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 800345e:	0003      	movs	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d000      	beq.n	8003466 <UART2_RX_transfer_complete_callback+0xcde>
 8003464:	e1d8      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						active_status_byte = (uint8_t)*rx_buffer;
 8003466:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b41      	ldr	r3, [pc, #260]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 800346e:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003470:	4b44      	ldr	r3, [pc, #272]	@ (8003584 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003476:	4b3c      	ldr	r3, [pc, #240]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003478:	2140      	movs	r1, #64	@ 0x40
 800347a:	0018      	movs	r0, r3
 800347c:	f002 f9d8 	bl	8005830 <Set_Status_Bit>
 8003480:	e1ca      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					}
				}
			}
		}
		else if(active_status_byte != 0){
 8003482:	4b3c      	ldr	r3, [pc, #240]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d100      	bne.n	800348e <UART2_RX_transfer_complete_callback+0xd06>
 800348c:	e1c4      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	4b35      	ldr	r3, [pc, #212]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003494:	0011      	movs	r1, r2
 8003496:	0018      	movs	r0, r3
 8003498:	f002 f9b6 	bl	8005808 <Get_Status_Bit>
 800349c:	0003      	movs	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10e      	bne.n	80034c0 <UART2_RX_transfer_complete_callback+0xd38>

				active_status_byte = 0;
 80034a2:	4b34      	ldr	r3, [pc, #208]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80034a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd fdd9 	bl	8001062 <Clear_Data_Buffer>
				//running status is kept

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f002 f9cb 	bl	8005854 <Clear_Status_Bit>
 80034be:	e1ab      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fd fc75 	bl	8000db2 <Is_Data_Byte>
 80034c8:	0003      	movs	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d000      	beq.n	80034d0 <UART2_RX_transfer_complete_callback+0xd48>
 80034ce:	e119      	b.n	8003704 <UART2_RX_transfer_complete_callback+0xf7c>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7fd fc86 	bl	8000de4 <Is_PC_Status_Byte>
 80034d8:	0003      	movs	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d128      	bne.n	8003530 <UART2_RX_transfer_complete_callback+0xda8>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80034de:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fd8e 	bl	8001002 <Is_Data_Buffer_Empty>
 80034e6:	0003      	movs	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d000      	beq.n	80034ee <UART2_RX_transfer_complete_callback+0xd66>
 80034ec:	e194      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80034ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 80034f0:	2104      	movs	r1, #4
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7fd fdd3 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 80034f8:	0003      	movs	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10a      	bne.n	8003514 <UART2_RX_transfer_complete_callback+0xd8c>

								Set_All_Pots_to_PC_Mode();
 80034fe:	f7fd fc07 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003502:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <UART2_RX_transfer_complete_callback+0xe00>)
 800350e:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003510:	f7fd f806 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003516:	0018      	movs	r0, r3
 8003518:	f7fd fda3 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003522:	4a11      	ldr	r2, [pc, #68]	@ (8003568 <UART2_RX_transfer_complete_callback+0xde0>)
 8003524:	4b11      	ldr	r3, [pc, #68]	@ (800356c <UART2_RX_transfer_complete_callback+0xde4>)
 8003526:	0011      	movs	r1, r2
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe1a 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 800352e:	e173      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003530:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdec>)
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fc72 	bl	8000e1c <Is_CC_Status_Byte>
 8003538:	0003      	movs	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d000      	beq.n	8003540 <UART2_RX_transfer_complete_callback+0xdb8>
 800353e:	e0d4      	b.n	80036ea <UART2_RX_transfer_complete_callback+0xf62>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003540:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003542:	0018      	movs	r0, r3
 8003544:	f7fd fd5d 	bl	8001002 <Is_Data_Buffer_Empty>
 8003548:	0003      	movs	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11e      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xe04>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800354e:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <UART2_RX_transfer_complete_callback+0xddc>)
 8003556:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <UART2_RX_transfer_complete_callback+0xde4>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e15b      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
 8003560:	200004cc 	.word	0x200004cc
 8003564:	200004c0 	.word	0x200004c0
 8003568:	20000c20 	.word	0x20000c20
 800356c:	20000c28 	.word	0x20000c28
 8003570:	200004bd 	.word	0x200004bd
 8003574:	200004be 	.word	0x200004be
 8003578:	200004c1 	.word	0x200004c1
 800357c:	20000020 	.word	0x20000020
 8003580:	20000c38 	.word	0x20000c38
 8003584:	200004bf 	.word	0x200004bf
 8003588:	200004b0 	.word	0x200004b0

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 800358c:	4ba9      	ldr	r3, [pc, #676]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4ba9      	ldr	r3, [pc, #676]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003594:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003596:	4aa9      	ldr	r2, [pc, #676]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003598:	4ba9      	ldr	r3, [pc, #676]	@ (8003840 <UART2_RX_transfer_complete_callback+0x10b8>)
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f7fd fde0 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80035a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fc55 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80035aa:	0003      	movs	r3, r0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d142      	bne.n	8003636 <UART2_RX_transfer_complete_callback+0xeae>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80035b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003844 <UART2_RX_transfer_complete_callback+0x10bc>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4ba4      	ldr	r3, [pc, #656]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd fd00 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035c0:	0003      	movs	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d12f      	bne.n	8003626 <UART2_RX_transfer_complete_callback+0xe9e>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80035c6:	4aa1      	ldr	r2, [pc, #644]	@ (800384c <UART2_RX_transfer_complete_callback+0x10c4>)
 80035c8:	4b9b      	ldr	r3, [pc, #620]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035ca:	0011      	movs	r1, r2
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fd fca0 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80035d2:	0003      	movs	r3, r0
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d126      	bne.n	8003626 <UART2_RX_transfer_complete_callback+0xe9e>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80035d8:	4b97      	ldr	r3, [pc, #604]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b79      	cmp	r3, #121	@ 0x79
 80035e0:	d106      	bne.n	80035f0 <UART2_RX_transfer_complete_callback+0xe68>

											Reset_All_Controllers(&params, &delay_line);
 80035e2:	4a9b      	ldr	r2, [pc, #620]	@ (8003850 <UART2_RX_transfer_complete_callback+0x10c8>)
 80035e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003854 <UART2_RX_transfer_complete_callback+0x10cc>)
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fd fdd5 	bl	8001198 <Reset_All_Controllers>
 80035ee:	e01a      	b.n	8003626 <UART2_RX_transfer_complete_callback+0xe9e>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80035f0:	4b91      	ldr	r3, [pc, #580]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b7a      	cmp	r3, #122	@ 0x7a
 80035f8:	d102      	bne.n	8003600 <UART2_RX_transfer_complete_callback+0xe78>

											Set_Local_Control();
 80035fa:	f7fd fe27 	bl	800124c <Set_Local_Control>
 80035fe:	e012      	b.n	8003626 <UART2_RX_transfer_complete_callback+0xe9e>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003600:	4b8d      	ldr	r3, [pc, #564]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b7c      	cmp	r3, #124	@ 0x7c
 8003608:	d104      	bne.n	8003614 <UART2_RX_transfer_complete_callback+0xe8c>

											Set_OMNI_Off(&statuses);
 800360a:	4b8c      	ldr	r3, [pc, #560]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 800360c:	0018      	movs	r0, r3
 800360e:	f7fd fe55 	bl	80012bc <Set_OMNI_Off>
 8003612:	e008      	b.n	8003626 <UART2_RX_transfer_complete_callback+0xe9e>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003614:	4b88      	ldr	r3, [pc, #544]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b7d      	cmp	r3, #125	@ 0x7d
 800361c:	d103      	bne.n	8003626 <UART2_RX_transfer_complete_callback+0xe9e>

											Set_OMNI_On(&statuses);
 800361e:	4b87      	ldr	r3, [pc, #540]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003620:	0018      	movs	r0, r3
 8003622:	f7fd fe5b 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003626:	4b88      	ldr	r3, [pc, #544]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800362c:	4b82      	ldr	r3, [pc, #520]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd fd17 	bl	8001062 <Clear_Data_Buffer>
 8003634:	e0f0      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003636:	4b80      	ldr	r3, [pc, #512]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003638:	0018      	movs	r0, r3
 800363a:	f7fd fc37 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 800363e:	0003      	movs	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d14a      	bne.n	80036da <UART2_RX_transfer_complete_callback+0xf52>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003644:	4b7f      	ldr	r3, [pc, #508]	@ (8003844 <UART2_RX_transfer_complete_callback+0x10bc>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b7f      	ldr	r3, [pc, #508]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 800364c:	0011      	movs	r1, r2
 800364e:	0018      	movs	r0, r3
 8003650:	f7fd fcb6 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003654:	0003      	movs	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d006      	beq.n	8003668 <UART2_RX_transfer_complete_callback+0xee0>
										|| (Is_OMNI_On(&statuses) == YES)){
 800365a:	4b78      	ldr	r3, [pc, #480]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 800365c:	0018      	movs	r0, r3
 800365e:	f7fd fd66 	bl	800112e <Is_OMNI_On>
 8003662:	0003      	movs	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d130      	bne.n	80036ca <UART2_RX_transfer_complete_callback+0xf42>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003668:	4b73      	ldr	r3, [pc, #460]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b14      	cmp	r3, #20
 8003670:	d104      	bne.n	800367c <UART2_RX_transfer_complete_callback+0xef4>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003672:	4b76      	ldr	r3, [pc, #472]	@ (800384c <UART2_RX_transfer_complete_callback+0x10c4>)
 8003674:	0018      	movs	r0, r3
 8003676:	f7fd fac9 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 800367a:	e026      	b.n	80036ca <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 800367c:	4b6e      	ldr	r3, [pc, #440]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b15      	cmp	r3, #21
 8003684:	d104      	bne.n	8003690 <UART2_RX_transfer_complete_callback+0xf08>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003686:	4b71      	ldr	r3, [pc, #452]	@ (800384c <UART2_RX_transfer_complete_callback+0x10c4>)
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd fad9 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
 800368e:	e01c      	b.n	80036ca <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003690:	4b69      	ldr	r3, [pc, #420]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b16      	cmp	r3, #22
 8003698:	d104      	bne.n	80036a4 <UART2_RX_transfer_complete_callback+0xf1c>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800369a:	4b6c      	ldr	r3, [pc, #432]	@ (800384c <UART2_RX_transfer_complete_callback+0x10c4>)
 800369c:	0018      	movs	r0, r3
 800369e:	f7fd fae9 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 80036a2:	e012      	b.n	80036ca <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80036a4:	4b64      	ldr	r3, [pc, #400]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b17      	cmp	r3, #23
 80036ac:	d104      	bne.n	80036b8 <UART2_RX_transfer_complete_callback+0xf30>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036ae:	4b67      	ldr	r3, [pc, #412]	@ (800384c <UART2_RX_transfer_complete_callback+0x10c4>)
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fd faf9 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 80036b6:	e008      	b.n	80036ca <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80036b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b18      	cmp	r3, #24
 80036c0:	d103      	bne.n	80036ca <UART2_RX_transfer_complete_callback+0xf42>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036c2:	4b62      	ldr	r3, [pc, #392]	@ (800384c <UART2_RX_transfer_complete_callback+0x10c4>)
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7fd fb09 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80036ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80036d0:	4b59      	ldr	r3, [pc, #356]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7fd fcc5 	bl	8001062 <Clear_Data_Buffer>
 80036d8:	e09e      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80036e0:	4b55      	ldr	r3, [pc, #340]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036e2:	0018      	movs	r0, r3
 80036e4:	f7fd fcbd 	bl	8001062 <Clear_Data_Buffer>
 80036e8:	e096      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 80036ea:	4b57      	ldr	r3, [pc, #348]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fd fc57 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80036f2:	0003      	movs	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d000      	beq.n	80036fa <UART2_RX_transfer_complete_callback+0xf72>
 80036f8:	e08e      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd fc80 	bl	8001002 <Is_Data_Buffer_Empty>
 8003702:	e089      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003704:	4b4c      	ldr	r3, [pc, #304]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003706:	0018      	movs	r0, r3
 8003708:	f7fd fcab 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800370c:	4a4b      	ldr	r2, [pc, #300]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 800370e:	4b4c      	ldr	r3, [pc, #304]	@ (8003840 <UART2_RX_transfer_complete_callback+0x10b8>)
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f7fd fd25 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003718:	4b46      	ldr	r3, [pc, #280]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 800371a:	0018      	movs	r0, r3
 800371c:	f7fd fb62 	bl	8000de4 <Is_PC_Status_Byte>
 8003720:	0003      	movs	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d12c      	bne.n	8003780 <UART2_RX_transfer_complete_callback+0xff8>

						running_status_byte = (uint8_t)*rx_buffer;
 8003726:	4b43      	ldr	r3, [pc, #268]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4b4a      	ldr	r3, [pc, #296]	@ (8003858 <UART2_RX_transfer_complete_callback+0x10d0>)
 800372e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003730:	4b44      	ldr	r3, [pc, #272]	@ (8003844 <UART2_RX_transfer_complete_callback+0x10bc>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b3f      	ldr	r3, [pc, #252]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f7fd fc40 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003740:	0003      	movs	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10a      	bne.n	800375c <UART2_RX_transfer_complete_callback+0xfd4>

							active_status_byte = (uint8_t)*rx_buffer;
 8003746:	4b3b      	ldr	r3, [pc, #236]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	4b3e      	ldr	r3, [pc, #248]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 800374e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003750:	4b3a      	ldr	r3, [pc, #232]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003752:	2140      	movs	r1, #64	@ 0x40
 8003754:	0018      	movs	r0, r3
 8003756:	f002 f86b 	bl	8005830 <Set_Status_Bit>
 800375a:	e05d      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800375c:	4b37      	ldr	r3, [pc, #220]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd fce5 	bl	800112e <Is_OMNI_On>
 8003764:	0003      	movs	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d156      	bne.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 800376a:	4b32      	ldr	r3, [pc, #200]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	4b35      	ldr	r3, [pc, #212]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 8003772:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003774:	4b31      	ldr	r3, [pc, #196]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003776:	2140      	movs	r1, #64	@ 0x40
 8003778:	0018      	movs	r0, r3
 800377a:	f002 f859 	bl	8005830 <Set_Status_Bit>
 800377e:	e04b      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd fb4a 	bl	8000e1c <Is_CC_Status_Byte>
 8003788:	0003      	movs	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d12c      	bne.n	80037e8 <UART2_RX_transfer_complete_callback+0x1060>

						running_status_byte = (uint8_t)*rx_buffer;
 800378e:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	4b30      	ldr	r3, [pc, #192]	@ (8003858 <UART2_RX_transfer_complete_callback+0x10d0>)
 8003796:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003798:	4b2a      	ldr	r3, [pc, #168]	@ (8003844 <UART2_RX_transfer_complete_callback+0x10bc>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b25      	ldr	r3, [pc, #148]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fd fc0c 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037a8:	0003      	movs	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10a      	bne.n	80037c4 <UART2_RX_transfer_complete_callback+0x103c>

							active_status_byte = (uint8_t)*rx_buffer;
 80037ae:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80037b6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80037b8:	4b20      	ldr	r3, [pc, #128]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037ba:	2140      	movs	r1, #64	@ 0x40
 80037bc:	0018      	movs	r0, r3
 80037be:	f002 f837 	bl	8005830 <Set_Status_Bit>
 80037c2:	e029      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80037c4:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7fd fcb1 	bl	800112e <Is_OMNI_On>
 80037cc:	0003      	movs	r3, r0
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d122      	bne.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 80037d2:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80037da:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80037dc:	4b17      	ldr	r3, [pc, #92]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037de:	2140      	movs	r1, #64	@ 0x40
 80037e0:	0018      	movs	r0, r3
 80037e2:	f002 f825 	bl	8005830 <Set_Status_Bit>
 80037e6:	e017      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fd fbd8 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80037f0:	0003      	movs	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d110      	bne.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>

						active_status_byte = (uint8_t)*rx_buffer;
 80037f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10c0>)
 80037fe:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <UART2_RX_transfer_complete_callback+0x10d0>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003806:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003808:	2140      	movs	r1, #64	@ 0x40
 800380a:	0018      	movs	r0, r3
 800380c:	f002 f810 	bl	8005830 <Set_Status_Bit>
 8003810:	e002      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	e000      	b.n	8003818 <UART2_RX_transfer_complete_callback+0x1090>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003816:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003818:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800381e:	4905      	ldr	r1, [pc, #20]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003820:	4b0e      	ldr	r3, [pc, #56]	@ (800385c <UART2_RX_transfer_complete_callback+0x10d4>)
 8003822:	2201      	movs	r2, #1
 8003824:	0018      	movs	r0, r3
 8003826:	f007 ff05 	bl	800b634 <HAL_UART_Receive_DMA>
}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	200004cc 	.word	0x200004cc
 8003838:	200004c0 	.word	0x200004c0
 800383c:	20000c20 	.word	0x20000c20
 8003840:	20000c28 	.word	0x20000c28
 8003844:	200004bd 	.word	0x200004bd
 8003848:	200004be 	.word	0x200004be
 800384c:	200004c1 	.word	0x200004c1
 8003850:	20000020 	.word	0x20000020
 8003854:	20000c38 	.word	0x20000c38
 8003858:	200004bf 	.word	0x200004bf
 800385c:	20000a34 	.word	0x20000a34

08003860 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	2b80      	cmp	r3, #128	@ 0x80
 8003872:	d117      	bne.n	80038a4 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003874:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b06      	cmp	r3, #6
 800387c:	d004      	beq.n	8003888 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 800387e:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b07      	cmp	r3, #7
 8003886:	d10d      	bne.n	80038a4 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	23a0      	movs	r3, #160	@ 0xa0
 800388e:	05db      	lsls	r3, r3, #23
 8003890:	2201      	movs	r2, #1
 8003892:	0018      	movs	r0, r3
 8003894:	f004 f87b 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800389a:	2200      	movs	r2, #0
 800389c:	2140      	movs	r1, #64	@ 0x40
 800389e:	0018      	movs	r0, r3
 80038a0:	f004 f875 	bl	800798e <HAL_GPIO_WritePin>
		}
	}
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000428 	.word	0x20000428
 80038b0:	50000800 	.word	0x50000800

080038b4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	0002      	movs	r2, r0
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b80      	cmp	r3, #128	@ 0x80
 80038c6:	d000      	beq.n	80038ca <HAL_GPIO_EXTI_Rising_Callback+0x16>
 80038c8:	e0dd      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 80038ca:	4b71      	ldr	r3, [pc, #452]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d114      	bne.n	80038fe <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80038d4:	2380      	movs	r3, #128	@ 0x80
 80038d6:	0099      	lsls	r1, r3, #2
 80038d8:	23a0      	movs	r3, #160	@ 0xa0
 80038da:	05db      	lsls	r3, r3, #23
 80038dc:	2200      	movs	r2, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	f004 f855 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80038e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	2140      	movs	r1, #64	@ 0x40
 80038ea:	0018      	movs	r0, r3
 80038ec:	f004 f84f 	bl	800798e <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80038f0:	4b67      	ldr	r3, [pc, #412]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80038f6:	4b66      	ldr	r3, [pc, #408]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80038fc:	e0c3      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 80038fe:	4b64      	ldr	r3, [pc, #400]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b03      	cmp	r3, #3
 8003906:	d114      	bne.n	8003932 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003908:	2380      	movs	r3, #128	@ 0x80
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	23a0      	movs	r3, #160	@ 0xa0
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	2200      	movs	r2, #0
 8003912:	0018      	movs	r0, r3
 8003914:	f004 f83b 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003918:	4b5e      	ldr	r3, [pc, #376]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800391a:	2201      	movs	r2, #1
 800391c:	2140      	movs	r1, #64	@ 0x40
 800391e:	0018      	movs	r0, r3
 8003920:	f004 f835 	bl	800798e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003924:	4b5a      	ldr	r3, [pc, #360]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003926:	2203      	movs	r2, #3
 8003928:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800392a:	4b59      	ldr	r3, [pc, #356]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800392c:	2207      	movs	r2, #7
 800392e:	701a      	strb	r2, [r3, #0]
}
 8003930:	e0a9      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003932:	4b57      	ldr	r3, [pc, #348]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d114      	bne.n	8003966 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	23a0      	movs	r3, #160	@ 0xa0
 8003942:	05db      	lsls	r3, r3, #23
 8003944:	2200      	movs	r2, #0
 8003946:	0018      	movs	r0, r3
 8003948:	f004 f821 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800394c:	4b51      	ldr	r3, [pc, #324]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800394e:	2201      	movs	r2, #1
 8003950:	2140      	movs	r1, #64	@ 0x40
 8003952:	0018      	movs	r0, r3
 8003954:	f004 f81b 	bl	800798e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003958:	4b4d      	ldr	r3, [pc, #308]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800395a:	2202      	movs	r2, #2
 800395c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800395e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003960:	2207      	movs	r2, #7
 8003962:	701a      	strb	r2, [r3, #0]
}
 8003964:	e08f      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003966:	4b4a      	ldr	r3, [pc, #296]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b04      	cmp	r3, #4
 800396e:	d12b      	bne.n	80039c8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d126      	bne.n	80039c8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 800397a:	4b48      	ldr	r3, [pc, #288]	@ (8003a9c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800397c:	2120      	movs	r1, #32
 800397e:	0018      	movs	r0, r3
 8003980:	f001 ff42 	bl	8005808 <Get_Status_Bit>
 8003984:	0003      	movs	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d11e      	bne.n	80039c8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	0099      	lsls	r1, r3, #2
 800398e:	23a0      	movs	r3, #160	@ 0xa0
 8003990:	05db      	lsls	r3, r3, #23
 8003992:	2200      	movs	r2, #0
 8003994:	0018      	movs	r0, r3
 8003996:	f003 fffa 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800399a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800399c:	2201      	movs	r2, #1
 800399e:	2140      	movs	r1, #64	@ 0x40
 80039a0:	0018      	movs	r0, r3
 80039a2:	f003 fff4 	bl	800798e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 80039a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80039ac:	4b38      	ldr	r3, [pc, #224]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039ae:	2207      	movs	r2, #7
 80039b0:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80039b2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a9c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039b4:	2120      	movs	r1, #32
 80039b6:	0018      	movs	r0, r3
 80039b8:	f001 ff4c 	bl	8005854 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80039bc:	4b37      	ldr	r3, [pc, #220]	@ (8003a9c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039be:	2140      	movs	r1, #64	@ 0x40
 80039c0:	0018      	movs	r0, r3
 80039c2:	f001 ff47 	bl	8005854 <Clear_Status_Bit>
 80039c6:	e05e      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80039c8:	4b31      	ldr	r3, [pc, #196]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d12b      	bne.n	8003a2a <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d126      	bne.n	8003a2a <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80039dc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a9c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039de:	2120      	movs	r1, #32
 80039e0:	0018      	movs	r0, r3
 80039e2:	f001 ff11 	bl	8005808 <Get_Status_Bit>
 80039e6:	0003      	movs	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d11e      	bne.n	8003a2a <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80039ec:	2380      	movs	r3, #128	@ 0x80
 80039ee:	0099      	lsls	r1, r3, #2
 80039f0:	23a0      	movs	r3, #160	@ 0xa0
 80039f2:	05db      	lsls	r3, r3, #23
 80039f4:	2200      	movs	r2, #0
 80039f6:	0018      	movs	r0, r3
 80039f8:	f003 ffc9 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80039fc:	4b25      	ldr	r3, [pc, #148]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	2140      	movs	r1, #64	@ 0x40
 8003a02:	0018      	movs	r0, r3
 8003a04:	f003 ffc3 	bl	800798e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003a08:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003a14:	4b21      	ldr	r3, [pc, #132]	@ (8003a9c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a16:	2120      	movs	r1, #32
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f001 ff1b 	bl	8005854 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a9c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a20:	2140      	movs	r1, #64	@ 0x40
 8003a22:	0018      	movs	r0, r3
 8003a24:	f001 ff16 	bl	8005854 <Clear_Status_Bit>
 8003a28:	e02d      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003a2a:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b07      	cmp	r3, #7
 8003a32:	d114      	bne.n	8003a5e <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a34:	2380      	movs	r3, #128	@ 0x80
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	23a0      	movs	r3, #160	@ 0xa0
 8003a3a:	05db      	lsls	r3, r3, #23
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f003 ffa5 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	2140      	movs	r1, #64	@ 0x40
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f003 ff9f 	bl	800798e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a52:	2207      	movs	r2, #7
 8003a54:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a58:	2206      	movs	r2, #6
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	e013      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d10e      	bne.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	0099      	lsls	r1, r3, #2
 8003a6c:	23a0      	movs	r3, #160	@ 0xa0
 8003a6e:	05db      	lsls	r3, r3, #23
 8003a70:	2200      	movs	r2, #0
 8003a72:	0018      	movs	r0, r3
 8003a74:	f003 ff8b 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2140      	movs	r1, #64	@ 0x40
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f003 ff85 	bl	800798e <HAL_GPIO_WritePin>
}
 8003a84:	e7ff      	b.n	8003a86 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			@ (mov r8, r8)
 8003a90:	20000428 	.word	0x20000428
 8003a94:	50000800 	.word	0x50000800
 8003a98:	2000043c 	.word	0x2000043c
 8003a9c:	20000c20 	.word	0x20000c20

08003aa0 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003aa8:	250f      	movs	r5, #15
 8003aaa:	197c      	adds	r4, r7, r5
 8003aac:	2380      	movs	r3, #128	@ 0x80
 8003aae:	00da      	lsls	r2, r3, #3
 8003ab0:	23a0      	movs	r3, #160	@ 0xa0
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	0011      	movs	r1, r2
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f003 ff4c 	bl	8007954 <HAL_GPIO_ReadPin>
 8003abc:	0003      	movs	r3, r0
 8003abe:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003ac0:	4b67      	ldr	r3, [pc, #412]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d10a      	bne.n	8003ae0 <LPTIM1_callback+0x40>
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ad2:	4b63      	ldr	r3, [pc, #396]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003ad8:	4b61      	ldr	r3, [pc, #388]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	705a      	strb	r2, [r3, #1]
 8003ade:	e070      	b.n	8003bc2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d10b      	bne.n	8003b02 <LPTIM1_callback+0x62>
 8003aea:	230f      	movs	r3, #15
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003af4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003af6:	2205      	movs	r2, #5
 8003af8:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003afa:	4b59      	ldr	r3, [pc, #356]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003afc:	2202      	movs	r2, #2
 8003afe:	705a      	strb	r2, [r3, #1]
 8003b00:	e05f      	b.n	8003bc2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003b02:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d10b      	bne.n	8003b24 <LPTIM1_callback+0x84>
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b16:	4b52      	ldr	r3, [pc, #328]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b18:	2205      	movs	r2, #5
 8003b1a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003b1c:	4b50      	ldr	r3, [pc, #320]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b1e:	2203      	movs	r2, #3
 8003b20:	705a      	strb	r2, [r3, #1]
 8003b22:	e04e      	b.n	8003bc2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b24:	4b4e      	ldr	r3, [pc, #312]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d122      	bne.n	8003b74 <LPTIM1_callback+0xd4>
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11d      	bne.n	8003b74 <LPTIM1_callback+0xd4>
 8003b38:	4b4a      	ldr	r3, [pc, #296]	@ (8003c64 <LPTIM1_callback+0x1c4>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d118      	bne.n	8003b74 <LPTIM1_callback+0xd4>
 8003b42:	4b49      	ldr	r3, [pc, #292]	@ (8003c68 <LPTIM1_callback+0x1c8>)
 8003b44:	2120      	movs	r1, #32
 8003b46:	0018      	movs	r0, r3
 8003b48:	f001 fe5e 	bl	8005808 <Get_Status_Bit>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d110      	bne.n	8003b74 <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b52:	4b43      	ldr	r3, [pc, #268]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b54:	2205      	movs	r2, #5
 8003b56:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003b58:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b5a:	2206      	movs	r2, #6
 8003b5c:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b5e:	4b42      	ldr	r3, [pc, #264]	@ (8003c68 <LPTIM1_callback+0x1c8>)
 8003b60:	2120      	movs	r1, #32
 8003b62:	0018      	movs	r0, r3
 8003b64:	f001 fe76 	bl	8005854 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b68:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <LPTIM1_callback+0x1c8>)
 8003b6a:	2140      	movs	r1, #64	@ 0x40
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f001 fe71 	bl	8005854 <Clear_Status_Bit>
 8003b72:	e026      	b.n	8003bc2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b74:	4b3a      	ldr	r3, [pc, #232]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d121      	bne.n	8003bc2 <LPTIM1_callback+0x122>
 8003b7e:	230f      	movs	r3, #15
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11c      	bne.n	8003bc2 <LPTIM1_callback+0x122>
 8003b88:	4b36      	ldr	r3, [pc, #216]	@ (8003c64 <LPTIM1_callback+0x1c4>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d117      	bne.n	8003bc2 <LPTIM1_callback+0x122>
 8003b92:	4b35      	ldr	r3, [pc, #212]	@ (8003c68 <LPTIM1_callback+0x1c8>)
 8003b94:	2120      	movs	r1, #32
 8003b96:	0018      	movs	r0, r3
 8003b98:	f001 fe36 	bl	8005808 <Get_Status_Bit>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d10f      	bne.n	8003bc2 <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003baa:	2208      	movs	r2, #8
 8003bac:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003bae:	4b2e      	ldr	r3, [pc, #184]	@ (8003c68 <LPTIM1_callback+0x1c8>)
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f001 fe4e 	bl	8005854 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <LPTIM1_callback+0x1c8>)
 8003bba:	2140      	movs	r1, #64	@ 0x40
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f001 fe49 	bl	8005854 <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003bc2:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d004      	beq.n	8003bd6 <LPTIM1_callback+0x136>
 8003bcc:	4b24      	ldr	r3, [pc, #144]	@ (8003c60 <LPTIM1_callback+0x1c0>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d12a      	bne.n	8003c2c <LPTIM1_callback+0x18c>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003bd6:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <LPTIM1_callback+0x1cc>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7fd fcd3 	bl	8001584 <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003bde:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <LPTIM1_callback+0x1cc>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10e      	bne.n	8003c06 <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003be8:	2380      	movs	r3, #128	@ 0x80
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	23a0      	movs	r3, #160	@ 0xa0
 8003bee:	05db      	lsls	r3, r3, #23
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f003 fecb 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <LPTIM1_callback+0x1d0>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2140      	movs	r1, #64	@ 0x40
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f003 fec5 	bl	800798e <HAL_GPIO_WritePin>
 8003c04:	e012      	b.n	8003c2c <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003c06:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <LPTIM1_callback+0x1cc>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003c10:	2380      	movs	r3, #128	@ 0x80
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	23a0      	movs	r3, #160	@ 0xa0
 8003c16:	05db      	lsls	r3, r3, #23
 8003c18:	2201      	movs	r2, #1
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f003 feb7 	bl	800798e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003c20:	4b13      	ldr	r3, [pc, #76]	@ (8003c70 <LPTIM1_callback+0x1d0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	2140      	movs	r1, #64	@ 0x40
 8003c26:	0018      	movs	r0, r3
 8003c28:	f003 feb1 	bl	800798e <HAL_GPIO_WritePin>
	}*/
	/*
	if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
		Pot_Check(&params_manual, WAVESHAPE_POT);
	}*/
	if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003c2c:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <LPTIM1_callback+0x1d4>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d004      	beq.n	8003c40 <LPTIM1_callback+0x1a0>
 8003c36:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <LPTIM1_callback+0x1d4>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d104      	bne.n	8003c4a <LPTIM1_callback+0x1aa>
		Pot_Check(&params_manual, DEPTH_POT);
 8003c40:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <LPTIM1_callback+0x1d8>)
 8003c42:	2102      	movs	r1, #2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fd fb69 	bl	800131c <Pot_Check>
	if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
		Pot_Check(&params_manual, PHASE_POT);
	}*/

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <LPTIM1_callback+0x1dc>)
 8003c4c:	22fa      	movs	r2, #250	@ 0xfa
 8003c4e:	21fa      	movs	r1, #250	@ 0xfa
 8003c50:	0018      	movs	r0, r3
 8003c52:	f003 ff93 	bl	8007b7c <HAL_LPTIM_SetOnce_Start_IT>

}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	20000428 	.word	0x20000428
 8003c64:	2000043c 	.word	0x2000043c
 8003c68:	20000c20 	.word	0x20000c20
 8003c6c:	20000c14 	.word	0x20000c14
 8003c70:	50000800 	.word	0x50000800
 8003c74:	2000042c 	.word	0x2000042c
 8003c78:	20000c5c 	.word	0x20000c5c
 8003c7c:	20000bb8 	.word	0x20000bb8

08003c80 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]


}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]


}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, volatile struct Params *params_ptr){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003cae:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <Input_Capture_Processing+0xe0>)
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f001 fdce 	bl	8005854 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f001 fd4f 	bl	8005762 <isPrime>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d106      	bne.n	8003cd8 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003cd8:	1dbb      	adds	r3, r7, #6
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	019b      	lsls	r3, r3, #6
 8003ce0:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003ce2:	2317      	movs	r3, #23
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e02d      	b.n	8003d48 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8003cec:	2317      	movs	r3, #23
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2280      	movs	r2, #128	@ 0x80
 8003cf6:	0052      	lsls	r2, r2, #1
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	1dbb      	adds	r3, r7, #6
 8003cfe:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8003d00:	1dbb      	adds	r3, r7, #6
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7fc fa7f 	bl	8000210 <__aeabi_uidivmod>
 8003d12:	000b      	movs	r3, r1
 8003d14:	001a      	movs	r2, r3
 8003d16:	210e      	movs	r1, #14
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	6938      	ldr	r0, [r7, #16]
 8003d2e:	f7fc f9e9 	bl	8000104 <__udivsi3>
 8003d32:	0003      	movs	r3, r0
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	835a      	strh	r2, [r3, #26]
			break;
 8003d3a:	e00a      	b.n	8003d52 <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003d3c:	2117      	movs	r1, #23
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	3201      	adds	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	2317      	movs	r3, #23
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b80      	cmp	r3, #128	@ 0x80
 8003d50:	d9cc      	bls.n	8003cec <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8003d52:	1dbb      	adds	r3, r7, #6
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2280      	movs	r2, #128	@ 0x80
 8003d5a:	0052      	lsls	r2, r2, #1
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2101      	movs	r1, #1
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f9c1 	bl	80040f0 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f001 f8b3 	bl	8004edc <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000c20 	.word	0x20000c20

08003d84 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8003d8a:	1dfc      	adds	r4, r7, #7
 8003d8c:	4b09      	ldr	r3, [pc, #36]	@ (8003db4 <Start_Input_Capture_Timer+0x30>)
 8003d8e:	2100      	movs	r1, #0
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 f811 	bl	8003db8 <Start_IC_TIM>
 8003d96:	0003      	movs	r3, r0
 8003d98:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8003da2:	f7fe fa35 	bl	8002210 <Error_Handler>
	}

	return ok;
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	781b      	ldrb	r3, [r3, #0]
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b003      	add	sp, #12
 8003db0:	bd90      	pop	{r4, r7, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	20000800 	.word	0x20000800

08003db8 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003dc2:	250f      	movs	r5, #15
 8003dc4:	197c      	adds	r4, r7, r5
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <Start_IC_TIM+0x50>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f005 f971 	bl	80090b0 <HAL_TIM_Base_Start_IT>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <Start_IC_TIM+0x50>)
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f005 fdd7 	bl	800998c <HAL_TIM_IC_Start_IT>
 8003dde:	0003      	movs	r3, r0
 8003de0:	0019      	movs	r1, r3
 8003de2:	197b      	adds	r3, r7, r5
 8003de4:	197a      	adds	r2, r7, r5
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8003dec:	197b      	adds	r3, r7, r5
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <Start_IC_TIM+0x40>

		Error_Handler();
 8003df4:	f7fe fa0c 	bl	8002210 <Error_Handler>
	}

	return ok_AND;
 8003df8:	230f      	movs	r3, #15
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	781b      	ldrb	r3, [r3, #0]
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bdb0      	pop	{r4, r5, r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	20000800 	.word	0x20000800

08003e0c <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(volatile struct Params *src_ptr, volatile struct Params *dst_ptr){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	0010      	movs	r0, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	2324      	movs	r3, #36	@ 0x24
 8003e20:	001a      	movs	r2, r3
 8003e22:	f008 ff55 	bl	800ccd0 <memcpy>

	return 1;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e36:	2100      	movs	r1, #0
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f001 fc76 	bl	800572a <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8003e46:	4b08      	ldr	r3, [pc, #32]	@ (8003e68 <Start_Measurement_Reelapse_Timer+0x38>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003e52:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e54:	2100      	movs	r1, #0
 8003e56:	0018      	movs	r0, r3
 8003e58:	f001 fc4b 	bl	80056f2 <Start_OC_TIM>

	return 1;
 8003e5c:	2301      	movs	r3, #1
}
 8003e5e:	0018      	movs	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200008bc 	.word	0x200008bc
 8003e68:	20000c1c 	.word	0x20000c1c

08003e6c <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <Begin_Input_Capture_Measurement+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8003e78:	2301      	movs	r3, #1
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000800 	.word	0x20000800

08003e84 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8003e88:	f7fe f9c8 	bl	800221c <System_Init>

	//STARTUP
	Startup();
 8003e8c:	f000 fb26 	bl	80044dc <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8003e90:	4b35      	ldr	r3, [pc, #212]	@ (8003f68 <main+0xe4>)
 8003e92:	2104      	movs	r1, #4
 8003e94:	0018      	movs	r0, r3
 8003e96:	f001 fcb7 	bl	8005808 <Get_Status_Bit>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8003ea0:	4b32      	ldr	r3, [pc, #200]	@ (8003f6c <main+0xe8>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4a32      	ldr	r2, [pc, #200]	@ (8003f70 <main+0xec>)
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff fef8 	bl	8003ca0 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <main+0xe4>)
 8003eb2:	2140      	movs	r1, #64	@ 0x40
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f001 fca7 	bl	8005808 <Get_Status_Bit>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d12b      	bne.n	8003f18 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f74 <main+0xf0>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	23fa      	movs	r3, #250	@ 0xfa
 8003ec6:	01db      	lsls	r3, r3, #7
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d218      	bcs.n	8003efe <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f78 <main+0xf4>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ed6:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <main+0xe4>)
 8003ed8:	2140      	movs	r1, #64	@ 0x40
 8003eda:	0018      	movs	r0, r3
 8003edc:	f001 fcba 	bl	8005854 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ee0:	4b21      	ldr	r3, [pc, #132]	@ (8003f68 <main+0xe4>)
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f001 fcb5 	bl	8005854 <Clear_Status_Bit>
					idle_counter = 0;
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <main+0xf0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e012      	b.n	8003f18 <main+0x94>
				}
				else{

					idle_counter++;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <main+0xf0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <main+0xf0>)
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e00c      	b.n	8003f18 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003efe:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <main+0xe4>)
 8003f00:	2140      	movs	r1, #64	@ 0x40
 8003f02:	0018      	movs	r0, r3
 8003f04:	f001 fca6 	bl	8005854 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003f08:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <main+0xe4>)
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f001 fc8f 	bl	8005830 <Set_Status_Bit>
				idle_counter = 0;
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <main+0xf0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	005a      	lsls	r2, r3, #1
 8003f1c:	4b12      	ldr	r3, [pc, #72]	@ (8003f68 <main+0xe4>)
 8003f1e:	0011      	movs	r1, r2
 8003f20:	0018      	movs	r0, r3
 8003f22:	f001 fc71 	bl	8005808 <Get_Status_Bit>
 8003f26:	0003      	movs	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d1b1      	bne.n	8003e90 <main+0xc>

			if(midi_counter < MIDI_COUNT){
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <main+0xf8>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	23fa      	movs	r3, #250	@ 0xfa
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d205      	bcs.n	8003f44 <main+0xc0>

				midi_counter++;
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <main+0xf8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <main+0xf8>)
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e7a5      	b.n	8003e90 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	005a      	lsls	r2, r3, #1
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <main+0xe4>)
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f001 fc81 	bl	8005854 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	4b04      	ldr	r3, [pc, #16]	@ (8003f68 <main+0xe4>)
 8003f58:	0011      	movs	r1, r2
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f001 fc68 	bl	8005830 <Set_Status_Bit>
				midi_counter = 0;
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <main+0xf8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8003f66:	e793      	b.n	8003e90 <main+0xc>
 8003f68:	20000c20 	.word	0x20000c20
 8003f6c:	20000c1c 	.word	0x20000c1c
 8003f70:	20000c80 	.word	0x20000c80
 8003f74:	20000c24 	.word	0x20000c24
 8003f78:	2000043c 	.word	0x2000043c
 8003f7c:	20000c28 	.word	0x20000c28

08003f80 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8003f8c:	2417      	movs	r4, #23
 8003f8e:	193b      	adds	r3, r7, r4
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f005 f83e 	bl	8009018 <HAL_TIM_Base_Start>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	193b      	adds	r3, r7, r4
 8003fa2:	193a      	adds	r2, r7, r4
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	0011      	movs	r1, r2
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f005 fb9f 	bl	80096f4 <HAL_TIM_PWM_Start>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	0019      	movs	r1, r3
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	193a      	adds	r2, r7, r4
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f005 fb92 	bl	80096f4 <HAL_TIM_PWM_Start>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	193b      	adds	r3, r7, r4
 8003fd6:	193a      	adds	r2, r7, r4
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8003fe6:	f7fe f913 	bl	8002210 <Error_Handler>
	}

	return ok_OR;
 8003fea:	2317      	movs	r3, #23
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	781b      	ldrb	r3, [r3, #0]
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b007      	add	sp, #28
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8003ffe:	1dfc      	adds	r4, r7, #7
 8004000:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <Start_Freq_Gen_Timer+0x30>)
 8004002:	2100      	movs	r1, #0
 8004004:	0018      	movs	r0, r3
 8004006:	f001 fb74 	bl	80056f2 <Start_OC_TIM>
 800400a:	0003      	movs	r3, r0
 800400c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800400e:	1dfb      	adds	r3, r7, #7
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004016:	f7fe f8fb 	bl	8002210 <Error_Handler>
	}

	return ok;
 800401a:	1dfb      	adds	r3, r7, #7
 800401c:	781b      	ldrb	r3, [r3, #0]
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b003      	add	sp, #12
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	20000744 	.word	0x20000744

0800402c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(volatile struct Params* params_ptr){
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004038:	210b      	movs	r1, #11
 800403a:	187b      	adds	r3, r7, r1
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	891b      	ldrh	r3, [r3, #8]
 8004044:	b29b      	uxth	r3, r3
 8004046:	001a      	movs	r2, r3
 8004048:	0013      	movs	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	189b      	adds	r3, r3, r2
 800404e:	019b      	lsls	r3, r3, #6
 8004050:	189b      	adds	r3, r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	189b      	adds	r3, r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	09da      	lsrs	r2, r3, #7
 8004062:	187b      	adds	r3, r7, r1
 8004064:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	b29a      	uxth	r2, r3
 800406a:	187b      	adds	r3, r7, r1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	01db      	lsls	r3, r3, #7
 8004072:	b29b      	uxth	r3, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 800407c:	187b      	adds	r3, r7, r1
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2280      	movs	r2, #128	@ 0x80
 8004082:	00d2      	lsls	r2, r2, #3
 8004084:	411a      	asrs	r2, r3
 8004086:	0013      	movs	r3, r2
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	835a      	strh	r2, [r3, #26]

    return 1;
 800408e:	2301      	movs	r3, #1
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}

08004098 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(volatile struct Params* params_ptr){
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8b1b      	ldrh	r3, [r3, #24]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <Set_Oscillator_Values+0x50>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8b1b      	ldrh	r3, [r3, #24]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	001a      	movs	r2, r3
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <Set_Oscillator_Values+0x50>)
 80040b6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8bdb      	ldrh	r3, [r3, #30]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <Set_Oscillator_Values+0x50>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	885b      	ldrh	r3, [r3, #2]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <Set_Oscillator_Values+0x54>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	889b      	ldrh	r3, [r3, #4]
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <Set_Oscillator_Values+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80040dc:	2301      	movs	r3, #1
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b002      	add	sp, #8
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	20000744 	.word	0x20000744
 80040ec:	20000978 	.word	0x20000978

080040f0 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(volatile struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	000a      	movs	r2, r1
 80040fa:	1cfb      	adds	r3, r7, #3
 80040fc:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80040fe:	1cfb      	adds	r3, r7, #3
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d144      	bne.n	8004190 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	89db      	ldrh	r3, [r3, #14]
 800410a:	b29b      	uxth	r3, r3
 800410c:	3301      	adds	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	89db      	ldrh	r3, [r3, #14]
 8004118:	b29a      	uxth	r2, r3
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	429a      	cmp	r2, r3
 8004120:	d102      	bne.n	8004128 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	89db      	ldrh	r3, [r3, #14]
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	741a      	strb	r2, [r3, #16]
 800413e:	e05a      	b.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	89db      	ldrh	r3, [r3, #14]
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b80      	cmp	r3, #128	@ 0x80
 8004148:	d106      	bne.n	8004158 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	741a      	strb	r2, [r3, #16]
 8004156:	e04e      	b.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	89db      	ldrh	r3, [r3, #14]
 800415c:	b29a      	uxth	r2, r3
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	429a      	cmp	r2, r3
 8004164:	d106      	bne.n	8004174 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	741a      	strb	r2, [r3, #16]
 8004172:	e040      	b.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	89db      	ldrh	r3, [r3, #14]
 8004178:	b29a      	uxth	r2, r3
 800417a:	23c0      	movs	r3, #192	@ 0xc0
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	429a      	cmp	r2, r3
 8004180:	d139      	bne.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	741a      	strb	r2, [r3, #16]
 800418e:	e032      	b.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004190:	1cfb      	adds	r3, r7, #3
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d11f      	bne.n	80041d8 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	799b      	ldrb	r3, [r3, #6]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d004      	beq.n	80041ac <Calculate_Next_Main_Oscillator_Values+0xbc>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	799b      	ldrb	r3, [r3, #6]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	22a7      	movs	r2, #167	@ 0xa7
 80041b0:	0052      	lsls	r2, r2, #1
 80041b2:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	741a      	strb	r2, [r3, #16]
 80041c0:	e019      	b.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2280      	movs	r2, #128	@ 0x80
 80041c6:	0052      	lsls	r2, r2, #1
 80041c8:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	741a      	strb	r2, [r3, #16]
 80041d6:	e00e      	b.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80041d8:	1cfb      	adds	r3, r7, #3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d10a      	bne.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	89db      	ldrh	r3, [r3, #14]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	799b      	ldrb	r3, [r3, #6]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	89db      	ldrh	r3, [r3, #14]
 8004204:	b29b      	uxth	r3, r3
 8004206:	001a      	movs	r2, r3
 8004208:	4b31      	ldr	r3, [pc, #196]	@ (80042d0 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 800420a:	0052      	lsls	r2, r2, #1
 800420c:	5ad2      	ldrh	r2, [r2, r3]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e029      	b.n	8004268 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	799b      	ldrb	r3, [r3, #6]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d109      	bne.n	8004232 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	89db      	ldrh	r3, [r3, #14]
 8004222:	b29b      	uxth	r3, r3
 8004224:	001a      	movs	r2, r3
 8004226:	4b2b      	ldr	r3, [pc, #172]	@ (80042d4 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004228:	0052      	lsls	r2, r2, #1
 800422a:	5ad2      	ldrh	r2, [r2, r3]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	e01a      	b.n	8004268 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	799b      	ldrb	r3, [r3, #6]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d108      	bne.n	800424e <Calculate_Next_Main_Oscillator_Values+0x15e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	89db      	ldrh	r3, [r3, #14]
 8004240:	b29b      	uxth	r3, r3
 8004242:	2bff      	cmp	r3, #255	@ 0xff
 8004244:	d803      	bhi.n	800424e <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a23      	ldr	r2, [pc, #140]	@ (80042d8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e00c      	b.n	8004268 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	799b      	ldrb	r3, [r3, #6]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d107      	bne.n	8004268 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	89db      	ldrh	r3, [r3, #14]
 800425c:	b29b      	uxth	r3, r3
 800425e:	2bff      	cmp	r3, #255	@ 0xff
 8004260:	d902      	bls.n	8004268 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7a9b      	ldrb	r3, [r3, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004270:	d108      	bne.n	8004284 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	4a17      	ldr	r2, [pc, #92]	@ (80042d8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	e01b      	b.n	80042bc <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7a9b      	ldrb	r3, [r3, #10]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d013      	beq.n	80042b6 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	001a      	movs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7a9b      	ldrb	r3, [r3, #10]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4353      	muls	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	09db      	lsrs	r3, r3, #7
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4a0b      	ldr	r2, [pc, #44]	@ (80042d8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	801a      	strh	r2, [r3, #0]
 80042b4:	e002      	b.n	80042bc <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a07      	ldr	r2, [pc, #28]	@ (80042d8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80042ba:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	805a      	strh	r2, [r3, #2]

	return 1;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	0800d11c 	.word	0x0800d11c
 80042d4:	0800cd1c 	.word	0x0800cd1c
 80042d8:	000003ff 	.word	0x000003ff

080042dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(volatile struct Params* params_ptr, volatile struct Delay_Line* delay_line_ptr){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4a44      	ldr	r2, [pc, #272]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80042ea:	5a9b      	ldrh	r3, [r3, r2]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	4a41      	ldr	r2, [pc, #260]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80042f6:	5a9b      	ldrh	r3, [r3, r2]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	1e5a      	subs	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b299      	uxth	r1, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	0052      	lsls	r2, r2, #1
 8004306:	52d1      	strh	r1, [r2, r3]
 8004308:	e006      	b.n	8004318 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b299      	uxth	r1, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4a38      	ldr	r2, [pc, #224]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800431c:	5a9b      	ldrh	r3, [r3, r2]
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10e      	bne.n	8004342 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4a35      	ldr	r2, [pc, #212]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0089      	lsls	r1, r1, #2
 800432c:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	4a33      	ldr	r2, [pc, #204]	@ (8004400 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004332:	5a9b      	ldrh	r3, [r3, r2]
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b299      	uxth	r1, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800433e:	5299      	strh	r1, [r3, r2]
 8004340:	e026      	b.n	8004390 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4a2e      	ldr	r2, [pc, #184]	@ (8004400 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004346:	5a9b      	ldrh	r3, [r3, r2]
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10e      	bne.n	800436c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	4a2b      	ldr	r2, [pc, #172]	@ (8004400 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004352:	2180      	movs	r1, #128	@ 0x80
 8004354:	0089      	lsls	r1, r1, #2
 8004356:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800435c:	5a9b      	ldrh	r3, [r3, r2]
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b299      	uxth	r1, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4a25      	ldr	r2, [pc, #148]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004368:	5299      	strh	r1, [r3, r2]
 800436a:	e011      	b.n	8004390 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004370:	5a9b      	ldrh	r3, [r3, r2]
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b299      	uxth	r1, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4a20      	ldr	r2, [pc, #128]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800437c:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004382:	5a9b      	ldrh	r3, [r3, r2]
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b299      	uxth	r1, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800438e:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004394:	5a9b      	ldrh	r3, [r3, r2]
 8004396:	b29b      	uxth	r3, r3
 8004398:	001a      	movs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800439e:	b29b      	uxth	r3, r3
 80043a0:	18d2      	adds	r2, r2, r3
 80043a2:	2380      	movs	r3, #128	@ 0x80
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	429a      	cmp	r2, r3
 80043a8:	dd13      	ble.n	80043d2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4913      	ldr	r1, [pc, #76]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80043b0:	5a5b      	ldrh	r3, [r3, r1]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	18cb      	adds	r3, r1, r3
 80043be:	4911      	ldr	r1, [pc, #68]	@ (8004404 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 80043c0:	468c      	mov	ip, r1
 80043c2:	4463      	add	r3, ip
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	809a      	strh	r2, [r3, #4]
 80043d0:	e00f      	b.n	80043f2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4909      	ldr	r1, [pc, #36]	@ (80043fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80043d8:	5a5b      	ldrh	r3, [r3, r1]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	18cb      	adds	r3, r1, r3
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	00000402 	.word	0x00000402
 8004400:	00000404 	.word	0x00000404
 8004404:	7ffffe00 	.word	0x7ffffe00

08004408 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(volatile struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29a      	uxth	r2, r3
 8004418:	2116      	movs	r1, #22
 800441a:	187b      	adds	r3, r7, r1
 800441c:	0952      	lsrs	r2, r2, #5
 800441e:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004420:	187b      	adds	r3, r7, r1
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	2b2a      	cmp	r3, #42	@ 0x2a
 8004426:	d803      	bhi.n	8004430 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	719a      	strb	r2, [r3, #6]
 800442e:	e010      	b.n	8004452 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004430:	2316      	movs	r3, #22
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	2b55      	cmp	r3, #85	@ 0x55
 8004438:	d803      	bhi.n	8004442 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	719a      	strb	r2, [r3, #6]
 8004440:	e007      	b.n	8004452 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004442:	2316      	movs	r3, #22
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	2b7f      	cmp	r3, #127	@ 0x7f
 800444a:	d802      	bhi.n	8004452 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3302      	adds	r3, #2
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	2114      	movs	r1, #20
 800445c:	187b      	adds	r3, r7, r1
 800445e:	0952      	lsrs	r2, r2, #5
 8004460:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004462:	187b      	adds	r3, r7, r1
 8004464:	187a      	adds	r2, r7, r1
 8004466:	8812      	ldrh	r2, [r2, #0]
 8004468:	00d2      	lsls	r2, r2, #3
 800446a:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	187a      	adds	r2, r7, r1
 8004470:	8812      	ldrh	r2, [r2, #0]
 8004472:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	3304      	adds	r3, #4
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	b29a      	uxth	r2, r3
 8004480:	2113      	movs	r1, #19
 8004482:	187b      	adds	r3, r7, r1
 8004484:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	187a      	adds	r2, r7, r1
 800448a:	7812      	ldrb	r2, [r2, #0]
 800448c:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3306      	adds	r3, #6
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29a      	uxth	r2, r3
 8004496:	2110      	movs	r1, #16
 8004498:	187b      	adds	r3, r7, r1
 800449a:	0952      	lsrs	r2, r2, #5
 800449c:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 800449e:	187a      	adds	r2, r7, r1
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	18db      	adds	r3, r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	187a      	adds	r2, r7, r1
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	210e      	movs	r1, #14
 80044ba:	187b      	adds	r3, r7, r1
 80044bc:	0952      	lsrs	r2, r2, #5
 80044be:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	187a      	adds	r2, r7, r1
 80044c4:	8812      	ldrh	r2, [r2, #0]
 80044c6:	0092      	lsls	r2, r2, #2
 80044c8:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	187a      	adds	r2, r7, r1
 80044ce:	8812      	ldrh	r2, [r2, #0]
 80044d0:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80044d2:	2301      	movs	r3, #1
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b006      	add	sp, #24
 80044da:	bd80      	pop	{r7, pc}

080044dc <Startup>:

#include "stm32g0xx_ll_lptim.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b085      	sub	sp, #20
 80044e0:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80044e2:	2007      	movs	r0, #7
 80044e4:	f002 fd97 	bl	8007016 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80044e8:	4b56      	ldr	r3, [pc, #344]	@ (8004644 <Startup+0x168>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4b55      	ldr	r3, [pc, #340]	@ (8004644 <Startup+0x168>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80044f8:	4b53      	ldr	r3, [pc, #332]	@ (8004648 <Startup+0x16c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	4b52      	ldr	r3, [pc, #328]	@ (8004648 <Startup+0x16c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	0099      	lsls	r1, r3, #2
 800450c:	23a0      	movs	r3, #160	@ 0xa0
 800450e:	05db      	lsls	r3, r3, #23
 8004510:	2201      	movs	r2, #1
 8004512:	0018      	movs	r0, r3
 8004514:	f003 fa3b 	bl	800798e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	0159      	lsls	r1, r3, #5
 800451c:	23a0      	movs	r3, #160	@ 0xa0
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	2201      	movs	r2, #1
 8004522:	0018      	movs	r0, r3
 8004524:	f003 fa33 	bl	800798e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004528:	23a0      	movs	r3, #160	@ 0xa0
 800452a:	05db      	lsls	r3, r3, #23
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	@ 0x80
 8004530:	0018      	movs	r0, r3
 8004532:	f003 fa2c 	bl	800798e <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004536:	f7fb ff87 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 800453a:	f7fc fab5 	bl	8000aa8 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 800453e:	4b43      	ldr	r3, [pc, #268]	@ (800464c <Startup+0x170>)
 8004540:	4a43      	ldr	r2, [pc, #268]	@ (8004650 <Startup+0x174>)
 8004542:	4944      	ldr	r1, [pc, #272]	@ (8004654 <Startup+0x178>)
 8004544:	4c44      	ldr	r4, [pc, #272]	@ (8004658 <Startup+0x17c>)
 8004546:	2004      	movs	r0, #4
 8004548:	9000      	str	r0, [sp, #0]
 800454a:	0020      	movs	r0, r4
 800454c:	f7fc f99f 	bl	800088e <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004550:	4b42      	ldr	r3, [pc, #264]	@ (800465c <Startup+0x180>)
 8004552:	4a43      	ldr	r2, [pc, #268]	@ (8004660 <Startup+0x184>)
 8004554:	493f      	ldr	r1, [pc, #252]	@ (8004654 <Startup+0x178>)
 8004556:	4843      	ldr	r0, [pc, #268]	@ (8004664 <Startup+0x188>)
 8004558:	2404      	movs	r4, #4
 800455a:	9400      	str	r4, [sp, #0]
 800455c:	f7fc fa4d 	bl	80009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004560:	4b41      	ldr	r3, [pc, #260]	@ (8004668 <Startup+0x18c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	001a      	movs	r2, r3
 8004566:	4941      	ldr	r1, [pc, #260]	@ (800466c <Startup+0x190>)
 8004568:	4b41      	ldr	r3, [pc, #260]	@ (8004670 <Startup+0x194>)
 800456a:	0018      	movs	r0, r3
 800456c:	f001 fe04 	bl	8006178 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	4b37      	ldr	r3, [pc, #220]	@ (8004650 <Startup+0x174>)
 8004574:	2110      	movs	r1, #16
 8004576:	0018      	movs	r0, r3
 8004578:	f001 f946 	bl	8005808 <Get_Status_Bit>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d0f8      	beq.n	8004572 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	2200      	movs	r2, #0
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e02c      	b.n	80045e2 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004588:	4b3a      	ldr	r3, [pc, #232]	@ (8004674 <Startup+0x198>)
 800458a:	799b      	ldrb	r3, [r3, #6]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d111      	bne.n	80045b6 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004592:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <Startup+0x198>)
 8004594:	7a9b      	ldrb	r3, [r3, #10]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	001a      	movs	r2, r3
 800459a:	0013      	movs	r3, r2
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	11db      	asrs	r3, r3, #7
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	1dba      	adds	r2, r7, #6
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	4933      	ldr	r1, [pc, #204]	@ (8004678 <Startup+0x19c>)
 80045aa:	1acb      	subs	r3, r1, r3
 80045ac:	b299      	uxth	r1, r3
 80045ae:	4b33      	ldr	r3, [pc, #204]	@ (800467c <Startup+0x1a0>)
 80045b0:	0052      	lsls	r2, r2, #1
 80045b2:	52d1      	strh	r1, [r2, r3]
 80045b4:	e010      	b.n	80045d8 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80045b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <Startup+0x198>)
 80045b8:	7a9b      	ldrb	r3, [r3, #10]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	001a      	movs	r2, r3
 80045be:	0013      	movs	r3, r2
 80045c0:	029b      	lsls	r3, r3, #10
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	121b      	asrs	r3, r3, #8
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	1dba      	adds	r2, r7, #6
 80045ca:	8812      	ldrh	r2, [r2, #0]
 80045cc:	492a      	ldr	r1, [pc, #168]	@ (8004678 <Startup+0x19c>)
 80045ce:	1acb      	subs	r3, r1, r3
 80045d0:	b299      	uxth	r1, r3
 80045d2:	4b2a      	ldr	r3, [pc, #168]	@ (800467c <Startup+0x1a0>)
 80045d4:	0052      	lsls	r2, r2, #1
 80045d6:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	881a      	ldrh	r2, [r3, #0]
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	3201      	adds	r2, #1
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	@ 0x80
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d9cc      	bls.n	8004588 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80045ee:	4b21      	ldr	r3, [pc, #132]	@ (8004674 <Startup+0x198>)
 80045f0:	2102      	movs	r1, #2
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7ff fd7c 	bl	80040f0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80045f8:	4a20      	ldr	r2, [pc, #128]	@ (800467c <Startup+0x1a0>)
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <Startup+0x198>)
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff fe6c 	bl	80042dc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8004604:	4b1b      	ldr	r3, [pc, #108]	@ (8004674 <Startup+0x198>)
 8004606:	0018      	movs	r0, r3
 8004608:	f7ff fd46 	bl	8004098 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 800460c:	4b1c      	ldr	r3, [pc, #112]	@ (8004680 <Startup+0x1a4>)
 800460e:	220c      	movs	r2, #12
 8004610:	2104      	movs	r1, #4
 8004612:	0018      	movs	r0, r3
 8004614:	f7ff fcb4 	bl	8003f80 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004618:	f7ff fcee 	bl	8003ff8 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 800461c:	f7fc fe6e 	bl	80012fc <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004620:	f7ff fbb0 	bl	8003d84 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004624:	f001 f8e0 	bl	80057e8 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004628:	4b16      	ldr	r3, [pc, #88]	@ (8004684 <Startup+0x1a8>)
 800462a:	22fa      	movs	r2, #250	@ 0xfa
 800462c:	21fa      	movs	r1, #250	@ 0xfa
 800462e:	0018      	movs	r0, r3
 8004630:	f003 faa4 	bl	8007b7c <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004634:	2007      	movs	r0, #7
 8004636:	f002 fcde 	bl	8006ff6 <HAL_NVIC_EnableIRQ>

	return 1;
 800463a:	2301      	movs	r3, #1
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b003      	add	sp, #12
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	20000800 	.word	0x20000800
 8004648:	20000744 	.word	0x20000744
 800464c:	200004bd 	.word	0x200004bd
 8004650:	20000c20 	.word	0x20000c20
 8004654:	200004b4 	.word	0x200004b4
 8004658:	0800f820 	.word	0x0800f820
 800465c:	20000478 	.word	0x20000478
 8004660:	20000468 	.word	0x20000468
 8004664:	20000488 	.word	0x20000488
 8004668:	0800d51c 	.word	0x0800d51c
 800466c:	20000c2c 	.word	0x20000c2c
 8004670:	200004e8 	.word	0x200004e8
 8004674:	20000c38 	.word	0x20000c38
 8004678:	000003ff 	.word	0x000003ff
 800467c:	20000020 	.word	0x20000020
 8004680:	20000978 	.word	0x20000978
 8004684:	20000bb8 	.word	0x20000bb8

08004688 <Advance_Pending_States>:
volatile struct Normal_FSM phase_fsm = {.current_state = MANUAL_MODE, .prev_state = NONE};
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	4a12      	ldr	r2, [pc, #72]	@ (80046dc <Advance_Pending_States+0x54>)
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004696:	4b11      	ldr	r3, [pc, #68]	@ (80046dc <Advance_Pending_States+0x54>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b05      	cmp	r3, #5
 800469e:	d103      	bne.n	80046a8 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 80046a0:	4b0e      	ldr	r3, [pc, #56]	@ (80046dc <Advance_Pending_States+0x54>)
 80046a2:	2204      	movs	r2, #4
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e007      	b.n	80046b8 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 80046a8:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <Advance_Pending_States+0x54>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d102      	bne.n	80046b8 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <Advance_Pending_States+0x54>)
 80046b4:	2206      	movs	r2, #6
 80046b6:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b06      	cmp	r3, #6
 80046be:	d007      	beq.n	80046d0 <Advance_Pending_States+0x48>
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d003      	beq.n	80046d0 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <Advance_Pending_States+0x54>)
 80046ca:	1d3a      	adds	r2, r7, #4
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 80046d0:	2301      	movs	r3, #1
}
 80046d2:	0018      	movs	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b002      	add	sp, #8
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	20000428 	.word	0x20000428

080046e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <HAL_MspInit+0x44>)
 80046e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004724 <HAL_MspInit+0x44>)
 80046ec:	2101      	movs	r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80046f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <HAL_MspInit+0x44>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	2201      	movs	r2, #1
 80046f8:	4013      	ands	r3, r2
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <HAL_MspInit+0x44>)
 8004700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004702:	4b08      	ldr	r3, [pc, #32]	@ (8004724 <HAL_MspInit+0x44>)
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	0549      	lsls	r1, r1, #21
 8004708:	430a      	orrs	r2, r1
 800470a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_MspInit+0x44>)
 800470e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004710:	2380      	movs	r3, #128	@ 0x80
 8004712:	055b      	lsls	r3, r3, #21
 8004714:	4013      	ands	r3, r2
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	40021000 	.word	0x40021000

08004728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b08b      	sub	sp, #44	@ 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	2414      	movs	r4, #20
 8004732:	193b      	adds	r3, r7, r4
 8004734:	0018      	movs	r0, r3
 8004736:	2314      	movs	r3, #20
 8004738:	001a      	movs	r2, r3
 800473a:	2100      	movs	r1, #0
 800473c:	f008 fa9c 	bl	800cc78 <memset>
  if(hadc->Instance==ADC1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2e      	ldr	r2, [pc, #184]	@ (8004800 <HAL_ADC_MspInit+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d155      	bne.n	80047f6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800474a:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <HAL_ADC_MspInit+0xdc>)
 800474c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800474e:	4b2d      	ldr	r3, [pc, #180]	@ (8004804 <HAL_ADC_MspInit+0xdc>)
 8004750:	2180      	movs	r1, #128	@ 0x80
 8004752:	0349      	lsls	r1, r1, #13
 8004754:	430a      	orrs	r2, r1
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40
 8004758:	4b2a      	ldr	r3, [pc, #168]	@ (8004804 <HAL_ADC_MspInit+0xdc>)
 800475a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	035b      	lsls	r3, r3, #13
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004766:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <HAL_ADC_MspInit+0xdc>)
 8004768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476a:	4b26      	ldr	r3, [pc, #152]	@ (8004804 <HAL_ADC_MspInit+0xdc>)
 800476c:	2101      	movs	r1, #1
 800476e:	430a      	orrs	r2, r1
 8004770:	635a      	str	r2, [r3, #52]	@ 0x34
 8004772:	4b24      	ldr	r3, [pc, #144]	@ (8004804 <HAL_ADC_MspInit+0xdc>)
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	2201      	movs	r2, #1
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800477e:	193b      	adds	r3, r7, r4
 8004780:	2273      	movs	r2, #115	@ 0x73
 8004782:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004784:	193b      	adds	r3, r7, r4
 8004786:	2203      	movs	r2, #3
 8004788:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	193b      	adds	r3, r7, r4
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004790:	193a      	adds	r2, r7, r4
 8004792:	23a0      	movs	r3, #160	@ 0xa0
 8004794:	05db      	lsls	r3, r3, #23
 8004796:	0011      	movs	r1, r2
 8004798:	0018      	movs	r0, r3
 800479a:	f002 ff77 	bl	800768c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047a0:	4a1a      	ldr	r2, [pc, #104]	@ (800480c <HAL_ADC_MspInit+0xe4>)
 80047a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80047a4:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047a6:	2205      	movs	r2, #5
 80047a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047aa:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047b0:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047b6:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047b8:	2280      	movs	r2, #128	@ 0x80
 80047ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047bc:	4b12      	ldr	r3, [pc, #72]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047be:	2280      	movs	r2, #128	@ 0x80
 80047c0:	0052      	lsls	r2, r2, #1
 80047c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047c4:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047c6:	2280      	movs	r2, #128	@ 0x80
 80047c8:	00d2      	lsls	r2, r2, #3
 80047ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047d4:	2280      	movs	r2, #128	@ 0x80
 80047d6:	0192      	lsls	r2, r2, #6
 80047d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047dc:	0018      	movs	r0, r3
 80047de:	f002 fc37 	bl	8007050 <HAL_DMA_Init>
 80047e2:	1e03      	subs	r3, r0, #0
 80047e4:	d001      	beq.n	80047ea <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80047e6:	f7fd fd13 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a06      	ldr	r2, [pc, #24]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_ADC_MspInit+0xe0>)
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b00b      	add	sp, #44	@ 0x2c
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	40012400 	.word	0x40012400
 8004804:	40021000 	.word	0x40021000
 8004808:	20000570 	.word	0x20000570
 800480c:	40020008 	.word	0x40020008

08004810 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b097      	sub	sp, #92	@ 0x5c
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004818:	2344      	movs	r3, #68	@ 0x44
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	0018      	movs	r0, r3
 800481e:	2314      	movs	r3, #20
 8004820:	001a      	movs	r2, r3
 8004822:	2100      	movs	r1, #0
 8004824:	f008 fa28 	bl	800cc78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004828:	241c      	movs	r4, #28
 800482a:	193b      	adds	r3, r7, r4
 800482c:	0018      	movs	r0, r3
 800482e:	2328      	movs	r3, #40	@ 0x28
 8004830:	001a      	movs	r2, r3
 8004832:	2100      	movs	r1, #0
 8004834:	f008 fa20 	bl	800cc78 <memset>
  if(hlptim->Instance==LPTIM1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a46      	ldr	r2, [pc, #280]	@ (8004958 <HAL_LPTIM_MspInit+0x148>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d13e      	bne.n	80048c0 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004842:	193b      	adds	r3, r7, r4
 8004844:	2280      	movs	r2, #128	@ 0x80
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 800484a:	193b      	adds	r3, r7, r4
 800484c:	2200      	movs	r2, #0
 800484e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004850:	193b      	adds	r3, r7, r4
 8004852:	0018      	movs	r0, r3
 8004854:	f004 fa00 	bl	8008c58 <HAL_RCCEx_PeriphCLKConfig>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 800485c:	f7fd fcd8 	bl	8002210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004860:	4b3e      	ldr	r3, [pc, #248]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004864:	4b3d      	ldr	r3, [pc, #244]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	0609      	lsls	r1, r1, #24
 800486a:	430a      	orrs	r2, r1
 800486c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004872:	0fdb      	lsrs	r3, r3, #31
 8004874:	07db      	lsls	r3, r3, #31
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	4b38      	ldr	r3, [pc, #224]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 800487c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800487e:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004880:	2102      	movs	r1, #2
 8004882:	430a      	orrs	r2, r1
 8004884:	635a      	str	r2, [r3, #52]	@ 0x34
 8004886:	4b35      	ldr	r3, [pc, #212]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488a:	2202      	movs	r2, #2
 800488c:	4013      	ands	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004892:	2144      	movs	r1, #68	@ 0x44
 8004894:	187b      	adds	r3, r7, r1
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	187b      	adds	r3, r7, r1
 800489c:	2202      	movs	r2, #2
 800489e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	2200      	movs	r2, #0
 80048aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	2205      	movs	r2, #5
 80048b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004960 <HAL_LPTIM_MspInit+0x150>)
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f002 fee7 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80048be:	e046      	b.n	800494e <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a27      	ldr	r2, [pc, #156]	@ (8004964 <HAL_LPTIM_MspInit+0x154>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d141      	bne.n	800494e <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80048ca:	211c      	movs	r1, #28
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	2280      	movs	r2, #128	@ 0x80
 80048d0:	00d2      	lsls	r2, r2, #3
 80048d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	2200      	movs	r2, #0
 80048d8:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	0018      	movs	r0, r3
 80048de:	f004 f9bb 	bl	8008c58 <HAL_RCCEx_PeriphCLKConfig>
 80048e2:	1e03      	subs	r3, r0, #0
 80048e4:	d001      	beq.n	80048ea <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 80048e6:	f7fd fc93 	bl	8002210 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80048ea:	4b1c      	ldr	r3, [pc, #112]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 80048ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ee:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 80048f0:	2180      	movs	r1, #128	@ 0x80
 80048f2:	05c9      	lsls	r1, r1, #23
 80048f4:	430a      	orrs	r2, r1
 80048f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048f8:	4b18      	ldr	r3, [pc, #96]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 80048fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	05db      	lsls	r3, r3, #23
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490a:	4b14      	ldr	r3, [pc, #80]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 800490c:	2101      	movs	r1, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_LPTIM_MspInit+0x14c>)
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	2201      	movs	r2, #1
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800491e:	2144      	movs	r1, #68	@ 0x44
 8004920:	187b      	adds	r3, r7, r1
 8004922:	2280      	movs	r2, #128	@ 0x80
 8004924:	0052      	lsls	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	187b      	adds	r3, r7, r1
 800492a:	2202      	movs	r2, #2
 800492c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	187b      	adds	r3, r7, r1
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004934:	187b      	adds	r3, r7, r1
 8004936:	2200      	movs	r2, #0
 8004938:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 800493a:	187b      	adds	r3, r7, r1
 800493c:	2205      	movs	r2, #5
 800493e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004940:	187a      	adds	r2, r7, r1
 8004942:	23a0      	movs	r3, #160	@ 0xa0
 8004944:	05db      	lsls	r3, r3, #23
 8004946:	0011      	movs	r1, r2
 8004948:	0018      	movs	r0, r3
 800494a:	f002 fe9f 	bl	800768c <HAL_GPIO_Init>
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b017      	add	sp, #92	@ 0x5c
 8004954:	bd90      	pop	{r4, r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	40007c00 	.word	0x40007c00
 800495c:	40021000 	.word	0x40021000
 8004960:	50000400 	.word	0x50000400
 8004964:	40009400 	.word	0x40009400

08004968 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b099      	sub	sp, #100	@ 0x64
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	234c      	movs	r3, #76	@ 0x4c
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	0018      	movs	r0, r3
 8004976:	2314      	movs	r3, #20
 8004978:	001a      	movs	r2, r3
 800497a:	2100      	movs	r1, #0
 800497c:	f008 f97c 	bl	800cc78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004980:	2424      	movs	r4, #36	@ 0x24
 8004982:	193b      	adds	r3, r7, r4
 8004984:	0018      	movs	r0, r3
 8004986:	2328      	movs	r3, #40	@ 0x28
 8004988:	001a      	movs	r2, r3
 800498a:	2100      	movs	r1, #0
 800498c:	f008 f974 	bl	800cc78 <memset>
  if(htim_base->Instance==TIM1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a68      	ldr	r2, [pc, #416]	@ (8004b38 <HAL_TIM_Base_MspInit+0x1d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d11d      	bne.n	80049d6 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800499a:	193b      	adds	r3, r7, r4
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	0392      	lsls	r2, r2, #14
 80049a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80049a2:	193b      	adds	r3, r7, r4
 80049a4:	2200      	movs	r2, #0
 80049a6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049a8:	193b      	adds	r3, r7, r4
 80049aa:	0018      	movs	r0, r3
 80049ac:	f004 f954 	bl	8008c58 <HAL_RCCEx_PeriphCLKConfig>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 80049b4:	f7fd fc2c 	bl	8002210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049b8:	4b60      	ldr	r3, [pc, #384]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049bc:	4b5f      	ldr	r3, [pc, #380]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	0109      	lsls	r1, r1, #4
 80049c2:	430a      	orrs	r2, r1
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80049c6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4013      	ands	r3, r2
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 80049d4:	e0ab      	b.n	8004b2e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	05db      	lsls	r3, r3, #23
 80049de:	429a      	cmp	r2, r3
 80049e0:	d138      	bne.n	8004a54 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049e2:	4b56      	ldr	r3, [pc, #344]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e6:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049e8:	2101      	movs	r1, #1
 80049ea:	430a      	orrs	r2, r1
 80049ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049ee:	4b53      	ldr	r3, [pc, #332]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	2201      	movs	r2, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	4b50      	ldr	r3, [pc, #320]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 80049fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049fe:	4b4f      	ldr	r3, [pc, #316]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a06:	4b4d      	ldr	r3, [pc, #308]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004a12:	214c      	movs	r1, #76	@ 0x4c
 8004a14:	187b      	adds	r3, r7, r1
 8004a16:	2280      	movs	r2, #128	@ 0x80
 8004a18:	0212      	lsls	r2, r2, #8
 8004a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	2202      	movs	r2, #2
 8004a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004a22:	187b      	adds	r3, r7, r1
 8004a24:	2201      	movs	r2, #1
 8004a26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004a2e:	187b      	adds	r3, r7, r1
 8004a30:	2202      	movs	r2, #2
 8004a32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004a34:	187a      	adds	r2, r7, r1
 8004a36:	23a0      	movs	r3, #160	@ 0xa0
 8004a38:	05db      	lsls	r3, r3, #23
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f002 fe25 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004a42:	2202      	movs	r2, #2
 8004a44:	2102      	movs	r1, #2
 8004a46:	200f      	movs	r0, #15
 8004a48:	f002 fac0 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a4c:	200f      	movs	r0, #15
 8004a4e:	f002 fad2 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
}
 8004a52:	e06c      	b.n	8004b2e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a39      	ldr	r2, [pc, #228]	@ (8004b40 <HAL_TIM_Base_MspInit+0x1d8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d114      	bne.n	8004a88 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a5e:	4b37      	ldr	r3, [pc, #220]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a62:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a64:	2102      	movs	r1, #2
 8004a66:	430a      	orrs	r2, r1
 8004a68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a6a:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	2202      	movs	r2, #2
 8004a70:	4013      	ands	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2010      	movs	r0, #16
 8004a7c:	f002 faa6 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a80:	2010      	movs	r0, #16
 8004a82:	f002 fab8 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
}
 8004a86:	e052      	b.n	8004b2e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b44 <HAL_TIM_Base_MspInit+0x1dc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d116      	bne.n	8004ac0 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004a92:	4b2a      	ldr	r3, [pc, #168]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a96:	4b29      	ldr	r3, [pc, #164]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a98:	2180      	movs	r1, #128	@ 0x80
 8004a9a:	0289      	lsls	r1, r1, #10
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aa0:	4b26      	ldr	r3, [pc, #152]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	029b      	lsls	r3, r3, #10
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	2015      	movs	r0, #21
 8004ab4:	f002 fa8a 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004ab8:	2015      	movs	r0, #21
 8004aba:	f002 fa9c 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
}
 8004abe:	e036      	b.n	8004b2e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a20      	ldr	r2, [pc, #128]	@ (8004b48 <HAL_TIM_Base_MspInit+0x1e0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d116      	bne.n	8004af8 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004aca:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ace:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	02c9      	lsls	r1, r1, #11
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ad8:	4b18      	ldr	r3, [pc, #96]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	02db      	lsls	r3, r3, #11
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	2103      	movs	r1, #3
 8004aea:	2016      	movs	r0, #22
 8004aec:	f002 fa6e 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004af0:	2016      	movs	r0, #22
 8004af2:	f002 fa80 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
}
 8004af6:	e01a      	b.n	8004b2e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <HAL_TIM_Base_MspInit+0x1e4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d115      	bne.n	8004b2e <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004b02:	4b0e      	ldr	r3, [pc, #56]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004b08:	2180      	movs	r1, #128	@ 0x80
 8004b0a:	0209      	lsls	r1, r1, #8
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b10:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1d4>)
 8004b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004b1e:	2203      	movs	r2, #3
 8004b20:	2103      	movs	r1, #3
 8004b22:	2013      	movs	r0, #19
 8004b24:	f002 fa52 	bl	8006fcc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004b28:	2013      	movs	r0, #19
 8004b2a:	f002 fa64 	bl	8006ff6 <HAL_NVIC_EnableIRQ>
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b019      	add	sp, #100	@ 0x64
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40002000 	.word	0x40002000

08004b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b08b      	sub	sp, #44	@ 0x2c
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b58:	2414      	movs	r4, #20
 8004b5a:	193b      	adds	r3, r7, r4
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	2314      	movs	r3, #20
 8004b60:	001a      	movs	r2, r3
 8004b62:	2100      	movs	r1, #0
 8004b64:	f008 f888 	bl	800cc78 <memset>
  if(htim->Instance==TIM1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	@ (8004c04 <HAL_TIM_MspPostInit+0xb4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d144      	bne.n	8004bfc <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b72:	4b25      	ldr	r3, [pc, #148]	@ (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b76:	4b24      	ldr	r3, [pc, #144]	@ (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b78:	2101      	movs	r1, #1
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b7e:	4b22      	ldr	r3, [pc, #136]	@ (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	2201      	movs	r2, #1
 8004b84:	4013      	ands	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b90:	2102      	movs	r1, #2
 8004b92:	430a      	orrs	r2, r1
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b96:	4b1c      	ldr	r3, [pc, #112]	@ (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8004ba2:	193b      	adds	r3, r7, r4
 8004ba4:	2280      	movs	r2, #128	@ 0x80
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	193b      	adds	r3, r7, r4
 8004bac:	2202      	movs	r2, #2
 8004bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	193b      	adds	r3, r7, r4
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb6:	193b      	adds	r3, r7, r4
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004bbc:	193b      	adds	r3, r7, r4
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004bc2:	193a      	adds	r2, r7, r4
 8004bc4:	23a0      	movs	r3, #160	@ 0xa0
 8004bc6:	05db      	lsls	r3, r3, #23
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f002 fd5e 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004bd0:	0021      	movs	r1, r4
 8004bd2:	187b      	adds	r3, r7, r1
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	2202      	movs	r2, #2
 8004bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	2200      	movs	r2, #0
 8004be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	2201      	movs	r2, #1
 8004bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004bf0:	187b      	adds	r3, r7, r1
 8004bf2:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	0010      	movs	r0, r2
 8004bf8:	f002 fd48 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bfc:	46c0      	nop			@ (mov r8, r8)
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b00b      	add	sp, #44	@ 0x2c
 8004c02:	bd90      	pop	{r4, r7, pc}
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	50000400 	.word	0x50000400

08004c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b08b      	sub	sp, #44	@ 0x2c
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c18:	2414      	movs	r4, #20
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	2314      	movs	r3, #20
 8004c20:	001a      	movs	r2, r3
 8004c22:	2100      	movs	r1, #0
 8004c24:	f008 f828 	bl	800cc78 <memset>
  if(huart->Instance==USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d58 <HAL_UART_MspInit+0x148>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d000      	beq.n	8004c34 <HAL_UART_MspInit+0x24>
 8004c32:	e08d      	b.n	8004d50 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c34:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_UART_MspInit+0x14c>)
 8004c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c38:	4b48      	ldr	r3, [pc, #288]	@ (8004d5c <HAL_UART_MspInit+0x14c>)
 8004c3a:	2180      	movs	r1, #128	@ 0x80
 8004c3c:	0289      	lsls	r1, r1, #10
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c42:	4b46      	ldr	r3, [pc, #280]	@ (8004d5c <HAL_UART_MspInit+0x14c>)
 8004c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	029b      	lsls	r3, r3, #10
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c50:	4b42      	ldr	r3, [pc, #264]	@ (8004d5c <HAL_UART_MspInit+0x14c>)
 8004c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c54:	4b41      	ldr	r3, [pc, #260]	@ (8004d5c <HAL_UART_MspInit+0x14c>)
 8004c56:	2101      	movs	r1, #1
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d5c <HAL_UART_MspInit+0x14c>)
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	2201      	movs	r2, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004c68:	0021      	movs	r1, r4
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	220c      	movs	r2, #12
 8004c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c70:	187b      	adds	r3, r7, r1
 8004c72:	2202      	movs	r2, #2
 8004c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	2201      	movs	r2, #1
 8004c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	2200      	movs	r2, #0
 8004c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	2201      	movs	r2, #1
 8004c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c88:	187a      	adds	r2, r7, r1
 8004c8a:	23a0      	movs	r3, #160	@ 0xa0
 8004c8c:	05db      	lsls	r3, r3, #23
 8004c8e:	0011      	movs	r1, r2
 8004c90:	0018      	movs	r0, r3
 8004c92:	f002 fcfb 	bl	800768c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004c96:	4b32      	ldr	r3, [pc, #200]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004c98:	4a32      	ldr	r2, [pc, #200]	@ (8004d64 <HAL_UART_MspInit+0x154>)
 8004c9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004c9c:	4b30      	ldr	r3, [pc, #192]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004c9e:	2234      	movs	r2, #52	@ 0x34
 8004ca0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cae:	4b2c      	ldr	r3, [pc, #176]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004cb0:	2280      	movs	r2, #128	@ 0x80
 8004cb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cba:	4b29      	ldr	r3, [pc, #164]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004cc6:	4b26      	ldr	r3, [pc, #152]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004cc8:	2280      	movs	r2, #128	@ 0x80
 8004cca:	0152      	lsls	r2, r2, #5
 8004ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004cce:	4b24      	ldr	r3, [pc, #144]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f002 f9bd 	bl	8007050 <HAL_DMA_Init>
 8004cd6:	1e03      	subs	r3, r0, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004cda:	f7fd fa99 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2180      	movs	r1, #128	@ 0x80
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004ce4:	505a      	str	r2, [r3, r1]
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d60 <HAL_UART_MspInit+0x150>)
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004cec:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004cee:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <HAL_UART_MspInit+0x15c>)
 8004cf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004cf4:	2235      	movs	r2, #53	@ 0x35
 8004cf6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d04:	4b18      	ldr	r3, [pc, #96]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d06:	2280      	movs	r2, #128	@ 0x80
 8004d08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d0a:	4b17      	ldr	r3, [pc, #92]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d10:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d16:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d1e:	2280      	movs	r2, #128	@ 0x80
 8004d20:	0152      	lsls	r2, r2, #5
 8004d22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d24:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d26:	0018      	movs	r0, r3
 8004d28:	f002 f992 	bl	8007050 <HAL_DMA_Init>
 8004d2c:	1e03      	subs	r3, r0, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004d30:	f7fd fa6e 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0c      	ldr	r2, [pc, #48]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d38:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_UART_MspInit+0x158>)
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8004d40:	2201      	movs	r2, #1
 8004d42:	2101      	movs	r1, #1
 8004d44:	201c      	movs	r0, #28
 8004d46:	f002 f941 	bl	8006fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d4a:	201c      	movs	r0, #28
 8004d4c:	f002 f953 	bl	8006ff6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b00b      	add	sp, #44	@ 0x2c
 8004d56:	bd90      	pop	{r4, r7, pc}
 8004d58:	40004400 	.word	0x40004400
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	20000b00 	.word	0x20000b00
 8004d64:	4002001c 	.word	0x4002001c
 8004d68:	20000b5c 	.word	0x20000b5c
 8004d6c:	40020030 	.word	0x40020030

08004d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	e7fd      	b.n	8004d74 <NMI_Handler+0x4>

08004d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	e7fd      	b.n	8004d7c <HardFault_Handler+0x4>

08004d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004d84:	46c0      	nop			@ (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d98:	f000 fe04 	bl	80059a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d9c:	46c0      	nop			@ (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8004da6:	2080      	movs	r0, #128	@ 0x80
 8004da8:	f002 fe0e 	bl	80079c8 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004db8:	4b03      	ldr	r3, [pc, #12]	@ (8004dc8 <DMA1_Channel1_IRQHandler+0x14>)
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f002 fb24 	bl	8007408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dc0:	46c0      	nop			@ (mov r8, r8)
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	20000570 	.word	0x20000570

08004dcc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f002 fb18 	bl	8007408 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <DMA1_Channel2_3_IRQHandler+0x20>)
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f002 fb14 	bl	8007408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004de0:	46c0      	nop			@ (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	20000b00 	.word	0x20000b00
 8004dec:	20000b5c 	.word	0x20000b5c

08004df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004df4:	4b03      	ldr	r3, [pc, #12]	@ (8004e04 <TIM2_IRQHandler+0x14>)
 8004df6:	0018      	movs	r0, r3
 8004df8:	f004 fef8 	bl	8009bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	20000800 	.word	0x20000800

08004e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e0c:	4b03      	ldr	r3, [pc, #12]	@ (8004e1c <TIM3_IRQHandler+0x14>)
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f004 feec 	bl	8009bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	200008bc 	.word	0x200008bc

08004e20 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <TIM16_IRQHandler+0x14>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f004 fee0 	bl	8009bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	20000744 	.word	0x20000744

08004e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e3c:	4b03      	ldr	r3, [pc, #12]	@ (8004e4c <USART2_IRQHandler+0x14>)
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f006 fc56 	bl	800b6f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	20000a34 	.word	0x20000a34

08004e50 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004e54:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <LPTIM1_IRQHandler+0x14>)
 8004e56:	0018      	movs	r0, r3
 8004e58:	f002 ff24 	bl	8007ca4 <HAL_LPTIM_IRQHandler>
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	20000bb8 	.word	0x20000bb8

08004e68 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004e6c:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <TIM17_IRQHandler+0x14>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f004 febc 	bl	8009bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	20000688 	.word	0x20000688

08004e80 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004e84:	4b03      	ldr	r3, [pc, #12]	@ (8004e94 <TIM14_IRQHandler+0x14>)
 8004e86:	0018      	movs	r0, r3
 8004e88:	f004 feb0 	bl	8009bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004e8c:	46c0      	nop			@ (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	200005cc 	.word	0x200005cc

08004e98 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(volatile struct Params* params_ptr){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	5c9b      	ldrb	r3, [r3, r2]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8b5b      	ldrh	r3, [r3, #26]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	839a      	strh	r2, [r3, #28]
 8004eba:	e00a      	b.n	8004ed2 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	5c9b      	ldrb	r3, [r3, r2]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8b5b      	ldrh	r3, [r3, #26]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8004ed2:	2301      	movs	r3, #1
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}

08004edc <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(volatile struct Params* params_ptr){
 8004edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8004ee4:	2317      	movs	r3, #23
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8004eec:	2316      	movs	r3, #22
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8004ef4:	2315      	movs	r3, #21
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8004efc:	2114      	movs	r1, #20
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	899b      	ldrh	r3, [r3, #12]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f0c:	d803      	bhi.n	8004f16 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e003      	b.n	8004f1e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8004f16:	2314      	movs	r3, #20
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	799b      	ldrb	r3, [r3, #6]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d004      	beq.n	8004f32 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	799b      	ldrb	r3, [r3, #6]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d146      	bne.n	8004fc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7c1b      	ldrb	r3, [r3, #16]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7c5b      	ldrb	r3, [r3, #17]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7c1b      	ldrb	r3, [r3, #16]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d113      	bne.n	8004f78 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7c5b      	ldrb	r3, [r3, #17]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10e      	bne.n	8004f78 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8004f5a:	2314      	movs	r3, #20
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8004f64:	2316      	movs	r3, #22
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	2201      	movs	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8004f6c:	e027      	b.n	8004fbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8004f6e:	2316      	movs	r3, #22
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8004f76:	e022      	b.n	8004fbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7c1b      	ldrb	r3, [r3, #16]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7c5b      	ldrb	r3, [r3, #17]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d009      	beq.n	8004fa0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7c1b      	ldrb	r3, [r3, #16]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d13c      	bne.n	8005010 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7c5b      	ldrb	r3, [r3, #17]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d137      	bne.n	8005010 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8004fa0:	2314      	movs	r3, #20
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8004faa:	2316      	movs	r3, #22
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004fb2:	e02d      	b.n	8005010 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8004fb4:	2316      	movs	r3, #22
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	2201      	movs	r2, #1
 8004fba:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004fbc:	e028      	b.n	8005010 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8004fbe:	e027      	b.n	8005010 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	799b      	ldrb	r3, [r3, #6]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d123      	bne.n	8005012 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7c1b      	ldrb	r3, [r3, #16]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10e      	bne.n	8004ff2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8004fd4:	2314      	movs	r3, #20
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8004fde:	2316      	movs	r3, #22
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e014      	b.n	8005012 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8004fe8:	2316      	movs	r3, #22
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	e00f      	b.n	8005012 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8004ff2:	2314      	movs	r3, #20
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8004ffc:	2316      	movs	r3, #22
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e005      	b.n	8005012 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005006:	2316      	movs	r3, #22
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e000      	b.n	8005012 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005010:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005012:	2314      	movs	r3, #20
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	899b      	ldrh	r3, [r3, #12]
 8005020:	b29b      	uxth	r3, r3
 8005022:	b2da      	uxtb	r2, r3
 8005024:	2315      	movs	r3, #21
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	217f      	movs	r1, #127	@ 0x7f
 800502a:	1a8a      	subs	r2, r1, r2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	899b      	ldrh	r3, [r3, #12]
 8005034:	b29b      	uxth	r3, r3
 8005036:	b2da      	uxtb	r2, r3
 8005038:	2315      	movs	r3, #21
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	3a80      	subs	r2, #128	@ 0x80
 800503e:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8a5b      	ldrh	r3, [r3, #18]
 8005044:	b29a      	uxth	r2, r3
 8005046:	200e      	movs	r0, #14
 8005048:	183b      	adds	r3, r7, r0
 800504a:	2180      	movs	r1, #128	@ 0x80
 800504c:	0049      	lsls	r1, r1, #1
 800504e:	1a8a      	subs	r2, r1, r2
 8005050:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005052:	0001      	movs	r1, r0
 8005054:	187b      	adds	r3, r7, r1
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	2215      	movs	r2, #21
 800505a:	18ba      	adds	r2, r7, r2
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	435a      	muls	r2, r3
 8005060:	0013      	movs	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	189b      	adds	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	10da      	asrs	r2, r3, #3
 800506a:	240c      	movs	r4, #12
 800506c:	193b      	adds	r3, r7, r4
 800506e:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005070:	250a      	movs	r5, #10
 8005072:	197b      	adds	r3, r7, r5
 8005074:	193a      	adds	r2, r7, r4
 8005076:	8812      	ldrh	r2, [r2, #0]
 8005078:	0a12      	lsrs	r2, r2, #8
 800507a:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 800507c:	2312      	movs	r3, #18
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	0008      	movs	r0, r1
 8005082:	1879      	adds	r1, r7, r1
 8005084:	197a      	adds	r2, r7, r5
 8005086:	8809      	ldrh	r1, [r1, #0]
 8005088:	8812      	ldrh	r2, [r2, #0]
 800508a:	1a8a      	subs	r2, r1, r2
 800508c:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 800508e:	2610      	movs	r6, #16
 8005090:	19bb      	adds	r3, r7, r6
 8005092:	1839      	adds	r1, r7, r0
 8005094:	197a      	adds	r2, r7, r5
 8005096:	8809      	ldrh	r1, [r1, #0]
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	188a      	adds	r2, r1, r2
 800509c:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800509e:	19bb      	adds	r3, r7, r6
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	2bff      	cmp	r3, #255	@ 0xff
 80050a4:	d90f      	bls.n	80050c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80050a6:	19bb      	adds	r3, r7, r6
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d000      	beq.n	80050b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 80050b2:	e0b0      	b.n	8005216 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 80050b4:	193b      	adds	r3, r7, r4
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	2108      	movs	r1, #8
 80050ba:	0018      	movs	r0, r3
 80050bc:	f000 fb80 	bl	80057c0 <unsigned_bitwise_modulo>
 80050c0:	1e03      	subs	r3, r0, #0
 80050c2:	d000      	beq.n	80050c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80050c4:	e0a7      	b.n	8005216 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80050c6:	230c      	movs	r3, #12
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	2108      	movs	r1, #8
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 fb76 	bl	80057c0 <unsigned_bitwise_modulo>
 80050d4:	0003      	movs	r3, r0
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d117      	bne.n	800510a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80050da:	2316      	movs	r3, #22
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80050e4:	2317      	movs	r3, #23
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2202      	movs	r2, #2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e008      	b.n	8005100 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80050ee:	2316      	movs	r3, #22
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d103      	bne.n	8005100 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80050f8:	2317      	movs	r3, #23
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005108:	e21f      	b.n	800554a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800510a:	230c      	movs	r3, #12
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	2108      	movs	r1, #8
 8005112:	0018      	movs	r0, r3
 8005114:	f000 fb54 	bl	80057c0 <unsigned_bitwise_modulo>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d121      	bne.n	8005160 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800511c:	2212      	movs	r2, #18
 800511e:	18bb      	adds	r3, r7, r2
 8005120:	18ba      	adds	r2, r7, r2
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005126:	2210      	movs	r2, #16
 8005128:	18bb      	adds	r3, r7, r2
 800512a:	18ba      	adds	r2, r7, r2
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005130:	2316      	movs	r3, #22
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800513a:	2317      	movs	r3, #23
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e008      	b.n	8005156 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005144:	2316      	movs	r3, #22
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d103      	bne.n	8005156 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800514e:	2317      	movs	r3, #23
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800515e:	e1f4      	b.n	800554a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005160:	230c      	movs	r3, #12
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	2108      	movs	r1, #8
 8005168:	0018      	movs	r0, r3
 800516a:	f000 fb29 	bl	80057c0 <unsigned_bitwise_modulo>
 800516e:	0003      	movs	r3, r0
 8005170:	2b7f      	cmp	r3, #127	@ 0x7f
 8005172:	d821      	bhi.n	80051b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005174:	2212      	movs	r2, #18
 8005176:	18bb      	adds	r3, r7, r2
 8005178:	18ba      	adds	r2, r7, r2
 800517a:	8812      	ldrh	r2, [r2, #0]
 800517c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800517e:	2210      	movs	r2, #16
 8005180:	18bb      	adds	r3, r7, r2
 8005182:	18ba      	adds	r2, r7, r2
 8005184:	8812      	ldrh	r2, [r2, #0]
 8005186:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005188:	2316      	movs	r3, #22
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005192:	2317      	movs	r3, #23
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e008      	b.n	80051ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800519c:	2316      	movs	r3, #22
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d103      	bne.n	80051ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80051a6:	2317      	movs	r3, #23
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	2100      	movs	r1, #0
 80051b4:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80051b6:	e1c8      	b.n	800554a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80051b8:	230c      	movs	r3, #12
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	2108      	movs	r1, #8
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 fafd 	bl	80057c0 <unsigned_bitwise_modulo>
 80051c6:	0003      	movs	r3, r0
 80051c8:	2b80      	cmp	r3, #128	@ 0x80
 80051ca:	d800      	bhi.n	80051ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 80051cc:	e1bd      	b.n	800554a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80051ce:	2212      	movs	r2, #18
 80051d0:	18bb      	adds	r3, r7, r2
 80051d2:	18ba      	adds	r2, r7, r2
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	3a01      	subs	r2, #1
 80051d8:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80051da:	2210      	movs	r2, #16
 80051dc:	18bb      	adds	r3, r7, r2
 80051de:	18ba      	adds	r2, r7, r2
 80051e0:	8812      	ldrh	r2, [r2, #0]
 80051e2:	3201      	adds	r2, #1
 80051e4:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80051e6:	2316      	movs	r3, #22
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80051f0:	2317      	movs	r3, #23
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e008      	b.n	800520c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80051fa:	2316      	movs	r3, #22
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d103      	bne.n	800520c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005204:	2317      	movs	r3, #23
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	2100      	movs	r1, #0
 8005212:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005214:	e199      	b.n	800554a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005216:	2110      	movs	r1, #16
 8005218:	187b      	adds	r3, r7, r1
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	429a      	cmp	r2, r3
 8005222:	d810      	bhi.n	8005246 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005224:	187b      	adds	r3, r7, r1
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	429a      	cmp	r2, r3
 800522e:	d000      	beq.n	8005232 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005230:	e18c      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005232:	230c      	movs	r3, #12
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	2108      	movs	r1, #8
 800523a:	0018      	movs	r0, r3
 800523c:	f000 fac0 	bl	80057c0 <unsigned_bitwise_modulo>
 8005240:	1e03      	subs	r3, r0, #0
 8005242:	d100      	bne.n	8005246 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005244:	e182      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005246:	230c      	movs	r3, #12
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	2108      	movs	r1, #8
 800524e:	0018      	movs	r0, r3
 8005250:	f000 fab6 	bl	80057c0 <unsigned_bitwise_modulo>
 8005254:	0003      	movs	r3, r0
 8005256:	2b80      	cmp	r3, #128	@ 0x80
 8005258:	d159      	bne.n	800530e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800525a:	2212      	movs	r2, #18
 800525c:	18bb      	adds	r3, r7, r2
 800525e:	18ba      	adds	r2, r7, r2
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	3a01      	subs	r2, #1
 8005264:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005266:	2110      	movs	r1, #16
 8005268:	187b      	adds	r3, r7, r1
 800526a:	187a      	adds	r2, r7, r1
 800526c:	8812      	ldrh	r2, [r2, #0]
 800526e:	3201      	adds	r2, #1
 8005270:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005272:	000c      	movs	r4, r1
 8005274:	187b      	adds	r3, r7, r1
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	2101      	movs	r1, #1
 800527a:	0018      	movs	r0, r3
 800527c:	f000 faa0 	bl	80057c0 <unsigned_bitwise_modulo>
 8005280:	1e03      	subs	r3, r0, #0
 8005282:	d121      	bne.n	80052c8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005284:	193b      	adds	r3, r7, r4
 8005286:	193a      	adds	r2, r7, r4
 8005288:	8812      	ldrh	r2, [r2, #0]
 800528a:	0852      	lsrs	r2, r2, #1
 800528c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800528e:	2316      	movs	r3, #22
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d108      	bne.n	80052aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005298:	2317      	movs	r3, #23
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	2100      	movs	r1, #0
 80052a6:	5499      	strb	r1, [r3, r2]
 80052a8:	e150      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80052aa:	2316      	movs	r3, #22
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d000      	beq.n	80052b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 80052b4:	e14a      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80052b6:	2317      	movs	r3, #23
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	2101      	movs	r1, #1
 80052c4:	5499      	strb	r1, [r3, r2]
 80052c6:	e141      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80052c8:	2210      	movs	r2, #16
 80052ca:	18bb      	adds	r3, r7, r2
 80052cc:	18ba      	adds	r2, r7, r2
 80052ce:	8812      	ldrh	r2, [r2, #0]
 80052d0:	0852      	lsrs	r2, r2, #1
 80052d2:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80052d4:	2316      	movs	r3, #22
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80052de:	2317      	movs	r3, #23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	2100      	movs	r1, #0
 80052ec:	5499      	strb	r1, [r3, r2]
 80052ee:	e12d      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80052f0:	2316      	movs	r3, #22
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d000      	beq.n	80052fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 80052fa:	e127      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80052fc:	2317      	movs	r3, #23
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	2101      	movs	r1, #1
 800530a:	5499      	strb	r1, [r3, r2]
 800530c:	e11e      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800530e:	230c      	movs	r3, #12
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	2108      	movs	r1, #8
 8005316:	0018      	movs	r0, r3
 8005318:	f000 fa52 	bl	80057c0 <unsigned_bitwise_modulo>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d152      	bne.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005320:	2212      	movs	r2, #18
 8005322:	18bb      	adds	r3, r7, r2
 8005324:	18ba      	adds	r2, r7, r2
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800532a:	2410      	movs	r4, #16
 800532c:	193b      	adds	r3, r7, r4
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fa44 	bl	80057c0 <unsigned_bitwise_modulo>
 8005338:	1e03      	subs	r3, r0, #0
 800533a:	d121      	bne.n	8005380 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800533c:	193b      	adds	r3, r7, r4
 800533e:	193a      	adds	r2, r7, r4
 8005340:	8812      	ldrh	r2, [r2, #0]
 8005342:	0852      	lsrs	r2, r2, #1
 8005344:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005346:	2316      	movs	r3, #22
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005350:	2317      	movs	r3, #23
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]
 8005360:	e0f4      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005362:	2316      	movs	r3, #22
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d000      	beq.n	800536e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 800536c:	e0ee      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800536e:	2317      	movs	r3, #23
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]
 800537e:	e0e5      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005380:	2210      	movs	r2, #16
 8005382:	18bb      	adds	r3, r7, r2
 8005384:	18ba      	adds	r2, r7, r2
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	0852      	lsrs	r2, r2, #1
 800538a:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800538c:	2316      	movs	r3, #22
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d108      	bne.n	80053a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005396:	2317      	movs	r3, #23
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	2100      	movs	r1, #0
 80053a4:	5499      	strb	r1, [r3, r2]
 80053a6:	e0d1      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80053a8:	2316      	movs	r3, #22
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d000      	beq.n	80053b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 80053b2:	e0cb      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80053b4:	2317      	movs	r3, #23
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	2101      	movs	r1, #1
 80053c2:	5499      	strb	r1, [r3, r2]
 80053c4:	e0c2      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80053c6:	230c      	movs	r3, #12
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	2108      	movs	r1, #8
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 f9f6 	bl	80057c0 <unsigned_bitwise_modulo>
 80053d4:	0003      	movs	r3, r0
 80053d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053d8:	d856      	bhi.n	8005488 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80053da:	2212      	movs	r2, #18
 80053dc:	18bb      	adds	r3, r7, r2
 80053de:	18ba      	adds	r2, r7, r2
 80053e0:	8812      	ldrh	r2, [r2, #0]
 80053e2:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80053e4:	2410      	movs	r4, #16
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	193a      	adds	r2, r7, r4
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80053ee:	193b      	adds	r3, r7, r4
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	2101      	movs	r1, #1
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f9e3 	bl	80057c0 <unsigned_bitwise_modulo>
 80053fa:	1e03      	subs	r3, r0, #0
 80053fc:	d121      	bne.n	8005442 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	193a      	adds	r2, r7, r4
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	0852      	lsrs	r2, r2, #1
 8005406:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005408:	2316      	movs	r3, #22
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005412:	2317      	movs	r3, #23
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	2100      	movs	r1, #0
 8005420:	5499      	strb	r1, [r3, r2]
 8005422:	e093      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005424:	2316      	movs	r3, #22
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d000      	beq.n	8005430 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 800542e:	e08d      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005430:	2317      	movs	r3, #23
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	2101      	movs	r1, #1
 800543e:	5499      	strb	r1, [r3, r2]
 8005440:	e084      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005442:	2210      	movs	r2, #16
 8005444:	18bb      	adds	r3, r7, r2
 8005446:	18ba      	adds	r2, r7, r2
 8005448:	8812      	ldrh	r2, [r2, #0]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800544e:	2316      	movs	r3, #22
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005458:	2317      	movs	r3, #23
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]
 8005468:	e070      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800546a:	2316      	movs	r3, #22
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d000      	beq.n	8005476 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005474:	e06a      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005476:	2317      	movs	r3, #23
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]
 8005486:	e061      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005488:	230c      	movs	r3, #12
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	2108      	movs	r1, #8
 8005490:	0018      	movs	r0, r3
 8005492:	f000 f995 	bl	80057c0 <unsigned_bitwise_modulo>
 8005496:	0003      	movs	r3, r0
 8005498:	2b80      	cmp	r3, #128	@ 0x80
 800549a:	d957      	bls.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800549c:	2212      	movs	r2, #18
 800549e:	18bb      	adds	r3, r7, r2
 80054a0:	18ba      	adds	r2, r7, r2
 80054a2:	8812      	ldrh	r2, [r2, #0]
 80054a4:	3a01      	subs	r2, #1
 80054a6:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80054a8:	2410      	movs	r4, #16
 80054aa:	193b      	adds	r3, r7, r4
 80054ac:	193a      	adds	r2, r7, r4
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	3201      	adds	r2, #1
 80054b2:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 f980 	bl	80057c0 <unsigned_bitwise_modulo>
 80054c0:	1e03      	subs	r3, r0, #0
 80054c2:	d120      	bne.n	8005506 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80054c4:	193b      	adds	r3, r7, r4
 80054c6:	193a      	adds	r2, r7, r4
 80054c8:	8812      	ldrh	r2, [r2, #0]
 80054ca:	0852      	lsrs	r2, r2, #1
 80054cc:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80054ce:	2316      	movs	r3, #22
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d108      	bne.n	80054ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054d8:	2317      	movs	r3, #23
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	2100      	movs	r1, #0
 80054e6:	5499      	strb	r1, [r3, r2]
 80054e8:	e030      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054ea:	2316      	movs	r3, #22
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d12b      	bne.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054f4:	2317      	movs	r3, #23
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	2101      	movs	r1, #1
 8005502:	5499      	strb	r1, [r3, r2]
 8005504:	e022      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005506:	2210      	movs	r2, #16
 8005508:	18bb      	adds	r3, r7, r2
 800550a:	18ba      	adds	r2, r7, r2
 800550c:	8812      	ldrh	r2, [r2, #0]
 800550e:	0852      	lsrs	r2, r2, #1
 8005510:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005512:	2316      	movs	r3, #22
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d108      	bne.n	800552e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800551c:	2317      	movs	r3, #23
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	2100      	movs	r1, #0
 800552a:	5499      	strb	r1, [r3, r2]
 800552c:	e00e      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800552e:	2316      	movs	r3, #22
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d109      	bne.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005538:	2317      	movs	r3, #23
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	2101      	movs	r1, #1
 8005546:	5499      	strb	r1, [r3, r2]
 8005548:	e000      	b.n	800554c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800554a:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 800554c:	2316      	movs	r3, #22
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d152      	bne.n	80055fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005556:	2317      	movs	r3, #23
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005560:	2312      	movs	r3, #18
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	2280      	movs	r2, #128	@ 0x80
 8005568:	0052      	lsls	r2, r2, #1
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	829a      	strh	r2, [r3, #20]
 8005572:	e099      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005574:	2317      	movs	r3, #23
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d11b      	bne.n	80055b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	89db      	ldrh	r3, [r3, #14]
 8005582:	b29b      	uxth	r3, r3
 8005584:	2101      	movs	r1, #1
 8005586:	0018      	movs	r0, r3
 8005588:	f000 f91a 	bl	80057c0 <unsigned_bitwise_modulo>
 800558c:	1e03      	subs	r3, r0, #0
 800558e:	d109      	bne.n	80055a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005590:	2312      	movs	r3, #18
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2280      	movs	r2, #128	@ 0x80
 8005598:	0052      	lsls	r2, r2, #1
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	829a      	strh	r2, [r3, #20]
 80055a2:	e081      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 80055a4:	2312      	movs	r3, #18
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	22ff      	movs	r2, #255	@ 0xff
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	829a      	strh	r2, [r3, #20]
 80055b4:	e078      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80055b6:	2317      	movs	r3, #23
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d000      	beq.n	80055c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 80055c0:	e072      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	89db      	ldrh	r3, [r3, #14]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2101      	movs	r1, #1
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 f8f8 	bl	80057c0 <unsigned_bitwise_modulo>
 80055d0:	1e03      	subs	r3, r0, #0
 80055d2:	d109      	bne.n	80055e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80055d4:	2312      	movs	r3, #18
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	2280      	movs	r2, #128	@ 0x80
 80055dc:	0052      	lsls	r2, r2, #1
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	829a      	strh	r2, [r3, #20]
 80055e6:	e05f      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80055e8:	2312      	movs	r3, #18
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	2202      	movs	r2, #2
 80055f0:	32ff      	adds	r2, #255	@ 0xff
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	829a      	strh	r2, [r3, #20]
 80055fa:	e055      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80055fc:	2316      	movs	r3, #22
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d150      	bne.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005606:	2317      	movs	r3, #23
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005610:	2310      	movs	r3, #16
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	2280      	movs	r2, #128	@ 0x80
 8005618:	0052      	lsls	r2, r2, #1
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	829a      	strh	r2, [r3, #20]
 8005622:	e041      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005624:	2317      	movs	r3, #23
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d11b      	bne.n	8005666 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	89db      	ldrh	r3, [r3, #14]
 8005632:	b29b      	uxth	r3, r3
 8005634:	2101      	movs	r1, #1
 8005636:	0018      	movs	r0, r3
 8005638:	f000 f8c2 	bl	80057c0 <unsigned_bitwise_modulo>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d109      	bne.n	8005654 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005640:	2310      	movs	r3, #16
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	2280      	movs	r2, #128	@ 0x80
 8005648:	0052      	lsls	r2, r2, #1
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	829a      	strh	r2, [r3, #20]
 8005652:	e029      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8005654:	2310      	movs	r3, #16
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	22ff      	movs	r2, #255	@ 0xff
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	829a      	strh	r2, [r3, #20]
 8005664:	e020      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005666:	2317      	movs	r3, #23
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d11b      	bne.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	89db      	ldrh	r3, [r3, #14]
 8005674:	b29b      	uxth	r3, r3
 8005676:	2101      	movs	r1, #1
 8005678:	0018      	movs	r0, r3
 800567a:	f000 f8a1 	bl	80057c0 <unsigned_bitwise_modulo>
 800567e:	1e03      	subs	r3, r0, #0
 8005680:	d109      	bne.n	8005696 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005682:	2310      	movs	r3, #16
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	2280      	movs	r2, #128	@ 0x80
 800568a:	0052      	lsls	r2, r2, #1
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	b29a      	uxth	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	829a      	strh	r2, [r3, #20]
 8005694:	e008      	b.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005696:	2310      	movs	r3, #16
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	2202      	movs	r2, #2
 800569e:	32ff      	adds	r2, #255	@ 0xff
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7ff fbf4 	bl	8004e98 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8a9b      	ldrh	r3, [r3, #20]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2280      	movs	r2, #128	@ 0x80
 80056b8:	0052      	lsls	r2, r2, #1
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8adb      	ldrh	r3, [r3, #22]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8b9b      	ldrh	r3, [r3, #28]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	83da      	strh	r2, [r3, #30]

    return 1;
 80056de:	2301      	movs	r3, #1
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b007      	add	sp, #28
 80056e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056ec:	46c0      	nop			@ (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80056f2:	b5b0      	push	{r4, r5, r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80056fc:	250f      	movs	r5, #15
 80056fe:	197c      	adds	r4, r7, r5
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0011      	movs	r1, r2
 8005706:	0018      	movs	r0, r3
 8005708:	f003 fd94 	bl	8009234 <HAL_TIM_OC_Start_IT>
 800570c:	0003      	movs	r3, r0
 800570e:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005710:	197b      	adds	r3, r7, r5
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <Start_OC_TIM+0x2a>

		Error_Handler();
 8005718:	f7fc fd7a 	bl	8002210 <Error_Handler>
	}

	return ok;
 800571c:	230f      	movs	r3, #15
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	781b      	ldrb	r3, [r3, #0]
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bdb0      	pop	{r4, r5, r7, pc}

0800572a <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 800572a:	b5b0      	push	{r4, r5, r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8005734:	250f      	movs	r5, #15
 8005736:	197c      	adds	r4, r7, r5
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0011      	movs	r1, r2
 800573e:	0018      	movs	r0, r3
 8005740:	f003 fe9c 	bl	800947c <HAL_TIM_OC_Stop_IT>
 8005744:	0003      	movs	r3, r0
 8005746:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005748:	197b      	adds	r3, r7, r5
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8005750:	f7fc fd5e 	bl	8002210 <Error_Handler>
	}

	return ok;
 8005754:	230f      	movs	r3, #15
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	781b      	ldrb	r3, [r3, #0]
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b004      	add	sp, #16
 8005760:	bdb0      	pop	{r4, r5, r7, pc}

08005762 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	0002      	movs	r2, r0
 800576a:	1dbb      	adds	r3, r7, #6
 800576c:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800576e:	230e      	movs	r3, #14
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	2202      	movs	r2, #2
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	e014      	b.n	80057a2 <isPrime+0x40>
        if (x % d == 0)
 8005778:	1dba      	adds	r2, r7, #6
 800577a:	230e      	movs	r3, #14
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	8812      	ldrh	r2, [r2, #0]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	0019      	movs	r1, r3
 8005784:	0010      	movs	r0, r2
 8005786:	f7fa fd43 	bl	8000210 <__aeabi_uidivmod>
 800578a:	000b      	movs	r3, r1
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <isPrime+0x34>
            return NO;
 8005792:	2300      	movs	r3, #0
 8005794:	e010      	b.n	80057b8 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8005796:	210e      	movs	r1, #14
 8005798:	187b      	adds	r3, r7, r1
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	187b      	adds	r3, r7, r1
 800579e:	3201      	adds	r2, #1
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	220e      	movs	r2, #14
 80057a4:	18bb      	adds	r3, r7, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	18ba      	adds	r2, r7, r2
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	435a      	muls	r2, r3
 80057ae:	1dbb      	adds	r3, r7, #6
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	dde0      	ble.n	8005778 <isPrime+0x16>
    }
    return YES;
 80057b6:	2301      	movs	r3, #1
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b004      	add	sp, #16
 80057be:	bd80      	pop	{r7, pc}

080057c0 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	000a      	movs	r2, r1
 80057ca:	1cfb      	adds	r3, r7, #3
 80057cc:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80057ce:	1cfb      	adds	r3, r7, #3
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	0013      	movs	r3, r2
 80057d8:	3b01      	subs	r3, #1
 80057da:	001a      	movs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4013      	ands	r3, r2
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b002      	add	sp, #8
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80057ec:	b662      	cpsie	i
}
 80057ee:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80057f0:	2301      	movs	r3, #1
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <Global_Interrupt_Disable>:

uint8_t Global_Interrupt_Disable(void){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80057fc:	b672      	cpsid	i
}
 80057fe:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();
	return 1;
 8005800:	2301      	movs	r3, #1
}
 8005802:	0018      	movs	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <Get_Status_Bit>:

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	000a      	movs	r2, r1
 8005812:	1cbb      	adds	r3, r7, #2
 8005814:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1cba      	adds	r2, r7, #2
 800581c:	8812      	ldrh	r2, [r2, #0]
 800581e:	4013      	ands	r3, r2
 8005820:	d001      	beq.n	8005826 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8005826:	2300      	movs	r3, #0
    }
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b002      	add	sp, #8
 800582e:	bd80      	pop	{r7, pc}

08005830 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	000a      	movs	r2, r1
 800583a:	1cbb      	adds	r3, r7, #2
 800583c:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	1cbb      	adds	r3, r7, #2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	000a      	movs	r2, r1
 800585e:	1cbb      	adds	r3, r7, #2
 8005860:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1cba      	adds	r2, r7, #2
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	43d2      	mvns	r2, r2
 800586c:	401a      	ands	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b002      	add	sp, #8
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800587c:	480d      	ldr	r0, [pc, #52]	@ (80058b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800587e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005880:	f7ff ff32 	bl	80056e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005884:	480c      	ldr	r0, [pc, #48]	@ (80058b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005886:	490d      	ldr	r1, [pc, #52]	@ (80058bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005888:	4a0d      	ldr	r2, [pc, #52]	@ (80058c0 <LoopForever+0xe>)
  movs r3, #0
 800588a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800588c:	e002      	b.n	8005894 <LoopCopyDataInit>

0800588e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800588e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005892:	3304      	adds	r3, #4

08005894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005898:	d3f9      	bcc.n	800588e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800589c:	4c0a      	ldr	r4, [pc, #40]	@ (80058c8 <LoopForever+0x16>)
  movs r3, #0
 800589e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058a0:	e001      	b.n	80058a6 <LoopFillZerobss>

080058a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058a4:	3204      	adds	r2, #4

080058a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058a8:	d3fb      	bcc.n	80058a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80058aa:	f007 f9ed 	bl	800cc88 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80058ae:	f7fe fae9 	bl	8003e84 <main>

080058b2 <LoopForever>:

LoopForever:
  b LoopForever
 80058b2:	e7fe      	b.n	80058b2 <LoopForever>
  ldr   r0, =_estack
 80058b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80058b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058bc:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 80058c0:	0800d77c 	.word	0x0800d77c
  ldr r2, =_sbss
 80058c4:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
 80058c8:	20000cd0 	.word	0x20000cd0

080058cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058cc:	e7fe      	b.n	80058cc <ADC1_IRQHandler>
	...

080058d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058d6:	1dfb      	adds	r3, r7, #7
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_Init+0x3c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <HAL_Init+0x3c>)
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	0049      	lsls	r1, r1, #1
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058ea:	2000      	movs	r0, #0
 80058ec:	f000 f810 	bl	8005910 <HAL_InitTick>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d003      	beq.n	80058fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058f4:	1dfb      	adds	r3, r7, #7
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e001      	b.n	8005900 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80058fc:	f7fe fef0 	bl	80046e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005900:	1dfb      	adds	r3, r7, #7
 8005902:	781b      	ldrb	r3, [r3, #0]
}
 8005904:	0018      	movs	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	b002      	add	sp, #8
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40022000 	.word	0x40022000

08005910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005918:	230f      	movs	r3, #15
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005920:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <HAL_InitTick+0x88>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02b      	beq.n	8005980 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005928:	4b1c      	ldr	r3, [pc, #112]	@ (800599c <HAL_InitTick+0x8c>)
 800592a:	681c      	ldr	r4, [r3, #0]
 800592c:	4b1a      	ldr	r3, [pc, #104]	@ (8005998 <HAL_InitTick+0x88>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	0019      	movs	r1, r3
 8005932:	23fa      	movs	r3, #250	@ 0xfa
 8005934:	0098      	lsls	r0, r3, #2
 8005936:	f7fa fbe5 	bl	8000104 <__udivsi3>
 800593a:	0003      	movs	r3, r0
 800593c:	0019      	movs	r1, r3
 800593e:	0020      	movs	r0, r4
 8005940:	f7fa fbe0 	bl	8000104 <__udivsi3>
 8005944:	0003      	movs	r3, r0
 8005946:	0018      	movs	r0, r3
 8005948:	f001 fb75 	bl	8007036 <HAL_SYSTICK_Config>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d112      	bne.n	8005976 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d80a      	bhi.n	800596c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	2301      	movs	r3, #1
 800595a:	425b      	negs	r3, r3
 800595c:	2200      	movs	r2, #0
 800595e:	0018      	movs	r0, r3
 8005960:	f001 fb34 	bl	8006fcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005964:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <HAL_InitTick+0x90>)
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e00d      	b.n	8005988 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800596c:	230f      	movs	r3, #15
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e008      	b.n	8005988 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005976:	230f      	movs	r3, #15
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e003      	b.n	8005988 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005980:	230f      	movs	r3, #15
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005988:	230f      	movs	r3, #15
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	781b      	ldrb	r3, [r3, #0]
}
 800598e:	0018      	movs	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	b005      	add	sp, #20
 8005994:	bd90      	pop	{r4, r7, pc}
 8005996:	46c0      	nop			@ (mov r8, r8)
 8005998:	20000448 	.word	0x20000448
 800599c:	20000440 	.word	0x20000440
 80059a0:	20000444 	.word	0x20000444

080059a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_IncTick+0x1c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	001a      	movs	r2, r3
 80059ae:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_IncTick+0x20>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	18d2      	adds	r2, r2, r3
 80059b4:	4b03      	ldr	r3, [pc, #12]	@ (80059c4 <HAL_IncTick+0x20>)
 80059b6:	601a      	str	r2, [r3, #0]
}
 80059b8:	46c0      	nop			@ (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	20000448 	.word	0x20000448
 80059c4:	20000ccc 	.word	0x20000ccc

080059c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  return uwTick;
 80059cc:	4b02      	ldr	r3, [pc, #8]	@ (80059d8 <HAL_GetTick+0x10>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	20000ccc 	.word	0x20000ccc

080059dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a05      	ldr	r2, [pc, #20]	@ (8005a00 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80059ec:	401a      	ands	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	fe3fffff 	.word	0xfe3fffff

08005a04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	23e0      	movs	r3, #224	@ 0xe0
 8005a12:	045b      	lsls	r3, r3, #17
 8005a14:	4013      	ands	r3, r2
}
 8005a16:	0018      	movs	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	2104      	movs	r1, #4
 8005a32:	400a      	ands	r2, r1
 8005a34:	2107      	movs	r1, #7
 8005a36:	4091      	lsls	r1, r2
 8005a38:	000a      	movs	r2, r1
 8005a3a:	43d2      	mvns	r2, r2
 8005a3c:	401a      	ands	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2104      	movs	r1, #4
 8005a42:	400b      	ands	r3, r1
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4099      	lsls	r1, r3
 8005a48:	000b      	movs	r3, r1
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005a50:	46c0      	nop			@ (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b004      	add	sp, #16
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	2104      	movs	r1, #4
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	2107      	movs	r1, #7
 8005a6e:	4091      	lsls	r1, r2
 8005a70:	000a      	movs	r2, r1
 8005a72:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2104      	movs	r1, #4
 8005a78:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a7a:	40da      	lsrs	r2, r3
 8005a7c:	0013      	movs	r3, r2
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b002      	add	sp, #8
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	23c0      	movs	r3, #192	@ 0xc0
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	4013      	ands	r3, r2
 8005a98:	d101      	bne.n	8005a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	211f      	movs	r1, #31
 8005abc:	400a      	ands	r2, r1
 8005abe:	210f      	movs	r1, #15
 8005ac0:	4091      	lsls	r1, r2
 8005ac2:	000a      	movs	r2, r1
 8005ac4:	43d2      	mvns	r2, r2
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0e9b      	lsrs	r3, r3, #26
 8005acc:	210f      	movs	r1, #15
 8005ace:	4019      	ands	r1, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	201f      	movs	r0, #31
 8005ad4:	4003      	ands	r3, r0
 8005ad6:	4099      	lsls	r1, r3
 8005ad8:	000b      	movs	r3, r1
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ae0:	46c0      	nop			@ (mov r8, r8)
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	035b      	lsls	r3, r3, #13
 8005afa:	0b5b      	lsrs	r3, r3, #13
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b002      	add	sp, #8
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	0352      	lsls	r2, r2, #13
 8005b1c:	0b52      	lsrs	r2, r2, #13
 8005b1e:	43d2      	mvns	r2, r2
 8005b20:	401a      	ands	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b002      	add	sp, #8
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	0212      	lsls	r2, r2, #8
 8005b44:	43d2      	mvns	r2, r2
 8005b46:	401a      	ands	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	400b      	ands	r3, r1
 8005b50:	4904      	ldr	r1, [pc, #16]	@ (8005b64 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005b52:	400b      	ands	r3, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	07ffff00 	.word	0x07ffff00

08005b68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a05      	ldr	r2, [pc, #20]	@ (8005b8c <LL_ADC_EnableInternalRegulator+0x24>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	2280      	movs	r2, #128	@ 0x80
 8005b7a:	0552      	lsls	r2, r2, #21
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b002      	add	sp, #8
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	6fffffe8 	.word	0x6fffffe8

08005b90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	055b      	lsls	r3, r3, #21
 8005ba0:	401a      	ands	r2, r3
 8005ba2:	2380      	movs	r3, #128	@ 0x80
 8005ba4:	055b      	lsls	r3, r3, #21
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d101      	bne.n	8005bae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4a04      	ldr	r2, [pc, #16]	@ (8005bd8 <LL_ADC_Enable+0x20>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2201      	movs	r2, #1
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005bd0:	46c0      	nop			@ (mov r8, r8)
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	b002      	add	sp, #8
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	7fffffe8 	.word	0x7fffffe8

08005bdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4a04      	ldr	r2, [pc, #16]	@ (8005bfc <LL_ADC_Disable+0x20>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	2202      	movs	r2, #2
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005bf4:	46c0      	nop			@ (mov r8, r8)
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	7fffffe8 	.word	0x7fffffe8

08005c00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <LL_ADC_IsEnabled+0x18>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <LL_ADC_IsEnabled+0x1a>
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b002      	add	sp, #8
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d101      	bne.n	8005c3a <LL_ADC_IsDisableOngoing+0x18>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <LL_ADC_IsDisableOngoing+0x1a>
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b002      	add	sp, #8
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	4a04      	ldr	r2, [pc, #16]	@ (8005c64 <LL_ADC_REG_StartConversion+0x20>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	2204      	movs	r2, #4
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	7fffffe8 	.word	0x7fffffe8

08005c68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	4a04      	ldr	r2, [pc, #16]	@ (8005c88 <LL_ADC_REG_StopConversion+0x20>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	2210      	movs	r2, #16
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005c80:	46c0      	nop			@ (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	7fffffe8 	.word	0x7fffffe8

08005c8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d101      	bne.n	8005ca4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b002      	add	sp, #8
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb8:	231f      	movs	r3, #31
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e19f      	b.n	8006016 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d12a      	bne.n	8005d34 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4acf      	ldr	r2, [pc, #828]	@ (8006020 <HAL_ADC_Init+0x370>)
 8005ce2:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4acf      	ldr	r2, [pc, #828]	@ (8006024 <HAL_ADC_Init+0x374>)
 8005ce8:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4ace      	ldr	r2, [pc, #824]	@ (8006028 <HAL_ADC_Init+0x378>)
 8005cee:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4ace      	ldr	r2, [pc, #824]	@ (800602c <HAL_ADC_Init+0x37c>)
 8005cf4:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4acd      	ldr	r2, [pc, #820]	@ (8006030 <HAL_ADC_Init+0x380>)
 8005cfa:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4acd      	ldr	r2, [pc, #820]	@ (8006034 <HAL_ADC_Init+0x384>)
 8005d00:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4acc      	ldr	r2, [pc, #816]	@ (8006038 <HAL_ADC_Init+0x388>)
 8005d06:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2280      	movs	r2, #128	@ 0x80
 8005d0c:	589b      	ldr	r3, [r3, r2]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2180      	movs	r1, #128	@ 0x80
 8005d16:	4ac9      	ldr	r2, [pc, #804]	@ (800603c <HAL_ADC_Init+0x38c>)
 8005d18:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2280      	movs	r2, #128	@ 0x80
 8005d1e:	589b      	ldr	r3, [r3, r2]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	0010      	movs	r0, r2
 8005d24:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2254      	movs	r2, #84	@ 0x54
 8005d30:	2100      	movs	r1, #0
 8005d32:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f7ff ff29 	bl	8005b90 <LL_ADC_IsInternalRegulatorEnabled>
 8005d3e:	1e03      	subs	r3, r0, #0
 8005d40:	d115      	bne.n	8005d6e <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f7ff ff0e 	bl	8005b68 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d4c:	4bbc      	ldr	r3, [pc, #752]	@ (8006040 <HAL_ADC_Init+0x390>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	49bc      	ldr	r1, [pc, #752]	@ (8006044 <HAL_ADC_Init+0x394>)
 8005d52:	0018      	movs	r0, r3
 8005d54:	f7fa f9d6 	bl	8000104 <__udivsi3>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d60:	e002      	b.n	8005d68 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f9      	bne.n	8005d62 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7ff ff0c 	bl	8005b90 <LL_ADC_IsInternalRegulatorEnabled>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d10f      	bne.n	8005d9c <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d80:	2210      	movs	r2, #16
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d94:	231f      	movs	r3, #31
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f7ff ff73 	bl	8005c8c <LL_ADC_REG_IsConversionOngoing>
 8005da6:	0003      	movs	r3, r0
 8005da8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	2210      	movs	r2, #16
 8005db0:	4013      	ands	r3, r2
 8005db2:	d000      	beq.n	8005db6 <HAL_ADC_Init+0x106>
 8005db4:	e122      	b.n	8005ffc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d000      	beq.n	8005dbe <HAL_ADC_Init+0x10e>
 8005dbc:	e11e      	b.n	8005ffc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc2:	4aa1      	ldr	r2, [pc, #644]	@ (8006048 <HAL_ADC_Init+0x398>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff ff14 	bl	8005c00 <LL_ADC_IsEnabled>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d000      	beq.n	8005dde <HAL_ADC_Init+0x12e>
 8005ddc:	e0ad      	b.n	8005f3a <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7e1b      	ldrb	r3, [r3, #24]
 8005de6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005de8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7e5b      	ldrb	r3, [r3, #25]
 8005dee:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005df0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7e9b      	ldrb	r3, [r3, #26]
 8005df6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005df8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_ADC_Init+0x158>
 8005e02:	2380      	movs	r3, #128	@ 0x80
 8005e04:	015b      	lsls	r3, r3, #5
 8005e06:	e000      	b.n	8005e0a <HAL_ADC_Init+0x15a>
 8005e08:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e0a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e10:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da04      	bge.n	8005e24 <HAL_ADC_Init+0x174>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	e001      	b.n	8005e28 <HAL_ADC_Init+0x178>
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005e28:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	212c      	movs	r1, #44	@ 0x2c
 8005e2e:	5c5b      	ldrb	r3, [r3, r1]
 8005e30:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e32:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d115      	bne.n	8005e70 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7e9b      	ldrb	r3, [r3, #26]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2280      	movs	r2, #128	@ 0x80
 8005e50:	0252      	lsls	r2, r2, #9
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e00b      	b.n	8005e70 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e7c:	23e0      	movs	r3, #224	@ 0xe0
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e86:	4313      	orrs	r3, r2
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a6d      	ldr	r2, [pc, #436]	@ (800604c <HAL_ADC_Init+0x39c>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	0f9b      	lsrs	r3, r3, #30
 8005eaa:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	223c      	movs	r2, #60	@ 0x3c
 8005ebc:	5c9b      	ldrb	r3, [r3, r2]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d111      	bne.n	8005ee6 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	0f9b      	lsrs	r3, r3, #30
 8005ec8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ece:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005ed4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005eda:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	4a58      	ldr	r2, [pc, #352]	@ (8006050 <HAL_ADC_Init+0x3a0>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	23c0      	movs	r3, #192	@ 0xc0
 8005f02:	061b      	lsls	r3, r3, #24
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d018      	beq.n	8005f3a <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	05db      	lsls	r3, r3, #23
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d012      	beq.n	8005f3a <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d00c      	beq.n	8005f3a <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005f20:	4b4c      	ldr	r3, [pc, #304]	@ (8006054 <HAL_ADC_Init+0x3a4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a4c      	ldr	r2, [pc, #304]	@ (8006058 <HAL_ADC_Init+0x3a8>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	0019      	movs	r1, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	23f0      	movs	r3, #240	@ 0xf0
 8005f30:	039b      	lsls	r3, r3, #14
 8005f32:	401a      	ands	r2, r3
 8005f34:	4b47      	ldr	r3, [pc, #284]	@ (8006054 <HAL_ADC_Init+0x3a4>)
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f42:	001a      	movs	r2, r3
 8005f44:	2100      	movs	r1, #0
 8005f46:	f7ff fd6a 	bl	8005a1e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	4942      	ldr	r1, [pc, #264]	@ (800605c <HAL_ADC_Init+0x3ac>)
 8005f54:	001a      	movs	r2, r3
 8005f56:	f7ff fd62 	bl	8005a1e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2110      	movs	r1, #16
 8005f6e:	4249      	negs	r1, r1
 8005f70:	430a      	orrs	r2, r1
 8005f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f74:	e018      	b.n	8005fa8 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	2380      	movs	r3, #128	@ 0x80
 8005f7c:	039b      	lsls	r3, r3, #14
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d112      	bne.n	8005fa8 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	221c      	movs	r2, #28
 8005f92:	4013      	ands	r3, r2
 8005f94:	2210      	movs	r2, #16
 8005f96:	4252      	negs	r2, r2
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2100      	movs	r1, #0
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7ff fd52 	bl	8005a58 <LL_ADC_GetSamplingTimeCommonChannels>
 8005fb4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc8:	2203      	movs	r2, #3
 8005fca:	4393      	bics	r3, r2
 8005fcc:	2201      	movs	r2, #1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fd4:	e01c      	b.n	8006010 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fda:	2212      	movs	r2, #18
 8005fdc:	4393      	bics	r3, r2
 8005fde:	2210      	movs	r2, #16
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fea:	2201      	movs	r2, #1
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005ff2:	231f      	movs	r3, #31
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005ffa:	e009      	b.n	8006010 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006000:	2210      	movs	r2, #16
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006008:	231f      	movs	r3, #31
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006010:	231f      	movs	r3, #31
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	781b      	ldrb	r3, [r3, #0]
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b008      	add	sp, #32
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	08006379 	.word	0x08006379
 8006024:	08006389 	.word	0x08006389
 8006028:	08006399 	.word	0x08006399
 800602c:	080063a9 	.word	0x080063a9
 8006030:	08006e01 	.word	0x08006e01
 8006034:	08006e11 	.word	0x08006e11
 8006038:	08006e21 	.word	0x08006e21
 800603c:	08004729 	.word	0x08004729
 8006040:	20000440 	.word	0x20000440
 8006044:	00030d40 	.word	0x00030d40
 8006048:	fffffefd 	.word	0xfffffefd
 800604c:	ffde0201 	.word	0xffde0201
 8006050:	1ffffc02 	.word	0x1ffffc02
 8006054:	40012708 	.word	0x40012708
 8006058:	ffc3ffff 	.word	0xffc3ffff
 800605c:	07ffff04 	.word	0x07ffff04

08006060 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	230b      	movs	r3, #11
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	1c0a      	adds	r2, r1, #0
 8006070:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2317      	movs	r3, #23
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d107      	bne.n	8006090 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006084:	2210      	movs	r2, #16
 8006086:	431a      	orrs	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e06d      	b.n	800616c <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006094:	2201      	movs	r2, #1
 8006096:	4013      	ands	r3, r2
 8006098:	d03a      	beq.n	8006110 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 800609a:	230b      	movs	r3, #11
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b0a      	cmp	r3, #10
 80060a2:	d82a      	bhi.n	80060fa <HAL_ADC_RegisterCallback+0x9a>
 80060a4:	009a      	lsls	r2, r3, #2
 80060a6:	4b33      	ldr	r3, [pc, #204]	@ (8006174 <HAL_ADC_RegisterCallback+0x114>)
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80060b4:	e057      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80060bc:	e053      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80060c4:	e04f      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80060cc:	e04b      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80060d4:	e047      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80060dc:	e043      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80060e4:	e03f      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2180      	movs	r1, #128	@ 0x80
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	505a      	str	r2, [r3, r1]
        break;
 80060ee:	e03a      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2184      	movs	r1, #132	@ 0x84
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	505a      	str	r2, [r3, r1]
        break;
 80060f8:	e035      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	2210      	movs	r2, #16
 8006100:	431a      	orrs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006106:	2317      	movs	r3, #23
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
        break;
 800610e:	e02a      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006118:	230b      	movs	r3, #11
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b09      	cmp	r3, #9
 8006120:	d002      	beq.n	8006128 <HAL_ADC_RegisterCallback+0xc8>
 8006122:	2b0a      	cmp	r3, #10
 8006124:	d005      	beq.n	8006132 <HAL_ADC_RegisterCallback+0xd2>
 8006126:	e009      	b.n	800613c <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2180      	movs	r1, #128	@ 0x80
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	505a      	str	r2, [r3, r1]
        break;
 8006130:	e019      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2184      	movs	r1, #132	@ 0x84
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	505a      	str	r2, [r3, r1]
        break;
 800613a:	e014      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006140:	2210      	movs	r2, #16
 8006142:	431a      	orrs	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006148:	2317      	movs	r3, #23
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
        break;
 8006150:	e009      	b.n	8006166 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006156:	2210      	movs	r2, #16
 8006158:	431a      	orrs	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 800615e:	2317      	movs	r3, #23
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006166:	2317      	movs	r3, #23
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	781b      	ldrb	r3, [r3, #0]
}
 800616c:	0018      	movs	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	b006      	add	sp, #24
 8006172:	bd80      	pop	{r7, pc}
 8006174:	0800d580 	.word	0x0800d580

08006178 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	0018      	movs	r0, r3
 800618a:	f7ff fd7f 	bl	8005c8c <LL_ADC_REG_IsConversionOngoing>
 800618e:	1e03      	subs	r3, r0, #0
 8006190:	d16c      	bne.n	800626c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2254      	movs	r2, #84	@ 0x54
 8006196:	5c9b      	ldrb	r3, [r3, r2]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_ADC_Start_DMA+0x28>
 800619c:	2302      	movs	r3, #2
 800619e:	e06c      	b.n	800627a <HAL_ADC_Start_DMA+0x102>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2254      	movs	r2, #84	@ 0x54
 80061a4:	2101      	movs	r1, #1
 80061a6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d113      	bne.n	80061dc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7ff fd21 	bl	8005c00 <LL_ADC_IsEnabled>
 80061be:	1e03      	subs	r3, r0, #0
 80061c0:	d004      	beq.n	80061cc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7ff fd08 	bl	8005bdc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2101      	movs	r1, #1
 80061d8:	430a      	orrs	r2, r1
 80061da:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80061dc:	2517      	movs	r5, #23
 80061de:	197c      	adds	r4, r7, r5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 fb02 	bl	80067ec <ADC_Enable>
 80061e8:	0003      	movs	r3, r0
 80061ea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80061ec:	002c      	movs	r4, r5
 80061ee:	193b      	adds	r3, r7, r4
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d13e      	bne.n	8006274 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fa:	4a22      	ldr	r2, [pc, #136]	@ (8006284 <HAL_ADC_Start_DMA+0x10c>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	2280      	movs	r2, #128	@ 0x80
 8006200:	0052      	lsls	r2, r2, #1
 8006202:	431a      	orrs	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006212:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <HAL_ADC_Start_DMA+0x110>)
 8006214:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800621a:	4a1c      	ldr	r2, [pc, #112]	@ (800628c <HAL_ADC_Start_DMA+0x114>)
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006222:	4a1b      	ldr	r2, [pc, #108]	@ (8006290 <HAL_ADC_Start_DMA+0x118>)
 8006224:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	221c      	movs	r2, #28
 800622c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2254      	movs	r2, #84	@ 0x54
 8006232:	2100      	movs	r1, #0
 8006234:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2110      	movs	r1, #16
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3340      	adds	r3, #64	@ 0x40
 8006250:	0019      	movs	r1, r3
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	193c      	adds	r4, r7, r4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f000 ff84 	bl	8007164 <HAL_DMA_Start_IT>
 800625c:	0003      	movs	r3, r0
 800625e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	0018      	movs	r0, r3
 8006266:	f7ff fced 	bl	8005c44 <LL_ADC_REG_StartConversion>
 800626a:	e003      	b.n	8006274 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800626c:	2317      	movs	r3, #23
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	2202      	movs	r2, #2
 8006272:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006274:	2317      	movs	r3, #23
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	781b      	ldrb	r3, [r3, #0]
}
 800627a:	0018      	movs	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	b006      	add	sp, #24
 8006280:	bdb0      	pop	{r4, r5, r7, pc}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	fffff0fe 	.word	0xfffff0fe
 8006288:	080069b5 	.word	0x080069b5
 800628c:	08006a81 	.word	0x08006a81
 8006290:	08006aa1 	.word	0x08006aa1

08006294 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006294:	b5b0      	push	{r4, r5, r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2254      	movs	r2, #84	@ 0x54
 80062a0:	5c9b      	ldrb	r3, [r3, r2]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_ADC_Stop_DMA+0x16>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e05f      	b.n	800636a <HAL_ADC_Stop_DMA+0xd6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2254      	movs	r2, #84	@ 0x54
 80062ae:	2101      	movs	r1, #1
 80062b0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80062b2:	250f      	movs	r5, #15
 80062b4:	197c      	adds	r4, r7, r5
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 fa55 	bl	8006768 <ADC_ConversionStop>
 80062be:	0003      	movs	r3, r0
 80062c0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80062c2:	0029      	movs	r1, r5
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d147      	bne.n	800635c <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d0:	2225      	movs	r2, #37	@ 0x25
 80062d2:	5c9b      	ldrb	r3, [r3, r2]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d112      	bne.n	8006300 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062de:	000d      	movs	r5, r1
 80062e0:	187c      	adds	r4, r7, r1
 80062e2:	0018      	movs	r0, r3
 80062e4:	f000 ffc4 	bl	8007270 <HAL_DMA_Abort>
 80062e8:	0003      	movs	r3, r0
 80062ea:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80062ec:	197b      	adds	r3, r7, r5
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f8:	2240      	movs	r2, #64	@ 0x40
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2110      	movs	r1, #16
 800630c:	438a      	bics	r2, r1
 800630e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006310:	220f      	movs	r2, #15
 8006312:	18bb      	adds	r3, r7, r2
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d107      	bne.n	800632a <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800631a:	18bc      	adds	r4, r7, r2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0018      	movs	r0, r3
 8006320:	f000 faea 	bl	80068f8 <ADC_Disable>
 8006324:	0003      	movs	r3, r0
 8006326:	7023      	strb	r3, [r4, #0]
 8006328:	e003      	b.n	8006332 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	0018      	movs	r0, r3
 800632e:	f000 fae3 	bl	80068f8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006332:	230f      	movs	r3, #15
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006340:	4a0c      	ldr	r2, [pc, #48]	@ (8006374 <HAL_ADC_Stop_DMA+0xe0>)
 8006342:	4013      	ands	r3, r2
 8006344:	2201      	movs	r2, #1
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2101      	movs	r1, #1
 8006358:	438a      	bics	r2, r1
 800635a:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2254      	movs	r2, #84	@ 0x54
 8006360:	2100      	movs	r1, #0
 8006362:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006364:	230f      	movs	r3, #15
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	781b      	ldrb	r3, [r3, #0]
}
 800636a:	0018      	movs	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bdb0      	pop	{r4, r5, r7, pc}
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	fffffefe 	.word	0xfffffefe

08006378 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006380:	46c0      	nop			@ (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b002      	add	sp, #8
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006390:	46c0      	nop			@ (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b002      	add	sp, #8
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80063a0:	46c0      	nop			@ (mov r8, r8)
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80063b0:	46c0      	nop			@ (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063c2:	2317      	movs	r3, #23
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2254      	movs	r2, #84	@ 0x54
 80063d2:	5c9b      	ldrb	r3, [r3, r2]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x24>
 80063d8:	2302      	movs	r3, #2
 80063da:	e1c0      	b.n	800675e <HAL_ADC_ConfigChannel+0x3a6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2254      	movs	r2, #84	@ 0x54
 80063e0:	2101      	movs	r1, #1
 80063e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff fc4f 	bl	8005c8c <LL_ADC_REG_IsConversionOngoing>
 80063ee:	1e03      	subs	r3, r0, #0
 80063f0:	d000      	beq.n	80063f4 <HAL_ADC_ConfigChannel+0x3c>
 80063f2:	e1a3      	b.n	800673c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d100      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x46>
 80063fc:	e143      	b.n	8006686 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	2380      	movs	r3, #128	@ 0x80
 8006404:	061b      	lsls	r3, r3, #24
 8006406:	429a      	cmp	r2, r3
 8006408:	d004      	beq.n	8006414 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800640e:	4ac1      	ldr	r2, [pc, #772]	@ (8006714 <HAL_ADC_ConfigChannel+0x35c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	0019      	movs	r1, r3
 800641e:	0010      	movs	r0, r2
 8006420:	f7ff fb62 	bl	8005ae8 <LL_ADC_REG_SetSequencerChAdd>
 8006424:	e0c9      	b.n	80065ba <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	211f      	movs	r1, #31
 8006430:	400b      	ands	r3, r1
 8006432:	210f      	movs	r1, #15
 8006434:	4099      	lsls	r1, r3
 8006436:	000b      	movs	r3, r1
 8006438:	43db      	mvns	r3, r3
 800643a:	4013      	ands	r3, r2
 800643c:	0019      	movs	r1, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	035b      	lsls	r3, r3, #13
 8006444:	0b5b      	lsrs	r3, r3, #13
 8006446:	d105      	bne.n	8006454 <HAL_ADC_ConfigChannel+0x9c>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	0e9b      	lsrs	r3, r3, #26
 800644e:	221f      	movs	r2, #31
 8006450:	4013      	ands	r3, r2
 8006452:	e098      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	4013      	ands	r3, r2
 800645c:	d000      	beq.n	8006460 <HAL_ADC_ConfigChannel+0xa8>
 800645e:	e091      	b.n	8006584 <HAL_ADC_ConfigChannel+0x1cc>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2202      	movs	r2, #2
 8006466:	4013      	ands	r3, r2
 8006468:	d000      	beq.n	800646c <HAL_ADC_ConfigChannel+0xb4>
 800646a:	e089      	b.n	8006580 <HAL_ADC_ConfigChannel+0x1c8>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2204      	movs	r2, #4
 8006472:	4013      	ands	r3, r2
 8006474:	d000      	beq.n	8006478 <HAL_ADC_ConfigChannel+0xc0>
 8006476:	e081      	b.n	800657c <HAL_ADC_ConfigChannel+0x1c4>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2208      	movs	r2, #8
 800647e:	4013      	ands	r3, r2
 8006480:	d000      	beq.n	8006484 <HAL_ADC_ConfigChannel+0xcc>
 8006482:	e079      	b.n	8006578 <HAL_ADC_ConfigChannel+0x1c0>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2210      	movs	r2, #16
 800648a:	4013      	ands	r3, r2
 800648c:	d000      	beq.n	8006490 <HAL_ADC_ConfigChannel+0xd8>
 800648e:	e071      	b.n	8006574 <HAL_ADC_ConfigChannel+0x1bc>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2220      	movs	r2, #32
 8006496:	4013      	ands	r3, r2
 8006498:	d000      	beq.n	800649c <HAL_ADC_ConfigChannel+0xe4>
 800649a:	e069      	b.n	8006570 <HAL_ADC_ConfigChannel+0x1b8>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2240      	movs	r2, #64	@ 0x40
 80064a2:	4013      	ands	r3, r2
 80064a4:	d000      	beq.n	80064a8 <HAL_ADC_ConfigChannel+0xf0>
 80064a6:	e061      	b.n	800656c <HAL_ADC_ConfigChannel+0x1b4>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2280      	movs	r2, #128	@ 0x80
 80064ae:	4013      	ands	r3, r2
 80064b0:	d000      	beq.n	80064b4 <HAL_ADC_ConfigChannel+0xfc>
 80064b2:	e059      	b.n	8006568 <HAL_ADC_ConfigChannel+0x1b0>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4013      	ands	r3, r2
 80064be:	d151      	bne.n	8006564 <HAL_ADC_ConfigChannel+0x1ac>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	2380      	movs	r3, #128	@ 0x80
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4013      	ands	r3, r2
 80064ca:	d149      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x1a8>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4013      	ands	r3, r2
 80064d6:	d141      	bne.n	800655c <HAL_ADC_ConfigChannel+0x1a4>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	2380      	movs	r3, #128	@ 0x80
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	4013      	ands	r3, r2
 80064e2:	d139      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x1a0>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	2380      	movs	r3, #128	@ 0x80
 80064ea:	015b      	lsls	r3, r3, #5
 80064ec:	4013      	ands	r3, r2
 80064ee:	d131      	bne.n	8006554 <HAL_ADC_ConfigChannel+0x19c>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	019b      	lsls	r3, r3, #6
 80064f8:	4013      	ands	r3, r2
 80064fa:	d129      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x198>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	2380      	movs	r3, #128	@ 0x80
 8006502:	01db      	lsls	r3, r3, #7
 8006504:	4013      	ands	r3, r2
 8006506:	d121      	bne.n	800654c <HAL_ADC_ConfigChannel+0x194>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2380      	movs	r3, #128	@ 0x80
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	4013      	ands	r3, r2
 8006512:	d119      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x190>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	025b      	lsls	r3, r3, #9
 800651c:	4013      	ands	r3, r2
 800651e:	d111      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x18c>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	4013      	ands	r3, r2
 800652a:	d109      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x188>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	2380      	movs	r3, #128	@ 0x80
 8006532:	02db      	lsls	r3, r3, #11
 8006534:	4013      	ands	r3, r2
 8006536:	d001      	beq.n	800653c <HAL_ADC_ConfigChannel+0x184>
 8006538:	2312      	movs	r3, #18
 800653a:	e024      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 800653c:	2300      	movs	r3, #0
 800653e:	e022      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006540:	2311      	movs	r3, #17
 8006542:	e020      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006544:	2310      	movs	r3, #16
 8006546:	e01e      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006548:	230f      	movs	r3, #15
 800654a:	e01c      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 800654c:	230e      	movs	r3, #14
 800654e:	e01a      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006550:	230d      	movs	r3, #13
 8006552:	e018      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006554:	230c      	movs	r3, #12
 8006556:	e016      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006558:	230b      	movs	r3, #11
 800655a:	e014      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 800655c:	230a      	movs	r3, #10
 800655e:	e012      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006560:	2309      	movs	r3, #9
 8006562:	e010      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006564:	2308      	movs	r3, #8
 8006566:	e00e      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006568:	2307      	movs	r3, #7
 800656a:	e00c      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 800656c:	2306      	movs	r3, #6
 800656e:	e00a      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006570:	2305      	movs	r3, #5
 8006572:	e008      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006574:	2304      	movs	r3, #4
 8006576:	e006      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006578:	2303      	movs	r3, #3
 800657a:	e004      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 800657c:	2302      	movs	r3, #2
 800657e:	e002      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <HAL_ADC_ConfigChannel+0x1ce>
 8006584:	2300      	movs	r3, #0
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	6852      	ldr	r2, [r2, #4]
 800658a:	201f      	movs	r0, #31
 800658c:	4002      	ands	r2, r0
 800658e:	4093      	lsls	r3, r2
 8006590:	000a      	movs	r2, r1
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	089b      	lsrs	r3, r3, #2
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d808      	bhi.n	80065ba <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	001a      	movs	r2, r3
 80065b6:	f7ff fa77 	bl	8005aa8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	001a      	movs	r2, r3
 80065c8:	f7ff fab2 	bl	8005b30 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	db00      	blt.n	80065d6 <HAL_ADC_ConfigChannel+0x21e>
 80065d4:	e0bc      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065d6:	4b50      	ldr	r3, [pc, #320]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff fa13 	bl	8005a04 <LL_ADC_GetCommonPathInternalCh>
 80065de:	0003      	movs	r3, r0
 80065e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a4d      	ldr	r2, [pc, #308]	@ (800671c <HAL_ADC_ConfigChannel+0x364>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d122      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80065f4:	d11d      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2280      	movs	r2, #128	@ 0x80
 80065fa:	0412      	lsls	r2, r2, #16
 80065fc:	4313      	orrs	r3, r2
 80065fe:	4a46      	ldr	r2, [pc, #280]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 8006600:	0019      	movs	r1, r3
 8006602:	0010      	movs	r0, r2
 8006604:	f7ff f9ea 	bl	80059dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006608:	4b45      	ldr	r3, [pc, #276]	@ (8006720 <HAL_ADC_ConfigChannel+0x368>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4945      	ldr	r1, [pc, #276]	@ (8006724 <HAL_ADC_ConfigChannel+0x36c>)
 800660e:	0018      	movs	r0, r3
 8006610:	f7f9 fd78 	bl	8000104 <__udivsi3>
 8006614:	0003      	movs	r3, r0
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	0013      	movs	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	189b      	adds	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006622:	e002      	b.n	800662a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3b01      	subs	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f9      	bne.n	8006624 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006630:	e08e      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3c      	ldr	r2, [pc, #240]	@ (8006728 <HAL_ADC_ConfigChannel+0x370>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10e      	bne.n	800665a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	2380      	movs	r3, #128	@ 0x80
 8006640:	045b      	lsls	r3, r3, #17
 8006642:	4013      	ands	r3, r2
 8006644:	d109      	bne.n	800665a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2280      	movs	r2, #128	@ 0x80
 800664a:	0452      	lsls	r2, r2, #17
 800664c:	4313      	orrs	r3, r2
 800664e:	4a32      	ldr	r2, [pc, #200]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 8006650:	0019      	movs	r1, r3
 8006652:	0010      	movs	r0, r2
 8006654:	f7ff f9c2 	bl	80059dc <LL_ADC_SetCommonPathInternalCh>
 8006658:	e07a      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a33      	ldr	r2, [pc, #204]	@ (800672c <HAL_ADC_ConfigChannel+0x374>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d000      	beq.n	8006666 <HAL_ADC_ConfigChannel+0x2ae>
 8006664:	e074      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	2380      	movs	r3, #128	@ 0x80
 800666a:	03db      	lsls	r3, r3, #15
 800666c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800666e:	d000      	beq.n	8006672 <HAL_ADC_ConfigChannel+0x2ba>
 8006670:	e06e      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2280      	movs	r2, #128	@ 0x80
 8006676:	03d2      	lsls	r2, r2, #15
 8006678:	4313      	orrs	r3, r2
 800667a:	4a27      	ldr	r2, [pc, #156]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 800667c:	0019      	movs	r1, r3
 800667e:	0010      	movs	r0, r2
 8006680:	f7ff f9ac 	bl	80059dc <LL_ADC_SetCommonPathInternalCh>
 8006684:	e064      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	2380      	movs	r3, #128	@ 0x80
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	429a      	cmp	r2, r3
 8006690:	d004      	beq.n	800669c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006696:	4a1f      	ldr	r2, [pc, #124]	@ (8006714 <HAL_ADC_ConfigChannel+0x35c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d107      	bne.n	80066ac <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0019      	movs	r1, r3
 80066a6:	0010      	movs	r0, r2
 80066a8:	f7ff fa2f 	bl	8005b0a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	da4d      	bge.n	8006750 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066b4:	4b18      	ldr	r3, [pc, #96]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 80066b6:	0018      	movs	r0, r3
 80066b8:	f7ff f9a4 	bl	8005a04 <LL_ADC_GetCommonPathInternalCh>
 80066bc:	0003      	movs	r3, r0
 80066be:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a15      	ldr	r2, [pc, #84]	@ (800671c <HAL_ADC_ConfigChannel+0x364>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d108      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4a18      	ldr	r2, [pc, #96]	@ (8006730 <HAL_ADC_ConfigChannel+0x378>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	4a11      	ldr	r2, [pc, #68]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 80066d2:	0019      	movs	r1, r3
 80066d4:	0010      	movs	r0, r2
 80066d6:	f7ff f981 	bl	80059dc <LL_ADC_SetCommonPathInternalCh>
 80066da:	e039      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a11      	ldr	r2, [pc, #68]	@ (8006728 <HAL_ADC_ConfigChannel+0x370>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4a12      	ldr	r2, [pc, #72]	@ (8006734 <HAL_ADC_ConfigChannel+0x37c>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 80066ee:	0019      	movs	r1, r3
 80066f0:	0010      	movs	r0, r2
 80066f2:	f7ff f973 	bl	80059dc <LL_ADC_SetCommonPathInternalCh>
 80066f6:	e02b      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0b      	ldr	r2, [pc, #44]	@ (800672c <HAL_ADC_ConfigChannel+0x374>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d126      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4a0c      	ldr	r2, [pc, #48]	@ (8006738 <HAL_ADC_ConfigChannel+0x380>)
 8006706:	4013      	ands	r3, r2
 8006708:	4a03      	ldr	r2, [pc, #12]	@ (8006718 <HAL_ADC_ConfigChannel+0x360>)
 800670a:	0019      	movs	r1, r3
 800670c:	0010      	movs	r0, r2
 800670e:	f7ff f965 	bl	80059dc <LL_ADC_SetCommonPathInternalCh>
 8006712:	e01d      	b.n	8006750 <HAL_ADC_ConfigChannel+0x398>
 8006714:	80000004 	.word	0x80000004
 8006718:	40012708 	.word	0x40012708
 800671c:	b0001000 	.word	0xb0001000
 8006720:	20000440 	.word	0x20000440
 8006724:	00030d40 	.word	0x00030d40
 8006728:	b8004000 	.word	0xb8004000
 800672c:	b4002000 	.word	0xb4002000
 8006730:	ff7fffff 	.word	0xff7fffff
 8006734:	feffffff 	.word	0xfeffffff
 8006738:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006740:	2220      	movs	r2, #32
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006748:	2317      	movs	r3, #23
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	2201      	movs	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2254      	movs	r2, #84	@ 0x54
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006758:	2317      	movs	r3, #23
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	781b      	ldrb	r3, [r3, #0]
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b006      	add	sp, #24
 8006764:	bd80      	pop	{r7, pc}
 8006766:	46c0      	nop			@ (mov r8, r8)

08006768 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	0018      	movs	r0, r3
 8006776:	f7ff fa89 	bl	8005c8c <LL_ADC_REG_IsConversionOngoing>
 800677a:	1e03      	subs	r3, r0, #0
 800677c:	d031      	beq.n	80067e2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	0018      	movs	r0, r3
 8006784:	f7ff fa4d 	bl	8005c22 <LL_ADC_IsDisableOngoing>
 8006788:	1e03      	subs	r3, r0, #0
 800678a:	d104      	bne.n	8006796 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	0018      	movs	r0, r3
 8006792:	f7ff fa69 	bl	8005c68 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006796:	f7ff f917 	bl	80059c8 <HAL_GetTick>
 800679a:	0003      	movs	r3, r0
 800679c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800679e:	e01a      	b.n	80067d6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80067a0:	f7ff f912 	bl	80059c8 <HAL_GetTick>
 80067a4:	0002      	movs	r2, r0
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d913      	bls.n	80067d6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2204      	movs	r2, #4
 80067b6:	4013      	ands	r3, r2
 80067b8:	d00d      	beq.n	80067d6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067be:	2210      	movs	r2, #16
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ca:	2201      	movs	r2, #1
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e006      	b.n	80067e4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2204      	movs	r2, #4
 80067de:	4013      	ands	r3, r2
 80067e0:	d1de      	bne.n	80067a0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b004      	add	sp, #16
 80067ea:	bd80      	pop	{r7, pc}

080067ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff f9ff 	bl	8005c00 <LL_ADC_IsEnabled>
 8006802:	1e03      	subs	r3, r0, #0
 8006804:	d000      	beq.n	8006808 <ADC_Enable+0x1c>
 8006806:	e069      	b.n	80068dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	4a36      	ldr	r2, [pc, #216]	@ (80068e8 <ADC_Enable+0xfc>)
 8006810:	4013      	ands	r3, r2
 8006812:	d00d      	beq.n	8006830 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006818:	2210      	movs	r2, #16
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006824:	2201      	movs	r2, #1
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e056      	b.n	80068de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	0018      	movs	r0, r3
 8006836:	f7ff f9bf 	bl	8005bb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800683a:	4b2c      	ldr	r3, [pc, #176]	@ (80068ec <ADC_Enable+0x100>)
 800683c:	0018      	movs	r0, r3
 800683e:	f7ff f8e1 	bl	8005a04 <LL_ADC_GetCommonPathInternalCh>
 8006842:	0002      	movs	r2, r0
 8006844:	2380      	movs	r3, #128	@ 0x80
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	4013      	ands	r3, r2
 800684a:	d00f      	beq.n	800686c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800684c:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <ADC_Enable+0x104>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4928      	ldr	r1, [pc, #160]	@ (80068f4 <ADC_Enable+0x108>)
 8006852:	0018      	movs	r0, r3
 8006854:	f7f9 fc56 	bl	8000104 <__udivsi3>
 8006858:	0003      	movs	r3, r0
 800685a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800685c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800685e:	e002      	b.n	8006866 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3b01      	subs	r3, #1
 8006864:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f9      	bne.n	8006860 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7e5b      	ldrb	r3, [r3, #25]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d033      	beq.n	80068dc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006874:	f7ff f8a8 	bl	80059c8 <HAL_GetTick>
 8006878:	0003      	movs	r3, r0
 800687a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687c:	e027      	b.n	80068ce <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	0018      	movs	r0, r3
 8006884:	f7ff f9bc 	bl	8005c00 <LL_ADC_IsEnabled>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d104      	bne.n	8006896 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	0018      	movs	r0, r3
 8006892:	f7ff f991 	bl	8005bb8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006896:	f7ff f897 	bl	80059c8 <HAL_GetTick>
 800689a:	0002      	movs	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d914      	bls.n	80068ce <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2201      	movs	r2, #1
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d00d      	beq.n	80068ce <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	2210      	movs	r2, #16
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c2:	2201      	movs	r2, #1
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e007      	b.n	80068de <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2201      	movs	r2, #1
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d1d0      	bne.n	800687e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b004      	add	sp, #16
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			@ (mov r8, r8)
 80068e8:	80000017 	.word	0x80000017
 80068ec:	40012708 	.word	0x40012708
 80068f0:	20000440 	.word	0x20000440
 80068f4:	00030d40 	.word	0x00030d40

080068f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff f98c 	bl	8005c22 <LL_ADC_IsDisableOngoing>
 800690a:	0003      	movs	r3, r0
 800690c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	0018      	movs	r0, r3
 8006914:	f7ff f974 	bl	8005c00 <LL_ADC_IsEnabled>
 8006918:	1e03      	subs	r3, r0, #0
 800691a:	d046      	beq.n	80069aa <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d143      	bne.n	80069aa <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2205      	movs	r2, #5
 800692a:	4013      	ands	r3, r2
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10d      	bne.n	800694c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	0018      	movs	r0, r3
 8006936:	f7ff f951 	bl	8005bdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2203      	movs	r2, #3
 8006940:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006942:	f7ff f841 	bl	80059c8 <HAL_GetTick>
 8006946:	0003      	movs	r3, r0
 8006948:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800694a:	e028      	b.n	800699e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006950:	2210      	movs	r2, #16
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695c:	2201      	movs	r2, #1
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e021      	b.n	80069ac <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006968:	f7ff f82e 	bl	80059c8 <HAL_GetTick>
 800696c:	0002      	movs	r2, r0
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d913      	bls.n	800699e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2201      	movs	r2, #1
 800697e:	4013      	ands	r3, r2
 8006980:	d00d      	beq.n	800699e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006986:	2210      	movs	r2, #16
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006992:	2201      	movs	r2, #1
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e006      	b.n	80069ac <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2201      	movs	r2, #1
 80069a6:	4013      	ands	r3, r2
 80069a8:	d1de      	bne.n	8006968 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	0018      	movs	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b004      	add	sp, #16
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	2250      	movs	r2, #80	@ 0x50
 80069c8:	4013      	ands	r3, r2
 80069ca:	d142      	bne.n	8006a52 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d0:	2280      	movs	r2, #128	@ 0x80
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	0018      	movs	r0, r3
 80069e0:	f7ff f851 	bl	8005a86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069e4:	1e03      	subs	r3, r0, #0
 80069e6:	d02e      	beq.n	8006a46 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	7e9b      	ldrb	r3, [r3, #26]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d12a      	bne.n	8006a46 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2208      	movs	r2, #8
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d123      	bne.n	8006a46 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f7ff f942 	bl	8005c8c <LL_ADC_REG_IsConversionOngoing>
 8006a08:	1e03      	subs	r3, r0, #0
 8006a0a:	d110      	bne.n	8006a2e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	210c      	movs	r1, #12
 8006a18:	438a      	bics	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <ADC_DMAConvCplt+0xc8>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	2201      	movs	r2, #1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a2c:	e00b      	b.n	8006a46 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a32:	2220      	movs	r2, #32
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3e:	2201      	movs	r2, #1
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	0010      	movs	r0, r2
 8006a4e:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a50:	e010      	b.n	8006a74 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a56:	2210      	movs	r2, #16
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d005      	beq.n	8006a68 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	0010      	movs	r0, r2
 8006a64:	4798      	blx	r3
}
 8006a66:	e005      	b.n	8006a74 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	0010      	movs	r0, r2
 8006a72:	4798      	blx	r3
}
 8006a74:	46c0      	nop			@ (mov r8, r8)
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b004      	add	sp, #16
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	fffffefe 	.word	0xfffffefe

08006a80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	0010      	movs	r0, r2
 8006a96:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a98:	46c0      	nop			@ (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab2:	2240      	movs	r2, #64	@ 0x40
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abe:	2204      	movs	r2, #4
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	0010      	movs	r0, r2
 8006ace:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ad0:	46c0      	nop			@ (mov r8, r8)
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b004      	add	sp, #16
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <LL_ADC_GetCommonClock>:
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	23f0      	movs	r3, #240	@ 0xf0
 8006ae6:	039b      	lsls	r3, r3, #14
 8006ae8:	4013      	ands	r3, r2
}
 8006aea:	0018      	movs	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b002      	add	sp, #8
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <LL_ADC_GetClock>:
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	0f9b      	lsrs	r3, r3, #30
 8006b00:	079b      	lsls	r3, r3, #30
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b002      	add	sp, #8
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <LL_ADC_SetCalibrationFactor>:
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	22b4      	movs	r2, #180	@ 0xb4
 8006b18:	589b      	ldr	r3, [r3, r2]
 8006b1a:	227f      	movs	r2, #127	@ 0x7f
 8006b1c:	4393      	bics	r3, r2
 8006b1e:	001a      	movs	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	21b4      	movs	r1, #180	@ 0xb4
 8006b28:	505a      	str	r2, [r3, r1]
}
 8006b2a:	46c0      	nop			@ (mov r8, r8)
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b002      	add	sp, #8
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <LL_ADC_GetCalibrationFactor>:
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	22b4      	movs	r2, #180	@ 0xb4
 8006b3e:	589b      	ldr	r3, [r3, r2]
 8006b40:	227f      	movs	r2, #127	@ 0x7f
 8006b42:	4013      	ands	r3, r2
}
 8006b44:	0018      	movs	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <LL_ADC_Enable>:
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	4a04      	ldr	r2, [pc, #16]	@ (8006b6c <LL_ADC_Enable+0x20>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
}
 8006b64:	46c0      	nop			@ (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	7fffffe8 	.word	0x7fffffe8

08006b70 <LL_ADC_Disable>:
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	@ (8006b90 <LL_ADC_Disable+0x20>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2202      	movs	r2, #2
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	609a      	str	r2, [r3, #8]
}
 8006b88:	46c0      	nop			@ (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b002      	add	sp, #8
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	7fffffe8 	.word	0x7fffffe8

08006b94 <LL_ADC_IsEnabled>:
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <LL_ADC_IsEnabled+0x18>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <LL_ADC_IsEnabled+0x1a>
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b002      	add	sp, #8
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <LL_ADC_StartCalibration>:
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a05      	ldr	r2, [pc, #20]	@ (8006bdc <LL_ADC_StartCalibration+0x24>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2280      	movs	r2, #128	@ 0x80
 8006bca:	0612      	lsls	r2, r2, #24
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
}
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b002      	add	sp, #8
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	7fffffe8 	.word	0x7fffffe8

08006be0 <LL_ADC_IsCalibrationOnGoing>:
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	0fdb      	lsrs	r3, r3, #31
 8006bee:	07da      	lsls	r2, r3, #31
 8006bf0:	2380      	movs	r3, #128	@ 0x80
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d101      	bne.n	8006bfc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	0018      	movs	r0, r3
 8006c00:	46bd      	mov	sp, r7
 8006c02:	b002      	add	sp, #8
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b08b      	sub	sp, #44	@ 0x2c
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2254      	movs	r2, #84	@ 0x54
 8006c1c:	5c9b      	ldrb	r3, [r3, r2]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_ADCEx_Calibration_Start+0x1e>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e0dd      	b.n	8006de2 <HAL_ADCEx_Calibration_Start+0x1da>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2254      	movs	r2, #84	@ 0x54
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006c2e:	231f      	movs	r3, #31
 8006c30:	18fc      	adds	r4, r7, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7ff fe5f 	bl	80068f8 <ADC_Disable>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	0018      	movs	r0, r3
 8006c44:	f7ff ffa6 	bl	8006b94 <LL_ADC_IsEnabled>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	d000      	beq.n	8006c4e <HAL_ADCEx_Calibration_Start+0x46>
 8006c4c:	e0bc      	b.n	8006dc8 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	4a66      	ldr	r2, [pc, #408]	@ (8006dec <HAL_ADCEx_Calibration_Start+0x1e4>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	2202      	movs	r2, #2
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4a62      	ldr	r2, [pc, #392]	@ (8006df0 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	495f      	ldr	r1, [pc, #380]	@ (8006df4 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8006c76:	400a      	ands	r2, r1
 8006c78:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7e:	e02d      	b.n	8006cdc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f7ff ff97 	bl	8006bb8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c8a:	e014      	b.n	8006cb6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a58      	ldr	r2, [pc, #352]	@ (8006df8 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d90d      	bls.n	8006cb6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9e:	2212      	movs	r2, #18
 8006ca0:	4393      	bics	r3, r2
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2254      	movs	r2, #84	@ 0x54
 8006cae:	2100      	movs	r1, #0
 8006cb0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e095      	b.n	8006de2 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7ff ff90 	bl	8006be0 <LL_ADC_IsCalibrationOnGoing>
 8006cc0:	1e03      	subs	r3, r0, #0
 8006cc2:	d1e3      	bne.n	8006c8c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7ff ff32 	bl	8006b32 <LL_ADC_GetCalibrationFactor>
 8006cce:	0002      	movs	r2, r0
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	189b      	adds	r3, r3, r2
 8006cd4:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	3301      	adds	r3, #1
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	d9ce      	bls.n	8006c80 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006ce2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ce4:	6a38      	ldr	r0, [r7, #32]
 8006ce6:	f7f9 fa0d 	bl	8000104 <__udivsi3>
 8006cea:	0003      	movs	r3, r0
 8006cec:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f7ff ff2a 	bl	8006b4c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7ff fef8 	bl	8006af2 <LL_ADC_GetClock>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	d11b      	bne.n	8006d3e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d06:	4b3d      	ldr	r3, [pc, #244]	@ (8006dfc <HAL_ADCEx_Calibration_Start+0x1f4>)
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7ff fee5 	bl	8006ad8 <LL_ADC_GetCommonClock>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	23e0      	movs	r3, #224	@ 0xe0
 8006d16:	035b      	lsls	r3, r3, #13
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d310      	bcc.n	8006d3e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	0c9b      	lsrs	r3, r3, #18
 8006d20:	3b03      	subs	r3, #3
 8006d22:	2201      	movs	r2, #1
 8006d24:	409a      	lsls	r2, r3
 8006d26:	0013      	movs	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8006d30:	e002      	b.n	8006d38 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f9      	bne.n	8006d32 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	0011      	movs	r1, r2
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7ff fedf 	bl	8006b0a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff ff0d 	bl	8006b70 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d56:	f7fe fe37 	bl	80059c8 <HAL_GetTick>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d5e:	e01b      	b.n	8006d98 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d60:	f7fe fe32 	bl	80059c8 <HAL_GetTick>
 8006d64:	0002      	movs	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d914      	bls.n	8006d98 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7ff ff0e 	bl	8006b94 <LL_ADC_IsEnabled>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d00d      	beq.n	8006d98 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d80:	2210      	movs	r2, #16
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e024      	b.n	8006de2 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f7ff fef9 	bl	8006b94 <LL_ADC_IsEnabled>
 8006da2:	1e03      	subs	r3, r0, #0
 8006da4:	d1dc      	bne.n	8006d60 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68d9      	ldr	r1, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dba:	2203      	movs	r2, #3
 8006dbc:	4393      	bics	r3, r2
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dc6:	e005      	b.n	8006dd4 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dcc:	2210      	movs	r2, #16
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2254      	movs	r2, #84	@ 0x54
 8006dd8:	2100      	movs	r1, #0
 8006dda:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006ddc:	231f      	movs	r3, #31
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	781b      	ldrb	r3, [r3, #0]
}
 8006de2:	0018      	movs	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b00b      	add	sp, #44	@ 0x2c
 8006de8:	bd90      	pop	{r4, r7, pc}
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	fffffefd 	.word	0xfffffefd
 8006df0:	00008003 	.word	0x00008003
 8006df4:	ffff7ffc 	.word	0xffff7ffc
 8006df8:	0002f1ff 	.word	0x0002f1ff
 8006dfc:	40012708 	.word	0x40012708

08006e00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006e08:	46c0      	nop			@ (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006e18:	46c0      	nop			@ (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b002      	add	sp, #8
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b002      	add	sp, #8
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	0002      	movs	r2, r0
 8006e38:	1dfb      	adds	r3, r7, #7
 8006e3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e3c:	1dfb      	adds	r3, r7, #7
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e42:	d809      	bhi.n	8006e58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e44:	1dfb      	adds	r3, r7, #7
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	001a      	movs	r2, r3
 8006e4a:	231f      	movs	r3, #31
 8006e4c:	401a      	ands	r2, r3
 8006e4e:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <__NVIC_EnableIRQ+0x30>)
 8006e50:	2101      	movs	r1, #1
 8006e52:	4091      	lsls	r1, r2
 8006e54:	000a      	movs	r2, r1
 8006e56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006e58:	46c0      	nop			@ (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b002      	add	sp, #8
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000e100 	.word	0xe000e100

08006e64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	1dfb      	adds	r3, r7, #7
 8006e6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e76:	d810      	bhi.n	8006e9a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e78:	1dfb      	adds	r3, r7, #7
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	001a      	movs	r2, r3
 8006e7e:	231f      	movs	r3, #31
 8006e80:	4013      	ands	r3, r2
 8006e82:	4908      	ldr	r1, [pc, #32]	@ (8006ea4 <__NVIC_DisableIRQ+0x40>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	409a      	lsls	r2, r3
 8006e88:	0013      	movs	r3, r2
 8006e8a:	2280      	movs	r2, #128	@ 0x80
 8006e8c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e8e:	f3bf 8f4f 	dsb	sy
}
 8006e92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006e94:	f3bf 8f6f 	isb	sy
}
 8006e98:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b002      	add	sp, #8
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	46c0      	nop			@ (mov r8, r8)
 8006ea4:	e000e100 	.word	0xe000e100

08006ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ea8:	b590      	push	{r4, r7, lr}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	0002      	movs	r2, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	1dfb      	adds	r3, r7, #7
 8006eb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006eb6:	1dfb      	adds	r3, r7, #7
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ebc:	d828      	bhi.n	8006f10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8006f7c <__NVIC_SetPriority+0xd4>)
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b25b      	sxtb	r3, r3
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	33c0      	adds	r3, #192	@ 0xc0
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	589b      	ldr	r3, [r3, r2]
 8006ece:	1dfa      	adds	r2, r7, #7
 8006ed0:	7812      	ldrb	r2, [r2, #0]
 8006ed2:	0011      	movs	r1, r2
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	400a      	ands	r2, r1
 8006ed8:	00d2      	lsls	r2, r2, #3
 8006eda:	21ff      	movs	r1, #255	@ 0xff
 8006edc:	4091      	lsls	r1, r2
 8006ede:	000a      	movs	r2, r1
 8006ee0:	43d2      	mvns	r2, r2
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	019b      	lsls	r3, r3, #6
 8006eea:	22ff      	movs	r2, #255	@ 0xff
 8006eec:	401a      	ands	r2, r3
 8006eee:	1dfb      	adds	r3, r7, #7
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	4003      	ands	r3, r0
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006efc:	481f      	ldr	r0, [pc, #124]	@ (8006f7c <__NVIC_SetPriority+0xd4>)
 8006efe:	1dfb      	adds	r3, r7, #7
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b25b      	sxtb	r3, r3
 8006f04:	089b      	lsrs	r3, r3, #2
 8006f06:	430a      	orrs	r2, r1
 8006f08:	33c0      	adds	r3, #192	@ 0xc0
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006f0e:	e031      	b.n	8006f74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f10:	4a1b      	ldr	r2, [pc, #108]	@ (8006f80 <__NVIC_SetPriority+0xd8>)
 8006f12:	1dfb      	adds	r3, r7, #7
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	0019      	movs	r1, r3
 8006f18:	230f      	movs	r3, #15
 8006f1a:	400b      	ands	r3, r1
 8006f1c:	3b08      	subs	r3, #8
 8006f1e:	089b      	lsrs	r3, r3, #2
 8006f20:	3306      	adds	r3, #6
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	18d3      	adds	r3, r2, r3
 8006f26:	3304      	adds	r3, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	1dfa      	adds	r2, r7, #7
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	0011      	movs	r1, r2
 8006f30:	2203      	movs	r2, #3
 8006f32:	400a      	ands	r2, r1
 8006f34:	00d2      	lsls	r2, r2, #3
 8006f36:	21ff      	movs	r1, #255	@ 0xff
 8006f38:	4091      	lsls	r1, r2
 8006f3a:	000a      	movs	r2, r1
 8006f3c:	43d2      	mvns	r2, r2
 8006f3e:	401a      	ands	r2, r3
 8006f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	019b      	lsls	r3, r3, #6
 8006f46:	22ff      	movs	r2, #255	@ 0xff
 8006f48:	401a      	ands	r2, r3
 8006f4a:	1dfb      	adds	r3, r7, #7
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	2303      	movs	r3, #3
 8006f52:	4003      	ands	r3, r0
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f58:	4809      	ldr	r0, [pc, #36]	@ (8006f80 <__NVIC_SetPriority+0xd8>)
 8006f5a:	1dfb      	adds	r3, r7, #7
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	001c      	movs	r4, r3
 8006f60:	230f      	movs	r3, #15
 8006f62:	4023      	ands	r3, r4
 8006f64:	3b08      	subs	r3, #8
 8006f66:	089b      	lsrs	r3, r3, #2
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	3306      	adds	r3, #6
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	18c3      	adds	r3, r0, r3
 8006f70:	3304      	adds	r3, #4
 8006f72:	601a      	str	r2, [r3, #0]
}
 8006f74:	46c0      	nop			@ (mov r8, r8)
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b003      	add	sp, #12
 8006f7a:	bd90      	pop	{r4, r7, pc}
 8006f7c:	e000e100 	.word	0xe000e100
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	1e5a      	subs	r2, r3, #1
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	045b      	lsls	r3, r3, #17
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d301      	bcc.n	8006f9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e010      	b.n	8006fbe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <SysTick_Config+0x44>)
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	3a01      	subs	r2, #1
 8006fa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	425b      	negs	r3, r3
 8006fa8:	2103      	movs	r1, #3
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff ff7c 	bl	8006ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <SysTick_Config+0x44>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fb6:	4b04      	ldr	r3, [pc, #16]	@ (8006fc8 <SysTick_Config+0x44>)
 8006fb8:	2207      	movs	r2, #7
 8006fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b002      	add	sp, #8
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	e000e010 	.word	0xe000e010

08006fcc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	210f      	movs	r1, #15
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	1c02      	adds	r2, r0, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	187b      	adds	r3, r7, r1
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	0011      	movs	r1, r2
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7ff ff5d 	bl	8006ea8 <__NVIC_SetPriority>
}
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b004      	add	sp, #16
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	0002      	movs	r2, r0
 8006ffe:	1dfb      	adds	r3, r7, #7
 8007000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b25b      	sxtb	r3, r3
 8007008:	0018      	movs	r0, r3
 800700a:	f7ff ff11 	bl	8006e30 <__NVIC_EnableIRQ>
}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	46bd      	mov	sp, r7
 8007012:	b002      	add	sp, #8
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	0002      	movs	r2, r0
 800701e:	1dfb      	adds	r3, r7, #7
 8007020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007022:	1dfb      	adds	r3, r7, #7
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b25b      	sxtb	r3, r3
 8007028:	0018      	movs	r0, r3
 800702a:	f7ff ff1b 	bl	8006e64 <__NVIC_DisableIRQ>
}
 800702e:	46c0      	nop			@ (mov r8, r8)
 8007030:	46bd      	mov	sp, r7
 8007032:	b002      	add	sp, #8
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0018      	movs	r0, r3
 8007042:	f7ff ff9f 	bl	8006f84 <SysTick_Config>
 8007046:	0003      	movs	r3, r0
}
 8007048:	0018      	movs	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	b002      	add	sp, #8
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e077      	b.n	8007152 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a3d      	ldr	r2, [pc, #244]	@ (800715c <HAL_DMA_Init+0x10c>)
 8007068:	4694      	mov	ip, r2
 800706a:	4463      	add	r3, ip
 800706c:	2114      	movs	r1, #20
 800706e:	0018      	movs	r0, r3
 8007070:	f7f9 f848 	bl	8000104 <__udivsi3>
 8007074:	0003      	movs	r3, r0
 8007076:	009a      	lsls	r2, r3, #2
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2225      	movs	r2, #37	@ 0x25
 8007080:	2102      	movs	r1, #2
 8007082:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4934      	ldr	r1, [pc, #208]	@ (8007160 <HAL_DMA_Init+0x110>)
 8007090:	400a      	ands	r2, r1
 8007092:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6819      	ldr	r1, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 fa8d 	bl	80075ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	2380      	movs	r3, #128	@ 0x80
 80070d8:	01db      	lsls	r3, r3, #7
 80070da:	429a      	cmp	r2, r3
 80070dc:	d102      	bne.n	80070e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ec:	213f      	movs	r1, #63	@ 0x3f
 80070ee:	400a      	ands	r2, r1
 80070f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80070fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <HAL_DMA_Init+0xd8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b04      	cmp	r3, #4
 800710a:	d80d      	bhi.n	8007128 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0018      	movs	r0, r3
 8007110:	f000 fa98 	bl	8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	e008      	b.n	800713a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2225      	movs	r2, #37	@ 0x25
 8007144:	2101      	movs	r1, #1
 8007146:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2224      	movs	r2, #36	@ 0x24
 800714c:	2100      	movs	r1, #0
 800714e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	0018      	movs	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	b002      	add	sp, #8
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	bffdfff8 	.word	0xbffdfff8
 8007160:	ffff800f 	.word	0xffff800f

08007164 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007172:	2317      	movs	r3, #23
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2224      	movs	r2, #36	@ 0x24
 800717e:	5c9b      	ldrb	r3, [r3, r2]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_DMA_Start_IT+0x24>
 8007184:	2302      	movs	r3, #2
 8007186:	e06f      	b.n	8007268 <HAL_DMA_Start_IT+0x104>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2224      	movs	r2, #36	@ 0x24
 800718c:	2101      	movs	r1, #1
 800718e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2225      	movs	r2, #37	@ 0x25
 8007194:	5c9b      	ldrb	r3, [r3, r2]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d157      	bne.n	800724c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2225      	movs	r2, #37	@ 0x25
 80071a0:	2102      	movs	r1, #2
 80071a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2101      	movs	r1, #1
 80071b6:	438a      	bics	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f9d3 	bl	800756c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	210e      	movs	r1, #14
 80071da:	430a      	orrs	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e00f      	b.n	8007200 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2104      	movs	r1, #4
 80071ec:	438a      	bics	r2, r1
 80071ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	210a      	movs	r1, #10
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	2380      	movs	r3, #128	@ 0x80
 8007208:	025b      	lsls	r3, r3, #9
 800720a:	4013      	ands	r3, r2
 800720c:	d008      	beq.n	8007220 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007218:	2180      	movs	r1, #128	@ 0x80
 800721a:	0049      	lsls	r1, r1, #1
 800721c:	430a      	orrs	r2, r1
 800721e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007232:	2180      	movs	r1, #128	@ 0x80
 8007234:	0049      	lsls	r1, r1, #1
 8007236:	430a      	orrs	r2, r1
 8007238:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2101      	movs	r1, #1
 8007246:	430a      	orrs	r2, r1
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	e00a      	b.n	8007262 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2280      	movs	r2, #128	@ 0x80
 8007250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2224      	movs	r2, #36	@ 0x24
 8007256:	2100      	movs	r1, #0
 8007258:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800725a:	2317      	movs	r3, #23
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007262:	2317      	movs	r3, #23
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	781b      	ldrb	r3, [r3, #0]
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b006      	add	sp, #24
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e050      	b.n	8007324 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2225      	movs	r2, #37	@ 0x25
 8007286:	5c9b      	ldrb	r3, [r3, r2]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d008      	beq.n	80072a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2224      	movs	r2, #36	@ 0x24
 8007298:	2100      	movs	r1, #0
 800729a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e041      	b.n	8007324 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	210e      	movs	r1, #14
 80072ac:	438a      	bics	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	491c      	ldr	r1, [pc, #112]	@ (800732c <HAL_DMA_Abort+0xbc>)
 80072bc:	400a      	ands	r2, r1
 80072be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2101      	movs	r1, #1
 80072cc:	438a      	bics	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80072d0:	4b17      	ldr	r3, [pc, #92]	@ (8007330 <HAL_DMA_Abort+0xc0>)
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	221c      	movs	r2, #28
 80072da:	4013      	ands	r3, r2
 80072dc:	2201      	movs	r2, #1
 80072de:	409a      	lsls	r2, r3
 80072e0:	4b13      	ldr	r3, [pc, #76]	@ (8007330 <HAL_DMA_Abort+0xc0>)
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80072ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007302:	490a      	ldr	r1, [pc, #40]	@ (800732c <HAL_DMA_Abort+0xbc>)
 8007304:	400a      	ands	r2, r1
 8007306:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007310:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2225      	movs	r2, #37	@ 0x25
 8007316:	2101      	movs	r1, #1
 8007318:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2224      	movs	r2, #36	@ 0x24
 800731e:	2100      	movs	r1, #0
 8007320:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	0018      	movs	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	b002      	add	sp, #8
 800732a:	bd80      	pop	{r7, pc}
 800732c:	fffffeff 	.word	0xfffffeff
 8007330:	40020000 	.word	0x40020000

08007334 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800733c:	210f      	movs	r1, #15
 800733e:	187b      	adds	r3, r7, r1
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2225      	movs	r2, #37	@ 0x25
 8007348:	5c9b      	ldrb	r3, [r3, r2]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d006      	beq.n	800735e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2204      	movs	r2, #4
 8007354:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007356:	187b      	adds	r3, r7, r1
 8007358:	2201      	movs	r2, #1
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	e049      	b.n	80073f2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	210e      	movs	r1, #14
 800736a:	438a      	bics	r2, r1
 800736c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2101      	movs	r1, #1
 800737a:	438a      	bics	r2, r1
 800737c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	491d      	ldr	r1, [pc, #116]	@ (8007400 <HAL_DMA_Abort_IT+0xcc>)
 800738a:	400a      	ands	r2, r1
 800738c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800738e:	4b1d      	ldr	r3, [pc, #116]	@ (8007404 <HAL_DMA_Abort_IT+0xd0>)
 8007390:	6859      	ldr	r1, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	221c      	movs	r2, #28
 8007398:	4013      	ands	r3, r2
 800739a:	2201      	movs	r2, #1
 800739c:	409a      	lsls	r2, r3
 800739e:	4b19      	ldr	r3, [pc, #100]	@ (8007404 <HAL_DMA_Abort_IT+0xd0>)
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80073ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00c      	beq.n	80073d0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c0:	490f      	ldr	r1, [pc, #60]	@ (8007400 <HAL_DMA_Abort_IT+0xcc>)
 80073c2:	400a      	ands	r2, r1
 80073c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80073ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2225      	movs	r2, #37	@ 0x25
 80073d4:	2101      	movs	r1, #1
 80073d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2224      	movs	r2, #36	@ 0x24
 80073dc:	2100      	movs	r1, #0
 80073de:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	0010      	movs	r0, r2
 80073f0:	4798      	blx	r3
    }
  }
  return status;
 80073f2:	230f      	movs	r3, #15
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	781b      	ldrb	r3, [r3, #0]
}
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b004      	add	sp, #16
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	fffffeff 	.word	0xfffffeff
 8007404:	40020000 	.word	0x40020000

08007408 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007410:	4b55      	ldr	r3, [pc, #340]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	221c      	movs	r2, #28
 8007424:	4013      	ands	r3, r2
 8007426:	2204      	movs	r2, #4
 8007428:	409a      	lsls	r2, r3
 800742a:	0013      	movs	r3, r2
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4013      	ands	r3, r2
 8007430:	d027      	beq.n	8007482 <HAL_DMA_IRQHandler+0x7a>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2204      	movs	r2, #4
 8007436:	4013      	ands	r3, r2
 8007438:	d023      	beq.n	8007482 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2220      	movs	r2, #32
 8007442:	4013      	ands	r3, r2
 8007444:	d107      	bne.n	8007456 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2104      	movs	r1, #4
 8007452:	438a      	bics	r2, r1
 8007454:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007456:	4b44      	ldr	r3, [pc, #272]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	221c      	movs	r2, #28
 8007460:	4013      	ands	r3, r2
 8007462:	2204      	movs	r2, #4
 8007464:	409a      	lsls	r2, r3
 8007466:	4b40      	ldr	r3, [pc, #256]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	2b00      	cmp	r3, #0
 8007472:	d100      	bne.n	8007476 <HAL_DMA_IRQHandler+0x6e>
 8007474:	e073      	b.n	800755e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	0010      	movs	r0, r2
 800747e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007480:	e06d      	b.n	800755e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007486:	221c      	movs	r2, #28
 8007488:	4013      	ands	r3, r2
 800748a:	2202      	movs	r2, #2
 800748c:	409a      	lsls	r2, r3
 800748e:	0013      	movs	r3, r2
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4013      	ands	r3, r2
 8007494:	d02e      	beq.n	80074f4 <HAL_DMA_IRQHandler+0xec>
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2202      	movs	r2, #2
 800749a:	4013      	ands	r3, r2
 800749c:	d02a      	beq.n	80074f4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2220      	movs	r2, #32
 80074a6:	4013      	ands	r3, r2
 80074a8:	d10b      	bne.n	80074c2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	210a      	movs	r1, #10
 80074b6:	438a      	bics	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2225      	movs	r2, #37	@ 0x25
 80074be:	2101      	movs	r1, #1
 80074c0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80074c2:	4b29      	ldr	r3, [pc, #164]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 80074c4:	6859      	ldr	r1, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	221c      	movs	r2, #28
 80074cc:	4013      	ands	r3, r2
 80074ce:	2202      	movs	r2, #2
 80074d0:	409a      	lsls	r2, r3
 80074d2:	4b25      	ldr	r3, [pc, #148]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 80074d4:	430a      	orrs	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2224      	movs	r2, #36	@ 0x24
 80074dc:	2100      	movs	r1, #0
 80074de:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d03a      	beq.n	800755e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	0010      	movs	r0, r2
 80074f0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80074f2:	e034      	b.n	800755e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f8:	221c      	movs	r2, #28
 80074fa:	4013      	ands	r3, r2
 80074fc:	2208      	movs	r2, #8
 80074fe:	409a      	lsls	r2, r3
 8007500:	0013      	movs	r3, r2
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4013      	ands	r3, r2
 8007506:	d02b      	beq.n	8007560 <HAL_DMA_IRQHandler+0x158>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2208      	movs	r2, #8
 800750c:	4013      	ands	r3, r2
 800750e:	d027      	beq.n	8007560 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	210e      	movs	r1, #14
 800751c:	438a      	bics	r2, r1
 800751e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007520:	4b11      	ldr	r3, [pc, #68]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 8007522:	6859      	ldr	r1, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007528:	221c      	movs	r2, #28
 800752a:	4013      	ands	r3, r2
 800752c:	2201      	movs	r2, #1
 800752e:	409a      	lsls	r2, r3
 8007530:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <HAL_DMA_IRQHandler+0x160>)
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2225      	movs	r2, #37	@ 0x25
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	@ 0x24
 8007548:	2100      	movs	r1, #0
 800754a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	0010      	movs	r0, r2
 800755c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	46c0      	nop			@ (mov r8, r8)
}
 8007562:	46bd      	mov	sp, r7
 8007564:	b004      	add	sp, #16
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40020000 	.word	0x40020000

0800756c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007582:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007594:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007596:	4b14      	ldr	r3, [pc, #80]	@ (80075e8 <DMA_SetConfig+0x7c>)
 8007598:	6859      	ldr	r1, [r3, #4]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759e:	221c      	movs	r2, #28
 80075a0:	4013      	ands	r3, r2
 80075a2:	2201      	movs	r2, #1
 80075a4:	409a      	lsls	r2, r3
 80075a6:	4b10      	ldr	r3, [pc, #64]	@ (80075e8 <DMA_SetConfig+0x7c>)
 80075a8:	430a      	orrs	r2, r1
 80075aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b10      	cmp	r3, #16
 80075ba:	d108      	bne.n	80075ce <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80075cc:	e007      	b.n	80075de <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]
}
 80075de:	46c0      	nop			@ (mov r8, r8)
 80075e0:	46bd      	mov	sp, r7
 80075e2:	b004      	add	sp, #16
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	46c0      	nop			@ (mov r8, r8)
 80075e8:	40020000 	.word	0x40020000

080075ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	089b      	lsrs	r3, r3, #2
 80075fa:	4a10      	ldr	r2, [pc, #64]	@ (800763c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80075fc:	4694      	mov	ip, r2
 80075fe:	4463      	add	r3, ip
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	001a      	movs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	001a      	movs	r2, r3
 800760e:	23ff      	movs	r3, #255	@ 0xff
 8007610:	4013      	ands	r3, r2
 8007612:	3b08      	subs	r3, #8
 8007614:	2114      	movs	r1, #20
 8007616:	0018      	movs	r0, r3
 8007618:	f7f8 fd74 	bl	8000104 <__udivsi3>
 800761c:	0003      	movs	r3, r0
 800761e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a07      	ldr	r2, [pc, #28]	@ (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007624:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	221f      	movs	r2, #31
 800762a:	4013      	ands	r3, r2
 800762c:	2201      	movs	r2, #1
 800762e:	409a      	lsls	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007634:	46c0      	nop			@ (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b004      	add	sp, #16
 800763a:	bd80      	pop	{r7, pc}
 800763c:	10008200 	.word	0x10008200
 8007640:	40020880 	.word	0x40020880

08007644 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	223f      	movs	r2, #63	@ 0x3f
 8007652:	4013      	ands	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a0a      	ldr	r2, [pc, #40]	@ (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800765a:	4694      	mov	ip, r2
 800765c:	4463      	add	r3, ip
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	001a      	movs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a07      	ldr	r2, [pc, #28]	@ (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800766a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3b01      	subs	r3, #1
 8007670:	2203      	movs	r2, #3
 8007672:	4013      	ands	r3, r2
 8007674:	2201      	movs	r2, #1
 8007676:	409a      	lsls	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800767c:	46c0      	nop			@ (mov r8, r8)
 800767e:	46bd      	mov	sp, r7
 8007680:	b004      	add	sp, #16
 8007682:	bd80      	pop	{r7, pc}
 8007684:	1000823f 	.word	0x1000823f
 8007688:	40020940 	.word	0x40020940

0800768c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800769a:	e147      	b.n	800792c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2101      	movs	r1, #1
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4091      	lsls	r1, r2
 80076a6:	000a      	movs	r2, r1
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d100      	bne.n	80076b4 <HAL_GPIO_Init+0x28>
 80076b2:	e138      	b.n	8007926 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d005      	beq.n	80076cc <HAL_GPIO_Init+0x40>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2203      	movs	r2, #3
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d130      	bne.n	800772e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	2203      	movs	r2, #3
 80076d8:	409a      	lsls	r2, r3
 80076da:	0013      	movs	r3, r2
 80076dc:	43da      	mvns	r2, r3
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	4013      	ands	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	409a      	lsls	r2, r3
 80076ee:	0013      	movs	r3, r2
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007702:	2201      	movs	r2, #1
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	409a      	lsls	r2, r3
 8007708:	0013      	movs	r3, r2
 800770a:	43da      	mvns	r2, r3
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4013      	ands	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	091b      	lsrs	r3, r3, #4
 8007718:	2201      	movs	r2, #1
 800771a:	401a      	ands	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	409a      	lsls	r2, r3
 8007720:	0013      	movs	r3, r2
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2203      	movs	r2, #3
 8007734:	4013      	ands	r3, r2
 8007736:	2b03      	cmp	r3, #3
 8007738:	d017      	beq.n	800776a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	2203      	movs	r2, #3
 8007746:	409a      	lsls	r2, r3
 8007748:	0013      	movs	r3, r2
 800774a:	43da      	mvns	r2, r3
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	4013      	ands	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	409a      	lsls	r2, r3
 800775c:	0013      	movs	r3, r2
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2203      	movs	r2, #3
 8007770:	4013      	ands	r3, r2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d123      	bne.n	80077be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	08da      	lsrs	r2, r3, #3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3208      	adds	r2, #8
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	58d3      	ldr	r3, [r2, r3]
 8007782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2207      	movs	r2, #7
 8007788:	4013      	ands	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	220f      	movs	r2, #15
 800778e:	409a      	lsls	r2, r3
 8007790:	0013      	movs	r3, r2
 8007792:	43da      	mvns	r2, r3
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4013      	ands	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2107      	movs	r1, #7
 80077a2:	400b      	ands	r3, r1
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	409a      	lsls	r2, r3
 80077a8:	0013      	movs	r3, r2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	08da      	lsrs	r2, r3, #3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3208      	adds	r2, #8
 80077b8:	0092      	lsls	r2, r2, #2
 80077ba:	6939      	ldr	r1, [r7, #16]
 80077bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	2203      	movs	r2, #3
 80077ca:	409a      	lsls	r2, r3
 80077cc:	0013      	movs	r3, r2
 80077ce:	43da      	mvns	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4013      	ands	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2203      	movs	r2, #3
 80077dc:	401a      	ands	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	0013      	movs	r3, r2
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	23c0      	movs	r3, #192	@ 0xc0
 80077f8:	029b      	lsls	r3, r3, #10
 80077fa:	4013      	ands	r3, r2
 80077fc:	d100      	bne.n	8007800 <HAL_GPIO_Init+0x174>
 80077fe:	e092      	b.n	8007926 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007800:	4a50      	ldr	r2, [pc, #320]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	089b      	lsrs	r3, r3, #2
 8007806:	3318      	adds	r3, #24
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	589b      	ldr	r3, [r3, r2]
 800780c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2203      	movs	r2, #3
 8007812:	4013      	ands	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	220f      	movs	r2, #15
 8007818:	409a      	lsls	r2, r3
 800781a:	0013      	movs	r3, r2
 800781c:	43da      	mvns	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	4013      	ands	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	23a0      	movs	r3, #160	@ 0xa0
 8007828:	05db      	lsls	r3, r3, #23
 800782a:	429a      	cmp	r2, r3
 800782c:	d013      	beq.n	8007856 <HAL_GPIO_Init+0x1ca>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a45      	ldr	r2, [pc, #276]	@ (8007948 <HAL_GPIO_Init+0x2bc>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00d      	beq.n	8007852 <HAL_GPIO_Init+0x1c6>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a44      	ldr	r2, [pc, #272]	@ (800794c <HAL_GPIO_Init+0x2c0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d007      	beq.n	800784e <HAL_GPIO_Init+0x1c2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a43      	ldr	r2, [pc, #268]	@ (8007950 <HAL_GPIO_Init+0x2c4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d101      	bne.n	800784a <HAL_GPIO_Init+0x1be>
 8007846:	2303      	movs	r3, #3
 8007848:	e006      	b.n	8007858 <HAL_GPIO_Init+0x1cc>
 800784a:	2305      	movs	r3, #5
 800784c:	e004      	b.n	8007858 <HAL_GPIO_Init+0x1cc>
 800784e:	2302      	movs	r3, #2
 8007850:	e002      	b.n	8007858 <HAL_GPIO_Init+0x1cc>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_GPIO_Init+0x1cc>
 8007856:	2300      	movs	r3, #0
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	2103      	movs	r1, #3
 800785c:	400a      	ands	r2, r1
 800785e:	00d2      	lsls	r2, r2, #3
 8007860:	4093      	lsls	r3, r2
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007868:	4936      	ldr	r1, [pc, #216]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	089b      	lsrs	r3, r3, #2
 800786e:	3318      	adds	r3, #24
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007876:	4b33      	ldr	r3, [pc, #204]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	43da      	mvns	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4013      	ands	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	2380      	movs	r3, #128	@ 0x80
 800788c:	035b      	lsls	r3, r3, #13
 800788e:	4013      	ands	r3, r2
 8007890:	d003      	beq.n	800789a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800789a:	4b2a      	ldr	r3, [pc, #168]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80078a0:	4b28      	ldr	r3, [pc, #160]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	43da      	mvns	r2, r3
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4013      	ands	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	039b      	lsls	r3, r3, #14
 80078b8:	4013      	ands	r3, r2
 80078ba:	d003      	beq.n	80078c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 80078cc:	2384      	movs	r3, #132	@ 0x84
 80078ce:	58d3      	ldr	r3, [r2, r3]
 80078d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	43da      	mvns	r2, r3
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	4013      	ands	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	2380      	movs	r3, #128	@ 0x80
 80078e2:	029b      	lsls	r3, r3, #10
 80078e4:	4013      	ands	r3, r2
 80078e6:	d003      	beq.n	80078f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078f0:	4914      	ldr	r1, [pc, #80]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 80078f2:	2284      	movs	r2, #132	@ 0x84
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80078f8:	4a12      	ldr	r2, [pc, #72]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 80078fa:	2380      	movs	r3, #128	@ 0x80
 80078fc:	58d3      	ldr	r3, [r2, r3]
 80078fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	43da      	mvns	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4013      	ands	r3, r2
 8007908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	2380      	movs	r3, #128	@ 0x80
 8007910:	025b      	lsls	r3, r3, #9
 8007912:	4013      	ands	r3, r2
 8007914:	d003      	beq.n	800791e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800791e:	4909      	ldr	r1, [pc, #36]	@ (8007944 <HAL_GPIO_Init+0x2b8>)
 8007920:	2280      	movs	r2, #128	@ 0x80
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	3301      	adds	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	40da      	lsrs	r2, r3
 8007934:	1e13      	subs	r3, r2, #0
 8007936:	d000      	beq.n	800793a <HAL_GPIO_Init+0x2ae>
 8007938:	e6b0      	b.n	800769c <HAL_GPIO_Init+0x10>
  }
}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	46c0      	nop			@ (mov r8, r8)
 800793e:	46bd      	mov	sp, r7
 8007940:	b006      	add	sp, #24
 8007942:	bd80      	pop	{r7, pc}
 8007944:	40021800 	.word	0x40021800
 8007948:	50000400 	.word	0x50000400
 800794c:	50000800 	.word	0x50000800
 8007950:	50000c00 	.word	0x50000c00

08007954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	000a      	movs	r2, r1
 800795e:	1cbb      	adds	r3, r7, #2
 8007960:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	1cba      	adds	r2, r7, #2
 8007968:	8812      	ldrh	r2, [r2, #0]
 800796a:	4013      	ands	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800796e:	230f      	movs	r3, #15
 8007970:	18fb      	adds	r3, r7, r3
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e003      	b.n	8007980 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007978:	230f      	movs	r3, #15
 800797a:	18fb      	adds	r3, r7, r3
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007980:	230f      	movs	r3, #15
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	781b      	ldrb	r3, [r3, #0]
}
 8007986:	0018      	movs	r0, r3
 8007988:	46bd      	mov	sp, r7
 800798a:	b004      	add	sp, #16
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	0008      	movs	r0, r1
 8007998:	0011      	movs	r1, r2
 800799a:	1cbb      	adds	r3, r7, #2
 800799c:	1c02      	adds	r2, r0, #0
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	1c7b      	adds	r3, r7, #1
 80079a2:	1c0a      	adds	r2, r1, #0
 80079a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079a6:	1c7b      	adds	r3, r7, #1
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079ae:	1cbb      	adds	r3, r7, #2
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079b6:	e003      	b.n	80079c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079b8:	1cbb      	adds	r3, r7, #2
 80079ba:	881a      	ldrh	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80079c0:	46c0      	nop			@ (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	0002      	movs	r2, r0
 80079d0:	1dbb      	adds	r3, r7, #6
 80079d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80079d4:	4b10      	ldr	r3, [pc, #64]	@ (8007a18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	1dba      	adds	r2, r7, #6
 80079da:	8812      	ldrh	r2, [r2, #0]
 80079dc:	4013      	ands	r3, r2
 80079de:	d008      	beq.n	80079f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80079e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079e2:	1dba      	adds	r2, r7, #6
 80079e4:	8812      	ldrh	r2, [r2, #0]
 80079e6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80079e8:	1dbb      	adds	r3, r7, #6
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7fb ff61 	bl	80038b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	1dba      	adds	r2, r7, #6
 80079f8:	8812      	ldrh	r2, [r2, #0]
 80079fa:	4013      	ands	r3, r2
 80079fc:	d008      	beq.n	8007a10 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80079fe:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a00:	1dba      	adds	r2, r7, #6
 8007a02:	8812      	ldrh	r2, [r2, #0]
 8007a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007a06:	1dbb      	adds	r3, r7, #6
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7fb ff28 	bl	8003860 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007a10:	46c0      	nop			@ (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40021800 	.word	0x40021800

08007a1c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e097      	b.n	8007b5e <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2236      	movs	r2, #54	@ 0x36
 8007a32:	5c9b      	ldrb	r3, [r3, r2]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2235      	movs	r2, #53	@ 0x35
 8007a3e:	2100      	movs	r1, #0
 8007a40:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 fa8f 	bl	8007f68 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a44      	ldr	r2, [pc, #272]	@ (8007b68 <HAL_LPTIM_Init+0x14c>)
 8007a56:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	0010      	movs	r0, r2
 8007a60:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2236      	movs	r2, #54	@ 0x36
 8007a66:	2102      	movs	r1, #2
 8007a68:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d005      	beq.n	8007a86 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a7e:	2380      	movs	r3, #128	@ 0x80
 8007a80:	041b      	lsls	r3, r3, #16
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d103      	bne.n	8007a8e <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	221e      	movs	r2, #30
 8007a8a:	4393      	bics	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	4a36      	ldr	r2, [pc, #216]	@ (8007b6c <HAL_LPTIM_Init+0x150>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d003      	beq.n	8007aa0 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a35      	ldr	r2, [pc, #212]	@ (8007b70 <HAL_LPTIM_Init+0x154>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4a34      	ldr	r2, [pc, #208]	@ (8007b74 <HAL_LPTIM_Init+0x158>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007ab0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007ab6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007abc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007ac2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007ada:	4313      	orrs	r3, r2
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d005      	beq.n	8007af6 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aee:	2380      	movs	r3, #128	@ 0x80
 8007af0:	041b      	lsls	r3, r3, #16
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d107      	bne.n	8007b06 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007afe:	4313      	orrs	r3, r2
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <HAL_LPTIM_Init+0x150>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00a      	beq.n	8007b26 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b18:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007b1e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a11      	ldr	r2, [pc, #68]	@ (8007b78 <HAL_LPTIM_Init+0x15c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d108      	bne.n	8007b4a <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b48:	e004      	b.n	8007b54 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b52:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2236      	movs	r2, #54	@ 0x36
 8007b58:	2101      	movs	r1, #1
 8007b5a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b004      	add	sp, #16
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	46c0      	nop			@ (mov r8, r8)
 8007b68:	08004811 	.word	0x08004811
 8007b6c:	0000ffff 	.word	0x0000ffff
 8007b70:	ffff1f3f 	.word	0xffff1f3f
 8007b74:	ff19f1fe 	.word	0xff19f1fe
 8007b78:	40007c00 	.word	0x40007c00

08007b7c <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2236      	movs	r2, #54	@ 0x36
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2180      	movs	r1, #128	@ 0x80
 8007b9c:	0349      	lsls	r1, r1, #13
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2101      	movs	r1, #1
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2210      	movs	r2, #16
 8007bb8:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2110      	movs	r1, #16
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f000 f9fa 	bl	8007fc0 <LPTIM_WaitForFlag>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d101      	bne.n	8007bd6 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e060      	b.n	8007c98 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2208      	movs	r2, #8
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2108      	movs	r1, #8
 8007bea:	0018      	movs	r0, r3
 8007bec:	f000 f9e8 	bl	8007fc0 <LPTIM_WaitForFlag>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d101      	bne.n	8007bfa <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e04e      	b.n	8007c98 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f000 fa17 	bl	8008030 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f000 f9a3 	bl	8007f50 <HAL_LPTIM_GetState>
 8007c0a:	0003      	movs	r3, r0
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d101      	bne.n	8007c14 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e041      	b.n	8007c98 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2110      	movs	r1, #16
 8007c20:	430a      	orrs	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2108      	movs	r1, #8
 8007c30:	430a      	orrs	r2, r1
 8007c32:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2102      	movs	r1, #2
 8007c40:	430a      	orrs	r2, r1
 8007c42:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2101      	movs	r1, #1
 8007c50:	430a      	orrs	r2, r1
 8007c52:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	4a11      	ldr	r2, [pc, #68]	@ (8007ca0 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d007      	beq.n	8007c6e <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2104      	movs	r1, #4
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2102      	movs	r1, #2
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2236      	movs	r2, #54	@ 0x36
 8007c92:	2101      	movs	r1, #1
 8007c94:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	0018      	movs	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b004      	add	sp, #16
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	0000ffff 	.word	0x0000ffff

08007ca4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10f      	bne.n	8007cda <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d108      	bne.n	8007cda <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	0010      	movs	r0, r2
 8007cd8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d10f      	bne.n	8007d08 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d108      	bne.n	8007d08 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	0010      	movs	r0, r2
 8007d06:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d10f      	bne.n	8007d36 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d108      	bne.n	8007d36 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	0010      	movs	r0, r2
 8007d34:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d10f      	bne.n	8007d64 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d108      	bne.n	8007d64 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2208      	movs	r2, #8
 8007d58:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	0010      	movs	r0, r2
 8007d62:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2210      	movs	r2, #16
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d10f      	bne.n	8007d92 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2210      	movs	r2, #16
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	d108      	bne.n	8007d92 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2210      	movs	r2, #16
 8007d86:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	0010      	movs	r0, r2
 8007d90:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d10f      	bne.n	8007dc0 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2220      	movs	r2, #32
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d108      	bne.n	8007dc0 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2220      	movs	r2, #32
 8007db4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	0010      	movs	r0, r2
 8007dbe:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2240      	movs	r2, #64	@ 0x40
 8007dc8:	4013      	ands	r3, r2
 8007dca:	2b40      	cmp	r3, #64	@ 0x40
 8007dcc:	d10f      	bne.n	8007dee <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2240      	movs	r2, #64	@ 0x40
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d108      	bne.n	8007dee <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2240      	movs	r2, #64	@ 0x40
 8007de2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	0010      	movs	r0, r2
 8007dec:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b002      	add	sp, #8
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007dfe:	46c0      	nop			@ (mov r8, r8)
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b002      	add	sp, #8
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b002      	add	sp, #8
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b002      	add	sp, #8
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007e2e:	46c0      	nop			@ (mov r8, r8)
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b002      	add	sp, #8
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007e4e:	46c0      	nop			@ (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b002      	add	sp, #8
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b002      	add	sp, #8
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	230b      	movs	r3, #11
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	1c0a      	adds	r2, r1, #0
 8007e78:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2317      	movs	r3, #23
 8007e7c:	18fb      	adds	r3, r7, r3
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e05a      	b.n	8007f42 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2236      	movs	r2, #54	@ 0x36
 8007e90:	5c9b      	ldrb	r3, [r3, r2]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d132      	bne.n	8007efe <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8007e98:	230b      	movs	r3, #11
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d828      	bhi.n	8007ef4 <HAL_LPTIM_RegisterCallback+0x8c>
 8007ea2:	009a      	lsls	r2, r3, #2
 8007ea4:	4b29      	ldr	r3, [pc, #164]	@ (8007f4c <HAL_LPTIM_RegisterCallback+0xe4>)
 8007ea6:	18d3      	adds	r3, r2, r3
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8007eb2:	e043      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8007eba:	e03f      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8007ec2:	e03b      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8007eca:	e037      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8007ed2:	e033      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007eda:	e02f      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007ee2:	e02b      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007eea:	e027      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007ef2:	e023      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8007ef4:	2317      	movs	r3, #23
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
        break;
 8007efc:	e01e      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2236      	movs	r2, #54	@ 0x36
 8007f02:	5c9b      	ldrb	r3, [r3, r2]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d114      	bne.n	8007f34 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 8007f0a:	230b      	movs	r3, #11
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_LPTIM_RegisterCallback+0xb2>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d004      	beq.n	8007f22 <HAL_LPTIM_RegisterCallback+0xba>
 8007f18:	e007      	b.n	8007f2a <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8007f20:	e00c      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8007f28:	e008      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8007f2a:	2317      	movs	r3, #23
 8007f2c:	18fb      	adds	r3, r7, r3
 8007f2e:	2201      	movs	r2, #1
 8007f30:	701a      	strb	r2, [r3, #0]
        break;
 8007f32:	e003      	b.n	8007f3c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8007f34:	2317      	movs	r3, #23
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007f3c:	2317      	movs	r3, #23
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	781b      	ldrb	r3, [r3, #0]
}
 8007f42:	0018      	movs	r0, r3
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b006      	add	sp, #24
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	0800d5ac 	.word	0x0800d5ac

08007f50 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2236      	movs	r2, #54	@ 0x36
 8007f5c:	5c9b      	ldrb	r3, [r3, r2]
 8007f5e:	b2db      	uxtb	r3, r3
}
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b002      	add	sp, #8
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a0c      	ldr	r2, [pc, #48]	@ (8007fa4 <LPTIM_ResetCallback+0x3c>)
 8007f74:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a0b      	ldr	r2, [pc, #44]	@ (8007fa8 <LPTIM_ResetCallback+0x40>)
 8007f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8007fac <LPTIM_ResetCallback+0x44>)
 8007f80:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb0 <LPTIM_ResetCallback+0x48>)
 8007f86:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb4 <LPTIM_ResetCallback+0x4c>)
 8007f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a09      	ldr	r2, [pc, #36]	@ (8007fb8 <LPTIM_ResetCallback+0x50>)
 8007f92:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a09      	ldr	r2, [pc, #36]	@ (8007fbc <LPTIM_ResetCallback+0x54>)
 8007f98:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007f9a:	46c0      	nop			@ (mov r8, r8)
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b002      	add	sp, #8
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	08007df7 	.word	0x08007df7
 8007fa8:	08007e07 	.word	0x08007e07
 8007fac:	08007e17 	.word	0x08007e17
 8007fb0:	08007e27 	.word	0x08007e27
 8007fb4:	08007e37 	.word	0x08007e37
 8007fb8:	08007e47 	.word	0x08007e47
 8007fbc:	08007e57 	.word	0x08007e57

08007fc0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007fca:	230f      	movs	r3, #15
 8007fcc:	18fb      	adds	r3, r7, r3
 8007fce:	2200      	movs	r2, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007fd2:	4b15      	ldr	r3, [pc, #84]	@ (8008028 <LPTIM_WaitForFlag+0x68>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4915      	ldr	r1, [pc, #84]	@ (800802c <LPTIM_WaitForFlag+0x6c>)
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7f8 f893 	bl	8000104 <__udivsi3>
 8007fde:	0003      	movs	r3, r0
 8007fe0:	001a      	movs	r2, r3
 8007fe2:	0013      	movs	r3, r2
 8007fe4:	015b      	lsls	r3, r3, #5
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8007ffc:	230f      	movs	r3, #15
 8007ffe:	18fb      	adds	r3, r7, r3
 8008000:	2203      	movs	r2, #3
 8008002:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4013      	ands	r3, r2
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d002      	beq.n	800801a <LPTIM_WaitForFlag+0x5a>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1ea      	bne.n	8007ff0 <LPTIM_WaitForFlag+0x30>

  return result;
 800801a:	230f      	movs	r3, #15
 800801c:	18fb      	adds	r3, r7, r3
 800801e:	781b      	ldrb	r3, [r3, #0]
}
 8008020:	0018      	movs	r0, r3
 8008022:	46bd      	mov	sp, r7
 8008024:	b004      	add	sp, #16
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000440 	.word	0x20000440
 800802c:	00004e20 	.word	0x00004e20

08008030 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08c      	sub	sp, #48	@ 0x30
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803c:	f3ef 8310 	mrs	r3, PRIMASK
 8008040:	60fb      	str	r3, [r7, #12]
  return(result);
 8008042:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008046:	2301      	movs	r3, #1
 8008048:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a72      	ldr	r2, [pc, #456]	@ (8008220 <LPTIM_Disable+0x1f0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d003      	beq.n	8008064 <LPTIM_Disable+0x34>
 800805c:	4a71      	ldr	r2, [pc, #452]	@ (8008224 <LPTIM_Disable+0x1f4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d007      	beq.n	8008072 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008062:	e00d      	b.n	8008080 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008064:	4b70      	ldr	r3, [pc, #448]	@ (8008228 <LPTIM_Disable+0x1f8>)
 8008066:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008068:	23c0      	movs	r3, #192	@ 0xc0
 800806a:	031b      	lsls	r3, r3, #12
 800806c:	4013      	ands	r3, r2
 800806e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008070:	e006      	b.n	8008080 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008072:	4b6d      	ldr	r3, [pc, #436]	@ (8008228 <LPTIM_Disable+0x1f8>)
 8008074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008076:	23c0      	movs	r3, #192	@ 0xc0
 8008078:	039b      	lsls	r3, r3, #14
 800807a:	4013      	ands	r3, r2
 800807c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800807e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a6:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a5c      	ldr	r2, [pc, #368]	@ (8008220 <LPTIM_Disable+0x1f0>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <LPTIM_Disable+0x8a>
 80080b2:	4a5c      	ldr	r2, [pc, #368]	@ (8008224 <LPTIM_Disable+0x1f4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00e      	beq.n	80080d6 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80080b8:	e01b      	b.n	80080f2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80080ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080be:	4b5a      	ldr	r3, [pc, #360]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080c0:	2180      	movs	r1, #128	@ 0x80
 80080c2:	0609      	lsls	r1, r1, #24
 80080c4:	430a      	orrs	r2, r1
 80080c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80080c8:	4b57      	ldr	r3, [pc, #348]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080cc:	4b56      	ldr	r3, [pc, #344]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080ce:	0052      	lsls	r2, r2, #1
 80080d0:	0852      	lsrs	r2, r2, #1
 80080d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80080d4:	e00d      	b.n	80080f2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80080d6:	4b54      	ldr	r3, [pc, #336]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080da:	4b53      	ldr	r3, [pc, #332]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080dc:	2180      	movs	r1, #128	@ 0x80
 80080de:	05c9      	lsls	r1, r1, #23
 80080e0:	430a      	orrs	r2, r1
 80080e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80080e4:	4b50      	ldr	r3, [pc, #320]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80080ea:	4950      	ldr	r1, [pc, #320]	@ (800822c <LPTIM_Disable+0x1fc>)
 80080ec:	400a      	ands	r2, r1
 80080ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80080f0:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <LPTIM_Disable+0xd0>
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d100      	bne.n	8008100 <LPTIM_Disable+0xd0>
 80080fe:	e071      	b.n	80081e4 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a46      	ldr	r2, [pc, #280]	@ (8008220 <LPTIM_Disable+0x1f0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d003      	beq.n	8008112 <LPTIM_Disable+0xe2>
 800810a:	4a46      	ldr	r2, [pc, #280]	@ (8008224 <LPTIM_Disable+0x1f4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d007      	beq.n	8008120 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008110:	e00d      	b.n	800812e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008112:	4b45      	ldr	r3, [pc, #276]	@ (8008228 <LPTIM_Disable+0x1f8>)
 8008114:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008116:	4b44      	ldr	r3, [pc, #272]	@ (8008228 <LPTIM_Disable+0x1f8>)
 8008118:	4945      	ldr	r1, [pc, #276]	@ (8008230 <LPTIM_Disable+0x200>)
 800811a:	400a      	ands	r2, r1
 800811c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800811e:	e006      	b.n	800812e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008120:	4b41      	ldr	r3, [pc, #260]	@ (8008228 <LPTIM_Disable+0x1f8>)
 8008122:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008124:	4b40      	ldr	r3, [pc, #256]	@ (8008228 <LPTIM_Disable+0x1f8>)
 8008126:	4943      	ldr	r1, [pc, #268]	@ (8008234 <LPTIM_Disable+0x204>)
 8008128:	400a      	ands	r2, r1
 800812a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800812c:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01b      	beq.n	800816c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2101      	movs	r1, #1
 8008140:	430a      	orrs	r2, r1
 8008142:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2108      	movs	r1, #8
 8008150:	0018      	movs	r0, r3
 8008152:	f7ff ff35 	bl	8007fc0 <LPTIM_WaitForFlag>
 8008156:	0003      	movs	r3, r0
 8008158:	2b03      	cmp	r3, #3
 800815a:	d103      	bne.n	8008164 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2236      	movs	r2, #54	@ 0x36
 8008160:	2103      	movs	r1, #3
 8008162:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2208      	movs	r2, #8
 800816a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01b      	beq.n	80081aa <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2101      	movs	r1, #1
 800817e:	430a      	orrs	r2, r1
 8008180:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2110      	movs	r1, #16
 800818e:	0018      	movs	r0, r3
 8008190:	f7ff ff16 	bl	8007fc0 <LPTIM_WaitForFlag>
 8008194:	0003      	movs	r3, r0
 8008196:	2b03      	cmp	r3, #3
 8008198:	d103      	bne.n	80081a2 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2236      	movs	r2, #54	@ 0x36
 800819e:	2103      	movs	r1, #3
 80081a0:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2210      	movs	r2, #16
 80081a8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008220 <LPTIM_Disable+0x1f0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <LPTIM_Disable+0x18c>
 80081b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008224 <LPTIM_Disable+0x1f4>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00a      	beq.n	80081d0 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80081ba:	e013      	b.n	80081e4 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80081bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80081be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <LPTIM_Disable+0x200>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	0019      	movs	r1, r3
 80081c6:	4b18      	ldr	r3, [pc, #96]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80081c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ca:	430a      	orrs	r2, r1
 80081cc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80081ce:	e009      	b.n	80081e4 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80081d0:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80081d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d4:	4a17      	ldr	r2, [pc, #92]	@ (8008234 <LPTIM_Disable+0x204>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	0019      	movs	r1, r3
 80081da:	4b13      	ldr	r3, [pc, #76]	@ (8008228 <LPTIM_Disable+0x1f8>)
 80081dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081de:	430a      	orrs	r2, r1
 80081e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80081e2:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2101      	movs	r1, #1
 80081f0:	438a      	bics	r2, r1
 80081f2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081fa:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	625a      	str	r2, [r3, #36]	@ 0x24
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f383 8810 	msr	PRIMASK, r3
}
 8008216:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008218:	46c0      	nop			@ (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b00c      	add	sp, #48	@ 0x30
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40007c00 	.word	0x40007c00
 8008224:	40009400 	.word	0x40009400
 8008228:	40021000 	.word	0x40021000
 800822c:	bfffffff 	.word	0xbfffffff
 8008230:	fff3ffff 	.word	0xfff3ffff
 8008234:	ffcfffff 	.word	0xffcfffff

08008238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008240:	4b19      	ldr	r3, [pc, #100]	@ (80082a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a19      	ldr	r2, [pc, #100]	@ (80082ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008246:	4013      	ands	r3, r2
 8008248:	0019      	movs	r1, r3
 800824a:	4b17      	ldr	r3, [pc, #92]	@ (80082a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	430a      	orrs	r2, r1
 8008250:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	2380      	movs	r3, #128	@ 0x80
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	429a      	cmp	r2, r3
 800825a:	d11f      	bne.n	800829c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800825c:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	0013      	movs	r3, r2
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	189b      	adds	r3, r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4912      	ldr	r1, [pc, #72]	@ (80082b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800826a:	0018      	movs	r0, r3
 800826c:	f7f7 ff4a 	bl	8000104 <__udivsi3>
 8008270:	0003      	movs	r3, r0
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008276:	e008      	b.n	800828a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3b01      	subs	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e001      	b.n	800828a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e009      	b.n	800829e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800828a:	4b07      	ldr	r3, [pc, #28]	@ (80082a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	2380      	movs	r3, #128	@ 0x80
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	401a      	ands	r2, r3
 8008294:	2380      	movs	r3, #128	@ 0x80
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	429a      	cmp	r2, r3
 800829a:	d0ed      	beq.n	8008278 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	0018      	movs	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b004      	add	sp, #16
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	40007000 	.word	0x40007000
 80082ac:	fffff9ff 	.word	0xfffff9ff
 80082b0:	20000440 	.word	0x20000440
 80082b4:	000f4240 	.word	0x000f4240

080082b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80082bc:	4b03      	ldr	r3, [pc, #12]	@ (80082cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	23e0      	movs	r3, #224	@ 0xe0
 80082c2:	01db      	lsls	r3, r3, #7
 80082c4:	4013      	ands	r3, r2
}
 80082c6:	0018      	movs	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	40021000 	.word	0x40021000

080082d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e2fe      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2201      	movs	r2, #1
 80082e8:	4013      	ands	r3, r2
 80082ea:	d100      	bne.n	80082ee <HAL_RCC_OscConfig+0x1e>
 80082ec:	e07c      	b.n	80083e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ee:	4bc3      	ldr	r3, [pc, #780]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2238      	movs	r2, #56	@ 0x38
 80082f4:	4013      	ands	r3, r2
 80082f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082f8:	4bc0      	ldr	r3, [pc, #768]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2203      	movs	r2, #3
 80082fe:	4013      	ands	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b10      	cmp	r3, #16
 8008306:	d102      	bne.n	800830e <HAL_RCC_OscConfig+0x3e>
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d002      	beq.n	8008314 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	2b08      	cmp	r3, #8
 8008312:	d10b      	bne.n	800832c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008314:	4bb9      	ldr	r3, [pc, #740]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	2380      	movs	r3, #128	@ 0x80
 800831a:	029b      	lsls	r3, r3, #10
 800831c:	4013      	ands	r3, r2
 800831e:	d062      	beq.n	80083e6 <HAL_RCC_OscConfig+0x116>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d15e      	bne.n	80083e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e2d9      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	2380      	movs	r3, #128	@ 0x80
 8008332:	025b      	lsls	r3, r3, #9
 8008334:	429a      	cmp	r2, r3
 8008336:	d107      	bne.n	8008348 <HAL_RCC_OscConfig+0x78>
 8008338:	4bb0      	ldr	r3, [pc, #704]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4baf      	ldr	r3, [pc, #700]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800833e:	2180      	movs	r1, #128	@ 0x80
 8008340:	0249      	lsls	r1, r1, #9
 8008342:	430a      	orrs	r2, r1
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e020      	b.n	800838a <HAL_RCC_OscConfig+0xba>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	23a0      	movs	r3, #160	@ 0xa0
 800834e:	02db      	lsls	r3, r3, #11
 8008350:	429a      	cmp	r2, r3
 8008352:	d10e      	bne.n	8008372 <HAL_RCC_OscConfig+0xa2>
 8008354:	4ba9      	ldr	r3, [pc, #676]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	4ba8      	ldr	r3, [pc, #672]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800835a:	2180      	movs	r1, #128	@ 0x80
 800835c:	02c9      	lsls	r1, r1, #11
 800835e:	430a      	orrs	r2, r1
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	4ba6      	ldr	r3, [pc, #664]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4ba5      	ldr	r3, [pc, #660]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008368:	2180      	movs	r1, #128	@ 0x80
 800836a:	0249      	lsls	r1, r1, #9
 800836c:	430a      	orrs	r2, r1
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e00b      	b.n	800838a <HAL_RCC_OscConfig+0xba>
 8008372:	4ba2      	ldr	r3, [pc, #648]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	4ba1      	ldr	r3, [pc, #644]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008378:	49a1      	ldr	r1, [pc, #644]	@ (8008600 <HAL_RCC_OscConfig+0x330>)
 800837a:	400a      	ands	r2, r1
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	4b9f      	ldr	r3, [pc, #636]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b9e      	ldr	r3, [pc, #632]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008384:	499f      	ldr	r1, [pc, #636]	@ (8008604 <HAL_RCC_OscConfig+0x334>)
 8008386:	400a      	ands	r2, r1
 8008388:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d014      	beq.n	80083bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008392:	f7fd fb19 	bl	80059c8 <HAL_GetTick>
 8008396:	0003      	movs	r3, r0
 8008398:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800839c:	f7fd fb14 	bl	80059c8 <HAL_GetTick>
 80083a0:	0002      	movs	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b64      	cmp	r3, #100	@ 0x64
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e298      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083ae:	4b93      	ldr	r3, [pc, #588]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	2380      	movs	r3, #128	@ 0x80
 80083b4:	029b      	lsls	r3, r3, #10
 80083b6:	4013      	ands	r3, r2
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0xcc>
 80083ba:	e015      	b.n	80083e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fd fb04 	bl	80059c8 <HAL_GetTick>
 80083c0:	0003      	movs	r3, r0
 80083c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c6:	f7fd faff 	bl	80059c8 <HAL_GetTick>
 80083ca:	0002      	movs	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b64      	cmp	r3, #100	@ 0x64
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e283      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083d8:	4b88      	ldr	r3, [pc, #544]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	4013      	ands	r3, r2
 80083e2:	d1f0      	bne.n	80083c6 <HAL_RCC_OscConfig+0xf6>
 80083e4:	e000      	b.n	80083e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2202      	movs	r2, #2
 80083ee:	4013      	ands	r3, r2
 80083f0:	d100      	bne.n	80083f4 <HAL_RCC_OscConfig+0x124>
 80083f2:	e099      	b.n	8008528 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083f4:	4b81      	ldr	r3, [pc, #516]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2238      	movs	r2, #56	@ 0x38
 80083fa:	4013      	ands	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083fe:	4b7f      	ldr	r3, [pc, #508]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2203      	movs	r2, #3
 8008404:	4013      	ands	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	2b10      	cmp	r3, #16
 800840c:	d102      	bne.n	8008414 <HAL_RCC_OscConfig+0x144>
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d002      	beq.n	800841a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d135      	bne.n	8008486 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800841a:	4b78      	ldr	r3, [pc, #480]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	2380      	movs	r3, #128	@ 0x80
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4013      	ands	r3, r2
 8008424:	d005      	beq.n	8008432 <HAL_RCC_OscConfig+0x162>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e256      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008432:	4b72      	ldr	r3, [pc, #456]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	4a74      	ldr	r2, [pc, #464]	@ (8008608 <HAL_RCC_OscConfig+0x338>)
 8008438:	4013      	ands	r3, r2
 800843a:	0019      	movs	r1, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	021a      	lsls	r2, r3, #8
 8008442:	4b6e      	ldr	r3, [pc, #440]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008444:	430a      	orrs	r2, r1
 8008446:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d112      	bne.n	8008474 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800844e:	4b6b      	ldr	r3, [pc, #428]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a6e      	ldr	r2, [pc, #440]	@ (800860c <HAL_RCC_OscConfig+0x33c>)
 8008454:	4013      	ands	r3, r2
 8008456:	0019      	movs	r1, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	4b67      	ldr	r3, [pc, #412]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800845e:	430a      	orrs	r2, r1
 8008460:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008462:	4b66      	ldr	r3, [pc, #408]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	0adb      	lsrs	r3, r3, #11
 8008468:	2207      	movs	r2, #7
 800846a:	4013      	ands	r3, r2
 800846c:	4a68      	ldr	r2, [pc, #416]	@ (8008610 <HAL_RCC_OscConfig+0x340>)
 800846e:	40da      	lsrs	r2, r3
 8008470:	4b68      	ldr	r3, [pc, #416]	@ (8008614 <HAL_RCC_OscConfig+0x344>)
 8008472:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008474:	4b68      	ldr	r3, [pc, #416]	@ (8008618 <HAL_RCC_OscConfig+0x348>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	0018      	movs	r0, r3
 800847a:	f7fd fa49 	bl	8005910 <HAL_InitTick>
 800847e:	1e03      	subs	r3, r0, #0
 8008480:	d051      	beq.n	8008526 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e22c      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d030      	beq.n	80084f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800848e:	4b5b      	ldr	r3, [pc, #364]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a5e      	ldr	r2, [pc, #376]	@ (800860c <HAL_RCC_OscConfig+0x33c>)
 8008494:	4013      	ands	r3, r2
 8008496:	0019      	movs	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	4b57      	ldr	r3, [pc, #348]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800849e:	430a      	orrs	r2, r1
 80084a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80084a2:	4b56      	ldr	r3, [pc, #344]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b55      	ldr	r3, [pc, #340]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084a8:	2180      	movs	r1, #128	@ 0x80
 80084aa:	0049      	lsls	r1, r1, #1
 80084ac:	430a      	orrs	r2, r1
 80084ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b0:	f7fd fa8a 	bl	80059c8 <HAL_GetTick>
 80084b4:	0003      	movs	r3, r0
 80084b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b8:	e008      	b.n	80084cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ba:	f7fd fa85 	bl	80059c8 <HAL_GetTick>
 80084be:	0002      	movs	r2, r0
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d901      	bls.n	80084cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e209      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084cc:	4b4b      	ldr	r3, [pc, #300]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	2380      	movs	r3, #128	@ 0x80
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4013      	ands	r3, r2
 80084d6:	d0f0      	beq.n	80084ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d8:	4b48      	ldr	r3, [pc, #288]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4a4a      	ldr	r2, [pc, #296]	@ (8008608 <HAL_RCC_OscConfig+0x338>)
 80084de:	4013      	ands	r3, r2
 80084e0:	0019      	movs	r1, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	021a      	lsls	r2, r3, #8
 80084e8:	4b44      	ldr	r3, [pc, #272]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
 80084ee:	e01b      	b.n	8008528 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80084f0:	4b42      	ldr	r3, [pc, #264]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b41      	ldr	r3, [pc, #260]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80084f6:	4949      	ldr	r1, [pc, #292]	@ (800861c <HAL_RCC_OscConfig+0x34c>)
 80084f8:	400a      	ands	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fc:	f7fd fa64 	bl	80059c8 <HAL_GetTick>
 8008500:	0003      	movs	r3, r0
 8008502:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008504:	e008      	b.n	8008518 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008506:	f7fd fa5f 	bl	80059c8 <HAL_GetTick>
 800850a:	0002      	movs	r2, r0
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d901      	bls.n	8008518 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e1e3      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008518:	4b38      	ldr	r3, [pc, #224]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	2380      	movs	r3, #128	@ 0x80
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	4013      	ands	r3, r2
 8008522:	d1f0      	bne.n	8008506 <HAL_RCC_OscConfig+0x236>
 8008524:	e000      	b.n	8008528 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008526:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2208      	movs	r2, #8
 800852e:	4013      	ands	r3, r2
 8008530:	d047      	beq.n	80085c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008532:	4b32      	ldr	r3, [pc, #200]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2238      	movs	r2, #56	@ 0x38
 8008538:	4013      	ands	r3, r2
 800853a:	2b18      	cmp	r3, #24
 800853c:	d10a      	bne.n	8008554 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800853e:	4b2f      	ldr	r3, [pc, #188]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008542:	2202      	movs	r2, #2
 8008544:	4013      	ands	r3, r2
 8008546:	d03c      	beq.n	80085c2 <HAL_RCC_OscConfig+0x2f2>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d138      	bne.n	80085c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e1c5      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d019      	beq.n	8008590 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800855c:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 800855e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008560:	4b26      	ldr	r3, [pc, #152]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008562:	2101      	movs	r1, #1
 8008564:	430a      	orrs	r2, r1
 8008566:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fd fa2e 	bl	80059c8 <HAL_GetTick>
 800856c:	0003      	movs	r3, r0
 800856e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008572:	f7fd fa29 	bl	80059c8 <HAL_GetTick>
 8008576:	0002      	movs	r2, r0
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e1ad      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008584:	4b1d      	ldr	r3, [pc, #116]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008588:	2202      	movs	r2, #2
 800858a:	4013      	ands	r3, r2
 800858c:	d0f1      	beq.n	8008572 <HAL_RCC_OscConfig+0x2a2>
 800858e:	e018      	b.n	80085c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008590:	4b1a      	ldr	r3, [pc, #104]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008592:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008594:	4b19      	ldr	r3, [pc, #100]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 8008596:	2101      	movs	r1, #1
 8008598:	438a      	bics	r2, r1
 800859a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859c:	f7fd fa14 	bl	80059c8 <HAL_GetTick>
 80085a0:	0003      	movs	r3, r0
 80085a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085a4:	e008      	b.n	80085b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a6:	f7fd fa0f 	bl	80059c8 <HAL_GetTick>
 80085aa:	0002      	movs	r2, r0
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d901      	bls.n	80085b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e193      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085b8:	4b10      	ldr	r3, [pc, #64]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80085ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085bc:	2202      	movs	r2, #2
 80085be:	4013      	ands	r3, r2
 80085c0:	d1f1      	bne.n	80085a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2204      	movs	r2, #4
 80085c8:	4013      	ands	r3, r2
 80085ca:	d100      	bne.n	80085ce <HAL_RCC_OscConfig+0x2fe>
 80085cc:	e0c6      	b.n	800875c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ce:	231f      	movs	r3, #31
 80085d0:	18fb      	adds	r3, r7, r3
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2238      	movs	r2, #56	@ 0x38
 80085dc:	4013      	ands	r3, r2
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d11e      	bne.n	8008620 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80085e2:	4b06      	ldr	r3, [pc, #24]	@ (80085fc <HAL_RCC_OscConfig+0x32c>)
 80085e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085e6:	2202      	movs	r2, #2
 80085e8:	4013      	ands	r3, r2
 80085ea:	d100      	bne.n	80085ee <HAL_RCC_OscConfig+0x31e>
 80085ec:	e0b6      	b.n	800875c <HAL_RCC_OscConfig+0x48c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d000      	beq.n	80085f8 <HAL_RCC_OscConfig+0x328>
 80085f6:	e0b1      	b.n	800875c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e171      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
 80085fc:	40021000 	.word	0x40021000
 8008600:	fffeffff 	.word	0xfffeffff
 8008604:	fffbffff 	.word	0xfffbffff
 8008608:	ffff80ff 	.word	0xffff80ff
 800860c:	ffffc7ff 	.word	0xffffc7ff
 8008610:	00f42400 	.word	0x00f42400
 8008614:	20000440 	.word	0x20000440
 8008618:	20000444 	.word	0x20000444
 800861c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008620:	4bb1      	ldr	r3, [pc, #708]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	055b      	lsls	r3, r3, #21
 8008628:	4013      	ands	r3, r2
 800862a:	d101      	bne.n	8008630 <HAL_RCC_OscConfig+0x360>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <HAL_RCC_OscConfig+0x362>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d011      	beq.n	800865a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008636:	4bac      	ldr	r3, [pc, #688]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800863a:	4bab      	ldr	r3, [pc, #684]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 800863c:	2180      	movs	r1, #128	@ 0x80
 800863e:	0549      	lsls	r1, r1, #21
 8008640:	430a      	orrs	r2, r1
 8008642:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008644:	4ba8      	ldr	r3, [pc, #672]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008648:	2380      	movs	r3, #128	@ 0x80
 800864a:	055b      	lsls	r3, r3, #21
 800864c:	4013      	ands	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008652:	231f      	movs	r3, #31
 8008654:	18fb      	adds	r3, r7, r3
 8008656:	2201      	movs	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800865a:	4ba4      	ldr	r3, [pc, #656]	@ (80088ec <HAL_RCC_OscConfig+0x61c>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	2380      	movs	r3, #128	@ 0x80
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	4013      	ands	r3, r2
 8008664:	d11a      	bne.n	800869c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008666:	4ba1      	ldr	r3, [pc, #644]	@ (80088ec <HAL_RCC_OscConfig+0x61c>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	4ba0      	ldr	r3, [pc, #640]	@ (80088ec <HAL_RCC_OscConfig+0x61c>)
 800866c:	2180      	movs	r1, #128	@ 0x80
 800866e:	0049      	lsls	r1, r1, #1
 8008670:	430a      	orrs	r2, r1
 8008672:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008674:	f7fd f9a8 	bl	80059c8 <HAL_GetTick>
 8008678:	0003      	movs	r3, r0
 800867a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800867c:	e008      	b.n	8008690 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800867e:	f7fd f9a3 	bl	80059c8 <HAL_GetTick>
 8008682:	0002      	movs	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d901      	bls.n	8008690 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e127      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008690:	4b96      	ldr	r3, [pc, #600]	@ (80088ec <HAL_RCC_OscConfig+0x61c>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	2380      	movs	r3, #128	@ 0x80
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4013      	ands	r3, r2
 800869a:	d0f0      	beq.n	800867e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d106      	bne.n	80086b2 <HAL_RCC_OscConfig+0x3e2>
 80086a4:	4b90      	ldr	r3, [pc, #576]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086a8:	4b8f      	ldr	r3, [pc, #572]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086aa:	2101      	movs	r1, #1
 80086ac:	430a      	orrs	r2, r1
 80086ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086b0:	e01c      	b.n	80086ec <HAL_RCC_OscConfig+0x41c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	d10c      	bne.n	80086d4 <HAL_RCC_OscConfig+0x404>
 80086ba:	4b8b      	ldr	r3, [pc, #556]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086be:	4b8a      	ldr	r3, [pc, #552]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086c0:	2104      	movs	r1, #4
 80086c2:	430a      	orrs	r2, r1
 80086c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086c6:	4b88      	ldr	r3, [pc, #544]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086ca:	4b87      	ldr	r3, [pc, #540]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086cc:	2101      	movs	r1, #1
 80086ce:	430a      	orrs	r2, r1
 80086d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086d2:	e00b      	b.n	80086ec <HAL_RCC_OscConfig+0x41c>
 80086d4:	4b84      	ldr	r3, [pc, #528]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086d8:	4b83      	ldr	r3, [pc, #524]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086da:	2101      	movs	r1, #1
 80086dc:	438a      	bics	r2, r1
 80086de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086e0:	4b81      	ldr	r3, [pc, #516]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086e4:	4b80      	ldr	r3, [pc, #512]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80086e6:	2104      	movs	r1, #4
 80086e8:	438a      	bics	r2, r1
 80086ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d014      	beq.n	800871e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f4:	f7fd f968 	bl	80059c8 <HAL_GetTick>
 80086f8:	0003      	movs	r3, r0
 80086fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086fc:	e009      	b.n	8008712 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fe:	f7fd f963 	bl	80059c8 <HAL_GetTick>
 8008702:	0002      	movs	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	4a79      	ldr	r2, [pc, #484]	@ (80088f0 <HAL_RCC_OscConfig+0x620>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e0e6      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008712:	4b75      	ldr	r3, [pc, #468]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008716:	2202      	movs	r2, #2
 8008718:	4013      	ands	r3, r2
 800871a:	d0f0      	beq.n	80086fe <HAL_RCC_OscConfig+0x42e>
 800871c:	e013      	b.n	8008746 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871e:	f7fd f953 	bl	80059c8 <HAL_GetTick>
 8008722:	0003      	movs	r3, r0
 8008724:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008726:	e009      	b.n	800873c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008728:	f7fd f94e 	bl	80059c8 <HAL_GetTick>
 800872c:	0002      	movs	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	4a6f      	ldr	r2, [pc, #444]	@ (80088f0 <HAL_RCC_OscConfig+0x620>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e0d1      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800873c:	4b6a      	ldr	r3, [pc, #424]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 800873e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008740:	2202      	movs	r2, #2
 8008742:	4013      	ands	r3, r2
 8008744:	d1f0      	bne.n	8008728 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008746:	231f      	movs	r3, #31
 8008748:	18fb      	adds	r3, r7, r3
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d105      	bne.n	800875c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008750:	4b65      	ldr	r3, [pc, #404]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008754:	4b64      	ldr	r3, [pc, #400]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008756:	4967      	ldr	r1, [pc, #412]	@ (80088f4 <HAL_RCC_OscConfig+0x624>)
 8008758:	400a      	ands	r2, r1
 800875a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d100      	bne.n	8008766 <HAL_RCC_OscConfig+0x496>
 8008764:	e0bb      	b.n	80088de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008766:	4b60      	ldr	r3, [pc, #384]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	2238      	movs	r2, #56	@ 0x38
 800876c:	4013      	ands	r3, r2
 800876e:	2b10      	cmp	r3, #16
 8008770:	d100      	bne.n	8008774 <HAL_RCC_OscConfig+0x4a4>
 8008772:	e07b      	b.n	800886c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d156      	bne.n	800882a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800877c:	4b5a      	ldr	r3, [pc, #360]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b59      	ldr	r3, [pc, #356]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008782:	495d      	ldr	r1, [pc, #372]	@ (80088f8 <HAL_RCC_OscConfig+0x628>)
 8008784:	400a      	ands	r2, r1
 8008786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008788:	f7fd f91e 	bl	80059c8 <HAL_GetTick>
 800878c:	0003      	movs	r3, r0
 800878e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008790:	e008      	b.n	80087a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008792:	f7fd f919 	bl	80059c8 <HAL_GetTick>
 8008796:	0002      	movs	r2, r0
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	2b02      	cmp	r3, #2
 800879e:	d901      	bls.n	80087a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e09d      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087a4:	4b50      	ldr	r3, [pc, #320]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	2380      	movs	r3, #128	@ 0x80
 80087aa:	049b      	lsls	r3, r3, #18
 80087ac:	4013      	ands	r3, r2
 80087ae:	d1f0      	bne.n	8008792 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087b0:	4b4d      	ldr	r3, [pc, #308]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	4a51      	ldr	r2, [pc, #324]	@ (80088fc <HAL_RCC_OscConfig+0x62c>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	0019      	movs	r1, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1a      	ldr	r2, [r3, #32]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c2:	431a      	orrs	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	431a      	orrs	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d0:	431a      	orrs	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087dc:	431a      	orrs	r2, r3
 80087de:	4b42      	ldr	r3, [pc, #264]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087e0:	430a      	orrs	r2, r1
 80087e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e4:	4b40      	ldr	r3, [pc, #256]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b3f      	ldr	r3, [pc, #252]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087ea:	2180      	movs	r1, #128	@ 0x80
 80087ec:	0449      	lsls	r1, r1, #17
 80087ee:	430a      	orrs	r2, r1
 80087f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80087f2:	4b3d      	ldr	r3, [pc, #244]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	4b3c      	ldr	r3, [pc, #240]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 80087f8:	2180      	movs	r1, #128	@ 0x80
 80087fa:	0549      	lsls	r1, r1, #21
 80087fc:	430a      	orrs	r2, r1
 80087fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fd f8e2 	bl	80059c8 <HAL_GetTick>
 8008804:	0003      	movs	r3, r0
 8008806:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800880a:	f7fd f8dd 	bl	80059c8 <HAL_GetTick>
 800880e:	0002      	movs	r2, r0
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e061      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800881c:	4b32      	ldr	r3, [pc, #200]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	2380      	movs	r3, #128	@ 0x80
 8008822:	049b      	lsls	r3, r3, #18
 8008824:	4013      	ands	r3, r2
 8008826:	d0f0      	beq.n	800880a <HAL_RCC_OscConfig+0x53a>
 8008828:	e059      	b.n	80088de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800882a:	4b2f      	ldr	r3, [pc, #188]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	4b2e      	ldr	r3, [pc, #184]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008830:	4931      	ldr	r1, [pc, #196]	@ (80088f8 <HAL_RCC_OscConfig+0x628>)
 8008832:	400a      	ands	r2, r1
 8008834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008836:	f7fd f8c7 	bl	80059c8 <HAL_GetTick>
 800883a:	0003      	movs	r3, r0
 800883c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008840:	f7fd f8c2 	bl	80059c8 <HAL_GetTick>
 8008844:	0002      	movs	r2, r0
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b02      	cmp	r3, #2
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e046      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008852:	4b25      	ldr	r3, [pc, #148]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	2380      	movs	r3, #128	@ 0x80
 8008858:	049b      	lsls	r3, r3, #18
 800885a:	4013      	ands	r3, r2
 800885c:	d1f0      	bne.n	8008840 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800885e:	4b22      	ldr	r3, [pc, #136]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	4b21      	ldr	r3, [pc, #132]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 8008864:	4926      	ldr	r1, [pc, #152]	@ (8008900 <HAL_RCC_OscConfig+0x630>)
 8008866:	400a      	ands	r2, r1
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e038      	b.n	80088de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e033      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008878:	4b1b      	ldr	r3, [pc, #108]	@ (80088e8 <HAL_RCC_OscConfig+0x618>)
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2203      	movs	r2, #3
 8008882:	401a      	ands	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	429a      	cmp	r2, r3
 800888a:	d126      	bne.n	80088da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2270      	movs	r2, #112	@ 0x70
 8008890:	401a      	ands	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d11f      	bne.n	80088da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	23fe      	movs	r3, #254	@ 0xfe
 800889e:	01db      	lsls	r3, r3, #7
 80088a0:	401a      	ands	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d116      	bne.n	80088da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	23f8      	movs	r3, #248	@ 0xf8
 80088b0:	039b      	lsls	r3, r3, #14
 80088b2:	401a      	ands	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d10e      	bne.n	80088da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	23e0      	movs	r3, #224	@ 0xe0
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	401a      	ands	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d106      	bne.n	80088da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	0f5b      	lsrs	r3, r3, #29
 80088d0:	075a      	lsls	r2, r3, #29
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d001      	beq.n	80088de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	0018      	movs	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b008      	add	sp, #32
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40021000 	.word	0x40021000
 80088ec:	40007000 	.word	0x40007000
 80088f0:	00001388 	.word	0x00001388
 80088f4:	efffffff 	.word	0xefffffff
 80088f8:	feffffff 	.word	0xfeffffff
 80088fc:	11c1808c 	.word	0x11c1808c
 8008900:	eefefffc 	.word	0xeefefffc

08008904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e0e9      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008918:	4b76      	ldr	r3, [pc, #472]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2207      	movs	r2, #7
 800891e:	4013      	ands	r3, r2
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d91e      	bls.n	8008964 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008926:	4b73      	ldr	r3, [pc, #460]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2207      	movs	r2, #7
 800892c:	4393      	bics	r3, r2
 800892e:	0019      	movs	r1, r3
 8008930:	4b70      	ldr	r3, [pc, #448]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008938:	f7fd f846 	bl	80059c8 <HAL_GetTick>
 800893c:	0003      	movs	r3, r0
 800893e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008940:	e009      	b.n	8008956 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008942:	f7fd f841 	bl	80059c8 <HAL_GetTick>
 8008946:	0002      	movs	r2, r0
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	4a6a      	ldr	r2, [pc, #424]	@ (8008af8 <HAL_RCC_ClockConfig+0x1f4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d901      	bls.n	8008956 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e0ca      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008956:	4b67      	ldr	r3, [pc, #412]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2207      	movs	r2, #7
 800895c:	4013      	ands	r3, r2
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d1ee      	bne.n	8008942 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2202      	movs	r2, #2
 800896a:	4013      	ands	r3, r2
 800896c:	d015      	beq.n	800899a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2204      	movs	r2, #4
 8008974:	4013      	ands	r3, r2
 8008976:	d006      	beq.n	8008986 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008978:	4b60      	ldr	r3, [pc, #384]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	4b5f      	ldr	r3, [pc, #380]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 800897e:	21e0      	movs	r1, #224	@ 0xe0
 8008980:	01c9      	lsls	r1, r1, #7
 8008982:	430a      	orrs	r2, r1
 8008984:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008986:	4b5d      	ldr	r3, [pc, #372]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	4a5d      	ldr	r2, [pc, #372]	@ (8008b00 <HAL_RCC_ClockConfig+0x1fc>)
 800898c:	4013      	ands	r3, r2
 800898e:	0019      	movs	r1, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	4b59      	ldr	r3, [pc, #356]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008996:	430a      	orrs	r2, r1
 8008998:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2201      	movs	r2, #1
 80089a0:	4013      	ands	r3, r2
 80089a2:	d057      	beq.n	8008a54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d107      	bne.n	80089bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ac:	4b53      	ldr	r3, [pc, #332]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	2380      	movs	r3, #128	@ 0x80
 80089b2:	029b      	lsls	r3, r3, #10
 80089b4:	4013      	ands	r3, r2
 80089b6:	d12b      	bne.n	8008a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e097      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d107      	bne.n	80089d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089c4:	4b4d      	ldr	r3, [pc, #308]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	2380      	movs	r3, #128	@ 0x80
 80089ca:	049b      	lsls	r3, r3, #18
 80089cc:	4013      	ands	r3, r2
 80089ce:	d11f      	bne.n	8008a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e08b      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d107      	bne.n	80089ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089dc:	4b47      	ldr	r3, [pc, #284]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2380      	movs	r3, #128	@ 0x80
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	4013      	ands	r3, r2
 80089e6:	d113      	bne.n	8008a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e07f      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d106      	bne.n	8008a02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089f4:	4b41      	ldr	r3, [pc, #260]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 80089f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089f8:	2202      	movs	r2, #2
 80089fa:	4013      	ands	r3, r2
 80089fc:	d108      	bne.n	8008a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e074      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a02:	4b3e      	ldr	r3, [pc, #248]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a06:	2202      	movs	r2, #2
 8008a08:	4013      	ands	r3, r2
 8008a0a:	d101      	bne.n	8008a10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e06d      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a10:	4b3a      	ldr	r3, [pc, #232]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2207      	movs	r2, #7
 8008a16:	4393      	bics	r3, r2
 8008a18:	0019      	movs	r1, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	4b37      	ldr	r3, [pc, #220]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a24:	f7fc ffd0 	bl	80059c8 <HAL_GetTick>
 8008a28:	0003      	movs	r3, r0
 8008a2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a2c:	e009      	b.n	8008a42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a2e:	f7fc ffcb 	bl	80059c8 <HAL_GetTick>
 8008a32:	0002      	movs	r2, r0
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	4a2f      	ldr	r2, [pc, #188]	@ (8008af8 <HAL_RCC_ClockConfig+0x1f4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e054      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a42:	4b2e      	ldr	r3, [pc, #184]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	2238      	movs	r2, #56	@ 0x38
 8008a48:	401a      	ands	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d1ec      	bne.n	8008a2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a54:	4b27      	ldr	r3, [pc, #156]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2207      	movs	r2, #7
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d21e      	bcs.n	8008aa0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a62:	4b24      	ldr	r3, [pc, #144]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2207      	movs	r2, #7
 8008a68:	4393      	bics	r3, r2
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	4b21      	ldr	r3, [pc, #132]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a74:	f7fc ffa8 	bl	80059c8 <HAL_GetTick>
 8008a78:	0003      	movs	r3, r0
 8008a7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a7c:	e009      	b.n	8008a92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a7e:	f7fc ffa3 	bl	80059c8 <HAL_GetTick>
 8008a82:	0002      	movs	r2, r0
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	4a1b      	ldr	r2, [pc, #108]	@ (8008af8 <HAL_RCC_ClockConfig+0x1f4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e02c      	b.n	8008aec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a92:	4b18      	ldr	r3, [pc, #96]	@ (8008af4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2207      	movs	r2, #7
 8008a98:	4013      	ands	r3, r2
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d1ee      	bne.n	8008a7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	d009      	beq.n	8008abe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008aaa:	4b14      	ldr	r3, [pc, #80]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	4a15      	ldr	r2, [pc, #84]	@ (8008b04 <HAL_RCC_ClockConfig+0x200>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	4b10      	ldr	r3, [pc, #64]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008aba:	430a      	orrs	r2, r1
 8008abc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008abe:	f000 f829 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 8008ac2:	0001      	movs	r1, r0
 8008ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <HAL_RCC_ClockConfig+0x1f8>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	0a1b      	lsrs	r3, r3, #8
 8008aca:	220f      	movs	r2, #15
 8008acc:	401a      	ands	r2, r3
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <HAL_RCC_ClockConfig+0x204>)
 8008ad0:	0092      	lsls	r2, r2, #2
 8008ad2:	58d3      	ldr	r3, [r2, r3]
 8008ad4:	221f      	movs	r2, #31
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	000a      	movs	r2, r1
 8008ada:	40da      	lsrs	r2, r3
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <HAL_RCC_ClockConfig+0x208>)
 8008ade:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b10 <HAL_RCC_ClockConfig+0x20c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7fc ff13 	bl	8005910 <HAL_InitTick>
 8008aea:	0003      	movs	r3, r0
}
 8008aec:	0018      	movs	r0, r3
 8008aee:	46bd      	mov	sp, r7
 8008af0:	b004      	add	sp, #16
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	40022000 	.word	0x40022000
 8008af8:	00001388 	.word	0x00001388
 8008afc:	40021000 	.word	0x40021000
 8008b00:	fffff0ff 	.word	0xfffff0ff
 8008b04:	ffff8fff 	.word	0xffff8fff
 8008b08:	0800d520 	.word	0x0800d520
 8008b0c:	20000440 	.word	0x20000440
 8008b10:	20000444 	.word	0x20000444

08008b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2238      	movs	r2, #56	@ 0x38
 8008b20:	4013      	ands	r3, r2
 8008b22:	d10f      	bne.n	8008b44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008b24:	4b39      	ldr	r3, [pc, #228]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	0adb      	lsrs	r3, r3, #11
 8008b2a:	2207      	movs	r2, #7
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2201      	movs	r2, #1
 8008b30:	409a      	lsls	r2, r3
 8008b32:	0013      	movs	r3, r2
 8008b34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	4835      	ldr	r0, [pc, #212]	@ (8008c10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008b3a:	f7f7 fae3 	bl	8000104 <__udivsi3>
 8008b3e:	0003      	movs	r3, r0
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	e05d      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b44:	4b31      	ldr	r3, [pc, #196]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2238      	movs	r2, #56	@ 0x38
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b50:	4b30      	ldr	r3, [pc, #192]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	e054      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b56:	4b2d      	ldr	r3, [pc, #180]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2238      	movs	r2, #56	@ 0x38
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b10      	cmp	r3, #16
 8008b60:	d138      	bne.n	8008bd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008b62:	4b2a      	ldr	r3, [pc, #168]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	2203      	movs	r2, #3
 8008b68:	4013      	ands	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b6c:	4b27      	ldr	r3, [pc, #156]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	091b      	lsrs	r3, r3, #4
 8008b72:	2207      	movs	r2, #7
 8008b74:	4013      	ands	r3, r2
 8008b76:	3301      	adds	r3, #1
 8008b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d10d      	bne.n	8008b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	4824      	ldr	r0, [pc, #144]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b84:	f7f7 fabe 	bl	8000104 <__udivsi3>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	0019      	movs	r1, r3
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	227f      	movs	r2, #127	@ 0x7f
 8008b94:	4013      	ands	r3, r2
 8008b96:	434b      	muls	r3, r1
 8008b98:	617b      	str	r3, [r7, #20]
        break;
 8008b9a:	e00d      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	481c      	ldr	r0, [pc, #112]	@ (8008c10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008ba0:	f7f7 fab0 	bl	8000104 <__udivsi3>
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	0019      	movs	r1, r3
 8008ba8:	4b18      	ldr	r3, [pc, #96]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	0a1b      	lsrs	r3, r3, #8
 8008bae:	227f      	movs	r2, #127	@ 0x7f
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	434b      	muls	r3, r1
 8008bb4:	617b      	str	r3, [r7, #20]
        break;
 8008bb6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008bb8:	4b14      	ldr	r3, [pc, #80]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	0f5b      	lsrs	r3, r3, #29
 8008bbe:	2207      	movs	r2, #7
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f7f7 fa9b 	bl	8000104 <__udivsi3>
 8008bce:	0003      	movs	r3, r0
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	e015      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2238      	movs	r2, #56	@ 0x38
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d103      	bne.n	8008be8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008be0:	2380      	movs	r3, #128	@ 0x80
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	e00b      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008be8:	4b08      	ldr	r3, [pc, #32]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	2238      	movs	r2, #56	@ 0x38
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b18      	cmp	r3, #24
 8008bf2:	d103      	bne.n	8008bfc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008bf4:	23fa      	movs	r3, #250	@ 0xfa
 8008bf6:	01db      	lsls	r3, r3, #7
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	e001      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c00:	693b      	ldr	r3, [r7, #16]
}
 8008c02:	0018      	movs	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	b006      	add	sp, #24
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	46c0      	nop			@ (mov r8, r8)
 8008c0c:	40021000 	.word	0x40021000
 8008c10:	00f42400 	.word	0x00f42400
 8008c14:	007a1200 	.word	0x007a1200

08008c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c1c:	4b02      	ldr	r3, [pc, #8]	@ (8008c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
}
 8008c20:	0018      	movs	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	46c0      	nop			@ (mov r8, r8)
 8008c28:	20000440 	.word	0x20000440

08008c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c2c:	b5b0      	push	{r4, r5, r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008c30:	f7ff fff2 	bl	8008c18 <HAL_RCC_GetHCLKFreq>
 8008c34:	0004      	movs	r4, r0
 8008c36:	f7ff fb3f 	bl	80082b8 <LL_RCC_GetAPB1Prescaler>
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	0b1a      	lsrs	r2, r3, #12
 8008c3e:	4b05      	ldr	r3, [pc, #20]	@ (8008c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c40:	0092      	lsls	r2, r2, #2
 8008c42:	58d3      	ldr	r3, [r2, r3]
 8008c44:	221f      	movs	r2, #31
 8008c46:	4013      	ands	r3, r2
 8008c48:	40dc      	lsrs	r4, r3
 8008c4a:	0023      	movs	r3, r4
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bdb0      	pop	{r4, r5, r7, pc}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	0800d560 	.word	0x0800d560

08008c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008c60:	2313      	movs	r3, #19
 8008c62:	18fb      	adds	r3, r7, r3
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c68:	2312      	movs	r3, #18
 8008c6a:	18fb      	adds	r3, r7, r3
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	2380      	movs	r3, #128	@ 0x80
 8008c76:	029b      	lsls	r3, r3, #10
 8008c78:	4013      	ands	r3, r2
 8008c7a:	d100      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008c7c:	e0a3      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c7e:	2011      	movs	r0, #17
 8008c80:	183b      	adds	r3, r7, r0
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c86:	4ba5      	ldr	r3, [pc, #660]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c8a:	2380      	movs	r3, #128	@ 0x80
 8008c8c:	055b      	lsls	r3, r3, #21
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d110      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c92:	4ba2      	ldr	r3, [pc, #648]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c96:	4ba1      	ldr	r3, [pc, #644]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c98:	2180      	movs	r1, #128	@ 0x80
 8008c9a:	0549      	lsls	r1, r1, #21
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008ca0:	4b9e      	ldr	r3, [pc, #632]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ca4:	2380      	movs	r3, #128	@ 0x80
 8008ca6:	055b      	lsls	r3, r3, #21
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cae:	183b      	adds	r3, r7, r0
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cb4:	4b9a      	ldr	r3, [pc, #616]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b99      	ldr	r3, [pc, #612]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008cba:	2180      	movs	r1, #128	@ 0x80
 8008cbc:	0049      	lsls	r1, r1, #1
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cc2:	f7fc fe81 	bl	80059c8 <HAL_GetTick>
 8008cc6:	0003      	movs	r3, r0
 8008cc8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cca:	e00b      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ccc:	f7fc fe7c 	bl	80059c8 <HAL_GetTick>
 8008cd0:	0002      	movs	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d904      	bls.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008cda:	2313      	movs	r3, #19
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	2203      	movs	r2, #3
 8008ce0:	701a      	strb	r2, [r3, #0]
        break;
 8008ce2:	e005      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce4:	4b8e      	ldr	r3, [pc, #568]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	2380      	movs	r3, #128	@ 0x80
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	4013      	ands	r3, r2
 8008cee:	d0ed      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008cf0:	2313      	movs	r3, #19
 8008cf2:	18fb      	adds	r3, r7, r3
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d154      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cfa:	4b88      	ldr	r3, [pc, #544]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008cfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cfe:	23c0      	movs	r3, #192	@ 0xc0
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4013      	ands	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d019      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d014      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d16:	4b81      	ldr	r3, [pc, #516]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d1a:	4a82      	ldr	r2, [pc, #520]	@ (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d20:	4b7e      	ldr	r3, [pc, #504]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d24:	4b7d      	ldr	r3, [pc, #500]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d26:	2180      	movs	r1, #128	@ 0x80
 8008d28:	0249      	lsls	r1, r1, #9
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d32:	4b7a      	ldr	r3, [pc, #488]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d34:	497c      	ldr	r1, [pc, #496]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008d36:	400a      	ands	r2, r1
 8008d38:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d3a:	4b78      	ldr	r3, [pc, #480]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2201      	movs	r2, #1
 8008d44:	4013      	ands	r3, r2
 8008d46:	d016      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fc fe3e 	bl	80059c8 <HAL_GetTick>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d50:	e00c      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d52:	f7fc fe39 	bl	80059c8 <HAL_GetTick>
 8008d56:	0002      	movs	r2, r0
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	4a73      	ldr	r2, [pc, #460]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d904      	bls.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008d62:	2313      	movs	r3, #19
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	2203      	movs	r2, #3
 8008d68:	701a      	strb	r2, [r3, #0]
            break;
 8008d6a:	e004      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d70:	2202      	movs	r2, #2
 8008d72:	4013      	ands	r3, r2
 8008d74:	d0ed      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008d76:	2313      	movs	r3, #19
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d80:	4b66      	ldr	r3, [pc, #408]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d84:	4a67      	ldr	r2, [pc, #412]	@ (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	0019      	movs	r1, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d8e:	4b63      	ldr	r3, [pc, #396]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d90:	430a      	orrs	r2, r1
 8008d92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d94:	e00c      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d96:	2312      	movs	r3, #18
 8008d98:	18fb      	adds	r3, r7, r3
 8008d9a:	2213      	movs	r2, #19
 8008d9c:	18ba      	adds	r2, r7, r2
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	e005      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da4:	2312      	movs	r3, #18
 8008da6:	18fb      	adds	r3, r7, r3
 8008da8:	2213      	movs	r2, #19
 8008daa:	18ba      	adds	r2, r7, r2
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008db0:	2311      	movs	r3, #17
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d105      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dba:	4b58      	ldr	r3, [pc, #352]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dbe:	4b57      	ldr	r3, [pc, #348]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dc0:	495b      	ldr	r1, [pc, #364]	@ (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dc2:	400a      	ands	r2, r1
 8008dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4013      	ands	r3, r2
 8008dce:	d009      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dd0:	4b52      	ldr	r3, [pc, #328]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	4393      	bics	r3, r2
 8008dd8:	0019      	movs	r1, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	4b4f      	ldr	r3, [pc, #316]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008de0:	430a      	orrs	r2, r1
 8008de2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2210      	movs	r2, #16
 8008dea:	4013      	ands	r3, r2
 8008dec:	d009      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008dee:	4b4b      	ldr	r3, [pc, #300]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df2:	4a50      	ldr	r2, [pc, #320]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	0019      	movs	r1, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	4b47      	ldr	r3, [pc, #284]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	2380      	movs	r3, #128	@ 0x80
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e0e:	4b43      	ldr	r3, [pc, #268]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e12:	4a49      	ldr	r2, [pc, #292]	@ (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	2380      	movs	r3, #128	@ 0x80
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	d009      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e32:	4a42      	ldr	r2, [pc, #264]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	0019      	movs	r1, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699a      	ldr	r2, [r3, #24]
 8008e3c:	4b37      	ldr	r3, [pc, #220]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2220      	movs	r2, #32
 8008e48:	4013      	ands	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e4c:	4b33      	ldr	r3, [pc, #204]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e50:	4a3b      	ldr	r2, [pc, #236]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e52:	4013      	ands	r3, r2
 8008e54:	0019      	movs	r1, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	4b30      	ldr	r3, [pc, #192]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	2380      	movs	r3, #128	@ 0x80
 8008e66:	01db      	lsls	r3, r3, #7
 8008e68:	4013      	ands	r3, r2
 8008e6a:	d015      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	0899      	lsrs	r1, r3, #2
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	4b28      	ldr	r3, [pc, #160]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69da      	ldr	r2, [r3, #28]
 8008e82:	2380      	movs	r3, #128	@ 0x80
 8008e84:	05db      	lsls	r3, r3, #23
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d106      	bne.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008e8a:	4b24      	ldr	r3, [pc, #144]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	4b23      	ldr	r3, [pc, #140]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e90:	2180      	movs	r1, #128	@ 0x80
 8008e92:	0249      	lsls	r1, r1, #9
 8008e94:	430a      	orrs	r2, r1
 8008e96:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	2380      	movs	r3, #128	@ 0x80
 8008e9e:	039b      	lsls	r3, r3, #14
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	d016      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea8:	4a26      	ldr	r2, [pc, #152]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	0019      	movs	r1, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1a      	ldr	r2, [r3, #32]
 8008ebc:	2380      	movs	r3, #128	@ 0x80
 8008ebe:	03db      	lsls	r3, r3, #15
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d106      	bne.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008ec4:	4b15      	ldr	r3, [pc, #84]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	4b14      	ldr	r3, [pc, #80]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008eca:	2180      	movs	r1, #128	@ 0x80
 8008ecc:	0449      	lsls	r1, r1, #17
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	2380      	movs	r3, #128	@ 0x80
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	4013      	ands	r3, r2
 8008edc:	d016      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008ede:	4b0f      	ldr	r3, [pc, #60]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee2:	4a19      	ldr	r2, [pc, #100]	@ (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	0019      	movs	r1, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	2380      	movs	r3, #128	@ 0x80
 8008ef8:	01db      	lsls	r3, r3, #7
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d106      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008efe:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	4b06      	ldr	r3, [pc, #24]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f04:	2180      	movs	r1, #128	@ 0x80
 8008f06:	0249      	lsls	r1, r1, #9
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008f0c:	2312      	movs	r3, #18
 8008f0e:	18fb      	adds	r3, r7, r3
 8008f10:	781b      	ldrb	r3, [r3, #0]
}
 8008f12:	0018      	movs	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b006      	add	sp, #24
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	40007000 	.word	0x40007000
 8008f24:	fffffcff 	.word	0xfffffcff
 8008f28:	fffeffff 	.word	0xfffeffff
 8008f2c:	00001388 	.word	0x00001388
 8008f30:	efffffff 	.word	0xefffffff
 8008f34:	fffff3ff 	.word	0xfffff3ff
 8008f38:	fff3ffff 	.word	0xfff3ffff
 8008f3c:	ffcfffff 	.word	0xffcfffff
 8008f40:	ffffcfff 	.word	0xffffcfff
 8008f44:	ffbfffff 	.word	0xffbfffff
 8008f48:	ffff3fff 	.word	0xffff3fff

08008f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e056      	b.n	800900c <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	223d      	movs	r2, #61	@ 0x3d
 8008f62:	5c9b      	ldrb	r3, [r3, r2]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d113      	bne.n	8008f92 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	223c      	movs	r2, #60	@ 0x3c
 8008f6e:	2100      	movs	r1, #0
 8008f70:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	0018      	movs	r0, r3
 8008f76:	f002 f8c5 	bl	800b104 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a23      	ldr	r2, [pc, #140]	@ (8009014 <HAL_TIM_Base_Init+0xc8>)
 8008f86:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	0010      	movs	r0, r2
 8008f90:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	223d      	movs	r2, #61	@ 0x3d
 8008f96:	2102      	movs	r1, #2
 8008f98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	0019      	movs	r1, r3
 8008fa4:	0010      	movs	r0, r2
 8008fa6:	f001 fbaf 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2248      	movs	r2, #72	@ 0x48
 8008fae:	2101      	movs	r1, #1
 8008fb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	223e      	movs	r2, #62	@ 0x3e
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	5499      	strb	r1, [r3, r2]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	223f      	movs	r2, #63	@ 0x3f
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	5499      	strb	r1, [r3, r2]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2240      	movs	r2, #64	@ 0x40
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	5499      	strb	r1, [r3, r2]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2241      	movs	r2, #65	@ 0x41
 8008fce:	2101      	movs	r1, #1
 8008fd0:	5499      	strb	r1, [r3, r2]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2242      	movs	r2, #66	@ 0x42
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	5499      	strb	r1, [r3, r2]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2243      	movs	r2, #67	@ 0x43
 8008fde:	2101      	movs	r1, #1
 8008fe0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2244      	movs	r2, #68	@ 0x44
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	5499      	strb	r1, [r3, r2]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2245      	movs	r2, #69	@ 0x45
 8008fee:	2101      	movs	r1, #1
 8008ff0:	5499      	strb	r1, [r3, r2]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2246      	movs	r2, #70	@ 0x46
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	5499      	strb	r1, [r3, r2]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2247      	movs	r2, #71	@ 0x47
 8008ffe:	2101      	movs	r1, #1
 8009000:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	223d      	movs	r2, #61	@ 0x3d
 8009006:	2101      	movs	r1, #1
 8009008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	0018      	movs	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	b002      	add	sp, #8
 8009012:	bd80      	pop	{r7, pc}
 8009014:	08004969 	.word	0x08004969

08009018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	223d      	movs	r2, #61	@ 0x3d
 8009024:	5c9b      	ldrb	r3, [r3, r2]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	d001      	beq.n	8009030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e035      	b.n	800909c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	223d      	movs	r2, #61	@ 0x3d
 8009034:	2102      	movs	r1, #2
 8009036:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a19      	ldr	r2, [pc, #100]	@ (80090a4 <HAL_TIM_Base_Start+0x8c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00a      	beq.n	8009058 <HAL_TIM_Base_Start+0x40>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	2380      	movs	r3, #128	@ 0x80
 8009048:	05db      	lsls	r3, r3, #23
 800904a:	429a      	cmp	r2, r3
 800904c:	d004      	beq.n	8009058 <HAL_TIM_Base_Start+0x40>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a15      	ldr	r2, [pc, #84]	@ (80090a8 <HAL_TIM_Base_Start+0x90>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d116      	bne.n	8009086 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	4a13      	ldr	r2, [pc, #76]	@ (80090ac <HAL_TIM_Base_Start+0x94>)
 8009060:	4013      	ands	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b06      	cmp	r3, #6
 8009068:	d016      	beq.n	8009098 <HAL_TIM_Base_Start+0x80>
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	2380      	movs	r3, #128	@ 0x80
 800906e:	025b      	lsls	r3, r3, #9
 8009070:	429a      	cmp	r2, r3
 8009072:	d011      	beq.n	8009098 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2101      	movs	r1, #1
 8009080:	430a      	orrs	r2, r1
 8009082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009084:	e008      	b.n	8009098 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2101      	movs	r1, #1
 8009092:	430a      	orrs	r2, r1
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e000      	b.n	800909a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009098:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	b004      	add	sp, #16
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40000400 	.word	0x40000400
 80090ac:	00010007 	.word	0x00010007

080090b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	223d      	movs	r2, #61	@ 0x3d
 80090bc:	5c9b      	ldrb	r3, [r3, r2]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d001      	beq.n	80090c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e03d      	b.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	223d      	movs	r2, #61	@ 0x3d
 80090cc:	2102      	movs	r1, #2
 80090ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2101      	movs	r1, #1
 80090dc:	430a      	orrs	r2, r1
 80090de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a19      	ldr	r2, [pc, #100]	@ (800914c <HAL_TIM_Base_Start_IT+0x9c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00a      	beq.n	8009100 <HAL_TIM_Base_Start_IT+0x50>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	2380      	movs	r3, #128	@ 0x80
 80090f0:	05db      	lsls	r3, r3, #23
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d004      	beq.n	8009100 <HAL_TIM_Base_Start_IT+0x50>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a15      	ldr	r2, [pc, #84]	@ (8009150 <HAL_TIM_Base_Start_IT+0xa0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d116      	bne.n	800912e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	4a13      	ldr	r2, [pc, #76]	@ (8009154 <HAL_TIM_Base_Start_IT+0xa4>)
 8009108:	4013      	ands	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b06      	cmp	r3, #6
 8009110:	d016      	beq.n	8009140 <HAL_TIM_Base_Start_IT+0x90>
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	2380      	movs	r3, #128	@ 0x80
 8009116:	025b      	lsls	r3, r3, #9
 8009118:	429a      	cmp	r2, r3
 800911a:	d011      	beq.n	8009140 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2101      	movs	r1, #1
 8009128:	430a      	orrs	r2, r1
 800912a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800912c:	e008      	b.n	8009140 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2101      	movs	r1, #1
 800913a:	430a      	orrs	r2, r1
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e000      	b.n	8009142 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009140:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	0018      	movs	r0, r3
 8009146:	46bd      	mov	sp, r7
 8009148:	b004      	add	sp, #16
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40012c00 	.word	0x40012c00
 8009150:	40000400 	.word	0x40000400
 8009154:	00010007 	.word	0x00010007

08009158 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e056      	b.n	8009218 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	223d      	movs	r2, #61	@ 0x3d
 800916e:	5c9b      	ldrb	r3, [r3, r2]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d113      	bne.n	800919e <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	223c      	movs	r2, #60	@ 0x3c
 800917a:	2100      	movs	r1, #0
 800917c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	0018      	movs	r0, r3
 8009182:	f001 ffbf 	bl	800b104 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a23      	ldr	r2, [pc, #140]	@ (8009220 <HAL_TIM_OC_Init+0xc8>)
 8009192:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	0010      	movs	r0, r2
 800919c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	223d      	movs	r2, #61	@ 0x3d
 80091a2:	2102      	movs	r1, #2
 80091a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3304      	adds	r3, #4
 80091ae:	0019      	movs	r1, r3
 80091b0:	0010      	movs	r0, r2
 80091b2:	f001 faa9 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2248      	movs	r2, #72	@ 0x48
 80091ba:	2101      	movs	r1, #1
 80091bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	223e      	movs	r2, #62	@ 0x3e
 80091c2:	2101      	movs	r1, #1
 80091c4:	5499      	strb	r1, [r3, r2]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	223f      	movs	r2, #63	@ 0x3f
 80091ca:	2101      	movs	r1, #1
 80091cc:	5499      	strb	r1, [r3, r2]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2240      	movs	r2, #64	@ 0x40
 80091d2:	2101      	movs	r1, #1
 80091d4:	5499      	strb	r1, [r3, r2]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2241      	movs	r2, #65	@ 0x41
 80091da:	2101      	movs	r1, #1
 80091dc:	5499      	strb	r1, [r3, r2]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2242      	movs	r2, #66	@ 0x42
 80091e2:	2101      	movs	r1, #1
 80091e4:	5499      	strb	r1, [r3, r2]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2243      	movs	r2, #67	@ 0x43
 80091ea:	2101      	movs	r1, #1
 80091ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2244      	movs	r2, #68	@ 0x44
 80091f2:	2101      	movs	r1, #1
 80091f4:	5499      	strb	r1, [r3, r2]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2245      	movs	r2, #69	@ 0x45
 80091fa:	2101      	movs	r1, #1
 80091fc:	5499      	strb	r1, [r3, r2]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2246      	movs	r2, #70	@ 0x46
 8009202:	2101      	movs	r1, #1
 8009204:	5499      	strb	r1, [r3, r2]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2247      	movs	r2, #71	@ 0x47
 800920a:	2101      	movs	r1, #1
 800920c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	223d      	movs	r2, #61	@ 0x3d
 8009212:	2101      	movs	r1, #1
 8009214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b002      	add	sp, #8
 800921e:	bd80      	pop	{r7, pc}
 8009220:	08009225 	.word	0x08009225

08009224 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800922c:	46c0      	nop			@ (mov r8, r8)
 800922e:	46bd      	mov	sp, r7
 8009230:	b002      	add	sp, #8
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800923e:	230f      	movs	r3, #15
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <HAL_TIM_OC_Start_IT+0x2a>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	223e      	movs	r2, #62	@ 0x3e
 8009250:	5c9b      	ldrb	r3, [r3, r2]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	3b01      	subs	r3, #1
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	4193      	sbcs	r3, r2
 800925a:	b2db      	uxtb	r3, r3
 800925c:	e037      	b.n	80092ce <HAL_TIM_OC_Start_IT+0x9a>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b04      	cmp	r3, #4
 8009262:	d108      	bne.n	8009276 <HAL_TIM_OC_Start_IT+0x42>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	223f      	movs	r2, #63	@ 0x3f
 8009268:	5c9b      	ldrb	r3, [r3, r2]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	1e5a      	subs	r2, r3, #1
 8009270:	4193      	sbcs	r3, r2
 8009272:	b2db      	uxtb	r3, r3
 8009274:	e02b      	b.n	80092ce <HAL_TIM_OC_Start_IT+0x9a>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b08      	cmp	r3, #8
 800927a:	d108      	bne.n	800928e <HAL_TIM_OC_Start_IT+0x5a>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2240      	movs	r2, #64	@ 0x40
 8009280:	5c9b      	ldrb	r3, [r3, r2]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	1e5a      	subs	r2, r3, #1
 8009288:	4193      	sbcs	r3, r2
 800928a:	b2db      	uxtb	r3, r3
 800928c:	e01f      	b.n	80092ce <HAL_TIM_OC_Start_IT+0x9a>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b0c      	cmp	r3, #12
 8009292:	d108      	bne.n	80092a6 <HAL_TIM_OC_Start_IT+0x72>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2241      	movs	r2, #65	@ 0x41
 8009298:	5c9b      	ldrb	r3, [r3, r2]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	3b01      	subs	r3, #1
 800929e:	1e5a      	subs	r2, r3, #1
 80092a0:	4193      	sbcs	r3, r2
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	e013      	b.n	80092ce <HAL_TIM_OC_Start_IT+0x9a>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b10      	cmp	r3, #16
 80092aa:	d108      	bne.n	80092be <HAL_TIM_OC_Start_IT+0x8a>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2242      	movs	r2, #66	@ 0x42
 80092b0:	5c9b      	ldrb	r3, [r3, r2]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	1e5a      	subs	r2, r3, #1
 80092b8:	4193      	sbcs	r3, r2
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	e007      	b.n	80092ce <HAL_TIM_OC_Start_IT+0x9a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2243      	movs	r2, #67	@ 0x43
 80092c2:	5c9b      	ldrb	r3, [r3, r2]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	1e5a      	subs	r2, r3, #1
 80092ca:	4193      	sbcs	r3, r2
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e0c4      	b.n	8009460 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <HAL_TIM_OC_Start_IT+0xb2>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	223e      	movs	r2, #62	@ 0x3e
 80092e0:	2102      	movs	r1, #2
 80092e2:	5499      	strb	r1, [r3, r2]
 80092e4:	e023      	b.n	800932e <HAL_TIM_OC_Start_IT+0xfa>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d104      	bne.n	80092f6 <HAL_TIM_OC_Start_IT+0xc2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	223f      	movs	r2, #63	@ 0x3f
 80092f0:	2102      	movs	r1, #2
 80092f2:	5499      	strb	r1, [r3, r2]
 80092f4:	e01b      	b.n	800932e <HAL_TIM_OC_Start_IT+0xfa>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_OC_Start_IT+0xd2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2240      	movs	r2, #64	@ 0x40
 8009300:	2102      	movs	r1, #2
 8009302:	5499      	strb	r1, [r3, r2]
 8009304:	e013      	b.n	800932e <HAL_TIM_OC_Start_IT+0xfa>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b0c      	cmp	r3, #12
 800930a:	d104      	bne.n	8009316 <HAL_TIM_OC_Start_IT+0xe2>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2241      	movs	r2, #65	@ 0x41
 8009310:	2102      	movs	r1, #2
 8009312:	5499      	strb	r1, [r3, r2]
 8009314:	e00b      	b.n	800932e <HAL_TIM_OC_Start_IT+0xfa>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b10      	cmp	r3, #16
 800931a:	d104      	bne.n	8009326 <HAL_TIM_OC_Start_IT+0xf2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2242      	movs	r2, #66	@ 0x42
 8009320:	2102      	movs	r1, #2
 8009322:	5499      	strb	r1, [r3, r2]
 8009324:	e003      	b.n	800932e <HAL_TIM_OC_Start_IT+0xfa>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2243      	movs	r2, #67	@ 0x43
 800932a:	2102      	movs	r1, #2
 800932c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b0c      	cmp	r3, #12
 8009332:	d02a      	beq.n	800938a <HAL_TIM_OC_Start_IT+0x156>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b0c      	cmp	r3, #12
 8009338:	d830      	bhi.n	800939c <HAL_TIM_OC_Start_IT+0x168>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b08      	cmp	r3, #8
 800933e:	d01b      	beq.n	8009378 <HAL_TIM_OC_Start_IT+0x144>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b08      	cmp	r3, #8
 8009344:	d82a      	bhi.n	800939c <HAL_TIM_OC_Start_IT+0x168>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <HAL_TIM_OC_Start_IT+0x120>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b04      	cmp	r3, #4
 8009350:	d009      	beq.n	8009366 <HAL_TIM_OC_Start_IT+0x132>
 8009352:	e023      	b.n	800939c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2102      	movs	r1, #2
 8009360:	430a      	orrs	r2, r1
 8009362:	60da      	str	r2, [r3, #12]
      break;
 8009364:	e01f      	b.n	80093a6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2104      	movs	r1, #4
 8009372:	430a      	orrs	r2, r1
 8009374:	60da      	str	r2, [r3, #12]
      break;
 8009376:	e016      	b.n	80093a6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2108      	movs	r1, #8
 8009384:	430a      	orrs	r2, r1
 8009386:	60da      	str	r2, [r3, #12]
      break;
 8009388:	e00d      	b.n	80093a6 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2110      	movs	r1, #16
 8009396:	430a      	orrs	r2, r1
 8009398:	60da      	str	r2, [r3, #12]
      break;
 800939a:	e004      	b.n	80093a6 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800939c:	230f      	movs	r3, #15
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	2201      	movs	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
      break;
 80093a4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80093a6:	230f      	movs	r3, #15
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d154      	bne.n	800945a <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	2201      	movs	r2, #1
 80093b8:	0018      	movs	r0, r3
 80093ba:	f001 fe7f 	bl	800b0bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a29      	ldr	r2, [pc, #164]	@ (8009468 <HAL_TIM_OC_Start_IT+0x234>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d009      	beq.n	80093dc <HAL_TIM_OC_Start_IT+0x1a8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a27      	ldr	r2, [pc, #156]	@ (800946c <HAL_TIM_OC_Start_IT+0x238>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d004      	beq.n	80093dc <HAL_TIM_OC_Start_IT+0x1a8>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a26      	ldr	r2, [pc, #152]	@ (8009470 <HAL_TIM_OC_Start_IT+0x23c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d101      	bne.n	80093e0 <HAL_TIM_OC_Start_IT+0x1ac>
 80093dc:	2301      	movs	r3, #1
 80093de:	e000      	b.n	80093e2 <HAL_TIM_OC_Start_IT+0x1ae>
 80093e0:	2300      	movs	r3, #0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d008      	beq.n	80093f8 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2180      	movs	r1, #128	@ 0x80
 80093f2:	0209      	lsls	r1, r1, #8
 80093f4:	430a      	orrs	r2, r1
 80093f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009468 <HAL_TIM_OC_Start_IT+0x234>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00a      	beq.n	8009418 <HAL_TIM_OC_Start_IT+0x1e4>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	2380      	movs	r3, #128	@ 0x80
 8009408:	05db      	lsls	r3, r3, #23
 800940a:	429a      	cmp	r2, r3
 800940c:	d004      	beq.n	8009418 <HAL_TIM_OC_Start_IT+0x1e4>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a18      	ldr	r2, [pc, #96]	@ (8009474 <HAL_TIM_OC_Start_IT+0x240>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d116      	bne.n	8009446 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	4a16      	ldr	r2, [pc, #88]	@ (8009478 <HAL_TIM_OC_Start_IT+0x244>)
 8009420:	4013      	ands	r3, r2
 8009422:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b06      	cmp	r3, #6
 8009428:	d016      	beq.n	8009458 <HAL_TIM_OC_Start_IT+0x224>
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	2380      	movs	r3, #128	@ 0x80
 800942e:	025b      	lsls	r3, r3, #9
 8009430:	429a      	cmp	r2, r3
 8009432:	d011      	beq.n	8009458 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2101      	movs	r1, #1
 8009440:	430a      	orrs	r2, r1
 8009442:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009444:	e008      	b.n	8009458 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2101      	movs	r1, #1
 8009452:	430a      	orrs	r2, r1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e000      	b.n	800945a <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009458:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800945a:	230f      	movs	r3, #15
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	781b      	ldrb	r3, [r3, #0]
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b004      	add	sp, #16
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40012c00 	.word	0x40012c00
 800946c:	40014400 	.word	0x40014400
 8009470:	40014800 	.word	0x40014800
 8009474:	40000400 	.word	0x40000400
 8009478:	00010007 	.word	0x00010007

0800947c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009486:	230f      	movs	r3, #15
 8009488:	18fb      	adds	r3, r7, r3
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d02a      	beq.n	80094ea <HAL_TIM_OC_Stop_IT+0x6e>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b0c      	cmp	r3, #12
 8009498:	d830      	bhi.n	80094fc <HAL_TIM_OC_Stop_IT+0x80>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b08      	cmp	r3, #8
 800949e:	d01b      	beq.n	80094d8 <HAL_TIM_OC_Stop_IT+0x5c>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	d82a      	bhi.n	80094fc <HAL_TIM_OC_Stop_IT+0x80>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_TIM_OC_Stop_IT+0x38>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d009      	beq.n	80094c6 <HAL_TIM_OC_Stop_IT+0x4a>
 80094b2:	e023      	b.n	80094fc <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2102      	movs	r1, #2
 80094c0:	438a      	bics	r2, r1
 80094c2:	60da      	str	r2, [r3, #12]
      break;
 80094c4:	e01f      	b.n	8009506 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2104      	movs	r1, #4
 80094d2:	438a      	bics	r2, r1
 80094d4:	60da      	str	r2, [r3, #12]
      break;
 80094d6:	e016      	b.n	8009506 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2108      	movs	r1, #8
 80094e4:	438a      	bics	r2, r1
 80094e6:	60da      	str	r2, [r3, #12]
      break;
 80094e8:	e00d      	b.n	8009506 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2110      	movs	r1, #16
 80094f6:	438a      	bics	r2, r1
 80094f8:	60da      	str	r2, [r3, #12]
      break;
 80094fa:	e004      	b.n	8009506 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80094fc:	230f      	movs	r3, #15
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	2201      	movs	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
      break;
 8009504:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009506:	230f      	movs	r3, #15
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d000      	beq.n	8009512 <HAL_TIM_OC_Stop_IT+0x96>
 8009510:	e06e      	b.n	80095f0 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	2200      	movs	r2, #0
 800951a:	0018      	movs	r0, r3
 800951c:	f001 fdce 	bl	800b0bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a36      	ldr	r2, [pc, #216]	@ (8009600 <HAL_TIM_OC_Stop_IT+0x184>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d009      	beq.n	800953e <HAL_TIM_OC_Stop_IT+0xc2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a35      	ldr	r2, [pc, #212]	@ (8009604 <HAL_TIM_OC_Stop_IT+0x188>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d004      	beq.n	800953e <HAL_TIM_OC_Stop_IT+0xc2>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a33      	ldr	r2, [pc, #204]	@ (8009608 <HAL_TIM_OC_Stop_IT+0x18c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d101      	bne.n	8009542 <HAL_TIM_OC_Stop_IT+0xc6>
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <HAL_TIM_OC_Stop_IT+0xc8>
 8009542:	2300      	movs	r3, #0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d013      	beq.n	8009570 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	4a2f      	ldr	r2, [pc, #188]	@ (800960c <HAL_TIM_OC_Stop_IT+0x190>)
 8009550:	4013      	ands	r3, r2
 8009552:	d10d      	bne.n	8009570 <HAL_TIM_OC_Stop_IT+0xf4>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	4a2d      	ldr	r2, [pc, #180]	@ (8009610 <HAL_TIM_OC_Stop_IT+0x194>)
 800955c:	4013      	ands	r3, r2
 800955e:	d107      	bne.n	8009570 <HAL_TIM_OC_Stop_IT+0xf4>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	492a      	ldr	r1, [pc, #168]	@ (8009614 <HAL_TIM_OC_Stop_IT+0x198>)
 800956c:	400a      	ands	r2, r1
 800956e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	4a25      	ldr	r2, [pc, #148]	@ (800960c <HAL_TIM_OC_Stop_IT+0x190>)
 8009578:	4013      	ands	r3, r2
 800957a:	d10d      	bne.n	8009598 <HAL_TIM_OC_Stop_IT+0x11c>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	4a23      	ldr	r2, [pc, #140]	@ (8009610 <HAL_TIM_OC_Stop_IT+0x194>)
 8009584:	4013      	ands	r3, r2
 8009586:	d107      	bne.n	8009598 <HAL_TIM_OC_Stop_IT+0x11c>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2101      	movs	r1, #1
 8009594:	438a      	bics	r2, r1
 8009596:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <HAL_TIM_OC_Stop_IT+0x12c>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	223e      	movs	r2, #62	@ 0x3e
 80095a2:	2101      	movs	r1, #1
 80095a4:	5499      	strb	r1, [r3, r2]
 80095a6:	e023      	b.n	80095f0 <HAL_TIM_OC_Stop_IT+0x174>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d104      	bne.n	80095b8 <HAL_TIM_OC_Stop_IT+0x13c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	223f      	movs	r2, #63	@ 0x3f
 80095b2:	2101      	movs	r1, #1
 80095b4:	5499      	strb	r1, [r3, r2]
 80095b6:	e01b      	b.n	80095f0 <HAL_TIM_OC_Stop_IT+0x174>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b08      	cmp	r3, #8
 80095bc:	d104      	bne.n	80095c8 <HAL_TIM_OC_Stop_IT+0x14c>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2240      	movs	r2, #64	@ 0x40
 80095c2:	2101      	movs	r1, #1
 80095c4:	5499      	strb	r1, [r3, r2]
 80095c6:	e013      	b.n	80095f0 <HAL_TIM_OC_Stop_IT+0x174>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b0c      	cmp	r3, #12
 80095cc:	d104      	bne.n	80095d8 <HAL_TIM_OC_Stop_IT+0x15c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2241      	movs	r2, #65	@ 0x41
 80095d2:	2101      	movs	r1, #1
 80095d4:	5499      	strb	r1, [r3, r2]
 80095d6:	e00b      	b.n	80095f0 <HAL_TIM_OC_Stop_IT+0x174>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b10      	cmp	r3, #16
 80095dc:	d104      	bne.n	80095e8 <HAL_TIM_OC_Stop_IT+0x16c>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2242      	movs	r2, #66	@ 0x42
 80095e2:	2101      	movs	r1, #1
 80095e4:	5499      	strb	r1, [r3, r2]
 80095e6:	e003      	b.n	80095f0 <HAL_TIM_OC_Stop_IT+0x174>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2243      	movs	r2, #67	@ 0x43
 80095ec:	2101      	movs	r1, #1
 80095ee:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80095f0:	230f      	movs	r3, #15
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	781b      	ldrb	r3, [r3, #0]
}
 80095f6:	0018      	movs	r0, r3
 80095f8:	46bd      	mov	sp, r7
 80095fa:	b004      	add	sp, #16
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	46c0      	nop			@ (mov r8, r8)
 8009600:	40012c00 	.word	0x40012c00
 8009604:	40014400 	.word	0x40014400
 8009608:	40014800 	.word	0x40014800
 800960c:	00001111 	.word	0x00001111
 8009610:	00000444 	.word	0x00000444
 8009614:	ffff7fff 	.word	0xffff7fff

08009618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e056      	b.n	80096d8 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	223d      	movs	r2, #61	@ 0x3d
 800962e:	5c9b      	ldrb	r3, [r3, r2]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d113      	bne.n	800965e <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	223c      	movs	r2, #60	@ 0x3c
 800963a:	2100      	movs	r1, #0
 800963c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	0018      	movs	r0, r3
 8009642:	f001 fd5f 	bl	800b104 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a23      	ldr	r2, [pc, #140]	@ (80096e0 <HAL_TIM_PWM_Init+0xc8>)
 8009652:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	0010      	movs	r0, r2
 800965c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	223d      	movs	r2, #61	@ 0x3d
 8009662:	2102      	movs	r1, #2
 8009664:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3304      	adds	r3, #4
 800966e:	0019      	movs	r1, r3
 8009670:	0010      	movs	r0, r2
 8009672:	f001 f849 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2248      	movs	r2, #72	@ 0x48
 800967a:	2101      	movs	r1, #1
 800967c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	223e      	movs	r2, #62	@ 0x3e
 8009682:	2101      	movs	r1, #1
 8009684:	5499      	strb	r1, [r3, r2]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	223f      	movs	r2, #63	@ 0x3f
 800968a:	2101      	movs	r1, #1
 800968c:	5499      	strb	r1, [r3, r2]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2240      	movs	r2, #64	@ 0x40
 8009692:	2101      	movs	r1, #1
 8009694:	5499      	strb	r1, [r3, r2]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2241      	movs	r2, #65	@ 0x41
 800969a:	2101      	movs	r1, #1
 800969c:	5499      	strb	r1, [r3, r2]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2242      	movs	r2, #66	@ 0x42
 80096a2:	2101      	movs	r1, #1
 80096a4:	5499      	strb	r1, [r3, r2]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2243      	movs	r2, #67	@ 0x43
 80096aa:	2101      	movs	r1, #1
 80096ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2244      	movs	r2, #68	@ 0x44
 80096b2:	2101      	movs	r1, #1
 80096b4:	5499      	strb	r1, [r3, r2]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2245      	movs	r2, #69	@ 0x45
 80096ba:	2101      	movs	r1, #1
 80096bc:	5499      	strb	r1, [r3, r2]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2246      	movs	r2, #70	@ 0x46
 80096c2:	2101      	movs	r1, #1
 80096c4:	5499      	strb	r1, [r3, r2]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2247      	movs	r2, #71	@ 0x47
 80096ca:	2101      	movs	r1, #1
 80096cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	223d      	movs	r2, #61	@ 0x3d
 80096d2:	2101      	movs	r1, #1
 80096d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	0018      	movs	r0, r3
 80096da:	46bd      	mov	sp, r7
 80096dc:	b002      	add	sp, #8
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	080096e5 	.word	0x080096e5

080096e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096ec:	46c0      	nop			@ (mov r8, r8)
 80096ee:	46bd      	mov	sp, r7
 80096f0:	b002      	add	sp, #8
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d108      	bne.n	8009716 <HAL_TIM_PWM_Start+0x22>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	223e      	movs	r2, #62	@ 0x3e
 8009708:	5c9b      	ldrb	r3, [r3, r2]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	1e5a      	subs	r2, r3, #1
 8009710:	4193      	sbcs	r3, r2
 8009712:	b2db      	uxtb	r3, r3
 8009714:	e037      	b.n	8009786 <HAL_TIM_PWM_Start+0x92>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2b04      	cmp	r3, #4
 800971a:	d108      	bne.n	800972e <HAL_TIM_PWM_Start+0x3a>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	223f      	movs	r2, #63	@ 0x3f
 8009720:	5c9b      	ldrb	r3, [r3, r2]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	1e5a      	subs	r2, r3, #1
 8009728:	4193      	sbcs	r3, r2
 800972a:	b2db      	uxtb	r3, r3
 800972c:	e02b      	b.n	8009786 <HAL_TIM_PWM_Start+0x92>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b08      	cmp	r3, #8
 8009732:	d108      	bne.n	8009746 <HAL_TIM_PWM_Start+0x52>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2240      	movs	r2, #64	@ 0x40
 8009738:	5c9b      	ldrb	r3, [r3, r2]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	1e5a      	subs	r2, r3, #1
 8009740:	4193      	sbcs	r3, r2
 8009742:	b2db      	uxtb	r3, r3
 8009744:	e01f      	b.n	8009786 <HAL_TIM_PWM_Start+0x92>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b0c      	cmp	r3, #12
 800974a:	d108      	bne.n	800975e <HAL_TIM_PWM_Start+0x6a>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2241      	movs	r2, #65	@ 0x41
 8009750:	5c9b      	ldrb	r3, [r3, r2]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	3b01      	subs	r3, #1
 8009756:	1e5a      	subs	r2, r3, #1
 8009758:	4193      	sbcs	r3, r2
 800975a:	b2db      	uxtb	r3, r3
 800975c:	e013      	b.n	8009786 <HAL_TIM_PWM_Start+0x92>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b10      	cmp	r3, #16
 8009762:	d108      	bne.n	8009776 <HAL_TIM_PWM_Start+0x82>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2242      	movs	r2, #66	@ 0x42
 8009768:	5c9b      	ldrb	r3, [r3, r2]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	3b01      	subs	r3, #1
 800976e:	1e5a      	subs	r2, r3, #1
 8009770:	4193      	sbcs	r3, r2
 8009772:	b2db      	uxtb	r3, r3
 8009774:	e007      	b.n	8009786 <HAL_TIM_PWM_Start+0x92>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2243      	movs	r2, #67	@ 0x43
 800977a:	5c9b      	ldrb	r3, [r3, r2]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	1e5a      	subs	r2, r3, #1
 8009782:	4193      	sbcs	r3, r2
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e081      	b.n	8009892 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <HAL_TIM_PWM_Start+0xaa>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	223e      	movs	r2, #62	@ 0x3e
 8009798:	2102      	movs	r1, #2
 800979a:	5499      	strb	r1, [r3, r2]
 800979c:	e023      	b.n	80097e6 <HAL_TIM_PWM_Start+0xf2>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d104      	bne.n	80097ae <HAL_TIM_PWM_Start+0xba>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	223f      	movs	r2, #63	@ 0x3f
 80097a8:	2102      	movs	r1, #2
 80097aa:	5499      	strb	r1, [r3, r2]
 80097ac:	e01b      	b.n	80097e6 <HAL_TIM_PWM_Start+0xf2>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d104      	bne.n	80097be <HAL_TIM_PWM_Start+0xca>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2240      	movs	r2, #64	@ 0x40
 80097b8:	2102      	movs	r1, #2
 80097ba:	5499      	strb	r1, [r3, r2]
 80097bc:	e013      	b.n	80097e6 <HAL_TIM_PWM_Start+0xf2>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b0c      	cmp	r3, #12
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_PWM_Start+0xda>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2241      	movs	r2, #65	@ 0x41
 80097c8:	2102      	movs	r1, #2
 80097ca:	5499      	strb	r1, [r3, r2]
 80097cc:	e00b      	b.n	80097e6 <HAL_TIM_PWM_Start+0xf2>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b10      	cmp	r3, #16
 80097d2:	d104      	bne.n	80097de <HAL_TIM_PWM_Start+0xea>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2242      	movs	r2, #66	@ 0x42
 80097d8:	2102      	movs	r1, #2
 80097da:	5499      	strb	r1, [r3, r2]
 80097dc:	e003      	b.n	80097e6 <HAL_TIM_PWM_Start+0xf2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2243      	movs	r2, #67	@ 0x43
 80097e2:	2102      	movs	r1, #2
 80097e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	2201      	movs	r2, #1
 80097ee:	0018      	movs	r0, r3
 80097f0:	f001 fc64 	bl	800b0bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a28      	ldr	r2, [pc, #160]	@ (800989c <HAL_TIM_PWM_Start+0x1a8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_TIM_PWM_Start+0x11e>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a27      	ldr	r2, [pc, #156]	@ (80098a0 <HAL_TIM_PWM_Start+0x1ac>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_TIM_PWM_Start+0x11e>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a25      	ldr	r2, [pc, #148]	@ (80098a4 <HAL_TIM_PWM_Start+0x1b0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d101      	bne.n	8009816 <HAL_TIM_PWM_Start+0x122>
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <HAL_TIM_PWM_Start+0x124>
 8009816:	2300      	movs	r3, #0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d008      	beq.n	800982e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2180      	movs	r1, #128	@ 0x80
 8009828:	0209      	lsls	r1, r1, #8
 800982a:	430a      	orrs	r2, r1
 800982c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a1a      	ldr	r2, [pc, #104]	@ (800989c <HAL_TIM_PWM_Start+0x1a8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00a      	beq.n	800984e <HAL_TIM_PWM_Start+0x15a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	2380      	movs	r3, #128	@ 0x80
 800983e:	05db      	lsls	r3, r3, #23
 8009840:	429a      	cmp	r2, r3
 8009842:	d004      	beq.n	800984e <HAL_TIM_PWM_Start+0x15a>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a17      	ldr	r2, [pc, #92]	@ (80098a8 <HAL_TIM_PWM_Start+0x1b4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d116      	bne.n	800987c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	4a15      	ldr	r2, [pc, #84]	@ (80098ac <HAL_TIM_PWM_Start+0x1b8>)
 8009856:	4013      	ands	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b06      	cmp	r3, #6
 800985e:	d016      	beq.n	800988e <HAL_TIM_PWM_Start+0x19a>
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	2380      	movs	r3, #128	@ 0x80
 8009864:	025b      	lsls	r3, r3, #9
 8009866:	429a      	cmp	r2, r3
 8009868:	d011      	beq.n	800988e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2101      	movs	r1, #1
 8009876:	430a      	orrs	r2, r1
 8009878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987a:	e008      	b.n	800988e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2101      	movs	r1, #1
 8009888:	430a      	orrs	r2, r1
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e000      	b.n	8009890 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	0018      	movs	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	b004      	add	sp, #16
 8009898:	bd80      	pop	{r7, pc}
 800989a:	46c0      	nop			@ (mov r8, r8)
 800989c:	40012c00 	.word	0x40012c00
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800
 80098a8:	40000400 	.word	0x40000400
 80098ac:	00010007 	.word	0x00010007

080098b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e056      	b.n	8009970 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	223d      	movs	r2, #61	@ 0x3d
 80098c6:	5c9b      	ldrb	r3, [r3, r2]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d113      	bne.n	80098f6 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	223c      	movs	r2, #60	@ 0x3c
 80098d2:	2100      	movs	r1, #0
 80098d4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	0018      	movs	r0, r3
 80098da:	f001 fc13 	bl	800b104 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a23      	ldr	r2, [pc, #140]	@ (8009978 <HAL_TIM_IC_Init+0xc8>)
 80098ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	0010      	movs	r0, r2
 80098f4:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	223d      	movs	r2, #61	@ 0x3d
 80098fa:	2102      	movs	r1, #2
 80098fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3304      	adds	r3, #4
 8009906:	0019      	movs	r1, r3
 8009908:	0010      	movs	r0, r2
 800990a:	f000 fefd 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2248      	movs	r2, #72	@ 0x48
 8009912:	2101      	movs	r1, #1
 8009914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	223e      	movs	r2, #62	@ 0x3e
 800991a:	2101      	movs	r1, #1
 800991c:	5499      	strb	r1, [r3, r2]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	223f      	movs	r2, #63	@ 0x3f
 8009922:	2101      	movs	r1, #1
 8009924:	5499      	strb	r1, [r3, r2]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2240      	movs	r2, #64	@ 0x40
 800992a:	2101      	movs	r1, #1
 800992c:	5499      	strb	r1, [r3, r2]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2241      	movs	r2, #65	@ 0x41
 8009932:	2101      	movs	r1, #1
 8009934:	5499      	strb	r1, [r3, r2]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2242      	movs	r2, #66	@ 0x42
 800993a:	2101      	movs	r1, #1
 800993c:	5499      	strb	r1, [r3, r2]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2243      	movs	r2, #67	@ 0x43
 8009942:	2101      	movs	r1, #1
 8009944:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2244      	movs	r2, #68	@ 0x44
 800994a:	2101      	movs	r1, #1
 800994c:	5499      	strb	r1, [r3, r2]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2245      	movs	r2, #69	@ 0x45
 8009952:	2101      	movs	r1, #1
 8009954:	5499      	strb	r1, [r3, r2]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2246      	movs	r2, #70	@ 0x46
 800995a:	2101      	movs	r1, #1
 800995c:	5499      	strb	r1, [r3, r2]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2247      	movs	r2, #71	@ 0x47
 8009962:	2101      	movs	r1, #1
 8009964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	223d      	movs	r2, #61	@ 0x3d
 800996a:	2101      	movs	r1, #1
 800996c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	0018      	movs	r0, r3
 8009972:	46bd      	mov	sp, r7
 8009974:	b002      	add	sp, #8
 8009976:	bd80      	pop	{r7, pc}
 8009978:	0800997d 	.word	0x0800997d

0800997c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009984:	46c0      	nop			@ (mov r8, r8)
 8009986:	46bd      	mov	sp, r7
 8009988:	b002      	add	sp, #8
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009996:	230f      	movs	r3, #15
 8009998:	18fb      	adds	r3, r7, r3
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <HAL_TIM_IC_Start_IT+0x22>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	223e      	movs	r2, #62	@ 0x3e
 80099a8:	5c9b      	ldrb	r3, [r3, r2]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	e023      	b.n	80099f6 <HAL_TIM_IC_Start_IT+0x6a>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d104      	bne.n	80099be <HAL_TIM_IC_Start_IT+0x32>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	223f      	movs	r2, #63	@ 0x3f
 80099b8:	5c9b      	ldrb	r3, [r3, r2]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	e01b      	b.n	80099f6 <HAL_TIM_IC_Start_IT+0x6a>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d104      	bne.n	80099ce <HAL_TIM_IC_Start_IT+0x42>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2240      	movs	r2, #64	@ 0x40
 80099c8:	5c9b      	ldrb	r3, [r3, r2]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e013      	b.n	80099f6 <HAL_TIM_IC_Start_IT+0x6a>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b0c      	cmp	r3, #12
 80099d2:	d104      	bne.n	80099de <HAL_TIM_IC_Start_IT+0x52>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2241      	movs	r2, #65	@ 0x41
 80099d8:	5c9b      	ldrb	r3, [r3, r2]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	e00b      	b.n	80099f6 <HAL_TIM_IC_Start_IT+0x6a>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_IC_Start_IT+0x62>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2242      	movs	r2, #66	@ 0x42
 80099e8:	5c9b      	ldrb	r3, [r3, r2]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	e003      	b.n	80099f6 <HAL_TIM_IC_Start_IT+0x6a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2243      	movs	r2, #67	@ 0x43
 80099f2:	5c9b      	ldrb	r3, [r3, r2]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	220e      	movs	r2, #14
 80099f8:	18ba      	adds	r2, r7, r2
 80099fa:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <HAL_TIM_IC_Start_IT+0x80>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2244      	movs	r2, #68	@ 0x44
 8009a06:	5c9b      	ldrb	r3, [r3, r2]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e013      	b.n	8009a34 <HAL_TIM_IC_Start_IT+0xa8>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d104      	bne.n	8009a1c <HAL_TIM_IC_Start_IT+0x90>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2245      	movs	r2, #69	@ 0x45
 8009a16:	5c9b      	ldrb	r3, [r3, r2]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	e00b      	b.n	8009a34 <HAL_TIM_IC_Start_IT+0xa8>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b08      	cmp	r3, #8
 8009a20:	d104      	bne.n	8009a2c <HAL_TIM_IC_Start_IT+0xa0>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2246      	movs	r2, #70	@ 0x46
 8009a26:	5c9b      	ldrb	r3, [r3, r2]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	e003      	b.n	8009a34 <HAL_TIM_IC_Start_IT+0xa8>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2247      	movs	r2, #71	@ 0x47
 8009a30:	5c9b      	ldrb	r3, [r3, r2]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	210d      	movs	r1, #13
 8009a36:	187a      	adds	r2, r7, r1
 8009a38:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a3a:	230e      	movs	r3, #14
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d103      	bne.n	8009a4c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a44:	187b      	adds	r3, r7, r1
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d001      	beq.n	8009a50 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e0c3      	b.n	8009bd8 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <HAL_TIM_IC_Start_IT+0xd4>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	223e      	movs	r2, #62	@ 0x3e
 8009a5a:	2102      	movs	r1, #2
 8009a5c:	5499      	strb	r1, [r3, r2]
 8009a5e:	e023      	b.n	8009aa8 <HAL_TIM_IC_Start_IT+0x11c>
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d104      	bne.n	8009a70 <HAL_TIM_IC_Start_IT+0xe4>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	223f      	movs	r2, #63	@ 0x3f
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	5499      	strb	r1, [r3, r2]
 8009a6e:	e01b      	b.n	8009aa8 <HAL_TIM_IC_Start_IT+0x11c>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b08      	cmp	r3, #8
 8009a74:	d104      	bne.n	8009a80 <HAL_TIM_IC_Start_IT+0xf4>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2240      	movs	r2, #64	@ 0x40
 8009a7a:	2102      	movs	r1, #2
 8009a7c:	5499      	strb	r1, [r3, r2]
 8009a7e:	e013      	b.n	8009aa8 <HAL_TIM_IC_Start_IT+0x11c>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b0c      	cmp	r3, #12
 8009a84:	d104      	bne.n	8009a90 <HAL_TIM_IC_Start_IT+0x104>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2241      	movs	r2, #65	@ 0x41
 8009a8a:	2102      	movs	r1, #2
 8009a8c:	5499      	strb	r1, [r3, r2]
 8009a8e:	e00b      	b.n	8009aa8 <HAL_TIM_IC_Start_IT+0x11c>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b10      	cmp	r3, #16
 8009a94:	d104      	bne.n	8009aa0 <HAL_TIM_IC_Start_IT+0x114>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2242      	movs	r2, #66	@ 0x42
 8009a9a:	2102      	movs	r1, #2
 8009a9c:	5499      	strb	r1, [r3, r2]
 8009a9e:	e003      	b.n	8009aa8 <HAL_TIM_IC_Start_IT+0x11c>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2243      	movs	r2, #67	@ 0x43
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <HAL_TIM_IC_Start_IT+0x12c>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2244      	movs	r2, #68	@ 0x44
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	5499      	strb	r1, [r3, r2]
 8009ab6:	e013      	b.n	8009ae0 <HAL_TIM_IC_Start_IT+0x154>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d104      	bne.n	8009ac8 <HAL_TIM_IC_Start_IT+0x13c>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2245      	movs	r2, #69	@ 0x45
 8009ac2:	2102      	movs	r1, #2
 8009ac4:	5499      	strb	r1, [r3, r2]
 8009ac6:	e00b      	b.n	8009ae0 <HAL_TIM_IC_Start_IT+0x154>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b08      	cmp	r3, #8
 8009acc:	d104      	bne.n	8009ad8 <HAL_TIM_IC_Start_IT+0x14c>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2246      	movs	r2, #70	@ 0x46
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	5499      	strb	r1, [r3, r2]
 8009ad6:	e003      	b.n	8009ae0 <HAL_TIM_IC_Start_IT+0x154>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2247      	movs	r2, #71	@ 0x47
 8009adc:	2102      	movs	r1, #2
 8009ade:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b0c      	cmp	r3, #12
 8009ae4:	d02a      	beq.n	8009b3c <HAL_TIM_IC_Start_IT+0x1b0>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b0c      	cmp	r3, #12
 8009aea:	d830      	bhi.n	8009b4e <HAL_TIM_IC_Start_IT+0x1c2>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	d01b      	beq.n	8009b2a <HAL_TIM_IC_Start_IT+0x19e>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d82a      	bhi.n	8009b4e <HAL_TIM_IC_Start_IT+0x1c2>
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_TIM_IC_Start_IT+0x17a>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d009      	beq.n	8009b18 <HAL_TIM_IC_Start_IT+0x18c>
 8009b04:	e023      	b.n	8009b4e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2102      	movs	r1, #2
 8009b12:	430a      	orrs	r2, r1
 8009b14:	60da      	str	r2, [r3, #12]
      break;
 8009b16:	e01f      	b.n	8009b58 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2104      	movs	r1, #4
 8009b24:	430a      	orrs	r2, r1
 8009b26:	60da      	str	r2, [r3, #12]
      break;
 8009b28:	e016      	b.n	8009b58 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2108      	movs	r1, #8
 8009b36:	430a      	orrs	r2, r1
 8009b38:	60da      	str	r2, [r3, #12]
      break;
 8009b3a:	e00d      	b.n	8009b58 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2110      	movs	r1, #16
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	60da      	str	r2, [r3, #12]
      break;
 8009b4c:	e004      	b.n	8009b58 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8009b4e:	230f      	movs	r3, #15
 8009b50:	18fb      	adds	r3, r7, r3
 8009b52:	2201      	movs	r2, #1
 8009b54:	701a      	strb	r2, [r3, #0]
      break;
 8009b56:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009b58:	230f      	movs	r3, #15
 8009b5a:	18fb      	adds	r3, r7, r3
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d137      	bne.n	8009bd2 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f001 faa6 	bl	800b0bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1a      	ldr	r2, [pc, #104]	@ (8009be0 <HAL_TIM_IC_Start_IT+0x254>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d00a      	beq.n	8009b90 <HAL_TIM_IC_Start_IT+0x204>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	2380      	movs	r3, #128	@ 0x80
 8009b80:	05db      	lsls	r3, r3, #23
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d004      	beq.n	8009b90 <HAL_TIM_IC_Start_IT+0x204>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a16      	ldr	r2, [pc, #88]	@ (8009be4 <HAL_TIM_IC_Start_IT+0x258>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d116      	bne.n	8009bbe <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	4a14      	ldr	r2, [pc, #80]	@ (8009be8 <HAL_TIM_IC_Start_IT+0x25c>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d016      	beq.n	8009bd0 <HAL_TIM_IC_Start_IT+0x244>
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	2380      	movs	r3, #128	@ 0x80
 8009ba6:	025b      	lsls	r3, r3, #9
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d011      	beq.n	8009bd0 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbc:	e008      	b.n	8009bd0 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2101      	movs	r1, #1
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e000      	b.n	8009bd2 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009bd2:	230f      	movs	r3, #15
 8009bd4:	18fb      	adds	r3, r7, r3
 8009bd6:	781b      	ldrb	r3, [r3, #0]
}
 8009bd8:	0018      	movs	r0, r3
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b004      	add	sp, #16
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40012c00 	.word	0x40012c00
 8009be4:	40000400 	.word	0x40000400
 8009be8:	00010007 	.word	0x00010007

08009bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2202      	movs	r2, #2
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d027      	beq.n	8009c5c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	4013      	ands	r3, r2
 8009c12:	d023      	beq.n	8009c5c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2203      	movs	r2, #3
 8009c1a:	4252      	negs	r2, r2
 8009c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	d006      	beq.n	8009c3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2294      	movs	r2, #148	@ 0x94
 8009c34:	589b      	ldr	r3, [r3, r2]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	0010      	movs	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	e00b      	b.n	8009c56 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	229c      	movs	r2, #156	@ 0x9c
 8009c42:	589b      	ldr	r3, [r3, r2]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	0010      	movs	r0, r2
 8009c48:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	22a0      	movs	r2, #160	@ 0xa0
 8009c4e:	589b      	ldr	r3, [r3, r2]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	0010      	movs	r0, r2
 8009c54:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2204      	movs	r2, #4
 8009c60:	4013      	ands	r3, r2
 8009c62:	d028      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2204      	movs	r2, #4
 8009c68:	4013      	ands	r3, r2
 8009c6a:	d024      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2205      	movs	r2, #5
 8009c72:	4252      	negs	r2, r2
 8009c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699a      	ldr	r2, [r3, #24]
 8009c82:	23c0      	movs	r3, #192	@ 0xc0
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4013      	ands	r3, r2
 8009c88:	d006      	beq.n	8009c98 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2294      	movs	r2, #148	@ 0x94
 8009c8e:	589b      	ldr	r3, [r3, r2]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	0010      	movs	r0, r2
 8009c94:	4798      	blx	r3
 8009c96:	e00b      	b.n	8009cb0 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	229c      	movs	r2, #156	@ 0x9c
 8009c9c:	589b      	ldr	r3, [r3, r2]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	0010      	movs	r0, r2
 8009ca2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	22a0      	movs	r2, #160	@ 0xa0
 8009ca8:	589b      	ldr	r3, [r3, r2]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	0010      	movs	r0, r2
 8009cae:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2208      	movs	r2, #8
 8009cba:	4013      	ands	r3, r2
 8009cbc:	d027      	beq.n	8009d0e <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	d023      	beq.n	8009d0e <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2209      	movs	r2, #9
 8009ccc:	4252      	negs	r2, r2
 8009cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	4013      	ands	r3, r2
 8009ce0:	d006      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2294      	movs	r2, #148	@ 0x94
 8009ce6:	589b      	ldr	r3, [r3, r2]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	0010      	movs	r0, r2
 8009cec:	4798      	blx	r3
 8009cee:	e00b      	b.n	8009d08 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	229c      	movs	r2, #156	@ 0x9c
 8009cf4:	589b      	ldr	r3, [r3, r2]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	0010      	movs	r0, r2
 8009cfa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	22a0      	movs	r2, #160	@ 0xa0
 8009d00:	589b      	ldr	r3, [r3, r2]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	0010      	movs	r0, r2
 8009d06:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2210      	movs	r2, #16
 8009d12:	4013      	ands	r3, r2
 8009d14:	d028      	beq.n	8009d68 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2210      	movs	r2, #16
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	d024      	beq.n	8009d68 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2211      	movs	r2, #17
 8009d24:	4252      	negs	r2, r2
 8009d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69da      	ldr	r2, [r3, #28]
 8009d34:	23c0      	movs	r3, #192	@ 0xc0
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4013      	ands	r3, r2
 8009d3a:	d006      	beq.n	8009d4a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2294      	movs	r2, #148	@ 0x94
 8009d40:	589b      	ldr	r3, [r3, r2]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	0010      	movs	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	e00b      	b.n	8009d62 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	229c      	movs	r2, #156	@ 0x9c
 8009d4e:	589b      	ldr	r3, [r3, r2]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	0010      	movs	r0, r2
 8009d54:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	22a0      	movs	r2, #160	@ 0xa0
 8009d5a:	589b      	ldr	r3, [r3, r2]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	0010      	movs	r0, r2
 8009d60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	d00e      	beq.n	8009d8e <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2201      	movs	r2, #1
 8009d74:	4013      	ands	r3, r2
 8009d76:	d00a      	beq.n	8009d8e <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	4252      	negs	r2, r2
 8009d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2284      	movs	r2, #132	@ 0x84
 8009d86:	589b      	ldr	r3, [r3, r2]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	0010      	movs	r0, r2
 8009d8c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2280      	movs	r2, #128	@ 0x80
 8009d92:	4013      	ands	r3, r2
 8009d94:	d104      	bne.n	8009da0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	2380      	movs	r3, #128	@ 0x80
 8009d9a:	019b      	lsls	r3, r3, #6
 8009d9c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d9e:	d00d      	beq.n	8009dbc <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2280      	movs	r2, #128	@ 0x80
 8009da4:	4013      	ands	r3, r2
 8009da6:	d009      	beq.n	8009dbc <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a22      	ldr	r2, [pc, #136]	@ (8009e38 <HAL_TIM_IRQHandler+0x24c>)
 8009dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	22b4      	movs	r2, #180	@ 0xb4
 8009db4:	589b      	ldr	r3, [r3, r2]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	0010      	movs	r0, r2
 8009dba:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	2380      	movs	r3, #128	@ 0x80
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	d00d      	beq.n	8009de2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2280      	movs	r2, #128	@ 0x80
 8009dca:	4013      	ands	r3, r2
 8009dcc:	d009      	beq.n	8009de2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e3c <HAL_TIM_IRQHandler+0x250>)
 8009dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	22b8      	movs	r2, #184	@ 0xb8
 8009dda:	589b      	ldr	r3, [r3, r2]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	0010      	movs	r0, r2
 8009de0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2240      	movs	r2, #64	@ 0x40
 8009de6:	4013      	ands	r3, r2
 8009de8:	d00e      	beq.n	8009e08 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2240      	movs	r2, #64	@ 0x40
 8009dee:	4013      	ands	r3, r2
 8009df0:	d00a      	beq.n	8009e08 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2241      	movs	r2, #65	@ 0x41
 8009df8:	4252      	negs	r2, r2
 8009dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	228c      	movs	r2, #140	@ 0x8c
 8009e00:	589b      	ldr	r3, [r3, r2]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	0010      	movs	r0, r2
 8009e06:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2220      	movs	r2, #32
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	d00e      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2220      	movs	r2, #32
 8009e14:	4013      	ands	r3, r2
 8009e16:	d00a      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2221      	movs	r2, #33	@ 0x21
 8009e1e:	4252      	negs	r2, r2
 8009e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	22ac      	movs	r2, #172	@ 0xac
 8009e26:	589b      	ldr	r3, [r3, r2]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	0010      	movs	r0, r2
 8009e2c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e2e:	46c0      	nop			@ (mov r8, r8)
 8009e30:	46bd      	mov	sp, r7
 8009e32:	b004      	add	sp, #16
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	ffffdf7f 	.word	0xffffdf7f
 8009e3c:	fffffeff 	.word	0xfffffeff

08009e40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e4c:	2317      	movs	r3, #23
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	223c      	movs	r2, #60	@ 0x3c
 8009e58:	5c9b      	ldrb	r3, [r3, r2]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_TIM_OC_ConfigChannel+0x22>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e048      	b.n	8009ef4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	223c      	movs	r2, #60	@ 0x3c
 8009e66:	2101      	movs	r1, #1
 8009e68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b14      	cmp	r3, #20
 8009e6e:	d835      	bhi.n	8009edc <HAL_TIM_OC_ConfigChannel+0x9c>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	009a      	lsls	r2, r3, #2
 8009e74:	4b21      	ldr	r3, [pc, #132]	@ (8009efc <HAL_TIM_OC_ConfigChannel+0xbc>)
 8009e76:	18d3      	adds	r3, r2, r3
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	0011      	movs	r1, r2
 8009e84:	0018      	movs	r0, r3
 8009e86:	f000 fcc3 	bl	800a810 <TIM_OC1_SetConfig>
      break;
 8009e8a:	e02c      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	0011      	movs	r1, r2
 8009e94:	0018      	movs	r0, r3
 8009e96:	f000 fd3b 	bl	800a910 <TIM_OC2_SetConfig>
      break;
 8009e9a:	e024      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	0011      	movs	r1, r2
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f000 fdb1 	bl	800aa0c <TIM_OC3_SetConfig>
      break;
 8009eaa:	e01c      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	0011      	movs	r1, r2
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f000 fe2b 	bl	800ab10 <TIM_OC4_SetConfig>
      break;
 8009eba:	e014      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	0011      	movs	r1, r2
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f000 fe87 	bl	800abd8 <TIM_OC5_SetConfig>
      break;
 8009eca:	e00c      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	0011      	movs	r1, r2
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f000 fed9 	bl	800ac8c <TIM_OC6_SetConfig>
      break;
 8009eda:	e004      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009edc:	2317      	movs	r3, #23
 8009ede:	18fb      	adds	r3, r7, r3
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	701a      	strb	r2, [r3, #0]
      break;
 8009ee4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	223c      	movs	r2, #60	@ 0x3c
 8009eea:	2100      	movs	r1, #0
 8009eec:	5499      	strb	r1, [r3, r2]

  return status;
 8009eee:	2317      	movs	r3, #23
 8009ef0:	18fb      	adds	r3, r7, r3
 8009ef2:	781b      	ldrb	r3, [r3, #0]
}
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b006      	add	sp, #24
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	0800d5d0 	.word	0x0800d5d0

08009f00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0c:	2317      	movs	r3, #23
 8009f0e:	18fb      	adds	r3, r7, r3
 8009f10:	2200      	movs	r2, #0
 8009f12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	223c      	movs	r2, #60	@ 0x3c
 8009f18:	5c9b      	ldrb	r3, [r3, r2]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d101      	bne.n	8009f22 <HAL_TIM_IC_ConfigChannel+0x22>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e08c      	b.n	800a03c <HAL_TIM_IC_ConfigChannel+0x13c>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	223c      	movs	r2, #60	@ 0x3c
 8009f26:	2101      	movs	r1, #1
 8009f28:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d11b      	bne.n	8009f68 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009f40:	f000 ff02 	bl	800ad48 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	210c      	movs	r1, #12
 8009f50:	438a      	bics	r2, r1
 8009f52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6999      	ldr	r1, [r3, #24]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	619a      	str	r2, [r3, #24]
 8009f66:	e062      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d11c      	bne.n	8009fa8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009f7e:	f000 ff67 	bl	800ae50 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	699a      	ldr	r2, [r3, #24]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	492d      	ldr	r1, [pc, #180]	@ (800a044 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009f8e:	400a      	ands	r2, r1
 8009f90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6999      	ldr	r1, [r3, #24]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	021a      	lsls	r2, r3, #8
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	619a      	str	r2, [r3, #24]
 8009fa6:	e042      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b08      	cmp	r3, #8
 8009fac:	d11b      	bne.n	8009fe6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009fbe:	f000 ffbb 	bl	800af38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	210c      	movs	r1, #12
 8009fce:	438a      	bics	r2, r1
 8009fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69d9      	ldr	r1, [r3, #28]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	61da      	str	r2, [r3, #28]
 8009fe4:	e023      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b0c      	cmp	r3, #12
 8009fea:	d11c      	bne.n	800a026 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009ffc:	f000 ffdc 	bl	800afb8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69da      	ldr	r2, [r3, #28]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	490e      	ldr	r1, [pc, #56]	@ (800a044 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a00c:	400a      	ands	r2, r1
 800a00e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	69d9      	ldr	r1, [r3, #28]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	021a      	lsls	r2, r3, #8
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	61da      	str	r2, [r3, #28]
 800a024:	e003      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a026:	2317      	movs	r3, #23
 800a028:	18fb      	adds	r3, r7, r3
 800a02a:	2201      	movs	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	223c      	movs	r2, #60	@ 0x3c
 800a032:	2100      	movs	r1, #0
 800a034:	5499      	strb	r1, [r3, r2]

  return status;
 800a036:	2317      	movs	r3, #23
 800a038:	18fb      	adds	r3, r7, r3
 800a03a:	781b      	ldrb	r3, [r3, #0]
}
 800a03c:	0018      	movs	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	b006      	add	sp, #24
 800a042:	bd80      	pop	{r7, pc}
 800a044:	fffff3ff 	.word	0xfffff3ff

0800a048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a054:	2317      	movs	r3, #23
 800a056:	18fb      	adds	r3, r7, r3
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	223c      	movs	r2, #60	@ 0x3c
 800a060:	5c9b      	ldrb	r3, [r3, r2]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a066:	2302      	movs	r3, #2
 800a068:	e0e5      	b.n	800a236 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	223c      	movs	r2, #60	@ 0x3c
 800a06e:	2101      	movs	r1, #1
 800a070:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b14      	cmp	r3, #20
 800a076:	d900      	bls.n	800a07a <HAL_TIM_PWM_ConfigChannel+0x32>
 800a078:	e0d1      	b.n	800a21e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	009a      	lsls	r2, r3, #2
 800a07e:	4b70      	ldr	r3, [pc, #448]	@ (800a240 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	0011      	movs	r1, r2
 800a08e:	0018      	movs	r0, r3
 800a090:	f000 fbbe 	bl	800a810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2108      	movs	r1, #8
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2104      	movs	r1, #4
 800a0b0:	438a      	bics	r2, r1
 800a0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6999      	ldr	r1, [r3, #24]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	619a      	str	r2, [r3, #24]
      break;
 800a0c6:	e0af      	b.n	800a228 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	0011      	movs	r1, r2
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f000 fc1d 	bl	800a910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699a      	ldr	r2, [r3, #24]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2180      	movs	r1, #128	@ 0x80
 800a0e2:	0109      	lsls	r1, r1, #4
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4954      	ldr	r1, [pc, #336]	@ (800a244 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a0f4:	400a      	ands	r2, r1
 800a0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6999      	ldr	r1, [r3, #24]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	021a      	lsls	r2, r3, #8
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	619a      	str	r2, [r3, #24]
      break;
 800a10c:	e08c      	b.n	800a228 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	0011      	movs	r1, r2
 800a116:	0018      	movs	r0, r3
 800a118:	f000 fc78 	bl	800aa0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69da      	ldr	r2, [r3, #28]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2108      	movs	r1, #8
 800a128:	430a      	orrs	r2, r1
 800a12a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69da      	ldr	r2, [r3, #28]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2104      	movs	r1, #4
 800a138:	438a      	bics	r2, r1
 800a13a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	69d9      	ldr	r1, [r3, #28]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	691a      	ldr	r2, [r3, #16]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	61da      	str	r2, [r3, #28]
      break;
 800a14e:	e06b      	b.n	800a228 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	0011      	movs	r1, r2
 800a158:	0018      	movs	r0, r3
 800a15a:	f000 fcd9 	bl	800ab10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2180      	movs	r1, #128	@ 0x80
 800a16a:	0109      	lsls	r1, r1, #4
 800a16c:	430a      	orrs	r2, r1
 800a16e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	69da      	ldr	r2, [r3, #28]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4932      	ldr	r1, [pc, #200]	@ (800a244 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a17c:	400a      	ands	r2, r1
 800a17e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69d9      	ldr	r1, [r3, #28]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	021a      	lsls	r2, r3, #8
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	61da      	str	r2, [r3, #28]
      break;
 800a194:	e048      	b.n	800a228 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	0011      	movs	r1, r2
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f000 fd1a 	bl	800abd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2108      	movs	r1, #8
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2104      	movs	r1, #4
 800a1c0:	438a      	bics	r2, r1
 800a1c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	691a      	ldr	r2, [r3, #16]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a1d6:	e027      	b.n	800a228 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	0011      	movs	r1, r2
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f000 fd53 	bl	800ac8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2180      	movs	r1, #128	@ 0x80
 800a1f2:	0109      	lsls	r1, r1, #4
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4910      	ldr	r1, [pc, #64]	@ (800a244 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a204:	400a      	ands	r2, r1
 800a206:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	021a      	lsls	r2, r3, #8
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	430a      	orrs	r2, r1
 800a21a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a21c:	e004      	b.n	800a228 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a21e:	2317      	movs	r3, #23
 800a220:	18fb      	adds	r3, r7, r3
 800a222:	2201      	movs	r2, #1
 800a224:	701a      	strb	r2, [r3, #0]
      break;
 800a226:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	223c      	movs	r2, #60	@ 0x3c
 800a22c:	2100      	movs	r1, #0
 800a22e:	5499      	strb	r1, [r3, r2]

  return status;
 800a230:	2317      	movs	r3, #23
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	781b      	ldrb	r3, [r3, #0]
}
 800a236:	0018      	movs	r0, r3
 800a238:	46bd      	mov	sp, r7
 800a23a:	b006      	add	sp, #24
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	46c0      	nop			@ (mov r8, r8)
 800a240:	0800d624 	.word	0x0800d624
 800a244:	fffffbff 	.word	0xfffffbff

0800a248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a252:	230f      	movs	r3, #15
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	223c      	movs	r2, #60	@ 0x3c
 800a25e:	5c9b      	ldrb	r3, [r3, r2]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d101      	bne.n	800a268 <HAL_TIM_ConfigClockSource+0x20>
 800a264:	2302      	movs	r3, #2
 800a266:	e0bc      	b.n	800a3e2 <HAL_TIM_ConfigClockSource+0x19a>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	223c      	movs	r2, #60	@ 0x3c
 800a26c:	2101      	movs	r1, #1
 800a26e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	223d      	movs	r2, #61	@ 0x3d
 800a274:	2102      	movs	r1, #2
 800a276:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4a5a      	ldr	r2, [pc, #360]	@ (800a3ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800a284:	4013      	ands	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4a59      	ldr	r2, [pc, #356]	@ (800a3f0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2280      	movs	r2, #128	@ 0x80
 800a29e:	0192      	lsls	r2, r2, #6
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d040      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0xde>
 800a2a4:	2280      	movs	r2, #128	@ 0x80
 800a2a6:	0192      	lsls	r2, r2, #6
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d900      	bls.n	800a2ae <HAL_TIM_ConfigClockSource+0x66>
 800a2ac:	e088      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2ae:	2280      	movs	r2, #128	@ 0x80
 800a2b0:	0152      	lsls	r2, r2, #5
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d100      	bne.n	800a2b8 <HAL_TIM_ConfigClockSource+0x70>
 800a2b6:	e088      	b.n	800a3ca <HAL_TIM_ConfigClockSource+0x182>
 800a2b8:	2280      	movs	r2, #128	@ 0x80
 800a2ba:	0152      	lsls	r2, r2, #5
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d900      	bls.n	800a2c2 <HAL_TIM_ConfigClockSource+0x7a>
 800a2c0:	e07e      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2c2:	2b70      	cmp	r3, #112	@ 0x70
 800a2c4:	d018      	beq.n	800a2f8 <HAL_TIM_ConfigClockSource+0xb0>
 800a2c6:	d900      	bls.n	800a2ca <HAL_TIM_ConfigClockSource+0x82>
 800a2c8:	e07a      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2ca:	2b60      	cmp	r3, #96	@ 0x60
 800a2cc:	d04f      	beq.n	800a36e <HAL_TIM_ConfigClockSource+0x126>
 800a2ce:	d900      	bls.n	800a2d2 <HAL_TIM_ConfigClockSource+0x8a>
 800a2d0:	e076      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2d2:	2b50      	cmp	r3, #80	@ 0x50
 800a2d4:	d03b      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x106>
 800a2d6:	d900      	bls.n	800a2da <HAL_TIM_ConfigClockSource+0x92>
 800a2d8:	e072      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2da:	2b40      	cmp	r3, #64	@ 0x40
 800a2dc:	d057      	beq.n	800a38e <HAL_TIM_ConfigClockSource+0x146>
 800a2de:	d900      	bls.n	800a2e2 <HAL_TIM_ConfigClockSource+0x9a>
 800a2e0:	e06e      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2e2:	2b30      	cmp	r3, #48	@ 0x30
 800a2e4:	d063      	beq.n	800a3ae <HAL_TIM_ConfigClockSource+0x166>
 800a2e6:	d86b      	bhi.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d060      	beq.n	800a3ae <HAL_TIM_ConfigClockSource+0x166>
 800a2ec:	d868      	bhi.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d05d      	beq.n	800a3ae <HAL_TIM_ConfigClockSource+0x166>
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d05b      	beq.n	800a3ae <HAL_TIM_ConfigClockSource+0x166>
 800a2f6:	e063      	b.n	800a3c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a308:	f000 feb8 	bl	800b07c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2277      	movs	r2, #119	@ 0x77
 800a318:	4313      	orrs	r3, r2
 800a31a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	609a      	str	r2, [r3, #8]
      break;
 800a324:	e052      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a336:	f000 fea1 	bl	800b07c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2180      	movs	r1, #128	@ 0x80
 800a346:	01c9      	lsls	r1, r1, #7
 800a348:	430a      	orrs	r2, r1
 800a34a:	609a      	str	r2, [r3, #8]
      break;
 800a34c:	e03e      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a35a:	001a      	movs	r2, r3
 800a35c:	f000 fd4a 	bl	800adf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2150      	movs	r1, #80	@ 0x50
 800a366:	0018      	movs	r0, r3
 800a368:	f000 fe6c 	bl	800b044 <TIM_ITRx_SetConfig>
      break;
 800a36c:	e02e      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a37a:	001a      	movs	r2, r3
 800a37c:	f000 fdaa 	bl	800aed4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2160      	movs	r1, #96	@ 0x60
 800a386:	0018      	movs	r0, r3
 800a388:	f000 fe5c 	bl	800b044 <TIM_ITRx_SetConfig>
      break;
 800a38c:	e01e      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39a:	001a      	movs	r2, r3
 800a39c:	f000 fd2a 	bl	800adf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2140      	movs	r1, #64	@ 0x40
 800a3a6:	0018      	movs	r0, r3
 800a3a8:	f000 fe4c 	bl	800b044 <TIM_ITRx_SetConfig>
      break;
 800a3ac:	e00e      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	0010      	movs	r0, r2
 800a3ba:	f000 fe43 	bl	800b044 <TIM_ITRx_SetConfig>
      break;
 800a3be:	e005      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a3c0:	230f      	movs	r3, #15
 800a3c2:	18fb      	adds	r3, r7, r3
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	701a      	strb	r2, [r3, #0]
      break;
 800a3c8:	e000      	b.n	800a3cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a3ca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	223d      	movs	r2, #61	@ 0x3d
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	223c      	movs	r2, #60	@ 0x3c
 800a3d8:	2100      	movs	r1, #0
 800a3da:	5499      	strb	r1, [r3, r2]

  return status;
 800a3dc:	230f      	movs	r3, #15
 800a3de:	18fb      	adds	r3, r7, r3
 800a3e0:	781b      	ldrb	r3, [r3, #0]
}
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	b004      	add	sp, #16
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	46c0      	nop			@ (mov r8, r8)
 800a3ec:	ffceff88 	.word	0xffceff88
 800a3f0:	ffff00ff 	.word	0xffff00ff

0800a3f4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b0c      	cmp	r3, #12
 800a406:	d01e      	beq.n	800a446 <HAL_TIM_ReadCapturedValue+0x52>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b0c      	cmp	r3, #12
 800a40c:	d820      	bhi.n	800a450 <HAL_TIM_ReadCapturedValue+0x5c>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b08      	cmp	r3, #8
 800a412:	d013      	beq.n	800a43c <HAL_TIM_ReadCapturedValue+0x48>
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b08      	cmp	r3, #8
 800a418:	d81a      	bhi.n	800a450 <HAL_TIM_ReadCapturedValue+0x5c>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <HAL_TIM_ReadCapturedValue+0x34>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b04      	cmp	r3, #4
 800a424:	d005      	beq.n	800a432 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800a426:	e013      	b.n	800a450 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42e:	60fb      	str	r3, [r7, #12]
      break;
 800a430:	e00f      	b.n	800a452 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a438:	60fb      	str	r3, [r7, #12]
      break;
 800a43a:	e00a      	b.n	800a452 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a442:	60fb      	str	r3, [r7, #12]
      break;
 800a444:	e005      	b.n	800a452 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a44c:	60fb      	str	r3, [r7, #12]
      break;
 800a44e:	e000      	b.n	800a452 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800a450:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800a452:	68fb      	ldr	r3, [r7, #12]
}
 800a454:	0018      	movs	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	b004      	add	sp, #16
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a464:	46c0      	nop			@ (mov r8, r8)
 800a466:	46bd      	mov	sp, r7
 800a468:	b002      	add	sp, #8
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a474:	46c0      	nop			@ (mov r8, r8)
 800a476:	46bd      	mov	sp, r7
 800a478:	b002      	add	sp, #8
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a484:	46c0      	nop			@ (mov r8, r8)
 800a486:	46bd      	mov	sp, r7
 800a488:	b002      	add	sp, #8
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a494:	46c0      	nop			@ (mov r8, r8)
 800a496:	46bd      	mov	sp, r7
 800a498:	b002      	add	sp, #8
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a4a4:	46c0      	nop			@ (mov r8, r8)
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b002      	add	sp, #8
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4b4:	46c0      	nop			@ (mov r8, r8)
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b002      	add	sp, #8
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a4c4:	46c0      	nop			@ (mov r8, r8)
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b002      	add	sp, #8
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4d4:	46c0      	nop			@ (mov r8, r8)
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b002      	add	sp, #8
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a4e4:	46c0      	nop			@ (mov r8, r8)
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	b002      	add	sp, #8
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a4f4:	46c0      	nop			@ (mov r8, r8)
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	b002      	add	sp, #8
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	230b      	movs	r3, #11
 800a508:	18fb      	adds	r3, r7, r3
 800a50a:	1c0a      	adds	r2, r1, #0
 800a50c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a50e:	2317      	movs	r3, #23
 800a510:	18fb      	adds	r3, r7, r3
 800a512:	2200      	movs	r2, #0
 800a514:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e0ea      	b.n	800a6f6 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	223d      	movs	r2, #61	@ 0x3d
 800a524:	5c9b      	ldrb	r3, [r3, r2]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d000      	beq.n	800a52e <HAL_TIM_RegisterCallback+0x32>
 800a52c:	e08e      	b.n	800a64c <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a52e:	230b      	movs	r3, #11
 800a530:	18fb      	adds	r3, r7, r3
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b1b      	cmp	r3, #27
 800a536:	d900      	bls.n	800a53a <HAL_TIM_RegisterCallback+0x3e>
 800a538:	e083      	b.n	800a642 <HAL_TIM_RegisterCallback+0x146>
 800a53a:	009a      	lsls	r2, r3, #2
 800a53c:	4b70      	ldr	r3, [pc, #448]	@ (800a700 <HAL_TIM_RegisterCallback+0x204>)
 800a53e:	18d3      	adds	r3, r2, r3
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a54a:	e0d1      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a552:	e0cd      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a55a:	e0c9      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a562:	e0c5      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a56a:	e0c1      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a572:	e0bd      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a57a:	e0b9      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a582:	e0b5      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a58a:	e0b1      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a592:	e0ad      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a59a:	e0a9      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a5a2:	e0a5      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a5aa:	e0a1      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2180      	movs	r1, #128	@ 0x80
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	505a      	str	r2, [r3, r1]
        break;
 800a5b4:	e09c      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2184      	movs	r1, #132	@ 0x84
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	505a      	str	r2, [r3, r1]
        break;
 800a5be:	e097      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2188      	movs	r1, #136	@ 0x88
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	505a      	str	r2, [r3, r1]
        break;
 800a5c8:	e092      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	218c      	movs	r1, #140	@ 0x8c
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	505a      	str	r2, [r3, r1]
        break;
 800a5d2:	e08d      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2190      	movs	r1, #144	@ 0x90
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	505a      	str	r2, [r3, r1]
        break;
 800a5dc:	e088      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2194      	movs	r1, #148	@ 0x94
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	505a      	str	r2, [r3, r1]
        break;
 800a5e6:	e083      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2198      	movs	r1, #152	@ 0x98
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	505a      	str	r2, [r3, r1]
        break;
 800a5f0:	e07e      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	219c      	movs	r1, #156	@ 0x9c
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	505a      	str	r2, [r3, r1]
        break;
 800a5fa:	e079      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	21a0      	movs	r1, #160	@ 0xa0
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	505a      	str	r2, [r3, r1]
        break;
 800a604:	e074      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	21a4      	movs	r1, #164	@ 0xa4
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	505a      	str	r2, [r3, r1]
        break;
 800a60e:	e06f      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	21a8      	movs	r1, #168	@ 0xa8
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	505a      	str	r2, [r3, r1]
        break;
 800a618:	e06a      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	21ac      	movs	r1, #172	@ 0xac
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	505a      	str	r2, [r3, r1]
        break;
 800a622:	e065      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	21b0      	movs	r1, #176	@ 0xb0
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	505a      	str	r2, [r3, r1]
        break;
 800a62c:	e060      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	21b4      	movs	r1, #180	@ 0xb4
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	505a      	str	r2, [r3, r1]
        break;
 800a636:	e05b      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	21b8      	movs	r1, #184	@ 0xb8
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	505a      	str	r2, [r3, r1]
        break;
 800a640:	e056      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a642:	2317      	movs	r3, #23
 800a644:	18fb      	adds	r3, r7, r3
 800a646:	2201      	movs	r2, #1
 800a648:	701a      	strb	r2, [r3, #0]
        break;
 800a64a:	e051      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	223d      	movs	r2, #61	@ 0x3d
 800a650:	5c9b      	ldrb	r3, [r3, r2]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d147      	bne.n	800a6e8 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800a658:	230b      	movs	r3, #11
 800a65a:	18fb      	adds	r3, r7, r3
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b0d      	cmp	r3, #13
 800a660:	d83d      	bhi.n	800a6de <HAL_TIM_RegisterCallback+0x1e2>
 800a662:	009a      	lsls	r2, r3, #2
 800a664:	4b27      	ldr	r3, [pc, #156]	@ (800a704 <HAL_TIM_RegisterCallback+0x208>)
 800a666:	18d3      	adds	r3, r2, r3
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a672:	e03d      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a67a:	e039      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a682:	e035      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a68a:	e031      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a692:	e02d      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a69a:	e029      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a6a2:	e025      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a6aa:	e021      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a6b2:	e01d      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a6ba:	e019      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a6c2:	e015      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a6ca:	e011      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a6d2:	e00d      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2180      	movs	r1, #128	@ 0x80
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	505a      	str	r2, [r3, r1]
        break;
 800a6dc:	e008      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a6de:	2317      	movs	r3, #23
 800a6e0:	18fb      	adds	r3, r7, r3
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	701a      	strb	r2, [r3, #0]
        break;
 800a6e6:	e003      	b.n	800a6f0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a6e8:	2317      	movs	r3, #23
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a6f0:	2317      	movs	r3, #23
 800a6f2:	18fb      	adds	r3, r7, r3
 800a6f4:	781b      	ldrb	r3, [r3, #0]
}
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	b006      	add	sp, #24
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	46c0      	nop			@ (mov r8, r8)
 800a700:	0800d678 	.word	0x0800d678
 800a704:	0800d6e8 	.word	0x0800d6e8

0800a708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a37      	ldr	r2, [pc, #220]	@ (800a7f8 <TIM_Base_SetConfig+0xf0>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d008      	beq.n	800a732 <TIM_Base_SetConfig+0x2a>
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	2380      	movs	r3, #128	@ 0x80
 800a724:	05db      	lsls	r3, r3, #23
 800a726:	429a      	cmp	r2, r3
 800a728:	d003      	beq.n	800a732 <TIM_Base_SetConfig+0x2a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a33      	ldr	r2, [pc, #204]	@ (800a7fc <TIM_Base_SetConfig+0xf4>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d108      	bne.n	800a744 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2270      	movs	r2, #112	@ 0x70
 800a736:	4393      	bics	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a2c      	ldr	r2, [pc, #176]	@ (800a7f8 <TIM_Base_SetConfig+0xf0>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d014      	beq.n	800a776 <TIM_Base_SetConfig+0x6e>
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	2380      	movs	r3, #128	@ 0x80
 800a750:	05db      	lsls	r3, r3, #23
 800a752:	429a      	cmp	r2, r3
 800a754:	d00f      	beq.n	800a776 <TIM_Base_SetConfig+0x6e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a28      	ldr	r2, [pc, #160]	@ (800a7fc <TIM_Base_SetConfig+0xf4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00b      	beq.n	800a776 <TIM_Base_SetConfig+0x6e>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a27      	ldr	r2, [pc, #156]	@ (800a800 <TIM_Base_SetConfig+0xf8>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d007      	beq.n	800a776 <TIM_Base_SetConfig+0x6e>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a26      	ldr	r2, [pc, #152]	@ (800a804 <TIM_Base_SetConfig+0xfc>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d003      	beq.n	800a776 <TIM_Base_SetConfig+0x6e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a25      	ldr	r2, [pc, #148]	@ (800a808 <TIM_Base_SetConfig+0x100>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d108      	bne.n	800a788 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4a24      	ldr	r2, [pc, #144]	@ (800a80c <TIM_Base_SetConfig+0x104>)
 800a77a:	4013      	ands	r3, r2
 800a77c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4313      	orrs	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2280      	movs	r2, #128	@ 0x80
 800a78c:	4393      	bics	r3, r2
 800a78e:	001a      	movs	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	4313      	orrs	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a11      	ldr	r2, [pc, #68]	@ (800a7f8 <TIM_Base_SetConfig+0xf0>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d007      	beq.n	800a7c6 <TIM_Base_SetConfig+0xbe>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a12      	ldr	r2, [pc, #72]	@ (800a804 <TIM_Base_SetConfig+0xfc>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d003      	beq.n	800a7c6 <TIM_Base_SetConfig+0xbe>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a11      	ldr	r2, [pc, #68]	@ (800a808 <TIM_Base_SetConfig+0x100>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d103      	bne.n	800a7ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	691a      	ldr	r2, [r3, #16]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	4013      	ands	r3, r2
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d106      	bne.n	800a7ee <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4393      	bics	r3, r2
 800a7e8:	001a      	movs	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	611a      	str	r2, [r3, #16]
  }
}
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b004      	add	sp, #16
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	40012c00 	.word	0x40012c00
 800a7fc:	40000400 	.word	0x40000400
 800a800:	40002000 	.word	0x40002000
 800a804:	40014400 	.word	0x40014400
 800a808:	40014800 	.word	0x40014800
 800a80c:	fffffcff 	.word	0xfffffcff

0800a810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	2201      	movs	r2, #1
 800a826:	4393      	bics	r3, r2
 800a828:	001a      	movs	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4a2e      	ldr	r2, [pc, #184]	@ (800a8f8 <TIM_OC1_SetConfig+0xe8>)
 800a83e:	4013      	ands	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2203      	movs	r2, #3
 800a846:	4393      	bics	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4313      	orrs	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2202      	movs	r2, #2
 800a858:	4393      	bics	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a24      	ldr	r2, [pc, #144]	@ (800a8fc <TIM_OC1_SetConfig+0xec>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d007      	beq.n	800a87e <TIM_OC1_SetConfig+0x6e>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a23      	ldr	r2, [pc, #140]	@ (800a900 <TIM_OC1_SetConfig+0xf0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d003      	beq.n	800a87e <TIM_OC1_SetConfig+0x6e>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a22      	ldr	r2, [pc, #136]	@ (800a904 <TIM_OC1_SetConfig+0xf4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d10c      	bne.n	800a898 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2208      	movs	r2, #8
 800a882:	4393      	bics	r3, r2
 800a884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	2204      	movs	r2, #4
 800a894:	4393      	bics	r3, r2
 800a896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a18      	ldr	r2, [pc, #96]	@ (800a8fc <TIM_OC1_SetConfig+0xec>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <TIM_OC1_SetConfig+0xa0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a17      	ldr	r2, [pc, #92]	@ (800a900 <TIM_OC1_SetConfig+0xf0>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d003      	beq.n	800a8b0 <TIM_OC1_SetConfig+0xa0>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a16      	ldr	r2, [pc, #88]	@ (800a904 <TIM_OC1_SetConfig+0xf4>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d111      	bne.n	800a8d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	4a15      	ldr	r2, [pc, #84]	@ (800a908 <TIM_OC1_SetConfig+0xf8>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4a14      	ldr	r2, [pc, #80]	@ (800a90c <TIM_OC1_SetConfig+0xfc>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	621a      	str	r2, [r3, #32]
}
 800a8ee:	46c0      	nop			@ (mov r8, r8)
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	b006      	add	sp, #24
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	46c0      	nop			@ (mov r8, r8)
 800a8f8:	fffeff8f 	.word	0xfffeff8f
 800a8fc:	40012c00 	.word	0x40012c00
 800a900:	40014400 	.word	0x40014400
 800a904:	40014800 	.word	0x40014800
 800a908:	fffffeff 	.word	0xfffffeff
 800a90c:	fffffdff 	.word	0xfffffdff

0800a910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	2210      	movs	r2, #16
 800a926:	4393      	bics	r3, r2
 800a928:	001a      	movs	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4a2c      	ldr	r2, [pc, #176]	@ (800a9f0 <TIM_OC2_SetConfig+0xe0>)
 800a93e:	4013      	ands	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4a2b      	ldr	r2, [pc, #172]	@ (800a9f4 <TIM_OC2_SetConfig+0xe4>)
 800a946:	4013      	ands	r3, r2
 800a948:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	021b      	lsls	r3, r3, #8
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4313      	orrs	r3, r2
 800a954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2220      	movs	r2, #32
 800a95a:	4393      	bics	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a22      	ldr	r2, [pc, #136]	@ (800a9f8 <TIM_OC2_SetConfig+0xe8>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d10d      	bne.n	800a98e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2280      	movs	r2, #128	@ 0x80
 800a976:	4393      	bics	r3, r2
 800a978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	011b      	lsls	r3, r3, #4
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	4313      	orrs	r3, r2
 800a984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2240      	movs	r2, #64	@ 0x40
 800a98a:	4393      	bics	r3, r2
 800a98c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a19      	ldr	r2, [pc, #100]	@ (800a9f8 <TIM_OC2_SetConfig+0xe8>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d007      	beq.n	800a9a6 <TIM_OC2_SetConfig+0x96>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <TIM_OC2_SetConfig+0xec>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d003      	beq.n	800a9a6 <TIM_OC2_SetConfig+0x96>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a17      	ldr	r2, [pc, #92]	@ (800aa00 <TIM_OC2_SetConfig+0xf0>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d113      	bne.n	800a9ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4a16      	ldr	r2, [pc, #88]	@ (800aa04 <TIM_OC2_SetConfig+0xf4>)
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	4a15      	ldr	r2, [pc, #84]	@ (800aa08 <TIM_OC2_SetConfig+0xf8>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	621a      	str	r2, [r3, #32]
}
 800a9e8:	46c0      	nop			@ (mov r8, r8)
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b006      	add	sp, #24
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	feff8fff 	.word	0xfeff8fff
 800a9f4:	fffffcff 	.word	0xfffffcff
 800a9f8:	40012c00 	.word	0x40012c00
 800a9fc:	40014400 	.word	0x40014400
 800aa00:	40014800 	.word	0x40014800
 800aa04:	fffffbff 	.word	0xfffffbff
 800aa08:	fffff7ff 	.word	0xfffff7ff

0800aa0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	4a31      	ldr	r2, [pc, #196]	@ (800aae8 <TIM_OC3_SetConfig+0xdc>)
 800aa22:	401a      	ands	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a2d      	ldr	r2, [pc, #180]	@ (800aaec <TIM_OC3_SetConfig+0xe0>)
 800aa38:	4013      	ands	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2203      	movs	r2, #3
 800aa40:	4393      	bics	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	4a27      	ldr	r2, [pc, #156]	@ (800aaf0 <TIM_OC3_SetConfig+0xe4>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a23      	ldr	r2, [pc, #140]	@ (800aaf4 <TIM_OC3_SetConfig+0xe8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d10d      	bne.n	800aa86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	4a22      	ldr	r2, [pc, #136]	@ (800aaf8 <TIM_OC3_SetConfig+0xec>)
 800aa6e:	4013      	ands	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	021b      	lsls	r3, r3, #8
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	4a1e      	ldr	r2, [pc, #120]	@ (800aafc <TIM_OC3_SetConfig+0xf0>)
 800aa82:	4013      	ands	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a1a      	ldr	r2, [pc, #104]	@ (800aaf4 <TIM_OC3_SetConfig+0xe8>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d007      	beq.n	800aa9e <TIM_OC3_SetConfig+0x92>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a1b      	ldr	r2, [pc, #108]	@ (800ab00 <TIM_OC3_SetConfig+0xf4>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d003      	beq.n	800aa9e <TIM_OC3_SetConfig+0x92>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a1a      	ldr	r2, [pc, #104]	@ (800ab04 <TIM_OC3_SetConfig+0xf8>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d113      	bne.n	800aac6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	4a19      	ldr	r2, [pc, #100]	@ (800ab08 <TIM_OC3_SetConfig+0xfc>)
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	4a18      	ldr	r2, [pc, #96]	@ (800ab0c <TIM_OC3_SetConfig+0x100>)
 800aaaa:	4013      	ands	r3, r2
 800aaac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	011b      	lsls	r3, r3, #4
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	621a      	str	r2, [r3, #32]
}
 800aae0:	46c0      	nop			@ (mov r8, r8)
 800aae2:	46bd      	mov	sp, r7
 800aae4:	b006      	add	sp, #24
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	fffffeff 	.word	0xfffffeff
 800aaec:	fffeff8f 	.word	0xfffeff8f
 800aaf0:	fffffdff 	.word	0xfffffdff
 800aaf4:	40012c00 	.word	0x40012c00
 800aaf8:	fffff7ff 	.word	0xfffff7ff
 800aafc:	fffffbff 	.word	0xfffffbff
 800ab00:	40014400 	.word	0x40014400
 800ab04:	40014800 	.word	0x40014800
 800ab08:	ffffefff 	.word	0xffffefff
 800ab0c:	ffffdfff 	.word	0xffffdfff

0800ab10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	4a24      	ldr	r2, [pc, #144]	@ (800abb8 <TIM_OC4_SetConfig+0xa8>)
 800ab26:	401a      	ands	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4a20      	ldr	r2, [pc, #128]	@ (800abbc <TIM_OC4_SetConfig+0xac>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4a1f      	ldr	r2, [pc, #124]	@ (800abc0 <TIM_OC4_SetConfig+0xb0>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	021b      	lsls	r3, r3, #8
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	4a1b      	ldr	r2, [pc, #108]	@ (800abc4 <TIM_OC4_SetConfig+0xb4>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	031b      	lsls	r3, r3, #12
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a17      	ldr	r2, [pc, #92]	@ (800abc8 <TIM_OC4_SetConfig+0xb8>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d007      	beq.n	800ab80 <TIM_OC4_SetConfig+0x70>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a16      	ldr	r2, [pc, #88]	@ (800abcc <TIM_OC4_SetConfig+0xbc>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d003      	beq.n	800ab80 <TIM_OC4_SetConfig+0x70>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a15      	ldr	r2, [pc, #84]	@ (800abd0 <TIM_OC4_SetConfig+0xc0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d109      	bne.n	800ab94 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	4a14      	ldr	r2, [pc, #80]	@ (800abd4 <TIM_OC4_SetConfig+0xc4>)
 800ab84:	4013      	ands	r3, r2
 800ab86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	019b      	lsls	r3, r3, #6
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	621a      	str	r2, [r3, #32]
}
 800abae:	46c0      	nop			@ (mov r8, r8)
 800abb0:	46bd      	mov	sp, r7
 800abb2:	b006      	add	sp, #24
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	46c0      	nop			@ (mov r8, r8)
 800abb8:	ffffefff 	.word	0xffffefff
 800abbc:	feff8fff 	.word	0xfeff8fff
 800abc0:	fffffcff 	.word	0xfffffcff
 800abc4:	ffffdfff 	.word	0xffffdfff
 800abc8:	40012c00 	.word	0x40012c00
 800abcc:	40014400 	.word	0x40014400
 800abd0:	40014800 	.word	0x40014800
 800abd4:	ffffbfff 	.word	0xffffbfff

0800abd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	4a21      	ldr	r2, [pc, #132]	@ (800ac74 <TIM_OC5_SetConfig+0x9c>)
 800abee:	401a      	ands	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4a1d      	ldr	r2, [pc, #116]	@ (800ac78 <TIM_OC5_SetConfig+0xa0>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	4a19      	ldr	r2, [pc, #100]	@ (800ac7c <TIM_OC5_SetConfig+0xa4>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	041b      	lsls	r3, r3, #16
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a15      	ldr	r2, [pc, #84]	@ (800ac80 <TIM_OC5_SetConfig+0xa8>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d007      	beq.n	800ac3e <TIM_OC5_SetConfig+0x66>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a14      	ldr	r2, [pc, #80]	@ (800ac84 <TIM_OC5_SetConfig+0xac>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d003      	beq.n	800ac3e <TIM_OC5_SetConfig+0x66>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a13      	ldr	r2, [pc, #76]	@ (800ac88 <TIM_OC5_SetConfig+0xb0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d109      	bne.n	800ac52 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	4a0c      	ldr	r2, [pc, #48]	@ (800ac74 <TIM_OC5_SetConfig+0x9c>)
 800ac42:	4013      	ands	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	021b      	lsls	r3, r3, #8
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	621a      	str	r2, [r3, #32]
}
 800ac6c:	46c0      	nop			@ (mov r8, r8)
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b006      	add	sp, #24
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	fffeffff 	.word	0xfffeffff
 800ac78:	fffeff8f 	.word	0xfffeff8f
 800ac7c:	fffdffff 	.word	0xfffdffff
 800ac80:	40012c00 	.word	0x40012c00
 800ac84:	40014400 	.word	0x40014400
 800ac88:	40014800 	.word	0x40014800

0800ac8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	4a22      	ldr	r2, [pc, #136]	@ (800ad2c <TIM_OC6_SetConfig+0xa0>)
 800aca2:	401a      	ands	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	4a1e      	ldr	r2, [pc, #120]	@ (800ad30 <TIM_OC6_SetConfig+0xa4>)
 800acb8:	4013      	ands	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	021b      	lsls	r3, r3, #8
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	4a1a      	ldr	r2, [pc, #104]	@ (800ad34 <TIM_OC6_SetConfig+0xa8>)
 800accc:	4013      	ands	r3, r2
 800acce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	051b      	lsls	r3, r3, #20
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a16      	ldr	r2, [pc, #88]	@ (800ad38 <TIM_OC6_SetConfig+0xac>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d007      	beq.n	800acf4 <TIM_OC6_SetConfig+0x68>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a15      	ldr	r2, [pc, #84]	@ (800ad3c <TIM_OC6_SetConfig+0xb0>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d003      	beq.n	800acf4 <TIM_OC6_SetConfig+0x68>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a14      	ldr	r2, [pc, #80]	@ (800ad40 <TIM_OC6_SetConfig+0xb4>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d109      	bne.n	800ad08 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	4a13      	ldr	r2, [pc, #76]	@ (800ad44 <TIM_OC6_SetConfig+0xb8>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	029b      	lsls	r3, r3, #10
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	621a      	str	r2, [r3, #32]
}
 800ad22:	46c0      	nop			@ (mov r8, r8)
 800ad24:	46bd      	mov	sp, r7
 800ad26:	b006      	add	sp, #24
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	46c0      	nop			@ (mov r8, r8)
 800ad2c:	ffefffff 	.word	0xffefffff
 800ad30:	feff8fff 	.word	0xfeff8fff
 800ad34:	ffdfffff 	.word	0xffdfffff
 800ad38:	40012c00 	.word	0x40012c00
 800ad3c:	40014400 	.word	0x40014400
 800ad40:	40014800 	.word	0x40014800
 800ad44:	fffbffff 	.word	0xfffbffff

0800ad48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	2201      	movs	r2, #1
 800ad62:	4393      	bics	r3, r2
 800ad64:	001a      	movs	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4a1e      	ldr	r2, [pc, #120]	@ (800adec <TIM_TI1_SetConfig+0xa4>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d008      	beq.n	800ad8a <TIM_TI1_SetConfig+0x42>
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	2380      	movs	r3, #128	@ 0x80
 800ad7c:	05db      	lsls	r3, r3, #23
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d003      	beq.n	800ad8a <TIM_TI1_SetConfig+0x42>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	4a1a      	ldr	r2, [pc, #104]	@ (800adf0 <TIM_TI1_SetConfig+0xa8>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d101      	bne.n	800ad8e <TIM_TI1_SetConfig+0x46>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <TIM_TI1_SetConfig+0x48>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d008      	beq.n	800ada6 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2203      	movs	r2, #3
 800ad98:	4393      	bics	r3, r2
 800ad9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	e003      	b.n	800adae <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2201      	movs	r2, #1
 800adaa:	4313      	orrs	r3, r2
 800adac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	22f0      	movs	r2, #240	@ 0xf0
 800adb2:	4393      	bics	r3, r2
 800adb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	22ff      	movs	r2, #255	@ 0xff
 800adbc:	4013      	ands	r3, r2
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	220a      	movs	r2, #10
 800adc8:	4393      	bics	r3, r2
 800adca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	220a      	movs	r2, #10
 800add0:	4013      	ands	r3, r2
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	621a      	str	r2, [r3, #32]
}
 800ade4:	46c0      	nop			@ (mov r8, r8)
 800ade6:	46bd      	mov	sp, r7
 800ade8:	b006      	add	sp, #24
 800adea:	bd80      	pop	{r7, pc}
 800adec:	40012c00 	.word	0x40012c00
 800adf0:	40000400 	.word	0x40000400

0800adf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	4393      	bics	r3, r2
 800ae0e:	001a      	movs	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	22f0      	movs	r2, #240	@ 0xf0
 800ae1e:	4393      	bics	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	220a      	movs	r2, #10
 800ae30:	4393      	bics	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	621a      	str	r2, [r3, #32]
}
 800ae48:	46c0      	nop			@ (mov r8, r8)
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	b006      	add	sp, #24
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	2210      	movs	r2, #16
 800ae6a:	4393      	bics	r3, r2
 800ae6c:	001a      	movs	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	4a14      	ldr	r2, [pc, #80]	@ (800aecc <TIM_TI2_SetConfig+0x7c>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	021b      	lsls	r3, r3, #8
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	4a10      	ldr	r2, [pc, #64]	@ (800aed0 <TIM_TI2_SetConfig+0x80>)
 800ae8e:	4013      	ands	r3, r2
 800ae90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	031b      	lsls	r3, r3, #12
 800ae96:	041b      	lsls	r3, r3, #16
 800ae98:	0c1b      	lsrs	r3, r3, #16
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	22a0      	movs	r2, #160	@ 0xa0
 800aea4:	4393      	bics	r3, r2
 800aea6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	22a0      	movs	r2, #160	@ 0xa0
 800aeae:	4013      	ands	r3, r2
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	46c0      	nop			@ (mov r8, r8)
 800aec4:	46bd      	mov	sp, r7
 800aec6:	b006      	add	sp, #24
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	46c0      	nop			@ (mov r8, r8)
 800aecc:	fffffcff 	.word	0xfffffcff
 800aed0:	ffff0fff 	.word	0xffff0fff

0800aed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	2210      	movs	r2, #16
 800aeec:	4393      	bics	r3, r2
 800aeee:	001a      	movs	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	4a0d      	ldr	r2, [pc, #52]	@ (800af34 <TIM_TI2_ConfigInputStage+0x60>)
 800aefe:	4013      	ands	r3, r2
 800af00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	031b      	lsls	r3, r3, #12
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	4313      	orrs	r3, r2
 800af0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	22a0      	movs	r2, #160	@ 0xa0
 800af10:	4393      	bics	r3, r2
 800af12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	621a      	str	r2, [r3, #32]
}
 800af2a:	46c0      	nop			@ (mov r8, r8)
 800af2c:	46bd      	mov	sp, r7
 800af2e:	b006      	add	sp, #24
 800af30:	bd80      	pop	{r7, pc}
 800af32:	46c0      	nop			@ (mov r8, r8)
 800af34:	ffff0fff 	.word	0xffff0fff

0800af38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	4a17      	ldr	r2, [pc, #92]	@ (800afb0 <TIM_TI3_SetConfig+0x78>)
 800af52:	401a      	ands	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2203      	movs	r2, #3
 800af62:	4393      	bics	r3, r2
 800af64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	22f0      	movs	r2, #240	@ 0xf0
 800af72:	4393      	bics	r3, r2
 800af74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	011b      	lsls	r3, r3, #4
 800af7a:	22ff      	movs	r2, #255	@ 0xff
 800af7c:	4013      	ands	r3, r2
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	4313      	orrs	r3, r2
 800af82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	4a0b      	ldr	r2, [pc, #44]	@ (800afb4 <TIM_TI3_SetConfig+0x7c>)
 800af88:	4013      	ands	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	021a      	lsls	r2, r3, #8
 800af90:	23a0      	movs	r3, #160	@ 0xa0
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	4013      	ands	r3, r2
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4313      	orrs	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	621a      	str	r2, [r3, #32]
}
 800afa8:	46c0      	nop			@ (mov r8, r8)
 800afaa:	46bd      	mov	sp, r7
 800afac:	b006      	add	sp, #24
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	fffffeff 	.word	0xfffffeff
 800afb4:	fffff5ff 	.word	0xfffff5ff

0800afb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	4a18      	ldr	r2, [pc, #96]	@ (800b034 <TIM_TI4_SetConfig+0x7c>)
 800afd2:	401a      	ands	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	4a15      	ldr	r2, [pc, #84]	@ (800b038 <TIM_TI4_SetConfig+0x80>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	4313      	orrs	r3, r2
 800afee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	4a12      	ldr	r2, [pc, #72]	@ (800b03c <TIM_TI4_SetConfig+0x84>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	031b      	lsls	r3, r3, #12
 800affc:	041b      	lsls	r3, r3, #16
 800affe:	0c1b      	lsrs	r3, r3, #16
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	4313      	orrs	r3, r2
 800b004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	4a0d      	ldr	r2, [pc, #52]	@ (800b040 <TIM_TI4_SetConfig+0x88>)
 800b00a:	4013      	ands	r3, r2
 800b00c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	031a      	lsls	r2, r3, #12
 800b012:	23a0      	movs	r3, #160	@ 0xa0
 800b014:	021b      	lsls	r3, r3, #8
 800b016:	4013      	ands	r3, r2
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	46c0      	nop			@ (mov r8, r8)
 800b02c:	46bd      	mov	sp, r7
 800b02e:	b006      	add	sp, #24
 800b030:	bd80      	pop	{r7, pc}
 800b032:	46c0      	nop			@ (mov r8, r8)
 800b034:	ffffefff 	.word	0xffffefff
 800b038:	fffffcff 	.word	0xfffffcff
 800b03c:	ffff0fff 	.word	0xffff0fff
 800b040:	ffff5fff 	.word	0xffff5fff

0800b044 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4a08      	ldr	r2, [pc, #32]	@ (800b078 <TIM_ITRx_SetConfig+0x34>)
 800b058:	4013      	ands	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	2207      	movs	r2, #7
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	609a      	str	r2, [r3, #8]
}
 800b06e:	46c0      	nop			@ (mov r8, r8)
 800b070:	46bd      	mov	sp, r7
 800b072:	b004      	add	sp, #16
 800b074:	bd80      	pop	{r7, pc}
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	ffcfff8f 	.word	0xffcfff8f

0800b07c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	4a09      	ldr	r2, [pc, #36]	@ (800b0b8 <TIM_ETR_SetConfig+0x3c>)
 800b094:	4013      	ands	r3, r2
 800b096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	021a      	lsls	r2, r3, #8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	609a      	str	r2, [r3, #8]
}
 800b0b0:	46c0      	nop			@ (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b006      	add	sp, #24
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	ffff00ff 	.word	0xffff00ff

0800b0bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	221f      	movs	r2, #31
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	409a      	lsls	r2, r3
 800b0d2:	0013      	movs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	43d2      	mvns	r2, r2
 800b0de:	401a      	ands	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a1a      	ldr	r2, [r3, #32]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	211f      	movs	r1, #31
 800b0ec:	400b      	ands	r3, r1
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	4099      	lsls	r1, r3
 800b0f2:	000b      	movs	r3, r1
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	621a      	str	r2, [r3, #32]
}
 800b0fa:	46c0      	nop			@ (mov r8, r8)
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b006      	add	sp, #24
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2184      	movs	r1, #132	@ 0x84
 800b110:	4a1c      	ldr	r2, [pc, #112]	@ (800b184 <TIM_ResetCallback+0x80>)
 800b112:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2188      	movs	r1, #136	@ 0x88
 800b118:	4a1b      	ldr	r2, [pc, #108]	@ (800b188 <TIM_ResetCallback+0x84>)
 800b11a:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	218c      	movs	r1, #140	@ 0x8c
 800b120:	4a1a      	ldr	r2, [pc, #104]	@ (800b18c <TIM_ResetCallback+0x88>)
 800b122:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2190      	movs	r1, #144	@ 0x90
 800b128:	4a19      	ldr	r2, [pc, #100]	@ (800b190 <TIM_ResetCallback+0x8c>)
 800b12a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2194      	movs	r1, #148	@ 0x94
 800b130:	4a18      	ldr	r2, [pc, #96]	@ (800b194 <TIM_ResetCallback+0x90>)
 800b132:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2198      	movs	r1, #152	@ 0x98
 800b138:	4a17      	ldr	r2, [pc, #92]	@ (800b198 <TIM_ResetCallback+0x94>)
 800b13a:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	219c      	movs	r1, #156	@ 0x9c
 800b140:	4a16      	ldr	r2, [pc, #88]	@ (800b19c <TIM_ResetCallback+0x98>)
 800b142:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	21a0      	movs	r1, #160	@ 0xa0
 800b148:	4a15      	ldr	r2, [pc, #84]	@ (800b1a0 <TIM_ResetCallback+0x9c>)
 800b14a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	21a4      	movs	r1, #164	@ 0xa4
 800b150:	4a14      	ldr	r2, [pc, #80]	@ (800b1a4 <TIM_ResetCallback+0xa0>)
 800b152:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	21a8      	movs	r1, #168	@ 0xa8
 800b158:	4a13      	ldr	r2, [pc, #76]	@ (800b1a8 <TIM_ResetCallback+0xa4>)
 800b15a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	21ac      	movs	r1, #172	@ 0xac
 800b160:	4a12      	ldr	r2, [pc, #72]	@ (800b1ac <TIM_ResetCallback+0xa8>)
 800b162:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	21b0      	movs	r1, #176	@ 0xb0
 800b168:	4a11      	ldr	r2, [pc, #68]	@ (800b1b0 <TIM_ResetCallback+0xac>)
 800b16a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	21b4      	movs	r1, #180	@ 0xb4
 800b170:	4a10      	ldr	r2, [pc, #64]	@ (800b1b4 <TIM_ResetCallback+0xb0>)
 800b172:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	21b8      	movs	r1, #184	@ 0xb8
 800b178:	4a0f      	ldr	r2, [pc, #60]	@ (800b1b8 <TIM_ResetCallback+0xb4>)
 800b17a:	505a      	str	r2, [r3, r1]
}
 800b17c:	46c0      	nop			@ (mov r8, r8)
 800b17e:	46bd      	mov	sp, r7
 800b180:	b002      	add	sp, #8
 800b182:	bd80      	pop	{r7, pc}
 800b184:	0800a45d 	.word	0x0800a45d
 800b188:	0800a46d 	.word	0x0800a46d
 800b18c:	0800a4cd 	.word	0x0800a4cd
 800b190:	0800a4dd 	.word	0x0800a4dd
 800b194:	0800a48d 	.word	0x0800a48d
 800b198:	0800a49d 	.word	0x0800a49d
 800b19c:	0800a47d 	.word	0x0800a47d
 800b1a0:	0800a4ad 	.word	0x0800a4ad
 800b1a4:	0800a4bd 	.word	0x0800a4bd
 800b1a8:	0800a4ed 	.word	0x0800a4ed
 800b1ac:	0800b3c5 	.word	0x0800b3c5
 800b1b0:	0800b3d5 	.word	0x0800b3d5
 800b1b4:	0800b3e5 	.word	0x0800b3e5
 800b1b8:	0800b3f5 	.word	0x0800b3f5

0800b1bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	223c      	movs	r2, #60	@ 0x3c
 800b1ca:	5c9b      	ldrb	r3, [r3, r2]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d101      	bne.n	800b1d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	e050      	b.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	223c      	movs	r2, #60	@ 0x3c
 800b1d8:	2101      	movs	r1, #1
 800b1da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	223d      	movs	r2, #61	@ 0x3d
 800b1e0:	2102      	movs	r1, #2
 800b1e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a21      	ldr	r2, [pc, #132]	@ (800b280 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d108      	bne.n	800b210 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	4a20      	ldr	r2, [pc, #128]	@ (800b284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b202:	4013      	ands	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2270      	movs	r2, #112	@ 0x70
 800b214:	4393      	bics	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a14      	ldr	r2, [pc, #80]	@ (800b280 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d00a      	beq.n	800b24a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	2380      	movs	r3, #128	@ 0x80
 800b23a:	05db      	lsls	r3, r3, #23
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d004      	beq.n	800b24a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a10      	ldr	r2, [pc, #64]	@ (800b288 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d10c      	bne.n	800b264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2280      	movs	r2, #128	@ 0x80
 800b24e:	4393      	bics	r3, r2
 800b250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	223d      	movs	r2, #61	@ 0x3d
 800b268:	2101      	movs	r1, #1
 800b26a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	223c      	movs	r2, #60	@ 0x3c
 800b270:	2100      	movs	r1, #0
 800b272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	0018      	movs	r0, r3
 800b278:	46bd      	mov	sp, r7
 800b27a:	b004      	add	sp, #16
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	46c0      	nop			@ (mov r8, r8)
 800b280:	40012c00 	.word	0x40012c00
 800b284:	ff0fffff 	.word	0xff0fffff
 800b288:	40000400 	.word	0x40000400

0800b28c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	223c      	movs	r2, #60	@ 0x3c
 800b29e:	5c9b      	ldrb	r3, [r3, r2]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e06f      	b.n	800b388 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	223c      	movs	r2, #60	@ 0x3c
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	22ff      	movs	r2, #255	@ 0xff
 800b2b4:	4393      	bics	r3, r2
 800b2b6:	001a      	movs	r2, r3
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4a33      	ldr	r2, [pc, #204]	@ (800b390 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4a30      	ldr	r2, [pc, #192]	@ (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4a2e      	ldr	r2, [pc, #184]	@ (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b2e0:	401a      	ands	r2, r3
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4a2b      	ldr	r2, [pc, #172]	@ (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b2ee:	401a      	ands	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a29      	ldr	r2, [pc, #164]	@ (800b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b2fc:	401a      	ands	r2, r3
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a26      	ldr	r2, [pc, #152]	@ (800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b30a:	401a      	ands	r2, r3
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b310:	4313      	orrs	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4a24      	ldr	r2, [pc, #144]	@ (800b3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b318:	401a      	ands	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	4313      	orrs	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4a21      	ldr	r2, [pc, #132]	@ (800b3ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b328:	401a      	ands	r2, r3
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a1e      	ldr	r2, [pc, #120]	@ (800b3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d11c      	bne.n	800b376 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4a1d      	ldr	r2, [pc, #116]	@ (800b3b4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b340:	401a      	ands	r2, r3
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b346:	051b      	lsls	r3, r3, #20
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b350:	401a      	ands	r2, r3
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	4a17      	ldr	r2, [pc, #92]	@ (800b3bc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b35e:	401a      	ands	r2, r3
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b364:	4313      	orrs	r3, r2
 800b366:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4a15      	ldr	r2, [pc, #84]	@ (800b3c0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b36c:	401a      	ands	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	223c      	movs	r2, #60	@ 0x3c
 800b382:	2100      	movs	r1, #0
 800b384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	0018      	movs	r0, r3
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b004      	add	sp, #16
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	fffffcff 	.word	0xfffffcff
 800b394:	fffffbff 	.word	0xfffffbff
 800b398:	fffff7ff 	.word	0xfffff7ff
 800b39c:	ffffefff 	.word	0xffffefff
 800b3a0:	ffffdfff 	.word	0xffffdfff
 800b3a4:	ffffbfff 	.word	0xffffbfff
 800b3a8:	fff0ffff 	.word	0xfff0ffff
 800b3ac:	efffffff 	.word	0xefffffff
 800b3b0:	40012c00 	.word	0x40012c00
 800b3b4:	ff0fffff 	.word	0xff0fffff
 800b3b8:	feffffff 	.word	0xfeffffff
 800b3bc:	fdffffff 	.word	0xfdffffff
 800b3c0:	dfffffff 	.word	0xdfffffff

0800b3c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3cc:	46c0      	nop			@ (mov r8, r8)
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	b002      	add	sp, #8
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b3dc:	46c0      	nop			@ (mov r8, r8)
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	b002      	add	sp, #8
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3ec:	46c0      	nop			@ (mov r8, r8)
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	b002      	add	sp, #8
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3fc:	46c0      	nop			@ (mov r8, r8)
 800b3fe:	46bd      	mov	sp, r7
 800b400:	b002      	add	sp, #8
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e055      	b.n	800b4c2 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2288      	movs	r2, #136	@ 0x88
 800b41a:	589b      	ldr	r3, [r3, r2]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d116      	bne.n	800b44e <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2284      	movs	r2, #132	@ 0x84
 800b424:	2100      	movs	r1, #0
 800b426:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	0018      	movs	r0, r3
 800b42c:	f000 fce0 	bl	800bdf0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	22c4      	movs	r2, #196	@ 0xc4
 800b434:	589b      	ldr	r3, [r3, r2]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d103      	bne.n	800b442 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	21c4      	movs	r1, #196	@ 0xc4
 800b43e:	4a23      	ldr	r2, [pc, #140]	@ (800b4cc <HAL_UART_Init+0xc8>)
 800b440:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	22c4      	movs	r2, #196	@ 0xc4
 800b446:	589b      	ldr	r3, [r3, r2]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	0010      	movs	r0, r2
 800b44c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2288      	movs	r2, #136	@ 0x88
 800b452:	2124      	movs	r1, #36	@ 0x24
 800b454:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2101      	movs	r1, #1
 800b462:	438a      	bics	r2, r1
 800b464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	0018      	movs	r0, r3
 800b472:	f000 ff85 	bl	800c380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	0018      	movs	r0, r3
 800b47a:	f000 fd09 	bl	800be90 <UART_SetConfig>
 800b47e:	0003      	movs	r3, r0
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e01c      	b.n	800b4c2 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	490f      	ldr	r1, [pc, #60]	@ (800b4d0 <HAL_UART_Init+0xcc>)
 800b494:	400a      	ands	r2, r1
 800b496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689a      	ldr	r2, [r3, #8]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	212a      	movs	r1, #42	@ 0x2a
 800b4a4:	438a      	bics	r2, r1
 800b4a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f001 f814 	bl	800c4e8 <UART_CheckIdleState>
 800b4c0:	0003      	movs	r3, r0
}
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	b002      	add	sp, #8
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	46c0      	nop			@ (mov r8, r8)
 800b4cc:	08004c11 	.word	0x08004c11
 800b4d0:	ffffb7ff 	.word	0xffffb7ff

0800b4d4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	607a      	str	r2, [r7, #4]
 800b4de:	230b      	movs	r3, #11
 800b4e0:	18fb      	adds	r3, r7, r3
 800b4e2:	1c0a      	adds	r2, r1, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	2317      	movs	r3, #23
 800b4e8:	18fb      	adds	r3, r7, r3
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d109      	bne.n	800b508 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2290      	movs	r2, #144	@ 0x90
 800b4f8:	589b      	ldr	r3, [r3, r2]
 800b4fa:	2240      	movs	r2, #64	@ 0x40
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2190      	movs	r1, #144	@ 0x90
 800b502:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e08f      	b.n	800b628 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2288      	movs	r2, #136	@ 0x88
 800b50c:	589b      	ldr	r3, [r3, r2]
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d157      	bne.n	800b5c2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b512:	230b      	movs	r3, #11
 800b514:	18fb      	adds	r3, r7, r3
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	2b0c      	cmp	r3, #12
 800b51a:	d845      	bhi.n	800b5a8 <HAL_UART_RegisterCallback+0xd4>
 800b51c:	009a      	lsls	r2, r3, #2
 800b51e:	4b44      	ldr	r3, [pc, #272]	@ (800b630 <HAL_UART_RegisterCallback+0x15c>)
 800b520:	18d3      	adds	r3, r2, r3
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2194      	movs	r1, #148	@ 0x94
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	505a      	str	r2, [r3, r1]
        break;
 800b52e:	e078      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2198      	movs	r1, #152	@ 0x98
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	505a      	str	r2, [r3, r1]
        break;
 800b538:	e073      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	219c      	movs	r1, #156	@ 0x9c
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	505a      	str	r2, [r3, r1]
        break;
 800b542:	e06e      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	21a0      	movs	r1, #160	@ 0xa0
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	505a      	str	r2, [r3, r1]
        break;
 800b54c:	e069      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	21a4      	movs	r1, #164	@ 0xa4
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	505a      	str	r2, [r3, r1]
        break;
 800b556:	e064      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	21a8      	movs	r1, #168	@ 0xa8
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	505a      	str	r2, [r3, r1]
        break;
 800b560:	e05f      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	21ac      	movs	r1, #172	@ 0xac
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	505a      	str	r2, [r3, r1]
        break;
 800b56a:	e05a      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	21b0      	movs	r1, #176	@ 0xb0
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	505a      	str	r2, [r3, r1]
        break;
 800b574:	e055      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	21b4      	movs	r1, #180	@ 0xb4
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	505a      	str	r2, [r3, r1]
        break;
 800b57e:	e050      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	21b8      	movs	r1, #184	@ 0xb8
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	505a      	str	r2, [r3, r1]
        break;
 800b588:	e04b      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	21bc      	movs	r1, #188	@ 0xbc
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	505a      	str	r2, [r3, r1]
        break;
 800b592:	e046      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	21c4      	movs	r1, #196	@ 0xc4
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	505a      	str	r2, [r3, r1]
        break;
 800b59c:	e041      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	21c8      	movs	r1, #200	@ 0xc8
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	505a      	str	r2, [r3, r1]
        break;
 800b5a6:	e03c      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2290      	movs	r2, #144	@ 0x90
 800b5ac:	589b      	ldr	r3, [r3, r2]
 800b5ae:	2240      	movs	r2, #64	@ 0x40
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2190      	movs	r1, #144	@ 0x90
 800b5b6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b5b8:	2317      	movs	r3, #23
 800b5ba:	18fb      	adds	r3, r7, r3
 800b5bc:	2201      	movs	r2, #1
 800b5be:	701a      	strb	r2, [r3, #0]
        break;
 800b5c0:	e02f      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2288      	movs	r2, #136	@ 0x88
 800b5c6:	589b      	ldr	r3, [r3, r2]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d11e      	bne.n	800b60a <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800b5cc:	230b      	movs	r3, #11
 800b5ce:	18fb      	adds	r3, r7, r3
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b0b      	cmp	r3, #11
 800b5d4:	d002      	beq.n	800b5dc <HAL_UART_RegisterCallback+0x108>
 800b5d6:	2b0c      	cmp	r3, #12
 800b5d8:	d005      	beq.n	800b5e6 <HAL_UART_RegisterCallback+0x112>
 800b5da:	e009      	b.n	800b5f0 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	21c4      	movs	r1, #196	@ 0xc4
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	505a      	str	r2, [r3, r1]
        break;
 800b5e4:	e01d      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	21c8      	movs	r1, #200	@ 0xc8
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	505a      	str	r2, [r3, r1]
        break;
 800b5ee:	e018      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2290      	movs	r2, #144	@ 0x90
 800b5f4:	589b      	ldr	r3, [r3, r2]
 800b5f6:	2240      	movs	r2, #64	@ 0x40
 800b5f8:	431a      	orrs	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2190      	movs	r1, #144	@ 0x90
 800b5fe:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b600:	2317      	movs	r3, #23
 800b602:	18fb      	adds	r3, r7, r3
 800b604:	2201      	movs	r2, #1
 800b606:	701a      	strb	r2, [r3, #0]
        break;
 800b608:	e00b      	b.n	800b622 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2290      	movs	r2, #144	@ 0x90
 800b60e:	589b      	ldr	r3, [r3, r2]
 800b610:	2240      	movs	r2, #64	@ 0x40
 800b612:	431a      	orrs	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2190      	movs	r1, #144	@ 0x90
 800b618:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800b61a:	2317      	movs	r3, #23
 800b61c:	18fb      	adds	r3, r7, r3
 800b61e:	2201      	movs	r2, #1
 800b620:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b622:	2317      	movs	r3, #23
 800b624:	18fb      	adds	r3, r7, r3
 800b626:	781b      	ldrb	r3, [r3, #0]
}
 800b628:	0018      	movs	r0, r3
 800b62a:	46bd      	mov	sp, r7
 800b62c:	b006      	add	sp, #24
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	0800d738 	.word	0x0800d738

0800b634 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	1dbb      	adds	r3, r7, #6
 800b640:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	228c      	movs	r2, #140	@ 0x8c
 800b646:	589b      	ldr	r3, [r3, r2]
 800b648:	2b20      	cmp	r3, #32
 800b64a:	d14a      	bne.n	800b6e2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_UART_Receive_DMA+0x26>
 800b652:	1dbb      	adds	r3, r7, #6
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e042      	b.n	800b6e4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	689a      	ldr	r2, [r3, #8]
 800b662:	2380      	movs	r3, #128	@ 0x80
 800b664:	015b      	lsls	r3, r3, #5
 800b666:	429a      	cmp	r2, r3
 800b668:	d109      	bne.n	800b67e <HAL_UART_Receive_DMA+0x4a>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2201      	movs	r2, #1
 800b676:	4013      	ands	r3, r2
 800b678:	d001      	beq.n	800b67e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e032      	b.n	800b6e4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a18      	ldr	r2, [pc, #96]	@ (800b6ec <HAL_UART_Receive_DMA+0xb8>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d020      	beq.n	800b6d0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	2380      	movs	r3, #128	@ 0x80
 800b696:	041b      	lsls	r3, r3, #16
 800b698:	4013      	ands	r3, r2
 800b69a:	d019      	beq.n	800b6d0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b69c:	f3ef 8310 	mrs	r3, PRIMASK
 800b6a0:	613b      	str	r3, [r7, #16]
  return(result);
 800b6a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6a4:	61fb      	str	r3, [r7, #28]
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f383 8810 	msr	PRIMASK, r3
}
 800b6b0:	46c0      	nop			@ (mov r8, r8)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2180      	movs	r1, #128	@ 0x80
 800b6be:	04c9      	lsls	r1, r1, #19
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	f383 8810 	msr	PRIMASK, r3
}
 800b6ce:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b6d0:	1dbb      	adds	r3, r7, #6
 800b6d2:	881a      	ldrh	r2, [r3, #0]
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f001 f81f 	bl	800c71c <UART_Start_Receive_DMA>
 800b6de:	0003      	movs	r3, r0
 800b6e0:	e000      	b.n	800b6e4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800b6e2:	2302      	movs	r3, #2
  }
}
 800b6e4:	0018      	movs	r0, r3
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	b008      	add	sp, #32
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	40008000 	.word	0x40008000

0800b6f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6f0:	b5b0      	push	{r4, r5, r7, lr}
 800b6f2:	b0aa      	sub	sp, #168	@ 0xa8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	22a4      	movs	r2, #164	@ 0xa4
 800b700:	18b9      	adds	r1, r7, r2
 800b702:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	20a0      	movs	r0, #160	@ 0xa0
 800b70c:	1839      	adds	r1, r7, r0
 800b70e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	249c      	movs	r4, #156	@ 0x9c
 800b718:	1939      	adds	r1, r7, r4
 800b71a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b71c:	0011      	movs	r1, r2
 800b71e:	18bb      	adds	r3, r7, r2
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4aa5      	ldr	r2, [pc, #660]	@ (800b9b8 <HAL_UART_IRQHandler+0x2c8>)
 800b724:	4013      	ands	r3, r2
 800b726:	2298      	movs	r2, #152	@ 0x98
 800b728:	18bd      	adds	r5, r7, r2
 800b72a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800b72c:	18bb      	adds	r3, r7, r2
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d11a      	bne.n	800b76a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b734:	187b      	adds	r3, r7, r1
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2220      	movs	r2, #32
 800b73a:	4013      	ands	r3, r2
 800b73c:	d015      	beq.n	800b76a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b73e:	183b      	adds	r3, r7, r0
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2220      	movs	r2, #32
 800b744:	4013      	ands	r3, r2
 800b746:	d105      	bne.n	800b754 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b748:	193b      	adds	r3, r7, r4
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	2380      	movs	r3, #128	@ 0x80
 800b74e:	055b      	lsls	r3, r3, #21
 800b750:	4013      	ands	r3, r2
 800b752:	d00a      	beq.n	800b76a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d100      	bne.n	800b75e <HAL_UART_IRQHandler+0x6e>
 800b75c:	e2ea      	b.n	800bd34 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	0010      	movs	r0, r2
 800b766:	4798      	blx	r3
      }
      return;
 800b768:	e2e4      	b.n	800bd34 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b76a:	2398      	movs	r3, #152	@ 0x98
 800b76c:	18fb      	adds	r3, r7, r3
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d100      	bne.n	800b776 <HAL_UART_IRQHandler+0x86>
 800b774:	e128      	b.n	800b9c8 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b776:	239c      	movs	r3, #156	@ 0x9c
 800b778:	18fb      	adds	r3, r7, r3
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a8f      	ldr	r2, [pc, #572]	@ (800b9bc <HAL_UART_IRQHandler+0x2cc>)
 800b77e:	4013      	ands	r3, r2
 800b780:	d106      	bne.n	800b790 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b782:	23a0      	movs	r3, #160	@ 0xa0
 800b784:	18fb      	adds	r3, r7, r3
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a8d      	ldr	r2, [pc, #564]	@ (800b9c0 <HAL_UART_IRQHandler+0x2d0>)
 800b78a:	4013      	ands	r3, r2
 800b78c:	d100      	bne.n	800b790 <HAL_UART_IRQHandler+0xa0>
 800b78e:	e11b      	b.n	800b9c8 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b790:	23a4      	movs	r3, #164	@ 0xa4
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2201      	movs	r2, #1
 800b798:	4013      	ands	r3, r2
 800b79a:	d012      	beq.n	800b7c2 <HAL_UART_IRQHandler+0xd2>
 800b79c:	23a0      	movs	r3, #160	@ 0xa0
 800b79e:	18fb      	adds	r3, r7, r3
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	2380      	movs	r3, #128	@ 0x80
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	d00b      	beq.n	800b7c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2290      	movs	r2, #144	@ 0x90
 800b7b6:	589b      	ldr	r3, [r3, r2]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2190      	movs	r1, #144	@ 0x90
 800b7c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7c2:	23a4      	movs	r3, #164	@ 0xa4
 800b7c4:	18fb      	adds	r3, r7, r3
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2202      	movs	r2, #2
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	d011      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x102>
 800b7ce:	239c      	movs	r3, #156	@ 0x9c
 800b7d0:	18fb      	adds	r3, r7, r3
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	d00b      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2290      	movs	r2, #144	@ 0x90
 800b7e6:	589b      	ldr	r3, [r3, r2]
 800b7e8:	2204      	movs	r2, #4
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2190      	movs	r1, #144	@ 0x90
 800b7f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7f2:	23a4      	movs	r3, #164	@ 0xa4
 800b7f4:	18fb      	adds	r3, r7, r3
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2204      	movs	r2, #4
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	d011      	beq.n	800b822 <HAL_UART_IRQHandler+0x132>
 800b7fe:	239c      	movs	r3, #156	@ 0x9c
 800b800:	18fb      	adds	r3, r7, r3
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2201      	movs	r2, #1
 800b806:	4013      	ands	r3, r2
 800b808:	d00b      	beq.n	800b822 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2204      	movs	r2, #4
 800b810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2290      	movs	r2, #144	@ 0x90
 800b816:	589b      	ldr	r3, [r3, r2]
 800b818:	2202      	movs	r2, #2
 800b81a:	431a      	orrs	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2190      	movs	r1, #144	@ 0x90
 800b820:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b822:	23a4      	movs	r3, #164	@ 0xa4
 800b824:	18fb      	adds	r3, r7, r3
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2208      	movs	r2, #8
 800b82a:	4013      	ands	r3, r2
 800b82c:	d017      	beq.n	800b85e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b82e:	23a0      	movs	r3, #160	@ 0xa0
 800b830:	18fb      	adds	r3, r7, r3
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2220      	movs	r2, #32
 800b836:	4013      	ands	r3, r2
 800b838:	d105      	bne.n	800b846 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b83a:	239c      	movs	r3, #156	@ 0x9c
 800b83c:	18fb      	adds	r3, r7, r3
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a5e      	ldr	r2, [pc, #376]	@ (800b9bc <HAL_UART_IRQHandler+0x2cc>)
 800b842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b844:	d00b      	beq.n	800b85e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2208      	movs	r2, #8
 800b84c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2290      	movs	r2, #144	@ 0x90
 800b852:	589b      	ldr	r3, [r3, r2]
 800b854:	2208      	movs	r2, #8
 800b856:	431a      	orrs	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2190      	movs	r1, #144	@ 0x90
 800b85c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b85e:	23a4      	movs	r3, #164	@ 0xa4
 800b860:	18fb      	adds	r3, r7, r3
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	2380      	movs	r3, #128	@ 0x80
 800b866:	011b      	lsls	r3, r3, #4
 800b868:	4013      	ands	r3, r2
 800b86a:	d013      	beq.n	800b894 <HAL_UART_IRQHandler+0x1a4>
 800b86c:	23a0      	movs	r3, #160	@ 0xa0
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	2380      	movs	r3, #128	@ 0x80
 800b874:	04db      	lsls	r3, r3, #19
 800b876:	4013      	ands	r3, r2
 800b878:	d00c      	beq.n	800b894 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2280      	movs	r2, #128	@ 0x80
 800b880:	0112      	lsls	r2, r2, #4
 800b882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2290      	movs	r2, #144	@ 0x90
 800b888:	589b      	ldr	r3, [r3, r2]
 800b88a:	2220      	movs	r2, #32
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2190      	movs	r1, #144	@ 0x90
 800b892:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2290      	movs	r2, #144	@ 0x90
 800b898:	589b      	ldr	r3, [r3, r2]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d100      	bne.n	800b8a0 <HAL_UART_IRQHandler+0x1b0>
 800b89e:	e24b      	b.n	800bd38 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8a0:	23a4      	movs	r3, #164	@ 0xa4
 800b8a2:	18fb      	adds	r3, r7, r3
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	d015      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8ac:	23a0      	movs	r3, #160	@ 0xa0
 800b8ae:	18fb      	adds	r3, r7, r3
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	d106      	bne.n	800b8c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8b8:	239c      	movs	r3, #156	@ 0x9c
 800b8ba:	18fb      	adds	r3, r7, r3
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	2380      	movs	r3, #128	@ 0x80
 800b8c0:	055b      	lsls	r3, r3, #21
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	d008      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d004      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	0010      	movs	r0, r2
 800b8d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2290      	movs	r2, #144	@ 0x90
 800b8dc:	589b      	ldr	r3, [r3, r2]
 800b8de:	2194      	movs	r1, #148	@ 0x94
 800b8e0:	187a      	adds	r2, r7, r1
 800b8e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	2240      	movs	r2, #64	@ 0x40
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b40      	cmp	r3, #64	@ 0x40
 800b8f0:	d004      	beq.n	800b8fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8f2:	187b      	adds	r3, r7, r1
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2228      	movs	r2, #40	@ 0x28
 800b8f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8fa:	d050      	beq.n	800b99e <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	0018      	movs	r0, r3
 800b900:	f000 fff2 	bl	800c8e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2240      	movs	r2, #64	@ 0x40
 800b90c:	4013      	ands	r3, r2
 800b90e:	2b40      	cmp	r3, #64	@ 0x40
 800b910:	d13e      	bne.n	800b990 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b912:	f3ef 8310 	mrs	r3, PRIMASK
 800b916:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800b918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b91a:	2090      	movs	r0, #144	@ 0x90
 800b91c:	183a      	adds	r2, r7, r0
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	2301      	movs	r3, #1
 800b922:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b926:	f383 8810 	msr	PRIMASK, r3
}
 800b92a:	46c0      	nop			@ (mov r8, r8)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2140      	movs	r1, #64	@ 0x40
 800b938:	438a      	bics	r2, r1
 800b93a:	609a      	str	r2, [r3, #8]
 800b93c:	183b      	adds	r3, r7, r0
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b944:	f383 8810 	msr	PRIMASK, r3
}
 800b948:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2280      	movs	r2, #128	@ 0x80
 800b94e:	589b      	ldr	r3, [r3, r2]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d016      	beq.n	800b982 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2280      	movs	r2, #128	@ 0x80
 800b958:	589b      	ldr	r3, [r3, r2]
 800b95a:	4a1a      	ldr	r2, [pc, #104]	@ (800b9c4 <HAL_UART_IRQHandler+0x2d4>)
 800b95c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2280      	movs	r2, #128	@ 0x80
 800b962:	589b      	ldr	r3, [r3, r2]
 800b964:	0018      	movs	r0, r3
 800b966:	f7fb fce5 	bl	8007334 <HAL_DMA_Abort_IT>
 800b96a:	1e03      	subs	r3, r0, #0
 800b96c:	d022      	beq.n	800b9b4 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2280      	movs	r2, #128	@ 0x80
 800b972:	589b      	ldr	r3, [r3, r2]
 800b974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	2180      	movs	r1, #128	@ 0x80
 800b97a:	5852      	ldr	r2, [r2, r1]
 800b97c:	0010      	movs	r0, r2
 800b97e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b980:	e018      	b.n	800b9b4 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	22a4      	movs	r2, #164	@ 0xa4
 800b986:	589b      	ldr	r3, [r3, r2]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	0010      	movs	r0, r2
 800b98c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b98e:	e011      	b.n	800b9b4 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	22a4      	movs	r2, #164	@ 0xa4
 800b994:	589b      	ldr	r3, [r3, r2]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	0010      	movs	r0, r2
 800b99a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b99c:	e00a      	b.n	800b9b4 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	22a4      	movs	r2, #164	@ 0xa4
 800b9a2:	589b      	ldr	r3, [r3, r2]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	0010      	movs	r0, r2
 800b9a8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2290      	movs	r2, #144	@ 0x90
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b9b2:	e1c1      	b.n	800bd38 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b4:	46c0      	nop			@ (mov r8, r8)
    return;
 800b9b6:	e1bf      	b.n	800bd38 <HAL_UART_IRQHandler+0x648>
 800b9b8:	0000080f 	.word	0x0000080f
 800b9bc:	10000001 	.word	0x10000001
 800b9c0:	04000120 	.word	0x04000120
 800b9c4:	0800cbbb 	.word	0x0800cbbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d000      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x2e2>
 800b9d0:	e140      	b.n	800bc54 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9d2:	23a4      	movs	r3, #164	@ 0xa4
 800b9d4:	18fb      	adds	r3, r7, r3
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2210      	movs	r2, #16
 800b9da:	4013      	ands	r3, r2
 800b9dc:	d100      	bne.n	800b9e0 <HAL_UART_IRQHandler+0x2f0>
 800b9de:	e139      	b.n	800bc54 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9e0:	23a0      	movs	r3, #160	@ 0xa0
 800b9e2:	18fb      	adds	r3, r7, r3
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2210      	movs	r2, #16
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	d100      	bne.n	800b9ee <HAL_UART_IRQHandler+0x2fe>
 800b9ec:	e132      	b.n	800bc54 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2210      	movs	r2, #16
 800b9f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	2240      	movs	r2, #64	@ 0x40
 800b9fe:	4013      	ands	r3, r2
 800ba00:	2b40      	cmp	r3, #64	@ 0x40
 800ba02:	d000      	beq.n	800ba06 <HAL_UART_IRQHandler+0x316>
 800ba04:	e0a5      	b.n	800bb52 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2280      	movs	r2, #128	@ 0x80
 800ba0a:	589b      	ldr	r3, [r3, r2]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	217e      	movs	r1, #126	@ 0x7e
 800ba12:	187b      	adds	r3, r7, r1
 800ba14:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800ba16:	187b      	adds	r3, r7, r1
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d100      	bne.n	800ba20 <HAL_UART_IRQHandler+0x330>
 800ba1e:	e18d      	b.n	800bd3c <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	225c      	movs	r2, #92	@ 0x5c
 800ba24:	5a9b      	ldrh	r3, [r3, r2]
 800ba26:	187a      	adds	r2, r7, r1
 800ba28:	8812      	ldrh	r2, [r2, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d300      	bcc.n	800ba30 <HAL_UART_IRQHandler+0x340>
 800ba2e:	e185      	b.n	800bd3c <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	187a      	adds	r2, r7, r1
 800ba34:	215e      	movs	r1, #94	@ 0x5e
 800ba36:	8812      	ldrh	r2, [r2, #0]
 800ba38:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2280      	movs	r2, #128	@ 0x80
 800ba3e:	589b      	ldr	r3, [r3, r2]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2220      	movs	r2, #32
 800ba46:	4013      	ands	r3, r2
 800ba48:	d170      	bne.n	800bb2c <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ba50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba52:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba54:	2301      	movs	r3, #1
 800ba56:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5a:	f383 8810 	msr	PRIMASK, r3
}
 800ba5e:	46c0      	nop			@ (mov r8, r8)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	49b8      	ldr	r1, [pc, #736]	@ (800bd4c <HAL_UART_IRQHandler+0x65c>)
 800ba6c:	400a      	ands	r2, r1
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba72:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	f383 8810 	msr	PRIMASK, r3
}
 800ba7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ba82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba84:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba86:	2301      	movs	r3, #1
 800ba88:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba8c:	f383 8810 	msr	PRIMASK, r3
}
 800ba90:	46c0      	nop			@ (mov r8, r8)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	438a      	bics	r2, r1
 800baa0:	609a      	str	r2, [r3, #8]
 800baa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800baa4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baa8:	f383 8810 	msr	PRIMASK, r3
}
 800baac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baae:	f3ef 8310 	mrs	r3, PRIMASK
 800bab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800bab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab6:	673b      	str	r3, [r7, #112]	@ 0x70
 800bab8:	2301      	movs	r3, #1
 800baba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800babc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800babe:	f383 8810 	msr	PRIMASK, r3
}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2140      	movs	r1, #64	@ 0x40
 800bad0:	438a      	bics	r2, r1
 800bad2:	609a      	str	r2, [r3, #8]
 800bad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bad6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bada:	f383 8810 	msr	PRIMASK, r3
}
 800bade:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	228c      	movs	r2, #140	@ 0x8c
 800bae4:	2120      	movs	r1, #32
 800bae6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baee:	f3ef 8310 	mrs	r3, PRIMASK
 800baf2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800baf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800baf8:	2301      	movs	r3, #1
 800bafa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bafc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bafe:	f383 8810 	msr	PRIMASK, r3
}
 800bb02:	46c0      	nop			@ (mov r8, r8)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2110      	movs	r1, #16
 800bb10:	438a      	bics	r2, r1
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb1a:	f383 8810 	msr	PRIMASK, r3
}
 800bb1e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2280      	movs	r2, #128	@ 0x80
 800bb24:	589b      	ldr	r3, [r3, r2]
 800bb26:	0018      	movs	r0, r3
 800bb28:	f7fb fba2 	bl	8007270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2202      	movs	r2, #2
 800bb30:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	22c0      	movs	r2, #192	@ 0xc0
 800bb36:	589b      	ldr	r3, [r3, r2]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	215c      	movs	r1, #92	@ 0x5c
 800bb3c:	5a51      	ldrh	r1, [r2, r1]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	205e      	movs	r0, #94	@ 0x5e
 800bb42:	5a12      	ldrh	r2, [r2, r0]
 800bb44:	b292      	uxth	r2, r2
 800bb46:	1a8a      	subs	r2, r1, r2
 800bb48:	b291      	uxth	r1, r2
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	0010      	movs	r0, r2
 800bb4e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb50:	e0f4      	b.n	800bd3c <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	225c      	movs	r2, #92	@ 0x5c
 800bb56:	5a99      	ldrh	r1, [r3, r2]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	225e      	movs	r2, #94	@ 0x5e
 800bb5c:	5a9b      	ldrh	r3, [r3, r2]
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	208e      	movs	r0, #142	@ 0x8e
 800bb62:	183b      	adds	r3, r7, r0
 800bb64:	1a8a      	subs	r2, r1, r2
 800bb66:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	225e      	movs	r2, #94	@ 0x5e
 800bb6c:	5a9b      	ldrh	r3, [r3, r2]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d100      	bne.n	800bb76 <HAL_UART_IRQHandler+0x486>
 800bb74:	e0e4      	b.n	800bd40 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800bb76:	183b      	adds	r3, r7, r0
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d100      	bne.n	800bb80 <HAL_UART_IRQHandler+0x490>
 800bb7e:	e0df      	b.n	800bd40 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb80:	f3ef 8310 	mrs	r3, PRIMASK
 800bb84:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb86:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb88:	2488      	movs	r4, #136	@ 0x88
 800bb8a:	193a      	adds	r2, r7, r4
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	2301      	movs	r3, #1
 800bb90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f383 8810 	msr	PRIMASK, r3
}
 800bb98:	46c0      	nop			@ (mov r8, r8)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	496a      	ldr	r1, [pc, #424]	@ (800bd50 <HAL_UART_IRQHandler+0x660>)
 800bba6:	400a      	ands	r2, r1
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	193b      	adds	r3, r7, r4
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f383 8810 	msr	PRIMASK, r3
}
 800bbb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbbc:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbbe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbc0:	2484      	movs	r4, #132	@ 0x84
 800bbc2:	193a      	adds	r2, r7, r4
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	f383 8810 	msr	PRIMASK, r3
}
 800bbd0:	46c0      	nop			@ (mov r8, r8)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689a      	ldr	r2, [r3, #8]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	495d      	ldr	r1, [pc, #372]	@ (800bd54 <HAL_UART_IRQHandler+0x664>)
 800bbde:	400a      	ands	r2, r1
 800bbe0:	609a      	str	r2, [r3, #8]
 800bbe2:	193b      	adds	r3, r7, r4
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	f383 8810 	msr	PRIMASK, r3
}
 800bbee:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	228c      	movs	r2, #140	@ 0x8c
 800bbf4:	2120      	movs	r1, #32
 800bbf6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc04:	f3ef 8310 	mrs	r3, PRIMASK
 800bc08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc0c:	2480      	movs	r4, #128	@ 0x80
 800bc0e:	193a      	adds	r2, r7, r4
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	2301      	movs	r3, #1
 800bc14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc18:	f383 8810 	msr	PRIMASK, r3
}
 800bc1c:	46c0      	nop			@ (mov r8, r8)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2110      	movs	r1, #16
 800bc2a:	438a      	bics	r2, r1
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	193b      	adds	r3, r7, r4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc36:	f383 8810 	msr	PRIMASK, r3
}
 800bc3a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	22c0      	movs	r2, #192	@ 0xc0
 800bc46:	589b      	ldr	r3, [r3, r2]
 800bc48:	183a      	adds	r2, r7, r0
 800bc4a:	8811      	ldrh	r1, [r2, #0]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	0010      	movs	r0, r2
 800bc50:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc52:	e075      	b.n	800bd40 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc54:	23a4      	movs	r3, #164	@ 0xa4
 800bc56:	18fb      	adds	r3, r7, r3
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	2380      	movs	r3, #128	@ 0x80
 800bc5c:	035b      	lsls	r3, r3, #13
 800bc5e:	4013      	ands	r3, r2
 800bc60:	d012      	beq.n	800bc88 <HAL_UART_IRQHandler+0x598>
 800bc62:	239c      	movs	r3, #156	@ 0x9c
 800bc64:	18fb      	adds	r3, r7, r3
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	2380      	movs	r3, #128	@ 0x80
 800bc6a:	03db      	lsls	r3, r3, #15
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	d00b      	beq.n	800bc88 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2280      	movs	r2, #128	@ 0x80
 800bc76:	0352      	lsls	r2, r2, #13
 800bc78:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	22b4      	movs	r2, #180	@ 0xb4
 800bc7e:	589b      	ldr	r3, [r3, r2]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	0010      	movs	r0, r2
 800bc84:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc86:	e05e      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc88:	23a4      	movs	r3, #164	@ 0xa4
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2280      	movs	r2, #128	@ 0x80
 800bc90:	4013      	ands	r3, r2
 800bc92:	d016      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc94:	23a0      	movs	r3, #160	@ 0xa0
 800bc96:	18fb      	adds	r3, r7, r3
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2280      	movs	r2, #128	@ 0x80
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	d106      	bne.n	800bcae <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bca0:	239c      	movs	r3, #156	@ 0x9c
 800bca2:	18fb      	adds	r3, r7, r3
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	2380      	movs	r3, #128	@ 0x80
 800bca8:	041b      	lsls	r3, r3, #16
 800bcaa:	4013      	ands	r3, r2
 800bcac:	d009      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d046      	beq.n	800bd44 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	0010      	movs	r0, r2
 800bcbe:	4798      	blx	r3
    }
    return;
 800bcc0:	e040      	b.n	800bd44 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcc2:	23a4      	movs	r3, #164	@ 0xa4
 800bcc4:	18fb      	adds	r3, r7, r3
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2240      	movs	r2, #64	@ 0x40
 800bcca:	4013      	ands	r3, r2
 800bccc:	d00a      	beq.n	800bce4 <HAL_UART_IRQHandler+0x5f4>
 800bcce:	23a0      	movs	r3, #160	@ 0xa0
 800bcd0:	18fb      	adds	r3, r7, r3
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2240      	movs	r2, #64	@ 0x40
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	d004      	beq.n	800bce4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f000 ff85 	bl	800cbec <UART_EndTransmit_IT>
    return;
 800bce2:	e030      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bce4:	23a4      	movs	r3, #164	@ 0xa4
 800bce6:	18fb      	adds	r3, r7, r3
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	2380      	movs	r3, #128	@ 0x80
 800bcec:	041b      	lsls	r3, r3, #16
 800bcee:	4013      	ands	r3, r2
 800bcf0:	d00d      	beq.n	800bd0e <HAL_UART_IRQHandler+0x61e>
 800bcf2:	23a0      	movs	r3, #160	@ 0xa0
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	2380      	movs	r3, #128	@ 0x80
 800bcfa:	05db      	lsls	r3, r3, #23
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	d006      	beq.n	800bd0e <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	22bc      	movs	r2, #188	@ 0xbc
 800bd04:	589b      	ldr	r3, [r3, r2]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	0010      	movs	r0, r2
 800bd0a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd0c:	e01b      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd0e:	23a4      	movs	r3, #164	@ 0xa4
 800bd10:	18fb      	adds	r3, r7, r3
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	2380      	movs	r3, #128	@ 0x80
 800bd16:	045b      	lsls	r3, r3, #17
 800bd18:	4013      	ands	r3, r2
 800bd1a:	d014      	beq.n	800bd46 <HAL_UART_IRQHandler+0x656>
 800bd1c:	23a0      	movs	r3, #160	@ 0xa0
 800bd1e:	18fb      	adds	r3, r7, r3
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da0f      	bge.n	800bd46 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	22b8      	movs	r2, #184	@ 0xb8
 800bd2a:	589b      	ldr	r3, [r3, r2]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	0010      	movs	r0, r2
 800bd30:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd32:	e008      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
      return;
 800bd34:	46c0      	nop			@ (mov r8, r8)
 800bd36:	e006      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
    return;
 800bd38:	46c0      	nop			@ (mov r8, r8)
 800bd3a:	e004      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
      return;
 800bd3c:	46c0      	nop			@ (mov r8, r8)
 800bd3e:	e002      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
      return;
 800bd40:	46c0      	nop			@ (mov r8, r8)
 800bd42:	e000      	b.n	800bd46 <HAL_UART_IRQHandler+0x656>
    return;
 800bd44:	46c0      	nop			@ (mov r8, r8)
  }
}
 800bd46:	46bd      	mov	sp, r7
 800bd48:	b02a      	add	sp, #168	@ 0xa8
 800bd4a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd4c:	fffffeff 	.word	0xfffffeff
 800bd50:	fffffedf 	.word	0xfffffedf
 800bd54:	effffffe 	.word	0xeffffffe

0800bd58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd60:	46c0      	nop			@ (mov r8, r8)
 800bd62:	46bd      	mov	sp, r7
 800bd64:	b002      	add	sp, #8
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd70:	46c0      	nop			@ (mov r8, r8)
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b002      	add	sp, #8
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bd80:	46c0      	nop			@ (mov r8, r8)
 800bd82:	46bd      	mov	sp, r7
 800bd84:	b002      	add	sp, #8
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd90:	46c0      	nop			@ (mov r8, r8)
 800bd92:	46bd      	mov	sp, r7
 800bd94:	b002      	add	sp, #8
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bda0:	46c0      	nop			@ (mov r8, r8)
 800bda2:	46bd      	mov	sp, r7
 800bda4:	b002      	add	sp, #8
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bdb0:	46c0      	nop			@ (mov r8, r8)
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	b002      	add	sp, #8
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bdc0:	46c0      	nop			@ (mov r8, r8)
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	b002      	add	sp, #8
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bdd0:	46c0      	nop			@ (mov r8, r8)
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	b002      	add	sp, #8
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	000a      	movs	r2, r1
 800bde2:	1cbb      	adds	r3, r7, #2
 800bde4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bde6:	46c0      	nop			@ (mov r8, r8)
 800bde8:	46bd      	mov	sp, r7
 800bdea:	b002      	add	sp, #8
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2194      	movs	r1, #148	@ 0x94
 800bdfc:	4a18      	ldr	r2, [pc, #96]	@ (800be60 <UART_InitCallbacksToDefault+0x70>)
 800bdfe:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2198      	movs	r1, #152	@ 0x98
 800be04:	4a17      	ldr	r2, [pc, #92]	@ (800be64 <UART_InitCallbacksToDefault+0x74>)
 800be06:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	219c      	movs	r1, #156	@ 0x9c
 800be0c:	4a16      	ldr	r2, [pc, #88]	@ (800be68 <UART_InitCallbacksToDefault+0x78>)
 800be0e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	21a0      	movs	r1, #160	@ 0xa0
 800be14:	4a15      	ldr	r2, [pc, #84]	@ (800be6c <UART_InitCallbacksToDefault+0x7c>)
 800be16:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	21a4      	movs	r1, #164	@ 0xa4
 800be1c:	4a14      	ldr	r2, [pc, #80]	@ (800be70 <UART_InitCallbacksToDefault+0x80>)
 800be1e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	21a8      	movs	r1, #168	@ 0xa8
 800be24:	4a13      	ldr	r2, [pc, #76]	@ (800be74 <UART_InitCallbacksToDefault+0x84>)
 800be26:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	21ac      	movs	r1, #172	@ 0xac
 800be2c:	4a12      	ldr	r2, [pc, #72]	@ (800be78 <UART_InitCallbacksToDefault+0x88>)
 800be2e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	21b0      	movs	r1, #176	@ 0xb0
 800be34:	4a11      	ldr	r2, [pc, #68]	@ (800be7c <UART_InitCallbacksToDefault+0x8c>)
 800be36:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	21b4      	movs	r1, #180	@ 0xb4
 800be3c:	4a10      	ldr	r2, [pc, #64]	@ (800be80 <UART_InitCallbacksToDefault+0x90>)
 800be3e:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	21b8      	movs	r1, #184	@ 0xb8
 800be44:	4a0f      	ldr	r2, [pc, #60]	@ (800be84 <UART_InitCallbacksToDefault+0x94>)
 800be46:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	21bc      	movs	r1, #188	@ 0xbc
 800be4c:	4a0e      	ldr	r2, [pc, #56]	@ (800be88 <UART_InitCallbacksToDefault+0x98>)
 800be4e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	21c0      	movs	r1, #192	@ 0xc0
 800be54:	4a0d      	ldr	r2, [pc, #52]	@ (800be8c <UART_InitCallbacksToDefault+0x9c>)
 800be56:	505a      	str	r2, [r3, r1]

}
 800be58:	46c0      	nop			@ (mov r8, r8)
 800be5a:	46bd      	mov	sp, r7
 800be5c:	b002      	add	sp, #8
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	0800bd69 	.word	0x0800bd69
 800be64:	0800bd59 	.word	0x0800bd59
 800be68:	0800bd89 	.word	0x0800bd89
 800be6c:	0800bd79 	.word	0x0800bd79
 800be70:	0800bd99 	.word	0x0800bd99
 800be74:	0800bda9 	.word	0x0800bda9
 800be78:	0800bdb9 	.word	0x0800bdb9
 800be7c:	0800bdc9 	.word	0x0800bdc9
 800be80:	0800cc49 	.word	0x0800cc49
 800be84:	0800cc59 	.word	0x0800cc59
 800be88:	0800cc69 	.word	0x0800cc69
 800be8c:	0800bdd9 	.word	0x0800bdd9

0800be90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be90:	b5b0      	push	{r4, r5, r7, lr}
 800be92:	b090      	sub	sp, #64	@ 0x40
 800be94:	af00      	add	r7, sp, #0
 800be96:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be98:	231a      	movs	r3, #26
 800be9a:	2220      	movs	r2, #32
 800be9c:	189b      	adds	r3, r3, r2
 800be9e:	19db      	adds	r3, r3, r7
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	431a      	orrs	r2, r3
 800beae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	431a      	orrs	r2, r3
 800beb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	4313      	orrs	r3, r2
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4ac4      	ldr	r2, [pc, #784]	@ (800c1d4 <UART_SetConfig+0x344>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	0019      	movs	r1, r3
 800bec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bece:	430b      	orrs	r3, r1
 800bed0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	4abf      	ldr	r2, [pc, #764]	@ (800c1d8 <UART_SetConfig+0x348>)
 800beda:	4013      	ands	r3, r2
 800bedc:	0018      	movs	r0, r3
 800bede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee0:	68d9      	ldr	r1, [r3, #12]
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	0003      	movs	r3, r0
 800bee8:	430b      	orrs	r3, r1
 800beea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800beec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4ab9      	ldr	r2, [pc, #740]	@ (800c1dc <UART_SetConfig+0x34c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d004      	beq.n	800bf06 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf02:	4313      	orrs	r3, r2
 800bf04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	4ab4      	ldr	r2, [pc, #720]	@ (800c1e0 <UART_SetConfig+0x350>)
 800bf0e:	4013      	ands	r3, r2
 800bf10:	0019      	movs	r1, r3
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf22:	220f      	movs	r2, #15
 800bf24:	4393      	bics	r3, r2
 800bf26:	0018      	movs	r0, r3
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	0003      	movs	r3, r0
 800bf32:	430b      	orrs	r3, r1
 800bf34:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4aaa      	ldr	r2, [pc, #680]	@ (800c1e4 <UART_SetConfig+0x354>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d131      	bne.n	800bfa4 <UART_SetConfig+0x114>
 800bf40:	4ba9      	ldr	r3, [pc, #676]	@ (800c1e8 <UART_SetConfig+0x358>)
 800bf42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf44:	2203      	movs	r2, #3
 800bf46:	4013      	ands	r3, r2
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d01d      	beq.n	800bf88 <UART_SetConfig+0xf8>
 800bf4c:	d823      	bhi.n	800bf96 <UART_SetConfig+0x106>
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d00c      	beq.n	800bf6c <UART_SetConfig+0xdc>
 800bf52:	d820      	bhi.n	800bf96 <UART_SetConfig+0x106>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <UART_SetConfig+0xce>
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d00e      	beq.n	800bf7a <UART_SetConfig+0xea>
 800bf5c:	e01b      	b.n	800bf96 <UART_SetConfig+0x106>
 800bf5e:	231b      	movs	r3, #27
 800bf60:	2220      	movs	r2, #32
 800bf62:	189b      	adds	r3, r3, r2
 800bf64:	19db      	adds	r3, r3, r7
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	e071      	b.n	800c050 <UART_SetConfig+0x1c0>
 800bf6c:	231b      	movs	r3, #27
 800bf6e:	2220      	movs	r2, #32
 800bf70:	189b      	adds	r3, r3, r2
 800bf72:	19db      	adds	r3, r3, r7
 800bf74:	2202      	movs	r2, #2
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	e06a      	b.n	800c050 <UART_SetConfig+0x1c0>
 800bf7a:	231b      	movs	r3, #27
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	19db      	adds	r3, r3, r7
 800bf82:	2204      	movs	r2, #4
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e063      	b.n	800c050 <UART_SetConfig+0x1c0>
 800bf88:	231b      	movs	r3, #27
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	189b      	adds	r3, r3, r2
 800bf8e:	19db      	adds	r3, r3, r7
 800bf90:	2208      	movs	r2, #8
 800bf92:	701a      	strb	r2, [r3, #0]
 800bf94:	e05c      	b.n	800c050 <UART_SetConfig+0x1c0>
 800bf96:	231b      	movs	r3, #27
 800bf98:	2220      	movs	r2, #32
 800bf9a:	189b      	adds	r3, r3, r2
 800bf9c:	19db      	adds	r3, r3, r7
 800bf9e:	2210      	movs	r2, #16
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	e055      	b.n	800c050 <UART_SetConfig+0x1c0>
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a90      	ldr	r2, [pc, #576]	@ (800c1ec <UART_SetConfig+0x35c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d106      	bne.n	800bfbc <UART_SetConfig+0x12c>
 800bfae:	231b      	movs	r3, #27
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	189b      	adds	r3, r3, r2
 800bfb4:	19db      	adds	r3, r3, r7
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	e049      	b.n	800c050 <UART_SetConfig+0x1c0>
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a86      	ldr	r2, [pc, #536]	@ (800c1dc <UART_SetConfig+0x34c>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d13e      	bne.n	800c044 <UART_SetConfig+0x1b4>
 800bfc6:	4b88      	ldr	r3, [pc, #544]	@ (800c1e8 <UART_SetConfig+0x358>)
 800bfc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfca:	23c0      	movs	r3, #192	@ 0xc0
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	4013      	ands	r3, r2
 800bfd0:	22c0      	movs	r2, #192	@ 0xc0
 800bfd2:	0112      	lsls	r2, r2, #4
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d027      	beq.n	800c028 <UART_SetConfig+0x198>
 800bfd8:	22c0      	movs	r2, #192	@ 0xc0
 800bfda:	0112      	lsls	r2, r2, #4
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d82a      	bhi.n	800c036 <UART_SetConfig+0x1a6>
 800bfe0:	2280      	movs	r2, #128	@ 0x80
 800bfe2:	0112      	lsls	r2, r2, #4
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d011      	beq.n	800c00c <UART_SetConfig+0x17c>
 800bfe8:	2280      	movs	r2, #128	@ 0x80
 800bfea:	0112      	lsls	r2, r2, #4
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d822      	bhi.n	800c036 <UART_SetConfig+0x1a6>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <UART_SetConfig+0x16e>
 800bff4:	2280      	movs	r2, #128	@ 0x80
 800bff6:	00d2      	lsls	r2, r2, #3
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d00e      	beq.n	800c01a <UART_SetConfig+0x18a>
 800bffc:	e01b      	b.n	800c036 <UART_SetConfig+0x1a6>
 800bffe:	231b      	movs	r3, #27
 800c000:	2220      	movs	r2, #32
 800c002:	189b      	adds	r3, r3, r2
 800c004:	19db      	adds	r3, r3, r7
 800c006:	2200      	movs	r2, #0
 800c008:	701a      	strb	r2, [r3, #0]
 800c00a:	e021      	b.n	800c050 <UART_SetConfig+0x1c0>
 800c00c:	231b      	movs	r3, #27
 800c00e:	2220      	movs	r2, #32
 800c010:	189b      	adds	r3, r3, r2
 800c012:	19db      	adds	r3, r3, r7
 800c014:	2202      	movs	r2, #2
 800c016:	701a      	strb	r2, [r3, #0]
 800c018:	e01a      	b.n	800c050 <UART_SetConfig+0x1c0>
 800c01a:	231b      	movs	r3, #27
 800c01c:	2220      	movs	r2, #32
 800c01e:	189b      	adds	r3, r3, r2
 800c020:	19db      	adds	r3, r3, r7
 800c022:	2204      	movs	r2, #4
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	e013      	b.n	800c050 <UART_SetConfig+0x1c0>
 800c028:	231b      	movs	r3, #27
 800c02a:	2220      	movs	r2, #32
 800c02c:	189b      	adds	r3, r3, r2
 800c02e:	19db      	adds	r3, r3, r7
 800c030:	2208      	movs	r2, #8
 800c032:	701a      	strb	r2, [r3, #0]
 800c034:	e00c      	b.n	800c050 <UART_SetConfig+0x1c0>
 800c036:	231b      	movs	r3, #27
 800c038:	2220      	movs	r2, #32
 800c03a:	189b      	adds	r3, r3, r2
 800c03c:	19db      	adds	r3, r3, r7
 800c03e:	2210      	movs	r2, #16
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	e005      	b.n	800c050 <UART_SetConfig+0x1c0>
 800c044:	231b      	movs	r3, #27
 800c046:	2220      	movs	r2, #32
 800c048:	189b      	adds	r3, r3, r2
 800c04a:	19db      	adds	r3, r3, r7
 800c04c:	2210      	movs	r2, #16
 800c04e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a61      	ldr	r2, [pc, #388]	@ (800c1dc <UART_SetConfig+0x34c>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d000      	beq.n	800c05c <UART_SetConfig+0x1cc>
 800c05a:	e092      	b.n	800c182 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c05c:	231b      	movs	r3, #27
 800c05e:	2220      	movs	r2, #32
 800c060:	189b      	adds	r3, r3, r2
 800c062:	19db      	adds	r3, r3, r7
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b08      	cmp	r3, #8
 800c068:	d015      	beq.n	800c096 <UART_SetConfig+0x206>
 800c06a:	dc18      	bgt.n	800c09e <UART_SetConfig+0x20e>
 800c06c:	2b04      	cmp	r3, #4
 800c06e:	d00d      	beq.n	800c08c <UART_SetConfig+0x1fc>
 800c070:	dc15      	bgt.n	800c09e <UART_SetConfig+0x20e>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <UART_SetConfig+0x1ec>
 800c076:	2b02      	cmp	r3, #2
 800c078:	d005      	beq.n	800c086 <UART_SetConfig+0x1f6>
 800c07a:	e010      	b.n	800c09e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c07c:	f7fc fdd6 	bl	8008c2c <HAL_RCC_GetPCLK1Freq>
 800c080:	0003      	movs	r3, r0
 800c082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c084:	e014      	b.n	800c0b0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c086:	4b5a      	ldr	r3, [pc, #360]	@ (800c1f0 <UART_SetConfig+0x360>)
 800c088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c08a:	e011      	b.n	800c0b0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c08c:	f7fc fd42 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 800c090:	0003      	movs	r3, r0
 800c092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c094:	e00c      	b.n	800c0b0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c096:	2380      	movs	r3, #128	@ 0x80
 800c098:	021b      	lsls	r3, r3, #8
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c09c:	e008      	b.n	800c0b0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c0a2:	231a      	movs	r3, #26
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	189b      	adds	r3, r3, r2
 800c0a8:	19db      	adds	r3, r3, r7
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	701a      	strb	r2, [r3, #0]
        break;
 800c0ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d100      	bne.n	800c0b8 <UART_SetConfig+0x228>
 800c0b6:	e147      	b.n	800c348 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0bc:	4b4d      	ldr	r3, [pc, #308]	@ (800c1f4 <UART_SetConfig+0x364>)
 800c0be:	0052      	lsls	r2, r2, #1
 800c0c0:	5ad3      	ldrh	r3, [r2, r3]
 800c0c2:	0019      	movs	r1, r3
 800c0c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c0c6:	f7f4 f81d 	bl	8000104 <__udivsi3>
 800c0ca:	0003      	movs	r3, r0
 800c0cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	0013      	movs	r3, r2
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	189b      	adds	r3, r3, r2
 800c0d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d305      	bcc.n	800c0ea <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d906      	bls.n	800c0f8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c0ea:	231a      	movs	r3, #26
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	189b      	adds	r3, r3, r2
 800c0f0:	19db      	adds	r3, r3, r7
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	701a      	strb	r2, [r3, #0]
 800c0f6:	e127      	b.n	800c348 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0fa:	61bb      	str	r3, [r7, #24]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	61fb      	str	r3, [r7, #28]
 800c100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c104:	4b3b      	ldr	r3, [pc, #236]	@ (800c1f4 <UART_SetConfig+0x364>)
 800c106:	0052      	lsls	r2, r2, #1
 800c108:	5ad3      	ldrh	r3, [r2, r3]
 800c10a:	613b      	str	r3, [r7, #16]
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	69b8      	ldr	r0, [r7, #24]
 800c116:	69f9      	ldr	r1, [r7, #28]
 800c118:	f7f4 f880 	bl	800021c <__aeabi_uldivmod>
 800c11c:	0002      	movs	r2, r0
 800c11e:	000b      	movs	r3, r1
 800c120:	0e11      	lsrs	r1, r2, #24
 800c122:	021d      	lsls	r5, r3, #8
 800c124:	430d      	orrs	r5, r1
 800c126:	0214      	lsls	r4, r2, #8
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	085b      	lsrs	r3, r3, #1
 800c12e:	60bb      	str	r3, [r7, #8]
 800c130:	2300      	movs	r3, #0
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	68b8      	ldr	r0, [r7, #8]
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	1900      	adds	r0, r0, r4
 800c13a:	4169      	adcs	r1, r5
 800c13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	603b      	str	r3, [r7, #0]
 800c142:	2300      	movs	r3, #0
 800c144:	607b      	str	r3, [r7, #4]
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f7f4 f867 	bl	800021c <__aeabi_uldivmod>
 800c14e:	0002      	movs	r2, r0
 800c150:	000b      	movs	r3, r1
 800c152:	0013      	movs	r3, r2
 800c154:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c158:	23c0      	movs	r3, #192	@ 0xc0
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d309      	bcc.n	800c174 <UART_SetConfig+0x2e4>
 800c160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c162:	2380      	movs	r3, #128	@ 0x80
 800c164:	035b      	lsls	r3, r3, #13
 800c166:	429a      	cmp	r2, r3
 800c168:	d204      	bcs.n	800c174 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c170:	60da      	str	r2, [r3, #12]
 800c172:	e0e9      	b.n	800c348 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c174:	231a      	movs	r3, #26
 800c176:	2220      	movs	r2, #32
 800c178:	189b      	adds	r3, r3, r2
 800c17a:	19db      	adds	r3, r3, r7
 800c17c:	2201      	movs	r2, #1
 800c17e:	701a      	strb	r2, [r3, #0]
 800c180:	e0e2      	b.n	800c348 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c184:	69da      	ldr	r2, [r3, #28]
 800c186:	2380      	movs	r3, #128	@ 0x80
 800c188:	021b      	lsls	r3, r3, #8
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d000      	beq.n	800c190 <UART_SetConfig+0x300>
 800c18e:	e083      	b.n	800c298 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c190:	231b      	movs	r3, #27
 800c192:	2220      	movs	r2, #32
 800c194:	189b      	adds	r3, r3, r2
 800c196:	19db      	adds	r3, r3, r7
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2b08      	cmp	r3, #8
 800c19c:	d015      	beq.n	800c1ca <UART_SetConfig+0x33a>
 800c19e:	dc2b      	bgt.n	800c1f8 <UART_SetConfig+0x368>
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	d00d      	beq.n	800c1c0 <UART_SetConfig+0x330>
 800c1a4:	dc28      	bgt.n	800c1f8 <UART_SetConfig+0x368>
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <UART_SetConfig+0x320>
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d005      	beq.n	800c1ba <UART_SetConfig+0x32a>
 800c1ae:	e023      	b.n	800c1f8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1b0:	f7fc fd3c 	bl	8008c2c <HAL_RCC_GetPCLK1Freq>
 800c1b4:	0003      	movs	r3, r0
 800c1b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1b8:	e027      	b.n	800c20a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c1f0 <UART_SetConfig+0x360>)
 800c1bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1be:	e024      	b.n	800c20a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1c0:	f7fc fca8 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 800c1c4:	0003      	movs	r3, r0
 800c1c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1c8:	e01f      	b.n	800c20a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1ca:	2380      	movs	r3, #128	@ 0x80
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1d0:	e01b      	b.n	800c20a <UART_SetConfig+0x37a>
 800c1d2:	46c0      	nop			@ (mov r8, r8)
 800c1d4:	cfff69f3 	.word	0xcfff69f3
 800c1d8:	ffffcfff 	.word	0xffffcfff
 800c1dc:	40008000 	.word	0x40008000
 800c1e0:	11fff4ff 	.word	0x11fff4ff
 800c1e4:	40013800 	.word	0x40013800
 800c1e8:	40021000 	.word	0x40021000
 800c1ec:	40004400 	.word	0x40004400
 800c1f0:	00f42400 	.word	0x00f42400
 800c1f4:	0800d720 	.word	0x0800d720
      default:
        pclk = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c1fc:	231a      	movs	r3, #26
 800c1fe:	2220      	movs	r2, #32
 800c200:	189b      	adds	r3, r3, r2
 800c202:	19db      	adds	r3, r3, r7
 800c204:	2201      	movs	r2, #1
 800c206:	701a      	strb	r2, [r3, #0]
        break;
 800c208:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d100      	bne.n	800c212 <UART_SetConfig+0x382>
 800c210:	e09a      	b.n	800c348 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c216:	4b58      	ldr	r3, [pc, #352]	@ (800c378 <UART_SetConfig+0x4e8>)
 800c218:	0052      	lsls	r2, r2, #1
 800c21a:	5ad3      	ldrh	r3, [r2, r3]
 800c21c:	0019      	movs	r1, r3
 800c21e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c220:	f7f3 ff70 	bl	8000104 <__udivsi3>
 800c224:	0003      	movs	r3, r0
 800c226:	005a      	lsls	r2, r3, #1
 800c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	18d2      	adds	r2, r2, r3
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	0019      	movs	r1, r3
 800c236:	0010      	movs	r0, r2
 800c238:	f7f3 ff64 	bl	8000104 <__udivsi3>
 800c23c:	0003      	movs	r3, r0
 800c23e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c242:	2b0f      	cmp	r3, #15
 800c244:	d921      	bls.n	800c28a <UART_SetConfig+0x3fa>
 800c246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c248:	2380      	movs	r3, #128	@ 0x80
 800c24a:	025b      	lsls	r3, r3, #9
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d21c      	bcs.n	800c28a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c252:	b29a      	uxth	r2, r3
 800c254:	200e      	movs	r0, #14
 800c256:	2420      	movs	r4, #32
 800c258:	1903      	adds	r3, r0, r4
 800c25a:	19db      	adds	r3, r3, r7
 800c25c:	210f      	movs	r1, #15
 800c25e:	438a      	bics	r2, r1
 800c260:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	b29b      	uxth	r3, r3
 800c268:	2207      	movs	r2, #7
 800c26a:	4013      	ands	r3, r2
 800c26c:	b299      	uxth	r1, r3
 800c26e:	1903      	adds	r3, r0, r4
 800c270:	19db      	adds	r3, r3, r7
 800c272:	1902      	adds	r2, r0, r4
 800c274:	19d2      	adds	r2, r2, r7
 800c276:	8812      	ldrh	r2, [r2, #0]
 800c278:	430a      	orrs	r2, r1
 800c27a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	1902      	adds	r2, r0, r4
 800c282:	19d2      	adds	r2, r2, r7
 800c284:	8812      	ldrh	r2, [r2, #0]
 800c286:	60da      	str	r2, [r3, #12]
 800c288:	e05e      	b.n	800c348 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c28a:	231a      	movs	r3, #26
 800c28c:	2220      	movs	r2, #32
 800c28e:	189b      	adds	r3, r3, r2
 800c290:	19db      	adds	r3, r3, r7
 800c292:	2201      	movs	r2, #1
 800c294:	701a      	strb	r2, [r3, #0]
 800c296:	e057      	b.n	800c348 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c298:	231b      	movs	r3, #27
 800c29a:	2220      	movs	r2, #32
 800c29c:	189b      	adds	r3, r3, r2
 800c29e:	19db      	adds	r3, r3, r7
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b08      	cmp	r3, #8
 800c2a4:	d015      	beq.n	800c2d2 <UART_SetConfig+0x442>
 800c2a6:	dc18      	bgt.n	800c2da <UART_SetConfig+0x44a>
 800c2a8:	2b04      	cmp	r3, #4
 800c2aa:	d00d      	beq.n	800c2c8 <UART_SetConfig+0x438>
 800c2ac:	dc15      	bgt.n	800c2da <UART_SetConfig+0x44a>
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <UART_SetConfig+0x428>
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d005      	beq.n	800c2c2 <UART_SetConfig+0x432>
 800c2b6:	e010      	b.n	800c2da <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2b8:	f7fc fcb8 	bl	8008c2c <HAL_RCC_GetPCLK1Freq>
 800c2bc:	0003      	movs	r3, r0
 800c2be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2c0:	e014      	b.n	800c2ec <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2c2:	4b2e      	ldr	r3, [pc, #184]	@ (800c37c <UART_SetConfig+0x4ec>)
 800c2c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2c6:	e011      	b.n	800c2ec <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2c8:	f7fc fc24 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 800c2cc:	0003      	movs	r3, r0
 800c2ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2d0:	e00c      	b.n	800c2ec <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2d2:	2380      	movs	r3, #128	@ 0x80
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2d8:	e008      	b.n	800c2ec <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c2de:	231a      	movs	r3, #26
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	189b      	adds	r3, r3, r2
 800c2e4:	19db      	adds	r3, r3, r7
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
        break;
 800c2ea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d02a      	beq.n	800c348 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2f6:	4b20      	ldr	r3, [pc, #128]	@ (800c378 <UART_SetConfig+0x4e8>)
 800c2f8:	0052      	lsls	r2, r2, #1
 800c2fa:	5ad3      	ldrh	r3, [r2, r3]
 800c2fc:	0019      	movs	r1, r3
 800c2fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c300:	f7f3 ff00 	bl	8000104 <__udivsi3>
 800c304:	0003      	movs	r3, r0
 800c306:	001a      	movs	r2, r3
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	085b      	lsrs	r3, r3, #1
 800c30e:	18d2      	adds	r2, r2, r3
 800c310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	0019      	movs	r1, r3
 800c316:	0010      	movs	r0, r2
 800c318:	f7f3 fef4 	bl	8000104 <__udivsi3>
 800c31c:	0003      	movs	r3, r0
 800c31e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c322:	2b0f      	cmp	r3, #15
 800c324:	d90a      	bls.n	800c33c <UART_SetConfig+0x4ac>
 800c326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c328:	2380      	movs	r3, #128	@ 0x80
 800c32a:	025b      	lsls	r3, r3, #9
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d205      	bcs.n	800c33c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c332:	b29a      	uxth	r2, r3
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60da      	str	r2, [r3, #12]
 800c33a:	e005      	b.n	800c348 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c33c:	231a      	movs	r3, #26
 800c33e:	2220      	movs	r2, #32
 800c340:	189b      	adds	r3, r3, r2
 800c342:	19db      	adds	r3, r3, r7
 800c344:	2201      	movs	r2, #1
 800c346:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34a:	226a      	movs	r2, #106	@ 0x6a
 800c34c:	2101      	movs	r1, #1
 800c34e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	2268      	movs	r2, #104	@ 0x68
 800c354:	2101      	movs	r1, #1
 800c356:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	2200      	movs	r2, #0
 800c35c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c360:	2200      	movs	r2, #0
 800c362:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c364:	231a      	movs	r3, #26
 800c366:	2220      	movs	r2, #32
 800c368:	189b      	adds	r3, r3, r2
 800c36a:	19db      	adds	r3, r3, r7
 800c36c:	781b      	ldrb	r3, [r3, #0]
}
 800c36e:	0018      	movs	r0, r3
 800c370:	46bd      	mov	sp, r7
 800c372:	b010      	add	sp, #64	@ 0x40
 800c374:	bdb0      	pop	{r4, r5, r7, pc}
 800c376:	46c0      	nop			@ (mov r8, r8)
 800c378:	0800d720 	.word	0x0800d720
 800c37c:	00f42400 	.word	0x00f42400

0800c380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38c:	2208      	movs	r2, #8
 800c38e:	4013      	ands	r3, r2
 800c390:	d00b      	beq.n	800c3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	4a4a      	ldr	r2, [pc, #296]	@ (800c4c4 <UART_AdvFeatureConfig+0x144>)
 800c39a:	4013      	ands	r3, r2
 800c39c:	0019      	movs	r1, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	d00b      	beq.n	800c3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	4a43      	ldr	r2, [pc, #268]	@ (800c4c8 <UART_AdvFeatureConfig+0x148>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	0019      	movs	r1, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	d00b      	beq.n	800c3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	4a3b      	ldr	r2, [pc, #236]	@ (800c4cc <UART_AdvFeatureConfig+0x14c>)
 800c3de:	4013      	ands	r3, r2
 800c3e0:	0019      	movs	r1, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	d00b      	beq.n	800c410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	4a34      	ldr	r2, [pc, #208]	@ (800c4d0 <UART_AdvFeatureConfig+0x150>)
 800c400:	4013      	ands	r3, r2
 800c402:	0019      	movs	r1, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c414:	2210      	movs	r2, #16
 800c416:	4013      	ands	r3, r2
 800c418:	d00b      	beq.n	800c432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	4a2c      	ldr	r2, [pc, #176]	@ (800c4d4 <UART_AdvFeatureConfig+0x154>)
 800c422:	4013      	ands	r3, r2
 800c424:	0019      	movs	r1, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	430a      	orrs	r2, r1
 800c430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c436:	2220      	movs	r2, #32
 800c438:	4013      	ands	r3, r2
 800c43a:	d00b      	beq.n	800c454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	4a25      	ldr	r2, [pc, #148]	@ (800c4d8 <UART_AdvFeatureConfig+0x158>)
 800c444:	4013      	ands	r3, r2
 800c446:	0019      	movs	r1, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	430a      	orrs	r2, r1
 800c452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c458:	2240      	movs	r2, #64	@ 0x40
 800c45a:	4013      	ands	r3, r2
 800c45c:	d01d      	beq.n	800c49a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	4a1d      	ldr	r2, [pc, #116]	@ (800c4dc <UART_AdvFeatureConfig+0x15c>)
 800c466:	4013      	ands	r3, r2
 800c468:	0019      	movs	r1, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c47a:	2380      	movs	r3, #128	@ 0x80
 800c47c:	035b      	lsls	r3, r3, #13
 800c47e:	429a      	cmp	r2, r3
 800c480:	d10b      	bne.n	800c49a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4a15      	ldr	r2, [pc, #84]	@ (800c4e0 <UART_AdvFeatureConfig+0x160>)
 800c48a:	4013      	ands	r3, r2
 800c48c:	0019      	movs	r1, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	430a      	orrs	r2, r1
 800c498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c49e:	2280      	movs	r2, #128	@ 0x80
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	d00b      	beq.n	800c4bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	4a0e      	ldr	r2, [pc, #56]	@ (800c4e4 <UART_AdvFeatureConfig+0x164>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	0019      	movs	r1, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	605a      	str	r2, [r3, #4]
  }
}
 800c4bc:	46c0      	nop			@ (mov r8, r8)
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	b002      	add	sp, #8
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	ffff7fff 	.word	0xffff7fff
 800c4c8:	fffdffff 	.word	0xfffdffff
 800c4cc:	fffeffff 	.word	0xfffeffff
 800c4d0:	fffbffff 	.word	0xfffbffff
 800c4d4:	ffffefff 	.word	0xffffefff
 800c4d8:	ffffdfff 	.word	0xffffdfff
 800c4dc:	ffefffff 	.word	0xffefffff
 800c4e0:	ff9fffff 	.word	0xff9fffff
 800c4e4:	fff7ffff 	.word	0xfff7ffff

0800c4e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b092      	sub	sp, #72	@ 0x48
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2290      	movs	r2, #144	@ 0x90
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4f8:	f7f9 fa66 	bl	80059c8 <HAL_GetTick>
 800c4fc:	0003      	movs	r3, r0
 800c4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2208      	movs	r2, #8
 800c508:	4013      	ands	r3, r2
 800c50a:	2b08      	cmp	r3, #8
 800c50c:	d12d      	bne.n	800c56a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c510:	2280      	movs	r2, #128	@ 0x80
 800c512:	0391      	lsls	r1, r2, #14
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	4a47      	ldr	r2, [pc, #284]	@ (800c634 <UART_CheckIdleState+0x14c>)
 800c518:	9200      	str	r2, [sp, #0]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f000 f88e 	bl	800c63c <UART_WaitOnFlagUntilTimeout>
 800c520:	1e03      	subs	r3, r0, #0
 800c522:	d022      	beq.n	800c56a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c524:	f3ef 8310 	mrs	r3, PRIMASK
 800c528:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c52c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c52e:	2301      	movs	r3, #1
 800c530:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c534:	f383 8810 	msr	PRIMASK, r3
}
 800c538:	46c0      	nop			@ (mov r8, r8)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2180      	movs	r1, #128	@ 0x80
 800c546:	438a      	bics	r2, r1
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c550:	f383 8810 	msr	PRIMASK, r3
}
 800c554:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2288      	movs	r2, #136	@ 0x88
 800c55a:	2120      	movs	r1, #32
 800c55c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2284      	movs	r2, #132	@ 0x84
 800c562:	2100      	movs	r1, #0
 800c564:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e060      	b.n	800c62c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2204      	movs	r2, #4
 800c572:	4013      	ands	r3, r2
 800c574:	2b04      	cmp	r3, #4
 800c576:	d146      	bne.n	800c606 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c57a:	2280      	movs	r2, #128	@ 0x80
 800c57c:	03d1      	lsls	r1, r2, #15
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4a2c      	ldr	r2, [pc, #176]	@ (800c634 <UART_CheckIdleState+0x14c>)
 800c582:	9200      	str	r2, [sp, #0]
 800c584:	2200      	movs	r2, #0
 800c586:	f000 f859 	bl	800c63c <UART_WaitOnFlagUntilTimeout>
 800c58a:	1e03      	subs	r3, r0, #0
 800c58c:	d03b      	beq.n	800c606 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c58e:	f3ef 8310 	mrs	r3, PRIMASK
 800c592:	60fb      	str	r3, [r7, #12]
  return(result);
 800c594:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c596:	637b      	str	r3, [r7, #52]	@ 0x34
 800c598:	2301      	movs	r3, #1
 800c59a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	f383 8810 	msr	PRIMASK, r3
}
 800c5a2:	46c0      	nop			@ (mov r8, r8)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4922      	ldr	r1, [pc, #136]	@ (800c638 <UART_CheckIdleState+0x150>)
 800c5b0:	400a      	ands	r2, r1
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f383 8810 	msr	PRIMASK, r3
}
 800c5be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800c5c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	f383 8810 	msr	PRIMASK, r3
}
 800c5d4:	46c0      	nop			@ (mov r8, r8)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	689a      	ldr	r2, [r3, #8]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	438a      	bics	r2, r1
 800c5e4:	609a      	str	r2, [r3, #8]
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	f383 8810 	msr	PRIMASK, r3
}
 800c5f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	228c      	movs	r2, #140	@ 0x8c
 800c5f6:	2120      	movs	r1, #32
 800c5f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2284      	movs	r2, #132	@ 0x84
 800c5fe:	2100      	movs	r1, #0
 800c600:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e012      	b.n	800c62c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2288      	movs	r2, #136	@ 0x88
 800c60a:	2120      	movs	r1, #32
 800c60c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	228c      	movs	r2, #140	@ 0x8c
 800c612:	2120      	movs	r1, #32
 800c614:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2284      	movs	r2, #132	@ 0x84
 800c626:	2100      	movs	r1, #0
 800c628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	0018      	movs	r0, r3
 800c62e:	46bd      	mov	sp, r7
 800c630:	b010      	add	sp, #64	@ 0x40
 800c632:	bd80      	pop	{r7, pc}
 800c634:	01ffffff 	.word	0x01ffffff
 800c638:	fffffedf 	.word	0xfffffedf

0800c63c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	1dfb      	adds	r3, r7, #7
 800c64a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c64c:	e051      	b.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	3301      	adds	r3, #1
 800c652:	d04e      	beq.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c654:	f7f9 f9b8 	bl	80059c8 <HAL_GetTick>
 800c658:	0002      	movs	r2, r0
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	69ba      	ldr	r2, [r7, #24]
 800c660:	429a      	cmp	r2, r3
 800c662:	d302      	bcc.n	800c66a <UART_WaitOnFlagUntilTimeout+0x2e>
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	e051      	b.n	800c712 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2204      	movs	r2, #4
 800c676:	4013      	ands	r3, r2
 800c678:	d03b      	beq.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b80      	cmp	r3, #128	@ 0x80
 800c67e:	d038      	beq.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b40      	cmp	r3, #64	@ 0x40
 800c684:	d035      	beq.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	2208      	movs	r2, #8
 800c68e:	4013      	ands	r3, r2
 800c690:	2b08      	cmp	r3, #8
 800c692:	d111      	bne.n	800c6b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2208      	movs	r2, #8
 800c69a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	0018      	movs	r0, r3
 800c6a0:	f000 f922 	bl	800c8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2290      	movs	r2, #144	@ 0x90
 800c6a8:	2108      	movs	r1, #8
 800c6aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2284      	movs	r2, #132	@ 0x84
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e02c      	b.n	800c712 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	69da      	ldr	r2, [r3, #28]
 800c6be:	2380      	movs	r3, #128	@ 0x80
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	401a      	ands	r2, r3
 800c6c4:	2380      	movs	r3, #128	@ 0x80
 800c6c6:	011b      	lsls	r3, r3, #4
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d112      	bne.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2280      	movs	r2, #128	@ 0x80
 800c6d2:	0112      	lsls	r2, r2, #4
 800c6d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	0018      	movs	r0, r3
 800c6da:	f000 f905 	bl	800c8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2290      	movs	r2, #144	@ 0x90
 800c6e2:	2120      	movs	r1, #32
 800c6e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2284      	movs	r2, #132	@ 0x84
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e00f      	b.n	800c712 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69db      	ldr	r3, [r3, #28]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	425a      	negs	r2, r3
 800c702:	4153      	adcs	r3, r2
 800c704:	b2db      	uxtb	r3, r3
 800c706:	001a      	movs	r2, r3
 800c708:	1dfb      	adds	r3, r7, #7
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d09e      	beq.n	800c64e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	0018      	movs	r0, r3
 800c714:	46bd      	mov	sp, r7
 800c716:	b004      	add	sp, #16
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b090      	sub	sp, #64	@ 0x40
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	1dbb      	adds	r3, r7, #6
 800c728:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	1dba      	adds	r2, r7, #6
 800c734:	215c      	movs	r1, #92	@ 0x5c
 800c736:	8812      	ldrh	r2, [r2, #0]
 800c738:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2290      	movs	r2, #144	@ 0x90
 800c73e:	2100      	movs	r1, #0
 800c740:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	228c      	movs	r2, #140	@ 0x8c
 800c746:	2122      	movs	r1, #34	@ 0x22
 800c748:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2280      	movs	r2, #128	@ 0x80
 800c74e:	589b      	ldr	r3, [r3, r2]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d02d      	beq.n	800c7b0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2280      	movs	r2, #128	@ 0x80
 800c758:	589b      	ldr	r3, [r3, r2]
 800c75a:	4a40      	ldr	r2, [pc, #256]	@ (800c85c <UART_Start_Receive_DMA+0x140>)
 800c75c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2280      	movs	r2, #128	@ 0x80
 800c762:	589b      	ldr	r3, [r3, r2]
 800c764:	4a3e      	ldr	r2, [pc, #248]	@ (800c860 <UART_Start_Receive_DMA+0x144>)
 800c766:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2280      	movs	r2, #128	@ 0x80
 800c76c:	589b      	ldr	r3, [r3, r2]
 800c76e:	4a3d      	ldr	r2, [pc, #244]	@ (800c864 <UART_Start_Receive_DMA+0x148>)
 800c770:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2280      	movs	r2, #128	@ 0x80
 800c776:	589b      	ldr	r3, [r3, r2]
 800c778:	2200      	movs	r2, #0
 800c77a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2280      	movs	r2, #128	@ 0x80
 800c780:	5898      	ldr	r0, [r3, r2]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3324      	adds	r3, #36	@ 0x24
 800c788:	0019      	movs	r1, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c78e:	001a      	movs	r2, r3
 800c790:	1dbb      	adds	r3, r7, #6
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	f7fa fce6 	bl	8007164 <HAL_DMA_Start_IT>
 800c798:	1e03      	subs	r3, r0, #0
 800c79a:	d009      	beq.n	800c7b0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2290      	movs	r2, #144	@ 0x90
 800c7a0:	2110      	movs	r1, #16
 800c7a2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	228c      	movs	r2, #140	@ 0x8c
 800c7a8:	2120      	movs	r1, #32
 800c7aa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e050      	b.n	800c852 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d019      	beq.n	800c7ec <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800c7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c8:	f383 8810 	msr	PRIMASK, r3
}
 800c7cc:	46c0      	nop			@ (mov r8, r8)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2180      	movs	r1, #128	@ 0x80
 800c7da:	0049      	lsls	r1, r1, #1
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c7f0:	613b      	str	r3, [r7, #16]
  return(result);
 800c7f2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f383 8810 	msr	PRIMASK, r3
}
 800c800:	46c0      	nop			@ (mov r8, r8)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	689a      	ldr	r2, [r3, #8]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2101      	movs	r1, #1
 800c80e:	430a      	orrs	r2, r1
 800c810:	609a      	str	r2, [r3, #8]
 800c812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c814:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	f383 8810 	msr	PRIMASK, r3
}
 800c81c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c81e:	f3ef 8310 	mrs	r3, PRIMASK
 800c822:	61fb      	str	r3, [r7, #28]
  return(result);
 800c824:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c826:	637b      	str	r3, [r7, #52]	@ 0x34
 800c828:	2301      	movs	r3, #1
 800c82a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c82c:	6a3b      	ldr	r3, [r7, #32]
 800c82e:	f383 8810 	msr	PRIMASK, r3
}
 800c832:	46c0      	nop			@ (mov r8, r8)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2140      	movs	r1, #64	@ 0x40
 800c840:	430a      	orrs	r2, r1
 800c842:	609a      	str	r2, [r3, #8]
 800c844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c846:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84a:	f383 8810 	msr	PRIMASK, r3
}
 800c84e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	0018      	movs	r0, r3
 800c854:	46bd      	mov	sp, r7
 800c856:	b010      	add	sp, #64	@ 0x40
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	46c0      	nop			@ (mov r8, r8)
 800c85c:	0800c9b5 	.word	0x0800c9b5
 800c860:	0800cae9 	.word	0x0800cae9
 800c864:	0800cb31 	.word	0x0800cb31

0800c868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	@ 0x28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c870:	f3ef 8310 	mrs	r3, PRIMASK
 800c874:	60bb      	str	r3, [r7, #8]
  return(result);
 800c876:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c878:	627b      	str	r3, [r7, #36]	@ 0x24
 800c87a:	2301      	movs	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f383 8810 	msr	PRIMASK, r3
}
 800c884:	46c0      	nop			@ (mov r8, r8)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	21c0      	movs	r1, #192	@ 0xc0
 800c892:	438a      	bics	r2, r1
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f383 8810 	msr	PRIMASK, r3
}
 800c8a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c8a6:	617b      	str	r3, [r7, #20]
  return(result);
 800c8a8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c8aa:	623b      	str	r3, [r7, #32]
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	f383 8810 	msr	PRIMASK, r3
}
 800c8b6:	46c0      	nop			@ (mov r8, r8)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4908      	ldr	r1, [pc, #32]	@ (800c8e4 <UART_EndTxTransfer+0x7c>)
 800c8c4:	400a      	ands	r2, r1
 800c8c6:	609a      	str	r2, [r3, #8]
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f383 8810 	msr	PRIMASK, r3
}
 800c8d2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2288      	movs	r2, #136	@ 0x88
 800c8d8:	2120      	movs	r1, #32
 800c8da:	5099      	str	r1, [r3, r2]
}
 800c8dc:	46c0      	nop			@ (mov r8, r8)
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	b00a      	add	sp, #40	@ 0x28
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	ff7fffff 	.word	0xff7fffff

0800c8e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08e      	sub	sp, #56	@ 0x38
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8f4:	617b      	str	r3, [r7, #20]
  return(result);
 800c8f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	f383 8810 	msr	PRIMASK, r3
}
 800c904:	46c0      	nop			@ (mov r8, r8)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4926      	ldr	r1, [pc, #152]	@ (800c9ac <UART_EndRxTransfer+0xc4>)
 800c912:	400a      	ands	r2, r1
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	f383 8810 	msr	PRIMASK, r3
}
 800c920:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c922:	f3ef 8310 	mrs	r3, PRIMASK
 800c926:	623b      	str	r3, [r7, #32]
  return(result);
 800c928:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c92a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c92c:	2301      	movs	r3, #1
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c932:	f383 8810 	msr	PRIMASK, r3
}
 800c936:	46c0      	nop			@ (mov r8, r8)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689a      	ldr	r2, [r3, #8]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	491b      	ldr	r1, [pc, #108]	@ (800c9b0 <UART_EndRxTransfer+0xc8>)
 800c944:	400a      	ands	r2, r1
 800c946:	609a      	str	r2, [r3, #8]
 800c948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94e:	f383 8810 	msr	PRIMASK, r3
}
 800c952:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d118      	bne.n	800c98e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c95c:	f3ef 8310 	mrs	r3, PRIMASK
 800c960:	60bb      	str	r3, [r7, #8]
  return(result);
 800c962:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c966:	2301      	movs	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f383 8810 	msr	PRIMASK, r3
}
 800c970:	46c0      	nop			@ (mov r8, r8)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2110      	movs	r1, #16
 800c97e:	438a      	bics	r2, r1
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	f383 8810 	msr	PRIMASK, r3
}
 800c98c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	228c      	movs	r2, #140	@ 0x8c
 800c992:	2120      	movs	r1, #32
 800c994:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c9a2:	46c0      	nop			@ (mov r8, r8)
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	b00e      	add	sp, #56	@ 0x38
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	46c0      	nop			@ (mov r8, r8)
 800c9ac:	fffffedf 	.word	0xfffffedf
 800c9b0:	effffffe 	.word	0xeffffffe

0800c9b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b094      	sub	sp, #80	@ 0x50
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	d16f      	bne.n	800caae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c9ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9d0:	225e      	movs	r2, #94	@ 0x5e
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c9da:	61bb      	str	r3, [r7, #24]
  return(result);
 800c9dc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ea:	46c0      	nop			@ (mov r8, r8)
 800c9ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	493b      	ldr	r1, [pc, #236]	@ (800cae4 <UART_DMAReceiveCplt+0x130>)
 800c9f8:	400a      	ands	r2, r1
 800c9fa:	601a      	str	r2, [r3, #0]
 800c9fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	f383 8810 	msr	PRIMASK, r3
}
 800ca06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca08:	f3ef 8310 	mrs	r3, PRIMASK
 800ca0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca12:	2301      	movs	r3, #1
 800ca14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca18:	f383 8810 	msr	PRIMASK, r3
}
 800ca1c:	46c0      	nop			@ (mov r8, r8)
 800ca1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	689a      	ldr	r2, [r3, #8]
 800ca24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2101      	movs	r1, #1
 800ca2a:	438a      	bics	r2, r1
 800ca2c:	609a      	str	r2, [r3, #8]
 800ca2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca34:	f383 8810 	msr	PRIMASK, r3
}
 800ca38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca42:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca44:	2301      	movs	r3, #1
 800ca46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca4a:	f383 8810 	msr	PRIMASK, r3
}
 800ca4e:	46c0      	nop			@ (mov r8, r8)
 800ca50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689a      	ldr	r2, [r3, #8]
 800ca56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2140      	movs	r1, #64	@ 0x40
 800ca5c:	438a      	bics	r2, r1
 800ca5e:	609a      	str	r2, [r3, #8]
 800ca60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca66:	f383 8810 	msr	PRIMASK, r3
}
 800ca6a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca6e:	228c      	movs	r2, #140	@ 0x8c
 800ca70:	2120      	movs	r1, #32
 800ca72:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d118      	bne.n	800caae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca80:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca82:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca86:	2301      	movs	r3, #1
 800ca88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f383 8810 	msr	PRIMASK, r3
}
 800ca90:	46c0      	nop			@ (mov r8, r8)
 800ca92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2110      	movs	r1, #16
 800ca9e:	438a      	bics	r2, r1
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f383 8810 	msr	PRIMASK, r3
}
 800caac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800caae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab0:	2200      	movs	r2, #0
 800cab2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d109      	bne.n	800cad0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cabe:	22c0      	movs	r2, #192	@ 0xc0
 800cac0:	589b      	ldr	r3, [r3, r2]
 800cac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cac4:	215c      	movs	r1, #92	@ 0x5c
 800cac6:	5a51      	ldrh	r1, [r2, r1]
 800cac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caca:	0010      	movs	r0, r2
 800cacc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cace:	e005      	b.n	800cadc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800cad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cad2:	22a0      	movs	r2, #160	@ 0xa0
 800cad4:	589b      	ldr	r3, [r3, r2]
 800cad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cad8:	0010      	movs	r0, r2
 800cada:	4798      	blx	r3
}
 800cadc:	46c0      	nop			@ (mov r8, r8)
 800cade:	46bd      	mov	sp, r7
 800cae0:	b014      	add	sp, #80	@ 0x50
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	fffffeff 	.word	0xfffffeff

0800cae8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2201      	movs	r2, #1
 800cafa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d10b      	bne.n	800cb1c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	22c0      	movs	r2, #192	@ 0xc0
 800cb08:	589b      	ldr	r3, [r3, r2]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	215c      	movs	r1, #92	@ 0x5c
 800cb0e:	5a52      	ldrh	r2, [r2, r1]
 800cb10:	0852      	lsrs	r2, r2, #1
 800cb12:	b291      	uxth	r1, r2
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	0010      	movs	r0, r2
 800cb18:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb1a:	e005      	b.n	800cb28 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	229c      	movs	r2, #156	@ 0x9c
 800cb20:	589b      	ldr	r3, [r3, r2]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	0010      	movs	r0, r2
 800cb26:	4798      	blx	r3
}
 800cb28:	46c0      	nop			@ (mov r8, r8)
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	b004      	add	sp, #16
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2288      	movs	r2, #136	@ 0x88
 800cb42:	589b      	ldr	r3, [r3, r2]
 800cb44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	228c      	movs	r2, #140	@ 0x8c
 800cb4a:	589b      	ldr	r3, [r3, r2]
 800cb4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	2280      	movs	r2, #128	@ 0x80
 800cb56:	4013      	ands	r3, r2
 800cb58:	2b80      	cmp	r3, #128	@ 0x80
 800cb5a:	d10a      	bne.n	800cb72 <UART_DMAError+0x42>
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2b21      	cmp	r3, #33	@ 0x21
 800cb60:	d107      	bne.n	800cb72 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2256      	movs	r2, #86	@ 0x56
 800cb66:	2100      	movs	r1, #0
 800cb68:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	f7ff fe7b 	bl	800c868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	2240      	movs	r2, #64	@ 0x40
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	2b40      	cmp	r3, #64	@ 0x40
 800cb7e:	d10a      	bne.n	800cb96 <UART_DMAError+0x66>
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b22      	cmp	r3, #34	@ 0x22
 800cb84:	d107      	bne.n	800cb96 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	225e      	movs	r2, #94	@ 0x5e
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	0018      	movs	r0, r3
 800cb92:	f7ff fea9 	bl	800c8e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	2290      	movs	r2, #144	@ 0x90
 800cb9a:	589b      	ldr	r3, [r3, r2]
 800cb9c:	2210      	movs	r2, #16
 800cb9e:	431a      	orrs	r2, r3
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2190      	movs	r1, #144	@ 0x90
 800cba4:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	22a4      	movs	r2, #164	@ 0xa4
 800cbaa:	589b      	ldr	r3, [r3, r2]
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	0010      	movs	r0, r2
 800cbb0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbb2:	46c0      	nop			@ (mov r8, r8)
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	b006      	add	sp, #24
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	225e      	movs	r2, #94	@ 0x5e
 800cbcc:	2100      	movs	r1, #0
 800cbce:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2256      	movs	r2, #86	@ 0x56
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	22a4      	movs	r2, #164	@ 0xa4
 800cbdc:	589b      	ldr	r3, [r3, r2]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	0010      	movs	r0, r2
 800cbe2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbe4:	46c0      	nop			@ (mov r8, r8)
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	b004      	add	sp, #16
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbf4:	f3ef 8310 	mrs	r3, PRIMASK
 800cbf8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	2301      	movs	r3, #1
 800cc00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f383 8810 	msr	PRIMASK, r3
}
 800cc08:	46c0      	nop			@ (mov r8, r8)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2140      	movs	r1, #64	@ 0x40
 800cc16:	438a      	bics	r2, r1
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	f383 8810 	msr	PRIMASK, r3
}
 800cc24:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2288      	movs	r2, #136	@ 0x88
 800cc2a:	2120      	movs	r1, #32
 800cc2c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2298      	movs	r2, #152	@ 0x98
 800cc38:	589b      	ldr	r3, [r3, r2]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	0010      	movs	r0, r2
 800cc3e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc40:	46c0      	nop			@ (mov r8, r8)
 800cc42:	46bd      	mov	sp, r7
 800cc44:	b006      	add	sp, #24
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc50:	46c0      	nop			@ (mov r8, r8)
 800cc52:	46bd      	mov	sp, r7
 800cc54:	b002      	add	sp, #8
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc60:	46c0      	nop			@ (mov r8, r8)
 800cc62:	46bd      	mov	sp, r7
 800cc64:	b002      	add	sp, #8
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc70:	46c0      	nop			@ (mov r8, r8)
 800cc72:	46bd      	mov	sp, r7
 800cc74:	b002      	add	sp, #8
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <memset>:
 800cc78:	0003      	movs	r3, r0
 800cc7a:	1882      	adds	r2, r0, r2
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d100      	bne.n	800cc82 <memset+0xa>
 800cc80:	4770      	bx	lr
 800cc82:	7019      	strb	r1, [r3, #0]
 800cc84:	3301      	adds	r3, #1
 800cc86:	e7f9      	b.n	800cc7c <memset+0x4>

0800cc88 <__libc_init_array>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	2600      	movs	r6, #0
 800cc8c:	4c0c      	ldr	r4, [pc, #48]	@ (800ccc0 <__libc_init_array+0x38>)
 800cc8e:	4d0d      	ldr	r5, [pc, #52]	@ (800ccc4 <__libc_init_array+0x3c>)
 800cc90:	1b64      	subs	r4, r4, r5
 800cc92:	10a4      	asrs	r4, r4, #2
 800cc94:	42a6      	cmp	r6, r4
 800cc96:	d109      	bne.n	800ccac <__libc_init_array+0x24>
 800cc98:	2600      	movs	r6, #0
 800cc9a:	f000 f823 	bl	800cce4 <_init>
 800cc9e:	4c0a      	ldr	r4, [pc, #40]	@ (800ccc8 <__libc_init_array+0x40>)
 800cca0:	4d0a      	ldr	r5, [pc, #40]	@ (800cccc <__libc_init_array+0x44>)
 800cca2:	1b64      	subs	r4, r4, r5
 800cca4:	10a4      	asrs	r4, r4, #2
 800cca6:	42a6      	cmp	r6, r4
 800cca8:	d105      	bne.n	800ccb6 <__libc_init_array+0x2e>
 800ccaa:	bd70      	pop	{r4, r5, r6, pc}
 800ccac:	00b3      	lsls	r3, r6, #2
 800ccae:	58eb      	ldr	r3, [r5, r3]
 800ccb0:	4798      	blx	r3
 800ccb2:	3601      	adds	r6, #1
 800ccb4:	e7ee      	b.n	800cc94 <__libc_init_array+0xc>
 800ccb6:	00b3      	lsls	r3, r6, #2
 800ccb8:	58eb      	ldr	r3, [r5, r3]
 800ccba:	4798      	blx	r3
 800ccbc:	3601      	adds	r6, #1
 800ccbe:	e7f2      	b.n	800cca6 <__libc_init_array+0x1e>
 800ccc0:	0800d774 	.word	0x0800d774
 800ccc4:	0800d774 	.word	0x0800d774
 800ccc8:	0800d778 	.word	0x0800d778
 800cccc:	0800d774 	.word	0x0800d774

0800ccd0 <memcpy>:
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	b510      	push	{r4, lr}
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d100      	bne.n	800ccda <memcpy+0xa>
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	5ccc      	ldrb	r4, [r1, r3]
 800ccdc:	54c4      	strb	r4, [r0, r3]
 800ccde:	3301      	adds	r3, #1
 800cce0:	e7f8      	b.n	800ccd4 <memcpy+0x4>
	...

0800cce4 <_init>:
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	46c0      	nop			@ (mov r8, r8)
 800cce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccea:	bc08      	pop	{r3}
 800ccec:	469e      	mov	lr, r3
 800ccee:	4770      	bx	lr

0800ccf0 <_fini>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	46c0      	nop			@ (mov r8, r8)
 800ccf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf6:	bc08      	pop	{r3}
 800ccf8:	469e      	mov	lr, r3
 800ccfa:	4770      	bx	lr
