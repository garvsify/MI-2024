
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  080070ac  080070ac  000080ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aac  08007aac  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab4  08007ab4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab4  08007ab4  00008ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ab8  08007ab8  00008ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007abc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000000c  08007ac8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08007ac8  00009594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154e3  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029df  00000000  00000000  0001e517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00020ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9f  00000000  00000000  00022058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001785b  00000000  00000000  00022df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c6a  00000000  00000000  0003a652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa94  00000000  00000000  0004f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  000e9d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000edccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007094 	.word	0x08007094

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007094 	.word	0x08007094

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f006 fdef 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f006 fde8 	bl	800703c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f003 fbfb 	bl	8003c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 fc1d 	bl	8003d04 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fc69 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 ff22 	bl	8004338 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fc54 	bl	8000da4 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f006 fd92 	bl	800703c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <MX_ADC1_Init+0x140>)
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <MX_ADC1_Init+0x144>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b47      	ldr	r3, [pc, #284]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <MX_ADC1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0392      	lsls	r2, r2, #14
 8000538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_ADC1_Init+0x140>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b40      	ldr	r3, [pc, #256]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <MX_ADC1_Init+0x140>)
 800054e:	2200      	movs	r2, #0
 8000550:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000552:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000554:	2204      	movs	r2, #4
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_ADC1_Init+0x140>)
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_ADC1_Init+0x140>)
 800056e:	222c      	movs	r2, #44	@ 0x2c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000574:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_ADC1_Init+0x140>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000596:	0018      	movs	r0, r3
 8000598:	f002 f820 	bl	80025dc <HAL_ADC_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fc00 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 fbf1 	bl	8002da4 <HAL_ADC_ConfigChannel>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f000 fbed 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ADC1_Init+0x148>)
 80005ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2204      	movs	r2, #4
 80005d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 fbde 	bl	8002da4 <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005ec:	f000 fbda 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x14c>)
 80005f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2208      	movs	r2, #8
 80005fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f002 fbcb 	bl	8002da4 <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000612:	f000 fbc7 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_ADC1_Init+0x150>)
 800061a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	220c      	movs	r2, #12
 8000620:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_ADC1_Init+0x140>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f002 fbb8 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000638:	f000 fbb4 	bl	8000da4 <Error_Handler>
  }
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40012400 	.word	0x40012400
 800064c:	04000002 	.word	0x04000002
 8000650:	10000010 	.word	0x10000010
 8000654:	14000020 	.word	0x14000020

08000658 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f006 fce8 	bl	800703c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <MX_TIM14_Init+0x9c>)
 8000670:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_TIM14_Init+0xa0>)
 8000682:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000694:	0018      	movs	r0, r3
 8000696:	f003 fff9 	bl	800468c <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fb81 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f004 fa35 	bl	8004b14 <HAL_TIM_PWM_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 fb79 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2260      	movs	r2, #96	@ 0x60
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 400;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	22c8      	movs	r2, #200	@ 0xc8
 80006bc:	0052      	lsls	r2, r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f004 fe06 	bl	80052e4 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80006dc:	f000 fb62 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 ffc0 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b008      	add	sp, #32
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000010c 	.word	0x2000010c
 80006f4:	40002000 	.word	0x40002000
 80006f8:	000003ff 	.word	0x000003ff

080006fc <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	2334      	movs	r3, #52	@ 0x34
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	231c      	movs	r3, #28
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f006 fc95 	bl	800703c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2334      	movs	r3, #52	@ 0x34
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f006 fc8e 	bl	800703c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000720:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <MX_TIM16_Init+0x120>)
 8000722:	4a3f      	ldr	r2, [pc, #252]	@ (8000820 <MX_TIM16_Init+0x124>)
 8000724:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000726:	4b3d      	ldr	r3, [pc, #244]	@ (800081c <MX_TIM16_Init+0x120>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <MX_TIM16_Init+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000732:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <MX_TIM16_Init+0x120>)
 8000734:	22ff      	movs	r2, #255	@ 0xff
 8000736:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000738:	4b38      	ldr	r3, [pc, #224]	@ (800081c <MX_TIM16_Init+0x120>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000740:	4b36      	ldr	r3, [pc, #216]	@ (800081c <MX_TIM16_Init+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <MX_TIM16_Init+0x120>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800074c:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_TIM16_Init+0x120>)
 800074e:	0018      	movs	r0, r3
 8000750:	f003 ff9c 	bl	800468c <HAL_TIM_Base_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 fb24 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_TIM16_Init+0x120>)
 800075e:	0018      	movs	r0, r3
 8000760:	f004 f846 	bl	80047f0 <HAL_TIM_OC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 fb1c 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800076c:	2134      	movs	r1, #52	@ 0x34
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	22ff      	movs	r2, #255	@ 0xff
 8000778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1879      	adds	r1, r7, r1
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_TIM16_Init+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f004 fc9c 	bl	80050dc <HAL_TIM_OC_ConfigChannel>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80007a8:	f000 fafc 	bl	8000da4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_TIM16_Init+0x120>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_TIM16_Init+0x120>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2108      	movs	r1, #8
 80007b8:	430a      	orrs	r2, r1
 80007ba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	003b      	movs	r3, r7
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007ee:	003a      	movs	r2, r7
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_TIM16_Init+0x120>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f005 fe63 	bl	80064c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80007fe:	f000 fad1 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2015      	movs	r0, #21
 8000808:	f002 fe8e 	bl	8003528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800080c:	2015      	movs	r0, #21
 800080e:	f002 fea0 	bl	8003552 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_Init 2 */
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b014      	add	sp, #80	@ 0x50
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	200001c8 	.word	0x200001c8
 8000820:	40014400 	.word	0x40014400

08000824 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	2320      	movs	r3, #32
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0018      	movs	r0, r3
 8000830:	2310      	movs	r3, #16
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f006 fc01 	bl	800703c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	2314      	movs	r3, #20
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	230c      	movs	r3, #12
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f006 fbf9 	bl	800703c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	0018      	movs	r0, r3
 800084e:	2310      	movs	r3, #16
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f006 fbf2 	bl	800703c <memset>

  htim2.Instance = TIM2;
 8000858:	4b2f      	ldr	r3, [pc, #188]	@ (8000918 <MX_TIM2_Init+0xf4>)
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	05d2      	lsls	r2, r2, #23
 800085e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000860:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000862:	223f      	movs	r2, #63	@ 0x3f
 8000864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800086c:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <MX_TIM2_Init+0xf4>)
 800086e:	2201      	movs	r2, #1
 8000870:	4252      	negs	r2, r2
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_TIM2_Init+0xf4>)
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000884:	0018      	movs	r0, r3
 8000886:	f003 ff01 	bl	800468c <HAL_TIM_Base_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 fa89 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	2120      	movs	r1, #32
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	0152      	lsls	r2, r2, #5
 800089a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089c:	187a      	adds	r2, r7, r1
 800089e:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f004 fe1e 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 fa7a 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 fa7a 	bl	8004dac <HAL_TIM_IC_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80008bc:	f000 fa72 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2114      	movs	r1, #20
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f005 fd8b 	bl	80063f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80008de:	f000 fa61 	bl	8000da4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	220f      	movs	r2, #15
 80008f8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	1d39      	adds	r1, r7, #4
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f004 fc4b 	bl	800519c <HAL_TIM_IC_ConfigChannel>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800090a:	f000 fa4b 	bl	8000da4 <Error_Handler>
  }
}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b00c      	add	sp, #48	@ 0x30
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	20000284 	.word	0x20000284

0800091c <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	2328      	movs	r3, #40	@ 0x28
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	2310      	movs	r3, #16
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f006 fb85 	bl	800703c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	231c      	movs	r3, #28
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	230c      	movs	r3, #12
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f006 fb7d 	bl	800703c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	231c      	movs	r3, #28
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f006 fb76 	bl	800703c <memset>

  htim3.Instance = TIM3;
 8000950:	4b32      	ldr	r3, [pc, #200]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000952:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <MX_TIM3_Init+0x104>)
 8000954:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000958:	4a32      	ldr	r2, [pc, #200]	@ (8000a24 <MX_TIM3_Init+0x108>)
 800095a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <MX_TIM3_Init+0x100>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8000962:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000964:	4a30      	ldr	r2, [pc, #192]	@ (8000a28 <MX_TIM3_Init+0x10c>)
 8000966:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <MX_TIM3_Init+0x100>)
 800096a:	2280      	movs	r2, #128	@ 0x80
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000972:	2280      	movs	r2, #128	@ 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000978:	0018      	movs	r0, r3
 800097a:	f003 fe87 	bl	800468c <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 fa0f 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2128      	movs	r1, #40	@ 0x28
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f004 fda4 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009a0:	f000 fa00 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_TIM3_Init+0x100>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 ff22 	bl	80047f0 <HAL_TIM_OC_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009b0:	f000 f9f8 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	211c      	movs	r1, #28
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c2:	187a      	adds	r2, r7, r1
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_TIM3_Init+0x100>)
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f005 fd11 	bl	80063f0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80009d2:	f000 f9e7 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	0039      	movs	r1, r7
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <MX_TIM3_Init+0x100>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 fb71 	bl	80050dc <HAL_TIM_OC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80009fe:	f000 f9d1 	bl	8000da4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	699a      	ldr	r2, [r3, #24]
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	619a      	str	r2, [r3, #24]
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b00e      	add	sp, #56	@ 0x38
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	20000340 	.word	0x20000340
 8000a20:	40000400 	.word	0x40000400
 8000a24:	00007fff 	.word	0x00007fff
 8000a28:	00000fff 	.word	0x00000fff

08000a2c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	2334      	movs	r3, #52	@ 0x34
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	231c      	movs	r3, #28
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f006 fafd 	bl	800703c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	2334      	movs	r3, #52	@ 0x34
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f006 faf6 	bl	800703c <memset>

  htim17.Instance = TIM17;
 8000a50:	4b3a      	ldr	r3, [pc, #232]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a52:	4a3b      	ldr	r2, [pc, #236]	@ (8000b40 <MX_TIM17_Init+0x114>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (64 * 512) - 1;
 8000a56:	4b39      	ldr	r3, [pc, #228]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a58:	4a3a      	ldr	r2, [pc, #232]	@ (8000b44 <MX_TIM17_Init+0x118>)
 8000a5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4095;
 8000a62:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a64:	4a38      	ldr	r2, [pc, #224]	@ (8000b48 <MX_TIM17_Init+0x11c>)
 8000a66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a68:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a70:	4b32      	ldr	r3, [pc, #200]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a76:	4b31      	ldr	r3, [pc, #196]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fe04 	bl	800468c <HAL_TIM_Base_Init>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000a88:	f000 f98c 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 feae 	bl	80047f0 <HAL_TIM_OC_Init>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 f984 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a9c:	2134      	movs	r1, #52	@ 0x34
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	1879      	adds	r1, r7, r1
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 fb04 	bl	80050dc <HAL_TIM_OC_ConfigChannel>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000ad8:	f000 f964 	bl	8000da4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	003b      	movs	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1e:	003a      	movs	r2, r7
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f005 fccb 	bl	80064c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000b2e:	f000 f939 	bl	8000da4 <Error_Handler>
  }
}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b014      	add	sp, #80	@ 0x50
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	200003fc 	.word	0x200003fc
 8000b40:	40014800 	.word	0x40014800
 8000b44:	00007fff 	.word	0x00007fff
 8000b48:	00000fff 	.word	0x00000fff

08000b4c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <MX_USART2_UART_Init+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b58:	22e1      	movs	r2, #225	@ 0xe1
 8000b5a:	0252      	lsls	r2, r2, #9
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f005 fd4e 	bl	8006638 <HAL_UART_Init>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f900 	bl	8000da4 <Error_Handler>
  }
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	200004b8 	.word	0x200004b8
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_DMA_Init+0x48>)
 8000bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_DMA_Init+0x48>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_DMA_Init+0x48>)
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	2009      	movs	r0, #9
 8000bd8:	f002 fca6 	bl	8003528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bdc:	2009      	movs	r0, #9
 8000bde:	f002 fcb8 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */ //- i think to do with scan mode adc
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 2, 2);
 8000be2:	2202      	movs	r2, #2
 8000be4:	2102      	movs	r1, #2
 8000be6:	200b      	movs	r0, #11
 8000be8:	f002 fc9e 	bl	8003528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 8000bec:	200b      	movs	r0, #11
 8000bee:	f002 fcb0 	bl	8003552 <HAL_NVIC_EnableIRQ>

}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	240c      	movs	r4, #12
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f006 fa13 	bl	800703c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b60      	ldr	r3, [pc, #384]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c22:	4b5d      	ldr	r3, [pc, #372]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c26:	2204      	movs	r2, #4
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b59      	ldr	r3, [pc, #356]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c34:	2120      	movs	r1, #32
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c3a:	4b57      	ldr	r3, [pc, #348]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	2220      	movs	r2, #32
 8000c40:	4013      	ands	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c4a:	4b53      	ldr	r3, [pc, #332]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c52:	4b51      	ldr	r3, [pc, #324]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <MX_GPIO_Init+0x19c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	@ 0x40
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 ffe3 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	2288      	movs	r2, #136	@ 0x88
 8000c74:	0352      	lsls	r2, r2, #13
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	4a47      	ldr	r2, [pc, #284]	@ (8000da0 <MX_GPIO_Init+0x1a0>)
 8000c82:	0019      	movs	r1, r3
 8000c84:	0010      	movs	r0, r2
 8000c86:	f002 fe6f 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2240      	movs	r2, #64	@ 0x40
 8000c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2201      	movs	r2, #1
 8000c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <MX_GPIO_Init+0x19c>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f002 fe60 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 8000cba:	193a      	adds	r2, r7, r4
 8000cbc:	23a0      	movs	r3, #160	@ 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f002 fe50 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2202      	movs	r2, #2
 8000ccc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	193a      	adds	r2, r7, r4
 8000cdc:	23a0      	movs	r3, #160	@ 0xa0
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fe40 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2210      	movs	r2, #16
 8000cec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	193a      	adds	r2, r7, r4
 8000cfc:	23a0      	movs	r3, #160	@ 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 fe30 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2203      	movs	r2, #3
 8000d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	23a0      	movs	r3, #160	@ 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fe20 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISR measurement pin */
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	0152      	lsls	r2, r2, #5
 8000d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	193a      	adds	r2, r7, r4
 8000d3e:	23a0      	movs	r3, #160	@ 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fe0f 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tempo LED flash pin */
  GPIO_InitStruct.Pin = TEMPO_Pin;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEMPO_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	193a      	adds	r2, r7, r4
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 fdfe 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tap Tempo I/P pin - requires pullup to detect falling edge */
  GPIO_InitStruct.Pin = TAP_TEMPO_Pin;
 8000d6c:	0021      	movs	r1, r4
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	0212      	lsls	r2, r2, #8
 8000d74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2201      	movs	r2, #1
 8000d80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TAP_TEMPO_GPIO_Port, &GPIO_InitStruct);
 8000d82:	187a      	adds	r2, r7, r1
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 fdec 	bl	8003968 <HAL_GPIO_Init>
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b009      	add	sp, #36	@ 0x24
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	50000800 	.word	0x50000800
 8000da0:	50001400 	.word	0x50001400

08000da4 <Error_Handler>:

void Error_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <System_Init>:
  {

  }
}

void System_Init(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000db4:	f001 fa22 	bl	80021fc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000db8:	f7ff fb46 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dbc:	f7ff ff20 	bl	8000c00 <MX_GPIO_Init>
	MX_DMA_Init();
 8000dc0:	f7ff fef8 	bl	8000bb4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000dc4:	f7ff fec2 	bl	8000b4c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000dc8:	f7ff fb9c 	bl	8000504 <MX_ADC1_Init>
	MX_TIM14_Init(); //PWM Gen.
 8000dcc:	f7ff fc44 	bl	8000658 <MX_TIM14_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8000dd0:	f7ff fc94 	bl	80006fc <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement
 8000dd4:	f7ff fd26 	bl	8000824 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse
 8000dd8:	f7ff fda0 	bl	800091c <MX_TIM3_Init>
	MX_TIM17_Init(); //Maximum I/P Capture Measurement Timeout
 8000ddc:	f7ff fe26 	bl	8000a2c <MX_TIM17_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <System_Init+0x50>)
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <System_Init+0x54>)
 8000de4:	2114      	movs	r1, #20
 8000de6:	0018      	movs	r0, r3
 8000de8:	f004 fca2 	bl	8005730 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <System_Init+0x58>)
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <System_Init+0x5c>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 fdca 	bl	800298c <HAL_ADC_RegisterCallback>
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	200001c8 	.word	0x200001c8
 8000e08:	08001201 	.word	0x08001201
 8000e0c:	20000028 	.word	0x20000028

08000e10 <TIM16_callback>:
#include "custom_callbacks.h"

static ADC_ChannelConfTypeDef ADC_CH_Cfg = {0};

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	//TIM16 interrupt flag is already cleared by stm32g0xx_it.c

	TIM16_callback_active = YES;
 8000e18:	4bcc      	ldr	r3, [pc, #816]	@ (800114c <TIM16_callback+0x33c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
	Global_Interrupt_Disable();
 8000e1e:	f000 fcf5 	bl	800180c <Global_Interrupt_Disable>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	0159      	lsls	r1, r3, #5
 8000e26:	23a0      	movs	r3, #160	@ 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 feff 	bl	8003c30 <HAL_GPIO_WritePin>
	}*/

	////////////////////////////////
	//SET THE CURRENT(prev) VALUES//
	////////////////////////////////
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8000e32:	4bc7      	ldr	r3, [pc, #796]	@ (8001150 <TIM16_callback+0x340>)
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	4bc6      	ldr	r3, [pc, #792]	@ (8001150 <TIM16_callback+0x340>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
 8000e3e:	4bc5      	ldr	r3, [pc, #788]	@ (8001154 <TIM16_callback+0x344>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4bc4      	ldr	r3, [pc, #784]	@ (8001158 <TIM16_callback+0x348>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000e4a:	4bc4      	ldr	r3, [pc, #784]	@ (800115c <TIM16_callback+0x34c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	001a      	movs	r2, r3
 8000e52:	4bc3      	ldr	r3, [pc, #780]	@ (8001160 <TIM16_callback+0x350>)
 8000e54:	0052      	lsls	r2, r2, #1
 8000e56:	5ad3      	ldrh	r3, [r2, r3]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	4bbf      	ldr	r3, [pc, #764]	@ (8001158 <TIM16_callback+0x348>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000e60:	4bc0      	ldr	r3, [pc, #768]	@ (8001164 <TIM16_callback+0x354>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4bc0      	ldr	r3, [pc, #768]	@ (8001168 <TIM16_callback+0x358>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34

	/////////////////////////////
	//CALCULATE THE NEXT VALUES//
	/////////////////////////////
	current_index++;
 8000e6c:	4bbf      	ldr	r3, [pc, #764]	@ (800116c <TIM16_callback+0x35c>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4bbd      	ldr	r3, [pc, #756]	@ (800116c <TIM16_callback+0x35c>)
 8000e78:	801a      	strh	r2, [r3, #0]

	if(current_index == FINAL_INDEX + 1){
 8000e7a:	4bbc      	ldr	r3, [pc, #752]	@ (800116c <TIM16_callback+0x35c>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d108      	bne.n	8000e9a <TIM16_callback+0x8a>
		current_quadrant = FIRST_QUADRANT;
 8000e88:	4bb9      	ldr	r3, [pc, #740]	@ (8001170 <TIM16_callback+0x360>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000e8e:	4bb9      	ldr	r3, [pc, #740]	@ (8001174 <TIM16_callback+0x364>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
		current_index = 0;
 8000e94:	4bb5      	ldr	r3, [pc, #724]	@ (800116c <TIM16_callback+0x35c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	801a      	strh	r2, [r3, #0]
	}

	if(current_waveshape == TRIANGLE_MODE){
 8000e9a:	4bb7      	ldr	r3, [pc, #732]	@ (8001178 <TIM16_callback+0x368>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d109      	bne.n	8000eb8 <TIM16_callback+0xa8>
		duty = tri_wavetable[current_index];
 8000ea4:	4bb1      	ldr	r3, [pc, #708]	@ (800116c <TIM16_callback+0x35c>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	001a      	movs	r2, r3
 8000eac:	4bb3      	ldr	r3, [pc, #716]	@ (800117c <TIM16_callback+0x36c>)
 8000eae:	0052      	lsls	r2, r2, #1
 8000eb0:	5ad2      	ldrh	r2, [r2, r3]
 8000eb2:	4bb3      	ldr	r3, [pc, #716]	@ (8001180 <TIM16_callback+0x370>)
 8000eb4:	801a      	strh	r2, [r3, #0]
 8000eb6:	e029      	b.n	8000f0c <TIM16_callback+0xfc>
	}
	else if(current_waveshape == SINE_MODE){
 8000eb8:	4baf      	ldr	r3, [pc, #700]	@ (8001178 <TIM16_callback+0x368>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d109      	bne.n	8000ed6 <TIM16_callback+0xc6>
		duty = sine_wavetable[current_index];
 8000ec2:	4baa      	ldr	r3, [pc, #680]	@ (800116c <TIM16_callback+0x35c>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	001a      	movs	r2, r3
 8000eca:	4bae      	ldr	r3, [pc, #696]	@ (8001184 <TIM16_callback+0x374>)
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	5ad2      	ldrh	r2, [r2, r3]
 8000ed0:	4bab      	ldr	r3, [pc, #684]	@ (8001180 <TIM16_callback+0x370>)
 8000ed2:	801a      	strh	r2, [r3, #0]
 8000ed4:	e01a      	b.n	8000f0c <TIM16_callback+0xfc>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8000ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8001178 <TIM16_callback+0x368>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d108      	bne.n	8000ef2 <TIM16_callback+0xe2>
 8000ee0:	4ba2      	ldr	r3, [pc, #648]	@ (800116c <TIM16_callback+0x35c>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2bff      	cmp	r3, #255	@ 0xff
 8000ee8:	d803      	bhi.n	8000ef2 <TIM16_callback+0xe2>
		duty = 1023;
 8000eea:	4ba5      	ldr	r3, [pc, #660]	@ (8001180 <TIM16_callback+0x370>)
 8000eec:	4aa6      	ldr	r2, [pc, #664]	@ (8001188 <TIM16_callback+0x378>)
 8000eee:	801a      	strh	r2, [r3, #0]
 8000ef0:	e00c      	b.n	8000f0c <TIM16_callback+0xfc>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 8000ef2:	4ba1      	ldr	r3, [pc, #644]	@ (8001178 <TIM16_callback+0x368>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <TIM16_callback+0xfc>
 8000efc:	4b9b      	ldr	r3, [pc, #620]	@ (800116c <TIM16_callback+0x35c>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2bff      	cmp	r3, #255	@ 0xff
 8000f04:	d902      	bls.n	8000f0c <TIM16_callback+0xfc>
			duty = 0;
 8000f06:	4b9e      	ldr	r3, [pc, #632]	@ (8001180 <TIM16_callback+0x370>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	801a      	strh	r2, [r3, #0]
	}

	if(current_index == FIRST_QUADRANT_START_INDEX){
 8000f0c:	4b97      	ldr	r3, [pc, #604]	@ (800116c <TIM16_callback+0x35c>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <TIM16_callback+0x114>
		current_quadrant = FIRST_QUADRANT;
 8000f16:	4b96      	ldr	r3, [pc, #600]	@ (8001170 <TIM16_callback+0x360>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000f1c:	4b95      	ldr	r3, [pc, #596]	@ (8001174 <TIM16_callback+0x364>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e026      	b.n	8000f72 <TIM16_callback+0x162>
	}
	else if(current_index == SECOND_QUADRANT_START_INDEX){
 8000f24:	4b91      	ldr	r3, [pc, #580]	@ (800116c <TIM16_callback+0x35c>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	2b80      	cmp	r3, #128	@ 0x80
 8000f2c:	d106      	bne.n	8000f3c <TIM16_callback+0x12c>
		current_quadrant = SECOND_QUADRANT;
 8000f2e:	4b90      	ldr	r3, [pc, #576]	@ (8001170 <TIM16_callback+0x360>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000f34:	4b8f      	ldr	r3, [pc, #572]	@ (8001174 <TIM16_callback+0x364>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	e01a      	b.n	8000f72 <TIM16_callback+0x162>
	}
	else if(current_index == THIRD_QUADRANT_START_INDEX){
 8000f3c:	4b8b      	ldr	r3, [pc, #556]	@ (800116c <TIM16_callback+0x35c>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d106      	bne.n	8000f58 <TIM16_callback+0x148>
		current_quadrant = FIRST_QUADRANT;
 8000f4a:	4b89      	ldr	r3, [pc, #548]	@ (8001170 <TIM16_callback+0x360>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000f50:	4b88      	ldr	r3, [pc, #544]	@ (8001174 <TIM16_callback+0x364>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e00c      	b.n	8000f72 <TIM16_callback+0x162>
	}
	else if(current_index == FOURTH_QUADRANT_START_INDEX){
 8000f58:	4b84      	ldr	r3, [pc, #528]	@ (800116c <TIM16_callback+0x35c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d105      	bne.n	8000f72 <TIM16_callback+0x162>
		current_quadrant = SECOND_QUADRANT;
 8000f66:	4b82      	ldr	r3, [pc, #520]	@ (8001170 <TIM16_callback+0x360>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000f6c:	4b81      	ldr	r3, [pc, #516]	@ (8001174 <TIM16_callback+0x364>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(current_depth == 255){
 8000f72:	4b86      	ldr	r3, [pc, #536]	@ (800118c <TIM16_callback+0x37c>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d108      	bne.n	8000f8e <TIM16_callback+0x17e>
			duty = 1023 - duty;
 8000f7c:	4b80      	ldr	r3, [pc, #512]	@ (8001180 <TIM16_callback+0x370>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4a81      	ldr	r2, [pc, #516]	@ (8001188 <TIM16_callback+0x378>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b7d      	ldr	r3, [pc, #500]	@ (8001180 <TIM16_callback+0x370>)
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e00a      	b.n	8000fa4 <TIM16_callback+0x194>
		}
		else if(current_depth != 0){
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800118c <TIM16_callback+0x37c>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <TIM16_callback+0x18e>
			//duty = 1023 - duty*(current_depth >> 8);
			Multiply_Duty_By_Current_Depth_and_Divide_By_256();
 8000f98:	f000 f910 	bl	80011bc <Multiply_Duty_By_Current_Depth_and_Divide_By_256>
 8000f9c:	e002      	b.n	8000fa4 <TIM16_callback+0x194>
		}
		else{
			duty = 1023; //if depth is 0, just output 1023
 8000f9e:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <TIM16_callback+0x370>)
 8000fa0:	4a79      	ldr	r2, [pc, #484]	@ (8001188 <TIM16_callback+0x378>)
 8000fa2:	801a      	strh	r2, [r3, #0]
		}

	#endif

	prev_duty = duty;
 8000fa4:	4b76      	ldr	r3, [pc, #472]	@ (8001180 <TIM16_callback+0x370>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b6e      	ldr	r3, [pc, #440]	@ (8001164 <TIM16_callback+0x354>)
 8000fac:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	0159      	lsls	r1, r3, #5
 8000fb2:	23a0      	movs	r3, #160	@ 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fe39 	bl	8003c30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	0159      	lsls	r1, r3, #5
 8000fc2:	23a0      	movs	r3, #160	@ 0xa0
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f002 fe31 	bl	8003c30 <HAL_GPIO_WritePin>

	ADC_CH_Cfg.Channel = ADC_CHANNEL_0;
 8000fce:	4b70      	ldr	r3, [pc, #448]	@ (8001190 <TIM16_callback+0x380>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8000fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8001190 <TIM16_callback+0x380>)
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001194 <TIM16_callback+0x384>)
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 fee2 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8001194 <TIM16_callback+0x384>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 fd5e 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <TIM16_callback+0x384>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 fda7 	bl	8002b40 <HAL_ADC_PollForConversion>
	uint16_t ADC_result = (uint16_t)HAL_ADC_GetValue(&hadc1); //set ADC_Result to waveshape index value
 8000ff2:	4b68      	ldr	r3, [pc, #416]	@ (8001194 <TIM16_callback+0x384>)
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 fea9 	bl	8002d4c <HAL_ADC_GetValue>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	210e      	movs	r1, #14
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8001002:	187b      	adds	r3, r7, r1
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	4a64      	ldr	r2, [pc, #400]	@ (8001198 <TIM16_callback+0x388>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d803      	bhi.n	8001014 <TIM16_callback+0x204>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 800100c:	4b5a      	ldr	r3, [pc, #360]	@ (8001178 <TIM16_callback+0x368>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e017      	b.n	8001044 <TIM16_callback+0x234>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8001014:	230e      	movs	r3, #14
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	4a60      	ldr	r2, [pc, #384]	@ (800119c <TIM16_callback+0x38c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d803      	bhi.n	8001028 <TIM16_callback+0x218>
		current_waveshape = SINE_MODE; //sine wave
 8001020:	4b55      	ldr	r3, [pc, #340]	@ (8001178 <TIM16_callback+0x368>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e00d      	b.n	8001044 <TIM16_callback+0x234>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8001028:	230e      	movs	r3, #14
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	881a      	ldrh	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	@ 0x80
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	429a      	cmp	r2, r3
 8001034:	d203      	bcs.n	800103e <TIM16_callback+0x22e>
		current_waveshape = SQUARE_MODE; //square wave
 8001036:	4b50      	ldr	r3, [pc, #320]	@ (8001178 <TIM16_callback+0x368>)
 8001038:	2202      	movs	r2, #2
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e002      	b.n	8001044 <TIM16_callback+0x234>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 800103e:	4b4e      	ldr	r3, [pc, #312]	@ (8001178 <TIM16_callback+0x368>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
	}

	ADC_CH_Cfg.Channel = ADC_CHANNEL_1;
 8001044:	4b52      	ldr	r3, [pc, #328]	@ (8001190 <TIM16_callback+0x380>)
 8001046:	4a56      	ldr	r2, [pc, #344]	@ (80011a0 <TIM16_callback+0x390>)
 8001048:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 800104a:	4a51      	ldr	r2, [pc, #324]	@ (8001190 <TIM16_callback+0x380>)
 800104c:	4b51      	ldr	r3, [pc, #324]	@ (8001194 <TIM16_callback+0x384>)
 800104e:	0011      	movs	r1, r2
 8001050:	0018      	movs	r0, r3
 8001052:	f001 fea7 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001056:	4b4f      	ldr	r3, [pc, #316]	@ (8001194 <TIM16_callback+0x384>)
 8001058:	0018      	movs	r0, r3
 800105a:	f001 fd23 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 800105e:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <TIM16_callback+0x384>)
 8001060:	2100      	movs	r1, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f001 fd6c 	bl	8002b40 <HAL_ADC_PollForConversion>
	current_speed = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2; //convert to 10-bit
 8001068:	4b4a      	ldr	r3, [pc, #296]	@ (8001194 <TIM16_callback+0x384>)
 800106a:	0018      	movs	r0, r3
 800106c:	f001 fe6e 	bl	8002d4c <HAL_ADC_GetValue>
 8001070:	0003      	movs	r3, r0
 8001072:	b29b      	uxth	r3, r3
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b4a      	ldr	r3, [pc, #296]	@ (80011a4 <TIM16_callback+0x394>)
 800107a:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_4;
 800107c:	4b44      	ldr	r3, [pc, #272]	@ (8001190 <TIM16_callback+0x380>)
 800107e:	4a4a      	ldr	r2, [pc, #296]	@ (80011a8 <TIM16_callback+0x398>)
 8001080:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 8001082:	4a43      	ldr	r2, [pc, #268]	@ (8001190 <TIM16_callback+0x380>)
 8001084:	4b43      	ldr	r3, [pc, #268]	@ (8001194 <TIM16_callback+0x384>)
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f001 fe8b 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 800108e:	4b41      	ldr	r3, [pc, #260]	@ (8001194 <TIM16_callback+0x384>)
 8001090:	0018      	movs	r0, r3
 8001092:	f001 fd07 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8001096:	4b3f      	ldr	r3, [pc, #252]	@ (8001194 <TIM16_callback+0x384>)
 8001098:	2100      	movs	r1, #0
 800109a:	0018      	movs	r0, r3
 800109c:	f001 fd50 	bl	8002b40 <HAL_ADC_PollForConversion>
	current_depth = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4; //convert to 8-bit
 80010a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <TIM16_callback+0x384>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f001 fe52 	bl	8002d4c <HAL_ADC_GetValue>
 80010a8:	0003      	movs	r3, r0
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b36      	ldr	r3, [pc, #216]	@ (800118c <TIM16_callback+0x37c>)
 80010b2:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_5;
 80010b4:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <TIM16_callback+0x380>)
 80010b6:	4a3d      	ldr	r2, [pc, #244]	@ (80011ac <TIM16_callback+0x39c>)
 80010b8:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 80010ba:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <TIM16_callback+0x380>)
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <TIM16_callback+0x384>)
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f001 fe6f 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80010c6:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <TIM16_callback+0x384>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 fceb 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 80010ce:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <TIM16_callback+0x384>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 fd34 	bl	8002b40 <HAL_ADC_PollForConversion>
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2;

	#endif

	#if SYMMETRY_ADC_RESOLUTION == 8
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001194 <TIM16_callback+0x384>)
 80010da:	0018      	movs	r0, r3
 80010dc:	f001 fe36 	bl	8002d4c <HAL_ADC_GetValue>
 80010e0:	0003      	movs	r3, r0
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <TIM16_callback+0x3a0>)
 80010ec:	601a      	str	r2, [r3, #0]
	#if SYMMETRY_ADC_RESOLUTION == 12
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1);

	#endif

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	0159      	lsls	r1, r3, #5
 80010f2:	23a0      	movs	r3, #160	@ 0xa0
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	2200      	movs	r2, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f002 fd99 	bl	8003c30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	0159      	lsls	r1, r3, #5
 8001102:	23a0      	movs	r3, #160	@ 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2201      	movs	r2, #1
 8001108:	0018      	movs	r0, r3
 800110a:	f002 fd91 	bl	8003c30 <HAL_GPIO_WritePin>

	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 800110e:	f000 fbfb 	bl	8001908 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8001112:	f000 fc69 	bl	80019e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	TIM16_final_start_value_locked = TIM16_final_start_value;
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <TIM16_callback+0x3a4>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <TIM16_callback+0x344>)
 800111e:	801a      	strh	r2, [r3, #0]
	TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <TIM16_callback+0x3a8>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <TIM16_callback+0x34c>)
 8001128:	701a      	strb	r2, [r3, #0]

	TIM16_callback_active = NO;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <TIM16_callback+0x33c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	0159      	lsls	r1, r3, #5
 8001134:	23a0      	movs	r3, #160	@ 0xa0
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	2200      	movs	r2, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f002 fd78 	bl	8003c30 <HAL_GPIO_WritePin>
	Global_Interrupt_Enable();
 8001140:	f000 fb5c 	bl	80017fc <Global_Interrupt_Enable>
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b004      	add	sp, #16
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000589 	.word	0x20000589
 8001150:	40014400 	.word	0x40014400
 8001154:	2000058a 	.word	0x2000058a
 8001158:	200001c8 	.word	0x200001c8
 800115c:	2000057f 	.word	0x2000057f
 8001160:	080078ac 	.word	0x080078ac
 8001164:	2000058c 	.word	0x2000058c
 8001168:	2000010c 	.word	0x2000010c
 800116c:	20000570 	.word	0x20000570
 8001170:	20000573 	.word	0x20000573
 8001174:	20000572 	.word	0x20000572
 8001178:	20000564 	.word	0x20000564
 800117c:	080074ac 	.word	0x080074ac
 8001180:	2000057c 	.word	0x2000057c
 8001184:	080070ac 	.word	0x080070ac
 8001188:	000003ff 	.word	0x000003ff
 800118c:	20000568 	.word	0x20000568
 8001190:	2000054c 	.word	0x2000054c
 8001194:	20000028 	.word	0x20000028
 8001198:	00000555 	.word	0x00000555
 800119c:	00000aaa 	.word	0x00000aaa
 80011a0:	04000002 	.word	0x04000002
 80011a4:	20000566 	.word	0x20000566
 80011a8:	10000010 	.word	0x10000010
 80011ac:	14000020 	.word	0x14000020
 80011b0:	2000056c 	.word	0x2000056c
 80011b4:	20000574 	.word	0x20000574
 80011b8:	2000057e 	.word	0x2000057e

080011bc <Multiply_Duty_By_Current_Depth_and_Divide_By_256>:

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	volatile uint32_t multiply_product = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	001a      	movs	r2, r3
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x3c>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4353      	muls	r3, r2
 80011d6:	607b      	str	r3, [r7, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x40>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 80011e6:	801a      	strh	r2, [r3, #0]

    return 1;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	2000057c 	.word	0x2000057c
 80011f8:	20000568 	.word	0x20000568
 80011fc:	000003ff 	.word	0x000003ff

08001200 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0018      	movs	r0, r3
 800120c:	f001 fd2c 	bl	8002c68 <HAL_ADC_Stop_DMA>

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8001210:	210e      	movs	r1, #14
 8001212:	187b      	adds	r3, r7, r1
 8001214:	4a35      	ldr	r2, [pc, #212]	@ (80012ec <ADC_DMA_conversion_complete_callback+0xec>)
 8001216:	8812      	ldrh	r2, [r2, #0]
 8001218:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 800121a:	187b      	adds	r3, r7, r1
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	4a34      	ldr	r2, [pc, #208]	@ (80012f0 <ADC_DMA_conversion_complete_callback+0xf0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d803      	bhi.n	800122c <ADC_DMA_conversion_complete_callback+0x2c>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8001224:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <ADC_DMA_conversion_complete_callback+0xf4>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e017      	b.n	800125c <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 800122c:	230e      	movs	r3, #14
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	4a31      	ldr	r2, [pc, #196]	@ (80012f8 <ADC_DMA_conversion_complete_callback+0xf8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d803      	bhi.n	8001240 <ADC_DMA_conversion_complete_callback+0x40>
		current_waveshape = SINE_MODE; //sine wave
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <ADC_DMA_conversion_complete_callback+0xf4>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	e00d      	b.n	800125c <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8001240:	230e      	movs	r3, #14
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	015b      	lsls	r3, r3, #5
 800124a:	429a      	cmp	r2, r3
 800124c:	d203      	bcs.n	8001256 <ADC_DMA_conversion_complete_callback+0x56>
		current_waveshape = SQUARE_MODE; //square wave
 800124e:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <ADC_DMA_conversion_complete_callback+0xf4>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e002      	b.n	800125c <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <ADC_DMA_conversion_complete_callback+0xf4>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
	}

	//GET SPEED
	current_speed = ADCResultsDMA[1] >> 2; //convert to 10-bit
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <ADC_DMA_conversion_complete_callback+0xec>)
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	b29b      	uxth	r3, r3
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <ADC_DMA_conversion_complete_callback+0xfc>)
 8001268:	801a      	strh	r2, [r3, #0]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON
		current_depth = ADCResultsDMA[2] >> 4; //convert to 8-bit
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <ADC_DMA_conversion_complete_callback+0xec>)
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	b29b      	uxth	r3, r3
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <ADC_DMA_conversion_complete_callback+0x100>)
 8001276:	801a      	strh	r2, [r3, #0]
			current_symmetry = ADCResultsDMA[3] >> 2;

		#endif

		#if SYMMETRY_ADC_RESOLUTION == 8
			current_symmetry = ADCResultsDMA[3] >> 4;
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <ADC_DMA_conversion_complete_callback+0xec>)
 800127a:	88db      	ldrh	r3, [r3, #6]
 800127c:	b29b      	uxth	r3, r3
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	b29b      	uxth	r3, r3
 8001282:	001a      	movs	r2, r3
 8001284:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <ADC_DMA_conversion_complete_callback+0x104>)
 8001286:	601a      	str	r2, [r3, #0]
		#endif

	#endif

	//after initial conversion is complete, set the conversion complete flag
	if(initial_ADC_conversion_complete == NO){
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <ADC_DMA_conversion_complete_callback+0x108>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <ADC_DMA_conversion_complete_callback+0x98>
		initial_ADC_conversion_complete = YES;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <ADC_DMA_conversion_complete_callback+0x108>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	0159      	lsls	r1, r3, #5
 800129c:	23a0      	movs	r3, #160	@ 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	2200      	movs	r2, #0
 80012a2:	0018      	movs	r0, r3
 80012a4:	f002 fcc4 	bl	8003c30 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	0159      	lsls	r1, r3, #5
 80012ac:	23a0      	movs	r3, #160	@ 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2201      	movs	r2, #1
 80012b2:	0018      	movs	r0, r3
 80012b4:	f002 fcbc 	bl	8003c30 <HAL_GPIO_WritePin>

	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 80012b8:	f000 fb26 	bl	8001908 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 80012bc:	f000 fb94 	bl	80019e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	TIM16_final_start_value_locked = TIM16_final_start_value;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <ADC_DMA_conversion_complete_callback+0x10c>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <ADC_DMA_conversion_complete_callback+0x110>)
 80012c8:	801a      	strh	r2, [r3, #0]
	TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <ADC_DMA_conversion_complete_callback+0x114>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <ADC_DMA_conversion_complete_callback+0x118>)
 80012d2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	0159      	lsls	r1, r3, #5
 80012d8:	23a0      	movs	r3, #160	@ 0xa0
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	2200      	movs	r2, #0
 80012de:	0018      	movs	r0, r3
 80012e0:	f002 fca6 	bl	8003c30 <HAL_GPIO_WritePin>
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000580 	.word	0x20000580
 80012f0:	00000555 	.word	0x00000555
 80012f4:	20000564 	.word	0x20000564
 80012f8:	00000aaa 	.word	0x00000aaa
 80012fc:	20000566 	.word	0x20000566
 8001300:	20000568 	.word	0x20000568
 8001304:	2000056c 	.word	0x2000056c
 8001308:	20000588 	.word	0x20000588
 800130c:	20000574 	.word	0x20000574
 8001310:	2000058a 	.word	0x2000058a
 8001314:	2000057e 	.word	0x2000057e
 8001318:	2000057f 	.word	0x2000057f

0800131c <main>:
#include "system.h"

static ADC_ChannelConfTypeDef ADC_CH_Cfg = {0};

int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	System_Init();
 8001322:	f7ff fd45 	bl	8000db0 <System_Init>

	ADC_CH_Cfg.Channel = ADC_CHANNEL_0;
 8001326:	4b4c      	ldr	r3, [pc, #304]	@ (8001458 <main+0x13c>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 800132c:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <main+0x13c>)
 800132e:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <main+0x140>)
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f001 fd36 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001338:	4b48      	ldr	r3, [pc, #288]	@ (800145c <main+0x140>)
 800133a:	0018      	movs	r0, r3
 800133c:	f001 fbb2 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8001340:	4b46      	ldr	r3, [pc, #280]	@ (800145c <main+0x140>)
 8001342:	2100      	movs	r1, #0
 8001344:	0018      	movs	r0, r3
 8001346:	f001 fbfb 	bl	8002b40 <HAL_ADC_PollForConversion>
	uint16_t ADC_result = (uint16_t)HAL_ADC_GetValue(&hadc1); //set ADC_Result to waveshape index value
 800134a:	4b44      	ldr	r3, [pc, #272]	@ (800145c <main+0x140>)
 800134c:	0018      	movs	r0, r3
 800134e:	f001 fcfd 	bl	8002d4c <HAL_ADC_GetValue>
 8001352:	0002      	movs	r2, r0
 8001354:	1dbb      	adds	r3, r7, #6
 8001356:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4a40      	ldr	r2, [pc, #256]	@ (8001460 <main+0x144>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d803      	bhi.n	800136a <main+0x4e>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <main+0x148>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e015      	b.n	8001396 <main+0x7a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 800136a:	1dbb      	adds	r3, r7, #6
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	4a3e      	ldr	r2, [pc, #248]	@ (8001468 <main+0x14c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d803      	bhi.n	800137c <main+0x60>
		current_waveshape = SINE_MODE; //sine wave
 8001374:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <main+0x148>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e00c      	b.n	8001396 <main+0x7a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800137c:	1dbb      	adds	r3, r7, #6
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	429a      	cmp	r2, r3
 8001386:	d203      	bcs.n	8001390 <main+0x74>
		current_waveshape = SQUARE_MODE; //square wave
 8001388:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <main+0x148>)
 800138a:	2202      	movs	r2, #2
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e002      	b.n	8001396 <main+0x7a>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8001390:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <main+0x148>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
	}

	ADC_CH_Cfg.Channel = ADC_CHANNEL_1;
 8001396:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <main+0x13c>)
 8001398:	4a34      	ldr	r2, [pc, #208]	@ (800146c <main+0x150>)
 800139a:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 800139c:	4a2e      	ldr	r2, [pc, #184]	@ (8001458 <main+0x13c>)
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <main+0x140>)
 80013a0:	0011      	movs	r1, r2
 80013a2:	0018      	movs	r0, r3
 80013a4:	f001 fcfe 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <main+0x140>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 fb7a 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 80013b0:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <main+0x140>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 fbc3 	bl	8002b40 <HAL_ADC_PollForConversion>
	current_speed = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2; //convert to 10-bit
 80013ba:	4b28      	ldr	r3, [pc, #160]	@ (800145c <main+0x140>)
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 fcc5 	bl	8002d4c <HAL_ADC_GetValue>
 80013c2:	0003      	movs	r3, r0
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <main+0x154>)
 80013cc:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_4;
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <main+0x13c>)
 80013d0:	4a28      	ldr	r2, [pc, #160]	@ (8001474 <main+0x158>)
 80013d2:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <main+0x13c>)
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <main+0x140>)
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f001 fce2 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80013e0:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <main+0x140>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f001 fb5e 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <main+0x140>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	0018      	movs	r0, r3
 80013ee:	f001 fba7 	bl	8002b40 <HAL_ADC_PollForConversion>
	current_depth = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4; //convert to 8-bit
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <main+0x140>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 fca9 	bl	8002d4c <HAL_ADC_GetValue>
 80013fa:	0003      	movs	r3, r0
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <main+0x15c>)
 8001404:	801a      	strh	r2, [r3, #0]



	ADC_CH_Cfg.Channel = ADC_CHANNEL_5;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <main+0x13c>)
 8001408:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <main+0x160>)
 800140a:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <main+0x13c>)
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <main+0x140>)
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fcc6 	bl	8002da4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <main+0x140>)
 800141a:	0018      	movs	r0, r3
 800141c:	f001 fb42 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <main+0x140>)
 8001422:	2100      	movs	r1, #0
 8001424:	0018      	movs	r0, r3
 8001426:	f001 fb8b 	bl	8002b40 <HAL_ADC_PollForConversion>
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2;

	#endif

	#if SYMMETRY_ADC_RESOLUTION == 8
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4;
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <main+0x140>)
 800142c:	0018      	movs	r0, r3
 800142e:	f001 fc8d 	bl	8002d4c <HAL_ADC_GetValue>
 8001432:	0003      	movs	r3, r0
 8001434:	b29b      	uxth	r3, r3
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	b29b      	uxth	r3, r3
 800143a:	001a      	movs	r2, r3
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <main+0x164>)
 800143e:	601a      	str	r2, [r3, #0]




	//PROCESS RAW AND FINAL FREQ. GEN. TIMER START VALUES AND PRESCALER
	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8001440:	f000 fa62 	bl	8001908 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8001444:	f000 fad0 	bl	80019e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8001448:	f000 f9d8 	bl	80017fc <Global_Interrupt_Enable>
	Start_PWM_Gen_Timer();
 800144c:	f000 f9e6 	bl	800181c <Start_PWM_Gen_Timer>
	Start_Freq_Gen_Timer();
 8001450:	f000 f9fe 	bl	8001850 <Start_Freq_Gen_Timer>

	while (1)
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	e7fd      	b.n	8001454 <main+0x138>
 8001458:	20000558 	.word	0x20000558
 800145c:	20000028 	.word	0x20000028
 8001460:	00000555 	.word	0x00000555
 8001464:	20000564 	.word	0x20000564
 8001468:	00000aaa 	.word	0x00000aaa
 800146c:	04000002 	.word	0x04000002
 8001470:	20000566 	.word	0x20000566
 8001474:	10000010 	.word	0x10000010
 8001478:	20000568 	.word	0x20000568
 800147c:	14000020 	.word	0x14000020
 8001480:	2000056c 	.word	0x2000056c

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_MspInit+0x44>)
 800148c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <HAL_MspInit+0x44>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40
 8001496:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <HAL_MspInit+0x44>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_MspInit+0x44>)
 80014a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_MspInit+0x44>)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	0549      	lsls	r1, r1, #21
 80014ac:	430a      	orrs	r2, r1
 80014ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_MspInit+0x44>)
 80014b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	4013      	ands	r3, r2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b08b      	sub	sp, #44	@ 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	2414      	movs	r4, #20
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2314      	movs	r3, #20
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f005 fdac 	bl	800703c <memset>
  if(hadc->Instance==ADC1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a2d      	ldr	r2, [pc, #180]	@ (80015a0 <HAL_ADC_MspInit+0xd4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d154      	bne.n	8001598 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <HAL_ADC_MspInit+0xd8>)
 80014f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014f2:	4b2c      	ldr	r3, [pc, #176]	@ (80015a4 <HAL_ADC_MspInit+0xd8>)
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	0349      	lsls	r1, r1, #13
 80014f8:	430a      	orrs	r2, r1
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80014fc:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <HAL_ADC_MspInit+0xd8>)
 80014fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	035b      	lsls	r3, r3, #13
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_ADC_MspInit+0xd8>)
 800150c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800150e:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <HAL_ADC_MspInit+0xd8>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_ADC_MspInit+0xd8>)
 8001518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2233      	movs	r2, #51	@ 0x33
 8001526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001528:	193b      	adds	r3, r7, r4
 800152a:	2203      	movs	r2, #3
 800152c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	193a      	adds	r2, r7, r4
 8001536:	23a0      	movs	r3, #160	@ 0xa0
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	0011      	movs	r1, r2
 800153c:	0018      	movs	r0, r3
 800153e:	f002 fa13 	bl	8003968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001544:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_ADC_MspInit+0xe0>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 800154a:	2205      	movs	r2, #5
 800154c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	0052      	lsls	r2, r2, #1
 8001566:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	00d2      	lsls	r2, r2, #3
 800156e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 800157e:	0018      	movs	r0, r3
 8001580:	f002 f804 	bl	800358c <HAL_DMA_Init>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d001      	beq.n	800158c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001588:	f7ff fc0c 	bl	8000da4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001590:	651a      	str	r2, [r3, #80]	@ 0x50
 8001592:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_ADC_MspInit+0xdc>)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b00b      	add	sp, #44	@ 0x2c
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	40012400 	.word	0x40012400
 80015a4:	40021000 	.word	0x40021000
 80015a8:	200000b0 	.word	0x200000b0
 80015ac:	40020008 	.word	0x40020008

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <HAL_TIM_Base_MspInit+0xa8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10e      	bne.n	80015e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 80015c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c6:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 80015c8:	2180      	movs	r1, #128	@ 0x80
 80015ca:	0209      	lsls	r1, r1, #8
 80015cc:	430a      	orrs	r2, r1
 80015ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 80015d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4013      	ands	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015de:	e036      	b.n	800164e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d116      	bne.n	8001618 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 80015ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	0289      	lsls	r1, r1, #10
 80015f4:	430a      	orrs	r2, r1
 80015f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80015f8:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 80015fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	029b      	lsls	r3, r3, #10
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2015      	movs	r0, #21
 800160c:	f001 ff8c 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001610:	2015      	movs	r0, #21
 8001612:	f001 ff9e 	bl	8003552 <HAL_NVIC_EnableIRQ>
}
 8001616:	e01a      	b.n	800164e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_TIM_Base_MspInit+0xb4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d115      	bne.n	800164e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 8001624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	02c9      	lsls	r1, r1, #11
 800162c:	430a      	orrs	r2, r1
 800162e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_TIM_Base_MspInit+0xac>)
 8001632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	02db      	lsls	r3, r3, #11
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2016      	movs	r0, #22
 8001644:	f001 ff70 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001648:	2016      	movs	r0, #22
 800164a:	f001 ff82 	bl	8003552 <HAL_NVIC_EnableIRQ>
}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b006      	add	sp, #24
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	40002000 	.word	0x40002000
 800165c:	40021000 	.word	0x40021000
 8001660:	40014400 	.word	0x40014400
 8001664:	40014800 	.word	0x40014800

08001668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	240c      	movs	r4, #12
 8001672:	193b      	adds	r3, r7, r4
 8001674:	0018      	movs	r0, r3
 8001676:	2314      	movs	r3, #20
 8001678:	001a      	movs	r2, r3
 800167a:	2100      	movs	r1, #0
 800167c:	f005 fcde 	bl	800703c <memset>
  if(htim->Instance==TIM14)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <HAL_TIM_MspPostInit+0x70>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d122      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_TIM_MspPostInit+0x74>)
 800168c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_TIM_MspPostInit+0x74>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	@ 0x34
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_TIM_MspPostInit+0x74>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a2:	0021      	movs	r1, r4
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2202      	movs	r2, #2
 80016ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2204      	movs	r2, #4
 80016c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	187a      	adds	r2, r7, r1
 80016c4:	23a0      	movs	r3, #160	@ 0xa0
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f002 f94c 	bl	8003968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b009      	add	sp, #36	@ 0x24
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	40002000 	.word	0x40002000
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b08b      	sub	sp, #44	@ 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	2414      	movs	r4, #20
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	0018      	movs	r0, r3
 80016ee:	2314      	movs	r3, #20
 80016f0:	001a      	movs	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	f005 fca2 	bl	800703c <memset>
  if(huart->Instance==USART2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <HAL_UART_MspInit+0x8c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d130      	bne.n	8001764 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_UART_MspInit+0x90>)
 8001704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_UART_MspInit+0x90>)
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0289      	lsls	r1, r1, #10
 800170c:	430a      	orrs	r2, r1
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <HAL_UART_MspInit+0x90>)
 8001712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_UART_MspInit+0x90>)
 8001720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001722:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <HAL_UART_MspInit+0x90>)
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	635a      	str	r2, [r3, #52]	@ 0x34
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_UART_MspInit+0x90>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001736:	0021      	movs	r1, r4
 8001738:	187b      	adds	r3, r7, r1
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2202      	movs	r2, #2
 8001742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2201      	movs	r2, #1
 8001754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	187a      	adds	r2, r7, r1
 8001758:	23a0      	movs	r3, #160	@ 0xa0
 800175a:	05db      	lsls	r3, r3, #23
 800175c:	0011      	movs	r1, r2
 800175e:	0018      	movs	r0, r3
 8001760:	f002 f902 	bl	8003968 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b00b      	add	sp, #44	@ 0x2c
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	40004400 	.word	0x40004400
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 fd98 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <DMA1_Channel1_IRQHandler+0x14>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f001 ffd8 	bl	8003764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	200000b0 	.word	0x200000b0

080017c0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <TIM16_IRQHandler+0x14>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f003 fb58 	bl	8004e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80017d8:	46c0      	nop			@ (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	200001c8 	.word	0x200001c8

080017e4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <TIM17_IRQHandler+0x14>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f003 fb4c 	bl	8004e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	200003fc 	.word	0x200003fc

080017fc <Global_Interrupt_Enable>:
volatile uint16_t TIM16_final_start_value_locked = 0;
volatile uint8_t TIM16_prescaler_adjust_locked = 0;
volatile uint16_t prev_duty = 0;

//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8001800:	b662      	cpsie	i
}
 8001802:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <Global_Interrupt_Disable>:

uint8_t Global_Interrupt_Disable(void){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();
	return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <Start_PWM_Gen_Timer>:

	return ok;
}

uint8_t Start_PWM_Gen_Timer(void)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
	uint8_t ok = Start_PWM_TIM(&htim14, TIM_CHANNEL_1); //start PWM
 8001822:	1dfc      	adds	r4, r7, #7
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <Start_PWM_Gen_Timer+0x30>)
 8001826:	2100      	movs	r1, #0
 8001828:	0018      	movs	r0, r3
 800182a:	f000 f82b 	bl	8001884 <Start_PWM_TIM>
 800182e:	0003      	movs	r3, r0
 8001830:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <Start_PWM_Gen_Timer+0x22>

		Error_Handler();
 800183a:	f7ff fab3 	bl	8000da4 <Error_Handler>
	}

	return ok;
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b003      	add	sp, #12
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	2000010c 	.word	0x2000010c

08001850 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8001856:	1dfc      	adds	r4, r7, #7
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <Start_Freq_Gen_Timer+0x30>)
 800185a:	2100      	movs	r1, #0
 800185c:	0018      	movs	r0, r3
 800185e:	f000 f837 	bl	80018d0 <Start_OC_TIM>
 8001862:	0003      	movs	r3, r0
 8001864:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 800186e:	f7ff fa99 	bl	8000da4 <Error_Handler>
	}

	return ok;
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b003      	add	sp, #12
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	200001c8 	.word	0x200001c8

08001884 <Start_PWM_TIM>:

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]

	uint8_t ok = 0;
 800188e:	250f      	movs	r5, #15
 8001890:	197b      	adds	r3, r7, r5
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	ok = HAL_TIM_Base_Start(TIM);
 8001896:	197c      	adds	r4, r7, r5
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0018      	movs	r0, r3
 800189c:	f002 ff5c 	bl	8004758 <HAL_TIM_Base_Start>
 80018a0:	0003      	movs	r3, r0
 80018a2:	7023      	strb	r3, [r4, #0]
	ok = HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 80018a4:	197c      	adds	r4, r7, r5
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f003 f99f 	bl	8004bf0 <HAL_TIM_PWM_Start>
 80018b2:	0003      	movs	r3, r0
 80018b4:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80018b6:	197b      	adds	r3, r7, r5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <Start_PWM_TIM+0x3e>

		Error_Handler();
 80018be:	f7ff fa71 	bl	8000da4 <Error_Handler>
	}

	return ok;
 80018c2:	230f      	movs	r3, #15
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	781b      	ldrb	r3, [r3, #0]
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}

080018d0 <Start_OC_TIM>:

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80018da:	250f      	movs	r5, #15
 80018dc:	197c      	adds	r4, r7, r5
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f002 fff1 	bl	80048cc <HAL_TIM_OC_Start_IT>
 80018ea:	0003      	movs	r3, r0
 80018ec:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80018ee:	197b      	adds	r3, r7, r5
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <Start_OC_TIM+0x2a>

		Error_Handler();
 80018f6:	f7ff fa55 	bl	8000da4 <Error_Handler>
	}

	return ok;
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	781b      	ldrb	r3, [r3, #0]
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bdb0      	pop	{r4, r5, r7, pc}

08001908 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:
	}

	return ok;
}

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(void){
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

	uint32_t speed_control = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
	uint8_t how_many_128 = 0;
 8001912:	1cfb      	adds	r3, r7, #3
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]

    speed_control = current_speed * NUMBER_OF_FREQUENCY_STEPS;
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x8c>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	001a      	movs	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	189b      	adds	r3, r3, r2
 800192a:	009a      	lsls	r2, r3, #2
 800192c:	189b      	adds	r3, r3, r2
 800192e:	607b      	str	r3, [r7, #4]
    speed_control = speed_control >> 10;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	607b      	str	r3, [r7, #4]

    //speed_control = (speed_adc_10_bit/1024)*883

        if(speed_control <= (127-12)){ //inequality is correct!
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b73      	cmp	r3, #115	@ 0x73
 800193a:	d809      	bhi.n	8001950 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x48>

            TIM16_raw_start_value = (uint8_t) speed_control + 12;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	330c      	adds	r3, #12
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x90>)
 8001946:	801a      	strh	r2, [r3, #0]
            TIM16_base_prescaler_divisors_index = 1;
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x94>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e01c      	b.n	800198a <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x82>
        }
        else{ 	//(speed_control > (127-12))

            uint16_t speed_control_subtracted;
            speed_control_subtracted = speed_control - (127-12);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b29a      	uxth	r2, r3
 8001954:	003b      	movs	r3, r7
 8001956:	3a73      	subs	r2, #115	@ 0x73
 8001958:	801a      	strh	r2, [r3, #0]
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800195a:	003b      	movs	r3, r7
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	09db      	lsrs	r3, r3, #7
 8001960:	b29a      	uxth	r2, r3
 8001962:	1cfb      	adds	r3, r7, #3
 8001964:	701a      	strb	r2, [r3, #0]
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 8001966:	003b      	movs	r3, r7
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	1cfb      	adds	r3, r7, #3
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	b2db      	uxtb	r3, r3
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	001a      	movs	r2, r3
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x90>)
 800197c:	801a      	strh	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + 2);
 800197e:	1cfb      	adds	r3, r7, #3
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	3302      	adds	r3, #2
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x94>)
 8001988:	701a      	strb	r2, [r3, #0]
        }
    return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000566 	.word	0x20000566
 8001998:	20000578 	.word	0x20000578
 800199c:	2000057a 	.word	0x2000057a

080019a0 <Adjust_TIM16_Prescaler>:

uint8_t Adjust_TIM16_Prescaler(uint8_t TIM16_prescaler_adjust_arg){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	0002      	movs	r2, r0
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	701a      	strb	r2, [r3, #0]

    if(TIM16_prescaler_adjust_arg == MULTIPLY_BY_TWO){
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <Adjust_TIM16_Prescaler+0x24>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <Adjust_TIM16_Prescaler+0x40>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <Adjust_TIM16_Prescaler+0x44>)
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e008      	b.n	80019d6 <Adjust_TIM16_Prescaler+0x36>
    }
    else if(TIM16_prescaler_adjust_arg == DO_NOTHING){
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <Adjust_TIM16_Prescaler+0x36>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <Adjust_TIM16_Prescaler+0x40>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <Adjust_TIM16_Prescaler+0x44>)
 80019d4:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000057a 	.word	0x2000057a
 80019e4:	2000057e 	.word	0x2000057e

080019e8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:

uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

    #if SYMMETRY_ON_OR_OFF == ON

		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019ee:	1d7b      	adds	r3, r7, #5
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]

		volatile uint8_t pot_rotation_corrected = 0;
 80019fa:	1cfb      	adds	r3, r7, #3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
		volatile uint8_t symmetry_status = CW;
 8001a00:	1cbb      	adds	r3, r7, #2
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]

		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001a06:	4bb5      	ldr	r3, [pc, #724]	@ (8001cdc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a0c:	d803      	bhi.n	8001a16 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e>
			symmetry_status = CW;
 8001a0e:	1cbb      	adds	r3, r7, #2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e002      	b.n	8001a1c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34>
		}
		else{ //adc is 128-255
			symmetry_status = CCW;
 8001a16:	1cbb      	adds	r3, r7, #2
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
		}

		if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 8001a1c:	4bb0      	ldr	r3, [pc, #704]	@ (8001ce0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d004      	beq.n	8001a30 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x48>
 8001a26:	4bae      	ldr	r3, [pc, #696]	@ (8001ce0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d142      	bne.n	8001ab6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xce>

			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001a30:	4bac      	ldr	r3, [pc, #688]	@ (8001ce4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c>
 8001a3a:	4bab      	ldr	r3, [pc, #684]	@ (8001ce8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70>
 8001a44:	4ba7      	ldr	r3, [pc, #668]	@ (8001ce4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d111      	bne.n	8001a72 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x8a>
 8001a4e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ce8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10c      	bne.n	8001a72 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x8a>

				if(symmetry_status == CW){
 8001a58:	1cbb      	adds	r3, r7, #2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x82>

					symmetry_type_for_halfcycle = LENGTHEN;
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
				if(symmetry_status == CW){
 8001a68:	e024      	b.n	8001ab4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
				}
				else{

					symmetry_type_for_halfcycle = SHORTEN;
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
				if(symmetry_status == CW){
 8001a70:	e020      	b.n	8001ab4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
				}
			}
			else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 8001a72:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d104      	bne.n	8001a86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x9e>
 8001a7c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d009      	beq.n	8001a9a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb2>
 8001a86:	4b97      	ldr	r3, [pc, #604]	@ (8001ce4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d136      	bne.n	8001afe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
 8001a90:	4b95      	ldr	r3, [pc, #596]	@ (8001ce8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d131      	bne.n	8001afe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>

				if(symmetry_status == CW){
 8001a9a:	1cbb      	adds	r3, r7, #2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc4>

					symmetry_type_for_halfcycle = SHORTEN;
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001aaa:	e028      	b.n	8001afe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
				}
				else{

					symmetry_type_for_halfcycle = LENGTHEN;
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001ab2:	e024      	b.n	8001afe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
 8001ab4:	e023      	b.n	8001afe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
				}
			}
		}
		else if(current_waveshape == SQUARE_MODE){
 8001ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8001ce0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d11f      	bne.n	8001b00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>

			if(current_halfcycle == FIRST_HALFCYCLE){
 8001ac0:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xfc>

				if(symmetry_status == CW){
 8001aca:	1cbb      	adds	r3, r7, #2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xf4>

					symmetry_type_for_halfcycle = LENGTHEN;
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e011      	b.n	8001b00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
				}
				else{

					symmetry_type_for_halfcycle = SHORTEN;
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e00d      	b.n	8001b00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
				}
			}
			else{

				if(symmetry_status == CW){
 8001ae4:	1cbb      	adds	r3, r7, #2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x10e>

					symmetry_type_for_halfcycle = SHORTEN;
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e004      	b.n	8001b00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
				}
				else{

					symmetry_type_for_halfcycle = LENGTHEN;
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e000      	b.n	8001b00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001afe:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}

		if(symmetry_status == CW){
 8001b00:	1cbb      	adds	r3, r7, #2
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d108      	bne.n	8001b1c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 8001b0a:	4b74      	ldr	r3, [pc, #464]	@ (8001cdc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	227f      	movs	r2, #127	@ 0x7f
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	1cfb      	adds	r3, r7, #3
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e006      	b.n	8001b2a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x142>
		}
		else{ //CCW

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cdc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3b80      	subs	r3, #128	@ 0x80
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	1cfb      	adds	r3, r7, #3
 8001b28:	701a      	strb	r2, [r3, #0]
		}

		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 8001b2a:	4b70      	ldr	r3, [pc, #448]	@ (8001cec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x304>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	200a      	movs	r0, #10
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	2180      	movs	r1, #128	@ 0x80
 8001b36:	0049      	lsls	r1, r1, #1
 8001b38:	1a8a      	subs	r2, r1, r2
 8001b3a:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001b3c:	1cfb      	adds	r3, r7, #3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	0019      	movs	r1, r3
 8001b44:	2408      	movs	r4, #8
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	183a      	adds	r2, r7, r0
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	434a      	muls	r2, r1
 8001b4e:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	193a      	adds	r2, r7, r4
 8001b54:	8812      	ldrh	r2, [r2, #0]
 8001b56:	0a12      	lsrs	r2, r2, #8
 8001b58:	801a      	strh	r2, [r3, #0]


		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	1839      	adds	r1, r7, r0
 8001b60:	1dba      	adds	r2, r7, #6
 8001b62:	8809      	ldrh	r1, [r1, #0]
 8001b64:	8812      	ldrh	r2, [r2, #0]
 8001b66:	1a8a      	subs	r2, r1, r2
 8001b68:	801a      	strh	r2, [r3, #0]

		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001b6a:	250c      	movs	r5, #12
 8001b6c:	197b      	adds	r3, r7, r5
 8001b6e:	1839      	adds	r1, r7, r0
 8001b70:	1dba      	adds	r2, r7, #6
 8001b72:	8809      	ldrh	r1, [r1, #0]
 8001b74:	8812      	ldrh	r2, [r2, #0]
 8001b76:	188a      	adds	r2, r1, r2
 8001b78:	801a      	strh	r2, [r3, #0]


		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001b7a:	197b      	adds	r3, r7, r5
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2bff      	cmp	r3, #255	@ 0xff
 8001b80:	d90f      	bls.n	8001ba2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ba>
 8001b82:	197b      	adds	r3, r7, r5
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d000      	beq.n	8001b90 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1a8>
 8001b8e:	e0b1      	b.n	8001cf4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x30c>
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2108      	movs	r1, #8
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 faec 	bl	8002174 <unsigned_bitwise_modulo>
 8001b9c:	1e03      	subs	r3, r0, #0
 8001b9e:	d000      	beq.n	8001ba2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ba>
 8001ba0:	e0a8      	b.n	8001cf4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x30c>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2108      	movs	r1, #8
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fae2 	bl	8002174 <unsigned_bitwise_modulo>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	2b80      	cmp	r3, #128	@ 0x80
 8001bb4:	d114      	bne.n	8001be0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f8>
				//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

				//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
				//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e0>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8001bc0:	1d7b      	adds	r3, r7, #5
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f0>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f0>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001bd2:	1d7b      	adds	r3, r7, #5
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001bd8:	4b45      	ldr	r3, [pc, #276]	@ (8001cf0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001bde:	e202      	b.n	8001fe6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001be0:	2308      	movs	r3, #8
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	2108      	movs	r1, #8
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 fac3 	bl	8002174 <unsigned_bitwise_modulo>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d11e      	bne.n	8001c30 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x248>

				//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8001bf2:	220e      	movs	r2, #14
 8001bf4:	18bb      	adds	r3, r7, r2
 8001bf6:	18ba      	adds	r2, r7, r2
 8001bf8:	8812      	ldrh	r2, [r2, #0]
 8001bfa:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	18bb      	adds	r3, r7, r2
 8001c00:	18ba      	adds	r2, r7, r2
 8001c02:	8812      	ldrh	r2, [r2, #0]
 8001c04:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d103      	bne.n	8001c18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x230>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c10:	1d7b      	adds	r3, r7, #5
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e007      	b.n	8001c28 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x240>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d102      	bne.n	8001c28 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x240>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c22:	1d7b      	adds	r3, r7, #5
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c2e:	e1da      	b.n	8001fe6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001c30:	2308      	movs	r3, #8
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2108      	movs	r1, #8
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 fa9b 	bl	8002174 <unsigned_bitwise_modulo>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c42:	d81e      	bhi.n	8001c82 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x29a>

				//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8001c44:	220e      	movs	r2, #14
 8001c46:	18bb      	adds	r3, r7, r2
 8001c48:	18ba      	adds	r2, r7, r2
 8001c4a:	8812      	ldrh	r2, [r2, #0]
 8001c4c:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001c4e:	220c      	movs	r2, #12
 8001c50:	18bb      	adds	r3, r7, r2
 8001c52:	18ba      	adds	r2, r7, r2
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x282>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c62:	1d7b      	adds	r3, r7, #5
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x292>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x292>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c74:	1d7b      	adds	r3, r7, #5
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c80:	e1b1      	b.n	8001fe6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001c82:	2308      	movs	r3, #8
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2108      	movs	r1, #8
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 fa72 	bl	8002174 <unsigned_bitwise_modulo>
 8001c90:	0003      	movs	r3, r0
 8001c92:	2b80      	cmp	r3, #128	@ 0x80
 8001c94:	d800      	bhi.n	8001c98 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2b0>
 8001c96:	e1a6      	b.n	8001fe6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>

				//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001c98:	220e      	movs	r2, #14
 8001c9a:	18bb      	adds	r3, r7, r2
 8001c9c:	18ba      	adds	r2, r7, r2
 8001c9e:	8812      	ldrh	r2, [r2, #0]
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	18bb      	adds	r3, r7, r2
 8001ca8:	18ba      	adds	r2, r7, r2
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	3201      	adds	r2, #1
 8001cae:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2da>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001cba:	1d7b      	adds	r3, r7, #5
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e007      	b.n	8001cd2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ea>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ea>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001ccc:	1d7b      	adds	r3, r7, #5
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001cd8:	e185      	b.n	8001fe6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	2000056c 	.word	0x2000056c
 8001ce0:	20000564 	.word	0x20000564
 8001ce4:	20000572 	.word	0x20000572
 8001ce8:	20000573 	.word	0x20000573
 8001cec:	20000578 	.word	0x20000578
 8001cf0:	20000576 	.word	0x20000576
			}
		}

		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8001cf4:	210c      	movs	r1, #12
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	@ 0x80
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d810      	bhi.n	8001d24 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d000      	beq.n	8001d10 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x328>
 8001d0e:	e16b      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
 8001d10:	2308      	movs	r3, #8
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	2108      	movs	r1, #8
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fa2b 	bl	8002174 <unsigned_bitwise_modulo>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d100      	bne.n	8001d24 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>
 8001d22:	e161      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001d24:	2308      	movs	r3, #8
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 fa21 	bl	8002174 <unsigned_bitwise_modulo>
 8001d32:	0003      	movs	r3, r0
 8001d34:	2b80      	cmp	r3, #128	@ 0x80
 8001d36:	d151      	bne.n	8001ddc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3f4>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001d38:	220e      	movs	r2, #14
 8001d3a:	18bb      	adds	r3, r7, r2
 8001d3c:	18ba      	adds	r2, r7, r2
 8001d3e:	8812      	ldrh	r2, [r2, #0]
 8001d40:	3a01      	subs	r2, #1
 8001d42:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001d44:	210c      	movs	r1, #12
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	187a      	adds	r2, r7, r1
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	3201      	adds	r2, #1
 8001d4e:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001d50:	000c      	movs	r4, r1
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fa0b 	bl	8002174 <unsigned_bitwise_modulo>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d11d      	bne.n	8001d9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b6>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	193a      	adds	r2, r7, r4
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	0852      	lsrs	r2, r2, #1
 8001d6a:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x39c>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d76:	1d7b      	adds	r3, r7, #5
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001d7c:	4bc6      	ldr	r3, [pc, #792]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e131      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d000      	beq.n	8001d90 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a8>
 8001d8e:	e12b      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d90:	1d7b      	adds	r3, r7, #5
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d96:	4bc0      	ldr	r3, [pc, #768]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e124      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d9e:	220c      	movs	r2, #12
 8001da0:	18bb      	adds	r3, r7, r2
 8001da2:	18ba      	adds	r2, r7, r2
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	0852      	lsrs	r2, r2, #1
 8001da8:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3da>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001db4:	1d7b      	adds	r3, r7, #5
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001dba:	4bb7      	ldr	r3, [pc, #732]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e112      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d000      	beq.n	8001dce <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3e6>
 8001dcc:	e10c      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001dce:	1d7b      	adds	r3, r7, #5
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001dd4:	4bb0      	ldr	r3, [pc, #704]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e105      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001ddc:	2308      	movs	r3, #8
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	2108      	movs	r1, #8
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f9c5 	bl	8002174 <unsigned_bitwise_modulo>
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d14a      	bne.n	8001e84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x49c>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8001dee:	220e      	movs	r2, #14
 8001df0:	18bb      	adds	r3, r7, r2
 8001df2:	18ba      	adds	r2, r7, r2
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001df8:	240c      	movs	r4, #12
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	2101      	movs	r1, #1
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 f9b7 	bl	8002174 <unsigned_bitwise_modulo>
 8001e06:	1e03      	subs	r3, r0, #0
 8001e08:	d11d      	bne.n	8001e46 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x45e>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	193a      	adds	r2, r7, r4
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	0852      	lsrs	r2, r2, #1
 8001e12:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x444>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e1e:	1d7b      	adds	r3, r7, #5
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001e24:	4b9c      	ldr	r3, [pc, #624]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e0dd      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d000      	beq.n	8001e38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x450>
 8001e36:	e0d7      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e38:	1d7b      	adds	r3, r7, #5
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001e3e:	4b96      	ldr	r3, [pc, #600]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e0d0      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001e46:	220c      	movs	r2, #12
 8001e48:	18bb      	adds	r3, r7, r2
 8001e4a:	18ba      	adds	r2, r7, r2
 8001e4c:	8812      	ldrh	r2, [r2, #0]
 8001e4e:	0852      	lsrs	r2, r2, #1
 8001e50:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x482>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e5c:	1d7b      	adds	r3, r7, #5
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001e62:	4b8d      	ldr	r3, [pc, #564]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e0be      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d000      	beq.n	8001e76 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x48e>
 8001e74:	e0b8      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001e76:	1d7b      	adds	r3, r7, #5
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001e7c:	4b86      	ldr	r3, [pc, #536]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e0b1      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001e84:	2308      	movs	r3, #8
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2108      	movs	r1, #8
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f971 	bl	8002174 <unsigned_bitwise_modulo>
 8001e92:	0003      	movs	r3, r0
 8001e94:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e96:	d84d      	bhi.n	8001f34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x54c>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8001e98:	220e      	movs	r2, #14
 8001e9a:	18bb      	adds	r3, r7, r2
 8001e9c:	18ba      	adds	r2, r7, r2
 8001e9e:	8812      	ldrh	r2, [r2, #0]
 8001ea0:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001ea2:	240c      	movs	r4, #12
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	193a      	adds	r2, r7, r4
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f95e 	bl	8002174 <unsigned_bitwise_modulo>
 8001eb8:	1e03      	subs	r3, r0, #0
 8001eba:	d11d      	bne.n	8001ef8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x510>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	193a      	adds	r2, r7, r4
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	0852      	lsrs	r2, r2, #1
 8001ec4:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4f6>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001ed0:	1d7b      	adds	r3, r7, #5
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001ed6:	4b70      	ldr	r3, [pc, #448]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e084      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d000      	beq.n	8001eea <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x502>
 8001ee8:	e07e      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001eea:	1d7b      	adds	r3, r7, #5
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001ef0:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e077      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001ef8:	220c      	movs	r2, #12
 8001efa:	18bb      	adds	r3, r7, r2
 8001efc:	18ba      	adds	r2, r7, r2
 8001efe:	8812      	ldrh	r2, [r2, #0]
 8001f00:	0852      	lsrs	r2, r2, #1
 8001f02:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x534>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001f0e:	1d7b      	adds	r3, r7, #5
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001f14:	4b60      	ldr	r3, [pc, #384]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e065      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d160      	bne.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001f26:	1d7b      	adds	r3, r7, #5
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e059      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001f34:	2308      	movs	r3, #8
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 f919 	bl	8002174 <unsigned_bitwise_modulo>
 8001f42:	0003      	movs	r3, r0
 8001f44:	2b80      	cmp	r3, #128	@ 0x80
 8001f46:	d94f      	bls.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001f48:	220e      	movs	r2, #14
 8001f4a:	18bb      	adds	r3, r7, r2
 8001f4c:	18ba      	adds	r2, r7, r2
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	3a01      	subs	r2, #1
 8001f52:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001f54:	240c      	movs	r4, #12
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	193a      	adds	r2, r7, r4
 8001f5a:	8812      	ldrh	r2, [r2, #0]
 8001f5c:	3201      	adds	r2, #1
 8001f5e:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001f60:	193b      	adds	r3, r7, r4
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 f904 	bl	8002174 <unsigned_bitwise_modulo>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d11c      	bne.n	8001faa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c2>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001f70:	193b      	adds	r3, r7, r4
 8001f72:	193a      	adds	r2, r7, r4
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	0852      	lsrs	r2, r2, #1
 8001f78:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5aa>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001f84:	1d7b      	adds	r3, r7, #5
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001f8a:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e02a      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d125      	bne.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001f9c:	1d7b      	adds	r3, r7, #5
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e01e      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001faa:	220c      	movs	r2, #12
 8001fac:	18bb      	adds	r3, r7, r2
 8001fae:	18ba      	adds	r2, r7, r2
 8001fb0:	8812      	ldrh	r2, [r2, #0]
 8001fb2:	0852      	lsrs	r2, r2, #1
 8001fb4:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5e6>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001fc0:	1d7b      	adds	r3, r7, #5
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e00c      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001fd8:	1d7b      	adds	r3, r7, #5
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e000      	b.n	8001fe8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001fe6:	46c0      	nop			@ (mov r8, r8)
		}

	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	if(symmetry_type_for_halfcycle == SHORTEN){
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d158      	bne.n	80020a4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6bc>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001ff2:	1d7b      	adds	r3, r7, #5
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x628>

			TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001ffc:	230e      	movs	r3, #14
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	0052      	lsls	r2, r2, #1
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	e09f      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8002010:	1d7b      	adds	r3, r7, #5
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d11b      	bne.n	8002052 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x66a>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b8>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	2101      	movs	r1, #1
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f8a6 	bl	8002174 <unsigned_bitwise_modulo>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d109      	bne.n	8002040 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 800202c:	230e      	movs	r3, #14
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	2280      	movs	r2, #128	@ 0x80
 8002034:	0052      	lsls	r2, r2, #1
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	e087      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten - 1;
 8002040:	230e      	movs	r3, #14
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	22ff      	movs	r2, #255	@ 0xff
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e07e      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8002052:	1d7b      	adds	r3, r7, #5
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d000      	beq.n	800205e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x676>
 800205c:	e078      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b8>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	2101      	movs	r1, #1
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f884 	bl	8002174 <unsigned_bitwise_modulo>
 800206c:	1e03      	subs	r3, r0, #0
 800206e:	d109      	bne.n	8002084 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x69c>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8002070:	230e      	movs	r3, #14
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2280      	movs	r2, #128	@ 0x80
 8002078:	0052      	lsls	r2, r2, #1
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e065      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8002084:	230e      	movs	r3, #14
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	32ff      	adds	r2, #255	@ 0xff
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b02      	ldr	r3, [pc, #8]	@ (800209c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e05b      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
 8002098:	20000576 	.word	0x20000576
 800209c:	20000574 	.word	0x20000574
 80020a0:	20000570 	.word	0x20000570
			}
		}
	}
	else if(symmetry_type_for_halfcycle == LENGTHEN){
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d150      	bne.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80020ae:	1d7b      	adds	r3, r7, #5
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6e4>

			TIM16_final_start_value = 256 - manipulated_period_lengthen;
 80020b8:	230c      	movs	r3, #12
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	e041      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80020cc:	1d7b      	adds	r3, r7, #5
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d11b      	bne.n	800210e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x726>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 80020d6:	4b25      	ldr	r3, [pc, #148]	@ (800216c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x784>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2101      	movs	r1, #1
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 f848 	bl	8002174 <unsigned_bitwise_modulo>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d109      	bne.n	80020fc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x714>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 80020e8:	230c      	movs	r3, #12
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	2280      	movs	r2, #128	@ 0x80
 80020f0:	0052      	lsls	r2, r2, #1
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	e029      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen - 1;
 80020fc:	230c      	movs	r3, #12
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	22ff      	movs	r2, #255	@ 0xff
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 800210a:	801a      	strh	r2, [r3, #0]
 800210c:	e020      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 800210e:	1d7b      	adds	r3, r7, #5
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d11b      	bne.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x784>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	2101      	movs	r1, #1
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f827 	bl	8002174 <unsigned_bitwise_modulo>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d109      	bne.n	800213e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x756>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 800212a:	230c      	movs	r3, #12
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2280      	movs	r2, #128	@ 0x80
 8002132:	0052      	lsls	r2, r2, #1
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 800213a:	801a      	strh	r2, [r3, #0]
 800213c:	e008      	b.n	8002150 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 800213e:	230c      	movs	r3, #12
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	32ff      	adds	r2, #255	@ 0xff
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 800214e:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
 8002150:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x788>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	0018      	movs	r0, r3
 8002158:	f7ff fc22 	bl	80019a0 <Adjust_TIM16_Prescaler>
        TIM16_final_start_value = TIM16_raw_start_value;
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
    #endif

    return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bdb0      	pop	{r4, r5, r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	20000574 	.word	0x20000574
 800216c:	20000570 	.word	0x20000570
 8002170:	20000576 	.word	0x20000576

08002174 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	000a      	movs	r2, r1
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8002182:	1cfb      	adds	r3, r7, #3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	409a      	lsls	r2, r3
 800218a:	0013      	movs	r3, r2
 800218c:	3b01      	subs	r3, #1
 800218e:	001a      	movs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4013      	ands	r3, r2
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	46c0      	nop			@ (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a8:	480d      	ldr	r0, [pc, #52]	@ (80021e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021ac:	f7ff fff6 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b0:	480c      	ldr	r0, [pc, #48]	@ (80021e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021b2:	490d      	ldr	r1, [pc, #52]	@ (80021e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <LoopForever+0xe>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c8:	4c0a      	ldr	r4, [pc, #40]	@ (80021f4 <LoopForever+0x16>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021d6:	f004 ff39 	bl	800704c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021da:	f7ff f89f 	bl	800131c <main>

080021de <LoopForever>:

LoopForever:
  b LoopForever
 80021de:	e7fe      	b.n	80021de <LoopForever>
  ldr   r0, =_estack
 80021e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021ec:	08007abc 	.word	0x08007abc
  ldr r2, =_sbss
 80021f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021f4:	20000594 	.word	0x20000594

080021f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC1_IRQHandler>
	...

080021fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_Init+0x3c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_Init+0x3c>)
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	0049      	lsls	r1, r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f810 	bl	800223c <HAL_InitTick>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d003      	beq.n	8002228 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e001      	b.n	800222c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff f92c 	bl	8001484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40022000 	.word	0x40022000

0800223c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002244:	230f      	movs	r3, #15
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_InitTick+0x88>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02b      	beq.n	80022ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002254:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <HAL_InitTick+0x8c>)
 8002256:	681c      	ldr	r4, [r3, #0]
 8002258:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_InitTick+0x88>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	0019      	movs	r1, r3
 800225e:	23fa      	movs	r3, #250	@ 0xfa
 8002260:	0098      	lsls	r0, r3, #2
 8002262:	f7fd ff4f 	bl	8000104 <__udivsi3>
 8002266:	0003      	movs	r3, r0
 8002268:	0019      	movs	r1, r3
 800226a:	0020      	movs	r0, r4
 800226c:	f7fd ff4a 	bl	8000104 <__udivsi3>
 8002270:	0003      	movs	r3, r0
 8002272:	0018      	movs	r0, r3
 8002274:	f001 f97d 	bl	8003572 <HAL_SYSTICK_Config>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d112      	bne.n	80022a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d80a      	bhi.n	8002298 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	2301      	movs	r3, #1
 8002286:	425b      	negs	r3, r3
 8002288:	2200      	movs	r2, #0
 800228a:	0018      	movs	r0, r3
 800228c:	f001 f94c 	bl	8003528 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_InitTick+0x90>)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e00d      	b.n	80022b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002298:	230f      	movs	r3, #15
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e008      	b.n	80022b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e003      	b.n	80022b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022ac:	230f      	movs	r3, #15
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b005      	add	sp, #20
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_IncTick+0x1c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	001a      	movs	r2, r3
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_IncTick+0x20>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	18d2      	adds	r2, r2, r3
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <HAL_IncTick+0x20>)
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000590 	.word	0x20000590

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b02      	ldr	r3, [pc, #8]	@ (8002304 <HAL_GetTick+0x10>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	20000590 	.word	0x20000590

08002308 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a05      	ldr	r2, [pc, #20]	@ (800232c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002318:	401a      	ands	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	fe3fffff 	.word	0xfe3fffff

08002330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	23e0      	movs	r3, #224	@ 0xe0
 800233e:	045b      	lsls	r3, r3, #17
 8002340:	4013      	ands	r3, r2
}
 8002342:	0018      	movs	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	b002      	add	sp, #8
 8002348:	bd80      	pop	{r7, pc}

0800234a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	2104      	movs	r1, #4
 800235e:	400a      	ands	r2, r1
 8002360:	2107      	movs	r1, #7
 8002362:	4091      	lsls	r1, r2
 8002364:	000a      	movs	r2, r1
 8002366:	43d2      	mvns	r2, r2
 8002368:	401a      	ands	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2104      	movs	r1, #4
 800236e:	400b      	ands	r3, r1
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4099      	lsls	r1, r3
 8002374:	000b      	movs	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bd80      	pop	{r7, pc}

08002384 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	2104      	movs	r1, #4
 8002396:	400a      	ands	r2, r1
 8002398:	2107      	movs	r1, #7
 800239a:	4091      	lsls	r1, r2
 800239c:	000a      	movs	r2, r1
 800239e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2104      	movs	r1, #4
 80023a4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023a6:	40da      	lsrs	r2, r3
 80023a8:	0013      	movs	r3, r2
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	23c0      	movs	r3, #192	@ 0xc0
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4013      	ands	r3, r2
 80023c4:	d101      	bne.n	80023ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	211f      	movs	r1, #31
 80023e8:	400a      	ands	r2, r1
 80023ea:	210f      	movs	r1, #15
 80023ec:	4091      	lsls	r1, r2
 80023ee:	000a      	movs	r2, r1
 80023f0:	43d2      	mvns	r2, r2
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	210f      	movs	r1, #15
 80023fa:	4019      	ands	r1, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	201f      	movs	r0, #31
 8002400:	4003      	ands	r3, r0
 8002402:	4099      	lsls	r1, r3
 8002404:	000b      	movs	r3, r1
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}

08002414 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	035b      	lsls	r3, r3, #13
 8002426:	0b5b      	lsrs	r3, r3, #13
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}

08002436 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	0352      	lsls	r2, r2, #13
 8002448:	0b52      	lsrs	r2, r2, #13
 800244a:	43d2      	mvns	r2, r2
 800244c:	401a      	ands	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	0212      	lsls	r2, r2, #8
 8002470:	43d2      	mvns	r2, r2
 8002472:	401a      	ands	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	400b      	ands	r3, r1
 800247c:	4904      	ldr	r1, [pc, #16]	@ (8002490 <LL_ADC_SetChannelSamplingTime+0x34>)
 800247e:	400b      	ands	r3, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	07ffff00 	.word	0x07ffff00

08002494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	2280      	movs	r2, #128	@ 0x80
 80024a6:	0552      	lsls	r2, r2, #21
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	6fffffe8 	.word	0x6fffffe8

080024bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	055b      	lsls	r3, r3, #21
 80024cc:	401a      	ands	r2, r3
 80024ce:	2380      	movs	r3, #128	@ 0x80
 80024d0:	055b      	lsls	r3, r3, #21
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d101      	bne.n	80024da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <LL_ADC_Enable+0x20>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	2201      	movs	r2, #1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024fc:	46c0      	nop			@ (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	7fffffe8 	.word	0x7fffffe8

08002508 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <LL_ADC_Disable+0x20>)
 8002516:	4013      	ands	r3, r2
 8002518:	2202      	movs	r2, #2
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}
 8002528:	7fffffe8 	.word	0x7fffffe8

0800252c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <LL_ADC_IsEnabled+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_IsEnabled+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}

0800254e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d101      	bne.n	8002566 <LL_ADC_IsDisableOngoing+0x18>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_IsDisableOngoing+0x1a>
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <LL_ADC_REG_StartConversion+0x20>)
 800257e:	4013      	ands	r3, r2
 8002580:	2204      	movs	r2, #4
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	7fffffe8 	.word	0x7fffffe8

08002594 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <LL_ADC_REG_StopConversion+0x20>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	2210      	movs	r2, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	7fffffe8 	.word	0x7fffffe8

080025b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2204      	movs	r2, #4
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e19f      	b.n	8002942 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12a      	bne.n	8002660 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4acf      	ldr	r2, [pc, #828]	@ (800294c <HAL_ADC_Init+0x370>)
 800260e:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4acf      	ldr	r2, [pc, #828]	@ (8002950 <HAL_ADC_Init+0x374>)
 8002614:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4ace      	ldr	r2, [pc, #824]	@ (8002954 <HAL_ADC_Init+0x378>)
 800261a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4ace      	ldr	r2, [pc, #824]	@ (8002958 <HAL_ADC_Init+0x37c>)
 8002620:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4acd      	ldr	r2, [pc, #820]	@ (800295c <HAL_ADC_Init+0x380>)
 8002626:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4acd      	ldr	r2, [pc, #820]	@ (8002960 <HAL_ADC_Init+0x384>)
 800262c:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4acc      	ldr	r2, [pc, #816]	@ (8002964 <HAL_ADC_Init+0x388>)
 8002632:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2280      	movs	r2, #128	@ 0x80
 8002638:	589b      	ldr	r3, [r3, r2]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	4ac9      	ldr	r2, [pc, #804]	@ (8002968 <HAL_ADC_Init+0x38c>)
 8002644:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	0010      	movs	r0, r2
 8002650:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2254      	movs	r2, #84	@ 0x54
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ff29 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d115      	bne.n	800269a <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff ff0e 	bl	8002494 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002678:	4bbc      	ldr	r3, [pc, #752]	@ (800296c <HAL_ADC_Init+0x390>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	49bc      	ldr	r1, [pc, #752]	@ (8002970 <HAL_ADC_Init+0x394>)
 800267e:	0018      	movs	r0, r3
 8002680:	f7fd fd40 	bl	8000104 <__udivsi3>
 8002684:	0003      	movs	r3, r0
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800268c:	e002      	b.n	8002694 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3b01      	subs	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff0c 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80026a4:	1e03      	subs	r3, r0, #0
 80026a6:	d10f      	bne.n	80026c8 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	2210      	movs	r2, #16
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	2201      	movs	r2, #1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026c0:	231f      	movs	r3, #31
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff ff73 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80026d2:	0003      	movs	r3, r0
 80026d4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	2210      	movs	r2, #16
 80026dc:	4013      	ands	r3, r2
 80026de:	d000      	beq.n	80026e2 <HAL_ADC_Init+0x106>
 80026e0:	e122      	b.n	8002928 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d000      	beq.n	80026ea <HAL_ADC_Init+0x10e>
 80026e8:	e11e      	b.n	8002928 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	4aa1      	ldr	r2, [pc, #644]	@ (8002974 <HAL_ADC_Init+0x398>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	2202      	movs	r2, #2
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff ff14 	bl	800252c <LL_ADC_IsEnabled>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d000      	beq.n	800270a <HAL_ADC_Init+0x12e>
 8002708:	e0ad      	b.n	8002866 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7e1b      	ldrb	r3, [r3, #24]
 8002712:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002714:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7e5b      	ldrb	r3, [r3, #25]
 800271a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800271c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e9b      	ldrb	r3, [r3, #26]
 8002722:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002724:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_ADC_Init+0x158>
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	015b      	lsls	r3, r3, #5
 8002732:	e000      	b.n	8002736 <HAL_ADC_Init+0x15a>
 8002734:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002736:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800273c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da04      	bge.n	8002750 <HAL_ADC_Init+0x174>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	e001      	b.n	8002754 <HAL_ADC_Init+0x178>
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002754:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	212c      	movs	r1, #44	@ 0x2c
 800275a:	5c5b      	ldrb	r3, [r3, r1]
 800275c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800275e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d115      	bne.n	800279c <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e9b      	ldrb	r3, [r3, #26]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2280      	movs	r2, #128	@ 0x80
 800277c:	0252      	lsls	r2, r2, #9
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e00b      	b.n	800279c <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	2220      	movs	r2, #32
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	2201      	movs	r2, #1
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027a8:	23e0      	movs	r3, #224	@ 0xe0
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80027b2:	4313      	orrs	r3, r2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002978 <HAL_ADC_Init+0x39c>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0f9b      	lsrs	r3, r3, #30
 80027d6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027dc:	4313      	orrs	r3, r2
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	223c      	movs	r2, #60	@ 0x3c
 80027e8:	5c9b      	ldrb	r3, [r3, r2]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d111      	bne.n	8002812 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0f9b      	lsrs	r3, r3, #30
 80027f4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027fa:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002800:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002806:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	2201      	movs	r2, #1
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4a58      	ldr	r2, [pc, #352]	@ (800297c <HAL_ADC_Init+0x3a0>)
 800281a:	4013      	ands	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	430a      	orrs	r2, r1
 8002826:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	23c0      	movs	r3, #192	@ 0xc0
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	429a      	cmp	r2, r3
 8002832:	d018      	beq.n	8002866 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	05db      	lsls	r3, r3, #23
 800283c:	429a      	cmp	r2, r3
 800283e:	d012      	beq.n	8002866 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	061b      	lsls	r3, r3, #24
 8002848:	429a      	cmp	r2, r3
 800284a:	d00c      	beq.n	8002866 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800284c:	4b4c      	ldr	r3, [pc, #304]	@ (8002980 <HAL_ADC_Init+0x3a4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4c      	ldr	r2, [pc, #304]	@ (8002984 <HAL_ADC_Init+0x3a8>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	23f0      	movs	r3, #240	@ 0xf0
 800285c:	039b      	lsls	r3, r3, #14
 800285e:	401a      	ands	r2, r3
 8002860:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_ADC_Init+0x3a4>)
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286e:	001a      	movs	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	f7ff fd6a 	bl	800234a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	4942      	ldr	r1, [pc, #264]	@ (8002988 <HAL_ADC_Init+0x3ac>)
 8002880:	001a      	movs	r2, r3
 8002882:	f7ff fd62 	bl	800234a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2110      	movs	r1, #16
 800289a:	4249      	negs	r1, r1
 800289c:	430a      	orrs	r2, r1
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
 80028a0:	e018      	b.n	80028d4 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	039b      	lsls	r3, r3, #14
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d112      	bne.n	80028d4 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	221c      	movs	r2, #28
 80028be:	4013      	ands	r3, r2
 80028c0:	2210      	movs	r2, #16
 80028c2:	4252      	negs	r2, r2
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0011      	movs	r1, r2
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f7ff fd52 	bl	8002384 <LL_ADC_GetSamplingTimeCommonChannels>
 80028e0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10b      	bne.n	8002902 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	2203      	movs	r2, #3
 80028f6:	4393      	bics	r3, r2
 80028f8:	2201      	movs	r2, #1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002900:	e01c      	b.n	800293c <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	2212      	movs	r2, #18
 8002908:	4393      	bics	r3, r2
 800290a:	2210      	movs	r2, #16
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002916:	2201      	movs	r2, #1
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800291e:	231f      	movs	r3, #31
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002926:	e009      	b.n	800293c <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292c:	2210      	movs	r2, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002934:	231f      	movs	r3, #31
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800293c:	231f      	movs	r3, #31
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	781b      	ldrb	r3, [r3, #0]
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b008      	add	sp, #32
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	08002d63 	.word	0x08002d63
 8002950:	08002d73 	.word	0x08002d73
 8002954:	08002d83 	.word	0x08002d83
 8002958:	08002d93 	.word	0x08002d93
 800295c:	080033a1 	.word	0x080033a1
 8002960:	080033b1 	.word	0x080033b1
 8002964:	080033c1 	.word	0x080033c1
 8002968:	080014cd 	.word	0x080014cd
 800296c:	20000000 	.word	0x20000000
 8002970:	00030d40 	.word	0x00030d40
 8002974:	fffffefd 	.word	0xfffffefd
 8002978:	ffde0201 	.word	0xffde0201
 800297c:	1ffffc02 	.word	0x1ffffc02
 8002980:	40012708 	.word	0x40012708
 8002984:	ffc3ffff 	.word	0xffc3ffff
 8002988:	07ffff04 	.word	0x07ffff04

0800298c <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	230b      	movs	r3, #11
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	1c0a      	adds	r2, r1, #0
 800299c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2317      	movs	r3, #23
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	2210      	movs	r2, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e06d      	b.n	8002a98 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	d03a      	beq.n	8002a3c <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 80029c6:	230b      	movs	r3, #11
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b0a      	cmp	r3, #10
 80029ce:	d82a      	bhi.n	8002a26 <HAL_ADC_RegisterCallback+0x9a>
 80029d0:	009a      	lsls	r2, r3, #2
 80029d2:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <HAL_ADC_RegisterCallback+0x114>)
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80029e0:	e057      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80029e8:	e053      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80029f0:	e04f      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80029f8:	e04b      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8002a00:	e047      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8002a08:	e043      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8002a10:	e03f      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2180      	movs	r1, #128	@ 0x80
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	505a      	str	r2, [r3, r1]
        break;
 8002a1a:	e03a      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2184      	movs	r1, #132	@ 0x84
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	505a      	str	r2, [r3, r1]
        break;
 8002a24:	e035      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
        break;
 8002a3a:	e02a      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11c      	bne.n	8002a7e <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8002a44:	230b      	movs	r3, #11
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	d002      	beq.n	8002a54 <HAL_ADC_RegisterCallback+0xc8>
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d005      	beq.n	8002a5e <HAL_ADC_RegisterCallback+0xd2>
 8002a52:	e009      	b.n	8002a68 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2180      	movs	r1, #128	@ 0x80
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	505a      	str	r2, [r3, r1]
        break;
 8002a5c:	e019      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2184      	movs	r1, #132	@ 0x84
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	505a      	str	r2, [r3, r1]
        break;
 8002a66:	e014      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8002a74:	2317      	movs	r3, #23
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
        break;
 8002a7c:	e009      	b.n	8002a92 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	2210      	movs	r2, #16
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8002a8a:	2317      	movs	r3, #23
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002a92:	2317      	movs	r3, #23
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b006      	add	sp, #24
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	08007918 	.word	0x08007918

08002aa4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b5b0      	push	{r4, r5, r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff fd81 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d135      	bne.n	8002b26 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2254      	movs	r2, #84	@ 0x54
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_Start+0x24>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e035      	b.n	8002b34 <HAL_ADC_Start+0x90>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2254      	movs	r2, #84	@ 0x54
 8002acc:	2101      	movs	r1, #1
 8002ace:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ad0:	250f      	movs	r5, #15
 8002ad2:	197c      	adds	r4, r7, r5
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 fb7e 	bl	80031d8 <ADC_Enable>
 8002adc:	0003      	movs	r3, r0
 8002ade:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d119      	bne.n	8002b1c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	4a13      	ldr	r2, [pc, #76]	@ (8002b3c <HAL_ADC_Start+0x98>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	0052      	lsls	r2, r2, #1
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	221c      	movs	r2, #28
 8002b06:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2254      	movs	r2, #84	@ 0x54
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7ff fd2b 	bl	8002570 <LL_ADC_REG_StartConversion>
 8002b1a:	e008      	b.n	8002b2e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2254      	movs	r2, #84	@ 0x54
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b26:	230f      	movs	r3, #15
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b2e:	230f      	movs	r3, #15
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	781b      	ldrb	r3, [r3, #0]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	fffff0fe 	.word	0xfffff0fe

08002b40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d102      	bne.n	8002b58 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002b52:	2308      	movs	r3, #8
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e00f      	b.n	8002b78 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	d007      	beq.n	8002b74 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	2220      	movs	r2, #32
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e072      	b.n	8002c5a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002b74:	2304      	movs	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b78:	f7ff fbbc 	bl	80022f4 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b80:	e01f      	b.n	8002bc2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	d01c      	beq.n	8002bc2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b88:	f7ff fbb4 	bl	80022f4 <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <HAL_ADC_PollForConversion+0x5e>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d111      	bne.n	8002bc2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	2204      	movs	r2, #4
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2254      	movs	r2, #84	@ 0x54
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04b      	b.n	8002c5a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0d9      	beq.n	8002b82 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7ff fbe6 	bl	80023b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d02e      	beq.n	8002c48 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7e9b      	ldrb	r3, [r3, #26]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d123      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff fcd7 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002c0a:	1e03      	subs	r3, r0, #0
 8002c0c:	d110      	bne.n	8002c30 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	210c      	movs	r1, #12
 8002c1a:	438a      	bics	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <HAL_ADC_PollForConversion+0x124>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	2201      	movs	r2, #1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c2e:	e00b      	b.n	8002c48 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	2220      	movs	r2, #32
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	2201      	movs	r2, #1
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	220c      	movs	r2, #12
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	fffffefe 	.word	0xfffffefe

08002c68 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2254      	movs	r2, #84	@ 0x54
 8002c74:	5c9b      	ldrb	r3, [r3, r2]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Stop_DMA+0x16>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e05f      	b.n	8002d3e <HAL_ADC_Stop_DMA+0xd6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2254      	movs	r2, #84	@ 0x54
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c86:	250f      	movs	r5, #15
 8002c88:	197c      	adds	r4, r7, r5
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 fa61 	bl	8003154 <ADC_ConversionStop>
 8002c92:	0003      	movs	r3, r0
 8002c94:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c96:	0029      	movs	r1, r5
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d147      	bne.n	8002d30 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca4:	2225      	movs	r2, #37	@ 0x25
 8002ca6:	5c9b      	ldrb	r3, [r3, r2]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d112      	bne.n	8002cd4 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	000d      	movs	r5, r1
 8002cb4:	187c      	adds	r4, r7, r1
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 fcf2 	bl	80036a0 <HAL_DMA_Abort>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002cc0:	197b      	adds	r3, r7, r5
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	2240      	movs	r2, #64	@ 0x40
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2110      	movs	r1, #16
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	18bb      	adds	r3, r7, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002cee:	18bc      	adds	r4, r7, r2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 faf6 	bl	80032e4 <ADC_Disable>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	7023      	strb	r3, [r4, #0]
 8002cfc:	e003      	b.n	8002d06 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 faef 	bl	80032e4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d06:	230f      	movs	r3, #15
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <HAL_ADC_Stop_DMA+0xe0>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	2201      	movs	r2, #1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2254      	movs	r2, #84	@ 0x54
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	fffffefe 	.word	0xfffffefe

08002d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dae:	2317      	movs	r3, #23
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2254      	movs	r2, #84	@ 0x54
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e1c0      	b.n	800314a <HAL_ADC_ConfigChannel+0x3a6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2254      	movs	r2, #84	@ 0x54
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff fbef 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d000      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x3c>
 8002dde:	e1a3      	b.n	8003128 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d100      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x46>
 8002de8:	e143      	b.n	8003072 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dfa:	4ac1      	ldr	r2, [pc, #772]	@ (8003100 <HAL_ADC_ConfigChannel+0x35c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d108      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	f7ff fb02 	bl	8002414 <LL_ADC_REG_SetSequencerChAdd>
 8002e10:	e0c9      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	211f      	movs	r1, #31
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	210f      	movs	r1, #15
 8002e20:	4099      	lsls	r1, r3
 8002e22:	000b      	movs	r3, r1
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	035b      	lsls	r3, r3, #13
 8002e30:	0b5b      	lsrs	r3, r3, #13
 8002e32:	d105      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x9c>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	221f      	movs	r2, #31
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	e098      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4013      	ands	r3, r2
 8002e48:	d000      	beq.n	8002e4c <HAL_ADC_ConfigChannel+0xa8>
 8002e4a:	e091      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1cc>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d000      	beq.n	8002e58 <HAL_ADC_ConfigChannel+0xb4>
 8002e56:	e089      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x1c8>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d000      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0xc0>
 8002e62:	e081      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1c4>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2208      	movs	r2, #8
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d000      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0xcc>
 8002e6e:	e079      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1c0>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2210      	movs	r2, #16
 8002e76:	4013      	ands	r3, r2
 8002e78:	d000      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0xd8>
 8002e7a:	e071      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x1bc>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2220      	movs	r2, #32
 8002e82:	4013      	ands	r3, r2
 8002e84:	d000      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0xe4>
 8002e86:	e069      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1b8>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2240      	movs	r2, #64	@ 0x40
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d000      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0xf0>
 8002e92:	e061      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x1b4>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d000      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0xfc>
 8002e9e:	e059      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x1b0>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d151      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1ac>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d149      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1a8>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	@ 0x80
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d141      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x1a4>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d139      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1a0>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d131      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x19c>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d129      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x198>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	01db      	lsls	r3, r3, #7
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d121      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x194>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	4013      	ands	r3, r2
 8002efe:	d119      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x190>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	025b      	lsls	r3, r3, #9
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d111      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x18c>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	4013      	ands	r3, r2
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x188>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	02db      	lsls	r3, r3, #11
 8002f20:	4013      	ands	r3, r2
 8002f22:	d001      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x184>
 8002f24:	2312      	movs	r3, #18
 8002f26:	e024      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e022      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f2c:	2311      	movs	r3, #17
 8002f2e:	e020      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f30:	2310      	movs	r3, #16
 8002f32:	e01e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f34:	230f      	movs	r3, #15
 8002f36:	e01c      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f38:	230e      	movs	r3, #14
 8002f3a:	e01a      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f3c:	230d      	movs	r3, #13
 8002f3e:	e018      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f40:	230c      	movs	r3, #12
 8002f42:	e016      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f44:	230b      	movs	r3, #11
 8002f46:	e014      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f48:	230a      	movs	r3, #10
 8002f4a:	e012      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f4c:	2309      	movs	r3, #9
 8002f4e:	e010      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f50:	2308      	movs	r3, #8
 8002f52:	e00e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f54:	2307      	movs	r3, #7
 8002f56:	e00c      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f58:	2306      	movs	r3, #6
 8002f5a:	e00a      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	e008      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e006      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f64:	2303      	movs	r3, #3
 8002f66:	e004      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e002      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1ce>
 8002f70:	2300      	movs	r3, #0
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	6852      	ldr	r2, [r2, #4]
 8002f76:	201f      	movs	r0, #31
 8002f78:	4002      	ands	r2, r0
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	000a      	movs	r2, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d808      	bhi.n	8002fa6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	f7ff fa17 	bl	80023d4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	f7ff fa52 	bl	800245c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db00      	blt.n	8002fc2 <HAL_ADC_ConfigChannel+0x21e>
 8002fc0:	e0bc      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fc2:	4b50      	ldr	r3, [pc, #320]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff f9b3 	bl	8002330 <LL_ADC_GetCommonPathInternalCh>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4d      	ldr	r2, [pc, #308]	@ (8003108 <HAL_ADC_ConfigChannel+0x364>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d122      	bne.n	800301e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fe0:	d11d      	bne.n	800301e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	0412      	lsls	r2, r2, #16
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	4a46      	ldr	r2, [pc, #280]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 8002fec:	0019      	movs	r1, r3
 8002fee:	0010      	movs	r0, r2
 8002ff0:	f7ff f98a 	bl	8002308 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff4:	4b45      	ldr	r3, [pc, #276]	@ (800310c <HAL_ADC_ConfigChannel+0x368>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4945      	ldr	r1, [pc, #276]	@ (8003110 <HAL_ADC_ConfigChannel+0x36c>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7fd f882 	bl	8000104 <__udivsi3>
 8003000:	0003      	movs	r3, r0
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	0013      	movs	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	189b      	adds	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800300e:	e002      	b.n	8003016 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3b01      	subs	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f9      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800301c:	e08e      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3c      	ldr	r2, [pc, #240]	@ (8003114 <HAL_ADC_ConfigChannel+0x370>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10e      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	045b      	lsls	r3, r3, #17
 800302e:	4013      	ands	r3, r2
 8003030:	d109      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	0452      	lsls	r2, r2, #17
 8003038:	4313      	orrs	r3, r2
 800303a:	4a32      	ldr	r2, [pc, #200]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 800303c:	0019      	movs	r1, r3
 800303e:	0010      	movs	r0, r2
 8003040:	f7ff f962 	bl	8002308 <LL_ADC_SetCommonPathInternalCh>
 8003044:	e07a      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a33      	ldr	r2, [pc, #204]	@ (8003118 <HAL_ADC_ConfigChannel+0x374>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d000      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x2ae>
 8003050:	e074      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	03db      	lsls	r3, r3, #15
 8003058:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800305a:	d000      	beq.n	800305e <HAL_ADC_ConfigChannel+0x2ba>
 800305c:	e06e      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2280      	movs	r2, #128	@ 0x80
 8003062:	03d2      	lsls	r2, r2, #15
 8003064:	4313      	orrs	r3, r2
 8003066:	4a27      	ldr	r2, [pc, #156]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 8003068:	0019      	movs	r1, r3
 800306a:	0010      	movs	r0, r2
 800306c:	f7ff f94c 	bl	8002308 <LL_ADC_SetCommonPathInternalCh>
 8003070:	e064      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	429a      	cmp	r2, r3
 800307c:	d004      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003082:	4a1f      	ldr	r2, [pc, #124]	@ (8003100 <HAL_ADC_ConfigChannel+0x35c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d107      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0019      	movs	r1, r3
 8003092:	0010      	movs	r0, r2
 8003094:	f7ff f9cf 	bl	8002436 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da4d      	bge.n	800313c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a0:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff f944 	bl	8002330 <LL_ADC_GetCommonPathInternalCh>
 80030a8:	0003      	movs	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <HAL_ADC_ConfigChannel+0x364>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d108      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4a18      	ldr	r2, [pc, #96]	@ (800311c <HAL_ADC_ConfigChannel+0x378>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f7ff f921 	bl	8002308 <LL_ADC_SetCommonPathInternalCh>
 80030c6:	e039      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a11      	ldr	r2, [pc, #68]	@ (8003114 <HAL_ADC_ConfigChannel+0x370>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <HAL_ADC_ConfigChannel+0x37c>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f7ff f913 	bl	8002308 <LL_ADC_SetCommonPathInternalCh>
 80030e2:	e02b      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <HAL_ADC_ConfigChannel+0x374>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d126      	bne.n	800313c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003124 <HAL_ADC_ConfigChannel+0x380>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	4a03      	ldr	r2, [pc, #12]	@ (8003104 <HAL_ADC_ConfigChannel+0x360>)
 80030f6:	0019      	movs	r1, r3
 80030f8:	0010      	movs	r0, r2
 80030fa:	f7ff f905 	bl	8002308 <LL_ADC_SetCommonPathInternalCh>
 80030fe:	e01d      	b.n	800313c <HAL_ADC_ConfigChannel+0x398>
 8003100:	80000004 	.word	0x80000004
 8003104:	40012708 	.word	0x40012708
 8003108:	b0001000 	.word	0xb0001000
 800310c:	20000000 	.word	0x20000000
 8003110:	00030d40 	.word	0x00030d40
 8003114:	b8004000 	.word	0xb8004000
 8003118:	b4002000 	.word	0xb4002000
 800311c:	ff7fffff 	.word	0xff7fffff
 8003120:	feffffff 	.word	0xfeffffff
 8003124:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	2220      	movs	r2, #32
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003134:	2317      	movs	r3, #23
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2254      	movs	r2, #84	@ 0x54
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003144:	2317      	movs	r3, #23
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	781b      	ldrb	r3, [r3, #0]
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b006      	add	sp, #24
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			@ (mov r8, r8)

08003154 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fa29 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d031      	beq.n	80031ce <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff f9ed 	bl	800254e <LL_ADC_IsDisableOngoing>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d104      	bne.n	8003182 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff fa09 	bl	8002594 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003182:	f7ff f8b7 	bl	80022f4 <HAL_GetTick>
 8003186:	0003      	movs	r3, r0
 8003188:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800318a:	e01a      	b.n	80031c2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800318c:	f7ff f8b2 	bl	80022f4 <HAL_GetTick>
 8003190:	0002      	movs	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d913      	bls.n	80031c2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031aa:	2210      	movs	r2, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	2201      	movs	r2, #1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e006      	b.n	80031d0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1de      	bne.n	800318c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b004      	add	sp, #16
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff f99f 	bl	800252c <LL_ADC_IsEnabled>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d000      	beq.n	80031f4 <ADC_Enable+0x1c>
 80031f2:	e069      	b.n	80032c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4a36      	ldr	r2, [pc, #216]	@ (80032d4 <ADC_Enable+0xfc>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	d00d      	beq.n	800321c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	2210      	movs	r2, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	2201      	movs	r2, #1
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e056      	b.n	80032ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff f95f 	bl	80024e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <ADC_Enable+0x100>)
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff f881 	bl	8002330 <LL_ADC_GetCommonPathInternalCh>
 800322e:	0002      	movs	r2, r0
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	4013      	ands	r3, r2
 8003236:	d00f      	beq.n	8003258 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003238:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <ADC_Enable+0x104>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4928      	ldr	r1, [pc, #160]	@ (80032e0 <ADC_Enable+0x108>)
 800323e:	0018      	movs	r0, r3
 8003240:	f7fc ff60 	bl	8000104 <__udivsi3>
 8003244:	0003      	movs	r3, r0
 8003246:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003248:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800324a:	e002      	b.n	8003252 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f9      	bne.n	800324c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7e5b      	ldrb	r3, [r3, #25]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d033      	beq.n	80032c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003260:	f7ff f848 	bl	80022f4 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003268:	e027      	b.n	80032ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0018      	movs	r0, r3
 8003270:	f7ff f95c 	bl	800252c <LL_ADC_IsEnabled>
 8003274:	1e03      	subs	r3, r0, #0
 8003276:	d104      	bne.n	8003282 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff f931 	bl	80024e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003282:	f7ff f837 	bl	80022f4 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d914      	bls.n	80032ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	2b01      	cmp	r3, #1
 800329c:	d00d      	beq.n	80032ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	2210      	movs	r2, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	2201      	movs	r2, #1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d1d0      	bne.n	800326a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	80000017 	.word	0x80000017
 80032d8:	40012708 	.word	0x40012708
 80032dc:	20000000 	.word	0x20000000
 80032e0:	00030d40 	.word	0x00030d40

080032e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff f92c 	bl	800254e <LL_ADC_IsDisableOngoing>
 80032f6:	0003      	movs	r3, r0
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff f914 	bl	800252c <LL_ADC_IsEnabled>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d046      	beq.n	8003396 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d143      	bne.n	8003396 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2205      	movs	r2, #5
 8003316:	4013      	ands	r3, r2
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10d      	bne.n	8003338 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff f8f1 	bl	8002508 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2203      	movs	r2, #3
 800332c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800332e:	f7fe ffe1 	bl	80022f4 <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003336:	e028      	b.n	800338a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	2210      	movs	r2, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	2201      	movs	r2, #1
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e021      	b.n	8003398 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003354:	f7fe ffce 	bl	80022f4 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d913      	bls.n	800338a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2201      	movs	r2, #1
 800336a:	4013      	ands	r3, r2
 800336c:	d00d      	beq.n	800338a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	2210      	movs	r2, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	2201      	movs	r2, #1
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e006      	b.n	8003398 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d1de      	bne.n	8003354 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033a8:	46c0      	nop			@ (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80033e2:	d809      	bhi.n	80033f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	001a      	movs	r2, r3
 80033ea:	231f      	movs	r3, #31
 80033ec:	401a      	ands	r2, r3
 80033ee:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <__NVIC_EnableIRQ+0x30>)
 80033f0:	2101      	movs	r1, #1
 80033f2:	4091      	lsls	r1, r2
 80033f4:	000a      	movs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	0002      	movs	r2, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b7f      	cmp	r3, #127	@ 0x7f
 8003418:	d828      	bhi.n	800346c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <__NVIC_SetPriority+0xd4>)
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	33c0      	adds	r3, #192	@ 0xc0
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	589b      	ldr	r3, [r3, r2]
 800342a:	1dfa      	adds	r2, r7, #7
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	0011      	movs	r1, r2
 8003430:	2203      	movs	r2, #3
 8003432:	400a      	ands	r2, r1
 8003434:	00d2      	lsls	r2, r2, #3
 8003436:	21ff      	movs	r1, #255	@ 0xff
 8003438:	4091      	lsls	r1, r2
 800343a:	000a      	movs	r2, r1
 800343c:	43d2      	mvns	r2, r2
 800343e:	401a      	ands	r2, r3
 8003440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	22ff      	movs	r2, #255	@ 0xff
 8003448:	401a      	ands	r2, r3
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0018      	movs	r0, r3
 8003450:	2303      	movs	r3, #3
 8003452:	4003      	ands	r3, r0
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003458:	481f      	ldr	r0, [pc, #124]	@ (80034d8 <__NVIC_SetPriority+0xd4>)
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b25b      	sxtb	r3, r3
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	430a      	orrs	r2, r1
 8003464:	33c0      	adds	r3, #192	@ 0xc0
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800346a:	e031      	b.n	80034d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <__NVIC_SetPriority+0xd8>)
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0019      	movs	r1, r3
 8003474:	230f      	movs	r3, #15
 8003476:	400b      	ands	r3, r1
 8003478:	3b08      	subs	r3, #8
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3306      	adds	r3, #6
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	3304      	adds	r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1dfa      	adds	r2, r7, #7
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	0011      	movs	r1, r2
 800348c:	2203      	movs	r2, #3
 800348e:	400a      	ands	r2, r1
 8003490:	00d2      	lsls	r2, r2, #3
 8003492:	21ff      	movs	r1, #255	@ 0xff
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	43d2      	mvns	r2, r2
 800349a:	401a      	ands	r2, r3
 800349c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	22ff      	movs	r2, #255	@ 0xff
 80034a4:	401a      	ands	r2, r3
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	0018      	movs	r0, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	4003      	ands	r3, r0
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b4:	4809      	ldr	r0, [pc, #36]	@ (80034dc <__NVIC_SetPriority+0xd8>)
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	001c      	movs	r4, r3
 80034bc:	230f      	movs	r3, #15
 80034be:	4023      	ands	r3, r4
 80034c0:	3b08      	subs	r3, #8
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	430a      	orrs	r2, r1
 80034c6:	3306      	adds	r3, #6
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	18c3      	adds	r3, r0, r3
 80034cc:	3304      	adds	r3, #4
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b003      	add	sp, #12
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	045b      	lsls	r3, r3, #17
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d301      	bcc.n	80034f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f4:	2301      	movs	r3, #1
 80034f6:	e010      	b.n	800351a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <SysTick_Config+0x44>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	3a01      	subs	r2, #1
 80034fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003500:	2301      	movs	r3, #1
 8003502:	425b      	negs	r3, r3
 8003504:	2103      	movs	r1, #3
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff ff7c 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350c:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <SysTick_Config+0x44>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003512:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <SysTick_Config+0x44>)
 8003514:	2207      	movs	r2, #7
 8003516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	210f      	movs	r1, #15
 8003534:	187b      	adds	r3, r7, r1
 8003536:	1c02      	adds	r2, r0, #0
 8003538:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	187b      	adds	r3, r7, r1
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b25b      	sxtb	r3, r3
 8003542:	0011      	movs	r1, r2
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff ff5d 	bl	8003404 <__NVIC_SetPriority>
}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	0002      	movs	r2, r0
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b25b      	sxtb	r3, r3
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff ff33 	bl	80033d0 <__NVIC_EnableIRQ>
}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff ffaf 	bl	80034e0 <SysTick_Config>
 8003582:	0003      	movs	r3, r0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e077      	b.n	800368e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	@ (8003698 <HAL_DMA_Init+0x10c>)
 80035a4:	4694      	mov	ip, r2
 80035a6:	4463      	add	r3, ip
 80035a8:	2114      	movs	r1, #20
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fc fdaa 	bl	8000104 <__udivsi3>
 80035b0:	0003      	movs	r3, r0
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2225      	movs	r2, #37	@ 0x25
 80035bc:	2102      	movs	r1, #2
 80035be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4934      	ldr	r1, [pc, #208]	@ (800369c <HAL_DMA_Init+0x110>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f95d 	bl	80038c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	01db      	lsls	r3, r3, #7
 8003616:	429a      	cmp	r2, r3
 8003618:	d102      	bne.n	8003620 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	213f      	movs	r1, #63	@ 0x3f
 800362a:	400a      	ands	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003636:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <HAL_DMA_Init+0xd8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d80d      	bhi.n	8003664 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f968 	bl	8003920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e008      	b.n	8003676 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2225      	movs	r2, #37	@ 0x25
 8003680:	2101      	movs	r1, #1
 8003682:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	@ 0x24
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b002      	add	sp, #8
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	bffdfff8 	.word	0xbffdfff8
 800369c:	ffff800f 	.word	0xffff800f

080036a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e050      	b.n	8003754 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2225      	movs	r2, #37	@ 0x25
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d008      	beq.n	80036d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2204      	movs	r2, #4
 80036c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e041      	b.n	8003754 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	210e      	movs	r1, #14
 80036dc:	438a      	bics	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	491c      	ldr	r1, [pc, #112]	@ (800375c <HAL_DMA_Abort+0xbc>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	438a      	bics	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003700:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <HAL_DMA_Abort+0xc0>)
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	221c      	movs	r2, #28
 800370a:	4013      	ands	r3, r2
 800370c:	2201      	movs	r2, #1
 800370e:	409a      	lsls	r2, r3
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <HAL_DMA_Abort+0xc0>)
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800371e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00c      	beq.n	8003742 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003732:	490a      	ldr	r1, [pc, #40]	@ (800375c <HAL_DMA_Abort+0xbc>)
 8003734:	400a      	ands	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003740:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2225      	movs	r2, #37	@ 0x25
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2224      	movs	r2, #36	@ 0x24
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}
 800375c:	fffffeff 	.word	0xfffffeff
 8003760:	40020000 	.word	0x40020000

08003764 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800376c:	4b55      	ldr	r3, [pc, #340]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	221c      	movs	r2, #28
 8003780:	4013      	ands	r3, r2
 8003782:	2204      	movs	r2, #4
 8003784:	409a      	lsls	r2, r3
 8003786:	0013      	movs	r3, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	d027      	beq.n	80037de <HAL_DMA_IRQHandler+0x7a>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	d023      	beq.n	80037de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	4013      	ands	r3, r2
 80037a0:	d107      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2104      	movs	r1, #4
 80037ae:	438a      	bics	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037b2:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	221c      	movs	r2, #28
 80037bc:	4013      	ands	r3, r2
 80037be:	2204      	movs	r2, #4
 80037c0:	409a      	lsls	r2, r3
 80037c2:	4b40      	ldr	r3, [pc, #256]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d100      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x6e>
 80037d0:	e073      	b.n	80038ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	0010      	movs	r0, r2
 80037da:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037dc:	e06d      	b.n	80038ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	221c      	movs	r2, #28
 80037e4:	4013      	ands	r3, r2
 80037e6:	2202      	movs	r2, #2
 80037e8:	409a      	lsls	r2, r3
 80037ea:	0013      	movs	r3, r2
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	d02e      	beq.n	8003850 <HAL_DMA_IRQHandler+0xec>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2202      	movs	r2, #2
 80037f6:	4013      	ands	r3, r2
 80037f8:	d02a      	beq.n	8003850 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	4013      	ands	r3, r2
 8003804:	d10b      	bne.n	800381e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	210a      	movs	r1, #10
 8003812:	438a      	bics	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2225      	movs	r2, #37	@ 0x25
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800381e:	4b29      	ldr	r3, [pc, #164]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	221c      	movs	r2, #28
 8003828:	4013      	ands	r3, r2
 800382a:	2202      	movs	r2, #2
 800382c:	409a      	lsls	r2, r3
 800382e:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 8003830:	430a      	orrs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	@ 0x24
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03a      	beq.n	80038ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	0010      	movs	r0, r2
 800384c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800384e:	e034      	b.n	80038ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	221c      	movs	r2, #28
 8003856:	4013      	ands	r3, r2
 8003858:	2208      	movs	r2, #8
 800385a:	409a      	lsls	r2, r3
 800385c:	0013      	movs	r3, r2
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	d02b      	beq.n	80038bc <HAL_DMA_IRQHandler+0x158>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2208      	movs	r2, #8
 8003868:	4013      	ands	r3, r2
 800386a:	d027      	beq.n	80038bc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	210e      	movs	r1, #14
 8003878:	438a      	bics	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	221c      	movs	r2, #28
 8003886:	4013      	ands	r3, r2
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <HAL_DMA_IRQHandler+0x160>)
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2225      	movs	r2, #37	@ 0x25
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	@ 0x24
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	0010      	movs	r0, r2
 80038b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	46c0      	nop			@ (mov r8, r8)
}
 80038be:	46bd      	mov	sp, r7
 80038c0:	b004      	add	sp, #16
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40020000 	.word	0x40020000

080038c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80038d8:	4694      	mov	ip, r2
 80038da:	4463      	add	r3, ip
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	001a      	movs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	001a      	movs	r2, r3
 80038ea:	23ff      	movs	r3, #255	@ 0xff
 80038ec:	4013      	ands	r3, r2
 80038ee:	3b08      	subs	r3, #8
 80038f0:	2114      	movs	r1, #20
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7fc fc06 	bl	8000104 <__udivsi3>
 80038f8:	0003      	movs	r3, r0
 80038fa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a07      	ldr	r2, [pc, #28]	@ (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003900:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	221f      	movs	r2, #31
 8003906:	4013      	ands	r3, r2
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bd80      	pop	{r7, pc}
 8003918:	10008200 	.word	0x10008200
 800391c:	40020880 	.word	0x40020880

08003920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	223f      	movs	r2, #63	@ 0x3f
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003936:	4694      	mov	ip, r2
 8003938:	4463      	add	r3, ip
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	001a      	movs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a07      	ldr	r2, [pc, #28]	@ (8003964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3b01      	subs	r3, #1
 800394c:	2203      	movs	r2, #3
 800394e:	4013      	ands	r3, r2
 8003950:	2201      	movs	r2, #1
 8003952:	409a      	lsls	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	1000823f 	.word	0x1000823f
 8003964:	40020940 	.word	0x40020940

08003968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003976:	e147      	b.n	8003c08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4091      	lsls	r1, r2
 8003982:	000a      	movs	r2, r1
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d100      	bne.n	8003990 <HAL_GPIO_Init+0x28>
 800398e:	e138      	b.n	8003c02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	4013      	ands	r3, r2
 8003998:	2b01      	cmp	r3, #1
 800399a:	d005      	beq.n	80039a8 <HAL_GPIO_Init+0x40>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2203      	movs	r2, #3
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d130      	bne.n	8003a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	409a      	lsls	r2, r3
 80039b6:	0013      	movs	r3, r2
 80039b8:	43da      	mvns	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	409a      	lsls	r2, r3
 80039ca:	0013      	movs	r3, r2
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039de:	2201      	movs	r2, #1
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	409a      	lsls	r2, r3
 80039e4:	0013      	movs	r3, r2
 80039e6:	43da      	mvns	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	2201      	movs	r2, #1
 80039f6:	401a      	ands	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d017      	beq.n	8003a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	43da      	mvns	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	0013      	movs	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d123      	bne.n	8003a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	08da      	lsrs	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3208      	adds	r2, #8
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	58d3      	ldr	r3, [r2, r3]
 8003a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2207      	movs	r2, #7
 8003a64:	4013      	ands	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2107      	movs	r1, #7
 8003a7e:	400b      	ands	r3, r1
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	08da      	lsrs	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3208      	adds	r2, #8
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	6939      	ldr	r1, [r7, #16]
 8003a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	401a      	ands	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	23c0      	movs	r3, #192	@ 0xc0
 8003ad4:	029b      	lsls	r3, r3, #10
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d100      	bne.n	8003adc <HAL_GPIO_Init+0x174>
 8003ada:	e092      	b.n	8003c02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003adc:	4a50      	ldr	r2, [pc, #320]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3318      	adds	r3, #24
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	589b      	ldr	r3, [r3, r2]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2203      	movs	r2, #3
 8003aee:	4013      	ands	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	220f      	movs	r2, #15
 8003af4:	409a      	lsls	r2, r3
 8003af6:	0013      	movs	r3, r2
 8003af8:	43da      	mvns	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	23a0      	movs	r3, #160	@ 0xa0
 8003b04:	05db      	lsls	r3, r3, #23
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0x1ca>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a45      	ldr	r2, [pc, #276]	@ (8003c24 <HAL_GPIO_Init+0x2bc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_Init+0x1c6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a44      	ldr	r2, [pc, #272]	@ (8003c28 <HAL_GPIO_Init+0x2c0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_Init+0x1c2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a43      	ldr	r2, [pc, #268]	@ (8003c2c <HAL_GPIO_Init+0x2c4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_Init+0x1be>
 8003b22:	2303      	movs	r3, #3
 8003b24:	e006      	b.n	8003b34 <HAL_GPIO_Init+0x1cc>
 8003b26:	2305      	movs	r3, #5
 8003b28:	e004      	b.n	8003b34 <HAL_GPIO_Init+0x1cc>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_Init+0x1cc>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_GPIO_Init+0x1cc>
 8003b32:	2300      	movs	r3, #0
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	2103      	movs	r1, #3
 8003b38:	400a      	ands	r2, r1
 8003b3a:	00d2      	lsls	r2, r2, #3
 8003b3c:	4093      	lsls	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b44:	4936      	ldr	r1, [pc, #216]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b52:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	035b      	lsls	r3, r3, #13
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b76:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b7c:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	43da      	mvns	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	039b      	lsls	r3, r3, #14
 8003b94:	4013      	ands	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003ba8:	2384      	movs	r3, #132	@ 0x84
 8003baa:	58d3      	ldr	r3, [r2, r3]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	2380      	movs	r3, #128	@ 0x80
 8003bbe:	029b      	lsls	r3, r3, #10
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bcc:	4914      	ldr	r1, [pc, #80]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003bce:	2284      	movs	r2, #132	@ 0x84
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003bd4:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003bd6:	2380      	movs	r3, #128	@ 0x80
 8003bd8:	58d3      	ldr	r3, [r2, r3]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	025b      	lsls	r3, r3, #9
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bfa:	4909      	ldr	r1, [pc, #36]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003bfc:	2280      	movs	r2, #128	@ 0x80
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3301      	adds	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	40da      	lsrs	r2, r3
 8003c10:	1e13      	subs	r3, r2, #0
 8003c12:	d000      	beq.n	8003c16 <HAL_GPIO_Init+0x2ae>
 8003c14:	e6b0      	b.n	8003978 <HAL_GPIO_Init+0x10>
  }
}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b006      	add	sp, #24
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021800 	.word	0x40021800
 8003c24:	50000400 	.word	0x50000400
 8003c28:	50000800 	.word	0x50000800
 8003c2c:	50000c00 	.word	0x50000c00

08003c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	0008      	movs	r0, r1
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	1cbb      	adds	r3, r7, #2
 8003c3e:	1c02      	adds	r2, r0, #0
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	1c7b      	adds	r3, r7, #1
 8003c44:	1c0a      	adds	r2, r1, #0
 8003c46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c48:	1c7b      	adds	r3, r7, #1
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c50:	1cbb      	adds	r3, r7, #2
 8003c52:	881a      	ldrh	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c58:	e003      	b.n	8003c62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b002      	add	sp, #8
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c74:	4b19      	ldr	r3, [pc, #100]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a19      	ldr	r2, [pc, #100]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d11f      	bne.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	0013      	movs	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4912      	ldr	r1, [pc, #72]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fc fa30 	bl	8000104 <__udivsi3>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003caa:	e008      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e001      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e009      	b.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cbe:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d0ed      	beq.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	fffff9ff 	.word	0xfffff9ff
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	000f4240 	.word	0x000f4240

08003cec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003cf0:	4b03      	ldr	r3, [pc, #12]	@ (8003d00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	23e0      	movs	r3, #224	@ 0xe0
 8003cf6:	01db      	lsls	r3, r3, #7
 8003cf8:	4013      	ands	r3, r2
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000

08003d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e2fe      	b.n	8004314 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <HAL_RCC_OscConfig+0x1e>
 8003d20:	e07c      	b.n	8003e1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4bc3      	ldr	r3, [pc, #780]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2238      	movs	r2, #56	@ 0x38
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4bc0      	ldr	r3, [pc, #768]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2203      	movs	r2, #3
 8003d32:	4013      	ands	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3e>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4bb9      	ldr	r3, [pc, #740]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	029b      	lsls	r3, r3, #10
 8003d50:	4013      	ands	r3, r2
 8003d52:	d062      	beq.n	8003e1a <HAL_RCC_OscConfig+0x116>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d15e      	bne.n	8003e1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e2d9      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	025b      	lsls	r3, r3, #9
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x78>
 8003d6c:	4bb0      	ldr	r3, [pc, #704]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4baf      	ldr	r3, [pc, #700]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	2180      	movs	r1, #128	@ 0x80
 8003d74:	0249      	lsls	r1, r1, #9
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e020      	b.n	8003dbe <HAL_RCC_OscConfig+0xba>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	23a0      	movs	r3, #160	@ 0xa0
 8003d82:	02db      	lsls	r3, r3, #11
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10e      	bne.n	8003da6 <HAL_RCC_OscConfig+0xa2>
 8003d88:	4ba9      	ldr	r3, [pc, #676]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4ba8      	ldr	r3, [pc, #672]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	2180      	movs	r1, #128	@ 0x80
 8003d90:	02c9      	lsls	r1, r1, #11
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4ba6      	ldr	r3, [pc, #664]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4ba5      	ldr	r3, [pc, #660]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	2180      	movs	r1, #128	@ 0x80
 8003d9e:	0249      	lsls	r1, r1, #9
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0xba>
 8003da6:	4ba2      	ldr	r3, [pc, #648]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4ba1      	ldr	r3, [pc, #644]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	49a1      	ldr	r1, [pc, #644]	@ (8004034 <HAL_RCC_OscConfig+0x330>)
 8003dae:	400a      	ands	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	4b9f      	ldr	r3, [pc, #636]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b9e      	ldr	r3, [pc, #632]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003db8:	499f      	ldr	r1, [pc, #636]	@ (8004038 <HAL_RCC_OscConfig+0x334>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d014      	beq.n	8003df0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fa95 	bl	80022f4 <HAL_GetTick>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fa90 	bl	80022f4 <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e298      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	4b93      	ldr	r3, [pc, #588]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	029b      	lsls	r3, r3, #10
 8003dea:	4013      	ands	r3, r2
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xcc>
 8003dee:	e015      	b.n	8003e1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe fa80 	bl	80022f4 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfa:	f7fe fa7b 	bl	80022f4 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	@ 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e283      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0c:	4b88      	ldr	r3, [pc, #544]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	4013      	ands	r3, r2
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0xf6>
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d100      	bne.n	8003e28 <HAL_RCC_OscConfig+0x124>
 8003e26:	e099      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e28:	4b81      	ldr	r3, [pc, #516]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2238      	movs	r2, #56	@ 0x38
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e32:	4b7f      	ldr	r3, [pc, #508]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2203      	movs	r2, #3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x144>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d002      	beq.n	8003e4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d135      	bne.n	8003eba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4e:	4b78      	ldr	r3, [pc, #480]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4013      	ands	r3, r2
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x162>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e256      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b72      	ldr	r3, [pc, #456]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4a74      	ldr	r2, [pc, #464]	@ (800403c <HAL_RCC_OscConfig+0x338>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	4b6e      	ldr	r3, [pc, #440]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e82:	4b6b      	ldr	r3, [pc, #428]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a6e      	ldr	r2, [pc, #440]	@ (8004040 <HAL_RCC_OscConfig+0x33c>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b67      	ldr	r3, [pc, #412]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e96:	4b66      	ldr	r3, [pc, #408]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0adb      	lsrs	r3, r3, #11
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	4a68      	ldr	r2, [pc, #416]	@ (8004044 <HAL_RCC_OscConfig+0x340>)
 8003ea2:	40da      	lsrs	r2, r3
 8003ea4:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <HAL_RCC_OscConfig+0x344>)
 8003ea6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ea8:	4b68      	ldr	r3, [pc, #416]	@ (800404c <HAL_RCC_OscConfig+0x348>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fe f9c5 	bl	800223c <HAL_InitTick>
 8003eb2:	1e03      	subs	r3, r0, #0
 8003eb4:	d051      	beq.n	8003f5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e22c      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d030      	beq.n	8003f24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <HAL_RCC_OscConfig+0x33c>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	4b57      	ldr	r3, [pc, #348]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	4b56      	ldr	r3, [pc, #344]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b55      	ldr	r3, [pc, #340]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	2180      	movs	r1, #128	@ 0x80
 8003ede:	0049      	lsls	r1, r1, #1
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fa06 	bl	80022f4 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fe fa01 	bl	80022f4 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e209      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f00:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a4a      	ldr	r2, [pc, #296]	@ (800403c <HAL_RCC_OscConfig+0x338>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	4b44      	ldr	r3, [pc, #272]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e01b      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f24:	4b42      	ldr	r3, [pc, #264]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b41      	ldr	r3, [pc, #260]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	4949      	ldr	r1, [pc, #292]	@ (8004050 <HAL_RCC_OscConfig+0x34c>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe f9e0 	bl	80022f4 <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f9db 	bl	80022f4 <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1e3      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4c:	4b38      	ldr	r3, [pc, #224]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4013      	ands	r3, r2
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x236>
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	4013      	ands	r3, r2
 8003f64:	d047      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f66:	4b32      	ldr	r3, [pc, #200]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2238      	movs	r2, #56	@ 0x38
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b18      	cmp	r3, #24
 8003f70:	d10a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f72:	4b2f      	ldr	r3, [pc, #188]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d03c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d138      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e1c5      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d019      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f90:	4b27      	ldr	r3, [pc, #156]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f94:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe f9aa 	bl	80022f4 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fe f9a5 	bl	80022f4 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e1ad      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d0f1      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2a2>
 8003fc2:	e018      	b.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	438a      	bics	r2, r1
 8003fce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe f990 	bl	80022f4 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fe f98b 	bl	80022f4 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e193      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fec:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d1f1      	bne.n	8003fda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d100      	bne.n	8004002 <HAL_RCC_OscConfig+0x2fe>
 8004000:	e0c6      	b.n	8004190 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	231f      	movs	r3, #31
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800400a:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2238      	movs	r2, #56	@ 0x38
 8004010:	4013      	ands	r3, r2
 8004012:	2b20      	cmp	r3, #32
 8004014:	d11e      	bne.n	8004054 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_RCC_OscConfig+0x32c>)
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x31e>
 8004020:	e0b6      	b.n	8004190 <HAL_RCC_OscConfig+0x48c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d000      	beq.n	800402c <HAL_RCC_OscConfig+0x328>
 800402a:	e0b1      	b.n	8004190 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e171      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
 8004030:	40021000 	.word	0x40021000
 8004034:	fffeffff 	.word	0xfffeffff
 8004038:	fffbffff 	.word	0xfffbffff
 800403c:	ffff80ff 	.word	0xffff80ff
 8004040:	ffffc7ff 	.word	0xffffc7ff
 8004044:	00f42400 	.word	0x00f42400
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004
 8004050:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004054:	4bb1      	ldr	r3, [pc, #708]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	055b      	lsls	r3, r3, #21
 800405c:	4013      	ands	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_RCC_OscConfig+0x360>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x362>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4bac      	ldr	r3, [pc, #688]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800406c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800406e:	4bab      	ldr	r3, [pc, #684]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004070:	2180      	movs	r1, #128	@ 0x80
 8004072:	0549      	lsls	r1, r1, #21
 8004074:	430a      	orrs	r2, r1
 8004076:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004078:	4ba8      	ldr	r3, [pc, #672]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800407a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800407c:	2380      	movs	r3, #128	@ 0x80
 800407e:	055b      	lsls	r3, r3, #21
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004086:	231f      	movs	r3, #31
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408e:	4ba4      	ldr	r3, [pc, #656]	@ (8004320 <HAL_RCC_OscConfig+0x61c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800409a:	4ba1      	ldr	r3, [pc, #644]	@ (8004320 <HAL_RCC_OscConfig+0x61c>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4ba0      	ldr	r3, [pc, #640]	@ (8004320 <HAL_RCC_OscConfig+0x61c>)
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	0049      	lsls	r1, r1, #1
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80040a8:	f7fe f924 	bl	80022f4 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b2:	f7fe f91f 	bl	80022f4 <HAL_GetTick>
 80040b6:	0002      	movs	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e127      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c4:	4b96      	ldr	r3, [pc, #600]	@ (8004320 <HAL_RCC_OscConfig+0x61c>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x3e2>
 80040d8:	4b90      	ldr	r3, [pc, #576]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80040da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040dc:	4b8f      	ldr	r3, [pc, #572]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80040de:	2101      	movs	r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040e4:	e01c      	b.n	8004120 <HAL_RCC_OscConfig+0x41c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0x404>
 80040ee:	4b8b      	ldr	r3, [pc, #556]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80040f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040f2:	4b8a      	ldr	r3, [pc, #552]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80040f4:	2104      	movs	r1, #4
 80040f6:	430a      	orrs	r2, r1
 80040f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040fa:	4b88      	ldr	r3, [pc, #544]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80040fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040fe:	4b87      	ldr	r3, [pc, #540]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004100:	2101      	movs	r1, #1
 8004102:	430a      	orrs	r2, r1
 8004104:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0x41c>
 8004108:	4b84      	ldr	r3, [pc, #528]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800410a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800410c:	4b83      	ldr	r3, [pc, #524]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004114:	4b81      	ldr	r3, [pc, #516]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004116:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004118:	4b80      	ldr	r3, [pc, #512]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800411a:	2104      	movs	r1, #4
 800411c:	438a      	bics	r2, r1
 800411e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d014      	beq.n	8004152 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe f8e4 	bl	80022f4 <HAL_GetTick>
 800412c:	0003      	movs	r3, r0
 800412e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004130:	e009      	b.n	8004146 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe f8df 	bl	80022f4 <HAL_GetTick>
 8004136:	0002      	movs	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	4a79      	ldr	r2, [pc, #484]	@ (8004324 <HAL_RCC_OscConfig+0x620>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0e6      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004146:	4b75      	ldr	r3, [pc, #468]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	2202      	movs	r2, #2
 800414c:	4013      	ands	r3, r2
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x42e>
 8004150:	e013      	b.n	800417a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe f8cf 	bl	80022f4 <HAL_GetTick>
 8004156:	0003      	movs	r3, r0
 8004158:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800415a:	e009      	b.n	8004170 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fe f8ca 	bl	80022f4 <HAL_GetTick>
 8004160:	0002      	movs	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	4a6f      	ldr	r2, [pc, #444]	@ (8004324 <HAL_RCC_OscConfig+0x620>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0d1      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004170:	4b6a      	ldr	r3, [pc, #424]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800417a:	231f      	movs	r3, #31
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004184:	4b65      	ldr	r3, [pc, #404]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004188:	4b64      	ldr	r3, [pc, #400]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800418a:	4967      	ldr	r1, [pc, #412]	@ (8004328 <HAL_RCC_OscConfig+0x624>)
 800418c:	400a      	ands	r2, r1
 800418e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d100      	bne.n	800419a <HAL_RCC_OscConfig+0x496>
 8004198:	e0bb      	b.n	8004312 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419a:	4b60      	ldr	r3, [pc, #384]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2238      	movs	r2, #56	@ 0x38
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d100      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4a4>
 80041a6:	e07b      	b.n	80042a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d156      	bne.n	800425e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b0:	4b5a      	ldr	r3, [pc, #360]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b59      	ldr	r3, [pc, #356]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80041b6:	495d      	ldr	r1, [pc, #372]	@ (800432c <HAL_RCC_OscConfig+0x628>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe f89a 	bl	80022f4 <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fe f895 	bl	80022f4 <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e09d      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d8:	4b50      	ldr	r3, [pc, #320]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	049b      	lsls	r3, r3, #18
 80041e0:	4013      	ands	r3, r2
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	4b4d      	ldr	r3, [pc, #308]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a51      	ldr	r2, [pc, #324]	@ (8004330 <HAL_RCC_OscConfig+0x62c>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	431a      	orrs	r2, r3
 8004212:	4b42      	ldr	r3, [pc, #264]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004214:	430a      	orrs	r2, r1
 8004216:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004218:	4b40      	ldr	r3, [pc, #256]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b3f      	ldr	r3, [pc, #252]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800421e:	2180      	movs	r1, #128	@ 0x80
 8004220:	0449      	lsls	r1, r1, #17
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004226:	4b3d      	ldr	r3, [pc, #244]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b3c      	ldr	r3, [pc, #240]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	0549      	lsls	r1, r1, #21
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fe f85e 	bl	80022f4 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe f859 	bl	80022f4 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e061      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004250:	4b32      	ldr	r3, [pc, #200]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	@ 0x80
 8004256:	049b      	lsls	r3, r3, #18
 8004258:	4013      	ands	r3, r2
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x53a>
 800425c:	e059      	b.n	8004312 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425e:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004264:	4931      	ldr	r1, [pc, #196]	@ (800432c <HAL_RCC_OscConfig+0x628>)
 8004266:	400a      	ands	r2, r1
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fe f843 	bl	80022f4 <HAL_GetTick>
 800426e:	0003      	movs	r3, r0
 8004270:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7fe f83e 	bl	80022f4 <HAL_GetTick>
 8004278:	0002      	movs	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e046      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004286:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	049b      	lsls	r3, r3, #18
 800428e:	4013      	ands	r3, r2
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004292:	4b22      	ldr	r3, [pc, #136]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	4b21      	ldr	r3, [pc, #132]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004298:	4926      	ldr	r1, [pc, #152]	@ (8004334 <HAL_RCC_OscConfig+0x630>)
 800429a:	400a      	ands	r2, r1
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e038      	b.n	8004312 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e033      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2203      	movs	r2, #3
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d126      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2270      	movs	r2, #112	@ 0x70
 80042c4:	401a      	ands	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d11f      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	23fe      	movs	r3, #254	@ 0xfe
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d116      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	23f8      	movs	r3, #248	@ 0xf8
 80042e4:	039b      	lsls	r3, r3, #14
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10e      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	23e0      	movs	r3, #224	@ 0xe0
 80042f4:	051b      	lsls	r3, r3, #20
 80042f6:	401a      	ands	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	0f5b      	lsrs	r3, r3, #29
 8004304:	075a      	lsls	r2, r3, #29
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b008      	add	sp, #32
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
 8004324:	00001388 	.word	0x00001388
 8004328:	efffffff 	.word	0xefffffff
 800432c:	feffffff 	.word	0xfeffffff
 8004330:	11c1808c 	.word	0x11c1808c
 8004334:	eefefffc 	.word	0xeefefffc

08004338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0e9      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b76      	ldr	r3, [pc, #472]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2207      	movs	r2, #7
 8004352:	4013      	ands	r3, r2
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d91e      	bls.n	8004398 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b73      	ldr	r3, [pc, #460]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2207      	movs	r2, #7
 8004360:	4393      	bics	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	4b70      	ldr	r3, [pc, #448]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800436c:	f7fd ffc2 	bl	80022f4 <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004374:	e009      	b.n	800438a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004376:	f7fd ffbd 	bl	80022f4 <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	4a6a      	ldr	r2, [pc, #424]	@ (800452c <HAL_RCC_ClockConfig+0x1f4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0ca      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800438a:	4b67      	ldr	r3, [pc, #412]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2207      	movs	r2, #7
 8004390:	4013      	ands	r3, r2
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d1ee      	bne.n	8004376 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2202      	movs	r2, #2
 800439e:	4013      	ands	r3, r2
 80043a0:	d015      	beq.n	80043ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2204      	movs	r2, #4
 80043a8:	4013      	ands	r3, r2
 80043aa:	d006      	beq.n	80043ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043ac:	4b60      	ldr	r3, [pc, #384]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80043b2:	21e0      	movs	r1, #224	@ 0xe0
 80043b4:	01c9      	lsls	r1, r1, #7
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4a5d      	ldr	r2, [pc, #372]	@ (8004534 <HAL_RCC_ClockConfig+0x1fc>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	4b59      	ldr	r3, [pc, #356]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	d057      	beq.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e0:	4b53      	ldr	r3, [pc, #332]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2380      	movs	r3, #128	@ 0x80
 80043e6:	029b      	lsls	r3, r3, #10
 80043e8:	4013      	ands	r3, r2
 80043ea:	d12b      	bne.n	8004444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e097      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	049b      	lsls	r3, r3, #18
 8004400:	4013      	ands	r3, r2
 8004402:	d11f      	bne.n	8004444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e08b      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004410:	4b47      	ldr	r3, [pc, #284]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	@ 0x80
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4013      	ands	r3, r2
 800441a:	d113      	bne.n	8004444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e07f      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d106      	bne.n	8004436 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004428:	4b41      	ldr	r3, [pc, #260]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d108      	bne.n	8004444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e074      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004436:	4b3e      	ldr	r3, [pc, #248]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	2202      	movs	r2, #2
 800443c:	4013      	ands	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e06d      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004444:	4b3a      	ldr	r3, [pc, #232]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2207      	movs	r2, #7
 800444a:	4393      	bics	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4b37      	ldr	r3, [pc, #220]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 8004454:	430a      	orrs	r2, r1
 8004456:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd ff4c 	bl	80022f4 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004460:	e009      	b.n	8004476 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004462:	f7fd ff47 	bl	80022f4 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	4a2f      	ldr	r2, [pc, #188]	@ (800452c <HAL_RCC_ClockConfig+0x1f4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e054      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b2e      	ldr	r3, [pc, #184]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2238      	movs	r2, #56	@ 0x38
 800447c:	401a      	ands	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	429a      	cmp	r2, r3
 8004486:	d1ec      	bne.n	8004462 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b27      	ldr	r3, [pc, #156]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2207      	movs	r2, #7
 800448e:	4013      	ands	r3, r2
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d21e      	bcs.n	80044d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2207      	movs	r2, #7
 800449c:	4393      	bics	r3, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	4b21      	ldr	r3, [pc, #132]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044a8:	f7fd ff24 	bl	80022f4 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044b0:	e009      	b.n	80044c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b2:	f7fd ff1f 	bl	80022f4 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_RCC_ClockConfig+0x1f4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e02c      	b.n	8004520 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044c6:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2207      	movs	r2, #7
 80044cc:	4013      	ands	r3, r2
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d1ee      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2204      	movs	r2, #4
 80044da:	4013      	ands	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <HAL_RCC_ClockConfig+0x200>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80044f2:	f000 f829 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80044f6:	0001      	movs	r1, r0
 80044f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	220f      	movs	r2, #15
 8004500:	401a      	ands	r2, r3
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <HAL_RCC_ClockConfig+0x204>)
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	58d3      	ldr	r3, [r2, r3]
 8004508:	221f      	movs	r2, #31
 800450a:	4013      	ands	r3, r2
 800450c:	000a      	movs	r2, r1
 800450e:	40da      	lsrs	r2, r3
 8004510:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_RCC_ClockConfig+0x208>)
 8004512:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_RCC_ClockConfig+0x20c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0018      	movs	r0, r3
 800451a:	f7fd fe8f 	bl	800223c <HAL_InitTick>
 800451e:	0003      	movs	r3, r0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b004      	add	sp, #16
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40022000 	.word	0x40022000
 800452c:	00001388 	.word	0x00001388
 8004530:	40021000 	.word	0x40021000
 8004534:	fffff0ff 	.word	0xfffff0ff
 8004538:	ffff8fff 	.word	0xffff8fff
 800453c:	080078b8 	.word	0x080078b8
 8004540:	20000000 	.word	0x20000000
 8004544:	20000004 	.word	0x20000004

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454e:	4b3c      	ldr	r3, [pc, #240]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2238      	movs	r2, #56	@ 0x38
 8004554:	4013      	ands	r3, r2
 8004556:	d10f      	bne.n	8004578 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004558:	4b39      	ldr	r3, [pc, #228]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0adb      	lsrs	r3, r3, #11
 800455e:	2207      	movs	r2, #7
 8004560:	4013      	ands	r3, r2
 8004562:	2201      	movs	r2, #1
 8004564:	409a      	lsls	r2, r3
 8004566:	0013      	movs	r3, r2
 8004568:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800456a:	6839      	ldr	r1, [r7, #0]
 800456c:	4835      	ldr	r0, [pc, #212]	@ (8004644 <HAL_RCC_GetSysClockFreq+0xfc>)
 800456e:	f7fb fdc9 	bl	8000104 <__udivsi3>
 8004572:	0003      	movs	r3, r0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	e05d      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004578:	4b31      	ldr	r3, [pc, #196]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2238      	movs	r2, #56	@ 0x38
 800457e:	4013      	ands	r3, r2
 8004580:	2b08      	cmp	r3, #8
 8004582:	d102      	bne.n	800458a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004584:	4b30      	ldr	r3, [pc, #192]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x100>)
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e054      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800458a:	4b2d      	ldr	r3, [pc, #180]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2238      	movs	r2, #56	@ 0x38
 8004590:	4013      	ands	r3, r2
 8004592:	2b10      	cmp	r3, #16
 8004594:	d138      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004596:	4b2a      	ldr	r3, [pc, #168]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2203      	movs	r2, #3
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a0:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	2207      	movs	r2, #7
 80045a8:	4013      	ands	r3, r2
 80045aa:	3301      	adds	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4824      	ldr	r0, [pc, #144]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x100>)
 80045b8:	f7fb fda4 	bl	8000104 <__udivsi3>
 80045bc:	0003      	movs	r3, r0
 80045be:	0019      	movs	r1, r3
 80045c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	227f      	movs	r2, #127	@ 0x7f
 80045c8:	4013      	ands	r3, r2
 80045ca:	434b      	muls	r3, r1
 80045cc:	617b      	str	r3, [r7, #20]
        break;
 80045ce:	e00d      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	481c      	ldr	r0, [pc, #112]	@ (8004644 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045d4:	f7fb fd96 	bl	8000104 <__udivsi3>
 80045d8:	0003      	movs	r3, r0
 80045da:	0019      	movs	r1, r3
 80045dc:	4b18      	ldr	r3, [pc, #96]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	227f      	movs	r2, #127	@ 0x7f
 80045e4:	4013      	ands	r3, r2
 80045e6:	434b      	muls	r3, r1
 80045e8:	617b      	str	r3, [r7, #20]
        break;
 80045ea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80045ec:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	0f5b      	lsrs	r3, r3, #29
 80045f2:	2207      	movs	r2, #7
 80045f4:	4013      	ands	r3, r2
 80045f6:	3301      	adds	r3, #1
 80045f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f7fb fd81 	bl	8000104 <__udivsi3>
 8004602:	0003      	movs	r3, r0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e015      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004608:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2238      	movs	r2, #56	@ 0x38
 800460e:	4013      	ands	r3, r2
 8004610:	2b20      	cmp	r3, #32
 8004612:	d103      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004614:	2380      	movs	r3, #128	@ 0x80
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800461c:	4b08      	ldr	r3, [pc, #32]	@ (8004640 <HAL_RCC_GetSysClockFreq+0xf8>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2238      	movs	r2, #56	@ 0x38
 8004622:	4013      	ands	r3, r2
 8004624:	2b18      	cmp	r3, #24
 8004626:	d103      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004628:	23fa      	movs	r3, #250	@ 0xfa
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	e001      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004634:	693b      	ldr	r3, [r7, #16]
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b006      	add	sp, #24
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	40021000 	.word	0x40021000
 8004644:	00f42400 	.word	0x00f42400
 8004648:	007a1200 	.word	0x007a1200

0800464c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004650:	4b02      	ldr	r3, [pc, #8]	@ (800465c <HAL_RCC_GetHCLKFreq+0x10>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	20000000 	.word	0x20000000

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b5b0      	push	{r4, r5, r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004664:	f7ff fff2 	bl	800464c <HAL_RCC_GetHCLKFreq>
 8004668:	0004      	movs	r4, r0
 800466a:	f7ff fb3f 	bl	8003cec <LL_RCC_GetAPB1Prescaler>
 800466e:	0003      	movs	r3, r0
 8004670:	0b1a      	lsrs	r2, r3, #12
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004674:	0092      	lsls	r2, r2, #2
 8004676:	58d3      	ldr	r3, [r2, r3]
 8004678:	221f      	movs	r2, #31
 800467a:	4013      	ands	r3, r2
 800467c:	40dc      	lsrs	r4, r3
 800467e:	0023      	movs	r3, r4
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	bdb0      	pop	{r4, r5, r7, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	080078f8 	.word	0x080078f8

0800468c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e056      	b.n	800474c <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	223d      	movs	r2, #61	@ 0x3d
 80046a2:	5c9b      	ldrb	r3, [r3, r2]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d113      	bne.n	80046d2 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223c      	movs	r2, #60	@ 0x3c
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f001 fe3f 	bl	8006338 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a23      	ldr	r2, [pc, #140]	@ (8004754 <HAL_TIM_Base_Init+0xc8>)
 80046c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	0010      	movs	r0, r2
 80046d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	223d      	movs	r2, #61	@ 0x3d
 80046d6:	2102      	movs	r1, #2
 80046d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	0019      	movs	r1, r3
 80046e4:	0010      	movs	r0, r2
 80046e6:	f001 f929 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2248      	movs	r2, #72	@ 0x48
 80046ee:	2101      	movs	r1, #1
 80046f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	223e      	movs	r2, #62	@ 0x3e
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	223f      	movs	r2, #63	@ 0x3f
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2240      	movs	r2, #64	@ 0x40
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2241      	movs	r2, #65	@ 0x41
 800470e:	2101      	movs	r1, #1
 8004710:	5499      	strb	r1, [r3, r2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2242      	movs	r2, #66	@ 0x42
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2243      	movs	r2, #67	@ 0x43
 800471e:	2101      	movs	r1, #1
 8004720:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2244      	movs	r2, #68	@ 0x44
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2245      	movs	r2, #69	@ 0x45
 800472e:	2101      	movs	r1, #1
 8004730:	5499      	strb	r1, [r3, r2]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2246      	movs	r2, #70	@ 0x46
 8004736:	2101      	movs	r1, #1
 8004738:	5499      	strb	r1, [r3, r2]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2247      	movs	r2, #71	@ 0x47
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	223d      	movs	r2, #61	@ 0x3d
 8004746:	2101      	movs	r1, #1
 8004748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}
 8004754:	080015b1 	.word	0x080015b1

08004758 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	223d      	movs	r2, #61	@ 0x3d
 8004764:	5c9b      	ldrb	r3, [r3, r2]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e035      	b.n	80047dc <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223d      	movs	r2, #61	@ 0x3d
 8004774:	2102      	movs	r1, #2
 8004776:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a19      	ldr	r2, [pc, #100]	@ (80047e4 <HAL_TIM_Base_Start+0x8c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00a      	beq.n	8004798 <HAL_TIM_Base_Start+0x40>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	2380      	movs	r3, #128	@ 0x80
 8004788:	05db      	lsls	r3, r3, #23
 800478a:	429a      	cmp	r2, r3
 800478c:	d004      	beq.n	8004798 <HAL_TIM_Base_Start+0x40>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <HAL_TIM_Base_Start+0x90>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d116      	bne.n	80047c6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <HAL_TIM_Base_Start+0x94>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d016      	beq.n	80047d8 <HAL_TIM_Base_Start+0x80>
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	2380      	movs	r3, #128	@ 0x80
 80047ae:	025b      	lsls	r3, r3, #9
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d011      	beq.n	80047d8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2101      	movs	r1, #1
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c4:	e008      	b.n	80047d8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2101      	movs	r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e000      	b.n	80047da <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40000400 	.word	0x40000400
 80047ec:	00010007 	.word	0x00010007

080047f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e056      	b.n	80048b0 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	223d      	movs	r2, #61	@ 0x3d
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d113      	bne.n	8004836 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	223c      	movs	r2, #60	@ 0x3c
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f001 fd8d 	bl	8006338 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a23      	ldr	r2, [pc, #140]	@ (80048b8 <HAL_TIM_OC_Init+0xc8>)
 800482a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	0010      	movs	r0, r2
 8004834:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	223d      	movs	r2, #61	@ 0x3d
 800483a:	2102      	movs	r1, #2
 800483c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	0019      	movs	r1, r3
 8004848:	0010      	movs	r0, r2
 800484a:	f001 f877 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2248      	movs	r2, #72	@ 0x48
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	223e      	movs	r2, #62	@ 0x3e
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	223f      	movs	r2, #63	@ 0x3f
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2240      	movs	r2, #64	@ 0x40
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2241      	movs	r2, #65	@ 0x41
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2242      	movs	r2, #66	@ 0x42
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2243      	movs	r2, #67	@ 0x43
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2244      	movs	r2, #68	@ 0x44
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2245      	movs	r2, #69	@ 0x45
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2246      	movs	r2, #70	@ 0x46
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2247      	movs	r2, #71	@ 0x47
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	223d      	movs	r2, #61	@ 0x3d
 80048aa:	2101      	movs	r1, #1
 80048ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	080048bd 	.word	0x080048bd

080048bc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <HAL_TIM_OC_Start_IT+0x2a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	223e      	movs	r2, #62	@ 0x3e
 80048e8:	5c9b      	ldrb	r3, [r3, r2]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	1e5a      	subs	r2, r3, #1
 80048f0:	4193      	sbcs	r3, r2
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e037      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x9a>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d108      	bne.n	800490e <HAL_TIM_OC_Start_IT+0x42>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	223f      	movs	r2, #63	@ 0x3f
 8004900:	5c9b      	ldrb	r3, [r3, r2]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	4193      	sbcs	r3, r2
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e02b      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x9a>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d108      	bne.n	8004926 <HAL_TIM_OC_Start_IT+0x5a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2240      	movs	r2, #64	@ 0x40
 8004918:	5c9b      	ldrb	r3, [r3, r2]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	1e5a      	subs	r2, r3, #1
 8004920:	4193      	sbcs	r3, r2
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e01f      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x9a>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d108      	bne.n	800493e <HAL_TIM_OC_Start_IT+0x72>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2241      	movs	r2, #65	@ 0x41
 8004930:	5c9b      	ldrb	r3, [r3, r2]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	4193      	sbcs	r3, r2
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e013      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x9a>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b10      	cmp	r3, #16
 8004942:	d108      	bne.n	8004956 <HAL_TIM_OC_Start_IT+0x8a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2242      	movs	r2, #66	@ 0x42
 8004948:	5c9b      	ldrb	r3, [r3, r2]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	1e5a      	subs	r2, r3, #1
 8004950:	4193      	sbcs	r3, r2
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e007      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2243      	movs	r2, #67	@ 0x43
 800495a:	5c9b      	ldrb	r3, [r3, r2]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	4193      	sbcs	r3, r2
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0c4      	b.n	8004af8 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_TIM_OC_Start_IT+0xb2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	223e      	movs	r2, #62	@ 0x3e
 8004978:	2102      	movs	r1, #2
 800497a:	5499      	strb	r1, [r3, r2]
 800497c:	e023      	b.n	80049c6 <HAL_TIM_OC_Start_IT+0xfa>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d104      	bne.n	800498e <HAL_TIM_OC_Start_IT+0xc2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	223f      	movs	r2, #63	@ 0x3f
 8004988:	2102      	movs	r1, #2
 800498a:	5499      	strb	r1, [r3, r2]
 800498c:	e01b      	b.n	80049c6 <HAL_TIM_OC_Start_IT+0xfa>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d104      	bne.n	800499e <HAL_TIM_OC_Start_IT+0xd2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	2102      	movs	r1, #2
 800499a:	5499      	strb	r1, [r3, r2]
 800499c:	e013      	b.n	80049c6 <HAL_TIM_OC_Start_IT+0xfa>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_OC_Start_IT+0xe2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2241      	movs	r2, #65	@ 0x41
 80049a8:	2102      	movs	r1, #2
 80049aa:	5499      	strb	r1, [r3, r2]
 80049ac:	e00b      	b.n	80049c6 <HAL_TIM_OC_Start_IT+0xfa>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d104      	bne.n	80049be <HAL_TIM_OC_Start_IT+0xf2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2242      	movs	r2, #66	@ 0x42
 80049b8:	2102      	movs	r1, #2
 80049ba:	5499      	strb	r1, [r3, r2]
 80049bc:	e003      	b.n	80049c6 <HAL_TIM_OC_Start_IT+0xfa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2243      	movs	r2, #67	@ 0x43
 80049c2:	2102      	movs	r1, #2
 80049c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d02a      	beq.n	8004a22 <HAL_TIM_OC_Start_IT+0x156>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d830      	bhi.n	8004a34 <HAL_TIM_OC_Start_IT+0x168>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d01b      	beq.n	8004a10 <HAL_TIM_OC_Start_IT+0x144>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d82a      	bhi.n	8004a34 <HAL_TIM_OC_Start_IT+0x168>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_OC_Start_IT+0x120>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d009      	beq.n	80049fe <HAL_TIM_OC_Start_IT+0x132>
 80049ea:	e023      	b.n	8004a34 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2102      	movs	r1, #2
 80049f8:	430a      	orrs	r2, r1
 80049fa:	60da      	str	r2, [r3, #12]
      break;
 80049fc:	e01f      	b.n	8004a3e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2104      	movs	r1, #4
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	60da      	str	r2, [r3, #12]
      break;
 8004a0e:	e016      	b.n	8004a3e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2108      	movs	r1, #8
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	60da      	str	r2, [r3, #12]
      break;
 8004a20:	e00d      	b.n	8004a3e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2110      	movs	r1, #16
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	60da      	str	r2, [r3, #12]
      break;
 8004a32:	e004      	b.n	8004a3e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a34:	230f      	movs	r3, #15
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
      break;
 8004a3c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004a3e:	230f      	movs	r3, #15
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d154      	bne.n	8004af2 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	0018      	movs	r0, r3
 8004a52:	f001 fc4d 	bl	80062f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a29      	ldr	r2, [pc, #164]	@ (8004b00 <HAL_TIM_OC_Start_IT+0x234>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <HAL_TIM_OC_Start_IT+0x238>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <HAL_TIM_OC_Start_IT+0x23c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_OC_Start_IT+0x1ac>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_TIM_OC_Start_IT+0x1ae>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	0209      	lsls	r1, r1, #8
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_TIM_OC_Start_IT+0x234>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00a      	beq.n	8004ab0 <HAL_TIM_OC_Start_IT+0x1e4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	@ 0x80
 8004aa0:	05db      	lsls	r3, r3, #23
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_OC_Start_IT+0x1e4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_TIM_OC_Start_IT+0x240>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d116      	bne.n	8004ade <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <HAL_TIM_OC_Start_IT+0x244>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d016      	beq.n	8004af0 <HAL_TIM_OC_Start_IT+0x224>
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	025b      	lsls	r3, r3, #9
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d011      	beq.n	8004af0 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004adc:	e008      	b.n	8004af0 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e000      	b.n	8004af2 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004af2:	230f      	movs	r3, #15
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	781b      	ldrb	r3, [r3, #0]
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	00010007 	.word	0x00010007

08004b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e056      	b.n	8004bd4 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	223d      	movs	r2, #61	@ 0x3d
 8004b2a:	5c9b      	ldrb	r3, [r3, r2]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	223c      	movs	r2, #60	@ 0x3c
 8004b36:	2100      	movs	r1, #0
 8004b38:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f001 fbfb 	bl	8006338 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	@ (8004bdc <HAL_TIM_PWM_Init+0xc8>)
 8004b4e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	0010      	movs	r0, r2
 8004b58:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	223d      	movs	r2, #61	@ 0x3d
 8004b5e:	2102      	movs	r1, #2
 8004b60:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	0010      	movs	r0, r2
 8004b6e:	f000 fee5 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2248      	movs	r2, #72	@ 0x48
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	223e      	movs	r2, #62	@ 0x3e
 8004b7e:	2101      	movs	r1, #1
 8004b80:	5499      	strb	r1, [r3, r2]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	223f      	movs	r2, #63	@ 0x3f
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2240      	movs	r2, #64	@ 0x40
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5499      	strb	r1, [r3, r2]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2241      	movs	r2, #65	@ 0x41
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2242      	movs	r2, #66	@ 0x42
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2243      	movs	r2, #67	@ 0x43
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2244      	movs	r2, #68	@ 0x44
 8004bae:	2101      	movs	r1, #1
 8004bb0:	5499      	strb	r1, [r3, r2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2245      	movs	r2, #69	@ 0x45
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2246      	movs	r2, #70	@ 0x46
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	5499      	strb	r1, [r3, r2]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2247      	movs	r2, #71	@ 0x47
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	223d      	movs	r2, #61	@ 0x3d
 8004bce:	2101      	movs	r1, #1
 8004bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08004be1 	.word	0x08004be1

08004be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be8:	46c0      	nop			@ (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d108      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x22>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	223e      	movs	r2, #62	@ 0x3e
 8004c04:	5c9b      	ldrb	r3, [r3, r2]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	4193      	sbcs	r3, r2
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	e037      	b.n	8004c82 <HAL_TIM_PWM_Start+0x92>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d108      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x3a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223f      	movs	r2, #63	@ 0x3f
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	4193      	sbcs	r3, r2
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e02b      	b.n	8004c82 <HAL_TIM_PWM_Start+0x92>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d108      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x52>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	@ 0x40
 8004c34:	5c9b      	ldrb	r3, [r3, r2]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	4193      	sbcs	r3, r2
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e01f      	b.n	8004c82 <HAL_TIM_PWM_Start+0x92>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d108      	bne.n	8004c5a <HAL_TIM_PWM_Start+0x6a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2241      	movs	r2, #65	@ 0x41
 8004c4c:	5c9b      	ldrb	r3, [r3, r2]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	4193      	sbcs	r3, r2
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e013      	b.n	8004c82 <HAL_TIM_PWM_Start+0x92>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d108      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x82>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2242      	movs	r2, #66	@ 0x42
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	1e5a      	subs	r2, r3, #1
 8004c6c:	4193      	sbcs	r3, r2
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e007      	b.n	8004c82 <HAL_TIM_PWM_Start+0x92>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2243      	movs	r2, #67	@ 0x43
 8004c76:	5c9b      	ldrb	r3, [r3, r2]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	4193      	sbcs	r3, r2
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e081      	b.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_PWM_Start+0xaa>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	223e      	movs	r2, #62	@ 0x3e
 8004c94:	2102      	movs	r1, #2
 8004c96:	5499      	strb	r1, [r3, r2]
 8004c98:	e023      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xf2>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_Start+0xba>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	223f      	movs	r2, #63	@ 0x3f
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	5499      	strb	r1, [r3, r2]
 8004ca8:	e01b      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xf2>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_PWM_Start+0xca>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2240      	movs	r2, #64	@ 0x40
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	5499      	strb	r1, [r3, r2]
 8004cb8:	e013      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xf2>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_PWM_Start+0xda>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2241      	movs	r2, #65	@ 0x41
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	5499      	strb	r1, [r3, r2]
 8004cc8:	e00b      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xf2>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_PWM_Start+0xea>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2242      	movs	r2, #66	@ 0x42
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	5499      	strb	r1, [r3, r2]
 8004cd8:	e003      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xf2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2243      	movs	r2, #67	@ 0x43
 8004cde:	2102      	movs	r1, #2
 8004ce0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	0018      	movs	r0, r3
 8004cec:	f001 fb00 	bl	80062f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a28      	ldr	r2, [pc, #160]	@ (8004d98 <HAL_TIM_PWM_Start+0x1a8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_TIM_PWM_Start+0x11e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a27      	ldr	r2, [pc, #156]	@ (8004d9c <HAL_TIM_PWM_Start+0x1ac>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_TIM_PWM_Start+0x11e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a25      	ldr	r2, [pc, #148]	@ (8004da0 <HAL_TIM_PWM_Start+0x1b0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x122>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <HAL_TIM_PWM_Start+0x124>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2180      	movs	r1, #128	@ 0x80
 8004d24:	0209      	lsls	r1, r1, #8
 8004d26:	430a      	orrs	r2, r1
 8004d28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d98 <HAL_TIM_PWM_Start+0x1a8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00a      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x15a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	@ 0x80
 8004d3a:	05db      	lsls	r3, r3, #23
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x15a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_TIM_PWM_Start+0x1b4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d116      	bne.n	8004d78 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a15      	ldr	r2, [pc, #84]	@ (8004da8 <HAL_TIM_PWM_Start+0x1b8>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d016      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x19a>
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	025b      	lsls	r3, r3, #9
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d011      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2101      	movs	r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	e008      	b.n	8004d8a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2101      	movs	r1, #1
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800
 8004da4:	40000400 	.word	0x40000400
 8004da8:	00010007 	.word	0x00010007

08004dac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e056      	b.n	8004e6c <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	223d      	movs	r2, #61	@ 0x3d
 8004dc2:	5c9b      	ldrb	r3, [r3, r2]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d113      	bne.n	8004df2 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	223c      	movs	r2, #60	@ 0x3c
 8004dce:	2100      	movs	r1, #0
 8004dd0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f001 faaf 	bl	8006338 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a23      	ldr	r2, [pc, #140]	@ (8004e74 <HAL_TIM_IC_Init+0xc8>)
 8004de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	0010      	movs	r0, r2
 8004df0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	223d      	movs	r2, #61	@ 0x3d
 8004df6:	2102      	movs	r1, #2
 8004df8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	0019      	movs	r1, r3
 8004e04:	0010      	movs	r0, r2
 8004e06:	f000 fd99 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2248      	movs	r2, #72	@ 0x48
 8004e0e:	2101      	movs	r1, #1
 8004e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	223e      	movs	r2, #62	@ 0x3e
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223f      	movs	r2, #63	@ 0x3f
 8004e1e:	2101      	movs	r1, #1
 8004e20:	5499      	strb	r1, [r3, r2]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2240      	movs	r2, #64	@ 0x40
 8004e26:	2101      	movs	r1, #1
 8004e28:	5499      	strb	r1, [r3, r2]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2241      	movs	r2, #65	@ 0x41
 8004e2e:	2101      	movs	r1, #1
 8004e30:	5499      	strb	r1, [r3, r2]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2242      	movs	r2, #66	@ 0x42
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2243      	movs	r2, #67	@ 0x43
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2244      	movs	r2, #68	@ 0x44
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2245      	movs	r2, #69	@ 0x45
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2246      	movs	r2, #70	@ 0x46
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2247      	movs	r2, #71	@ 0x47
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	223d      	movs	r2, #61	@ 0x3d
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	08004e79 	.word	0x08004e79

08004e78 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e80:	46c0      	nop			@ (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b002      	add	sp, #8
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d027      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4013      	ands	r3, r2
 8004eae:	d023      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	4252      	negs	r2, r2
 8004eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d006      	beq.n	8004eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2294      	movs	r2, #148	@ 0x94
 8004ed0:	589b      	ldr	r3, [r3, r2]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	4798      	blx	r3
 8004ed8:	e00b      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	229c      	movs	r2, #156	@ 0x9c
 8004ede:	589b      	ldr	r3, [r3, r2]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	0010      	movs	r0, r2
 8004ee4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	22a0      	movs	r2, #160	@ 0xa0
 8004eea:	589b      	ldr	r3, [r3, r2]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	0010      	movs	r0, r2
 8004ef0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2204      	movs	r2, #4
 8004efc:	4013      	ands	r3, r2
 8004efe:	d028      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2204      	movs	r2, #4
 8004f04:	4013      	ands	r3, r2
 8004f06:	d024      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	4252      	negs	r2, r2
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	23c0      	movs	r3, #192	@ 0xc0
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4013      	ands	r3, r2
 8004f24:	d006      	beq.n	8004f34 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2294      	movs	r2, #148	@ 0x94
 8004f2a:	589b      	ldr	r3, [r3, r2]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	0010      	movs	r0, r2
 8004f30:	4798      	blx	r3
 8004f32:	e00b      	b.n	8004f4c <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	229c      	movs	r2, #156	@ 0x9c
 8004f38:	589b      	ldr	r3, [r3, r2]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	22a0      	movs	r2, #160	@ 0xa0
 8004f44:	589b      	ldr	r3, [r3, r2]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	0010      	movs	r0, r2
 8004f4a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4013      	ands	r3, r2
 8004f58:	d027      	beq.n	8004faa <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d023      	beq.n	8004faa <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2209      	movs	r2, #9
 8004f68:	4252      	negs	r2, r2
 8004f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d006      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2294      	movs	r2, #148	@ 0x94
 8004f82:	589b      	ldr	r3, [r3, r2]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	0010      	movs	r0, r2
 8004f88:	4798      	blx	r3
 8004f8a:	e00b      	b.n	8004fa4 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	229c      	movs	r2, #156	@ 0x9c
 8004f90:	589b      	ldr	r3, [r3, r2]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	0010      	movs	r0, r2
 8004f96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	22a0      	movs	r2, #160	@ 0xa0
 8004f9c:	589b      	ldr	r3, [r3, r2]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	0010      	movs	r0, r2
 8004fa2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2210      	movs	r2, #16
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d028      	beq.n	8005004 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d024      	beq.n	8005004 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2211      	movs	r2, #17
 8004fc0:	4252      	negs	r2, r2
 8004fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	23c0      	movs	r3, #192	@ 0xc0
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d006      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2294      	movs	r2, #148	@ 0x94
 8004fdc:	589b      	ldr	r3, [r3, r2]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	0010      	movs	r0, r2
 8004fe2:	4798      	blx	r3
 8004fe4:	e00b      	b.n	8004ffe <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	229c      	movs	r2, #156	@ 0x9c
 8004fea:	589b      	ldr	r3, [r3, r2]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	0010      	movs	r0, r2
 8004ff0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	22a0      	movs	r2, #160	@ 0xa0
 8004ff6:	589b      	ldr	r3, [r3, r2]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	0010      	movs	r0, r2
 8004ffc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	4013      	ands	r3, r2
 8005012:	d00a      	beq.n	800502a <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2202      	movs	r2, #2
 800501a:	4252      	negs	r2, r2
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2284      	movs	r2, #132	@ 0x84
 8005022:	589b      	ldr	r3, [r3, r2]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	0010      	movs	r0, r2
 8005028:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2280      	movs	r2, #128	@ 0x80
 800502e:	4013      	ands	r3, r2
 8005030:	d104      	bne.n	800503c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	2380      	movs	r3, #128	@ 0x80
 8005036:	019b      	lsls	r3, r3, #6
 8005038:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800503a:	d00d      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2280      	movs	r2, #128	@ 0x80
 8005040:	4013      	ands	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a22      	ldr	r2, [pc, #136]	@ (80050d4 <HAL_TIM_IRQHandler+0x24c>)
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	22b4      	movs	r2, #180	@ 0xb4
 8005050:	589b      	ldr	r3, [r3, r2]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	0010      	movs	r0, r2
 8005056:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4013      	ands	r3, r2
 8005060:	d00d      	beq.n	800507e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2280      	movs	r2, #128	@ 0x80
 8005066:	4013      	ands	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1a      	ldr	r2, [pc, #104]	@ (80050d8 <HAL_TIM_IRQHandler+0x250>)
 8005070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	22b8      	movs	r2, #184	@ 0xb8
 8005076:	589b      	ldr	r3, [r3, r2]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	0010      	movs	r0, r2
 800507c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2240      	movs	r2, #64	@ 0x40
 8005082:	4013      	ands	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2240      	movs	r2, #64	@ 0x40
 800508a:	4013      	ands	r3, r2
 800508c:	d00a      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2241      	movs	r2, #65	@ 0x41
 8005094:	4252      	negs	r2, r2
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	228c      	movs	r2, #140	@ 0x8c
 800509c:	589b      	ldr	r3, [r3, r2]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	0010      	movs	r0, r2
 80050a2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2220      	movs	r2, #32
 80050a8:	4013      	ands	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	4013      	ands	r3, r2
 80050b2:	d00a      	beq.n	80050ca <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2221      	movs	r2, #33	@ 0x21
 80050ba:	4252      	negs	r2, r2
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	22ac      	movs	r2, #172	@ 0xac
 80050c2:	589b      	ldr	r3, [r3, r2]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	0010      	movs	r0, r2
 80050c8:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	ffffdf7f 	.word	0xffffdf7f
 80050d8:	fffffeff 	.word	0xfffffeff

080050dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2317      	movs	r3, #23
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	223c      	movs	r2, #60	@ 0x3c
 80050f4:	5c9b      	ldrb	r3, [r3, r2]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_OC_ConfigChannel+0x22>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e048      	b.n	8005190 <HAL_TIM_OC_ConfigChannel+0xb4>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	223c      	movs	r2, #60	@ 0x3c
 8005102:	2101      	movs	r1, #1
 8005104:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b14      	cmp	r3, #20
 800510a:	d835      	bhi.n	8005178 <HAL_TIM_OC_ConfigChannel+0x9c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8005112:	18d3      	adds	r3, r2, r3
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	0011      	movs	r1, r2
 8005120:	0018      	movs	r0, r3
 8005122:	f000 fc8f 	bl	8005a44 <TIM_OC1_SetConfig>
      break;
 8005126:	e02c      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0011      	movs	r1, r2
 8005130:	0018      	movs	r0, r3
 8005132:	f000 fd07 	bl	8005b44 <TIM_OC2_SetConfig>
      break;
 8005136:	e024      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	0011      	movs	r1, r2
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fd7d 	bl	8005c40 <TIM_OC3_SetConfig>
      break;
 8005146:	e01c      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	0011      	movs	r1, r2
 8005150:	0018      	movs	r0, r3
 8005152:	f000 fdf7 	bl	8005d44 <TIM_OC4_SetConfig>
      break;
 8005156:	e014      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	0011      	movs	r1, r2
 8005160:	0018      	movs	r0, r3
 8005162:	f000 fe53 	bl	8005e0c <TIM_OC5_SetConfig>
      break;
 8005166:	e00c      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	0011      	movs	r1, r2
 8005170:	0018      	movs	r0, r3
 8005172:	f000 fea5 	bl	8005ec0 <TIM_OC6_SetConfig>
      break;
 8005176:	e004      	b.n	8005182 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005178:	2317      	movs	r3, #23
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
      break;
 8005180:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	223c      	movs	r2, #60	@ 0x3c
 8005186:	2100      	movs	r1, #0
 8005188:	5499      	strb	r1, [r3, r2]

  return status;
 800518a:	2317      	movs	r3, #23
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	781b      	ldrb	r3, [r3, #0]
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b006      	add	sp, #24
 8005196:	bd80      	pop	{r7, pc}
 8005198:	08007944 	.word	0x08007944

0800519c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2317      	movs	r3, #23
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	223c      	movs	r2, #60	@ 0x3c
 80051b4:	5c9b      	ldrb	r3, [r3, r2]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_TIM_IC_ConfigChannel+0x22>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e08c      	b.n	80052d8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	223c      	movs	r2, #60	@ 0x3c
 80051c2:	2101      	movs	r1, #1
 80051c4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80051dc:	f000 fece 	bl	8005f7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	210c      	movs	r1, #12
 80051ec:	438a      	bics	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6999      	ldr	r1, [r3, #24]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	619a      	str	r2, [r3, #24]
 8005202:	e062      	b.n	80052ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b04      	cmp	r3, #4
 8005208:	d11c      	bne.n	8005244 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800521a:	f000 ff33 	bl	8006084 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	492d      	ldr	r1, [pc, #180]	@ (80052e0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800522a:	400a      	ands	r2, r1
 800522c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6999      	ldr	r1, [r3, #24]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	021a      	lsls	r2, r3, #8
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	619a      	str	r2, [r3, #24]
 8005242:	e042      	b.n	80052ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b08      	cmp	r3, #8
 8005248:	d11b      	bne.n	8005282 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800525a:	f000 ff87 	bl	800616c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	210c      	movs	r1, #12
 800526a:	438a      	bics	r2, r1
 800526c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69d9      	ldr	r1, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	61da      	str	r2, [r3, #28]
 8005280:	e023      	b.n	80052ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d11c      	bne.n	80052c2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005298:	f000 ffa8 	bl	80061ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	490e      	ldr	r1, [pc, #56]	@ (80052e0 <HAL_TIM_IC_ConfigChannel+0x144>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69d9      	ldr	r1, [r3, #28]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	61da      	str	r2, [r3, #28]
 80052c0:	e003      	b.n	80052ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80052c2:	2317      	movs	r3, #23
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	223c      	movs	r2, #60	@ 0x3c
 80052ce:	2100      	movs	r1, #0
 80052d0:	5499      	strb	r1, [r3, r2]

  return status;
 80052d2:	2317      	movs	r3, #23
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	781b      	ldrb	r3, [r3, #0]
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b006      	add	sp, #24
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	fffff3ff 	.word	0xfffff3ff

080052e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f0:	2317      	movs	r3, #23
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	223c      	movs	r2, #60	@ 0x3c
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005302:	2302      	movs	r3, #2
 8005304:	e0e5      	b.n	80054d2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	223c      	movs	r2, #60	@ 0x3c
 800530a:	2101      	movs	r1, #1
 800530c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b14      	cmp	r3, #20
 8005312:	d900      	bls.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005314:	e0d1      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	009a      	lsls	r2, r3, #2
 800531a:	4b70      	ldr	r3, [pc, #448]	@ (80054dc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800531c:	18d3      	adds	r3, r2, r3
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	0011      	movs	r1, r2
 800532a:	0018      	movs	r0, r3
 800532c:	f000 fb8a 	bl	8005a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2108      	movs	r1, #8
 800533c:	430a      	orrs	r2, r1
 800533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2104      	movs	r1, #4
 800534c:	438a      	bics	r2, r1
 800534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6999      	ldr	r1, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	619a      	str	r2, [r3, #24]
      break;
 8005362:	e0af      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	0011      	movs	r1, r2
 800536c:	0018      	movs	r0, r3
 800536e:	f000 fbe9 	bl	8005b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2180      	movs	r1, #128	@ 0x80
 800537e:	0109      	lsls	r1, r1, #4
 8005380:	430a      	orrs	r2, r1
 8005382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4954      	ldr	r1, [pc, #336]	@ (80054e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005390:	400a      	ands	r2, r1
 8005392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	021a      	lsls	r2, r3, #8
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	619a      	str	r2, [r3, #24]
      break;
 80053a8:	e08c      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	0011      	movs	r1, r2
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 fc44 	bl	8005c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2108      	movs	r1, #8
 80053c4:	430a      	orrs	r2, r1
 80053c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69da      	ldr	r2, [r3, #28]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2104      	movs	r1, #4
 80053d4:	438a      	bics	r2, r1
 80053d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69d9      	ldr	r1, [r3, #28]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	61da      	str	r2, [r3, #28]
      break;
 80053ea:	e06b      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 fca5 	bl	8005d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2180      	movs	r1, #128	@ 0x80
 8005406:	0109      	lsls	r1, r1, #4
 8005408:	430a      	orrs	r2, r1
 800540a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4932      	ldr	r1, [pc, #200]	@ (80054e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005418:	400a      	ands	r2, r1
 800541a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69d9      	ldr	r1, [r3, #28]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	021a      	lsls	r2, r3, #8
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	61da      	str	r2, [r3, #28]
      break;
 8005430:	e048      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0011      	movs	r1, r2
 800543a:	0018      	movs	r0, r3
 800543c:	f000 fce6 	bl	8005e0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2108      	movs	r1, #8
 800544c:	430a      	orrs	r2, r1
 800544e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2104      	movs	r1, #4
 800545c:	438a      	bics	r2, r1
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005472:	e027      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	0011      	movs	r1, r2
 800547c:	0018      	movs	r0, r3
 800547e:	f000 fd1f 	bl	8005ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2180      	movs	r1, #128	@ 0x80
 800548e:	0109      	lsls	r1, r1, #4
 8005490:	430a      	orrs	r2, r1
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4910      	ldr	r1, [pc, #64]	@ (80054e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054b8:	e004      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80054ba:	2317      	movs	r3, #23
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
      break;
 80054c2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	223c      	movs	r2, #60	@ 0x3c
 80054c8:	2100      	movs	r1, #0
 80054ca:	5499      	strb	r1, [r3, r2]

  return status;
 80054cc:	2317      	movs	r3, #23
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	781b      	ldrb	r3, [r3, #0]
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b006      	add	sp, #24
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	08007998 	.word	0x08007998
 80054e0:	fffffbff 	.word	0xfffffbff

080054e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	230f      	movs	r3, #15
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	223c      	movs	r2, #60	@ 0x3c
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_ConfigClockSource+0x20>
 8005500:	2302      	movs	r3, #2
 8005502:	e0bc      	b.n	800567e <HAL_TIM_ConfigClockSource+0x19a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	223c      	movs	r2, #60	@ 0x3c
 8005508:	2101      	movs	r1, #1
 800550a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	223d      	movs	r2, #61	@ 0x3d
 8005510:	2102      	movs	r1, #2
 8005512:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a5a      	ldr	r2, [pc, #360]	@ (8005688 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005520:	4013      	ands	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a59      	ldr	r2, [pc, #356]	@ (800568c <HAL_TIM_ConfigClockSource+0x1a8>)
 8005528:	4013      	ands	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2280      	movs	r2, #128	@ 0x80
 800553a:	0192      	lsls	r2, r2, #6
 800553c:	4293      	cmp	r3, r2
 800553e:	d040      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xde>
 8005540:	2280      	movs	r2, #128	@ 0x80
 8005542:	0192      	lsls	r2, r2, #6
 8005544:	4293      	cmp	r3, r2
 8005546:	d900      	bls.n	800554a <HAL_TIM_ConfigClockSource+0x66>
 8005548:	e088      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 800554a:	2280      	movs	r2, #128	@ 0x80
 800554c:	0152      	lsls	r2, r2, #5
 800554e:	4293      	cmp	r3, r2
 8005550:	d100      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x70>
 8005552:	e088      	b.n	8005666 <HAL_TIM_ConfigClockSource+0x182>
 8005554:	2280      	movs	r2, #128	@ 0x80
 8005556:	0152      	lsls	r2, r2, #5
 8005558:	4293      	cmp	r3, r2
 800555a:	d900      	bls.n	800555e <HAL_TIM_ConfigClockSource+0x7a>
 800555c:	e07e      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 800555e:	2b70      	cmp	r3, #112	@ 0x70
 8005560:	d018      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0xb0>
 8005562:	d900      	bls.n	8005566 <HAL_TIM_ConfigClockSource+0x82>
 8005564:	e07a      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 8005566:	2b60      	cmp	r3, #96	@ 0x60
 8005568:	d04f      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x126>
 800556a:	d900      	bls.n	800556e <HAL_TIM_ConfigClockSource+0x8a>
 800556c:	e076      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 800556e:	2b50      	cmp	r3, #80	@ 0x50
 8005570:	d03b      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x106>
 8005572:	d900      	bls.n	8005576 <HAL_TIM_ConfigClockSource+0x92>
 8005574:	e072      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d057      	beq.n	800562a <HAL_TIM_ConfigClockSource+0x146>
 800557a:	d900      	bls.n	800557e <HAL_TIM_ConfigClockSource+0x9a>
 800557c:	e06e      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 800557e:	2b30      	cmp	r3, #48	@ 0x30
 8005580:	d063      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x166>
 8005582:	d86b      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d060      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x166>
 8005588:	d868      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x178>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d05d      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x166>
 800558e:	2b10      	cmp	r3, #16
 8005590:	d05b      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x166>
 8005592:	e063      	b.n	800565c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a4:	f000 fe84 	bl	80062b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2277      	movs	r2, #119	@ 0x77
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	609a      	str	r2, [r3, #8]
      break;
 80055c0:	e052      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055d2:	f000 fe6d 	bl	80062b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2180      	movs	r1, #128	@ 0x80
 80055e2:	01c9      	lsls	r1, r1, #7
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
      break;
 80055e8:	e03e      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f6:	001a      	movs	r2, r3
 80055f8:	f000 fd16 	bl	8006028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2150      	movs	r1, #80	@ 0x50
 8005602:	0018      	movs	r0, r3
 8005604:	f000 fe38 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005608:	e02e      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005616:	001a      	movs	r2, r3
 8005618:	f000 fd76 	bl	8006108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2160      	movs	r1, #96	@ 0x60
 8005622:	0018      	movs	r0, r3
 8005624:	f000 fe28 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005628:	e01e      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	001a      	movs	r2, r3
 8005638:	f000 fcf6 	bl	8006028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2140      	movs	r1, #64	@ 0x40
 8005642:	0018      	movs	r0, r3
 8005644:	f000 fe18 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005648:	e00e      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	0019      	movs	r1, r3
 8005654:	0010      	movs	r0, r2
 8005656:	f000 fe0f 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 800565a:	e005      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800565c:	230f      	movs	r3, #15
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
      break;
 8005664:	e000      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005666:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	223d      	movs	r2, #61	@ 0x3d
 800566c:	2101      	movs	r1, #1
 800566e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	223c      	movs	r2, #60	@ 0x3c
 8005674:	2100      	movs	r1, #0
 8005676:	5499      	strb	r1, [r3, r2]

  return status;
 8005678:	230f      	movs	r3, #15
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	781b      	ldrb	r3, [r3, #0]
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b004      	add	sp, #16
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	ffceff88 	.word	0xffceff88
 800568c:	ffff00ff 	.word	0xffff00ff

08005690 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b002      	add	sp, #8
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b002      	add	sp, #8
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c8:	46c0      	nop			@ (mov r8, r8)
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b002      	add	sp, #8
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80056d8:	46c0      	nop			@ (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e8:	46c0      	nop			@ (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b002      	add	sp, #8
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b002      	add	sp, #8
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005708:	46c0      	nop			@ (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005718:	46c0      	nop			@ (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b002      	add	sp, #8
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005728:	46c0      	nop			@ (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	230b      	movs	r3, #11
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	1c0a      	adds	r2, r1, #0
 8005740:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2317      	movs	r3, #23
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0ea      	b.n	800592a <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	223d      	movs	r2, #61	@ 0x3d
 8005758:	5c9b      	ldrb	r3, [r3, r2]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d000      	beq.n	8005762 <HAL_TIM_RegisterCallback+0x32>
 8005760:	e08e      	b.n	8005880 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8005762:	230b      	movs	r3, #11
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b1b      	cmp	r3, #27
 800576a:	d900      	bls.n	800576e <HAL_TIM_RegisterCallback+0x3e>
 800576c:	e083      	b.n	8005876 <HAL_TIM_RegisterCallback+0x146>
 800576e:	009a      	lsls	r2, r3, #2
 8005770:	4b70      	ldr	r3, [pc, #448]	@ (8005934 <HAL_TIM_RegisterCallback+0x204>)
 8005772:	18d3      	adds	r3, r2, r3
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800577e:	e0d1      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005786:	e0cd      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800578e:	e0c9      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8005796:	e0c5      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800579e:	e0c1      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80057a6:	e0bd      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80057ae:	e0b9      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80057b6:	e0b5      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80057be:	e0b1      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80057c6:	e0ad      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80057ce:	e0a9      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80057d6:	e0a5      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80057de:	e0a1      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	505a      	str	r2, [r3, r1]
        break;
 80057e8:	e09c      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2184      	movs	r1, #132	@ 0x84
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	505a      	str	r2, [r3, r1]
        break;
 80057f2:	e097      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2188      	movs	r1, #136	@ 0x88
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	505a      	str	r2, [r3, r1]
        break;
 80057fc:	e092      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	218c      	movs	r1, #140	@ 0x8c
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	505a      	str	r2, [r3, r1]
        break;
 8005806:	e08d      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2190      	movs	r1, #144	@ 0x90
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	505a      	str	r2, [r3, r1]
        break;
 8005810:	e088      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2194      	movs	r1, #148	@ 0x94
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	505a      	str	r2, [r3, r1]
        break;
 800581a:	e083      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2198      	movs	r1, #152	@ 0x98
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	505a      	str	r2, [r3, r1]
        break;
 8005824:	e07e      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	219c      	movs	r1, #156	@ 0x9c
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	505a      	str	r2, [r3, r1]
        break;
 800582e:	e079      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	21a0      	movs	r1, #160	@ 0xa0
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	505a      	str	r2, [r3, r1]
        break;
 8005838:	e074      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	21a4      	movs	r1, #164	@ 0xa4
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	505a      	str	r2, [r3, r1]
        break;
 8005842:	e06f      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	21a8      	movs	r1, #168	@ 0xa8
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	505a      	str	r2, [r3, r1]
        break;
 800584c:	e06a      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	21ac      	movs	r1, #172	@ 0xac
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	505a      	str	r2, [r3, r1]
        break;
 8005856:	e065      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	21b0      	movs	r1, #176	@ 0xb0
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	505a      	str	r2, [r3, r1]
        break;
 8005860:	e060      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	21b4      	movs	r1, #180	@ 0xb4
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	505a      	str	r2, [r3, r1]
        break;
 800586a:	e05b      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	21b8      	movs	r1, #184	@ 0xb8
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	505a      	str	r2, [r3, r1]
        break;
 8005874:	e056      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005876:	2317      	movs	r3, #23
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
        break;
 800587e:	e051      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	223d      	movs	r2, #61	@ 0x3d
 8005884:	5c9b      	ldrb	r3, [r3, r2]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d147      	bne.n	800591c <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800588c:	230b      	movs	r3, #11
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b0d      	cmp	r3, #13
 8005894:	d83d      	bhi.n	8005912 <HAL_TIM_RegisterCallback+0x1e2>
 8005896:	009a      	lsls	r2, r3, #2
 8005898:	4b27      	ldr	r3, [pc, #156]	@ (8005938 <HAL_TIM_RegisterCallback+0x208>)
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80058a6:	e03d      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80058ae:	e039      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80058b6:	e035      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80058be:	e031      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80058c6:	e02d      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80058ce:	e029      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80058d6:	e025      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80058de:	e021      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80058e6:	e01d      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80058ee:	e019      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80058f6:	e015      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80058fe:	e011      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8005906:	e00d      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2180      	movs	r1, #128	@ 0x80
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	505a      	str	r2, [r3, r1]
        break;
 8005910:	e008      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005912:	2317      	movs	r3, #23
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
        break;
 800591a:	e003      	b.n	8005924 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800591c:	2317      	movs	r3, #23
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005924:	2317      	movs	r3, #23
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	781b      	ldrb	r3, [r3, #0]
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b006      	add	sp, #24
 8005930:	bd80      	pop	{r7, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	080079ec 	.word	0x080079ec
 8005938:	08007a5c 	.word	0x08007a5c

0800593c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a37      	ldr	r2, [pc, #220]	@ (8005a2c <TIM_Base_SetConfig+0xf0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d008      	beq.n	8005966 <TIM_Base_SetConfig+0x2a>
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	05db      	lsls	r3, r3, #23
 800595a:	429a      	cmp	r2, r3
 800595c:	d003      	beq.n	8005966 <TIM_Base_SetConfig+0x2a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a33      	ldr	r2, [pc, #204]	@ (8005a30 <TIM_Base_SetConfig+0xf4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d108      	bne.n	8005978 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2270      	movs	r2, #112	@ 0x70
 800596a:	4393      	bics	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a2c <TIM_Base_SetConfig+0xf0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d014      	beq.n	80059aa <TIM_Base_SetConfig+0x6e>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	05db      	lsls	r3, r3, #23
 8005986:	429a      	cmp	r2, r3
 8005988:	d00f      	beq.n	80059aa <TIM_Base_SetConfig+0x6e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a28      	ldr	r2, [pc, #160]	@ (8005a30 <TIM_Base_SetConfig+0xf4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00b      	beq.n	80059aa <TIM_Base_SetConfig+0x6e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a27      	ldr	r2, [pc, #156]	@ (8005a34 <TIM_Base_SetConfig+0xf8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_Base_SetConfig+0x6e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a26      	ldr	r2, [pc, #152]	@ (8005a38 <TIM_Base_SetConfig+0xfc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_Base_SetConfig+0x6e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	@ (8005a3c <TIM_Base_SetConfig+0x100>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d108      	bne.n	80059bc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4a24      	ldr	r2, [pc, #144]	@ (8005a40 <TIM_Base_SetConfig+0x104>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2280      	movs	r2, #128	@ 0x80
 80059c0:	4393      	bics	r3, r2
 80059c2:	001a      	movs	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a11      	ldr	r2, [pc, #68]	@ (8005a2c <TIM_Base_SetConfig+0xf0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_Base_SetConfig+0xbe>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <TIM_Base_SetConfig+0xfc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_Base_SetConfig+0xbe>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <TIM_Base_SetConfig+0x100>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d103      	bne.n	8005a02 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4393      	bics	r3, r2
 8005a1c:	001a      	movs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]
  }
}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b004      	add	sp, #16
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40002000 	.word	0x40002000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800
 8005a40:	fffffcff 	.word	0xfffffcff

08005a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	4393      	bics	r3, r2
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a2e      	ldr	r2, [pc, #184]	@ (8005b2c <TIM_OC1_SetConfig+0xe8>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4393      	bics	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a24      	ldr	r2, [pc, #144]	@ (8005b30 <TIM_OC1_SetConfig+0xec>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_OC1_SetConfig+0x6e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a23      	ldr	r2, [pc, #140]	@ (8005b34 <TIM_OC1_SetConfig+0xf0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC1_SetConfig+0x6e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a22      	ldr	r2, [pc, #136]	@ (8005b38 <TIM_OC1_SetConfig+0xf4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10c      	bne.n	8005acc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	4393      	bics	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	4393      	bics	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <TIM_OC1_SetConfig+0xec>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_OC1_SetConfig+0xa0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	@ (8005b34 <TIM_OC1_SetConfig+0xf0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC1_SetConfig+0xa0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <TIM_OC1_SetConfig+0xf4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d111      	bne.n	8005b08 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <TIM_OC1_SetConfig+0xf8>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4a14      	ldr	r2, [pc, #80]	@ (8005b40 <TIM_OC1_SetConfig+0xfc>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b006      	add	sp, #24
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	fffeff8f 	.word	0xfffeff8f
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	fffffeff 	.word	0xfffffeff
 8005b40:	fffffdff 	.word	0xfffffdff

08005b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	2210      	movs	r2, #16
 8005b5a:	4393      	bics	r3, r2
 8005b5c:	001a      	movs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a2c      	ldr	r2, [pc, #176]	@ (8005c24 <TIM_OC2_SetConfig+0xe0>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a2b      	ldr	r2, [pc, #172]	@ (8005c28 <TIM_OC2_SetConfig+0xe4>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	4393      	bics	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a22      	ldr	r2, [pc, #136]	@ (8005c2c <TIM_OC2_SetConfig+0xe8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10d      	bne.n	8005bc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2280      	movs	r2, #128	@ 0x80
 8005baa:	4393      	bics	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2240      	movs	r2, #64	@ 0x40
 8005bbe:	4393      	bics	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a19      	ldr	r2, [pc, #100]	@ (8005c2c <TIM_OC2_SetConfig+0xe8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <TIM_OC2_SetConfig+0x96>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	@ (8005c30 <TIM_OC2_SetConfig+0xec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC2_SetConfig+0x96>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a17      	ldr	r2, [pc, #92]	@ (8005c34 <TIM_OC2_SetConfig+0xf0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d113      	bne.n	8005c02 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4a16      	ldr	r2, [pc, #88]	@ (8005c38 <TIM_OC2_SetConfig+0xf4>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <TIM_OC2_SetConfig+0xf8>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b006      	add	sp, #24
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	feff8fff 	.word	0xfeff8fff
 8005c28:	fffffcff 	.word	0xfffffcff
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	fffffbff 	.word	0xfffffbff
 8005c3c:	fffff7ff 	.word	0xfffff7ff

08005c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4a31      	ldr	r2, [pc, #196]	@ (8005d1c <TIM_OC3_SetConfig+0xdc>)
 8005c56:	401a      	ands	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d20 <TIM_OC3_SetConfig+0xe0>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2203      	movs	r2, #3
 8005c74:	4393      	bics	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4a27      	ldr	r2, [pc, #156]	@ (8005d24 <TIM_OC3_SetConfig+0xe4>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a23      	ldr	r2, [pc, #140]	@ (8005d28 <TIM_OC3_SetConfig+0xe8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10d      	bne.n	8005cba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4a22      	ldr	r2, [pc, #136]	@ (8005d2c <TIM_OC3_SetConfig+0xec>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005d30 <TIM_OC3_SetConfig+0xf0>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d28 <TIM_OC3_SetConfig+0xe8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_OC3_SetConfig+0x92>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d34 <TIM_OC3_SetConfig+0xf4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_OC3_SetConfig+0x92>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d38 <TIM_OC3_SetConfig+0xf8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d113      	bne.n	8005cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4a19      	ldr	r2, [pc, #100]	@ (8005d3c <TIM_OC3_SetConfig+0xfc>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	@ (8005d40 <TIM_OC3_SetConfig+0x100>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b006      	add	sp, #24
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	fffffeff 	.word	0xfffffeff
 8005d20:	fffeff8f 	.word	0xfffeff8f
 8005d24:	fffffdff 	.word	0xfffffdff
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	fffff7ff 	.word	0xfffff7ff
 8005d30:	fffffbff 	.word	0xfffffbff
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	ffffefff 	.word	0xffffefff
 8005d40:	ffffdfff 	.word	0xffffdfff

08005d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	4a24      	ldr	r2, [pc, #144]	@ (8005dec <TIM_OC4_SetConfig+0xa8>)
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a20      	ldr	r2, [pc, #128]	@ (8005df0 <TIM_OC4_SetConfig+0xac>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <TIM_OC4_SetConfig+0xb0>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <TIM_OC4_SetConfig+0xb4>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	@ (8005dfc <TIM_OC4_SetConfig+0xb8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC4_SetConfig+0x70>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <TIM_OC4_SetConfig+0xbc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC4_SetConfig+0x70>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a15      	ldr	r2, [pc, #84]	@ (8005e04 <TIM_OC4_SetConfig+0xc0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d109      	bne.n	8005dc8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	4a14      	ldr	r2, [pc, #80]	@ (8005e08 <TIM_OC4_SetConfig+0xc4>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b006      	add	sp, #24
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	ffffefff 	.word	0xffffefff
 8005df0:	feff8fff 	.word	0xfeff8fff
 8005df4:	fffffcff 	.word	0xfffffcff
 8005df8:	ffffdfff 	.word	0xffffdfff
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	ffffbfff 	.word	0xffffbfff

08005e0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	4a21      	ldr	r2, [pc, #132]	@ (8005ea8 <TIM_OC5_SetConfig+0x9c>)
 8005e22:	401a      	ands	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a1d      	ldr	r2, [pc, #116]	@ (8005eac <TIM_OC5_SetConfig+0xa0>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <TIM_OC5_SetConfig+0xa4>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <TIM_OC5_SetConfig+0xa8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC5_SetConfig+0x66>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a14      	ldr	r2, [pc, #80]	@ (8005eb8 <TIM_OC5_SetConfig+0xac>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC5_SetConfig+0x66>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	@ (8005ebc <TIM_OC5_SetConfig+0xb0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d109      	bne.n	8005e86 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea8 <TIM_OC5_SetConfig+0x9c>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	46c0      	nop			@ (mov r8, r8)
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b006      	add	sp, #24
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	fffeffff 	.word	0xfffeffff
 8005eac:	fffeff8f 	.word	0xfffeff8f
 8005eb0:	fffdffff 	.word	0xfffdffff
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800

08005ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <TIM_OC6_SetConfig+0xa0>)
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a1e      	ldr	r2, [pc, #120]	@ (8005f64 <TIM_OC6_SetConfig+0xa4>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <TIM_OC6_SetConfig+0xa8>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	051b      	lsls	r3, r3, #20
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a16      	ldr	r2, [pc, #88]	@ (8005f6c <TIM_OC6_SetConfig+0xac>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_OC6_SetConfig+0x68>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <TIM_OC6_SetConfig+0xb0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC6_SetConfig+0x68>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a14      	ldr	r2, [pc, #80]	@ (8005f74 <TIM_OC6_SetConfig+0xb4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d109      	bne.n	8005f3c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4a13      	ldr	r2, [pc, #76]	@ (8005f78 <TIM_OC6_SetConfig+0xb8>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	029b      	lsls	r3, r3, #10
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b006      	add	sp, #24
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	ffefffff 	.word	0xffefffff
 8005f64:	feff8fff 	.word	0xfeff8fff
 8005f68:	ffdfffff 	.word	0xffdfffff
 8005f6c:	40012c00 	.word	0x40012c00
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	fffbffff 	.word	0xfffbffff

08005f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	2201      	movs	r2, #1
 8005f96:	4393      	bics	r3, r2
 8005f98:	001a      	movs	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006020 <TIM_TI1_SetConfig+0xa4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d008      	beq.n	8005fbe <TIM_TI1_SetConfig+0x42>
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	2380      	movs	r3, #128	@ 0x80
 8005fb0:	05db      	lsls	r3, r3, #23
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d003      	beq.n	8005fbe <TIM_TI1_SetConfig+0x42>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <TIM_TI1_SetConfig+0xa8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <TIM_TI1_SetConfig+0x46>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <TIM_TI1_SetConfig+0x48>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	4393      	bics	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e003      	b.n	8005fe2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	22f0      	movs	r2, #240	@ 0xf0
 8005fe6:	4393      	bics	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	22ff      	movs	r2, #255	@ 0xff
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	4393      	bics	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	220a      	movs	r2, #10
 8006004:	4013      	ands	r3, r2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b006      	add	sp, #24
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400

08006028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	2201      	movs	r2, #1
 8006040:	4393      	bics	r3, r2
 8006042:	001a      	movs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	22f0      	movs	r2, #240	@ 0xf0
 8006052:	4393      	bics	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	220a      	movs	r2, #10
 8006064:	4393      	bics	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	46c0      	nop			@ (mov r8, r8)
 800607e:	46bd      	mov	sp, r7
 8006080:	b006      	add	sp, #24
 8006082:	bd80      	pop	{r7, pc}

08006084 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	2210      	movs	r2, #16
 800609e:	4393      	bics	r3, r2
 80060a0:	001a      	movs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4a14      	ldr	r2, [pc, #80]	@ (8006100 <TIM_TI2_SetConfig+0x7c>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4a10      	ldr	r2, [pc, #64]	@ (8006104 <TIM_TI2_SetConfig+0x80>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	031b      	lsls	r3, r3, #12
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	22a0      	movs	r2, #160	@ 0xa0
 80060d8:	4393      	bics	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	22a0      	movs	r2, #160	@ 0xa0
 80060e2:	4013      	ands	r3, r2
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b006      	add	sp, #24
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	fffffcff 	.word	0xfffffcff
 8006104:	ffff0fff 	.word	0xffff0fff

08006108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	2210      	movs	r2, #16
 8006120:	4393      	bics	r3, r2
 8006122:	001a      	movs	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4a0d      	ldr	r2, [pc, #52]	@ (8006168 <TIM_TI2_ConfigInputStage+0x60>)
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	22a0      	movs	r2, #160	@ 0xa0
 8006144:	4393      	bics	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	46bd      	mov	sp, r7
 8006162:	b006      	add	sp, #24
 8006164:	bd80      	pop	{r7, pc}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	ffff0fff 	.word	0xffff0fff

0800616c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	4a17      	ldr	r2, [pc, #92]	@ (80061e4 <TIM_TI3_SetConfig+0x78>)
 8006186:	401a      	ands	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2203      	movs	r2, #3
 8006196:	4393      	bics	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	22f0      	movs	r2, #240	@ 0xf0
 80061a6:	4393      	bics	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	22ff      	movs	r2, #255	@ 0xff
 80061b0:	4013      	ands	r3, r2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4a0b      	ldr	r2, [pc, #44]	@ (80061e8 <TIM_TI3_SetConfig+0x7c>)
 80061bc:	4013      	ands	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	021a      	lsls	r2, r3, #8
 80061c4:	23a0      	movs	r3, #160	@ 0xa0
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	4013      	ands	r3, r2
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	46c0      	nop			@ (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b006      	add	sp, #24
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	fffffeff 	.word	0xfffffeff
 80061e8:	fffff5ff 	.word	0xfffff5ff

080061ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	4a18      	ldr	r2, [pc, #96]	@ (8006268 <TIM_TI4_SetConfig+0x7c>)
 8006206:	401a      	ands	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4a15      	ldr	r2, [pc, #84]	@ (800626c <TIM_TI4_SetConfig+0x80>)
 8006216:	4013      	ands	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4a12      	ldr	r2, [pc, #72]	@ (8006270 <TIM_TI4_SetConfig+0x84>)
 8006228:	4013      	ands	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	031b      	lsls	r3, r3, #12
 8006230:	041b      	lsls	r3, r3, #16
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <TIM_TI4_SetConfig+0x88>)
 800623e:	4013      	ands	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	031a      	lsls	r2, r3, #12
 8006246:	23a0      	movs	r3, #160	@ 0xa0
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	4013      	ands	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	46bd      	mov	sp, r7
 8006262:	b006      	add	sp, #24
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	ffffefff 	.word	0xffffefff
 800626c:	fffffcff 	.word	0xfffffcff
 8006270:	ffff0fff 	.word	0xffff0fff
 8006274:	ffff5fff 	.word	0xffff5fff

08006278 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a08      	ldr	r2, [pc, #32]	@ (80062ac <TIM_ITRx_SetConfig+0x34>)
 800628c:	4013      	ands	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	2207      	movs	r2, #7
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	609a      	str	r2, [r3, #8]
}
 80062a2:	46c0      	nop			@ (mov r8, r8)
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b004      	add	sp, #16
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	ffcfff8f 	.word	0xffcfff8f

080062b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	4a09      	ldr	r2, [pc, #36]	@ (80062ec <TIM_ETR_SetConfig+0x3c>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	021a      	lsls	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	46c0      	nop			@ (mov r8, r8)
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b006      	add	sp, #24
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	ffff00ff 	.word	0xffff00ff

080062f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	221f      	movs	r2, #31
 8006300:	4013      	ands	r3, r2
 8006302:	2201      	movs	r2, #1
 8006304:	409a      	lsls	r2, r3
 8006306:	0013      	movs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	43d2      	mvns	r2, r2
 8006312:	401a      	ands	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	211f      	movs	r1, #31
 8006320:	400b      	ands	r3, r1
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4099      	lsls	r1, r3
 8006326:	000b      	movs	r3, r1
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b006      	add	sp, #24
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2184      	movs	r1, #132	@ 0x84
 8006344:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <TIM_ResetCallback+0x80>)
 8006346:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2188      	movs	r1, #136	@ 0x88
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <TIM_ResetCallback+0x84>)
 800634e:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	218c      	movs	r1, #140	@ 0x8c
 8006354:	4a1a      	ldr	r2, [pc, #104]	@ (80063c0 <TIM_ResetCallback+0x88>)
 8006356:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2190      	movs	r1, #144	@ 0x90
 800635c:	4a19      	ldr	r2, [pc, #100]	@ (80063c4 <TIM_ResetCallback+0x8c>)
 800635e:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2194      	movs	r1, #148	@ 0x94
 8006364:	4a18      	ldr	r2, [pc, #96]	@ (80063c8 <TIM_ResetCallback+0x90>)
 8006366:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2198      	movs	r1, #152	@ 0x98
 800636c:	4a17      	ldr	r2, [pc, #92]	@ (80063cc <TIM_ResetCallback+0x94>)
 800636e:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	219c      	movs	r1, #156	@ 0x9c
 8006374:	4a16      	ldr	r2, [pc, #88]	@ (80063d0 <TIM_ResetCallback+0x98>)
 8006376:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	21a0      	movs	r1, #160	@ 0xa0
 800637c:	4a15      	ldr	r2, [pc, #84]	@ (80063d4 <TIM_ResetCallback+0x9c>)
 800637e:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	21a4      	movs	r1, #164	@ 0xa4
 8006384:	4a14      	ldr	r2, [pc, #80]	@ (80063d8 <TIM_ResetCallback+0xa0>)
 8006386:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	21a8      	movs	r1, #168	@ 0xa8
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <TIM_ResetCallback+0xa4>)
 800638e:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	21ac      	movs	r1, #172	@ 0xac
 8006394:	4a12      	ldr	r2, [pc, #72]	@ (80063e0 <TIM_ResetCallback+0xa8>)
 8006396:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	21b0      	movs	r1, #176	@ 0xb0
 800639c:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <TIM_ResetCallback+0xac>)
 800639e:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	21b4      	movs	r1, #180	@ 0xb4
 80063a4:	4a10      	ldr	r2, [pc, #64]	@ (80063e8 <TIM_ResetCallback+0xb0>)
 80063a6:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	21b8      	movs	r1, #184	@ 0xb8
 80063ac:	4a0f      	ldr	r2, [pc, #60]	@ (80063ec <TIM_ResetCallback+0xb4>)
 80063ae:	505a      	str	r2, [r3, r1]
}
 80063b0:	46c0      	nop			@ (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	08005691 	.word	0x08005691
 80063bc:	080056a1 	.word	0x080056a1
 80063c0:	08005701 	.word	0x08005701
 80063c4:	08005711 	.word	0x08005711
 80063c8:	080056c1 	.word	0x080056c1
 80063cc:	080056d1 	.word	0x080056d1
 80063d0:	080056b1 	.word	0x080056b1
 80063d4:	080056e1 	.word	0x080056e1
 80063d8:	080056f1 	.word	0x080056f1
 80063dc:	08005721 	.word	0x08005721
 80063e0:	080065f9 	.word	0x080065f9
 80063e4:	08006609 	.word	0x08006609
 80063e8:	08006619 	.word	0x08006619
 80063ec:	08006629 	.word	0x08006629

080063f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	223c      	movs	r2, #60	@ 0x3c
 80063fe:	5c9b      	ldrb	r3, [r3, r2]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e050      	b.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	223c      	movs	r2, #60	@ 0x3c
 800640c:	2101      	movs	r1, #1
 800640e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	223d      	movs	r2, #61	@ 0x3d
 8006414:	2102      	movs	r1, #2
 8006416:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a21      	ldr	r2, [pc, #132]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d108      	bne.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4a20      	ldr	r2, [pc, #128]	@ (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006436:	4013      	ands	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2270      	movs	r2, #112	@ 0x70
 8006448:	4393      	bics	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a14      	ldr	r2, [pc, #80]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00a      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	2380      	movs	r3, #128	@ 0x80
 800646e:	05db      	lsls	r3, r3, #23
 8006470:	429a      	cmp	r2, r3
 8006472:	d004      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a10      	ldr	r2, [pc, #64]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d10c      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2280      	movs	r2, #128	@ 0x80
 8006482:	4393      	bics	r3, r2
 8006484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4313      	orrs	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	223d      	movs	r2, #61	@ 0x3d
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	223c      	movs	r2, #60	@ 0x3c
 80064a4:	2100      	movs	r1, #0
 80064a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b004      	add	sp, #16
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	ff0fffff 	.word	0xff0fffff
 80064bc:	40000400 	.word	0x40000400

080064c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	223c      	movs	r2, #60	@ 0x3c
 80064d2:	5c9b      	ldrb	r3, [r3, r2]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064d8:	2302      	movs	r3, #2
 80064da:	e06f      	b.n	80065bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	223c      	movs	r2, #60	@ 0x3c
 80064e0:	2101      	movs	r1, #1
 80064e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	22ff      	movs	r2, #255	@ 0xff
 80064e8:	4393      	bics	r3, r2
 80064ea:	001a      	movs	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a33      	ldr	r2, [pc, #204]	@ (80065c4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80064f8:	401a      	ands	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a30      	ldr	r2, [pc, #192]	@ (80065c8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006506:	401a      	ands	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a2e      	ldr	r2, [pc, #184]	@ (80065cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006514:	401a      	ands	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a2b      	ldr	r2, [pc, #172]	@ (80065d0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006522:	401a      	ands	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4a29      	ldr	r2, [pc, #164]	@ (80065d4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006530:	401a      	ands	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800653e:	401a      	ands	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a24      	ldr	r2, [pc, #144]	@ (80065dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800654c:	401a      	ands	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a21      	ldr	r2, [pc, #132]	@ (80065e0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800655c:	401a      	ands	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1e      	ldr	r2, [pc, #120]	@ (80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d11c      	bne.n	80065aa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006574:	401a      	ands	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	051b      	lsls	r3, r3, #20
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a1a      	ldr	r2, [pc, #104]	@ (80065ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006584:	401a      	ands	r2, r3
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a17      	ldr	r2, [pc, #92]	@ (80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006592:	401a      	ands	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a15      	ldr	r2, [pc, #84]	@ (80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80065a0:	401a      	ands	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	223c      	movs	r2, #60	@ 0x3c
 80065b6:	2100      	movs	r1, #0
 80065b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	0018      	movs	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	b004      	add	sp, #16
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	fffffcff 	.word	0xfffffcff
 80065c8:	fffffbff 	.word	0xfffffbff
 80065cc:	fffff7ff 	.word	0xfffff7ff
 80065d0:	ffffefff 	.word	0xffffefff
 80065d4:	ffffdfff 	.word	0xffffdfff
 80065d8:	ffffbfff 	.word	0xffffbfff
 80065dc:	fff0ffff 	.word	0xfff0ffff
 80065e0:	efffffff 	.word	0xefffffff
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	ff0fffff 	.word	0xff0fffff
 80065ec:	feffffff 	.word	0xfeffffff
 80065f0:	fdffffff 	.word	0xfdffffff
 80065f4:	dfffffff 	.word	0xdfffffff

080065f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006600:	46c0      	nop			@ (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b002      	add	sp, #8
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006610:	46c0      	nop			@ (mov r8, r8)
 8006612:	46bd      	mov	sp, r7
 8006614:	b002      	add	sp, #8
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006620:	46c0      	nop			@ (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006630:	46c0      	nop			@ (mov r8, r8)
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e046      	b.n	80066d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2288      	movs	r2, #136	@ 0x88
 800664e:	589b      	ldr	r3, [r3, r2]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2284      	movs	r2, #132	@ 0x84
 8006658:	2100      	movs	r1, #0
 800665a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f7fb f83e 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2288      	movs	r2, #136	@ 0x88
 8006668:	2124      	movs	r1, #36	@ 0x24
 800666a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2101      	movs	r1, #1
 8006678:	438a      	bics	r2, r1
 800667a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	0018      	movs	r0, r3
 8006688:	f000 faa4 	bl	8006bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 f828 	bl	80066e4 <UART_SetConfig>
 8006694:	0003      	movs	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e01c      	b.n	80066d8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	490d      	ldr	r1, [pc, #52]	@ (80066e0 <HAL_UART_Init+0xa8>)
 80066aa:	400a      	ands	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	212a      	movs	r1, #42	@ 0x2a
 80066ba:	438a      	bics	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2101      	movs	r1, #1
 80066ca:	430a      	orrs	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fb33 	bl	8006d3c <UART_CheckIdleState>
 80066d6:	0003      	movs	r3, r0
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b002      	add	sp, #8
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	ffffb7ff 	.word	0xffffb7ff

080066e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b5b0      	push	{r4, r5, r7, lr}
 80066e6:	b090      	sub	sp, #64	@ 0x40
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ec:	231a      	movs	r3, #26
 80066ee:	2220      	movs	r2, #32
 80066f0:	189b      	adds	r3, r3, r2
 80066f2:	19db      	adds	r3, r3, r7
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	431a      	orrs	r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	431a      	orrs	r2, r3
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	4313      	orrs	r3, r2
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4ac4      	ldr	r2, [pc, #784]	@ (8006a28 <UART_SetConfig+0x344>)
 8006718:	4013      	ands	r3, r2
 800671a:	0019      	movs	r1, r3
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006722:	430b      	orrs	r3, r1
 8006724:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4abf      	ldr	r2, [pc, #764]	@ (8006a2c <UART_SetConfig+0x348>)
 800672e:	4013      	ands	r3, r2
 8006730:	0018      	movs	r0, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	68d9      	ldr	r1, [r3, #12]
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	0003      	movs	r3, r0
 800673c:	430b      	orrs	r3, r1
 800673e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4ab9      	ldr	r2, [pc, #740]	@ (8006a30 <UART_SetConfig+0x34c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006756:	4313      	orrs	r3, r2
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4ab4      	ldr	r2, [pc, #720]	@ (8006a34 <UART_SetConfig+0x350>)
 8006762:	4013      	ands	r3, r2
 8006764:	0019      	movs	r1, r3
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676c:	430b      	orrs	r3, r1
 800676e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	220f      	movs	r2, #15
 8006778:	4393      	bics	r3, r2
 800677a:	0018      	movs	r0, r3
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	0003      	movs	r3, r0
 8006786:	430b      	orrs	r3, r1
 8006788:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4aaa      	ldr	r2, [pc, #680]	@ (8006a38 <UART_SetConfig+0x354>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d131      	bne.n	80067f8 <UART_SetConfig+0x114>
 8006794:	4ba9      	ldr	r3, [pc, #676]	@ (8006a3c <UART_SetConfig+0x358>)
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	2203      	movs	r2, #3
 800679a:	4013      	ands	r3, r2
 800679c:	2b03      	cmp	r3, #3
 800679e:	d01d      	beq.n	80067dc <UART_SetConfig+0xf8>
 80067a0:	d823      	bhi.n	80067ea <UART_SetConfig+0x106>
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d00c      	beq.n	80067c0 <UART_SetConfig+0xdc>
 80067a6:	d820      	bhi.n	80067ea <UART_SetConfig+0x106>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0xce>
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d00e      	beq.n	80067ce <UART_SetConfig+0xea>
 80067b0:	e01b      	b.n	80067ea <UART_SetConfig+0x106>
 80067b2:	231b      	movs	r3, #27
 80067b4:	2220      	movs	r2, #32
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	19db      	adds	r3, r3, r7
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e071      	b.n	80068a4 <UART_SetConfig+0x1c0>
 80067c0:	231b      	movs	r3, #27
 80067c2:	2220      	movs	r2, #32
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	19db      	adds	r3, r3, r7
 80067c8:	2202      	movs	r2, #2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e06a      	b.n	80068a4 <UART_SetConfig+0x1c0>
 80067ce:	231b      	movs	r3, #27
 80067d0:	2220      	movs	r2, #32
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	19db      	adds	r3, r3, r7
 80067d6:	2204      	movs	r2, #4
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e063      	b.n	80068a4 <UART_SetConfig+0x1c0>
 80067dc:	231b      	movs	r3, #27
 80067de:	2220      	movs	r2, #32
 80067e0:	189b      	adds	r3, r3, r2
 80067e2:	19db      	adds	r3, r3, r7
 80067e4:	2208      	movs	r2, #8
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	e05c      	b.n	80068a4 <UART_SetConfig+0x1c0>
 80067ea:	231b      	movs	r3, #27
 80067ec:	2220      	movs	r2, #32
 80067ee:	189b      	adds	r3, r3, r2
 80067f0:	19db      	adds	r3, r3, r7
 80067f2:	2210      	movs	r2, #16
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e055      	b.n	80068a4 <UART_SetConfig+0x1c0>
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a90      	ldr	r2, [pc, #576]	@ (8006a40 <UART_SetConfig+0x35c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d106      	bne.n	8006810 <UART_SetConfig+0x12c>
 8006802:	231b      	movs	r3, #27
 8006804:	2220      	movs	r2, #32
 8006806:	189b      	adds	r3, r3, r2
 8006808:	19db      	adds	r3, r3, r7
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e049      	b.n	80068a4 <UART_SetConfig+0x1c0>
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a86      	ldr	r2, [pc, #536]	@ (8006a30 <UART_SetConfig+0x34c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d13e      	bne.n	8006898 <UART_SetConfig+0x1b4>
 800681a:	4b88      	ldr	r3, [pc, #544]	@ (8006a3c <UART_SetConfig+0x358>)
 800681c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800681e:	23c0      	movs	r3, #192	@ 0xc0
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	4013      	ands	r3, r2
 8006824:	22c0      	movs	r2, #192	@ 0xc0
 8006826:	0112      	lsls	r2, r2, #4
 8006828:	4293      	cmp	r3, r2
 800682a:	d027      	beq.n	800687c <UART_SetConfig+0x198>
 800682c:	22c0      	movs	r2, #192	@ 0xc0
 800682e:	0112      	lsls	r2, r2, #4
 8006830:	4293      	cmp	r3, r2
 8006832:	d82a      	bhi.n	800688a <UART_SetConfig+0x1a6>
 8006834:	2280      	movs	r2, #128	@ 0x80
 8006836:	0112      	lsls	r2, r2, #4
 8006838:	4293      	cmp	r3, r2
 800683a:	d011      	beq.n	8006860 <UART_SetConfig+0x17c>
 800683c:	2280      	movs	r2, #128	@ 0x80
 800683e:	0112      	lsls	r2, r2, #4
 8006840:	4293      	cmp	r3, r2
 8006842:	d822      	bhi.n	800688a <UART_SetConfig+0x1a6>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <UART_SetConfig+0x16e>
 8006848:	2280      	movs	r2, #128	@ 0x80
 800684a:	00d2      	lsls	r2, r2, #3
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <UART_SetConfig+0x18a>
 8006850:	e01b      	b.n	800688a <UART_SetConfig+0x1a6>
 8006852:	231b      	movs	r3, #27
 8006854:	2220      	movs	r2, #32
 8006856:	189b      	adds	r3, r3, r2
 8006858:	19db      	adds	r3, r3, r7
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e021      	b.n	80068a4 <UART_SetConfig+0x1c0>
 8006860:	231b      	movs	r3, #27
 8006862:	2220      	movs	r2, #32
 8006864:	189b      	adds	r3, r3, r2
 8006866:	19db      	adds	r3, r3, r7
 8006868:	2202      	movs	r2, #2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e01a      	b.n	80068a4 <UART_SetConfig+0x1c0>
 800686e:	231b      	movs	r3, #27
 8006870:	2220      	movs	r2, #32
 8006872:	189b      	adds	r3, r3, r2
 8006874:	19db      	adds	r3, r3, r7
 8006876:	2204      	movs	r2, #4
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e013      	b.n	80068a4 <UART_SetConfig+0x1c0>
 800687c:	231b      	movs	r3, #27
 800687e:	2220      	movs	r2, #32
 8006880:	189b      	adds	r3, r3, r2
 8006882:	19db      	adds	r3, r3, r7
 8006884:	2208      	movs	r2, #8
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e00c      	b.n	80068a4 <UART_SetConfig+0x1c0>
 800688a:	231b      	movs	r3, #27
 800688c:	2220      	movs	r2, #32
 800688e:	189b      	adds	r3, r3, r2
 8006890:	19db      	adds	r3, r3, r7
 8006892:	2210      	movs	r2, #16
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e005      	b.n	80068a4 <UART_SetConfig+0x1c0>
 8006898:	231b      	movs	r3, #27
 800689a:	2220      	movs	r2, #32
 800689c:	189b      	adds	r3, r3, r2
 800689e:	19db      	adds	r3, r3, r7
 80068a0:	2210      	movs	r2, #16
 80068a2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a61      	ldr	r2, [pc, #388]	@ (8006a30 <UART_SetConfig+0x34c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d000      	beq.n	80068b0 <UART_SetConfig+0x1cc>
 80068ae:	e092      	b.n	80069d6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068b0:	231b      	movs	r3, #27
 80068b2:	2220      	movs	r2, #32
 80068b4:	189b      	adds	r3, r3, r2
 80068b6:	19db      	adds	r3, r3, r7
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d015      	beq.n	80068ea <UART_SetConfig+0x206>
 80068be:	dc18      	bgt.n	80068f2 <UART_SetConfig+0x20e>
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d00d      	beq.n	80068e0 <UART_SetConfig+0x1fc>
 80068c4:	dc15      	bgt.n	80068f2 <UART_SetConfig+0x20e>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <UART_SetConfig+0x1ec>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d005      	beq.n	80068da <UART_SetConfig+0x1f6>
 80068ce:	e010      	b.n	80068f2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fd fec6 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 80068d4:	0003      	movs	r3, r0
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d8:	e014      	b.n	8006904 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068da:	4b5a      	ldr	r3, [pc, #360]	@ (8006a44 <UART_SetConfig+0x360>)
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068de:	e011      	b.n	8006904 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e0:	f7fd fe32 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80068e4:	0003      	movs	r3, r0
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068e8:	e00c      	b.n	8006904 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ea:	2380      	movs	r3, #128	@ 0x80
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068f0:	e008      	b.n	8006904 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80068f6:	231a      	movs	r3, #26
 80068f8:	2220      	movs	r2, #32
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	19db      	adds	r3, r3, r7
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
        break;
 8006902:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006906:	2b00      	cmp	r3, #0
 8006908:	d100      	bne.n	800690c <UART_SetConfig+0x228>
 800690a:	e147      	b.n	8006b9c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006910:	4b4d      	ldr	r3, [pc, #308]	@ (8006a48 <UART_SetConfig+0x364>)
 8006912:	0052      	lsls	r2, r2, #1
 8006914:	5ad3      	ldrh	r3, [r2, r3]
 8006916:	0019      	movs	r1, r3
 8006918:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800691a:	f7f9 fbf3 	bl	8000104 <__udivsi3>
 800691e:	0003      	movs	r3, r0
 8006920:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	0013      	movs	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	189b      	adds	r3, r3, r2
 800692c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800692e:	429a      	cmp	r2, r3
 8006930:	d305      	bcc.n	800693e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800693a:	429a      	cmp	r2, r3
 800693c:	d906      	bls.n	800694c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800693e:	231a      	movs	r3, #26
 8006940:	2220      	movs	r2, #32
 8006942:	189b      	adds	r3, r3, r2
 8006944:	19db      	adds	r3, r3, r7
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e127      	b.n	8006b9c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800694c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006958:	4b3b      	ldr	r3, [pc, #236]	@ (8006a48 <UART_SetConfig+0x364>)
 800695a:	0052      	lsls	r2, r2, #1
 800695c:	5ad3      	ldrh	r3, [r2, r3]
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	69b8      	ldr	r0, [r7, #24]
 800696a:	69f9      	ldr	r1, [r7, #28]
 800696c:	f7f9 fc56 	bl	800021c <__aeabi_uldivmod>
 8006970:	0002      	movs	r2, r0
 8006972:	000b      	movs	r3, r1
 8006974:	0e11      	lsrs	r1, r2, #24
 8006976:	021d      	lsls	r5, r3, #8
 8006978:	430d      	orrs	r5, r1
 800697a:	0214      	lsls	r4, r2, #8
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	68b8      	ldr	r0, [r7, #8]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	1900      	adds	r0, r0, r4
 800698e:	4169      	adcs	r1, r5
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f7f9 fc3d 	bl	800021c <__aeabi_uldivmod>
 80069a2:	0002      	movs	r2, r0
 80069a4:	000b      	movs	r3, r1
 80069a6:	0013      	movs	r3, r2
 80069a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ac:	23c0      	movs	r3, #192	@ 0xc0
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d309      	bcc.n	80069c8 <UART_SetConfig+0x2e4>
 80069b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b6:	2380      	movs	r3, #128	@ 0x80
 80069b8:	035b      	lsls	r3, r3, #13
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d204      	bcs.n	80069c8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	e0e9      	b.n	8006b9c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80069c8:	231a      	movs	r3, #26
 80069ca:	2220      	movs	r2, #32
 80069cc:	189b      	adds	r3, r3, r2
 80069ce:	19db      	adds	r3, r3, r7
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e0e2      	b.n	8006b9c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	69da      	ldr	r2, [r3, #28]
 80069da:	2380      	movs	r3, #128	@ 0x80
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	429a      	cmp	r2, r3
 80069e0:	d000      	beq.n	80069e4 <UART_SetConfig+0x300>
 80069e2:	e083      	b.n	8006aec <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80069e4:	231b      	movs	r3, #27
 80069e6:	2220      	movs	r2, #32
 80069e8:	189b      	adds	r3, r3, r2
 80069ea:	19db      	adds	r3, r3, r7
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d015      	beq.n	8006a1e <UART_SetConfig+0x33a>
 80069f2:	dc2b      	bgt.n	8006a4c <UART_SetConfig+0x368>
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d00d      	beq.n	8006a14 <UART_SetConfig+0x330>
 80069f8:	dc28      	bgt.n	8006a4c <UART_SetConfig+0x368>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <UART_SetConfig+0x320>
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d005      	beq.n	8006a0e <UART_SetConfig+0x32a>
 8006a02:	e023      	b.n	8006a4c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a04:	f7fd fe2c 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0c:	e027      	b.n	8006a5e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <UART_SetConfig+0x360>)
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a12:	e024      	b.n	8006a5e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a14:	f7fd fd98 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a1c:	e01f      	b.n	8006a5e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1e:	2380      	movs	r3, #128	@ 0x80
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a24:	e01b      	b.n	8006a5e <UART_SetConfig+0x37a>
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	cfff69f3 	.word	0xcfff69f3
 8006a2c:	ffffcfff 	.word	0xffffcfff
 8006a30:	40008000 	.word	0x40008000
 8006a34:	11fff4ff 	.word	0x11fff4ff
 8006a38:	40013800 	.word	0x40013800
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	40004400 	.word	0x40004400
 8006a44:	00f42400 	.word	0x00f42400
 8006a48:	08007a94 	.word	0x08007a94
      default:
        pclk = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006a50:	231a      	movs	r3, #26
 8006a52:	2220      	movs	r2, #32
 8006a54:	189b      	adds	r3, r3, r2
 8006a56:	19db      	adds	r3, r3, r7
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
        break;
 8006a5c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d100      	bne.n	8006a66 <UART_SetConfig+0x382>
 8006a64:	e09a      	b.n	8006b9c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a6a:	4b58      	ldr	r3, [pc, #352]	@ (8006bcc <UART_SetConfig+0x4e8>)
 8006a6c:	0052      	lsls	r2, r2, #1
 8006a6e:	5ad3      	ldrh	r3, [r2, r3]
 8006a70:	0019      	movs	r1, r3
 8006a72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006a74:	f7f9 fb46 	bl	8000104 <__udivsi3>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	005a      	lsls	r2, r3, #1
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	18d2      	adds	r2, r2, r3
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	0019      	movs	r1, r3
 8006a8a:	0010      	movs	r0, r2
 8006a8c:	f7f9 fb3a 	bl	8000104 <__udivsi3>
 8006a90:	0003      	movs	r3, r0
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d921      	bls.n	8006ade <UART_SetConfig+0x3fa>
 8006a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9c:	2380      	movs	r3, #128	@ 0x80
 8006a9e:	025b      	lsls	r3, r3, #9
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d21c      	bcs.n	8006ade <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	200e      	movs	r0, #14
 8006aaa:	2420      	movs	r4, #32
 8006aac:	1903      	adds	r3, r0, r4
 8006aae:	19db      	adds	r3, r3, r7
 8006ab0:	210f      	movs	r1, #15
 8006ab2:	438a      	bics	r2, r1
 8006ab4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2207      	movs	r2, #7
 8006abe:	4013      	ands	r3, r2
 8006ac0:	b299      	uxth	r1, r3
 8006ac2:	1903      	adds	r3, r0, r4
 8006ac4:	19db      	adds	r3, r3, r7
 8006ac6:	1902      	adds	r2, r0, r4
 8006ac8:	19d2      	adds	r2, r2, r7
 8006aca:	8812      	ldrh	r2, [r2, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1902      	adds	r2, r0, r4
 8006ad6:	19d2      	adds	r2, r2, r7
 8006ad8:	8812      	ldrh	r2, [r2, #0]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	e05e      	b.n	8006b9c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006ade:	231a      	movs	r3, #26
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	19db      	adds	r3, r3, r7
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e057      	b.n	8006b9c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aec:	231b      	movs	r3, #27
 8006aee:	2220      	movs	r2, #32
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	19db      	adds	r3, r3, r7
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d015      	beq.n	8006b26 <UART_SetConfig+0x442>
 8006afa:	dc18      	bgt.n	8006b2e <UART_SetConfig+0x44a>
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d00d      	beq.n	8006b1c <UART_SetConfig+0x438>
 8006b00:	dc15      	bgt.n	8006b2e <UART_SetConfig+0x44a>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <UART_SetConfig+0x428>
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d005      	beq.n	8006b16 <UART_SetConfig+0x432>
 8006b0a:	e010      	b.n	8006b2e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fd fda8 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8006b10:	0003      	movs	r3, r0
 8006b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b14:	e014      	b.n	8006b40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b16:	4b2e      	ldr	r3, [pc, #184]	@ (8006bd0 <UART_SetConfig+0x4ec>)
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b1a:	e011      	b.n	8006b40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1c:	f7fd fd14 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8006b20:	0003      	movs	r3, r0
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b24:	e00c      	b.n	8006b40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	2380      	movs	r3, #128	@ 0x80
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b2c:	e008      	b.n	8006b40 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006b32:	231a      	movs	r3, #26
 8006b34:	2220      	movs	r2, #32
 8006b36:	189b      	adds	r3, r3, r2
 8006b38:	19db      	adds	r3, r3, r7
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
        break;
 8006b3e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d02a      	beq.n	8006b9c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b4a:	4b20      	ldr	r3, [pc, #128]	@ (8006bcc <UART_SetConfig+0x4e8>)
 8006b4c:	0052      	lsls	r2, r2, #1
 8006b4e:	5ad3      	ldrh	r3, [r2, r3]
 8006b50:	0019      	movs	r1, r3
 8006b52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b54:	f7f9 fad6 	bl	8000104 <__udivsi3>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	085b      	lsrs	r3, r3, #1
 8006b62:	18d2      	adds	r2, r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	0019      	movs	r1, r3
 8006b6a:	0010      	movs	r0, r2
 8006b6c:	f7f9 faca 	bl	8000104 <__udivsi3>
 8006b70:	0003      	movs	r3, r0
 8006b72:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	d90a      	bls.n	8006b90 <UART_SetConfig+0x4ac>
 8006b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b7c:	2380      	movs	r3, #128	@ 0x80
 8006b7e:	025b      	lsls	r3, r3, #9
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d205      	bcs.n	8006b90 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	e005      	b.n	8006b9c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b90:	231a      	movs	r3, #26
 8006b92:	2220      	movs	r2, #32
 8006b94:	189b      	adds	r3, r3, r2
 8006b96:	19db      	adds	r3, r3, r7
 8006b98:	2201      	movs	r2, #1
 8006b9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	226a      	movs	r2, #106	@ 0x6a
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	2268      	movs	r2, #104	@ 0x68
 8006ba8:	2101      	movs	r1, #1
 8006baa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	2200      	movs	r2, #0
 8006bb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bb8:	231a      	movs	r3, #26
 8006bba:	2220      	movs	r2, #32
 8006bbc:	189b      	adds	r3, r3, r2
 8006bbe:	19db      	adds	r3, r3, r7
 8006bc0:	781b      	ldrb	r3, [r3, #0]
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b010      	add	sp, #64	@ 0x40
 8006bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bca:	46c0      	nop			@ (mov r8, r8)
 8006bcc:	08007a94 	.word	0x08007a94
 8006bd0:	00f42400 	.word	0x00f42400

08006bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	2208      	movs	r2, #8
 8006be2:	4013      	ands	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4a4a      	ldr	r2, [pc, #296]	@ (8006d18 <UART_AdvFeatureConfig+0x144>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	0019      	movs	r1, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	2201      	movs	r2, #1
 8006c04:	4013      	ands	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4a43      	ldr	r2, [pc, #268]	@ (8006d1c <UART_AdvFeatureConfig+0x148>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	0019      	movs	r1, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	2202      	movs	r2, #2
 8006c26:	4013      	ands	r3, r2
 8006c28:	d00b      	beq.n	8006c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a3b      	ldr	r2, [pc, #236]	@ (8006d20 <UART_AdvFeatureConfig+0x14c>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	0019      	movs	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	2204      	movs	r2, #4
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4a34      	ldr	r2, [pc, #208]	@ (8006d24 <UART_AdvFeatureConfig+0x150>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	0019      	movs	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	2210      	movs	r2, #16
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	4a2c      	ldr	r2, [pc, #176]	@ (8006d28 <UART_AdvFeatureConfig+0x154>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	0019      	movs	r1, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d00b      	beq.n	8006ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4a25      	ldr	r2, [pc, #148]	@ (8006d2c <UART_AdvFeatureConfig+0x158>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	2240      	movs	r2, #64	@ 0x40
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <UART_AdvFeatureConfig+0x15c>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	0019      	movs	r1, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cce:	2380      	movs	r3, #128	@ 0x80
 8006cd0:	035b      	lsls	r3, r3, #13
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d10b      	bne.n	8006cee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4a15      	ldr	r2, [pc, #84]	@ (8006d34 <UART_AdvFeatureConfig+0x160>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	0019      	movs	r1, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	2280      	movs	r2, #128	@ 0x80
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8006d38 <UART_AdvFeatureConfig+0x164>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	0019      	movs	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }
}
 8006d10:	46c0      	nop			@ (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	ffff7fff 	.word	0xffff7fff
 8006d1c:	fffdffff 	.word	0xfffdffff
 8006d20:	fffeffff 	.word	0xfffeffff
 8006d24:	fffbffff 	.word	0xfffbffff
 8006d28:	ffffefff 	.word	0xffffefff
 8006d2c:	ffffdfff 	.word	0xffffdfff
 8006d30:	ffefffff 	.word	0xffefffff
 8006d34:	ff9fffff 	.word	0xff9fffff
 8006d38:	fff7ffff 	.word	0xfff7ffff

08006d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b092      	sub	sp, #72	@ 0x48
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2290      	movs	r2, #144	@ 0x90
 8006d48:	2100      	movs	r1, #0
 8006d4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d4c:	f7fb fad2 	bl	80022f4 <HAL_GetTick>
 8006d50:	0003      	movs	r3, r0
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d12d      	bne.n	8006dbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	2280      	movs	r2, #128	@ 0x80
 8006d66:	0391      	lsls	r1, r2, #14
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4a47      	ldr	r2, [pc, #284]	@ (8006e88 <UART_CheckIdleState+0x14c>)
 8006d6c:	9200      	str	r2, [sp, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f000 f88e 	bl	8006e90 <UART_WaitOnFlagUntilTimeout>
 8006d74:	1e03      	subs	r3, r0, #0
 8006d76:	d022      	beq.n	8006dbe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d78:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d82:	2301      	movs	r3, #1
 8006d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	f383 8810 	msr	PRIMASK, r3
}
 8006d8c:	46c0      	nop			@ (mov r8, r8)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2180      	movs	r1, #128	@ 0x80
 8006d9a:	438a      	bics	r2, r1
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2288      	movs	r2, #136	@ 0x88
 8006dae:	2120      	movs	r1, #32
 8006db0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2284      	movs	r2, #132	@ 0x84
 8006db6:	2100      	movs	r1, #0
 8006db8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e060      	b.n	8006e80 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d146      	bne.n	8006e5a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dce:	2280      	movs	r2, #128	@ 0x80
 8006dd0:	03d1      	lsls	r1, r2, #15
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e88 <UART_CheckIdleState+0x14c>)
 8006dd6:	9200      	str	r2, [sp, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f000 f859 	bl	8006e90 <UART_WaitOnFlagUntilTimeout>
 8006dde:	1e03      	subs	r3, r0, #0
 8006de0:	d03b      	beq.n	8006e5a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de2:	f3ef 8310 	mrs	r3, PRIMASK
 8006de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	2301      	movs	r3, #1
 8006dee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f383 8810 	msr	PRIMASK, r3
}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4922      	ldr	r1, [pc, #136]	@ (8006e8c <UART_CheckIdleState+0x150>)
 8006e04:	400a      	ands	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f383 8810 	msr	PRIMASK, r3
}
 8006e12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e14:	f3ef 8310 	mrs	r3, PRIMASK
 8006e18:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e1e:	2301      	movs	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f383 8810 	msr	PRIMASK, r3
}
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2101      	movs	r1, #1
 8006e36:	438a      	bics	r2, r1
 8006e38:	609a      	str	r2, [r3, #8]
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	f383 8810 	msr	PRIMASK, r3
}
 8006e44:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	228c      	movs	r2, #140	@ 0x8c
 8006e4a:	2120      	movs	r1, #32
 8006e4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2284      	movs	r2, #132	@ 0x84
 8006e52:	2100      	movs	r1, #0
 8006e54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e012      	b.n	8006e80 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2288      	movs	r2, #136	@ 0x88
 8006e5e:	2120      	movs	r1, #32
 8006e60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	228c      	movs	r2, #140	@ 0x8c
 8006e66:	2120      	movs	r1, #32
 8006e68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2284      	movs	r2, #132	@ 0x84
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	0018      	movs	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b010      	add	sp, #64	@ 0x40
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	01ffffff 	.word	0x01ffffff
 8006e8c:	fffffedf 	.word	0xfffffedf

08006e90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	1dfb      	adds	r3, r7, #7
 8006e9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea0:	e051      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	d04e      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea8:	f7fb fa24 	bl	80022f4 <HAL_GetTick>
 8006eac:	0002      	movs	r2, r0
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d302      	bcc.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x2e>
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e051      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d03b      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b80      	cmp	r3, #128	@ 0x80
 8006ed2:	d038      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b40      	cmp	r3, #64	@ 0x40
 8006ed8:	d035      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d111      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2208      	movs	r2, #8
 8006eee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f000 f83c 	bl	8006f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2290      	movs	r2, #144	@ 0x90
 8006efc:	2108      	movs	r1, #8
 8006efe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2284      	movs	r2, #132	@ 0x84
 8006f04:	2100      	movs	r1, #0
 8006f06:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e02c      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	2380      	movs	r3, #128	@ 0x80
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	401a      	ands	r2, r3
 8006f18:	2380      	movs	r3, #128	@ 0x80
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d112      	bne.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2280      	movs	r2, #128	@ 0x80
 8006f26:	0112      	lsls	r2, r2, #4
 8006f28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f000 f81f 	bl	8006f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2290      	movs	r2, #144	@ 0x90
 8006f36:	2120      	movs	r1, #32
 8006f38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2284      	movs	r2, #132	@ 0x84
 8006f3e:	2100      	movs	r1, #0
 8006f40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e00f      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	425a      	negs	r2, r3
 8006f56:	4153      	adcs	r3, r2
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	001a      	movs	r2, r3
 8006f5c:	1dfb      	adds	r3, r7, #7
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d09e      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	0018      	movs	r0, r3
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	b004      	add	sp, #16
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08e      	sub	sp, #56	@ 0x38
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f78:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f82:	2301      	movs	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f383 8810 	msr	PRIMASK, r3
}
 8006f8c:	46c0      	nop			@ (mov r8, r8)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4926      	ldr	r1, [pc, #152]	@ (8007034 <UART_EndRxTransfer+0xc4>)
 8006f9a:	400a      	ands	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	f383 8810 	msr	PRIMASK, r3
}
 8006fa8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006faa:	f3ef 8310 	mrs	r3, PRIMASK
 8006fae:	623b      	str	r3, [r7, #32]
  return(result);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	f383 8810 	msr	PRIMASK, r3
}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	491b      	ldr	r1, [pc, #108]	@ (8007038 <UART_EndRxTransfer+0xc8>)
 8006fcc:	400a      	ands	r2, r1
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	f383 8810 	msr	PRIMASK, r3
}
 8006fda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d118      	bne.n	8007016 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fee:	2301      	movs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f383 8810 	msr	PRIMASK, r3
}
 8006ff8:	46c0      	nop			@ (mov r8, r8)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2110      	movs	r1, #16
 8007006:	438a      	bics	r2, r1
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f383 8810 	msr	PRIMASK, r3
}
 8007014:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	228c      	movs	r2, #140	@ 0x8c
 800701a:	2120      	movs	r1, #32
 800701c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	b00e      	add	sp, #56	@ 0x38
 8007030:	bd80      	pop	{r7, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	fffffedf 	.word	0xfffffedf
 8007038:	effffffe 	.word	0xeffffffe

0800703c <memset>:
 800703c:	0003      	movs	r3, r0
 800703e:	1882      	adds	r2, r0, r2
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	7019      	strb	r1, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	2600      	movs	r6, #0
 8007050:	4c0c      	ldr	r4, [pc, #48]	@ (8007084 <__libc_init_array+0x38>)
 8007052:	4d0d      	ldr	r5, [pc, #52]	@ (8007088 <__libc_init_array+0x3c>)
 8007054:	1b64      	subs	r4, r4, r5
 8007056:	10a4      	asrs	r4, r4, #2
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	2600      	movs	r6, #0
 800705e:	f000 f819 	bl	8007094 <_init>
 8007062:	4c0a      	ldr	r4, [pc, #40]	@ (800708c <__libc_init_array+0x40>)
 8007064:	4d0a      	ldr	r5, [pc, #40]	@ (8007090 <__libc_init_array+0x44>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	00b3      	lsls	r3, r6, #2
 8007072:	58eb      	ldr	r3, [r5, r3]
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	00b3      	lsls	r3, r6, #2
 800707c:	58eb      	ldr	r3, [r5, r3]
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	08007ab4 	.word	0x08007ab4
 8007088:	08007ab4 	.word	0x08007ab4
 800708c:	08007ab8 	.word	0x08007ab8
 8007090:	08007ab4 	.word	0x08007ab4

08007094 <_init>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

080070a0 <_fini>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	46c0      	nop			@ (mov r8, r8)
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr
