
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce28  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800cee4  0800cee4  0000dee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d954  0800d954  0000f44c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d95c  0800d95c  0000f44c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d95c  0800d95c  0000e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d960  0800d960  0000e960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000044c  20000000  0800d964  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  2000044c  0800ddb0  0000f44c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  0800ddb0  0000fcd4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f44c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002021c  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004586  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015d07  00000000  00000000  0003661f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000822d  00000000  00000000  0004c326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00054553  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005470  00000000  00000000  00054598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  00059a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000044c 	.word	0x2000044c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cecc 	.word	0x0800cecc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000450 	.word	0x20000450
 8000100:	0800cecc 	.word	0x0800cecc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000468 	.word	0x20000468
 80004fc:	0800cee4 	.word	0x0800cee4
 8000500:	20000478 	.word	0x20000478
 8000504:	20000000 	.word	0x20000000
 8000508:	0800ceec 	.word	0x0800ceec
 800050c:	20000008 	.word	0x20000008
 8000510:	0800cef4 	.word	0x0800cef4
 8000514:	20000010 	.word	0x20000010
 8000518:	0800cefc 	.word	0x0800cefc
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8d1 	bl	8000752 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e6 	bl	80007a4 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e1 	bl	80007c2 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d7 	bl	80007fe <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa4f 	bl	8000b04 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa69 	bl	8000b4e <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa77 	bl	8000b80 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa7f 	bl	8000ba6 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa8d 	bl	8000bd8 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000430 	.word	0x20000430
 80006cc:	20000c60 	.word	0x20000c60
 80006d0:	20000c3c 	.word	0x20000c3c
 80006d4:	20000428 	.word	0x20000428
 80006d8:	2000042c 	.word	0x2000042c
 80006dc:	20000434 	.word	0x20000434
 80006e0:	20000438 	.word	0x20000438
 80006e4:	200004b0 	.word	0x200004b0
 80006e8:	20000488 	.word	0x20000488
 80006ec:	200004b8 	.word	0x200004b8
 80006f0:	200004b9 	.word	0x200004b9
 80006f4:	200004ba 	.word	0x200004ba
 80006f8:	200004bb 	.word	0x200004bb
 80006fc:	200004bc 	.word	0x200004bc

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 800075c:	210f      	movs	r1, #15
 800075e:	187b      	adds	r3, r7, r1
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2a      	cmp	r3, #42	@ 0x2a
 800076c:	d803      	bhi.n	8000776 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
 8000774:	e011      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b55      	cmp	r3, #85	@ 0x55
 800077e:	d803      	bhi.n	8000788 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	719a      	strb	r2, [r3, #6]
 8000786:	e008      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	db02      	blt.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2202      	movs	r2, #2
 8000798:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	811a      	strh	r2, [r3, #8]

	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	729a      	strb	r2, [r3, #10]

	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e020      	b.n	800087a <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000838:	2117      	movs	r1, #23
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	227f      	movs	r2, #127	@ 0x7f
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00a      	b.n	800086e <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000858:	2117      	movs	r1, #23
 800085a:	187b      	adds	r3, r7, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	18cb      	adds	r3, r1, r3
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800086e:	2117      	movs	r1, #23
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	3201      	adds	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d9d9      	bls.n	8000838 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}

0800088e <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800088e:	b580      	push	{r7, lr}
 8000890:	b088      	sub	sp, #32
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008a0:	2316      	movs	r3, #22
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 80008a8:	231f      	movs	r3, #31
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e02c      	b.n	800090c <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 80008b2:	211f      	movs	r1, #31
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2016      	movs	r0, #22
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e011      	b.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008dc:	2216      	movs	r2, #22
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d004      	beq.n	80008f2 <Read_and_Interpret_Misc_From_Flash+0x64>
 80008e8:	18bb      	adds	r3, r7, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008f2:	231f      	movs	r3, #31
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	211f      	movs	r1, #31
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	18fa      	adds	r2, r7, r3
 8000910:	2128      	movs	r1, #40	@ 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ca      	bcc.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2116      	movs	r1, #22
 8000928:	187b      	adds	r3, r7, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f005 f87e 	bl	8005a3c <Clear_Status_Bit>
 8000940:	e00f      	b.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000942:	2216      	movs	r2, #22
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d004      	beq.n	8000958 <Read_and_Interpret_Misc_From_Flash+0xca>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	@ 0xff
 8000956:	d104      	bne.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f005 f85b 	bl	8005a18 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000962:	2328      	movs	r3, #40	@ 0x28
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2116      	movs	r1, #22
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <Read_and_Interpret_Misc_From_Flash+0x102>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f005 f857 	bl	8005a3c <Clear_Status_Bit>
 800098e:	e011      	b.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000990:	2216      	movs	r2, #22
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d004      	beq.n	80009a6 <Read_and_Interpret_Misc_From_Flash+0x118>
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d106      	bne.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f005 f832 	bl	8005a18 <Set_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 80009b4:	2328      	movs	r3, #40	@ 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	2116      	movs	r1, #22
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d908      	bls.n	80009e4 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 80009d2:	2117      	movs	r1, #23
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e005      	b.n	80009f0 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a08:	2317      	movs	r3, #23
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e03c      	b.n	8000a8c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a12:	2117      	movs	r1, #23
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff fe5c 	bl	8000700 <Convert_All_Preset_Values>
 8000a48:	e01a      	b.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000a4a:	2117      	movs	r1, #23
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	f7ff fe40 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a80:	2117      	movs	r1, #23
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fa      	adds	r2, r7, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ba      	bcc.n	8000a12 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff feb2 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff feac 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f7ff fea6 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f7ff fea0 	bl	800081c <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	0800f800 	.word	0x0800f800
 8000aec:	20000008 	.word	0x20000008
 8000af0:	0800f808 	.word	0x0800f808
 8000af4:	20000010 	.word	0x20000010
 8000af8:	0800f810 	.word	0x0800f810
 8000afc:	20000018 	.word	0x20000018
 8000b00:	0800f818 	.word	0x0800f818

08000b04 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b16:	d803      	bhi.n	8000b20 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e011      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b55      	cmp	r3, #85	@ 0x55
 8000b28:	d803      	bhi.n	8000b32 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e008      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db02      	blt.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2202      	movs	r2, #2
 8000b42:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	811a      	strh	r2, [r3, #8]

	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	729a      	strb	r2, [r3, #10]

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	819a      	strh	r2, [r3, #12]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000430 	.word	0x20000430
 8000c3c:	200004b8 	.word	0x200004b8

08000c40 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c50:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000c5e:	705a      	strb	r2, [r3, #1]

	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000428 	.word	0x20000428
 8000c70:	200004b8 	.word	0x200004b8

08000c74 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c84:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000c92:	709a      	strb	r2, [r3, #2]

	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	2000042c 	.word	0x2000042c
 8000ca4:	200004b8 	.word	0x200004b8

08000ca8 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000cc6:	70da      	strb	r2, [r3, #3]

	return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000434 	.word	0x20000434
 8000cd8:	200004b8 	.word	0x200004b8

08000cdc <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cec:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000cfa:	711a      	strb	r2, [r3, #4]

	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000438 	.word	0x20000438
 8000d0c:	200004b8 	.word	0x200004b8

08000d10 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d2c:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d3c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d4c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d5c:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000430 	.word	0x20000430
 8000d70:	20000428 	.word	0x20000428
 8000d74:	2000042c 	.word	0x2000042c
 8000d78:	20000434 	.word	0x20000434
 8000d7c:	20000438 	.word	0x20000438

08000d80 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000d88:	210f      	movs	r1, #15
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	187a      	adds	r2, r7, r1
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	09d2      	lsrs	r2, r2, #7
 8000d9a:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000da8:	2300      	movs	r3, #0
	}
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000dba:	210f      	movs	r1, #15
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	187a      	adds	r2, r7, r1
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	09d2      	lsrs	r2, r2, #7
 8000dcc:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000dda:	2301      	movs	r3, #1
	}
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000dec:	210f      	movs	r1, #15
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	220c      	movs	r2, #12
 8000df2:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	200e      	movs	r0, #14
 8000dfc:	183b      	adds	r3, r7, r0
 8000dfe:	0912      	lsrs	r2, r2, #4
 8000e00:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e02:	183a      	adds	r2, r7, r0
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d101      	bne.n	8000e12 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e12:	2300      	movs	r3, #0
	}
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000e24:	210f      	movs	r1, #15
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	220b      	movs	r2, #11
 8000e2a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	200e      	movs	r0, #14
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	0912      	lsrs	r2, r2, #4
 8000e38:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e3a:	183a      	adds	r2, r7, r0
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d101      	bne.n	8000e4a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e4a:	2300      	movs	r3, #0
	}
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b77      	cmp	r3, #119	@ 0x77
 8000e64:	d91d      	bls.n	8000ea2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b79      	cmp	r3, #121	@ 0x79
 8000e6e:	d101      	bne.n	8000e74 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e017      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e7c:	d101      	bne.n	8000e82 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e010      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e8a:	d101      	bne.n	8000e90 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e009      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e98:	d101      	bne.n	8000e9e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e002      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ea2:	2300      	movs	r3, #0
	}
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b77      	cmp	r3, #119	@ 0x77
 8000ebc:	d901      	bls.n	8000ec2 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e023      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b14      	cmp	r3, #20
 8000eca:	d101      	bne.n	8000ed0 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e01c      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b15      	cmp	r3, #21
 8000ed8:	d101      	bne.n	8000ede <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e015      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b16      	cmp	r3, #22
 8000ee6:	d101      	bne.n	8000eec <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e00e      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d101      	bne.n	8000efa <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e007      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d101      	bne.n	8000f08 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000f08:	2300      	movs	r3, #0
		}
	}
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b79      	cmp	r3, #121	@ 0x79
 8000f24:	d108      	bne.n	8000f38 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e031      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e02f      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f40:	d10d      	bne.n	8000f5e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f54:	d101      	bne.n	8000f5a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e01e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e01c      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f66:	d108      	bne.n	8000f7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e010      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e00e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f82:	d108      	bne.n	8000f96 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e002      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8000f96:	2300      	movs	r3, #0
	}
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fb0:	d101      	bne.n	8000fb6 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8000fb6:	2300      	movs	r3, #0
	}
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	400a      	ands	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000fde:	210e      	movs	r1, #14
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	1cfa      	adds	r2, r7, #3
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8000fe8:	183a      	adds	r2, r7, r0
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d101      	bne.n	8000ff8 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800100a:	230e      	movs	r3, #14
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001012:	230d      	movs	r3, #13
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e011      	b.n	8001040 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800101c:	200d      	movs	r0, #13
 800101e:	183b      	adds	r3, r7, r0
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	0019      	movs	r1, r3
 800102a:	220e      	movs	r2, #14
 800102c:	18bb      	adds	r3, r7, r2
 800102e:	18ba      	adds	r2, r7, r2
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	188a      	adds	r2, r1, r2
 8001034:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001036:	183b      	adds	r3, r7, r0
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	183b      	adds	r3, r7, r0
 800103c:	3201      	adds	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	230d      	movs	r3, #13
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9e8      	bls.n	800101c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800104a:	230e      	movs	r3, #14
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e00a      	b.n	800108a <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001074:	200f      	movs	r0, #15
 8001076:	183b      	adds	r3, r7, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001080:	183b      	adds	r3, r7, r0
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	183b      	adds	r3, r7, r0
 8001086:	3201      	adds	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d9ef      	bls.n	8001074 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	000a      	movs	r2, r1
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1cfa      	adds	r2, r7, #3
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d901      	bls.n	80010be <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80010be:	2300      	movs	r3, #0
	}
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80010d8:	d101      	bne.n	80010de <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80010da:	2301      	movs	r3, #1
 80010dc:	e023      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2bfa      	cmp	r3, #250	@ 0xfa
 80010e6:	d101      	bne.n	80010ec <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01c      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2bfb      	cmp	r3, #251	@ 0xfb
 80010f4:	d101      	bne.n	80010fa <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e015      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2bfc      	cmp	r3, #252	@ 0xfc
 8001102:	d101      	bne.n	8001108 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001104:	2301      	movs	r3, #1
 8001106:	e00e      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001110:	d101      	bne.n	8001116 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2bff      	cmp	r3, #255	@ 0xff
 800111e:	d101      	bne.n	8001124 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001124:	2300      	movs	r3, #0
	}
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001136:	250f      	movs	r5, #15
 8001138:	197c      	adds	r4, r7, r5
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	00da      	lsls	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f004 fc54 	bl	80059f0 <Get_Status_Bit>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001158:	2300      	movs	r3, #0
	}
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bdb0      	pop	{r4, r5, r7, pc}

08001162 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	005a      	lsls	r2, r3, #1
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f004 fc61 	bl	8005a3c <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	009a      	lsls	r2, r3, #2
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f004 fc5a 	bl	8005a3c <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

	return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011a2:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011aa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011b4:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011be:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c8:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011d2:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80011f2:	230e      	movs	r3, #14
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	223f      	movs	r2, #63	@ 0x3f
 80011f8:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e00c      	b.n	800121e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001204:	200f      	movs	r0, #15
 8001206:	183b      	adds	r3, r7, r0
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <Reset_All_Controllers+0xb0>)
 800120c:	210e      	movs	r1, #14
 800120e:	1879      	adds	r1, r7, r1
 8001210:	7809      	ldrb	r1, [r1, #0]
 8001212:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001214:	183b      	adds	r3, r7, r0
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	183b      	adds	r3, r7, r0
 800121a:	3201      	adds	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d9ed      	bls.n	8001204 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	20000430 	.word	0x20000430
 8001238:	20000428 	.word	0x20000428
 800123c:	2000042c 	.word	0x2000042c
 8001240:	20000434 	.word	0x20000434
 8001244:	20000438 	.word	0x20000438
 8001248:	200004b8 	.word	0x200004b8

0800124c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001258:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <Set_Local_Control+0x60>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <Set_Local_Control+0x60>)
 8001262:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Set_Local_Control+0x64>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <Set_Local_Control+0x64>)
 800126c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <Set_Local_Control+0x68>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <Set_Local_Control+0x68>)
 8001276:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <Set_Local_Control+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <Set_Local_Control+0x6c>)
 8001280:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <Set_Local_Control+0x60>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <Set_Local_Control+0x64>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <Set_Local_Control+0x68>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <Set_Local_Control+0x6c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]

	return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000430 	.word	0x20000430
 80012ac:	20000428 	.word	0x20000428
 80012b0:	2000042c 	.word	0x2000042c
 80012b4:	20000434 	.word	0x20000434
 80012b8:	20000438 	.word	0x20000438

080012bc <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	00da      	lsls	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f004 fbb5 	bl	8005a3c <Clear_Status_Bit>

	return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 fb93 	bl	8005a18 <Set_Status_Bit>

	return 1;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <Start_UART_Receive+0x18>)
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <Start_UART_Receive+0x1c>)
 8001304:	2201      	movs	r2, #1
 8001306:	0018      	movs	r0, r3
 8001308:	f00a fa88 	bl	800b81c <HAL_UART_Receive_DMA>

	return 1;
 800130c:	2301      	movs	r3, #1
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004cc 	.word	0x200004cc
 8001318:	20000a38 	.word	0x20000a38

0800131c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	000a      	movs	r2, r1
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 800133a:	2117      	movs	r1, #23
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 800134a:	1cfb      	adds	r3, r7, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001352:	4b6d      	ldr	r3, [pc, #436]	@ (8001508 <Pot_Check+0x1ec>)
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001356:	4b6d      	ldr	r3, [pc, #436]	@ (800150c <Pot_Check+0x1f0>)
 8001358:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 800135a:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <Pot_Check+0x1f4>)
 800135c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2246      	movs	r2, #70	@ 0x46
 8001366:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001368:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <Pot_Check+0x1f8>)
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e04e      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 800136e:	1cfb      	adds	r3, r7, #3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10f      	bne.n	8001396 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001376:	4b68      	ldr	r3, [pc, #416]	@ (8001518 <Pot_Check+0x1fc>)
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 800137a:	4b68      	ldr	r3, [pc, #416]	@ (800151c <Pot_Check+0x200>)
 800137c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 800137e:	4b68      	ldr	r3, [pc, #416]	@ (8001520 <Pot_Check+0x204>)
 8001380:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3302      	adds	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001388:	2317      	movs	r3, #23
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2246      	movs	r2, #70	@ 0x46
 800138e:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001390:	4b64      	ldr	r3, [pc, #400]	@ (8001524 <Pot_Check+0x208>)
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e03a      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001396:	1cfb      	adds	r3, r7, #3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d10f      	bne.n	80013be <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 800139e:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <Pot_Check+0x20c>)
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80013a2:	4b62      	ldr	r3, [pc, #392]	@ (800152c <Pot_Check+0x210>)
 80013a4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80013a6:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <Pot_Check+0x214>)
 80013a8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 80013b0:	2317      	movs	r3, #23
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2246      	movs	r2, #70	@ 0x46
 80013b6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 80013b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <Pot_Check+0x218>)
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	e026      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d10f      	bne.n	80013e6 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 80013c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <Pot_Check+0x21c>)
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 80013ca:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <Pot_Check+0x220>)
 80013cc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 80013ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001540 <Pot_Check+0x224>)
 80013d0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3306      	adds	r3, #6
 80013d6:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 80013d8:	2317      	movs	r3, #23
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2246      	movs	r2, #70	@ 0x46
 80013de:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 80013e0:	4b58      	ldr	r3, [pc, #352]	@ (8001544 <Pot_Check+0x228>)
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	e012      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d10e      	bne.n	800140c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 80013ee:	4b56      	ldr	r3, [pc, #344]	@ (8001548 <Pot_Check+0x22c>)
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 80013f2:	4b56      	ldr	r3, [pc, #344]	@ (800154c <Pot_Check+0x230>)
 80013f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80013f6:	4b56      	ldr	r3, [pc, #344]	@ (8001550 <Pot_Check+0x234>)
 80013f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3308      	adds	r3, #8
 80013fe:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001400:	2317      	movs	r3, #23
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2246      	movs	r2, #70	@ 0x46
 8001406:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <Pot_Check+0x238>)
 800140a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10b      	bne.n	800142e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e066      	b.n	80014fc <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e055      	b.n	80014fc <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d150      	bne.n	80014fc <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001460:	200a      	movs	r0, #10
 8001462:	183b      	adds	r3, r7, r0
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	881a      	ldrh	r2, [r3, #0]
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d907      	bls.n	8001484 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	8819      	ldrh	r1, [r3, #0]
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	881a      	ldrh	r2, [r3, #0]
 800147c:	183b      	adds	r3, r7, r0
 800147e:	1a8a      	subs	r2, r1, r2
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	e00d      	b.n	80014a0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	881a      	ldrh	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d907      	bls.n	80014a0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	8819      	ldrh	r1, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	230a      	movs	r3, #10
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	1a8a      	subs	r2, r1, r2
 800149e:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80014a0:	2317      	movs	r3, #23
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	220a      	movs	r2, #10
 80014aa:	18ba      	adds	r2, r7, r2
 80014ac:	8812      	ldrh	r2, [r2, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d924      	bls.n	80014fc <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e018      	b.n	80014fc <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d015      	beq.n	80014fc <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <Pot_Check+0x23c>)
 80014e0:	2120      	movs	r1, #32
 80014e2:	0018      	movs	r0, r3
 80014e4:	f004 faaa 	bl	8005a3c <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <Pot_Check+0x23c>)
 80014ea:	2140      	movs	r1, #64	@ 0x40
 80014ec:	0018      	movs	r0, r3
 80014ee:	f004 faa5 	bl	8005a3c <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <Pot_Check+0x23c>)
 80014f4:	2108      	movs	r1, #8
 80014f6:	0018      	movs	r0, r3
 80014f8:	f004 faa0 	bl	8005a3c <Clear_Status_Bit>
			}
		}
	}

	return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b00a      	add	sp, #40	@ 0x28
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	200004d4 	.word	0x200004d4
 800150c:	200004d6 	.word	0x200004d6
 8001510:	200004cd 	.word	0x200004cd
 8001514:	20000430 	.word	0x20000430
 8001518:	200004d8 	.word	0x200004d8
 800151c:	200004da 	.word	0x200004da
 8001520:	200004ce 	.word	0x200004ce
 8001524:	20000428 	.word	0x20000428
 8001528:	200004dc 	.word	0x200004dc
 800152c:	200004de 	.word	0x200004de
 8001530:	200004cf 	.word	0x200004cf
 8001534:	2000042c 	.word	0x2000042c
 8001538:	200004e0 	.word	0x200004e0
 800153c:	200004e2 	.word	0x200004e2
 8001540:	200004d0 	.word	0x200004d0
 8001544:	20000434 	.word	0x20000434
 8001548:	200004e4 	.word	0x200004e4
 800154c:	200004e6 	.word	0x200004e6
 8001550:	200004d1 	.word	0x200004d1
 8001554:	20000438 	.word	0x20000438
 8001558:	20000c24 	.word	0x20000c24

0800155c <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001564:	250f      	movs	r5, #15
 8001566:	197c      	adds	r4, r7, r5
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	00da      	lsls	r2, r3, #3
 800156c:	23a0      	movs	r3, #160	@ 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f006 fae2 	bl	8007b3c <HAL_GPIO_ReadPin>
 8001578:	0003      	movs	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 800157c:	197b      	adds	r3, r7, r5
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10a      	bne.n	800159a <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01e      	beq.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e017      	b.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0e      	cmp	r3, #14
 80015a0:	d013      	beq.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d109      	bne.n	80015be <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015b4:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e005      	b.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015c8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e006      	b.n	80015e8 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b0e      	cmp	r3, #14
 80015e0:	d102      	bne.n	80015e8 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	2000001d 	.word	0x2000001d
 80015f8:	200004e8 	.word	0x200004e8

080015fc <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b093      	sub	sp, #76	@ 0x4c
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	2410      	movs	r4, #16
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	2338      	movs	r3, #56	@ 0x38
 800160a:	001a      	movs	r2, r3
 800160c:	2100      	movs	r1, #0
 800160e:	f00b fc27 	bl	800ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001612:	003b      	movs	r3, r7
 8001614:	0018      	movs	r0, r3
 8001616:	2310      	movs	r3, #16
 8001618:	001a      	movs	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	f00b fc20 	bl	800ce60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	0018      	movs	r0, r3
 8001626:	f006 fefb 	bl	8008420 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2280      	movs	r2, #128	@ 0x80
 8001634:	0052      	lsls	r2, r2, #1
 8001636:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001638:	0021      	movs	r1, r4
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2202      	movs	r2, #2
 800164a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2202      	movs	r2, #2
 8001650:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2208      	movs	r2, #8
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	0292      	lsls	r2, r2, #10
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	22c0      	movs	r2, #192	@ 0xc0
 800166a:	04d2      	lsls	r2, r2, #19
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	0592      	lsls	r2, r2, #22
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001676:	187b      	adds	r3, r7, r1
 8001678:	0018      	movs	r0, r3
 800167a:	f006 ff1d 	bl	80084b8 <HAL_RCC_OscConfig>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001682:	f000 fdb1 	bl	80021e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	003b      	movs	r3, r7
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	003b      	movs	r3, r7
 800168e:	2202      	movs	r2, #2
 8001690:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	003b      	movs	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001698:	003b      	movs	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169e:	003b      	movs	r3, r7
 80016a0:	2102      	movs	r1, #2
 80016a2:	0018      	movs	r0, r3
 80016a4:	f007 fa22 	bl	8008aec <HAL_RCC_ClockConfig>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016ac:	f000 fd9c 	bl	80021e8 <Error_Handler>
  }
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b013      	add	sp, #76	@ 0x4c
 80016b6:	bd90      	pop	{r4, r7, pc}

080016b8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	230c      	movs	r3, #12
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f00b fbca 	bl	800ce60 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016cc:	4b54      	ldr	r3, [pc, #336]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016ce:	4a55      	ldr	r2, [pc, #340]	@ (8001824 <MX_ADC1_Init+0x16c>)
 80016d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d2:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016d4:	2280      	movs	r2, #128	@ 0x80
 80016d6:	05d2      	lsls	r2, r2, #23
 80016d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016da:	4b51      	ldr	r3, [pc, #324]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	0392      	lsls	r2, r2, #14
 80016ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016f0:	2208      	movs	r2, #8
 80016f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80016fa:	4b49      	ldr	r3, [pc, #292]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001700:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001702:	2200      	movs	r2, #0
 8001704:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001706:	4b46      	ldr	r3, [pc, #280]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001708:	2205      	movs	r2, #5
 800170a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170c:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <MX_ADC1_Init+0x168>)
 800170e:	2220      	movs	r2, #32
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001714:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <MX_ADC1_Init+0x168>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001720:	4b3f      	ldr	r3, [pc, #252]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001722:	222c      	movs	r2, #44	@ 0x2c
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001728:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <MX_ADC1_Init+0x168>)
 800172a:	2200      	movs	r2, #0
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001730:	2200      	movs	r2, #0
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001736:	2200      	movs	r2, #0
 8001738:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <MX_ADC1_Init+0x168>)
 800173c:	223c      	movs	r2, #60	@ 0x3c
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001742:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <MX_ADC1_Init+0x168>)
 800174a:	0018      	movs	r0, r3
 800174c:	f004 fba4 	bl	8005e98 <HAL_ADC_Init>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001754:	f000 fd48 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176a:	1d3a      	adds	r2, r7, #4
 800176c:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <MX_ADC1_Init+0x168>)
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f004 ff15 	bl	80065a0 <HAL_ADC_ConfigChannel>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800177a:	f000 fd35 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <MX_ADC1_Init+0x170>)
 8001782:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2204      	movs	r2, #4
 8001788:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	1d3a      	adds	r2, r7, #4
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001794:	0011      	movs	r1, r2
 8001796:	0018      	movs	r0, r3
 8001798:	f004 ff02 	bl	80065a0 <HAL_ADC_ConfigChannel>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80017a0:	f000 fd22 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <MX_ADC1_Init+0x174>)
 80017a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2208      	movs	r2, #8
 80017ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_ADC1_Init+0x168>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 feef 	bl	80065a0 <HAL_ADC_ConfigChannel>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80017c6:	f000 fd0f 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MX_ADC1_Init+0x178>)
 80017ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	220c      	movs	r2, #12
 80017d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_ADC1_Init+0x168>)
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f004 fedc 	bl	80065a0 <HAL_ADC_ConfigChannel>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80017ec:	f000 fcfc 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <MX_ADC1_Init+0x17c>)
 80017f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2210      	movs	r2, #16
 80017fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f004 fec9 	bl	80065a0 <HAL_ADC_ConfigChannel>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001812:	f000 fce9 	bl	80021e8 <Error_Handler>
  }
}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	200004ec 	.word	0x200004ec
 8001824:	40012400 	.word	0x40012400
 8001828:	04000002 	.word	0x04000002
 800182c:	10000010 	.word	0x10000010
 8001830:	14000020 	.word	0x14000020
 8001834:	18000040 	.word	0x18000040

08001838 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	@ 0x50
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	2334      	movs	r3, #52	@ 0x34
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	0018      	movs	r0, r3
 8001844:	231c      	movs	r3, #28
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f00b fb09 	bl	800ce60 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	003b      	movs	r3, r7
 8001850:	0018      	movs	r0, r3
 8001852:	2334      	movs	r3, #52	@ 0x34
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f00b fb02 	bl	800ce60 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800185c:	4b3a      	ldr	r3, [pc, #232]	@ (8001948 <MX_TIM16_Init+0x110>)
 800185e:	4a3b      	ldr	r2, [pc, #236]	@ (800194c <MX_TIM16_Init+0x114>)
 8001860:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001862:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <MX_TIM16_Init+0x110>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001870:	22ff      	movs	r2, #255	@ 0xff
 8001872:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <MX_TIM16_Init+0x110>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001888:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <MX_TIM16_Init+0x110>)
 800188a:	0018      	movs	r0, r3
 800188c:	f007 fc52 	bl	8009134 <HAL_TIM_Base_Init>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001894:	f000 fca8 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <MX_TIM16_Init+0x110>)
 800189a:	0018      	movs	r0, r3
 800189c:	f007 fd50 	bl	8009340 <HAL_TIM_OC_Init>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80018a4:	f000 fca0 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018a8:	2134      	movs	r1, #52	@ 0x34
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	22ff      	movs	r2, #255	@ 0xff
 80018b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	1879      	adds	r1, r7, r1
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <MX_TIM16_Init+0x110>)
 80018d8:	2200      	movs	r2, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f008 fba4 	bl	800a028 <HAL_TIM_OC_ConfigChannel>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80018e4:	f000 fc80 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <MX_TIM16_Init+0x110>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_TIM16_Init+0x110>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2108      	movs	r1, #8
 80018f4:	438a      	bics	r2, r1
 80018f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f8:	003b      	movs	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fe:	003b      	movs	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001904:	003b      	movs	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800190a:	003b      	movs	r3, r7
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001910:	003b      	movs	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001916:	003b      	movs	r3, r7
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	0192      	lsls	r2, r2, #6
 800191c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800191e:	003b      	movs	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001924:	003b      	movs	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800192a:	003a      	movs	r2, r7
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_TIM16_Init+0x110>)
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f009 fd9f 	bl	800b474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 800193a:	f000 fc55 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b014      	add	sp, #80	@ 0x50
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000748 	.word	0x20000748
 800194c:	40014400 	.word	0x40014400

08001950 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	2320      	movs	r3, #32
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	0018      	movs	r0, r3
 800195c:	2310      	movs	r3, #16
 800195e:	001a      	movs	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	f00b fa7d 	bl	800ce60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	2314      	movs	r3, #20
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	0018      	movs	r0, r3
 800196c:	230c      	movs	r3, #12
 800196e:	001a      	movs	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f00b fa75 	bl	800ce60 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	0018      	movs	r0, r3
 800197a:	2310      	movs	r3, #16
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f00b fa6e 	bl	800ce60 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	05d2      	lsls	r2, r2, #23
 800198a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 800198c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 800198e:	223f      	movs	r2, #63	@ 0x3f
 8001990:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001998:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 800199a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a44 <MX_TIM2_Init+0xf4>)
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800199e:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f007 fbc0 	bl	8009134 <HAL_TIM_Base_Init>
 80019b4:	1e03      	subs	r3, r0, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80019b8:	f000 fc16 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	2120      	movs	r1, #32
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0152      	lsls	r2, r2, #5
 80019c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c6:	187a      	adds	r2, r7, r1
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f008 fd2f 	bl	800a430 <HAL_TIM_ConfigClockSource>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80019d6:	f000 fc07 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f008 f85b 	bl	8009a98 <HAL_TIM_IC_Init>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019e6:	f000 fbff 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2114      	movs	r1, #20
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f8:	187a      	adds	r2, r7, r1
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f009 fcd0 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001a08:	f000 fbee 	bl	80021e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2202      	movs	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2201      	movs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	220f      	movs	r2, #15
 8001a22:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1d39      	adds	r1, r7, #4
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f008 fb5c 	bl	800a0e8 <HAL_TIM_IC_ConfigChannel>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001a34:	f000 fbd8 	bl	80021e8 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b00c      	add	sp, #48	@ 0x30
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000804 	.word	0x20000804
 8001a44:	001fffff 	.word	0x001fffff

08001a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	@ 0x38
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	2328      	movs	r3, #40	@ 0x28
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	0018      	movs	r0, r3
 8001a54:	2310      	movs	r3, #16
 8001a56:	001a      	movs	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f00b fa01 	bl	800ce60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	231c      	movs	r3, #28
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	230c      	movs	r3, #12
 8001a66:	001a      	movs	r2, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f00b f9f9 	bl	800ce60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6e:	003b      	movs	r3, r7
 8001a70:	0018      	movs	r0, r3
 8001a72:	231c      	movs	r3, #28
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f00b f9f2 	bl	800ce60 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7c:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a7e:	4a33      	ldr	r2, [pc, #204]	@ (8001b4c <MX_TIM3_Init+0x104>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001a82:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a84:	4a32      	ldr	r2, [pc, #200]	@ (8001b50 <MX_TIM3_Init+0x108>)
 8001a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a90:	4a30      	ldr	r2, [pc, #192]	@ (8001b54 <MX_TIM3_Init+0x10c>)
 8001a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a96:	2280      	movs	r2, #128	@ 0x80
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa2:	4b29      	ldr	r3, [pc, #164]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f007 fb45 	bl	8009134 <HAL_TIM_Base_Init>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f000 fb9b 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	2128      	movs	r1, #40	@ 0x28
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2280      	movs	r2, #128	@ 0x80
 8001ab8:	0152      	lsls	r2, r2, #5
 8001aba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001abc:	187a      	adds	r2, r7, r1
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f008 fcb4 	bl	800a430 <HAL_TIM_ConfigClockSource>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001acc:	f000 fb8c 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f007 fc34 	bl	8009340 <HAL_TIM_OC_Init>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001adc:	f000 fb84 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	211c      	movs	r1, #28
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aee:	187a      	adds	r2, r7, r1
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001af2:	0011      	movs	r1, r2
 8001af4:	0018      	movs	r0, r3
 8001af6:	f009 fc55 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001afe:	f000 fb73 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b02:	003b      	movs	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b08:	003b      	movs	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0e:	003b      	movs	r3, r7
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	003b      	movs	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1a:	0039      	movs	r1, r7
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	0018      	movs	r0, r3
 8001b22:	f008 fa81 	bl	800a028 <HAL_TIM_OC_ConfigChannel>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001b2a:	f000 fb5d 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2108      	movs	r1, #8
 8001b3a:	438a      	bics	r2, r1
 8001b3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b00e      	add	sp, #56	@ 0x38
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	200008c0 	.word	0x200008c0
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	00007fff 	.word	0x00007fff
 8001b54:	00000fff 	.word	0x00000fff

08001b58 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b09c      	sub	sp, #112	@ 0x70
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	2360      	movs	r3, #96	@ 0x60
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	0018      	movs	r0, r3
 8001b64:	2310      	movs	r3, #16
 8001b66:	001a      	movs	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f00b f979 	bl	800ce60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	2354      	movs	r3, #84	@ 0x54
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	0018      	movs	r0, r3
 8001b74:	230c      	movs	r3, #12
 8001b76:	001a      	movs	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f00b f971 	bl	800ce60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7e:	2338      	movs	r3, #56	@ 0x38
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	0018      	movs	r0, r3
 8001b84:	231c      	movs	r3, #28
 8001b86:	001a      	movs	r2, r3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f00b f969 	bl	800ce60 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	0018      	movs	r0, r3
 8001b92:	2334      	movs	r3, #52	@ 0x34
 8001b94:	001a      	movs	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	f00b f962 	bl	800ce60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001b9e:	4a60      	ldr	r2, [pc, #384]	@ (8001d20 <MX_TIM1_Init+0x1c8>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001bae:	4b5b      	ldr	r3, [pc, #364]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bb0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d24 <MX_TIM1_Init+0x1cc>)
 8001bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001bb4:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	0052      	lsls	r2, r2, #1
 8001bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bbc:	4b57      	ldr	r3, [pc, #348]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc2:	4b56      	ldr	r3, [pc, #344]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc8:	4b54      	ldr	r3, [pc, #336]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f007 fab2 	bl	8009134 <HAL_TIM_Base_Init>
 8001bd0:	1e03      	subs	r3, r0, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001bd4:	f000 fb08 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	2160      	movs	r1, #96	@ 0x60
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	0152      	lsls	r2, r2, #5
 8001be0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be2:	187a      	adds	r2, r7, r1
 8001be4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f008 fc21 	bl	800a430 <HAL_TIM_ConfigClockSource>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bf2:	f000 faf9 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf6:	4b49      	ldr	r3, [pc, #292]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f007 fe01 	bl	8009800 <HAL_TIM_PWM_Init>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001c02:	f000 faf1 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c06:	2154      	movs	r1, #84	@ 0x54
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1a:	187a      	adds	r2, r7, r1
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c1e:	0011      	movs	r1, r2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f009 fbbf 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c2a:	f000 fadd 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2138      	movs	r1, #56	@ 0x38
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2260      	movs	r2, #96	@ 0x60
 8001c34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5a:	1879      	adds	r1, r7, r1
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	0018      	movs	r0, r3
 8001c62:	f008 fae5 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c6a:	f000 fabd 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	492b      	ldr	r1, [pc, #172]	@ (8001d28 <MX_TIM1_Init+0x1d0>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c7e:	2338      	movs	r3, #56	@ 0x38
 8001c80:	18f9      	adds	r1, r7, r3
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c84:	220c      	movs	r2, #12
 8001c86:	0018      	movs	r0, r3
 8001c88:	f008 fad2 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001c90:	f000 faaa 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4922      	ldr	r1, [pc, #136]	@ (8001d28 <MX_TIM1_Init+0x1d0>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	0192      	lsls	r2, r2, #6
 8001cc8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2280      	movs	r2, #128	@ 0x80
 8001ce0:	0492      	lsls	r2, r2, #18
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cf6:	1d3a      	adds	r2, r7, #4
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f009 fbb9 	bl	800b474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001d06:	f000 fa6f 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d0a:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f003 f81b 	bl	8004d48 <HAL_TIM_MspPostInit>

}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b01c      	add	sp, #112	@ 0x70
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	2000097c 	.word	0x2000097c
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	fffff7ff 	.word	0xfffff7ff

08001d2c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b094      	sub	sp, #80	@ 0x50
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	2334      	movs	r3, #52	@ 0x34
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	0018      	movs	r0, r3
 8001d38:	231c      	movs	r3, #28
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f00b f88f 	bl	800ce60 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d42:	003b      	movs	r3, r7
 8001d44:	0018      	movs	r0, r3
 8001d46:	2334      	movs	r3, #52	@ 0x34
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f00b f888 	bl	800ce60 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d50:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d52:	4a3b      	ldr	r2, [pc, #236]	@ (8001e40 <MX_TIM17_Init+0x114>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001d56:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d58:	4a3a      	ldr	r2, [pc, #232]	@ (8001e44 <MX_TIM17_Init+0x118>)
 8001d5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001d62:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001d68:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f007 f9d8 	bl	8009134 <HAL_TIM_Base_Init>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001d88:	f000 fa2e 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f007 fad6 	bl	8009340 <HAL_TIM_OC_Init>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001d98:	f000 fa26 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d9c:	2134      	movs	r1, #52	@ 0x34
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc8:	1879      	adds	r1, r7, r1
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f008 f92a 	bl	800a028 <HAL_TIM_OC_ConfigChannel>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001dd8:	f000 fa06 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2108      	movs	r1, #8
 8001de8:	430a      	orrs	r2, r1
 8001dea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dec:	003b      	movs	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df2:	003b      	movs	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df8:	003b      	movs	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e04:	003b      	movs	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	0192      	lsls	r2, r2, #6
 8001e10:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e12:	003b      	movs	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e18:	003b      	movs	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1e:	003a      	movs	r2, r7
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f009 fb25 	bl	800b474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001e2e:	f000 f9db 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b014      	add	sp, #80	@ 0x50
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	2000068c 	.word	0x2000068c
 8001e40:	40014800 	.word	0x40014800
 8001e44:	00007fff 	.word	0x00007fff

08001e48 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <MX_LPTIM1_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e5a:	22e0      	movs	r2, #224	@ 0xe0
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e62:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <MX_LPTIM1_Init+0x6c>)
 8001e64:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	03d2      	lsls	r2, r2, #15
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f005 febb 	bl	8007c04 <HAL_LPTIM_Init>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001e92:	f000 f9a9 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001e96:	2202      	movs	r2, #2
 8001e98:	2102      	movs	r1, #2
 8001e9a:	2011      	movs	r0, #17
 8001e9c:	f005 f98a 	bl	80071b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ea0:	2011      	movs	r0, #17
 8001ea2:	f005 f99c 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000bbc 	.word	0x20000bbc
 8001eb0:	40007c00 	.word	0x40007c00
 8001eb4:	0000ffff 	.word	0x0000ffff

08001eb8 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	231c      	movs	r3, #28
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f00a ffca 	bl	800ce60 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ece:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <MX_TIM14_Init+0x94>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <MX_TIM14_Init+0x98>)
 8001ed6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f007 f91d 	bl	8009134 <HAL_TIM_Base_Init>
 8001efa:	1e03      	subs	r3, r0, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8001efe:	f000 f973 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001f04:	0018      	movs	r0, r3
 8001f06:	f007 fa1b 	bl	8009340 <HAL_TIM_OC_Init>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8001f0e:	f000 f96b 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2a:	1d39      	adds	r1, r7, #4
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	0018      	movs	r0, r3
 8001f32:	f008 f879 	bl	800a028 <HAL_TIM_OC_ConfigChannel>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001f3a:	f000 f955 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b008      	add	sp, #32
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	200005d0 	.word	0x200005d0
 8001f4c:	40002000 	.word	0x40002000
 8001f50:	00007fff 	.word	0x00007fff

08001f54 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f5a:	4a16      	ldr	r2, [pc, #88]	@ (8001fb4 <MX_USART2_UART_Init+0x60>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f60:	4a15      	ldr	r2, [pc, #84]	@ (8001fb8 <MX_USART2_UART_Init+0x64>)
 8001f62:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f78:	220c      	movs	r2, #12
 8001f7a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f009 fb25 	bl	800b5ec <HAL_UART_Init>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001fa6:	f000 f91f 	bl	80021e8 <Error_Handler>
  }
}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000a38 	.word	0x20000a38
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	00007a12 	.word	0x00007a12

08001fbc <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <MX_DMA_Init+0x48>)
 8001fc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_DMA_Init+0x48>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_DMA_Init+0x48>)
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2009      	movs	r0, #9
 8001fe0:	f005 f8e8 	bl	80071b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fe4:	2009      	movs	r0, #9
 8001fe6:	f005 f8fa 	bl	80071de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8001fea:	2202      	movs	r2, #2
 8001fec:	2102      	movs	r1, #2
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f005 f8e0 	bl	80071b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f005 f8f2 	bl	80071de <HAL_NVIC_EnableIRQ>

}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	40021000 	.word	0x40021000

08002008 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b08b      	sub	sp, #44	@ 0x2c
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	2414      	movs	r4, #20
 8002010:	193b      	adds	r3, r7, r4
 8002012:	0018      	movs	r0, r3
 8002014:	2314      	movs	r3, #20
 8002016:	001a      	movs	r2, r3
 8002018:	2100      	movs	r1, #0
 800201a:	f00a ff21 	bl	800ce60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	4b6e      	ldr	r3, [pc, #440]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002024:	2104      	movs	r1, #4
 8002026:	430a      	orrs	r2, r1
 8002028:	635a      	str	r2, [r3, #52]	@ 0x34
 800202a:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002036:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800203a:	4b67      	ldr	r3, [pc, #412]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800203c:	2120      	movs	r1, #32
 800203e:	430a      	orrs	r2, r1
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34
 8002042:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002046:	2220      	movs	r2, #32
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b62      	ldr	r3, [pc, #392]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002052:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34
 800205a:	4b5f      	ldr	r3, [pc, #380]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800205c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800206a:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800206c:	2102      	movs	r1, #2
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800207e:	4b57      	ldr	r3, [pc, #348]	@ (80021dc <MX_GPIO_Init+0x1d4>)
 8002080:	2200      	movs	r2, #0
 8002082:	2140      	movs	r1, #64	@ 0x40
 8002084:	0018      	movs	r0, r3
 8002086:	f005 fd76 	bl	8007b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	2204      	movs	r2, #4
 800208e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002090:	193b      	adds	r3, r7, r4
 8002092:	2288      	movs	r2, #136	@ 0x88
 8002094:	0352      	lsls	r2, r2, #13
 8002096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	193b      	adds	r3, r7, r4
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	4a4f      	ldr	r2, [pc, #316]	@ (80021e0 <MX_GPIO_Init+0x1d8>)
 80020a2:	0019      	movs	r1, r3
 80020a4:	0010      	movs	r0, r2
 80020a6:	f005 fbe5 	bl	8007874 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80020aa:	0021      	movs	r1, r4
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	000c      	movs	r4, r1
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	2201      	movs	r2, #1
 80020ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	193b      	adds	r3, r7, r4
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80020c8:	193a      	adds	r2, r7, r4
 80020ca:	23a0      	movs	r3, #160	@ 0xa0
 80020cc:	05db      	lsls	r3, r3, #23
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f005 fbcf 	bl	8007874 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2201      	movs	r2, #1
 80020e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	4a3a      	ldr	r2, [pc, #232]	@ (80021dc <MX_GPIO_Init+0x1d4>)
 80020f2:	0019      	movs	r1, r3
 80020f4:	0010      	movs	r0, r2
 80020f6:	f005 fbbd 	bl	8007874 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	193b      	adds	r3, r7, r4
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2201      	movs	r2, #1
 800210c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800210e:	193a      	adds	r2, r7, r4
 8002110:	23a0      	movs	r3, #160	@ 0xa0
 8002112:	05db      	lsls	r3, r3, #23
 8002114:	0011      	movs	r1, r2
 8002116:	0018      	movs	r0, r3
 8002118:	f005 fbac 	bl	8007874 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800211c:	193b      	adds	r3, r7, r4
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	193b      	adds	r3, r7, r4
 8002124:	2201      	movs	r2, #1
 8002126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	193b      	adds	r3, r7, r4
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	193b      	adds	r3, r7, r4
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002134:	193b      	adds	r3, r7, r4
 8002136:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <MX_GPIO_Init+0x1dc>)
 8002138:	0019      	movs	r1, r3
 800213a:	0010      	movs	r0, r2
 800213c:	f005 fb9a 	bl	8007874 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002140:	0021      	movs	r1, r4
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2280      	movs	r2, #128	@ 0x80
 8002146:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	22c4      	movs	r2, #196	@ 0xc4
 800214c:	0392      	lsls	r2, r2, #14
 800214e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002150:	000c      	movs	r4, r1
 8002152:	193b      	adds	r3, r7, r4
 8002154:	2202      	movs	r2, #2
 8002156:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800215e:	193b      	adds	r3, r7, r4
 8002160:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <MX_GPIO_Init+0x1dc>)
 8002162:	0019      	movs	r1, r3
 8002164:	0010      	movs	r0, r2
 8002166:	f005 fb85 	bl	8007874 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800216a:	0021      	movs	r1, r4
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	0152      	lsls	r2, r2, #5
 8002172:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	000c      	movs	r4, r1
 8002176:	193b      	adds	r3, r7, r4
 8002178:	2201      	movs	r2, #1
 800217a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	193b      	adds	r3, r7, r4
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002188:	193a      	adds	r2, r7, r4
 800218a:	23a0      	movs	r3, #160	@ 0xa0
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	0011      	movs	r1, r2
 8002190:	0018      	movs	r0, r3
 8002192:	f005 fb6f 	bl	8007874 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002196:	0021      	movs	r1, r4
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2201      	movs	r2, #1
 80021a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80021b0:	187a      	adds	r2, r7, r1
 80021b2:	23a0      	movs	r3, #160	@ 0xa0
 80021b4:	05db      	lsls	r3, r3, #23
 80021b6:	0011      	movs	r1, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	f005 fb5b 	bl	8007874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80021be:	2202      	movs	r2, #2
 80021c0:	2102      	movs	r1, #2
 80021c2:	2007      	movs	r0, #7
 80021c4:	f004 fff6 	bl	80071b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021c8:	2007      	movs	r0, #7
 80021ca:	f005 f808 	bl	80071de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b00b      	add	sp, #44	@ 0x2c
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	50000800 	.word	0x50000800
 80021e0:	50001400 	.word	0x50001400
 80021e4:	50000400 	.word	0x50000400

080021e8 <Error_Handler>:

void Error_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	e7fd      	b.n	80021f0 <Error_Handler+0x8>

080021f4 <System_Init>:
  {

  }
}

void System_Init(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80021f8:	f003 fc5e 	bl	8005ab8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80021fc:	f7ff f9fe 	bl	80015fc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002200:	f7ff ff02 	bl	8002008 <MX_GPIO_Init>
	MX_DMA_Init();
 8002204:	f7ff feda 	bl	8001fbc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002208:	f7ff fea4 	bl	8001f54 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800220c:	f7ff fa54 	bl	80016b8 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002210:	f7ff fb12 	bl	8001838 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002214:	f7ff fb9c 	bl	8001950 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002218:	f7ff fc16 	bl	8001a48 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 800221c:	f7ff fc9c 	bl	8001b58 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002220:	f7ff fd84 	bl	8001d2c <MX_TIM17_Init>
	MX_TIM14_Init();
 8002224:	f7ff fe48 	bl	8001eb8 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002228:	f7ff fe0e 	bl	8001e48 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 800222c:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <System_Init+0xc0>)
 800222e:	0018      	movs	r0, r3
 8002230:	f004 fdde 	bl	8006df0 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8002234:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <System_Init+0xc4>)
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <System_Init+0xc8>)
 8002238:	210e      	movs	r1, #14
 800223a:	0018      	movs	r0, r3
 800223c:	f008 fa52 	bl	800a6e4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002240:	4a1f      	ldr	r2, [pc, #124]	@ (80022c0 <System_Init+0xcc>)
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <System_Init+0xc0>)
 8002244:	2100      	movs	r1, #0
 8002246:	0018      	movs	r0, r3
 8002248:	f003 fffe 	bl	8006248 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 800224c:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <System_Init+0xd0>)
 800224e:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <System_Init+0xd4>)
 8002250:	2112      	movs	r1, #18
 8002252:	0018      	movs	r0, r3
 8002254:	f008 fa46 	bl	800a6e4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002258:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <System_Init+0xd8>)
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <System_Init+0xd4>)
 800225c:	210e      	movs	r1, #14
 800225e:	0018      	movs	r0, r3
 8002260:	f008 fa40 	bl	800a6e4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <System_Init+0xdc>)
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <System_Init+0xe0>)
 8002268:	2114      	movs	r1, #20
 800226a:	0018      	movs	r0, r3
 800226c:	f008 fa3a 	bl	800a6e4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <System_Init+0xe4>)
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <System_Init+0xe8>)
 8002274:	2101      	movs	r1, #1
 8002276:	0018      	movs	r0, r3
 8002278:	f009 fa20 	bl	800b6bc <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 800227c:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <System_Init+0xec>)
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <System_Init+0xe8>)
 8002280:	2103      	movs	r1, #3
 8002282:	0018      	movs	r0, r3
 8002284:	f009 fa1a 	bl	800b6bc <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002288:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <System_Init+0xf0>)
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <System_Init+0xf4>)
 800228c:	2102      	movs	r1, #2
 800228e:	0018      	movs	r0, r3
 8002290:	f005 fede 	bl	8008050 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002294:	4a15      	ldr	r2, [pc, #84]	@ (80022ec <System_Init+0xf8>)
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <System_Init+0xfc>)
 8002298:	2114      	movs	r1, #20
 800229a:	0018      	movs	r0, r3
 800229c:	f008 fa22 	bl	800a6e4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <System_Init+0x100>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <System_Init+0x104>)
 80022a4:	2114      	movs	r1, #20
 80022a6:	0018      	movs	r0, r3
 80022a8:	f008 fa1c 	bl	800a6e4 <HAL_TIM_RegisterCallback>
}
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	200004ec 	.word	0x200004ec
 80022b8:	080022fd 	.word	0x080022fd
 80022bc:	20000748 	.word	0x20000748
 80022c0:	08002351 	.word	0x08002351
 80022c4:	080023e5 	.word	0x080023e5
 80022c8:	20000804 	.word	0x20000804
 80022cc:	08002501 	.word	0x08002501
 80022d0:	0800260d 	.word	0x0800260d
 80022d4:	200008c0 	.word	0x200008c0
 80022d8:	08002749 	.word	0x08002749
 80022dc:	20000a38 	.word	0x20000a38
 80022e0:	08002759 	.word	0x08002759
 80022e4:	08003ad9 	.word	0x08003ad9
 80022e8:	20000bbc 	.word	0x20000bbc
 80022ec:	08003e79 	.word	0x08003e79
 80022f0:	2000068c 	.word	0x2000068c
 80022f4:	08003e89 	.word	0x08003e89
 80022f8:	200005d0 	.word	0x200005d0

080022fc <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <TIM16_callback+0x40>)
 8002306:	0018      	movs	r0, r3
 8002308:	f001 ffc2 	bl	8004290 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <TIM16_callback+0x40>)
 800230e:	2100      	movs	r1, #0
 8002310:	0018      	movs	r0, r3
 8002312:	f001 ffe9 	bl	80042e8 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <TIM16_callback+0x44>)
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <TIM16_callback+0x40>)
 800231a:	0011      	movs	r1, r2
 800231c:	0018      	movs	r0, r3
 800231e:	f002 f8d9 	bl	80044d4 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <TIM16_callback+0x48>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	001a      	movs	r2, r3
 8002328:	4907      	ldr	r1, [pc, #28]	@ (8002348 <TIM16_callback+0x4c>)
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <TIM16_callback+0x50>)
 800232c:	0018      	movs	r0, r3
 800232e:	f004 f817 	bl	8006360 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	20000c3c 	.word	0x20000c3c
 8002340:	20000020 	.word	0x20000020
 8002344:	0800d704 	.word	0x0800d704
 8002348:	20000c30 	.word	0x20000c30
 800234c:	200004ec 	.word	0x200004ec

08002350 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f004 f88e 	bl	800647c <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002360:	4a1b      	ldr	r2, [pc, #108]	@ (80023d0 <ADC_DMA_conversion_complete_callback+0x80>)
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <ADC_DMA_conversion_complete_callback+0x84>)
 8002364:	0011      	movs	r1, r2
 8002366:	0018      	movs	r0, r3
 8002368:	f002 f94a 	bl	8004600 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 800236c:	f7fe f8d8 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002370:	250f      	movs	r5, #15
 8002372:	197c      	adds	r4, r7, r5
 8002374:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <ADC_DMA_conversion_complete_callback+0x88>)
 8002376:	2108      	movs	r1, #8
 8002378:	0018      	movs	r0, r3
 800237a:	f003 fb39 	bl	80059f0 <Get_Status_Bit>
 800237e:	0003      	movs	r3, r0
 8002380:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002382:	197b      	adds	r3, r7, r5
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10a      	bne.n	80023a0 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <ADC_DMA_conversion_complete_callback+0x8c>)
 800238c:	8a5b      	ldrh	r3, [r3, #18]
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 8002392:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <ADC_DMA_conversion_complete_callback+0x8c>)
 8002396:	8b5b      	ldrh	r3, [r3, #26]
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 800239c:	835a      	strh	r2, [r3, #26]
 800239e:	e003      	b.n	80023a8 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f001 ff3e 	bl	8004224 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 80023aa:	0018      	movs	r0, r3
 80023ac:	f002 fe92 	bl	80050d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <ADC_DMA_conversion_complete_callback+0x88>)
 80023b2:	2110      	movs	r1, #16
 80023b4:	0018      	movs	r0, r3
 80023b6:	f003 fb1b 	bl	80059f0 <Get_Status_Bit>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d104      	bne.n	80023c8 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <ADC_DMA_conversion_complete_callback+0x88>)
 80023c0:	2110      	movs	r1, #16
 80023c2:	0018      	movs	r0, r3
 80023c4:	f003 fb28 	bl	8005a18 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023c8:	46c0      	nop			@ (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	20000c30 	.word	0x20000c30
 80023d4:	20000c60 	.word	0x20000c60
 80023d8:	20000c24 	.word	0x20000c24
 80023dc:	20000ca8 	.word	0x20000ca8
 80023e0:	20000c3c 	.word	0x20000c3c

080023e4 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2100      	movs	r1, #0
 80023f0:	0018      	movs	r0, r3
 80023f2:	f008 f8f3 	bl	800a5dc <HAL_TIM_ReadCapturedValue>
 80023f6:	0002      	movs	r2, r0
 80023f8:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <TIM2_ch1_IP_capture_callback+0x100>)
 80023fa:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <TIM2_ch1_IP_capture_callback+0x100>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0a5b      	lsrs	r3, r3, #9
 8002402:	b29a      	uxth	r2, r3
 8002404:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <TIM2_ch1_IP_capture_callback+0x104>)
 8002406:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002408:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002412:	f001 fe27 	bl	8004064 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002416:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 800241c:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800241e:	2200      	movs	r2, #0
 8002420:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002422:	e05b      	b.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002424:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d124      	bne.n	8002478 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 800242e:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <TIM2_ch1_IP_capture_callback+0x104>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d951      	bls.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002438:	f001 fdf6 	bl	8004028 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002444:	2201      	movs	r2, #1
 8002446:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <TIM2_ch1_IP_capture_callback+0x10c>)
 800244a:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <TIM2_ch1_IP_capture_callback+0x110>)
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f001 fdd8 	bl	8004004 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b05      	cmp	r3, #5
 800245c:	d004      	beq.n	8002468 <TIM2_ch1_IP_capture_callback+0x84>
 800245e:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b07      	cmp	r3, #7
 8002466:	d101      	bne.n	800246c <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002468:	f002 fa0a 	bl	8004880 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800246c:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <TIM2_ch1_IP_capture_callback+0x118>)
 800246e:	2104      	movs	r1, #4
 8002470:	0018      	movs	r0, r3
 8002472:	f003 fad1 	bl	8005a18 <Set_Status_Bit>
}
 8002476:	e031      	b.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d108      	bne.n	8002494 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002482:	f001 fdef 	bl	8004064 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002488:	2203      	movs	r2, #3
 800248a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800248c:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800248e:	2202      	movs	r2, #2
 8002490:	705a      	strb	r2, [r3, #1]
}
 8002492:	e023      	b.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d11e      	bne.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 800249e:	f001 fdc3 	bl	8004028 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 80024aa:	2203      	movs	r2, #3
 80024ac:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 80024ae:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <TIM2_ch1_IP_capture_callback+0x10c>)
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <TIM2_ch1_IP_capture_callback+0x110>)
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f001 fda5 	bl	8004004 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d004      	beq.n	80024ce <TIM2_ch1_IP_capture_callback+0xea>
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b07      	cmp	r3, #7
 80024cc:	d101      	bne.n	80024d2 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 80024ce:	f002 f9d7 	bl	8004880 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <TIM2_ch1_IP_capture_callback+0x118>)
 80024d4:	2104      	movs	r1, #4
 80024d6:	0018      	movs	r0, r3
 80024d8:	f003 fa9e 	bl	8005a18 <Set_Status_Bit>
}
 80024dc:	46c0      	nop			@ (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000c1c 	.word	0x20000c1c
 80024e8:	20000c20 	.word	0x20000c20
 80024ec:	2000043c 	.word	0x2000043c
 80024f0:	20000c84 	.word	0x20000c84
 80024f4:	20000c3c 	.word	0x20000c3c
 80024f8:	20000428 	.word	0x20000428
 80024fc:	20000c24 	.word	0x20000c24

08002500 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002508:	240c      	movs	r4, #12
 800250a:	193b      	adds	r3, r7, r4
 800250c:	4a3a      	ldr	r2, [pc, #232]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 800250e:	7852      	ldrb	r2, [r2, #1]
 8002510:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002512:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d131      	bne.n	8002580 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 800251c:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002522:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002524:	2201      	movs	r2, #1
 8002526:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <TIM2_ch1_overflow_callback+0x100>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800252e:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <TIM2_ch1_overflow_callback+0x104>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	0099      	lsls	r1, r3, #2
 8002538:	23a0      	movs	r3, #160	@ 0xa0
 800253a:	05db      	lsls	r3, r3, #23
 800253c:	2201      	movs	r2, #1
 800253e:	0018      	movs	r0, r3
 8002540:	f005 fb19 	bl	8007b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <TIM2_ch1_overflow_callback+0x108>)
 8002546:	2200      	movs	r2, #0
 8002548:	2140      	movs	r1, #64	@ 0x40
 800254a:	0018      	movs	r0, r3
 800254c:	f005 fb13 	bl	8007b76 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002550:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b04      	cmp	r3, #4
 8002558:	d049      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800255a:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b06      	cmp	r3, #6
 8002562:	d044      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
 8002564:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800256a:	2b08      	cmp	r3, #8
 800256c:	d03f      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002570:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002578:	193a      	adds	r2, r7, r4
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800257e:	e036      	b.n	80025ee <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002580:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b03      	cmp	r3, #3
 8002588:	d131      	bne.n	80025ee <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002592:	2203      	movs	r2, #3
 8002594:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <TIM2_ch1_overflow_callback+0x100>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <TIM2_ch1_overflow_callback+0x104>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	0099      	lsls	r1, r3, #2
 80025a6:	23a0      	movs	r3, #160	@ 0xa0
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	2201      	movs	r2, #1
 80025ac:	0018      	movs	r0, r3
 80025ae:	f005 fae2 	bl	8007b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <TIM2_ch1_overflow_callback+0x108>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	2140      	movs	r1, #64	@ 0x40
 80025b8:	0018      	movs	r0, r3
 80025ba:	f005 fadc 	bl	8007b76 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025be:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d012      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d00d      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d008      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025de:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	18ba      	adds	r2, r7, r2
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b005      	add	sp, #20
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	20000428 	.word	0x20000428
 80025fc:	2000043c 	.word	0x2000043c
 8002600:	20000ccc 	.word	0x20000ccc
 8002604:	20000c22 	.word	0x20000c22
 8002608:	50000800 	.word	0x50000800

0800260c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b0b      	cmp	r3, #11
 800261c:	d01c      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800261e:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d017      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002628:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d012      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002632:	4b3a      	ldr	r3, [pc, #232]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b10      	cmp	r3, #16
 800263a:	d00d      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800263c:	4b37      	ldr	r3, [pc, #220]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b11      	cmp	r3, #17
 8002644:	d008      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002646:	4b35      	ldr	r3, [pc, #212]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800264c:	2b12      	cmp	r3, #18
 800264e:	d003      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002650:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fe1c 	bl	8004290 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002658:	4b32      	ldr	r3, [pc, #200]	@ (8002724 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 800265a:	2100      	movs	r1, #0
 800265c:	0018      	movs	r0, r3
 800265e:	f003 f960 	bl	8005922 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002662:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d106      	bne.n	800267a <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 800266c:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002672:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002674:	2202      	movs	r2, #2
 8002676:	705a      	strb	r2, [r3, #1]
 8002678:	e00a      	b.n	8002690 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800267a:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d105      	bne.n	8002690 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002684:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800268a:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800268c:	2203      	movs	r2, #3
 800268e:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002690:	4b22      	ldr	r3, [pc, #136]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b0b      	cmp	r3, #11
 8002698:	d03c      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d037      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b0d      	cmp	r3, #13
 80026ac:	d032      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d02d      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b11      	cmp	r3, #17
 80026c0:	d028      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d023      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80026cc:	4a17      	ldr	r2, [pc, #92]	@ (800272c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f001 fc96 	bl	8004004 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026dc:	0011      	movs	r1, r2
 80026de:	0018      	movs	r0, r3
 80026e0:	f001 fc90 	bl	8004004 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 80026e6:	2108      	movs	r1, #8
 80026e8:	0018      	movs	r0, r3
 80026ea:	f003 f995 	bl	8005a18 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 fdf8 	bl	80042e8 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80026f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fee8 	bl	80044d4 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	001a      	movs	r2, r3
 800270a:	490d      	ldr	r1, [pc, #52]	@ (8002740 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 800270e:	0018      	movs	r0, r3
 8002710:	f003 fe26 	bl	8006360 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002714:	46c0      	nop			@ (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000428 	.word	0x20000428
 8002720:	20000c84 	.word	0x20000c84
 8002724:	200008c0 	.word	0x200008c0
 8002728:	2000043c 	.word	0x2000043c
 800272c:	20000ca8 	.word	0x20000ca8
 8002730:	20000c3c 	.word	0x20000c3c
 8002734:	20000c24 	.word	0x20000c24
 8002738:	20000020 	.word	0x20000020
 800273c:	0800d704 	.word	0x0800d704
 8002740:	20000c30 	.word	0x20000c30
 8002744:	200004ec 	.word	0x200004ec

08002748 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002760:	4bbe      	ldr	r3, [pc, #760]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002762:	0018      	movs	r0, r3
 8002764:	f7fe fcb0 	bl	80010c8 <Is_System_Real_Time_Status_Byte>
 8002768:	0003      	movs	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <UART2_RX_transfer_complete_callback+0x1a>
 800276e:	f000 fc0c 	bl	8002f8a <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002772:	4bbb      	ldr	r3, [pc, #748]	@ (8002a60 <UART2_RX_transfer_complete_callback+0x308>)
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	0018      	movs	r0, r3
 8002778:	f003 f93a 	bl	80059f0 <Get_Status_Bit>
 800277c:	0003      	movs	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <UART2_RX_transfer_complete_callback+0x2e>
 8002782:	f001 f866 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002786:	4bb7      	ldr	r3, [pc, #732]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d159      	bne.n	8002844 <UART2_RX_transfer_complete_callback+0xec>
 8002790:	4bb5      	ldr	r3, [pc, #724]	@ (8002a68 <UART2_RX_transfer_complete_callback+0x310>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d154      	bne.n	8002844 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800279a:	4bb4      	ldr	r3, [pc, #720]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d013      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 80027a4:	4bb1      	ldr	r3, [pc, #708]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00e      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 80027ae:	4baf      	ldr	r3, [pc, #700]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d009      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 80027b8:	4bac      	ldr	r3, [pc, #688]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d004      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 80027c2:	4baa      	ldr	r3, [pc, #680]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d13b      	bne.n	8002844 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80027cc:	4ba3      	ldr	r3, [pc, #652]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2bfa      	cmp	r3, #250	@ 0xfa
 80027d4:	d10b      	bne.n	80027ee <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 80027d6:	4ba5      	ldr	r3, [pc, #660]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027d8:	4aa4      	ldr	r2, [pc, #656]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 80027de:	4ba3      	ldr	r3, [pc, #652]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027e0:	2209      	movs	r2, #9
 80027e2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 80027e4:	4ba2      	ldr	r3, [pc, #648]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80027ea:	f001 f82f 	bl	800384c <UART2_RX_transfer_complete_callback+0x10f4>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80027ee:	4b9b      	ldr	r3, [pc, #620]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2bf8      	cmp	r3, #248	@ 0xf8
 80027f6:	d001      	beq.n	80027fc <UART2_RX_transfer_complete_callback+0xa4>
 80027f8:	f001 f828 	bl	800384c <UART2_RX_transfer_complete_callback+0x10f4>

					speed_fsm.prev_state = speed_fsm.current_state;
 80027fc:	4b9b      	ldr	r3, [pc, #620]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027fe:	4a9b      	ldr	r2, [pc, #620]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002804:	4b99      	ldr	r3, [pc, #612]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002806:	220b      	movs	r2, #11
 8002808:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800280a:	4b99      	ldr	r3, [pc, #612]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	0099      	lsls	r1, r3, #2
 8002814:	23a0      	movs	r3, #160	@ 0xa0
 8002816:	05db      	lsls	r3, r3, #23
 8002818:	2200      	movs	r2, #0
 800281a:	0018      	movs	r0, r3
 800281c:	f005 f9ab 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002820:	4b94      	ldr	r3, [pc, #592]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002822:	2201      	movs	r2, #1
 8002824:	2140      	movs	r1, #64	@ 0x40
 8002826:	0018      	movs	r0, r3
 8002828:	f005 f9a5 	bl	8007b76 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800282c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002832:	4b8f      	ldr	r3, [pc, #572]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800283e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002840:	f001 f804 	bl	800384c <UART2_RX_transfer_complete_callback+0x10f4>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002844:	4b89      	ldr	r3, [pc, #548]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b09      	cmp	r3, #9
 800284c:	d123      	bne.n	8002896 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800284e:	4b83      	ldr	r3, [pc, #524]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2bf8      	cmp	r3, #248	@ 0xf8
 8002856:	d001      	beq.n	800285c <UART2_RX_transfer_complete_callback+0x104>
 8002858:	f000 fffb 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	0099      	lsls	r1, r3, #2
 8002860:	23a0      	movs	r3, #160	@ 0xa0
 8002862:	05db      	lsls	r3, r3, #23
 8002864:	2200      	movs	r2, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f005 f985 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800286c:	4b81      	ldr	r3, [pc, #516]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 800286e:	2201      	movs	r2, #1
 8002870:	2140      	movs	r1, #64	@ 0x40
 8002872:	0018      	movs	r0, r3
 8002874:	f005 f97f 	bl	8007b76 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002878:	4b7a      	ldr	r3, [pc, #488]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800287e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b79      	ldr	r3, [pc, #484]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800288a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 800288c:	4b77      	ldr	r3, [pc, #476]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800288e:	220a      	movs	r2, #10
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	f000 ffde 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002896:	4b75      	ldr	r3, [pc, #468]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b0a      	cmp	r3, #10
 800289e:	d145      	bne.n	800292c <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028a0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2bf8      	cmp	r3, #248	@ 0xf8
 80028a8:	d001      	beq.n	80028ae <UART2_RX_transfer_complete_callback+0x156>
 80028aa:	f000 ffd2 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					MIDI_CLK_fsm = COMPILING; //just in case
 80028ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028c0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80028c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b0b      	cmp	r3, #11
 80028ca:	d80f      	bhi.n	80028ec <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	0099      	lsls	r1, r3, #2
 80028d0:	23a0      	movs	r3, #160	@ 0xa0
 80028d2:	05db      	lsls	r3, r3, #23
 80028d4:	2200      	movs	r2, #0
 80028d6:	0018      	movs	r0, r3
 80028d8:	f005 f94d 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028dc:	4b65      	ldr	r3, [pc, #404]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	2140      	movs	r1, #64	@ 0x40
 80028e2:	0018      	movs	r0, r3
 80028e4:	f005 f947 	bl	8007b76 <HAL_GPIO_WritePin>
 80028e8:	f000 ffb3 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 80028ec:	4b60      	ldr	r3, [pc, #384]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b18      	cmp	r3, #24
 80028f4:	d80f      	bhi.n	8002916 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	0099      	lsls	r1, r3, #2
 80028fa:	23a0      	movs	r3, #160	@ 0xa0
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	2201      	movs	r2, #1
 8002900:	0018      	movs	r0, r3
 8002902:	f005 f938 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002906:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	0018      	movs	r0, r3
 800290e:	f005 f932 	bl	8007b76 <HAL_GPIO_WritePin>
 8002912:	f000 ff9e 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002916:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002918:	220a      	movs	r2, #10
 800291a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800291e:	2208      	movs	r2, #8
 8002920:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	f000 ff93 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 800292c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b0b      	cmp	r3, #11
 8002934:	d142      	bne.n	80029bc <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002936:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2bf8      	cmp	r3, #248	@ 0xf8
 800293e:	d001      	beq.n	8002944 <UART2_RX_transfer_complete_callback+0x1ec>
 8002940:	f000 ff87 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002944:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800294a:	4b49      	ldr	r3, [pc, #292]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002956:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002958:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b0b      	cmp	r3, #11
 8002960:	d80f      	bhi.n	8002982 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	0099      	lsls	r1, r3, #2
 8002966:	23a0      	movs	r3, #160	@ 0xa0
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	2200      	movs	r2, #0
 800296c:	0018      	movs	r0, r3
 800296e:	f005 f902 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002972:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002974:	2201      	movs	r2, #1
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	0018      	movs	r0, r3
 800297a:	f005 f8fc 	bl	8007b76 <HAL_GPIO_WritePin>
 800297e:	f000 ff68 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 8002982:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b18      	cmp	r3, #24
 800298a:	d80f      	bhi.n	80029ac <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	23a0      	movs	r3, #160	@ 0xa0
 8002992:	05db      	lsls	r3, r3, #23
 8002994:	2201      	movs	r2, #1
 8002996:	0018      	movs	r0, r3
 8002998:	f005 f8ed 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800299c:	4b35      	ldr	r3, [pc, #212]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	2140      	movs	r1, #64	@ 0x40
 80029a2:	0018      	movs	r0, r3
 80029a4:	f005 f8e7 	bl	8007b76 <HAL_GPIO_WritePin>
 80029a8:	f000 ff53 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						MIDI_CLK_tag = 1;
 80029ac:	4b30      	ldr	r3, [pc, #192]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80029b4:	220c      	movs	r2, #12
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	f000 ff4b 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d158      	bne.n	8002a78 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029c6:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2bf8      	cmp	r3, #248	@ 0xf8
 80029ce:	d138      	bne.n	8002a42 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029d0:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029d6:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029e2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80029e4:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b0b      	cmp	r3, #11
 80029ec:	d80f      	bhi.n	8002a0e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	0099      	lsls	r1, r3, #2
 80029f2:	23a0      	movs	r3, #160	@ 0xa0
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	2200      	movs	r2, #0
 80029f8:	0018      	movs	r0, r3
 80029fa:	f005 f8bc 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	0018      	movs	r0, r3
 8002a06:	f005 f8b6 	bl	8007b76 <HAL_GPIO_WritePin>
 8002a0a:	f000 ff22 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 8002a0e:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b18      	cmp	r3, #24
 8002a16:	d80f      	bhi.n	8002a38 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	23a0      	movs	r3, #160	@ 0xa0
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	2201      	movs	r2, #1
 8002a22:	0018      	movs	r0, r3
 8002a24:	f005 f8a7 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2140      	movs	r1, #64	@ 0x40
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f005 f8a1 	bl	8007b76 <HAL_GPIO_WritePin>
 8002a34:	f000 ff0d 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a38:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	f000 ff08 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a4a:	d001      	beq.n	8002a50 <UART2_RX_transfer_complete_callback+0x2f8>
 8002a4c:	f000 ff01 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002a52:	220d      	movs	r2, #13
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	f000 fefc 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	200004cc 	.word	0x200004cc
 8002a60:	20000c24 	.word	0x20000c24
 8002a64:	20000ccc 	.word	0x20000ccc
 8002a68:	2000043c 	.word	0x2000043c
 8002a6c:	20000428 	.word	0x20000428
 8002a70:	20000c22 	.word	0x20000c22
 8002a74:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002a78:	4bdc      	ldr	r3, [pc, #880]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b0d      	cmp	r3, #13
 8002a80:	d160      	bne.n	8002b44 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a82:	4bdb      	ldr	r3, [pc, #876]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a8a:	d001      	beq.n	8002a90 <UART2_RX_transfer_complete_callback+0x338>
 8002a8c:	f000 fee1 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002a90:	4bd8      	ldr	r3, [pc, #864]	@ (8002df4 <UART2_RX_transfer_complete_callback+0x69c>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f001 fbfc 	bl	8004290 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	23a0      	movs	r3, #160	@ 0xa0
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f005 f867 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002aa8:	4bd3      	ldr	r3, [pc, #844]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2140      	movs	r1, #64	@ 0x40
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f005 f861 	bl	8007b76 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	0099      	lsls	r1, r3, #2
 8002ab8:	23a0      	movs	r3, #160	@ 0xa0
 8002aba:	05db      	lsls	r3, r3, #23
 8002abc:	2200      	movs	r2, #0
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f005 f859 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ac4:	4bcc      	ldr	r3, [pc, #816]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2140      	movs	r1, #64	@ 0x40
 8002aca:	0018      	movs	r0, r3
 8002acc:	f005 f853 	bl	8007b76 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002ad0:	4bca      	ldr	r3, [pc, #808]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002ad6:	4bca      	ldr	r3, [pc, #808]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002adc:	4bc3      	ldr	r3, [pc, #780]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002ade:	220d      	movs	r2, #13
 8002ae0:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002ae2:	4bc2      	ldr	r3, [pc, #776]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002ae8:	4bc6      	ldr	r3, [pc, #792]	@ (8002e04 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002aea:	2100      	movs	r1, #0
 8002aec:	0018      	movs	r0, r3
 8002aee:	f002 ff18 	bl	8005922 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002af2:	4bc5      	ldr	r3, [pc, #788]	@ (8002e08 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002af8:	4ac4      	ldr	r2, [pc, #784]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x6b4>)
 8002afa:	4bbe      	ldr	r3, [pc, #760]	@ (8002df4 <UART2_RX_transfer_complete_callback+0x69c>)
 8002afc:	0011      	movs	r1, r2
 8002afe:	0018      	movs	r0, r3
 8002b00:	f001 fa80 	bl	8004004 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002b04:	4ac2      	ldr	r2, [pc, #776]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b06:	4bbb      	ldr	r3, [pc, #748]	@ (8002df4 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b08:	0011      	movs	r1, r2
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f001 fa7a 	bl	8004004 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002b10:	4bc0      	ldr	r3, [pc, #768]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b12:	2108      	movs	r1, #8
 8002b14:	0018      	movs	r0, r3
 8002b16:	f002 ff7f 	bl	8005a18 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002b1a:	4bbd      	ldr	r3, [pc, #756]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 fbe2 	bl	80042e8 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002b24:	4abc      	ldr	r2, [pc, #752]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002b26:	4bba      	ldr	r3, [pc, #744]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f001 fcd2 	bl	80044d4 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002b30:	4bba      	ldr	r3, [pc, #744]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x6c4>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	001a      	movs	r2, r3
 8002b36:	49ba      	ldr	r1, [pc, #744]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002b38:	4bba      	ldr	r3, [pc, #744]	@ (8002e24 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f003 fc10 	bl	8006360 <HAL_ADC_Start_DMA>
 8002b40:	f000 fe87 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002b44:	4ba9      	ldr	r3, [pc, #676]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d146      	bne.n	8002bdc <UART2_RX_transfer_complete_callback+0x484>
 8002b4e:	4bb1      	ldr	r3, [pc, #708]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b50:	2120      	movs	r1, #32
 8002b52:	0018      	movs	r0, r3
 8002b54:	f002 ff4c 	bl	80059f0 <Get_Status_Bit>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d13f      	bne.n	8002bdc <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b5c:	4ba4      	ldr	r3, [pc, #656]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b64:	d001      	beq.n	8002b6a <UART2_RX_transfer_complete_callback+0x412>
 8002b66:	f000 fe74 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b6a:	4ba4      	ldr	r3, [pc, #656]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b70:	4ba3      	ldr	r3, [pc, #652]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b7c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b0b      	cmp	r3, #11
 8002b86:	d80f      	bhi.n	8002ba8 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	0099      	lsls	r1, r3, #2
 8002b8c:	23a0      	movs	r3, #160	@ 0xa0
 8002b8e:	05db      	lsls	r3, r3, #23
 8002b90:	2200      	movs	r2, #0
 8002b92:	0018      	movs	r0, r3
 8002b94:	f004 ffef 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b98:	4b97      	ldr	r3, [pc, #604]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2140      	movs	r1, #64	@ 0x40
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f004 ffe9 	bl	8007b76 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ba4:	f000 fe55 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 8002ba8:	4b95      	ldr	r3, [pc, #596]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	d80f      	bhi.n	8002bd2 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	0099      	lsls	r1, r3, #2
 8002bb6:	23a0      	movs	r3, #160	@ 0xa0
 8002bb8:	05db      	lsls	r3, r3, #23
 8002bba:	2201      	movs	r2, #1
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f004 ffda 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2140      	movs	r1, #64	@ 0x40
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f004 ffd4 	bl	8007b76 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bce:	f000 fe40 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						MIDI_CLK_tag = 1;
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bd8:	f000 fe3b 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002bdc:	4b83      	ldr	r3, [pc, #524]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d14c      	bne.n	8002c80 <UART2_RX_transfer_complete_callback+0x528>
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d147      	bne.n	8002c80 <UART2_RX_transfer_complete_callback+0x528>
 8002bf0:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f002 fefb 	bl	80059f0 <Get_Status_Bit>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d13f      	bne.n	8002c80 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c00:	4b7b      	ldr	r3, [pc, #492]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c08:	d11e      	bne.n	8002c48 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c10:	4b7b      	ldr	r3, [pc, #492]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b79      	ldr	r3, [pc, #484]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c1c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002c1e:	4b77      	ldr	r3, [pc, #476]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002c24:	4b71      	ldr	r3, [pc, #452]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c26:	2210      	movs	r2, #16
 8002c28:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c2a:	4b70      	ldr	r3, [pc, #448]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c30:	4b78      	ldr	r3, [pc, #480]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c32:	2120      	movs	r1, #32
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 ff01 	bl	8005a3c <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c3c:	2140      	movs	r1, #64	@ 0x40
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 fefc 	bl	8005a3c <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c44:	f000 fe04 	bl	8003850 <UART2_RX_transfer_complete_callback+0x10f8>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002c48:	4b69      	ldr	r3, [pc, #420]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002c50:	d001      	beq.n	8002c56 <UART2_RX_transfer_complete_callback+0x4fe>
 8002c52:	f000 fdfd 	bl	8003850 <UART2_RX_transfer_complete_callback+0x10f8>

					MIDI_CLK_tag = 0; //just in case
 8002c56:	4b6a      	ldr	r3, [pc, #424]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002c5c:	4b63      	ldr	r3, [pc, #396]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c5e:	220e      	movs	r2, #14
 8002c60:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c62:	4b62      	ldr	r3, [pc, #392]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c64:	2208      	movs	r2, #8
 8002c66:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c68:	4b6a      	ldr	r3, [pc, #424]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f002 fee5 	bl	8005a3c <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c72:	4b68      	ldr	r3, [pc, #416]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c74:	2140      	movs	r1, #64	@ 0x40
 8002c76:	0018      	movs	r0, r3
 8002c78:	f002 fee0 	bl	8005a3c <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c7c:	f000 fde8 	bl	8003850 <UART2_RX_transfer_complete_callback+0x10f8>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002c80:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b0e      	cmp	r3, #14
 8002c88:	d123      	bne.n	8002cd2 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c8a:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c92:	d001      	beq.n	8002c98 <UART2_RX_transfer_complete_callback+0x540>
 8002c94:	f000 fddd 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	23a0      	movs	r3, #160	@ 0xa0
 8002c9e:	05db      	lsls	r3, r3, #23
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f004 ff67 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	2140      	movs	r1, #64	@ 0x40
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f004 ff61 	bl	8007b76 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002cb4:	4b51      	ldr	r3, [pc, #324]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cba:	4b51      	ldr	r3, [pc, #324]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002cc8:	4b48      	ldr	r3, [pc, #288]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002cca:	220f      	movs	r2, #15
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	f000 fdc0 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002cd2:	4b46      	ldr	r3, [pc, #280]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d142      	bne.n	8002d62 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cdc:	4b44      	ldr	r3, [pc, #272]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ce4:	d001      	beq.n	8002cea <UART2_RX_transfer_complete_callback+0x592>
 8002ce6:	f000 fdb4 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					MIDI_CLK_tag++;
 8002cea:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b42      	ldr	r3, [pc, #264]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cf6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002cf8:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b0b      	cmp	r3, #11
 8002d00:	d80f      	bhi.n	8002d22 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	0099      	lsls	r1, r3, #2
 8002d06:	23a0      	movs	r3, #160	@ 0xa0
 8002d08:	05db      	lsls	r3, r3, #23
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f004 ff32 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d12:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	2140      	movs	r1, #64	@ 0x40
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f004 ff2c 	bl	8007b76 <HAL_GPIO_WritePin>
 8002d1e:	f000 fd98 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b18      	cmp	r3, #24
 8002d2a:	d80f      	bhi.n	8002d4c <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	23a0      	movs	r3, #160	@ 0xa0
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	2201      	movs	r2, #1
 8002d36:	0018      	movs	r0, r3
 8002d38:	f004 ff1d 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2140      	movs	r1, #64	@ 0x40
 8002d42:	0018      	movs	r0, r3
 8002d44:	f004 ff17 	bl	8007b76 <HAL_GPIO_WritePin>
 8002d48:	f000 fd83 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d4c:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002d4e:	220f      	movs	r2, #15
 8002d50:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d52:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002d54:	2208      	movs	r2, #8
 8002d56:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002d58:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	f000 fd78 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002d62:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d15d      	bne.n	8002e28 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d74:	d001      	beq.n	8002d7a <UART2_RX_transfer_complete_callback+0x622>
 8002d76:	f000 fd6c 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002d7a:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d86:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b0b      	cmp	r3, #11
 8002d90:	d80f      	bhi.n	8002db2 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	0099      	lsls	r1, r3, #2
 8002d96:	23a0      	movs	r3, #160	@ 0xa0
 8002d98:	05db      	lsls	r3, r3, #23
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f004 feea 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	2140      	movs	r1, #64	@ 0x40
 8002da8:	0018      	movs	r0, r3
 8002daa:	f004 fee4 	bl	8007b76 <HAL_GPIO_WritePin>
 8002dae:	f000 fd50 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b18      	cmp	r3, #24
 8002dba:	d80f      	bhi.n	8002ddc <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	23a0      	movs	r3, #160	@ 0xa0
 8002dc2:	05db      	lsls	r3, r3, #23
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f004 fed5 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2140      	movs	r1, #64	@ 0x40
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f004 fecf 	bl	8007b76 <HAL_GPIO_WritePin>
 8002dd8:	f000 fd3b 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002dde:	2211      	movs	r2, #17
 8002de0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	f000 fd33 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
 8002dec:	20000428 	.word	0x20000428
 8002df0:	200004cc 	.word	0x200004cc
 8002df4:	20000c84 	.word	0x20000c84
 8002df8:	50000800 	.word	0x50000800
 8002dfc:	20000ccc 	.word	0x20000ccc
 8002e00:	20000c22 	.word	0x20000c22
 8002e04:	200008c0 	.word	0x200008c0
 8002e08:	2000043c 	.word	0x2000043c
 8002e0c:	20000ca8 	.word	0x20000ca8
 8002e10:	20000c3c 	.word	0x20000c3c
 8002e14:	20000c24 	.word	0x20000c24
 8002e18:	20000020 	.word	0x20000020
 8002e1c:	0800d704 	.word	0x0800d704
 8002e20:	20000c30 	.word	0x20000c30
 8002e24:	200004ec 	.word	0x200004ec
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002e28:	4be2      	ldr	r3, [pc, #904]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b11      	cmp	r3, #17
 8002e30:	d146      	bne.n	8002ec0 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e32:	4be1      	ldr	r3, [pc, #900]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e3a:	d135      	bne.n	8002ea8 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002e3c:	4bdf      	ldr	r3, [pc, #892]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa64>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4bdd      	ldr	r3, [pc, #884]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa64>)
 8002e48:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e4a:	4bdc      	ldr	r3, [pc, #880]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa64>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b0b      	cmp	r3, #11
 8002e52:	d80f      	bhi.n	8002e74 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	0099      	lsls	r1, r3, #2
 8002e58:	23a0      	movs	r3, #160	@ 0xa0
 8002e5a:	05db      	lsls	r3, r3, #23
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f004 fe89 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e64:	4bd6      	ldr	r3, [pc, #856]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa68>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	2140      	movs	r1, #64	@ 0x40
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f004 fe83 	bl	8007b76 <HAL_GPIO_WritePin>
 8002e70:	f000 fcef 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else if(MIDI_CLK_tag < 25){
 8002e74:	4bd1      	ldr	r3, [pc, #836]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa64>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b18      	cmp	r3, #24
 8002e7c:	d80f      	bhi.n	8002e9e <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	0099      	lsls	r1, r3, #2
 8002e82:	23a0      	movs	r3, #160	@ 0xa0
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	2201      	movs	r2, #1
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f004 fe74 	bl	8007b76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e8e:	4bcc      	ldr	r3, [pc, #816]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa68>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	0018      	movs	r0, r3
 8002e96:	f004 fe6e 	bl	8007b76 <HAL_GPIO_WritePin>
 8002e9a:	f000 fcda 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					else{

						MIDI_CLK_tag = 1;
 8002e9e:	4bc7      	ldr	r3, [pc, #796]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa64>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	f000 fcd5 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002ea8:	4bc3      	ldr	r3, [pc, #780]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2bfa      	cmp	r3, #250	@ 0xfa
 8002eb0:	d001      	beq.n	8002eb6 <UART2_RX_transfer_complete_callback+0x75e>
 8002eb2:	f000 fcce 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002eb6:	4bbf      	ldr	r3, [pc, #764]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002eb8:	2212      	movs	r2, #18
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	f000 fcc9 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002ec0:	4bbc      	ldr	r3, [pc, #752]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b12      	cmp	r3, #18
 8002ec8:	d001      	beq.n	8002ece <UART2_RX_transfer_complete_callback+0x776>
 8002eca:	f000 fcc2 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ece:	4bba      	ldr	r3, [pc, #744]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ed6:	d001      	beq.n	8002edc <UART2_RX_transfer_complete_callback+0x784>
 8002ed8:	f000 fcbb 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002edc:	4bb9      	ldr	r3, [pc, #740]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa6c>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 f9d6 	bl	8004290 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	0099      	lsls	r1, r3, #2
 8002ee8:	23a0      	movs	r3, #160	@ 0xa0
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	2201      	movs	r2, #1
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f004 fe41 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ef4:	4bb2      	ldr	r3, [pc, #712]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa68>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2140      	movs	r1, #64	@ 0x40
 8002efa:	0018      	movs	r0, r3
 8002efc:	f004 fe3b 	bl	8007b76 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	23a0      	movs	r3, #160	@ 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f004 fe33 	bl	8007b76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f10:	4bab      	ldr	r3, [pc, #684]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa68>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	0018      	movs	r0, r3
 8002f18:	f004 fe2d 	bl	8007b76 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f1c:	4ba5      	ldr	r3, [pc, #660]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002f1e:	2212      	movs	r2, #18
 8002f20:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002f22:	4ba4      	ldr	r3, [pc, #656]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002f24:	2208      	movs	r2, #8
 8002f26:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002f28:	4ba4      	ldr	r3, [pc, #656]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa64>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002f2e:	4ba6      	ldr	r3, [pc, #664]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa70>)
 8002f30:	2100      	movs	r1, #0
 8002f32:	0018      	movs	r0, r3
 8002f34:	f002 fcf5 	bl	8005922 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002f38:	4ba4      	ldr	r3, [pc, #656]	@ (80031cc <UART2_RX_transfer_complete_callback+0xa74>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002f3e:	4aa4      	ldr	r2, [pc, #656]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa78>)
 8002f40:	4ba0      	ldr	r3, [pc, #640]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa6c>)
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f001 f85d 	bl	8004004 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002f4a:	4aa2      	ldr	r2, [pc, #648]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa7c>)
 8002f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa6c>)
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 f857 	bl	8004004 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002f56:	4ba0      	ldr	r3, [pc, #640]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 8002f58:	2108      	movs	r1, #8
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f002 fd5c 	bl	8005a18 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002f60:	4b9c      	ldr	r3, [pc, #624]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa7c>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 f9bf 	bl	80042e8 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002f6a:	4a9c      	ldr	r2, [pc, #624]	@ (80031dc <UART2_RX_transfer_complete_callback+0xa84>)
 8002f6c:	4b99      	ldr	r3, [pc, #612]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa7c>)
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f001 faaf 	bl	80044d4 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002f76:	4b9a      	ldr	r3, [pc, #616]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	4999      	ldr	r1, [pc, #612]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f7e:	4b9a      	ldr	r3, [pc, #616]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f003 f9ed 	bl	8006360 <HAL_ADC_Start_DMA>
 8002f86:	f000 fc64 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8002f8a:	4b98      	ldr	r3, [pc, #608]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d000      	beq.n	8002f96 <UART2_RX_transfer_complete_callback+0x83e>
 8002f94:	e27e      	b.n	8003494 <UART2_RX_transfer_complete_callback+0xd3c>

			if(running_status_byte == 0){
 8002f96:	4b96      	ldr	r3, [pc, #600]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d000      	beq.n	8002fa2 <UART2_RX_transfer_complete_callback+0x84a>
 8002fa0:	e0a3      	b.n	80030ea <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002fa2:	4b94      	ldr	r3, [pc, #592]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fe f82c 	bl	8001002 <Is_Data_Buffer_Empty>
 8002faa:	0003      	movs	r3, r0
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <UART2_RX_transfer_complete_callback+0x85c>
 8002fb0:	f000 fc4f 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					if(Is_Status_Byte(rx_buffer) == YES){
 8002fb4:	4b80      	ldr	r3, [pc, #512]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd fee2 	bl	8000d80 <Is_Status_Byte>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <UART2_RX_transfer_complete_callback+0x86e>
 8002fc2:	f000 fc46 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd ff0b 	bl	8000de4 <Is_PC_Status_Byte>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d134      	bne.n	800303e <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8002fd4:	4b78      	ldr	r3, [pc, #480]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b85      	ldr	r3, [pc, #532]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8002fdc:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002fde:	4b86      	ldr	r3, [pc, #536]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xaa0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b74      	ldr	r3, [pc, #464]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd ffe9 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8002ff4:	4b70      	ldr	r3, [pc, #448]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8002ffc:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	005a      	lsls	r2, r3, #1
 8003002:	4b75      	ldr	r3, [pc, #468]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 8003004:	0011      	movs	r1, r2
 8003006:	0018      	movs	r0, r3
 8003008:	f002 fd06 	bl	8005a18 <Set_Status_Bit>
 800300c:	f000 fc21 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003010:	4b71      	ldr	r3, [pc, #452]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe f88b 	bl	800112e <Is_OMNI_On>
 8003018:	0003      	movs	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <UART2_RX_transfer_complete_callback+0x8ca>
 800301e:	f000 fc18 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

									active_status_byte = (uint8_t)*rx_buffer;
 8003022:	4b65      	ldr	r3, [pc, #404]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b70      	ldr	r3, [pc, #448]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 800302a:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	005a      	lsls	r2, r3, #1
 8003030:	4b69      	ldr	r3, [pc, #420]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f002 fcef 	bl	8005a18 <Set_Status_Bit>
 800303a:	f000 fc0a 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800303e:	4b5e      	ldr	r3, [pc, #376]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8003040:	0018      	movs	r0, r3
 8003042:	f7fd feeb 	bl	8000e1c <Is_CC_Status_Byte>
 8003046:	0003      	movs	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d134      	bne.n	80030b6 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 800304c:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8003054:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003056:	4b68      	ldr	r3, [pc, #416]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xaa0>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b56      	ldr	r3, [pc, #344]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd ffad 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003066:	0003      	movs	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4b5e      	ldr	r3, [pc, #376]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8003074:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	005a      	lsls	r2, r3, #1
 800307a:	4b57      	ldr	r3, [pc, #348]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 800307c:	0011      	movs	r1, r2
 800307e:	0018      	movs	r0, r3
 8003080:	f002 fcca 	bl	8005a18 <Set_Status_Bit>
 8003084:	f000 fbe5 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003088:	4b53      	ldr	r3, [pc, #332]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 800308a:	0018      	movs	r0, r3
 800308c:	f7fe f84f 	bl	800112e <Is_OMNI_On>
 8003090:	0003      	movs	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <UART2_RX_transfer_complete_callback+0x942>
 8003096:	f000 fbdc 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

									active_status_byte = (uint8_t)*rx_buffer;
 800309a:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	4b52      	ldr	r3, [pc, #328]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 80030a2:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	005a      	lsls	r2, r3, #1
 80030a8:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f002 fcb3 	bl	8005a18 <Set_Status_Bit>
 80030b2:	f000 fbce 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80030b6:	4b40      	ldr	r3, [pc, #256]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7fd ff71 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80030be:	0003      	movs	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <UART2_RX_transfer_complete_callback+0x970>
 80030c4:	f000 fbc5 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							active_status_byte = (uint8_t)*rx_buffer;
 80030c8:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 80030d0:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	005a      	lsls	r2, r3, #1
 80030dc:	4b3e      	ldr	r3, [pc, #248]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f002 fc99 	bl	8005a18 <Set_Status_Bit>
 80030e6:	f000 fbb4 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <UART2_RX_transfer_complete_callback+0x9a0>
 80030f4:	f000 fbad 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

				if(Is_Data_Byte(rx_buffer) == YES){
 80030f8:	4b2f      	ldr	r3, [pc, #188]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7fd fe59 	bl	8000db2 <Is_Data_Byte>
 8003100:	0003      	movs	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d000      	beq.n	8003108 <UART2_RX_transfer_complete_callback+0x9b0>
 8003106:	e131      	b.n	800336c <UART2_RX_transfer_complete_callback+0xc14>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	005a      	lsls	r2, r3, #1
 800310c:	4b32      	ldr	r3, [pc, #200]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f002 fc81 	bl	8005a18 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 8003116:	4b36      	ldr	r3, [pc, #216]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd fe63 	bl	8000de4 <Is_PC_Status_Byte>
 800311e:	0003      	movs	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d12e      	bne.n	8003182 <UART2_RX_transfer_complete_callback+0xa2a>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003124:	4b33      	ldr	r3, [pc, #204]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 8003126:	0018      	movs	r0, r3
 8003128:	f7fd ff6b 	bl	8001002 <Is_Data_Buffer_Empty>
 800312c:	0003      	movs	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <UART2_RX_transfer_complete_callback+0x9de>
 8003132:	f000 fb8e 	bl	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003136:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 8003138:	2104      	movs	r1, #4
 800313a:	0018      	movs	r0, r3
 800313c:	f7fd ffaf 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 8003140:	0003      	movs	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10f      	bne.n	8003166 <UART2_RX_transfer_complete_callback+0xa0e>

								Set_All_Pots_to_PC_Mode();
 8003146:	f7fd fde3 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800314a:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <UART2_RX_transfer_complete_callback+0xaa4>)
 8003156:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003158:	f7fd f9e2 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800315c:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 800315e:	2108      	movs	r1, #8
 8003160:	0018      	movs	r0, r3
 8003162:	f002 fc6b 	bl	8005a3c <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003166:	4b23      	ldr	r3, [pc, #140]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 8003168:	0018      	movs	r0, r3
 800316a:	f7fd ff7a 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 800316e:	4b1f      	ldr	r3, [pc, #124]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]

							//not really required
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003174:	4a18      	ldr	r2, [pc, #96]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa80>)
 8003176:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003178:	0011      	movs	r1, r2
 800317a:	0018      	movs	r0, r3
 800317c:	f7fd fff1 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 8003180:	e367      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003182:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8003184:	0018      	movs	r0, r3
 8003186:	f7fd fe49 	bl	8000e1c <Is_CC_Status_Byte>
 800318a:	0003      	movs	r3, r0
 800318c:	2b01      	cmp	r3, #1
 800318e:	d000      	beq.n	8003192 <UART2_RX_transfer_complete_callback+0xa3a>
 8003190:	e35f      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003192:	4b18      	ldr	r3, [pc, #96]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 8003194:	0018      	movs	r0, r3
 8003196:	f7fd ff34 	bl	8001002 <Is_Data_Buffer_Empty>
 800319a:	0003      	movs	r3, r0
 800319c:	2b01      	cmp	r3, #1
 800319e:	d131      	bne.n	8003204 <UART2_RX_transfer_complete_callback+0xaac>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa60>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b13      	ldr	r3, [pc, #76]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 80031a8:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <UART2_RX_transfer_complete_callback+0xaa8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e34f      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	20000428 	.word	0x20000428
 80031b8:	200004cc 	.word	0x200004cc
 80031bc:	20000c22 	.word	0x20000c22
 80031c0:	50000800 	.word	0x50000800
 80031c4:	20000c84 	.word	0x20000c84
 80031c8:	200008c0 	.word	0x200008c0
 80031cc:	2000043c 	.word	0x2000043c
 80031d0:	20000ca8 	.word	0x20000ca8
 80031d4:	20000c3c 	.word	0x20000c3c
 80031d8:	20000c24 	.word	0x20000c24
 80031dc:	20000020 	.word	0x20000020
 80031e0:	0800d704 	.word	0x0800d704
 80031e4:	20000c30 	.word	0x20000c30
 80031e8:	200004ec 	.word	0x200004ec
 80031ec:	200004be 	.word	0x200004be
 80031f0:	200004bf 	.word	0x200004bf
 80031f4:	200004c0 	.word	0x200004c0
 80031f8:	200004bd 	.word	0x200004bd
 80031fc:	200004b0 	.word	0x200004b0
 8003200:	20000c2c 	.word	0x20000c2c

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003204:	4bd1      	ldr	r3, [pc, #836]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4bd1      	ldr	r3, [pc, #836]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 800320c:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800320e:	4ad1      	ldr	r2, [pc, #836]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003210:	4bd1      	ldr	r3, [pc, #836]	@ (8003558 <UART2_RX_transfer_complete_callback+0xe00>)
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f7fd ffa4 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800321a:	4bce      	ldr	r3, [pc, #824]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 800321c:	2108      	movs	r1, #8
 800321e:	0018      	movs	r0, r3
 8003220:	f002 fc0c 	bl	8005a3c <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003224:	4bca      	ldr	r3, [pc, #808]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003226:	0018      	movs	r0, r3
 8003228:	f7fd fe14 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800322c:	0003      	movs	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d142      	bne.n	80032b8 <UART2_RX_transfer_complete_callback+0xb60>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003232:	4bca      	ldr	r3, [pc, #808]	@ (800355c <UART2_RX_transfer_complete_callback+0xe04>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4bc9      	ldr	r3, [pc, #804]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 800323a:	0011      	movs	r1, r2
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd febf 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003242:	0003      	movs	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d12f      	bne.n	80032a8 <UART2_RX_transfer_complete_callback+0xb50>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003248:	4ac6      	ldr	r2, [pc, #792]	@ (8003564 <UART2_RX_transfer_complete_callback+0xe0c>)
 800324a:	4bc1      	ldr	r3, [pc, #772]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f7fd fe5f 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003254:	0003      	movs	r3, r0
 8003256:	2b01      	cmp	r3, #1
 8003258:	d126      	bne.n	80032a8 <UART2_RX_transfer_complete_callback+0xb50>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800325a:	4bbd      	ldr	r3, [pc, #756]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b79      	cmp	r3, #121	@ 0x79
 8003262:	d106      	bne.n	8003272 <UART2_RX_transfer_complete_callback+0xb1a>

											Reset_All_Controllers(&params, &delay_line);
 8003264:	4ac0      	ldr	r2, [pc, #768]	@ (8003568 <UART2_RX_transfer_complete_callback+0xe10>)
 8003266:	4bc1      	ldr	r3, [pc, #772]	@ (800356c <UART2_RX_transfer_complete_callback+0xe14>)
 8003268:	0011      	movs	r1, r2
 800326a:	0018      	movs	r0, r3
 800326c:	f7fd ff94 	bl	8001198 <Reset_All_Controllers>
 8003270:	e01a      	b.n	80032a8 <UART2_RX_transfer_complete_callback+0xb50>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003272:	4bb7      	ldr	r3, [pc, #732]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b7a      	cmp	r3, #122	@ 0x7a
 800327a:	d102      	bne.n	8003282 <UART2_RX_transfer_complete_callback+0xb2a>

											Set_Local_Control();
 800327c:	f7fd ffe6 	bl	800124c <Set_Local_Control>
 8003280:	e012      	b.n	80032a8 <UART2_RX_transfer_complete_callback+0xb50>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003282:	4bb3      	ldr	r3, [pc, #716]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003284:	785b      	ldrb	r3, [r3, #1]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b7c      	cmp	r3, #124	@ 0x7c
 800328a:	d104      	bne.n	8003296 <UART2_RX_transfer_complete_callback+0xb3e>

											Set_OMNI_Off(&statuses);
 800328c:	4bb1      	ldr	r3, [pc, #708]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 800328e:	0018      	movs	r0, r3
 8003290:	f7fe f814 	bl	80012bc <Set_OMNI_Off>
 8003294:	e008      	b.n	80032a8 <UART2_RX_transfer_complete_callback+0xb50>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003296:	4bae      	ldr	r3, [pc, #696]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b7d      	cmp	r3, #125	@ 0x7d
 800329e:	d103      	bne.n	80032a8 <UART2_RX_transfer_complete_callback+0xb50>

											Set_OMNI_On(&statuses);
 80032a0:	4bac      	ldr	r3, [pc, #688]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7fe f81a 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 80032a8:	4bad      	ldr	r3, [pc, #692]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80032ae:	4ba8      	ldr	r3, [pc, #672]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fed6 	bl	8001062 <Clear_Data_Buffer>
 80032b6:	e2cc      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032b8:	4ba5      	ldr	r3, [pc, #660]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fd fdf6 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 80032c0:	0003      	movs	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d14a      	bne.n	800335c <UART2_RX_transfer_complete_callback+0xc04>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 80032c6:	4ba5      	ldr	r3, [pc, #660]	@ (800355c <UART2_RX_transfer_complete_callback+0xe04>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4ba4      	ldr	r3, [pc, #656]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fd fe75 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80032d6:	0003      	movs	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d006      	beq.n	80032ea <UART2_RX_transfer_complete_callback+0xb92>
										|| (Is_OMNI_On(&statuses) == YES)){
 80032dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fd ff25 	bl	800112e <Is_OMNI_On>
 80032e4:	0003      	movs	r3, r0
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d130      	bne.n	800334c <UART2_RX_transfer_complete_callback+0xbf4>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80032ea:	4b99      	ldr	r3, [pc, #612]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b14      	cmp	r3, #20
 80032f2:	d104      	bne.n	80032fe <UART2_RX_transfer_complete_callback+0xba6>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80032f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003564 <UART2_RX_transfer_complete_callback+0xe0c>)
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fd fc88 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80032fc:	e026      	b.n	800334c <UART2_RX_transfer_complete_callback+0xbf4>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80032fe:	4b94      	ldr	r3, [pc, #592]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b15      	cmp	r3, #21
 8003306:	d104      	bne.n	8003312 <UART2_RX_transfer_complete_callback+0xbba>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003308:	4b96      	ldr	r3, [pc, #600]	@ (8003564 <UART2_RX_transfer_complete_callback+0xe0c>)
 800330a:	0018      	movs	r0, r3
 800330c:	f7fd fc98 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
 8003310:	e01c      	b.n	800334c <UART2_RX_transfer_complete_callback+0xbf4>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003312:	4b8f      	ldr	r3, [pc, #572]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b16      	cmp	r3, #22
 800331a:	d104      	bne.n	8003326 <UART2_RX_transfer_complete_callback+0xbce>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800331c:	4b91      	ldr	r3, [pc, #580]	@ (8003564 <UART2_RX_transfer_complete_callback+0xe0c>)
 800331e:	0018      	movs	r0, r3
 8003320:	f7fd fca8 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003324:	e012      	b.n	800334c <UART2_RX_transfer_complete_callback+0xbf4>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003326:	4b8a      	ldr	r3, [pc, #552]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b17      	cmp	r3, #23
 800332e:	d104      	bne.n	800333a <UART2_RX_transfer_complete_callback+0xbe2>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003330:	4b8c      	ldr	r3, [pc, #560]	@ (8003564 <UART2_RX_transfer_complete_callback+0xe0c>)
 8003332:	0018      	movs	r0, r3
 8003334:	f7fd fcb8 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 8003338:	e008      	b.n	800334c <UART2_RX_transfer_complete_callback+0xbf4>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800333a:	4b85      	ldr	r3, [pc, #532]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b18      	cmp	r3, #24
 8003342:	d103      	bne.n	800334c <UART2_RX_transfer_complete_callback+0xbf4>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003344:	4b87      	ldr	r3, [pc, #540]	@ (8003564 <UART2_RX_transfer_complete_callback+0xe0c>)
 8003346:	0018      	movs	r0, r3
 8003348:	f7fd fcc8 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 800334c:	4b84      	ldr	r3, [pc, #528]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003352:	4b7f      	ldr	r3, [pc, #508]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003354:	0018      	movs	r0, r3
 8003356:	f7fd fe84 	bl	8001062 <Clear_Data_Buffer>
 800335a:	e27a      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800335c:	4b80      	ldr	r3, [pc, #512]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003362:	4b7b      	ldr	r3, [pc, #492]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003364:	0018      	movs	r0, r3
 8003366:	f7fd fe7c 	bl	8001062 <Clear_Data_Buffer>
 800336a:	e272      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800336c:	4b78      	ldr	r3, [pc, #480]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 800336e:	0018      	movs	r0, r3
 8003370:	f7fd fe77 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003374:	4a77      	ldr	r2, [pc, #476]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003376:	4b78      	ldr	r3, [pc, #480]	@ (8003558 <UART2_RX_transfer_complete_callback+0xe00>)
 8003378:	0011      	movs	r1, r2
 800337a:	0018      	movs	r0, r3
 800337c:	f7fd fef1 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003380:	4b72      	ldr	r3, [pc, #456]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003382:	0018      	movs	r0, r3
 8003384:	f7fd fd2e 	bl	8000de4 <Is_PC_Status_Byte>
 8003388:	0003      	movs	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d131      	bne.n	80033f2 <UART2_RX_transfer_complete_callback+0xc9a>

						running_status_byte = (uint8_t)*rx_buffer;
 800338e:	4b6f      	ldr	r3, [pc, #444]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	4b76      	ldr	r3, [pc, #472]	@ (8003570 <UART2_RX_transfer_complete_callback+0xe18>)
 8003396:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003398:	4b70      	ldr	r3, [pc, #448]	@ (800355c <UART2_RX_transfer_complete_callback+0xe04>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b6b      	ldr	r3, [pc, #428]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fd fe0c 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033a8:	0003      	movs	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10c      	bne.n	80033c8 <UART2_RX_transfer_complete_callback+0xc70>

							active_status_byte = (uint8_t)*rx_buffer;
 80033ae:	4b67      	ldr	r3, [pc, #412]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 80033b6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80033b8:	2380      	movs	r3, #128	@ 0x80
 80033ba:	005a      	lsls	r2, r3, #1
 80033bc:	4b65      	ldr	r3, [pc, #404]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f002 fb29 	bl	8005a18 <Set_Status_Bit>
 80033c6:	e244      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80033c8:	4b62      	ldr	r3, [pc, #392]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7fd feaf 	bl	800112e <Is_OMNI_On>
 80033d0:	0003      	movs	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d000      	beq.n	80033d8 <UART2_RX_transfer_complete_callback+0xc80>
 80033d6:	e23c      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

								active_status_byte = (uint8_t)*rx_buffer;
 80033d8:	4b5c      	ldr	r3, [pc, #368]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b60      	ldr	r3, [pc, #384]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 80033e0:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	005a      	lsls	r2, r3, #1
 80033e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f002 fb14 	bl	8005a18 <Set_Status_Bit>
 80033f0:	e22f      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80033f2:	4b56      	ldr	r3, [pc, #344]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd fd11 	bl	8000e1c <Is_CC_Status_Byte>
 80033fa:	0003      	movs	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d131      	bne.n	8003464 <UART2_RX_transfer_complete_callback+0xd0c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003400:	4b52      	ldr	r3, [pc, #328]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b5a      	ldr	r3, [pc, #360]	@ (8003570 <UART2_RX_transfer_complete_callback+0xe18>)
 8003408:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800340a:	4b54      	ldr	r3, [pc, #336]	@ (800355c <UART2_RX_transfer_complete_callback+0xe04>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b4e      	ldr	r3, [pc, #312]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003412:	0011      	movs	r1, r2
 8003414:	0018      	movs	r0, r3
 8003416:	f7fd fdd3 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800341a:	0003      	movs	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10c      	bne.n	800343a <UART2_RX_transfer_complete_callback+0xce2>

							active_status_byte = (uint8_t)*rx_buffer;
 8003420:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b4e      	ldr	r3, [pc, #312]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 8003428:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	005a      	lsls	r2, r3, #1
 800342e:	4b49      	ldr	r3, [pc, #292]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f002 faf0 	bl	8005a18 <Set_Status_Bit>
 8003438:	e20b      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800343a:	4b46      	ldr	r3, [pc, #280]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd fe76 	bl	800112e <Is_OMNI_On>
 8003442:	0003      	movs	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d000      	beq.n	800344a <UART2_RX_transfer_complete_callback+0xcf2>
 8003448:	e203      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

								active_status_byte = (uint8_t)*rx_buffer;
 800344a:	4b40      	ldr	r3, [pc, #256]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b43      	ldr	r3, [pc, #268]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 8003452:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	005a      	lsls	r2, r3, #1
 8003458:	4b3e      	ldr	r3, [pc, #248]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f002 fadb 	bl	8005a18 <Set_Status_Bit>
 8003462:	e1f6      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003464:	4b39      	ldr	r3, [pc, #228]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003466:	0018      	movs	r0, r3
 8003468:	f7fd fd9a 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 800346c:	0003      	movs	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d000      	beq.n	8003474 <UART2_RX_transfer_complete_callback+0xd1c>
 8003472:	e1ee      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						active_status_byte = (uint8_t)*rx_buffer;
 8003474:	4b35      	ldr	r3, [pc, #212]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4b39      	ldr	r3, [pc, #228]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 800347c:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800347e:	4b3c      	ldr	r3, [pc, #240]	@ (8003570 <UART2_RX_transfer_complete_callback+0xe18>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	005a      	lsls	r2, r3, #1
 8003488:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f002 fac3 	bl	8005a18 <Set_Status_Bit>
 8003492:	e1de      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					}
				}
			}
		}
		else if(active_status_byte != 0){
 8003494:	4b32      	ldr	r3, [pc, #200]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d100      	bne.n	80034a0 <UART2_RX_transfer_complete_callback+0xd48>
 800349e:	e1d8      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f002 faa1 	bl	80059f0 <Get_Status_Bit>
 80034ae:	0003      	movs	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10d      	bne.n	80034d0 <UART2_RX_transfer_complete_callback+0xd78>

				active_status_byte = 0;
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80034ba:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 80034bc:	0018      	movs	r0, r3
 80034be:	f7fd fdd0 	bl	8001062 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80034c2:	4a24      	ldr	r2, [pc, #144]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 80034c4:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <UART2_RX_transfer_complete_callback+0xe00>)
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fd fe4a 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 80034ce:	e1c0      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80034d0:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7fd fc6d 	bl	8000db2 <Is_Data_Byte>
 80034d8:	0003      	movs	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d000      	beq.n	80034e0 <UART2_RX_transfer_complete_callback+0xd88>
 80034de:	e124      	b.n	800372a <UART2_RX_transfer_complete_callback+0xfd2>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80034e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fc7e 	bl	8000de4 <Is_PC_Status_Byte>
 80034e8:	0003      	movs	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d144      	bne.n	8003578 <UART2_RX_transfer_complete_callback+0xe20>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fd fd86 	bl	8001002 <Is_Data_Buffer_Empty>
 80034f6:	0003      	movs	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d000      	beq.n	80034fe <UART2_RX_transfer_complete_callback+0xda6>
 80034fc:	e1a9      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80034fe:	4b13      	ldr	r3, [pc, #76]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003500:	2104      	movs	r1, #4
 8003502:	0018      	movs	r0, r3
 8003504:	f7fd fdcb 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 8003508:	0003      	movs	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10f      	bne.n	800352e <UART2_RX_transfer_complete_callback+0xdd6>

								Set_All_Pots_to_PC_Mode();
 800350e:	f7fd fbff 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	b2da      	uxtb	r2, r3
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <UART2_RX_transfer_complete_callback+0xe1c>)
 800351e:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003520:	f7fc fffe 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003526:	2108      	movs	r1, #8
 8003528:	0018      	movs	r0, r3
 800352a:	f002 fa87 	bl	8005a3c <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdf8>)
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fd96 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 8003536:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <UART2_RX_transfer_complete_callback+0xe08>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800353c:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <UART2_RX_transfer_complete_callback+0xdfc>)
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <UART2_RX_transfer_complete_callback+0xe00>)
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f7fd fe0d 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 8003548:	e183      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	200004cc 	.word	0x200004cc
 8003550:	200004c0 	.word	0x200004c0
 8003554:	20000c24 	.word	0x20000c24
 8003558:	20000c2c 	.word	0x20000c2c
 800355c:	200004bd 	.word	0x200004bd
 8003560:	200004be 	.word	0x200004be
 8003564:	200004c1 	.word	0x200004c1
 8003568:	20000020 	.word	0x20000020
 800356c:	20000c3c 	.word	0x20000c3c
 8003570:	200004bf 	.word	0x200004bf
 8003574:	200004b0 	.word	0x200004b0

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003578:	4bbc      	ldr	r3, [pc, #752]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 800357a:	0018      	movs	r0, r3
 800357c:	f7fd fc4e 	bl	8000e1c <Is_CC_Status_Byte>
 8003580:	0003      	movs	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d000      	beq.n	8003588 <UART2_RX_transfer_complete_callback+0xe30>
 8003586:	e0c3      	b.n	8003710 <UART2_RX_transfer_complete_callback+0xfb8>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003588:	4bb9      	ldr	r3, [pc, #740]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 800358a:	0018      	movs	r0, r3
 800358c:	f7fd fd39 	bl	8001002 <Is_Data_Buffer_Empty>
 8003590:	0003      	movs	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <UART2_RX_transfer_complete_callback+0xe50>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003596:	4bb7      	ldr	r3, [pc, #732]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4bb4      	ldr	r3, [pc, #720]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 800359e:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80035a0:	4bb5      	ldr	r3, [pc, #724]	@ (8003878 <UART2_RX_transfer_complete_callback+0x1120>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e154      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80035a8:	4bb2      	ldr	r3, [pc, #712]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4bb0      	ldr	r3, [pc, #704]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80035b0:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80035b2:	4ab2      	ldr	r2, [pc, #712]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 80035b4:	4bb0      	ldr	r3, [pc, #704]	@ (8003878 <UART2_RX_transfer_complete_callback+0x1120>)
 80035b6:	0011      	movs	r1, r2
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fd fdd2 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80035be:	4baf      	ldr	r3, [pc, #700]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 80035c0:	2108      	movs	r1, #8
 80035c2:	0018      	movs	r0, r3
 80035c4:	f002 fa3a 	bl	8005a3c <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80035c8:	4ba9      	ldr	r3, [pc, #676]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd fc42 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80035d0:	0003      	movs	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d142      	bne.n	800365c <UART2_RX_transfer_complete_callback+0xf04>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80035d6:	4baa      	ldr	r3, [pc, #680]	@ (8003880 <UART2_RX_transfer_complete_callback+0x1128>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4ba3      	ldr	r3, [pc, #652]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fd fced 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035e6:	0003      	movs	r3, r0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d12f      	bne.n	800364c <UART2_RX_transfer_complete_callback+0xef4>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80035ec:	4aa5      	ldr	r2, [pc, #660]	@ (8003884 <UART2_RX_transfer_complete_callback+0x112c>)
 80035ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fd fc8d 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80035f8:	0003      	movs	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d126      	bne.n	800364c <UART2_RX_transfer_complete_callback+0xef4>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80035fe:	4b9c      	ldr	r3, [pc, #624]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b79      	cmp	r3, #121	@ 0x79
 8003606:	d106      	bne.n	8003616 <UART2_RX_transfer_complete_callback+0xebe>

											Reset_All_Controllers(&params, &delay_line);
 8003608:	4a9f      	ldr	r2, [pc, #636]	@ (8003888 <UART2_RX_transfer_complete_callback+0x1130>)
 800360a:	4ba0      	ldr	r3, [pc, #640]	@ (800388c <UART2_RX_transfer_complete_callback+0x1134>)
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f7fd fdc2 	bl	8001198 <Reset_All_Controllers>
 8003614:	e01a      	b.n	800364c <UART2_RX_transfer_complete_callback+0xef4>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003616:	4b96      	ldr	r3, [pc, #600]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b7a      	cmp	r3, #122	@ 0x7a
 800361e:	d102      	bne.n	8003626 <UART2_RX_transfer_complete_callback+0xece>

											Set_Local_Control();
 8003620:	f7fd fe14 	bl	800124c <Set_Local_Control>
 8003624:	e012      	b.n	800364c <UART2_RX_transfer_complete_callback+0xef4>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003626:	4b92      	ldr	r3, [pc, #584]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b7c      	cmp	r3, #124	@ 0x7c
 800362e:	d104      	bne.n	800363a <UART2_RX_transfer_complete_callback+0xee2>

											Set_OMNI_Off(&statuses);
 8003630:	4b92      	ldr	r3, [pc, #584]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003632:	0018      	movs	r0, r3
 8003634:	f7fd fe42 	bl	80012bc <Set_OMNI_Off>
 8003638:	e008      	b.n	800364c <UART2_RX_transfer_complete_callback+0xef4>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 800363a:	4b8d      	ldr	r3, [pc, #564]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b7d      	cmp	r3, #125	@ 0x7d
 8003642:	d103      	bne.n	800364c <UART2_RX_transfer_complete_callback+0xef4>

											Set_OMNI_On(&statuses);
 8003644:	4b8d      	ldr	r3, [pc, #564]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003646:	0018      	movs	r0, r3
 8003648:	f7fd fe48 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 800364c:	4b87      	ldr	r3, [pc, #540]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003652:	4b87      	ldr	r3, [pc, #540]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003654:	0018      	movs	r0, r3
 8003656:	f7fd fd04 	bl	8001062 <Clear_Data_Buffer>
 800365a:	e0fa      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800365c:	4b84      	ldr	r3, [pc, #528]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 800365e:	0018      	movs	r0, r3
 8003660:	f7fd fc24 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 8003664:	0003      	movs	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d14a      	bne.n	8003700 <UART2_RX_transfer_complete_callback+0xfa8>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 800366a:	4b85      	ldr	r3, [pc, #532]	@ (8003880 <UART2_RX_transfer_complete_callback+0x1128>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b7e      	ldr	r3, [pc, #504]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 8003672:	0011      	movs	r1, r2
 8003674:	0018      	movs	r0, r3
 8003676:	f7fd fca3 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800367a:	0003      	movs	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d006      	beq.n	800368e <UART2_RX_transfer_complete_callback+0xf36>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003680:	4b7e      	ldr	r3, [pc, #504]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003682:	0018      	movs	r0, r3
 8003684:	f7fd fd53 	bl	800112e <Is_OMNI_On>
 8003688:	0003      	movs	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d130      	bne.n	80036f0 <UART2_RX_transfer_complete_callback+0xf98>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 800368e:	4b78      	ldr	r3, [pc, #480]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b14      	cmp	r3, #20
 8003696:	d104      	bne.n	80036a2 <UART2_RX_transfer_complete_callback+0xf4a>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003698:	4b7a      	ldr	r3, [pc, #488]	@ (8003884 <UART2_RX_transfer_complete_callback+0x112c>)
 800369a:	0018      	movs	r0, r3
 800369c:	f7fd fab6 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80036a0:	e026      	b.n	80036f0 <UART2_RX_transfer_complete_callback+0xf98>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80036a2:	4b73      	ldr	r3, [pc, #460]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b15      	cmp	r3, #21
 80036aa:	d104      	bne.n	80036b6 <UART2_RX_transfer_complete_callback+0xf5e>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036ac:	4b75      	ldr	r3, [pc, #468]	@ (8003884 <UART2_RX_transfer_complete_callback+0x112c>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f7fd fac6 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
 80036b4:	e01c      	b.n	80036f0 <UART2_RX_transfer_complete_callback+0xf98>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80036b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b16      	cmp	r3, #22
 80036be:	d104      	bne.n	80036ca <UART2_RX_transfer_complete_callback+0xf72>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036c0:	4b70      	ldr	r3, [pc, #448]	@ (8003884 <UART2_RX_transfer_complete_callback+0x112c>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fd fad6 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 80036c8:	e012      	b.n	80036f0 <UART2_RX_transfer_complete_callback+0xf98>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80036ca:	4b69      	ldr	r3, [pc, #420]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b17      	cmp	r3, #23
 80036d2:	d104      	bne.n	80036de <UART2_RX_transfer_complete_callback+0xf86>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003884 <UART2_RX_transfer_complete_callback+0x112c>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd fae6 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 80036dc:	e008      	b.n	80036f0 <UART2_RX_transfer_complete_callback+0xf98>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80036de:	4b64      	ldr	r3, [pc, #400]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b18      	cmp	r3, #24
 80036e6:	d103      	bne.n	80036f0 <UART2_RX_transfer_complete_callback+0xf98>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036e8:	4b66      	ldr	r3, [pc, #408]	@ (8003884 <UART2_RX_transfer_complete_callback+0x112c>)
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7fd faf6 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80036f0:	4b5e      	ldr	r3, [pc, #376]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80036f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fd fcb2 	bl	8001062 <Clear_Data_Buffer>
 80036fe:	e0a8      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003700:	4b5a      	ldr	r3, [pc, #360]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003706:	4b5a      	ldr	r3, [pc, #360]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003708:	0018      	movs	r0, r3
 800370a:	f7fd fcaa 	bl	8001062 <Clear_Data_Buffer>
 800370e:	e0a0      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8003710:	4b56      	ldr	r3, [pc, #344]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 8003712:	0018      	movs	r0, r3
 8003714:	f7fd fc44 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 8003718:	0003      	movs	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d000      	beq.n	8003720 <UART2_RX_transfer_complete_callback+0xfc8>
 800371e:	e098      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003720:	4b53      	ldr	r3, [pc, #332]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 8003722:	0018      	movs	r0, r3
 8003724:	f7fd fc6d 	bl	8001002 <Is_Data_Buffer_Empty>
 8003728:	e093      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800372a:	4b51      	ldr	r3, [pc, #324]	@ (8003870 <UART2_RX_transfer_complete_callback+0x1118>)
 800372c:	0018      	movs	r0, r3
 800372e:	f7fd fc98 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003732:	4a52      	ldr	r2, [pc, #328]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003734:	4b50      	ldr	r3, [pc, #320]	@ (8003878 <UART2_RX_transfer_complete_callback+0x1120>)
 8003736:	0011      	movs	r1, r2
 8003738:	0018      	movs	r0, r3
 800373a:	f7fd fd12 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 800373e:	4b4d      	ldr	r3, [pc, #308]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 8003740:	0018      	movs	r0, r3
 8003742:	f7fd fb4f 	bl	8000de4 <Is_PC_Status_Byte>
 8003746:	0003      	movs	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d130      	bne.n	80037ae <UART2_RX_transfer_complete_callback+0x1056>

						running_status_byte = (uint8_t)*rx_buffer;
 800374c:	4b49      	ldr	r3, [pc, #292]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b4f      	ldr	r3, [pc, #316]	@ (8003890 <UART2_RX_transfer_complete_callback+0x1138>)
 8003754:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <UART2_RX_transfer_complete_callback+0x1128>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b45      	ldr	r3, [pc, #276]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 800375e:	0011      	movs	r1, r2
 8003760:	0018      	movs	r0, r3
 8003762:	f7fd fc2d 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003766:	0003      	movs	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10c      	bne.n	8003786 <UART2_RX_transfer_complete_callback+0x102e>

							active_status_byte = (uint8_t)*rx_buffer;
 800376c:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b3e      	ldr	r3, [pc, #248]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 8003774:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	005a      	lsls	r2, r3, #1
 800377a:	4b40      	ldr	r3, [pc, #256]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f002 f94a 	bl	8005a18 <Set_Status_Bit>
 8003784:	e065      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003788:	0018      	movs	r0, r3
 800378a:	f7fd fcd0 	bl	800112e <Is_OMNI_On>
 800378e:	0003      	movs	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d15e      	bne.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

								active_status_byte = (uint8_t)*rx_buffer;
 8003794:	4b37      	ldr	r3, [pc, #220]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b34      	ldr	r3, [pc, #208]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 800379c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	4b36      	ldr	r3, [pc, #216]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 80037a4:	0011      	movs	r1, r2
 80037a6:	0018      	movs	r0, r3
 80037a8:	f002 f936 	bl	8005a18 <Set_Status_Bit>
 80037ac:	e051      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80037ae:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd fb33 	bl	8000e1c <Is_CC_Status_Byte>
 80037b6:	0003      	movs	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d130      	bne.n	800381e <UART2_RX_transfer_complete_callback+0x10c6>

						running_status_byte = (uint8_t)*rx_buffer;
 80037bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4b33      	ldr	r3, [pc, #204]	@ (8003890 <UART2_RX_transfer_complete_callback+0x1138>)
 80037c4:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80037c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <UART2_RX_transfer_complete_callback+0x1128>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7fd fbf5 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037d6:	0003      	movs	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10c      	bne.n	80037f6 <UART2_RX_transfer_complete_callback+0x109e>

							active_status_byte = (uint8_t)*rx_buffer;
 80037dc:	4b25      	ldr	r3, [pc, #148]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b22      	ldr	r3, [pc, #136]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 80037e4:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	005a      	lsls	r2, r3, #1
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 80037ec:	0011      	movs	r1, r2
 80037ee:	0018      	movs	r0, r3
 80037f0:	f002 f912 	bl	8005a18 <Set_Status_Bit>
 80037f4:	e02d      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80037f6:	4b21      	ldr	r3, [pc, #132]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fd fc98 	bl	800112e <Is_OMNI_On>
 80037fe:	0003      	movs	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d126      	bne.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

								active_status_byte = (uint8_t)*rx_buffer;
 8003804:	4b1b      	ldr	r3, [pc, #108]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 800380c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	005a      	lsls	r2, r3, #1
 8003812:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f002 f8fe 	bl	8005a18 <Set_Status_Bit>
 800381c:	e019      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 8003820:	0018      	movs	r0, r3
 8003822:	f7fd fbbd 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 8003826:	0003      	movs	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d112      	bne.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>

						active_status_byte = (uint8_t)*rx_buffer;
 800382c:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <UART2_RX_transfer_complete_callback+0x1114>)
 8003834:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003836:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <UART2_RX_transfer_complete_callback+0x1138>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	005a      	lsls	r2, r3, #1
 8003840:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <UART2_RX_transfer_complete_callback+0x1124>)
 8003842:	0011      	movs	r1, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f002 f8e7 	bl	8005a18 <Set_Status_Bit>
 800384a:	e002      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	e000      	b.n	8003852 <UART2_RX_transfer_complete_callback+0x10fa>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003850:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003858:	4906      	ldr	r1, [pc, #24]	@ (8003874 <UART2_RX_transfer_complete_callback+0x111c>)
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <UART2_RX_transfer_complete_callback+0x113c>)
 800385c:	2201      	movs	r2, #1
 800385e:	0018      	movs	r0, r3
 8003860:	f007 ffdc 	bl	800b81c <HAL_UART_Receive_DMA>
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200004be 	.word	0x200004be
 8003870:	200004c0 	.word	0x200004c0
 8003874:	200004cc 	.word	0x200004cc
 8003878:	20000c2c 	.word	0x20000c2c
 800387c:	20000c24 	.word	0x20000c24
 8003880:	200004bd 	.word	0x200004bd
 8003884:	200004c1 	.word	0x200004c1
 8003888:	20000020 	.word	0x20000020
 800388c:	20000c3c 	.word	0x20000c3c
 8003890:	200004bf 	.word	0x200004bf
 8003894:	20000a38 	.word	0x20000a38

08003898 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	0002      	movs	r2, r0
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 80038a4:	1dbb      	adds	r3, r7, #6
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b80      	cmp	r3, #128	@ 0x80
 80038aa:	d117      	bne.n	80038dc <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80038ac:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d004      	beq.n	80038c0 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80038b6:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b07      	cmp	r3, #7
 80038be:	d10d      	bne.n	80038dc <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	23a0      	movs	r3, #160	@ 0xa0
 80038c6:	05db      	lsls	r3, r3, #23
 80038c8:	2201      	movs	r2, #1
 80038ca:	0018      	movs	r0, r3
 80038cc:	f004 f953 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	2140      	movs	r1, #64	@ 0x40
 80038d6:	0018      	movs	r0, r3
 80038d8:	f004 f94d 	bl	8007b76 <HAL_GPIO_WritePin>
		}
	}
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000428 	.word	0x20000428
 80038e8:	50000800 	.word	0x50000800

080038ec <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0002      	movs	r2, r0
 80038f4:	1dbb      	adds	r3, r7, #6
 80038f6:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 80038f8:	1dbb      	adds	r3, r7, #6
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	2b80      	cmp	r3, #128	@ 0x80
 80038fe:	d000      	beq.n	8003902 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003900:	e0dd      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003902:	4b71      	ldr	r3, [pc, #452]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d114      	bne.n	8003936 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	23a0      	movs	r3, #160	@ 0xa0
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	2200      	movs	r2, #0
 8003916:	0018      	movs	r0, r3
 8003918:	f004 f92d 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800391c:	4b6b      	ldr	r3, [pc, #428]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800391e:	2201      	movs	r2, #1
 8003920:	2140      	movs	r1, #64	@ 0x40
 8003922:	0018      	movs	r0, r3
 8003924:	f004 f927 	bl	8007b76 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003928:	4b67      	ldr	r3, [pc, #412]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800392e:	4b66      	ldr	r3, [pc, #408]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003930:	2207      	movs	r2, #7
 8003932:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003934:	e0c3      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003936:	4b64      	ldr	r3, [pc, #400]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b03      	cmp	r3, #3
 800393e:	d114      	bne.n	800396a <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003940:	2380      	movs	r3, #128	@ 0x80
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	23a0      	movs	r3, #160	@ 0xa0
 8003946:	05db      	lsls	r3, r3, #23
 8003948:	2200      	movs	r2, #0
 800394a:	0018      	movs	r0, r3
 800394c:	f004 f913 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003950:	4b5e      	ldr	r3, [pc, #376]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003952:	2201      	movs	r2, #1
 8003954:	2140      	movs	r1, #64	@ 0x40
 8003956:	0018      	movs	r0, r3
 8003958:	f004 f90d 	bl	8007b76 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 800395c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800395e:	2203      	movs	r2, #3
 8003960:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003962:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003964:	2207      	movs	r2, #7
 8003966:	701a      	strb	r2, [r3, #0]
}
 8003968:	e0a9      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 800396a:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d114      	bne.n	800399e <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	0099      	lsls	r1, r3, #2
 8003978:	23a0      	movs	r3, #160	@ 0xa0
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	2200      	movs	r2, #0
 800397e:	0018      	movs	r0, r3
 8003980:	f004 f8f9 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003984:	4b51      	ldr	r3, [pc, #324]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003986:	2201      	movs	r2, #1
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	0018      	movs	r0, r3
 800398c:	f004 f8f3 	bl	8007b76 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003990:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003992:	2202      	movs	r2, #2
 8003994:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003996:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003998:	2207      	movs	r2, #7
 800399a:	701a      	strb	r2, [r3, #0]
}
 800399c:	e08f      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d12b      	bne.n	8003a00 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 80039a8:	4b49      	ldr	r3, [pc, #292]	@ (8003ad0 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d126      	bne.n	8003a00 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 80039b2:	4b48      	ldr	r3, [pc, #288]	@ (8003ad4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039b4:	2120      	movs	r1, #32
 80039b6:	0018      	movs	r0, r3
 80039b8:	f002 f81a 	bl	80059f0 <Get_Status_Bit>
 80039bc:	0003      	movs	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11e      	bne.n	8003a00 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80039c2:	2380      	movs	r3, #128	@ 0x80
 80039c4:	0099      	lsls	r1, r3, #2
 80039c6:	23a0      	movs	r3, #160	@ 0xa0
 80039c8:	05db      	lsls	r3, r3, #23
 80039ca:	2200      	movs	r2, #0
 80039cc:	0018      	movs	r0, r3
 80039ce:	f004 f8d2 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80039d2:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	2140      	movs	r1, #64	@ 0x40
 80039d8:	0018      	movs	r0, r3
 80039da:	f004 f8cc 	bl	8007b76 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 80039de:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039e0:	2204      	movs	r2, #4
 80039e2:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80039e4:	4b38      	ldr	r3, [pc, #224]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039e6:	2207      	movs	r2, #7
 80039e8:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80039ea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039ec:	2120      	movs	r1, #32
 80039ee:	0018      	movs	r0, r3
 80039f0:	f002 f824 	bl	8005a3c <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80039f4:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039f6:	2140      	movs	r1, #64	@ 0x40
 80039f8:	0018      	movs	r0, r3
 80039fa:	f002 f81f 	bl	8005a3c <Clear_Status_Bit>
 80039fe:	e05e      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003a00:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d12b      	bne.n	8003a62 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003a0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d126      	bne.n	8003a62 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003a14:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a16:	2120      	movs	r1, #32
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f001 ffe9 	bl	80059f0 <Get_Status_Bit>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d11e      	bne.n	8003a62 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	23a0      	movs	r3, #160	@ 0xa0
 8003a2a:	05db      	lsls	r3, r3, #23
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f004 f8a1 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a34:	4b25      	ldr	r3, [pc, #148]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	2140      	movs	r1, #64	@ 0x40
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f004 f89b 	bl	8007b76 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003a40:	4b21      	ldr	r3, [pc, #132]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a42:	2208      	movs	r2, #8
 8003a44:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a46:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003a4c:	4b21      	ldr	r3, [pc, #132]	@ (8003ad4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a4e:	2120      	movs	r1, #32
 8003a50:	0018      	movs	r0, r3
 8003a52:	f001 fff3 	bl	8005a3c <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003a56:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a58:	2140      	movs	r1, #64	@ 0x40
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f001 ffee 	bl	8005a3c <Clear_Status_Bit>
 8003a60:	e02d      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003a62:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b07      	cmp	r3, #7
 8003a6a:	d114      	bne.n	8003a96 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	23a0      	movs	r3, #160	@ 0xa0
 8003a72:	05db      	lsls	r3, r3, #23
 8003a74:	2200      	movs	r2, #0
 8003a76:	0018      	movs	r0, r3
 8003a78:	f004 f87d 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	2140      	movs	r1, #64	@ 0x40
 8003a82:	0018      	movs	r0, r3
 8003a84:	f004 f877 	bl	8007b76 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a90:	2206      	movs	r2, #6
 8003a92:	701a      	strb	r2, [r3, #0]
}
 8003a94:	e013      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d10e      	bne.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	0099      	lsls	r1, r3, #2
 8003aa4:	23a0      	movs	r3, #160	@ 0xa0
 8003aa6:	05db      	lsls	r3, r3, #23
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f004 f863 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2140      	movs	r1, #64	@ 0x40
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f004 f85d 	bl	8007b76 <HAL_GPIO_WritePin>
}
 8003abc:	e7ff      	b.n	8003abe <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	20000428 	.word	0x20000428
 8003acc:	50000800 	.word	0x50000800
 8003ad0:	2000043c 	.word	0x2000043c
 8003ad4:	20000c24 	.word	0x20000c24

08003ad8 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003ae0:	250f      	movs	r5, #15
 8003ae2:	197c      	adds	r4, r7, r5
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	00da      	lsls	r2, r3, #3
 8003ae8:	23a0      	movs	r3, #160	@ 0xa0
 8003aea:	05db      	lsls	r3, r3, #23
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f004 f824 	bl	8007b3c <HAL_GPIO_ReadPin>
 8003af4:	0003      	movs	r3, r0
 8003af6:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003af8:	4bc7      	ldr	r3, [pc, #796]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10a      	bne.n	8003b18 <LPTIM1_callback+0x40>
 8003b02:	197b      	adds	r3, r7, r5
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b0a:	4bc3      	ldr	r3, [pc, #780]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003b10:	4bc1      	ldr	r3, [pc, #772]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	705a      	strb	r2, [r3, #1]
 8003b16:	e070      	b.n	8003bfa <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003b18:	4bbf      	ldr	r3, [pc, #764]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d10b      	bne.n	8003b3a <LPTIM1_callback+0x62>
 8003b22:	230f      	movs	r3, #15
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b2c:	4bba      	ldr	r3, [pc, #744]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b2e:	2205      	movs	r2, #5
 8003b30:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003b32:	4bb9      	ldr	r3, [pc, #740]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b34:	2202      	movs	r2, #2
 8003b36:	705a      	strb	r2, [r3, #1]
 8003b38:	e05f      	b.n	8003bfa <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003b3a:	4bb7      	ldr	r3, [pc, #732]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d10b      	bne.n	8003b5c <LPTIM1_callback+0x84>
 8003b44:	230f      	movs	r3, #15
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b4e:	4bb2      	ldr	r3, [pc, #712]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b50:	2205      	movs	r2, #5
 8003b52:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003b54:	4bb0      	ldr	r3, [pc, #704]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b56:	2203      	movs	r2, #3
 8003b58:	705a      	strb	r2, [r3, #1]
 8003b5a:	e04e      	b.n	8003bfa <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b5c:	4bae      	ldr	r3, [pc, #696]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b06      	cmp	r3, #6
 8003b64:	d122      	bne.n	8003bac <LPTIM1_callback+0xd4>
 8003b66:	230f      	movs	r3, #15
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11d      	bne.n	8003bac <LPTIM1_callback+0xd4>
 8003b70:	4baa      	ldr	r3, [pc, #680]	@ (8003e1c <LPTIM1_callback+0x344>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <LPTIM1_callback+0xd4>
 8003b7a:	4ba9      	ldr	r3, [pc, #676]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f001 ff36 	bl	80059f0 <Get_Status_Bit>
 8003b84:	0003      	movs	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d110      	bne.n	8003bac <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b8a:	4ba3      	ldr	r3, [pc, #652]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003b90:	4ba1      	ldr	r3, [pc, #644]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003b92:	2206      	movs	r2, #6
 8003b94:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b96:	4ba2      	ldr	r3, [pc, #648]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003b98:	2120      	movs	r1, #32
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f001 ff4e 	bl	8005a3c <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ba0:	4b9f      	ldr	r3, [pc, #636]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003ba2:	2140      	movs	r1, #64	@ 0x40
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f001 ff49 	bl	8005a3c <Clear_Status_Bit>
 8003baa:	e026      	b.n	8003bfa <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003bac:	4b9a      	ldr	r3, [pc, #616]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d121      	bne.n	8003bfa <LPTIM1_callback+0x122>
 8003bb6:	230f      	movs	r3, #15
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11c      	bne.n	8003bfa <LPTIM1_callback+0x122>
 8003bc0:	4b96      	ldr	r3, [pc, #600]	@ (8003e1c <LPTIM1_callback+0x344>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d117      	bne.n	8003bfa <LPTIM1_callback+0x122>
 8003bca:	4b95      	ldr	r3, [pc, #596]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003bcc:	2120      	movs	r1, #32
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f001 ff0e 	bl	80059f0 <Get_Status_Bit>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d10f      	bne.n	8003bfa <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003bda:	4b8f      	ldr	r3, [pc, #572]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003bdc:	2205      	movs	r2, #5
 8003bde:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003be0:	4b8d      	ldr	r3, [pc, #564]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003be2:	2208      	movs	r2, #8
 8003be4:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003be6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003be8:	2120      	movs	r1, #32
 8003bea:	0018      	movs	r0, r3
 8003bec:	f001 ff26 	bl	8005a3c <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003bf0:	4b8b      	ldr	r3, [pc, #556]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003bf2:	2140      	movs	r1, #64	@ 0x40
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f001 ff21 	bl	8005a3c <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003bfa:	4b87      	ldr	r3, [pc, #540]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d004      	beq.n	8003c0e <LPTIM1_callback+0x136>
 8003c04:	4b84      	ldr	r3, [pc, #528]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d12a      	bne.n	8003c64 <LPTIM1_callback+0x18c>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003c0e:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <LPTIM1_callback+0x34c>)
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fd fca3 	bl	800155c <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003c16:	4b83      	ldr	r3, [pc, #524]	@ (8003e24 <LPTIM1_callback+0x34c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10e      	bne.n	8003c3e <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	0099      	lsls	r1, r3, #2
 8003c24:	23a0      	movs	r3, #160	@ 0xa0
 8003c26:	05db      	lsls	r3, r3, #23
 8003c28:	2200      	movs	r2, #0
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f003 ffa3 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c30:	4b7d      	ldr	r3, [pc, #500]	@ (8003e28 <LPTIM1_callback+0x350>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	0018      	movs	r0, r3
 8003c38:	f003 ff9d 	bl	8007b76 <HAL_GPIO_WritePin>
 8003c3c:	e012      	b.n	8003c64 <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003c3e:	4b79      	ldr	r3, [pc, #484]	@ (8003e24 <LPTIM1_callback+0x34c>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	0099      	lsls	r1, r3, #2
 8003c4c:	23a0      	movs	r3, #160	@ 0xa0
 8003c4e:	05db      	lsls	r3, r3, #23
 8003c50:	2201      	movs	r2, #1
 8003c52:	0018      	movs	r0, r3
 8003c54:	f003 ff8f 	bl	8007b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003c58:	4b73      	ldr	r3, [pc, #460]	@ (8003e28 <LPTIM1_callback+0x350>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f003 ff89 	bl	8007b76 <HAL_GPIO_WritePin>
	}

	//SET PREVIOUS STATE TO CURRENT STATE
	//tap_tempo_switch_states.tap_tempo_switch_prev_state = tap_tempo_switch_states.tap_tempo_switch_state;

	if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	011a      	lsls	r2, r3, #4
 8003c68:	4b6d      	ldr	r3, [pc, #436]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f001 febf 	bl	80059f0 <Get_Status_Bit>
 8003c72:	0003      	movs	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d000      	beq.n	8003c7a <LPTIM1_callback+0x1a2>
 8003c78:	e0c0      	b.n	8003dfc <LPTIM1_callback+0x324>

		Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003c7a:	2380      	movs	r3, #128	@ 0x80
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	4b68      	ldr	r3, [pc, #416]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f001 feda 	bl	8005a3c <Clear_Status_Bit>

		pots_counter = 0;
 8003c88:	4b68      	ldr	r3, [pc, #416]	@ (8003e2c <LPTIM1_callback+0x354>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]

		//PERFORM SPEED POT CHECKING
		if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003c8e:	4b62      	ldr	r3, [pc, #392]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d004      	beq.n	8003ca2 <LPTIM1_callback+0x1ca>
 8003c98:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d105      	bne.n	8003cae <LPTIM1_callback+0x1d6>

			Pot_Check(ADCResultsDMA, SPEED_POT);
 8003ca2:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fd fb38 	bl	800131c <Pot_Check>
 8003cac:	e069      	b.n	8003d82 <LPTIM1_callback+0x2aa>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003cae:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d117      	bne.n	8003ce8 <LPTIM1_callback+0x210>
 8003cb8:	4b58      	ldr	r3, [pc, #352]	@ (8003e1c <LPTIM1_callback+0x344>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d112      	bne.n	8003ce8 <LPTIM1_callback+0x210>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cc2:	4b57      	ldr	r3, [pc, #348]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003cc4:	2140      	movs	r1, #64	@ 0x40
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f001 fea6 	bl	8005a18 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ccc:	4b54      	ldr	r3, [pc, #336]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003cce:	2120      	movs	r1, #32
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f001 fe8d 	bl	80059f0 <Get_Status_Bit>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d152      	bne.n	8003d82 <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003cdc:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003cde:	2101      	movs	r1, #1
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7fd fb1b 	bl	800131c <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ce6:	e04c      	b.n	8003d82 <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d12b      	bne.n	8003d4a <LPTIM1_callback+0x272>
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e1c <LPTIM1_callback+0x344>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d126      	bne.n	8003d4a <LPTIM1_callback+0x272>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cfc:	4b48      	ldr	r3, [pc, #288]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003cfe:	2140      	movs	r1, #64	@ 0x40
 8003d00:	0018      	movs	r0, r3
 8003d02:	f001 fe89 	bl	8005a18 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003d06:	4b46      	ldr	r3, [pc, #280]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003d08:	2120      	movs	r1, #32
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f001 fe70 	bl	80059f0 <Get_Status_Bit>
 8003d10:	0003      	movs	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d135      	bne.n	8003d82 <LPTIM1_callback+0x2aa>

				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d16:	2380      	movs	r3, #128	@ 0x80
 8003d18:	0099      	lsls	r1, r3, #2
 8003d1a:	23a0      	movs	r3, #160	@ 0xa0
 8003d1c:	05db      	lsls	r3, r3, #23
 8003d1e:	2201      	movs	r2, #1
 8003d20:	0018      	movs	r0, r3
 8003d22:	f003 ff28 	bl	8007b76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d26:	4b40      	ldr	r3, [pc, #256]	@ (8003e28 <LPTIM1_callback+0x350>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2140      	movs	r1, #64	@ 0x40
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f003 ff22 	bl	8007b76 <HAL_GPIO_WritePin>

				MIDI_CLK_fsm = NOT_COMPILING;
 8003d32:	4b40      	ldr	r3, [pc, #256]	@ (8003e34 <LPTIM1_callback+0x35c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
				MIDI_CLK_tag = 0;
 8003d38:	4b3f      	ldr	r3, [pc, #252]	@ (8003e38 <LPTIM1_callback+0x360>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fd faea 	bl	800131c <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003d48:	e01b      	b.n	8003d82 <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <LPTIM1_callback+0x340>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d116      	bne.n	8003d82 <LPTIM1_callback+0x2aa>
 8003d54:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <LPTIM1_callback+0x344>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d111      	bne.n	8003d82 <LPTIM1_callback+0x2aa>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d5e:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003d60:	2140      	movs	r1, #64	@ 0x40
 8003d62:	0018      	movs	r0, r3
 8003d64:	f001 fe58 	bl	8005a18 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003d68:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f001 fe3f 	bl	80059f0 <Get_Status_Bit>
 8003d72:	0003      	movs	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d104      	bne.n	8003d82 <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003d78:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fd facd 	bl	800131c <Pot_Check>
			}
		}

		if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003d82:	4b2e      	ldr	r3, [pc, #184]	@ (8003e3c <LPTIM1_callback+0x364>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d004      	beq.n	8003d96 <LPTIM1_callback+0x2be>
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e3c <LPTIM1_callback+0x364>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d104      	bne.n	8003da0 <LPTIM1_callback+0x2c8>
			Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003d96:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003d98:	2100      	movs	r1, #0
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fd fabe 	bl	800131c <Pot_Check>
		}
		if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003da0:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <LPTIM1_callback+0x368>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d004      	beq.n	8003db4 <LPTIM1_callback+0x2dc>
 8003daa:	4b25      	ldr	r3, [pc, #148]	@ (8003e40 <LPTIM1_callback+0x368>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d104      	bne.n	8003dbe <LPTIM1_callback+0x2e6>
			Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003db6:	2102      	movs	r1, #2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7fd faaf 	bl	800131c <Pot_Check>
		}
		if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003dbe:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <LPTIM1_callback+0x36c>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d004      	beq.n	8003dd2 <LPTIM1_callback+0x2fa>
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <LPTIM1_callback+0x36c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d104      	bne.n	8003ddc <LPTIM1_callback+0x304>
			Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003dd2:	4b17      	ldr	r3, [pc, #92]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fd faa0 	bl	800131c <Pot_Check>
		}
		if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <LPTIM1_callback+0x370>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d004      	beq.n	8003df0 <LPTIM1_callback+0x318>
 8003de6:	4b18      	ldr	r3, [pc, #96]	@ (8003e48 <LPTIM1_callback+0x370>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d134      	bne.n	8003e5a <LPTIM1_callback+0x382>
			Pot_Check(ADCResultsDMA, PHASE_POT);
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <LPTIM1_callback+0x358>)
 8003df2:	2104      	movs	r1, #4
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7fd fa91 	bl	800131c <Pot_Check>
 8003dfa:	e02e      	b.n	8003e5a <LPTIM1_callback+0x382>
		}

	}
	else{
		if(pots_counter == POT_COUNTER_COUNT){
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <LPTIM1_callback+0x354>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b40      	cmp	r3, #64	@ 0x40
 8003e04:	d122      	bne.n	8003e4c <LPTIM1_callback+0x374>

			Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003e06:	2380      	movs	r3, #128	@ 0x80
 8003e08:	011a      	lsls	r2, r3, #4
 8003e0a:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <LPTIM1_callback+0x348>)
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f001 fe02 	bl	8005a18 <Set_Status_Bit>
 8003e14:	e021      	b.n	8003e5a <LPTIM1_callback+0x382>
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	20000428 	.word	0x20000428
 8003e1c:	2000043c 	.word	0x2000043c
 8003e20:	20000c24 	.word	0x20000c24
 8003e24:	20000c18 	.word	0x20000c18
 8003e28:	50000800 	.word	0x50000800
 8003e2c:	200004d2 	.word	0x200004d2
 8003e30:	20000c30 	.word	0x20000c30
 8003e34:	20000ccc 	.word	0x20000ccc
 8003e38:	20000c22 	.word	0x20000c22
 8003e3c:	20000430 	.word	0x20000430
 8003e40:	2000042c 	.word	0x2000042c
 8003e44:	20000434 	.word	0x20000434
 8003e48:	20000438 	.word	0x20000438
		}
		else{

			pots_counter++;
 8003e4c:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <LPTIM1_callback+0x398>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <LPTIM1_callback+0x398>)
 8003e58:	701a      	strb	r2, [r3, #0]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <LPTIM1_callback+0x39c>)
 8003e5c:	22fa      	movs	r2, #250	@ 0xfa
 8003e5e:	21fa      	movs	r1, #250	@ 0xfa
 8003e60:	0018      	movs	r0, r3
 8003e62:	f003 ff7f 	bl	8007d64 <HAL_LPTIM_SetOnce_Start_IT>

}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	200004d2 	.word	0x200004d2
 8003e74:	20000bbc 	.word	0x20000bbc

08003e78 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]


}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b002      	add	sp, #8
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]


}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	1dbb      	adds	r3, r7, #6
 8003ea4:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003ea6:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <Input_Capture_Processing+0xe0>)
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f001 fdc6 	bl	8005a3c <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003eb0:	1dbb      	adds	r3, r7, #6
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f001 fd4f 	bl	800595a <isPrime>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d106      	bne.n	8003ed0 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8003ec2:	1dbb      	adds	r3, r7, #6
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	1dbb      	adds	r3, r7, #6
 8003ece:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003ed0:	1dbb      	adds	r3, r7, #6
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	019b      	lsls	r3, r3, #6
 8003ed8:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003eda:	2317      	movs	r3, #23
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e02d      	b.n	8003f40 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8003ee4:	2317      	movs	r3, #23
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2280      	movs	r2, #128	@ 0x80
 8003eee:	0052      	lsls	r2, r2, #1
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	1dbb      	adds	r3, r7, #6
 8003ef6:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8003ef8:	1dbb      	adds	r3, r7, #6
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	001a      	movs	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7fc f983 	bl	8000210 <__aeabi_uidivmod>
 8003f0a:	000b      	movs	r3, r1
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	210e      	movs	r1, #14
 8003f10:	187b      	adds	r3, r7, r1
 8003f12:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8003f1c:	1dbb      	adds	r3, r7, #6
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	0019      	movs	r1, r3
 8003f24:	6938      	ldr	r0, [r7, #16]
 8003f26:	f7fc f8ed 	bl	8000104 <__udivsi3>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	835a      	strh	r2, [r3, #26]
			break;
 8003f32:	e00a      	b.n	8003f4a <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003f34:	2117      	movs	r1, #23
 8003f36:	187b      	adds	r3, r7, r1
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	2317      	movs	r3, #23
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b80      	cmp	r3, #128	@ 0x80
 8003f48:	d9cc      	bls.n	8003ee4 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8003f4a:	1dbb      	adds	r3, r7, #6
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2280      	movs	r2, #128	@ 0x80
 8003f52:	0052      	lsls	r2, r2, #1
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 f9c1 	bl	80042e8 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f001 f8b3 	bl	80050d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8003f6e:	2301      	movs	r3, #1
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000c24 	.word	0x20000c24

08003f7c <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8003f82:	1dfc      	adds	r4, r7, #7
 8003f84:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <Start_Input_Capture_Timer+0x30>)
 8003f86:	2100      	movs	r1, #0
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 f811 	bl	8003fb0 <Start_IC_TIM>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8003f9a:	f7fe f925 	bl	80021e8 <Error_Handler>
	}

	return ok;
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b003      	add	sp, #12
 8003fa8:	bd90      	pop	{r4, r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	20000804 	.word	0x20000804

08003fb0 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8003fb0:	b5b0      	push	{r4, r5, r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003fba:	250f      	movs	r5, #15
 8003fbc:	197c      	adds	r4, r7, r5
 8003fbe:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <Start_IC_TIM+0x50>)
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f005 f969 	bl	8009298 <HAL_TIM_Base_Start_IT>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <Start_IC_TIM+0x50>)
 8003fce:	0011      	movs	r1, r2
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f005 fdcf 	bl	8009b74 <HAL_TIM_IC_Start_IT>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	0019      	movs	r1, r3
 8003fda:	197b      	adds	r3, r7, r5
 8003fdc:	197a      	adds	r2, r7, r5
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8003fe4:	197b      	adds	r3, r7, r5
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <Start_IC_TIM+0x40>

		Error_Handler();
 8003fec:	f7fe f8fc 	bl	80021e8 <Error_Handler>
	}

	return ok_AND;
 8003ff0:	230f      	movs	r3, #15
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	20000804 	.word	0x20000804

08004004 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0010      	movs	r0, r2
 8004014:	0019      	movs	r1, r3
 8004016:	2324      	movs	r3, #36	@ 0x24
 8004018:	001a      	movs	r2, r3
 800401a:	f008 ff4d 	bl	800ceb8 <memcpy>

	return 1;
 800401e:	2301      	movs	r3, #1
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b002      	add	sp, #8
 8004026:	bd80      	pop	{r7, pc}

08004028 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <Start_Measurement_Reelapse_Timer+0x34>)
 800402e:	2100      	movs	r1, #0
 8004030:	0018      	movs	r0, r3
 8004032:	f001 fc76 	bl	8005922 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <Start_Measurement_Reelapse_Timer+0x34>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <Start_Measurement_Reelapse_Timer+0x38>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <Start_Measurement_Reelapse_Timer+0x34>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <Start_Measurement_Reelapse_Timer+0x34>)
 800404c:	2100      	movs	r1, #0
 800404e:	0018      	movs	r0, r3
 8004050:	f001 fc4b 	bl	80058ea <Start_OC_TIM>

	return 1;
 8004054:	2301      	movs	r3, #1
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	200008c0 	.word	0x200008c0
 8004060:	20000c20 	.word	0x20000c20

08004064 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <Begin_Input_Capture_Measurement+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2200      	movs	r2, #0
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004070:	2301      	movs	r3, #1
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000804 	.word	0x20000804

0800407c <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004080:	f7fe f8b8 	bl	80021f4 <System_Init>

	//STARTUP
	Startup();
 8004084:	f000 fb26 	bl	80046d4 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004088:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <main+0xe4>)
 800408a:	2104      	movs	r1, #4
 800408c:	0018      	movs	r0, r3
 800408e:	f001 fcaf 	bl	80059f0 <Get_Status_Bit>
 8004092:	0003      	movs	r3, r0
 8004094:	2b01      	cmp	r3, #1
 8004096:	d107      	bne.n	80040a8 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004098:	4b32      	ldr	r3, [pc, #200]	@ (8004164 <main+0xe8>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	4a32      	ldr	r2, [pc, #200]	@ (8004168 <main+0xec>)
 80040a0:	0011      	movs	r1, r2
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7ff fef8 	bl	8003e98 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 80040a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <main+0xe4>)
 80040aa:	2140      	movs	r1, #64	@ 0x40
 80040ac:	0018      	movs	r0, r3
 80040ae:	f001 fc9f 	bl	80059f0 <Get_Status_Bit>
 80040b2:	0003      	movs	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d12b      	bne.n	8004110 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 80040b8:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <main+0xf0>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	23fa      	movs	r3, #250	@ 0xfa
 80040be:	01db      	lsls	r3, r3, #7
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d218      	bcs.n	80040f6 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 80040c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004170 <main+0xf4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80040ce:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <main+0xe4>)
 80040d0:	2140      	movs	r1, #64	@ 0x40
 80040d2:	0018      	movs	r0, r3
 80040d4:	f001 fcb2 	bl	8005a3c <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <main+0xe4>)
 80040da:	2120      	movs	r1, #32
 80040dc:	0018      	movs	r0, r3
 80040de:	f001 fcad 	bl	8005a3c <Clear_Status_Bit>
					idle_counter = 0;
 80040e2:	4b22      	ldr	r3, [pc, #136]	@ (800416c <main+0xf0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e012      	b.n	8004110 <main+0x94>
				}
				else{

					idle_counter++;
 80040ea:	4b20      	ldr	r3, [pc, #128]	@ (800416c <main+0xf0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <main+0xf0>)
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e00c      	b.n	8004110 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80040f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <main+0xe4>)
 80040f8:	2140      	movs	r1, #64	@ 0x40
 80040fa:	0018      	movs	r0, r3
 80040fc:	f001 fc9e 	bl	8005a3c <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004100:	4b17      	ldr	r3, [pc, #92]	@ (8004160 <main+0xe4>)
 8004102:	2120      	movs	r1, #32
 8004104:	0018      	movs	r0, r3
 8004106:	f001 fc87 	bl	8005a18 <Set_Status_Bit>
				idle_counter = 0;
 800410a:	4b18      	ldr	r3, [pc, #96]	@ (800416c <main+0xf0>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	005a      	lsls	r2, r3, #1
 8004114:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <main+0xe4>)
 8004116:	0011      	movs	r1, r2
 8004118:	0018      	movs	r0, r3
 800411a:	f001 fc69 	bl	80059f0 <Get_Status_Bit>
 800411e:	0003      	movs	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d1b1      	bne.n	8004088 <main+0xc>

			if(midi_counter < MIDI_COUNT){
 8004124:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <main+0xf8>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	23fa      	movs	r3, #250	@ 0xfa
 800412a:	01db      	lsls	r3, r3, #7
 800412c:	429a      	cmp	r2, r3
 800412e:	d205      	bcs.n	800413c <main+0xc0>

				midi_counter++;
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <main+0xf8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <main+0xf8>)
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e7a5      	b.n	8004088 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	005a      	lsls	r2, r3, #1
 8004140:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <main+0xe4>)
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f001 fc79 	bl	8005a3c <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 800414a:	2380      	movs	r3, #128	@ 0x80
 800414c:	009a      	lsls	r2, r3, #2
 800414e:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <main+0xe4>)
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f001 fc60 	bl	8005a18 <Set_Status_Bit>
				midi_counter = 0;
 8004158:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <main+0xf8>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 800415e:	e793      	b.n	8004088 <main+0xc>
 8004160:	20000c24 	.word	0x20000c24
 8004164:	20000c20 	.word	0x20000c20
 8004168:	20000c84 	.word	0x20000c84
 800416c:	20000c28 	.word	0x20000c28
 8004170:	2000043c 	.word	0x2000043c
 8004174:	20000c2c 	.word	0x20000c2c

08004178 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8004184:	2417      	movs	r4, #23
 8004186:	193b      	adds	r3, r7, r4
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0018      	movs	r0, r3
 8004190:	f005 f836 	bl	8009200 <HAL_TIM_Base_Start>
 8004194:	0003      	movs	r3, r0
 8004196:	0019      	movs	r1, r3
 8004198:	193b      	adds	r3, r7, r4
 800419a:	193a      	adds	r2, r7, r4
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0011      	movs	r1, r2
 80041a8:	0018      	movs	r0, r3
 80041aa:	f005 fb97 	bl	80098dc <HAL_TIM_PWM_Start>
 80041ae:	0003      	movs	r3, r0
 80041b0:	0019      	movs	r1, r3
 80041b2:	193b      	adds	r3, r7, r4
 80041b4:	193a      	adds	r2, r7, r4
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f005 fb8a 	bl	80098dc <HAL_TIM_PWM_Start>
 80041c8:	0003      	movs	r3, r0
 80041ca:	0019      	movs	r1, r3
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	193a      	adds	r2, r7, r4
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 80041d6:	193b      	adds	r3, r7, r4
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 80041de:	f7fe f803 	bl	80021e8 <Error_Handler>
	}

	return ok_OR;
 80041e2:	2317      	movs	r3, #23
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	781b      	ldrb	r3, [r3, #0]
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b007      	add	sp, #28
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80041f6:	1dfc      	adds	r4, r7, #7
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <Start_Freq_Gen_Timer+0x30>)
 80041fa:	2100      	movs	r1, #0
 80041fc:	0018      	movs	r0, r3
 80041fe:	f001 fb74 	bl	80058ea <Start_OC_TIM>
 8004202:	0003      	movs	r3, r0
 8004204:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004206:	1dfb      	adds	r3, r7, #7
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 800420e:	f7fd ffeb 	bl	80021e8 <Error_Handler>
	}

	return ok;
 8004212:	1dfb      	adds	r3, r7, #7
 8004214:	781b      	ldrb	r3, [r3, #0]
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b003      	add	sp, #12
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	20000748 	.word	0x20000748

08004224 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004230:	210b      	movs	r1, #11
 8004232:	187b      	adds	r3, r7, r1
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	891b      	ldrh	r3, [r3, #8]
 800423c:	b29b      	uxth	r3, r3
 800423e:	001a      	movs	r2, r3
 8004240:	0013      	movs	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	189b      	adds	r3, r3, r2
 8004246:	019b      	lsls	r3, r3, #6
 8004248:	189b      	adds	r3, r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	189b      	adds	r3, r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	09da      	lsrs	r2, r3, #7
 800425a:	187b      	adds	r3, r7, r1
 800425c:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	b29a      	uxth	r2, r3
 8004262:	187b      	adds	r3, r7, r1
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	01db      	lsls	r3, r3, #7
 800426a:	b29b      	uxth	r3, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004274:	187b      	adds	r3, r7, r1
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2280      	movs	r2, #128	@ 0x80
 800427a:	00d2      	lsls	r2, r2, #3
 800427c:	411a      	asrs	r2, r3
 800427e:	0013      	movs	r3, r2
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	835a      	strh	r2, [r3, #26]

    return 1;
 8004286:	2301      	movs	r3, #1
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	b004      	add	sp, #16
 800428e:	bd80      	pop	{r7, pc}

08004290 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8b1b      	ldrh	r3, [r3, #24]
 800429c:	b29a      	uxth	r2, r3
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <Set_Oscillator_Values+0x50>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8b1b      	ldrh	r3, [r3, #24]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	001a      	movs	r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <Set_Oscillator_Values+0x50>)
 80042ae:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8bdb      	ldrh	r3, [r3, #30]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <Set_Oscillator_Values+0x50>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	885b      	ldrh	r3, [r3, #2]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <Set_Oscillator_Values+0x54>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	889b      	ldrh	r3, [r3, #4]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <Set_Oscillator_Values+0x54>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80042d4:	2301      	movs	r3, #1
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b002      	add	sp, #8
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	20000748 	.word	0x20000748
 80042e4:	2000097c 	.word	0x2000097c

080042e8 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	000a      	movs	r2, r1
 80042f2:	1cfb      	adds	r3, r7, #3
 80042f4:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80042f6:	1cfb      	adds	r3, r7, #3
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d144      	bne.n	8004388 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	89db      	ldrh	r3, [r3, #14]
 8004302:	b29b      	uxth	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	89db      	ldrh	r3, [r3, #14]
 8004310:	b29a      	uxth	r2, r3
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	429a      	cmp	r2, r3
 8004318:	d102      	bne.n	8004320 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	89db      	ldrh	r3, [r3, #14]
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	741a      	strb	r2, [r3, #16]
 8004336:	e05a      	b.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	89db      	ldrh	r3, [r3, #14]
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b80      	cmp	r3, #128	@ 0x80
 8004340:	d106      	bne.n	8004350 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	741a      	strb	r2, [r3, #16]
 800434e:	e04e      	b.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	89db      	ldrh	r3, [r3, #14]
 8004354:	b29a      	uxth	r2, r3
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	429a      	cmp	r2, r3
 800435c:	d106      	bne.n	800436c <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	741a      	strb	r2, [r3, #16]
 800436a:	e040      	b.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	89db      	ldrh	r3, [r3, #14]
 8004370:	b29a      	uxth	r2, r3
 8004372:	23c0      	movs	r3, #192	@ 0xc0
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	429a      	cmp	r2, r3
 8004378:	d139      	bne.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	741a      	strb	r2, [r3, #16]
 8004386:	e032      	b.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004388:	1cfb      	adds	r3, r7, #3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d11f      	bne.n	80043d0 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	799b      	ldrb	r3, [r3, #6]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d004      	beq.n	80043a4 <Calculate_Next_Main_Oscillator_Values+0xbc>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	799b      	ldrb	r3, [r3, #6]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	22a7      	movs	r2, #167	@ 0xa7
 80043a8:	0052      	lsls	r2, r2, #1
 80043aa:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	741a      	strb	r2, [r3, #16]
 80043b8:	e019      	b.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2280      	movs	r2, #128	@ 0x80
 80043be:	0052      	lsls	r2, r2, #1
 80043c0:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	741a      	strb	r2, [r3, #16]
 80043ce:	e00e      	b.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80043d0:	1cfb      	adds	r3, r7, #3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d10a      	bne.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	89db      	ldrh	r3, [r3, #14]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	799b      	ldrb	r3, [r3, #6]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	89db      	ldrh	r3, [r3, #14]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	001a      	movs	r2, r3
 8004400:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004402:	0052      	lsls	r2, r2, #1
 8004404:	5ad2      	ldrh	r2, [r2, r3]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	e029      	b.n	8004460 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	799b      	ldrb	r3, [r3, #6]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d109      	bne.n	800442a <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	89db      	ldrh	r3, [r3, #14]
 800441a:	b29b      	uxth	r3, r3
 800441c:	001a      	movs	r2, r3
 800441e:	4b2b      	ldr	r3, [pc, #172]	@ (80044cc <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004420:	0052      	lsls	r2, r2, #1
 8004422:	5ad2      	ldrh	r2, [r2, r3]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	e01a      	b.n	8004460 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	799b      	ldrb	r3, [r3, #6]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d108      	bne.n	8004446 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	89db      	ldrh	r3, [r3, #14]
 8004438:	b29b      	uxth	r3, r3
 800443a:	2bff      	cmp	r3, #255	@ 0xff
 800443c:	d803      	bhi.n	8004446 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a23      	ldr	r2, [pc, #140]	@ (80044d0 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	e00c      	b.n	8004460 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	799b      	ldrb	r3, [r3, #6]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d107      	bne.n	8004460 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	89db      	ldrh	r3, [r3, #14]
 8004454:	b29b      	uxth	r3, r3
 8004456:	2bff      	cmp	r3, #255	@ 0xff
 8004458:	d902      	bls.n	8004460 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7a9b      	ldrb	r3, [r3, #10]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b7f      	cmp	r3, #127	@ 0x7f
 8004468:	d108      	bne.n	800447c <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e01b      	b.n	80044b4 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7a9b      	ldrb	r3, [r3, #10]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	001a      	movs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7a9b      	ldrb	r3, [r3, #10]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4353      	muls	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	09db      	lsrs	r3, r3, #7
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	4a0b      	ldr	r2, [pc, #44]	@ (80044d0 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	e002      	b.n	80044b4 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80044b2:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	805a      	strh	r2, [r3, #2]

	return 1;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b004      	add	sp, #16
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	0800d304 	.word	0x0800d304
 80044cc:	0800cf04 	.word	0x0800cf04
 80044d0:	000003ff 	.word	0x000003ff

080044d4 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	4a44      	ldr	r2, [pc, #272]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80044e2:	5a9b      	ldrh	r3, [r3, r2]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	4a41      	ldr	r2, [pc, #260]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80044ee:	5a9b      	ldrh	r3, [r3, r2]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	1e5a      	subs	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b299      	uxth	r1, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	0052      	lsls	r2, r2, #1
 80044fe:	52d1      	strh	r1, [r2, r3]
 8004500:	e006      	b.n	8004510 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b299      	uxth	r1, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	2380      	movs	r3, #128	@ 0x80
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4a38      	ldr	r2, [pc, #224]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004514:	5a9b      	ldrh	r3, [r3, r2]
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10e      	bne.n	800453a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4a35      	ldr	r2, [pc, #212]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004520:	2180      	movs	r1, #128	@ 0x80
 8004522:	0089      	lsls	r1, r1, #2
 8004524:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	4a33      	ldr	r2, [pc, #204]	@ (80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800452a:	5a9b      	ldrh	r3, [r3, r2]
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b299      	uxth	r1, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	4a30      	ldr	r2, [pc, #192]	@ (80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004536:	5299      	strh	r1, [r3, r2]
 8004538:	e026      	b.n	8004588 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4a2e      	ldr	r2, [pc, #184]	@ (80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800453e:	5a9b      	ldrh	r3, [r3, r2]
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10e      	bne.n	8004564 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800454a:	2180      	movs	r1, #128	@ 0x80
 800454c:	0089      	lsls	r1, r1, #2
 800454e:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4a28      	ldr	r2, [pc, #160]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004554:	5a9b      	ldrh	r3, [r3, r2]
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b299      	uxth	r1, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4a25      	ldr	r2, [pc, #148]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004560:	5299      	strh	r1, [r3, r2]
 8004562:	e011      	b.n	8004588 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4a23      	ldr	r2, [pc, #140]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004568:	5a9b      	ldrh	r3, [r3, r2]
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b299      	uxth	r1, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4a20      	ldr	r2, [pc, #128]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004574:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	4a1f      	ldr	r2, [pc, #124]	@ (80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800457a:	5a9b      	ldrh	r3, [r3, r2]
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b299      	uxth	r1, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004586:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800458c:	5a9b      	ldrh	r3, [r3, r2]
 800458e:	b29b      	uxth	r3, r3
 8004590:	001a      	movs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004596:	b29b      	uxth	r3, r3
 8004598:	18d2      	adds	r2, r2, r3
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	429a      	cmp	r2, r3
 80045a0:	dd13      	ble.n	80045ca <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4913      	ldr	r1, [pc, #76]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80045a8:	5a5b      	ldrh	r3, [r3, r1]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	0019      	movs	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	18cb      	adds	r3, r1, r3
 80045b6:	4911      	ldr	r1, [pc, #68]	@ (80045fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 80045b8:	468c      	mov	ip, r1
 80045ba:	4463      	add	r3, ip
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	18d3      	adds	r3, r2, r3
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	809a      	strh	r2, [r3, #4]
 80045c8:	e00f      	b.n	80045ea <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4909      	ldr	r1, [pc, #36]	@ (80045f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80045d0:	5a5b      	ldrh	r3, [r3, r1]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	0019      	movs	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80045da:	b29b      	uxth	r3, r3
 80045dc:	18cb      	adds	r3, r1, r3
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	18d3      	adds	r3, r2, r3
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 80045ea:	2301      	movs	r3, #1
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	00000402 	.word	0x00000402
 80045f8:	00000404 	.word	0x00000404
 80045fc:	7ffffe00 	.word	0x7ffffe00

08004600 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	2116      	movs	r1, #22
 8004612:	187b      	adds	r3, r7, r1
 8004614:	0952      	lsrs	r2, r2, #5
 8004616:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004618:	187b      	adds	r3, r7, r1
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	2b2a      	cmp	r3, #42	@ 0x2a
 800461e:	d803      	bhi.n	8004628 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	719a      	strb	r2, [r3, #6]
 8004626:	e010      	b.n	800464a <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004628:	2316      	movs	r3, #22
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	2b55      	cmp	r3, #85	@ 0x55
 8004630:	d803      	bhi.n	800463a <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	719a      	strb	r2, [r3, #6]
 8004638:	e007      	b.n	800464a <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800463a:	2316      	movs	r3, #22
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	2b7f      	cmp	r3, #127	@ 0x7f
 8004642:	d802      	bhi.n	800464a <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	3302      	adds	r3, #2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29a      	uxth	r2, r3
 8004652:	2114      	movs	r1, #20
 8004654:	187b      	adds	r3, r7, r1
 8004656:	0952      	lsrs	r2, r2, #5
 8004658:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 800465a:	187b      	adds	r3, r7, r1
 800465c:	187a      	adds	r2, r7, r1
 800465e:	8812      	ldrh	r2, [r2, #0]
 8004660:	00d2      	lsls	r2, r2, #3
 8004662:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	187a      	adds	r2, r7, r1
 8004668:	8812      	ldrh	r2, [r2, #0]
 800466a:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3304      	adds	r3, #4
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	b29a      	uxth	r2, r3
 8004678:	2113      	movs	r1, #19
 800467a:	187b      	adds	r3, r7, r1
 800467c:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	187a      	adds	r2, r7, r1
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	3306      	adds	r3, #6
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29a      	uxth	r2, r3
 800468e:	2110      	movs	r1, #16
 8004690:	187b      	adds	r3, r7, r1
 8004692:	0952      	lsrs	r2, r2, #5
 8004694:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8004696:	187a      	adds	r2, r7, r1
 8004698:	187b      	adds	r3, r7, r1
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	18db      	adds	r3, r3, r3
 800469e:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	187a      	adds	r2, r7, r1
 80046a4:	8812      	ldrh	r2, [r2, #0]
 80046a6:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	210e      	movs	r1, #14
 80046b2:	187b      	adds	r3, r7, r1
 80046b4:	0952      	lsrs	r2, r2, #5
 80046b6:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	187a      	adds	r2, r7, r1
 80046bc:	8812      	ldrh	r2, [r2, #0]
 80046be:	0092      	lsls	r2, r2, #2
 80046c0:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	187a      	adds	r2, r7, r1
 80046c6:	8812      	ldrh	r2, [r2, #0]
 80046c8:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80046ca:	2301      	movs	r3, #1
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <Startup>:

#include "stm32g0xx_ll_lptim.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80046da:	2007      	movs	r0, #7
 80046dc:	f002 fd8f 	bl	80071fe <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80046e0:	4b56      	ldr	r3, [pc, #344]	@ (800483c <Startup+0x168>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	4b55      	ldr	r3, [pc, #340]	@ (800483c <Startup+0x168>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2101      	movs	r1, #1
 80046ec:	430a      	orrs	r2, r1
 80046ee:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80046f0:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <Startup+0x16c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4b52      	ldr	r3, [pc, #328]	@ (8004840 <Startup+0x16c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	0099      	lsls	r1, r3, #2
 8004704:	23a0      	movs	r3, #160	@ 0xa0
 8004706:	05db      	lsls	r3, r3, #23
 8004708:	2201      	movs	r2, #1
 800470a:	0018      	movs	r0, r3
 800470c:	f003 fa33 	bl	8007b76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004710:	2380      	movs	r3, #128	@ 0x80
 8004712:	0159      	lsls	r1, r3, #5
 8004714:	23a0      	movs	r3, #160	@ 0xa0
 8004716:	05db      	lsls	r3, r3, #23
 8004718:	2201      	movs	r2, #1
 800471a:	0018      	movs	r0, r3
 800471c:	f003 fa2b 	bl	8007b76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004720:	23a0      	movs	r3, #160	@ 0xa0
 8004722:	05db      	lsls	r3, r3, #23
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	@ 0x80
 8004728:	0018      	movs	r0, r3
 800472a:	f003 fa24 	bl	8007b76 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 800472e:	f7fb fe8b 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004732:	f7fc f9b9 	bl	8000aa8 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8004736:	4b43      	ldr	r3, [pc, #268]	@ (8004844 <Startup+0x170>)
 8004738:	4a43      	ldr	r2, [pc, #268]	@ (8004848 <Startup+0x174>)
 800473a:	4944      	ldr	r1, [pc, #272]	@ (800484c <Startup+0x178>)
 800473c:	4c44      	ldr	r4, [pc, #272]	@ (8004850 <Startup+0x17c>)
 800473e:	2004      	movs	r0, #4
 8004740:	9000      	str	r0, [sp, #0]
 8004742:	0020      	movs	r0, r4
 8004744:	f7fc f8a3 	bl	800088e <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004748:	4b42      	ldr	r3, [pc, #264]	@ (8004854 <Startup+0x180>)
 800474a:	4a43      	ldr	r2, [pc, #268]	@ (8004858 <Startup+0x184>)
 800474c:	493f      	ldr	r1, [pc, #252]	@ (800484c <Startup+0x178>)
 800474e:	4843      	ldr	r0, [pc, #268]	@ (800485c <Startup+0x188>)
 8004750:	2404      	movs	r4, #4
 8004752:	9400      	str	r4, [sp, #0]
 8004754:	f7fc f951 	bl	80009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004758:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <Startup+0x18c>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	001a      	movs	r2, r3
 800475e:	4941      	ldr	r1, [pc, #260]	@ (8004864 <Startup+0x190>)
 8004760:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <Startup+0x194>)
 8004762:	0018      	movs	r0, r3
 8004764:	f001 fdfc 	bl	8006360 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	4b37      	ldr	r3, [pc, #220]	@ (8004848 <Startup+0x174>)
 800476c:	2110      	movs	r1, #16
 800476e:	0018      	movs	r0, r3
 8004770:	f001 f93e 	bl	80059f0 <Get_Status_Bit>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d0f8      	beq.n	800476a <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004778:	1dbb      	adds	r3, r7, #6
 800477a:	2200      	movs	r2, #0
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	e02c      	b.n	80047da <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004780:	4b3a      	ldr	r3, [pc, #232]	@ (800486c <Startup+0x198>)
 8004782:	799b      	ldrb	r3, [r3, #6]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d111      	bne.n	80047ae <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 800478a:	4b38      	ldr	r3, [pc, #224]	@ (800486c <Startup+0x198>)
 800478c:	7a9b      	ldrb	r3, [r3, #10]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	001a      	movs	r2, r3
 8004792:	0013      	movs	r3, r2
 8004794:	029b      	lsls	r3, r3, #10
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	11db      	asrs	r3, r3, #7
 800479a:	b29b      	uxth	r3, r3
 800479c:	1dba      	adds	r2, r7, #6
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	4933      	ldr	r1, [pc, #204]	@ (8004870 <Startup+0x19c>)
 80047a2:	1acb      	subs	r3, r1, r3
 80047a4:	b299      	uxth	r1, r3
 80047a6:	4b33      	ldr	r3, [pc, #204]	@ (8004874 <Startup+0x1a0>)
 80047a8:	0052      	lsls	r2, r2, #1
 80047aa:	52d1      	strh	r1, [r2, r3]
 80047ac:	e010      	b.n	80047d0 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80047ae:	4b2f      	ldr	r3, [pc, #188]	@ (800486c <Startup+0x198>)
 80047b0:	7a9b      	ldrb	r3, [r3, #10]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	001a      	movs	r2, r3
 80047b6:	0013      	movs	r3, r2
 80047b8:	029b      	lsls	r3, r3, #10
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	121b      	asrs	r3, r3, #8
 80047be:	b29b      	uxth	r3, r3
 80047c0:	1dba      	adds	r2, r7, #6
 80047c2:	8812      	ldrh	r2, [r2, #0]
 80047c4:	492a      	ldr	r1, [pc, #168]	@ (8004870 <Startup+0x19c>)
 80047c6:	1acb      	subs	r3, r1, r3
 80047c8:	b299      	uxth	r1, r3
 80047ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <Startup+0x1a0>)
 80047cc:	0052      	lsls	r2, r2, #1
 80047ce:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80047d0:	1dbb      	adds	r3, r7, #6
 80047d2:	881a      	ldrh	r2, [r3, #0]
 80047d4:	1dbb      	adds	r3, r7, #6
 80047d6:	3201      	adds	r2, #1
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	1dbb      	adds	r3, r7, #6
 80047dc:	881a      	ldrh	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d9cc      	bls.n	8004780 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80047e6:	4b21      	ldr	r3, [pc, #132]	@ (800486c <Startup+0x198>)
 80047e8:	2102      	movs	r1, #2
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7ff fd7c 	bl	80042e8 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80047f0:	4a20      	ldr	r2, [pc, #128]	@ (8004874 <Startup+0x1a0>)
 80047f2:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <Startup+0x198>)
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff fe6c 	bl	80044d4 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <Startup+0x198>)
 80047fe:	0018      	movs	r0, r3
 8004800:	f7ff fd46 	bl	8004290 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8004804:	4b1c      	ldr	r3, [pc, #112]	@ (8004878 <Startup+0x1a4>)
 8004806:	220c      	movs	r2, #12
 8004808:	2104      	movs	r1, #4
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff fcb4 	bl	8004178 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004810:	f7ff fcee 	bl	80041f0 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8004814:	f7fc fd72 	bl	80012fc <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004818:	f7ff fbb0 	bl	8003f7c <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 800481c:	f001 f8e0 	bl	80059e0 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004820:	4b16      	ldr	r3, [pc, #88]	@ (800487c <Startup+0x1a8>)
 8004822:	22fa      	movs	r2, #250	@ 0xfa
 8004824:	21fa      	movs	r1, #250	@ 0xfa
 8004826:	0018      	movs	r0, r3
 8004828:	f003 fa9c 	bl	8007d64 <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800482c:	2007      	movs	r0, #7
 800482e:	f002 fcd6 	bl	80071de <HAL_NVIC_EnableIRQ>

	return 1;
 8004832:	2301      	movs	r3, #1
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b003      	add	sp, #12
 800483a:	bd90      	pop	{r4, r7, pc}
 800483c:	20000804 	.word	0x20000804
 8004840:	20000748 	.word	0x20000748
 8004844:	200004bd 	.word	0x200004bd
 8004848:	20000c24 	.word	0x20000c24
 800484c:	200004b4 	.word	0x200004b4
 8004850:	0800f820 	.word	0x0800f820
 8004854:	20000478 	.word	0x20000478
 8004858:	20000468 	.word	0x20000468
 800485c:	20000488 	.word	0x20000488
 8004860:	0800d704 	.word	0x0800d704
 8004864:	20000c30 	.word	0x20000c30
 8004868:	200004ec 	.word	0x200004ec
 800486c:	20000c3c 	.word	0x20000c3c
 8004870:	000003ff 	.word	0x000003ff
 8004874:	20000020 	.word	0x20000020
 8004878:	2000097c 	.word	0x2000097c
 800487c:	20000bbc 	.word	0x20000bbc

08004880 <Advance_Pending_States>:
volatile struct Normal_FSM phase_fsm = {.current_state = MANUAL_MODE, .prev_state = NONE};
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	4a12      	ldr	r2, [pc, #72]	@ (80048d4 <Advance_Pending_States+0x54>)
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 800488e:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <Advance_Pending_States+0x54>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b05      	cmp	r3, #5
 8004896:	d103      	bne.n	80048a0 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004898:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <Advance_Pending_States+0x54>)
 800489a:	2204      	movs	r2, #4
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e007      	b.n	80048b0 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 80048a0:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <Advance_Pending_States+0x54>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d102      	bne.n	80048b0 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <Advance_Pending_States+0x54>)
 80048ac:	2206      	movs	r2, #6
 80048ae:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d007      	beq.n	80048c8 <Advance_Pending_States+0x48>
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d003      	beq.n	80048c8 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 80048c0:	4b04      	ldr	r3, [pc, #16]	@ (80048d4 <Advance_Pending_States+0x54>)
 80048c2:	1d3a      	adds	r2, r7, #4
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 80048c8:	2301      	movs	r3, #1
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b002      	add	sp, #8
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	20000428 	.word	0x20000428

080048d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048de:	4b0f      	ldr	r3, [pc, #60]	@ (800491c <HAL_MspInit+0x44>)
 80048e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048e2:	4b0e      	ldr	r3, [pc, #56]	@ (800491c <HAL_MspInit+0x44>)
 80048e4:	2101      	movs	r1, #1
 80048e6:	430a      	orrs	r2, r1
 80048e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <HAL_MspInit+0x44>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	4b09      	ldr	r3, [pc, #36]	@ (800491c <HAL_MspInit+0x44>)
 80048f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048fa:	4b08      	ldr	r3, [pc, #32]	@ (800491c <HAL_MspInit+0x44>)
 80048fc:	2180      	movs	r1, #128	@ 0x80
 80048fe:	0549      	lsls	r1, r1, #21
 8004900:	430a      	orrs	r2, r1
 8004902:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <HAL_MspInit+0x44>)
 8004906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	055b      	lsls	r3, r3, #21
 800490c:	4013      	ands	r3, r2
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	b002      	add	sp, #8
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	40021000 	.word	0x40021000

08004920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b08b      	sub	sp, #44	@ 0x2c
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004928:	2414      	movs	r4, #20
 800492a:	193b      	adds	r3, r7, r4
 800492c:	0018      	movs	r0, r3
 800492e:	2314      	movs	r3, #20
 8004930:	001a      	movs	r2, r3
 8004932:	2100      	movs	r1, #0
 8004934:	f008 fa94 	bl	800ce60 <memset>
  if(hadc->Instance==ADC1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2e      	ldr	r2, [pc, #184]	@ (80049f8 <HAL_ADC_MspInit+0xd8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d155      	bne.n	80049ee <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004942:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <HAL_ADC_MspInit+0xdc>)
 8004944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004946:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_ADC_MspInit+0xdc>)
 8004948:	2180      	movs	r1, #128	@ 0x80
 800494a:	0349      	lsls	r1, r1, #13
 800494c:	430a      	orrs	r2, r1
 800494e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004950:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <HAL_ADC_MspInit+0xdc>)
 8004952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004954:	2380      	movs	r3, #128	@ 0x80
 8004956:	035b      	lsls	r3, r3, #13
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800495e:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_ADC_MspInit+0xdc>)
 8004960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004962:	4b26      	ldr	r3, [pc, #152]	@ (80049fc <HAL_ADC_MspInit+0xdc>)
 8004964:	2101      	movs	r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34
 800496a:	4b24      	ldr	r3, [pc, #144]	@ (80049fc <HAL_ADC_MspInit+0xdc>)
 800496c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496e:	2201      	movs	r2, #1
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004976:	193b      	adds	r3, r7, r4
 8004978:	2273      	movs	r2, #115	@ 0x73
 800497a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800497c:	193b      	adds	r3, r7, r4
 800497e:	2203      	movs	r2, #3
 8004980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004982:	193b      	adds	r3, r7, r4
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004988:	193a      	adds	r2, r7, r4
 800498a:	23a0      	movs	r3, #160	@ 0xa0
 800498c:	05db      	lsls	r3, r3, #23
 800498e:	0011      	movs	r1, r2
 8004990:	0018      	movs	r0, r3
 8004992:	f002 ff6f 	bl	8007874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004996:	4b1a      	ldr	r3, [pc, #104]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 8004998:	4a1a      	ldr	r2, [pc, #104]	@ (8004a04 <HAL_ADC_MspInit+0xe4>)
 800499a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800499c:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 800499e:	2205      	movs	r2, #5
 80049a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049a2:	4b17      	ldr	r3, [pc, #92]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a8:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049ae:	4b14      	ldr	r3, [pc, #80]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049b0:	2280      	movs	r2, #128	@ 0x80
 80049b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049b4:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049b6:	2280      	movs	r2, #128	@ 0x80
 80049b8:	0052      	lsls	r2, r2, #1
 80049ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049bc:	4b10      	ldr	r3, [pc, #64]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	00d2      	lsls	r2, r2, #3
 80049c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80049ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049cc:	2280      	movs	r2, #128	@ 0x80
 80049ce:	0192      	lsls	r2, r2, #6
 80049d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049d4:	0018      	movs	r0, r3
 80049d6:	f002 fc2f 	bl	8007238 <HAL_DMA_Init>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80049de:	f7fd fc03 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a06      	ldr	r2, [pc, #24]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <HAL_ADC_MspInit+0xe0>)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b00b      	add	sp, #44	@ 0x2c
 80049f4:	bd90      	pop	{r4, r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	40012400 	.word	0x40012400
 80049fc:	40021000 	.word	0x40021000
 8004a00:	20000574 	.word	0x20000574
 8004a04:	40020008 	.word	0x40020008

08004a08 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b097      	sub	sp, #92	@ 0x5c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a10:	2344      	movs	r3, #68	@ 0x44
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	0018      	movs	r0, r3
 8004a16:	2314      	movs	r3, #20
 8004a18:	001a      	movs	r2, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f008 fa20 	bl	800ce60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a20:	241c      	movs	r4, #28
 8004a22:	193b      	adds	r3, r7, r4
 8004a24:	0018      	movs	r0, r3
 8004a26:	2328      	movs	r3, #40	@ 0x28
 8004a28:	001a      	movs	r2, r3
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	f008 fa18 	bl	800ce60 <memset>
  if(hlptim->Instance==LPTIM1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a46      	ldr	r2, [pc, #280]	@ (8004b50 <HAL_LPTIM_MspInit+0x148>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d13e      	bne.n	8004ab8 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	0092      	lsls	r2, r2, #2
 8004a40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8004a42:	193b      	adds	r3, r7, r4
 8004a44:	2200      	movs	r2, #0
 8004a46:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f004 f9f8 	bl	8008e40 <HAL_RCCEx_PeriphCLKConfig>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8004a54:	f7fd fbc8 	bl	80021e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004a58:	4b3e      	ldr	r3, [pc, #248]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004a5e:	2180      	movs	r1, #128	@ 0x80
 8004a60:	0609      	lsls	r1, r1, #24
 8004a62:	430a      	orrs	r2, r1
 8004a64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a66:	4b3b      	ldr	r3, [pc, #236]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6a:	0fdb      	lsrs	r3, r3, #31
 8004a6c:	07db      	lsls	r3, r3, #31
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a72:	4b38      	ldr	r3, [pc, #224]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a76:	4b37      	ldr	r3, [pc, #220]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004a78:	2102      	movs	r1, #2
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a7e:	4b35      	ldr	r3, [pc, #212]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a82:	2202      	movs	r2, #2
 8004a84:	4013      	ands	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a8a:	2144      	movs	r1, #68	@ 0x44
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	187b      	adds	r3, r7, r1
 8004a94:	2202      	movs	r2, #2
 8004a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	2205      	movs	r2, #5
 8004aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <HAL_LPTIM_MspInit+0x150>)
 8004aae:	0019      	movs	r1, r3
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	f002 fedf 	bl	8007874 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8004ab6:	e046      	b.n	8004b46 <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a27      	ldr	r2, [pc, #156]	@ (8004b5c <HAL_LPTIM_MspInit+0x154>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d141      	bne.n	8004b46 <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8004ac2:	211c      	movs	r1, #28
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	2280      	movs	r2, #128	@ 0x80
 8004ac8:	00d2      	lsls	r2, r2, #3
 8004aca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8004acc:	187b      	adds	r3, r7, r1
 8004ace:	2200      	movs	r2, #0
 8004ad0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ad2:	187b      	adds	r3, r7, r1
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f004 f9b3 	bl	8008e40 <HAL_RCCEx_PeriphCLKConfig>
 8004ada:	1e03      	subs	r3, r0, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8004ade:	f7fd fb83 	bl	80021e8 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004ae8:	2180      	movs	r1, #128	@ 0x80
 8004aea:	05c9      	lsls	r1, r1, #23
 8004aec:	430a      	orrs	r2, r1
 8004aee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004af0:	4b18      	ldr	r3, [pc, #96]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	05db      	lsls	r3, r3, #23
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afe:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004b04:	2101      	movs	r1, #1
 8004b06:	430a      	orrs	r2, r1
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b0a:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <HAL_LPTIM_MspInit+0x14c>)
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b16:	2144      	movs	r1, #68	@ 0x44
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	2280      	movs	r2, #128	@ 0x80
 8004b1c:	0052      	lsls	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	2202      	movs	r2, #2
 8004b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	2200      	movs	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	2205      	movs	r2, #5
 8004b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b38:	187a      	adds	r2, r7, r1
 8004b3a:	23a0      	movs	r3, #160	@ 0xa0
 8004b3c:	05db      	lsls	r3, r3, #23
 8004b3e:	0011      	movs	r1, r2
 8004b40:	0018      	movs	r0, r3
 8004b42:	f002 fe97 	bl	8007874 <HAL_GPIO_Init>
}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b017      	add	sp, #92	@ 0x5c
 8004b4c:	bd90      	pop	{r4, r7, pc}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	40007c00 	.word	0x40007c00
 8004b54:	40021000 	.word	0x40021000
 8004b58:	50000400 	.word	0x50000400
 8004b5c:	40009400 	.word	0x40009400

08004b60 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b099      	sub	sp, #100	@ 0x64
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b68:	234c      	movs	r3, #76	@ 0x4c
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	2314      	movs	r3, #20
 8004b70:	001a      	movs	r2, r3
 8004b72:	2100      	movs	r1, #0
 8004b74:	f008 f974 	bl	800ce60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b78:	2424      	movs	r4, #36	@ 0x24
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	2328      	movs	r3, #40	@ 0x28
 8004b80:	001a      	movs	r2, r3
 8004b82:	2100      	movs	r1, #0
 8004b84:	f008 f96c 	bl	800ce60 <memset>
  if(htim_base->Instance==TIM1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a68      	ldr	r2, [pc, #416]	@ (8004d30 <HAL_TIM_Base_MspInit+0x1d0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d11d      	bne.n	8004bce <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004b92:	193b      	adds	r3, r7, r4
 8004b94:	2280      	movs	r2, #128	@ 0x80
 8004b96:	0392      	lsls	r2, r2, #14
 8004b98:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004b9a:	193b      	adds	r3, r7, r4
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f004 f94c 	bl	8008e40 <HAL_RCCEx_PeriphCLKConfig>
 8004ba8:	1e03      	subs	r3, r0, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8004bac:	f7fd fb1c 	bl	80021e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bb0:	4b60      	ldr	r3, [pc, #384]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004bb6:	2180      	movs	r1, #128	@ 0x80
 8004bb8:	0109      	lsls	r1, r1, #4
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8004bcc:	e0ab      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	05db      	lsls	r3, r3, #23
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d138      	bne.n	8004c4c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bda:	4b56      	ldr	r3, [pc, #344]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bde:	4b55      	ldr	r3, [pc, #340]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004be0:	2101      	movs	r1, #1
 8004be2:	430a      	orrs	r2, r1
 8004be4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004be6:	4b53      	ldr	r3, [pc, #332]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bea:	2201      	movs	r2, #1
 8004bec:	4013      	ands	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf2:	4b50      	ldr	r3, [pc, #320]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	2201      	movs	r2, #1
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004c0a:	214c      	movs	r1, #76	@ 0x4c
 8004c0c:	187b      	adds	r3, r7, r1
 8004c0e:	2280      	movs	r2, #128	@ 0x80
 8004c10:	0212      	lsls	r2, r2, #8
 8004c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	2202      	movs	r2, #2
 8004c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	2202      	movs	r2, #2
 8004c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004c2c:	187a      	adds	r2, r7, r1
 8004c2e:	23a0      	movs	r3, #160	@ 0xa0
 8004c30:	05db      	lsls	r3, r3, #23
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f002 fe1d 	bl	8007874 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	200f      	movs	r0, #15
 8004c40:	f002 fab8 	bl	80071b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c44:	200f      	movs	r0, #15
 8004c46:	f002 faca 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 8004c4a:	e06c      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a39      	ldr	r2, [pc, #228]	@ (8004d38 <HAL_TIM_Base_MspInit+0x1d8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d114      	bne.n	8004c80 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c56:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c62:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c66:	2202      	movs	r2, #2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	2010      	movs	r0, #16
 8004c74:	f002 fa9e 	bl	80071b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c78:	2010      	movs	r0, #16
 8004c7a:	f002 fab0 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 8004c7e:	e052      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2d      	ldr	r2, [pc, #180]	@ (8004d3c <HAL_TIM_Base_MspInit+0x1dc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d116      	bne.n	8004cb8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c8e:	4b29      	ldr	r3, [pc, #164]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c90:	2180      	movs	r1, #128	@ 0x80
 8004c92:	0289      	lsls	r1, r1, #10
 8004c94:	430a      	orrs	r2, r1
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c98:	4b26      	ldr	r3, [pc, #152]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2015      	movs	r0, #21
 8004cac:	f002 fa82 	bl	80071b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004cb0:	2015      	movs	r0, #21
 8004cb2:	f002 fa94 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 8004cb6:	e036      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	@ (8004d40 <HAL_TIM_Base_MspInit+0x1e0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d116      	bne.n	8004cf0 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	02c9      	lsls	r1, r1, #11
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cd0:	4b18      	ldr	r3, [pc, #96]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd4:	2380      	movs	r3, #128	@ 0x80
 8004cd6:	02db      	lsls	r3, r3, #11
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004cde:	2203      	movs	r2, #3
 8004ce0:	2103      	movs	r1, #3
 8004ce2:	2016      	movs	r0, #22
 8004ce4:	f002 fa66 	bl	80071b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004ce8:	2016      	movs	r0, #22
 8004cea:	f002 fa78 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 8004cee:	e01a      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a13      	ldr	r2, [pc, #76]	@ (8004d44 <HAL_TIM_Base_MspInit+0x1e4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d115      	bne.n	8004d26 <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d00:	2180      	movs	r1, #128	@ 0x80
 8004d02:	0209      	lsls	r1, r1, #8
 8004d04:	430a      	orrs	r2, r1
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d0c:	2380      	movs	r3, #128	@ 0x80
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	4013      	ands	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004d16:	2203      	movs	r2, #3
 8004d18:	2103      	movs	r1, #3
 8004d1a:	2013      	movs	r0, #19
 8004d1c:	f002 fa4a 	bl	80071b4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004d20:	2013      	movs	r0, #19
 8004d22:	f002 fa5c 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b019      	add	sp, #100	@ 0x64
 8004d2c:	bd90      	pop	{r4, r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800
 8004d44:	40002000 	.word	0x40002000

08004d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b08b      	sub	sp, #44	@ 0x2c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d50:	2414      	movs	r4, #20
 8004d52:	193b      	adds	r3, r7, r4
 8004d54:	0018      	movs	r0, r3
 8004d56:	2314      	movs	r3, #20
 8004d58:	001a      	movs	r2, r3
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f008 f880 	bl	800ce60 <memset>
  if(htim->Instance==TIM1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	@ (8004dfc <HAL_TIM_MspPostInit+0xb4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d144      	bne.n	8004df4 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6a:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <HAL_TIM_MspPostInit+0xb8>)
 8004d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <HAL_TIM_MspPostInit+0xb8>)
 8004d70:	2101      	movs	r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d76:	4b22      	ldr	r3, [pc, #136]	@ (8004e00 <HAL_TIM_MspPostInit+0xb8>)
 8004d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d82:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <HAL_TIM_MspPostInit+0xb8>)
 8004d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d86:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <HAL_TIM_MspPostInit+0xb8>)
 8004d88:	2102      	movs	r1, #2
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e00 <HAL_TIM_MspPostInit+0xb8>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d92:	2202      	movs	r2, #2
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	2280      	movs	r2, #128	@ 0x80
 8004d9e:	0112      	lsls	r2, r2, #4
 8004da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	2202      	movs	r2, #2
 8004da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	2200      	movs	r2, #0
 8004db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	2202      	movs	r2, #2
 8004db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004dba:	193a      	adds	r2, r7, r4
 8004dbc:	23a0      	movs	r3, #160	@ 0xa0
 8004dbe:	05db      	lsls	r3, r3, #23
 8004dc0:	0011      	movs	r1, r2
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f002 fd56 	bl	8007874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004dc8:	0021      	movs	r1, r4
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	2208      	movs	r2, #8
 8004dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd0:	187b      	adds	r3, r7, r1
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	2200      	movs	r2, #0
 8004dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	2200      	movs	r2, #0
 8004de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	2201      	movs	r2, #1
 8004de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	4a06      	ldr	r2, [pc, #24]	@ (8004e04 <HAL_TIM_MspPostInit+0xbc>)
 8004dec:	0019      	movs	r1, r3
 8004dee:	0010      	movs	r0, r2
 8004df0:	f002 fd40 	bl	8007874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b00b      	add	sp, #44	@ 0x2c
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40021000 	.word	0x40021000
 8004e04:	50000400 	.word	0x50000400

08004e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b08b      	sub	sp, #44	@ 0x2c
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	2414      	movs	r4, #20
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	0018      	movs	r0, r3
 8004e16:	2314      	movs	r3, #20
 8004e18:	001a      	movs	r2, r3
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f008 f820 	bl	800ce60 <memset>
  if(huart->Instance==USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a4a      	ldr	r2, [pc, #296]	@ (8004f50 <HAL_UART_MspInit+0x148>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d000      	beq.n	8004e2c <HAL_UART_MspInit+0x24>
 8004e2a:	e08d      	b.n	8004f48 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e2c:	4b49      	ldr	r3, [pc, #292]	@ (8004f54 <HAL_UART_MspInit+0x14c>)
 8004e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e30:	4b48      	ldr	r3, [pc, #288]	@ (8004f54 <HAL_UART_MspInit+0x14c>)
 8004e32:	2180      	movs	r1, #128	@ 0x80
 8004e34:	0289      	lsls	r1, r1, #10
 8004e36:	430a      	orrs	r2, r1
 8004e38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e3a:	4b46      	ldr	r3, [pc, #280]	@ (8004f54 <HAL_UART_MspInit+0x14c>)
 8004e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e48:	4b42      	ldr	r3, [pc, #264]	@ (8004f54 <HAL_UART_MspInit+0x14c>)
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4c:	4b41      	ldr	r3, [pc, #260]	@ (8004f54 <HAL_UART_MspInit+0x14c>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e54:	4b3f      	ldr	r3, [pc, #252]	@ (8004f54 <HAL_UART_MspInit+0x14c>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004e60:	0021      	movs	r1, r4
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	220c      	movs	r2, #12
 8004e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2201      	movs	r2, #1
 8004e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e80:	187a      	adds	r2, r7, r1
 8004e82:	23a0      	movs	r3, #160	@ 0xa0
 8004e84:	05db      	lsls	r3, r3, #23
 8004e86:	0011      	movs	r1, r2
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f002 fcf3 	bl	8007874 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004e8e:	4b32      	ldr	r3, [pc, #200]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004e90:	4a32      	ldr	r2, [pc, #200]	@ (8004f5c <HAL_UART_MspInit+0x154>)
 8004e92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004e94:	4b30      	ldr	r3, [pc, #192]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004e96:	2234      	movs	r2, #52	@ 0x34
 8004e98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004ea8:	2280      	movs	r2, #128	@ 0x80
 8004eaa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eac:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eb2:	4b29      	ldr	r3, [pc, #164]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004eb8:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ebe:	4b26      	ldr	r3, [pc, #152]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	0152      	lsls	r2, r2, #5
 8004ec4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ec6:	4b24      	ldr	r3, [pc, #144]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f002 f9b5 	bl	8007238 <HAL_DMA_Init>
 8004ece:	1e03      	subs	r3, r0, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004ed2:	f7fd f989 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2180      	movs	r1, #128	@ 0x80
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004edc:	505a      	str	r2, [r3, r1]
 8004ede:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <HAL_UART_MspInit+0x150>)
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f64 <HAL_UART_MspInit+0x15c>)
 8004ee8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004eec:	2235      	movs	r2, #53	@ 0x35
 8004eee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004efc:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004efe:	2280      	movs	r2, #128	@ 0x80
 8004f00:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f02:	4b17      	ldr	r3, [pc, #92]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f08:	4b15      	ldr	r3, [pc, #84]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004f0e:	4b14      	ldr	r3, [pc, #80]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f14:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f16:	2280      	movs	r2, #128	@ 0x80
 8004f18:	0152      	lsls	r2, r2, #5
 8004f1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004f1c:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f002 f98a 	bl	8007238 <HAL_DMA_Init>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004f28:	f7fd f95e 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f30:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_UART_MspInit+0x158>)
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	201c      	movs	r0, #28
 8004f3e:	f002 f939 	bl	80071b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f42:	201c      	movs	r0, #28
 8004f44:	f002 f94b 	bl	80071de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b00b      	add	sp, #44	@ 0x2c
 8004f4e:	bd90      	pop	{r4, r7, pc}
 8004f50:	40004400 	.word	0x40004400
 8004f54:	40021000 	.word	0x40021000
 8004f58:	20000b04 	.word	0x20000b04
 8004f5c:	4002001c 	.word	0x4002001c
 8004f60:	20000b60 	.word	0x20000b60
 8004f64:	40020030 	.word	0x40020030

08004f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	e7fd      	b.n	8004f6c <NMI_Handler+0x4>

08004f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f74:	46c0      	nop			@ (mov r8, r8)
 8004f76:	e7fd      	b.n	8004f74 <HardFault_Handler+0x4>

08004f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004f7c:	46c0      	nop			@ (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f90:	f000 fdfc 	bl	8005b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f94:	46c0      	nop			@ (mov r8, r8)
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8004f9e:	2080      	movs	r0, #128	@ 0x80
 8004fa0:	f002 fe06 	bl	8007bb0 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fb0:	4b03      	ldr	r3, [pc, #12]	@ (8004fc0 <DMA1_Channel1_IRQHandler+0x14>)
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f002 fb1c 	bl	80075f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004fb8:	46c0      	nop			@ (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	20000574 	.word	0x20000574

08004fc4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f002 fb10 	bl	80075f0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004fd0:	4b04      	ldr	r3, [pc, #16]	@ (8004fe4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f002 fb0c 	bl	80075f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	20000b04 	.word	0x20000b04
 8004fe4:	20000b60 	.word	0x20000b60

08004fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <TIM2_IRQHandler+0x14>)
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f004 fef0 	bl	8009dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ff4:	46c0      	nop			@ (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	20000804 	.word	0x20000804

08005000 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005004:	4b03      	ldr	r3, [pc, #12]	@ (8005014 <TIM3_IRQHandler+0x14>)
 8005006:	0018      	movs	r0, r3
 8005008:	f004 fee4 	bl	8009dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	200008c0 	.word	0x200008c0

08005018 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800501c:	4b03      	ldr	r3, [pc, #12]	@ (800502c <TIM16_IRQHandler+0x14>)
 800501e:	0018      	movs	r0, r3
 8005020:	f004 fed8 	bl	8009dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	20000748 	.word	0x20000748

08005030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <USART2_IRQHandler+0x14>)
 8005036:	0018      	movs	r0, r3
 8005038:	f006 fc4e 	bl	800b8d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800503c:	46c0      	nop			@ (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	20000a38 	.word	0x20000a38

08005048 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 800504c:	4b03      	ldr	r3, [pc, #12]	@ (800505c <LPTIM1_IRQHandler+0x14>)
 800504e:	0018      	movs	r0, r3
 8005050:	f002 ff1c 	bl	8007e8c <HAL_LPTIM_IRQHandler>
}
 8005054:	46c0      	nop			@ (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			@ (mov r8, r8)
 800505c:	20000bbc 	.word	0x20000bbc

08005060 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005064:	4b03      	ldr	r3, [pc, #12]	@ (8005074 <TIM17_IRQHandler+0x14>)
 8005066:	0018      	movs	r0, r3
 8005068:	f004 feb4 	bl	8009dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800506c:	46c0      	nop			@ (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	2000068c 	.word	0x2000068c

08005078 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800507c:	4b03      	ldr	r3, [pc, #12]	@ (800508c <TIM14_IRQHandler+0x14>)
 800507e:	0018      	movs	r0, r3
 8005080:	f004 fea8 	bl	8009dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005084:	46c0      	nop			@ (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	200005d0 	.word	0x200005d0

08005090 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8b5b      	ldrh	r3, [r3, #26]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	18db      	adds	r3, r3, r3
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	839a      	strh	r2, [r3, #28]
 80050b2:	e00a      	b.n	80050ca <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	5c9b      	ldrb	r3, [r3, r2]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8b5b      	ldrh	r3, [r3, #26]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 80050ca:	2301      	movs	r3, #1
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 80050d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80050dc:	2317      	movs	r3, #23
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80050e4:	2316      	movs	r3, #22
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80050ec:	2315      	movs	r3, #21
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 80050f4:	2114      	movs	r1, #20
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	899b      	ldrh	r3, [r3, #12]
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b7f      	cmp	r3, #127	@ 0x7f
 8005104:	d803      	bhi.n	800510e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8005106:	187b      	adds	r3, r7, r1
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e003      	b.n	8005116 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 800510e:	2314      	movs	r3, #20
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	799b      	ldrb	r3, [r3, #6]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d004      	beq.n	800512a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	799b      	ldrb	r3, [r3, #6]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d146      	bne.n	80051b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	7c1b      	ldrb	r3, [r3, #16]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7c5b      	ldrb	r3, [r3, #17]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7c1b      	ldrb	r3, [r3, #16]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d113      	bne.n	8005170 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7c5b      	ldrb	r3, [r3, #17]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10e      	bne.n	8005170 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8005152:	2314      	movs	r3, #20
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 800515c:	2316      	movs	r3, #22
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005164:	e027      	b.n	80051b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005166:	2316      	movs	r3, #22
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 800516e:	e022      	b.n	80051b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7c1b      	ldrb	r3, [r3, #16]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	7c5b      	ldrb	r3, [r3, #17]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d009      	beq.n	8005198 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7c1b      	ldrb	r3, [r3, #16]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d13c      	bne.n	8005208 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7c5b      	ldrb	r3, [r3, #17]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d137      	bne.n	8005208 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005198:	2314      	movs	r3, #20
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 80051a2:	2316      	movs	r3, #22
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80051aa:	e02d      	b.n	8005208 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80051ac:	2316      	movs	r3, #22
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80051b4:	e028      	b.n	8005208 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 80051b6:	e027      	b.n	8005208 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	799b      	ldrb	r3, [r3, #6]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d123      	bne.n	800520a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7c1b      	ldrb	r3, [r3, #16]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10e      	bne.n	80051ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 80051cc:	2314      	movs	r3, #20
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 80051d6:	2316      	movs	r3, #22
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e014      	b.n	800520a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80051e0:	2316      	movs	r3, #22
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e00f      	b.n	800520a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80051ea:	2314      	movs	r3, #20
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 80051f4:	2316      	movs	r3, #22
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e005      	b.n	800520a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80051fe:	2316      	movs	r3, #22
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e000      	b.n	800520a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005208:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 800520a:	2314      	movs	r3, #20
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	899b      	ldrh	r3, [r3, #12]
 8005218:	b29b      	uxth	r3, r3
 800521a:	b2da      	uxtb	r2, r3
 800521c:	2315      	movs	r3, #21
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	217f      	movs	r1, #127	@ 0x7f
 8005222:	1a8a      	subs	r2, r1, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e007      	b.n	8005238 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	899b      	ldrh	r3, [r3, #12]
 800522c:	b29b      	uxth	r3, r3
 800522e:	b2da      	uxtb	r2, r3
 8005230:	2315      	movs	r3, #21
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	3a80      	subs	r2, #128	@ 0x80
 8005236:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8a5b      	ldrh	r3, [r3, #18]
 800523c:	b29a      	uxth	r2, r3
 800523e:	200e      	movs	r0, #14
 8005240:	183b      	adds	r3, r7, r0
 8005242:	2180      	movs	r1, #128	@ 0x80
 8005244:	0049      	lsls	r1, r1, #1
 8005246:	1a8a      	subs	r2, r1, r2
 8005248:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 800524a:	0001      	movs	r1, r0
 800524c:	187b      	adds	r3, r7, r1
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	2215      	movs	r2, #21
 8005252:	18ba      	adds	r2, r7, r2
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	435a      	muls	r2, r3
 8005258:	0013      	movs	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	189b      	adds	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	10da      	asrs	r2, r3, #3
 8005262:	240c      	movs	r4, #12
 8005264:	193b      	adds	r3, r7, r4
 8005266:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005268:	250a      	movs	r5, #10
 800526a:	197b      	adds	r3, r7, r5
 800526c:	193a      	adds	r2, r7, r4
 800526e:	8812      	ldrh	r2, [r2, #0]
 8005270:	0a12      	lsrs	r2, r2, #8
 8005272:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005274:	2312      	movs	r3, #18
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	0008      	movs	r0, r1
 800527a:	1879      	adds	r1, r7, r1
 800527c:	197a      	adds	r2, r7, r5
 800527e:	8809      	ldrh	r1, [r1, #0]
 8005280:	8812      	ldrh	r2, [r2, #0]
 8005282:	1a8a      	subs	r2, r1, r2
 8005284:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005286:	2610      	movs	r6, #16
 8005288:	19bb      	adds	r3, r7, r6
 800528a:	1839      	adds	r1, r7, r0
 800528c:	197a      	adds	r2, r7, r5
 800528e:	8809      	ldrh	r1, [r1, #0]
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	188a      	adds	r2, r1, r2
 8005294:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005296:	19bb      	adds	r3, r7, r6
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	2bff      	cmp	r3, #255	@ 0xff
 800529c:	d90f      	bls.n	80052be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800529e:	19bb      	adds	r3, r7, r6
 80052a0:	881a      	ldrh	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d000      	beq.n	80052ac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 80052aa:	e0b0      	b.n	800540e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 80052ac:	193b      	adds	r3, r7, r4
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	2108      	movs	r1, #8
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 fb80 	bl	80059b8 <unsigned_bitwise_modulo>
 80052b8:	1e03      	subs	r3, r0, #0
 80052ba:	d000      	beq.n	80052be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80052bc:	e0a7      	b.n	800540e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80052be:	230c      	movs	r3, #12
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	2108      	movs	r1, #8
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 fb76 	bl	80059b8 <unsigned_bitwise_modulo>
 80052cc:	0003      	movs	r3, r0
 80052ce:	2b80      	cmp	r3, #128	@ 0x80
 80052d0:	d117      	bne.n	8005302 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80052d2:	2316      	movs	r3, #22
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80052dc:	2317      	movs	r3, #23
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	2202      	movs	r2, #2
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e008      	b.n	80052f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80052e6:	2316      	movs	r3, #22
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d103      	bne.n	80052f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80052f0:	2317      	movs	r3, #23
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005300:	e21f      	b.n	8005742 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005302:	230c      	movs	r3, #12
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	2108      	movs	r1, #8
 800530a:	0018      	movs	r0, r3
 800530c:	f000 fb54 	bl	80059b8 <unsigned_bitwise_modulo>
 8005310:	1e03      	subs	r3, r0, #0
 8005312:	d121      	bne.n	8005358 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005314:	2212      	movs	r2, #18
 8005316:	18bb      	adds	r3, r7, r2
 8005318:	18ba      	adds	r2, r7, r2
 800531a:	8812      	ldrh	r2, [r2, #0]
 800531c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800531e:	2210      	movs	r2, #16
 8005320:	18bb      	adds	r3, r7, r2
 8005322:	18ba      	adds	r2, r7, r2
 8005324:	8812      	ldrh	r2, [r2, #0]
 8005326:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005328:	2316      	movs	r3, #22
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005332:	2317      	movs	r3, #23
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e008      	b.n	800534e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800533c:	2316      	movs	r3, #22
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d103      	bne.n	800534e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005346:	2317      	movs	r3, #23
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	2100      	movs	r1, #0
 8005354:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005356:	e1f4      	b.n	8005742 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005358:	230c      	movs	r3, #12
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	2108      	movs	r1, #8
 8005360:	0018      	movs	r0, r3
 8005362:	f000 fb29 	bl	80059b8 <unsigned_bitwise_modulo>
 8005366:	0003      	movs	r3, r0
 8005368:	2b7f      	cmp	r3, #127	@ 0x7f
 800536a:	d821      	bhi.n	80053b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800536c:	2212      	movs	r2, #18
 800536e:	18bb      	adds	r3, r7, r2
 8005370:	18ba      	adds	r2, r7, r2
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005376:	2210      	movs	r2, #16
 8005378:	18bb      	adds	r3, r7, r2
 800537a:	18ba      	adds	r2, r7, r2
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005380:	2316      	movs	r3, #22
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d104      	bne.n	8005394 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800538a:	2317      	movs	r3, #23
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e008      	b.n	80053a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005394:	2316      	movs	r3, #22
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d103      	bne.n	80053a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800539e:	2317      	movs	r3, #23
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80053ae:	e1c8      	b.n	8005742 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80053b0:	230c      	movs	r3, #12
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	2108      	movs	r1, #8
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 fafd 	bl	80059b8 <unsigned_bitwise_modulo>
 80053be:	0003      	movs	r3, r0
 80053c0:	2b80      	cmp	r3, #128	@ 0x80
 80053c2:	d800      	bhi.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 80053c4:	e1bd      	b.n	8005742 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80053c6:	2212      	movs	r2, #18
 80053c8:	18bb      	adds	r3, r7, r2
 80053ca:	18ba      	adds	r2, r7, r2
 80053cc:	8812      	ldrh	r2, [r2, #0]
 80053ce:	3a01      	subs	r2, #1
 80053d0:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80053d2:	2210      	movs	r2, #16
 80053d4:	18bb      	adds	r3, r7, r2
 80053d6:	18ba      	adds	r2, r7, r2
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	3201      	adds	r2, #1
 80053dc:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80053de:	2316      	movs	r3, #22
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80053e8:	2317      	movs	r3, #23
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e008      	b.n	8005404 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80053f2:	2316      	movs	r3, #22
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d103      	bne.n	8005404 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80053fc:	2317      	movs	r3, #23
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800540c:	e199      	b.n	8005742 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 800540e:	2110      	movs	r1, #16
 8005410:	187b      	adds	r3, r7, r1
 8005412:	881a      	ldrh	r2, [r3, #0]
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	429a      	cmp	r2, r3
 800541a:	d810      	bhi.n	800543e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 800541c:	187b      	adds	r3, r7, r1
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	429a      	cmp	r2, r3
 8005426:	d000      	beq.n	800542a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005428:	e18c      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800542a:	230c      	movs	r3, #12
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2108      	movs	r1, #8
 8005432:	0018      	movs	r0, r3
 8005434:	f000 fac0 	bl	80059b8 <unsigned_bitwise_modulo>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d100      	bne.n	800543e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 800543c:	e182      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800543e:	230c      	movs	r3, #12
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	2108      	movs	r1, #8
 8005446:	0018      	movs	r0, r3
 8005448:	f000 fab6 	bl	80059b8 <unsigned_bitwise_modulo>
 800544c:	0003      	movs	r3, r0
 800544e:	2b80      	cmp	r3, #128	@ 0x80
 8005450:	d159      	bne.n	8005506 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005452:	2212      	movs	r2, #18
 8005454:	18bb      	adds	r3, r7, r2
 8005456:	18ba      	adds	r2, r7, r2
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	3a01      	subs	r2, #1
 800545c:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800545e:	2110      	movs	r1, #16
 8005460:	187b      	adds	r3, r7, r1
 8005462:	187a      	adds	r2, r7, r1
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	3201      	adds	r2, #1
 8005468:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800546a:	000c      	movs	r4, r1
 800546c:	187b      	adds	r3, r7, r1
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	2101      	movs	r1, #1
 8005472:	0018      	movs	r0, r3
 8005474:	f000 faa0 	bl	80059b8 <unsigned_bitwise_modulo>
 8005478:	1e03      	subs	r3, r0, #0
 800547a:	d121      	bne.n	80054c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800547c:	193b      	adds	r3, r7, r4
 800547e:	193a      	adds	r2, r7, r4
 8005480:	8812      	ldrh	r2, [r2, #0]
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005486:	2316      	movs	r3, #22
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d108      	bne.n	80054a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005490:	2317      	movs	r3, #23
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	2100      	movs	r1, #0
 800549e:	5499      	strb	r1, [r3, r2]
 80054a0:	e150      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054a2:	2316      	movs	r3, #22
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d000      	beq.n	80054ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 80054ac:	e14a      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054ae:	2317      	movs	r3, #23
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]
 80054be:	e141      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80054c0:	2210      	movs	r2, #16
 80054c2:	18bb      	adds	r3, r7, r2
 80054c4:	18ba      	adds	r2, r7, r2
 80054c6:	8812      	ldrh	r2, [r2, #0]
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80054cc:	2316      	movs	r3, #22
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054d6:	2317      	movs	r3, #23
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	2100      	movs	r1, #0
 80054e4:	5499      	strb	r1, [r3, r2]
 80054e6:	e12d      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054e8:	2316      	movs	r3, #22
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d000      	beq.n	80054f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 80054f2:	e127      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80054f4:	2317      	movs	r3, #23
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	2101      	movs	r1, #1
 8005502:	5499      	strb	r1, [r3, r2]
 8005504:	e11e      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005506:	230c      	movs	r3, #12
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	2108      	movs	r1, #8
 800550e:	0018      	movs	r0, r3
 8005510:	f000 fa52 	bl	80059b8 <unsigned_bitwise_modulo>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d152      	bne.n	80055be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005518:	2212      	movs	r2, #18
 800551a:	18bb      	adds	r3, r7, r2
 800551c:	18ba      	adds	r2, r7, r2
 800551e:	8812      	ldrh	r2, [r2, #0]
 8005520:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005522:	2410      	movs	r4, #16
 8005524:	193b      	adds	r3, r7, r4
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	2101      	movs	r1, #1
 800552a:	0018      	movs	r0, r3
 800552c:	f000 fa44 	bl	80059b8 <unsigned_bitwise_modulo>
 8005530:	1e03      	subs	r3, r0, #0
 8005532:	d121      	bne.n	8005578 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005534:	193b      	adds	r3, r7, r4
 8005536:	193a      	adds	r2, r7, r4
 8005538:	8812      	ldrh	r2, [r2, #0]
 800553a:	0852      	lsrs	r2, r2, #1
 800553c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800553e:	2316      	movs	r3, #22
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005548:	2317      	movs	r3, #23
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	2100      	movs	r1, #0
 8005556:	5499      	strb	r1, [r3, r2]
 8005558:	e0f4      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800555a:	2316      	movs	r3, #22
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d000      	beq.n	8005566 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005564:	e0ee      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005566:	2317      	movs	r3, #23
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	2101      	movs	r1, #1
 8005574:	5499      	strb	r1, [r3, r2]
 8005576:	e0e5      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005578:	2210      	movs	r2, #16
 800557a:	18bb      	adds	r3, r7, r2
 800557c:	18ba      	adds	r2, r7, r2
 800557e:	8812      	ldrh	r2, [r2, #0]
 8005580:	0852      	lsrs	r2, r2, #1
 8005582:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005584:	2316      	movs	r3, #22
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d108      	bne.n	80055a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800558e:	2317      	movs	r3, #23
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]
 800559e:	e0d1      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80055a0:	2316      	movs	r3, #22
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d000      	beq.n	80055ac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 80055aa:	e0cb      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80055ac:	2317      	movs	r3, #23
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	2101      	movs	r1, #1
 80055ba:	5499      	strb	r1, [r3, r2]
 80055bc:	e0c2      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80055be:	230c      	movs	r3, #12
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	2108      	movs	r1, #8
 80055c6:	0018      	movs	r0, r3
 80055c8:	f000 f9f6 	bl	80059b8 <unsigned_bitwise_modulo>
 80055cc:	0003      	movs	r3, r0
 80055ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80055d0:	d856      	bhi.n	8005680 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80055d2:	2212      	movs	r2, #18
 80055d4:	18bb      	adds	r3, r7, r2
 80055d6:	18ba      	adds	r2, r7, r2
 80055d8:	8812      	ldrh	r2, [r2, #0]
 80055da:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80055dc:	2410      	movs	r4, #16
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	193a      	adds	r2, r7, r4
 80055e2:	8812      	ldrh	r2, [r2, #0]
 80055e4:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	2101      	movs	r1, #1
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 f9e3 	bl	80059b8 <unsigned_bitwise_modulo>
 80055f2:	1e03      	subs	r3, r0, #0
 80055f4:	d121      	bne.n	800563a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80055f6:	193b      	adds	r3, r7, r4
 80055f8:	193a      	adds	r2, r7, r4
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	0852      	lsrs	r2, r2, #1
 80055fe:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005600:	2316      	movs	r3, #22
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800560a:	2317      	movs	r3, #23
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	2100      	movs	r1, #0
 8005618:	5499      	strb	r1, [r3, r2]
 800561a:	e093      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800561c:	2316      	movs	r3, #22
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d000      	beq.n	8005628 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005626:	e08d      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005628:	2317      	movs	r3, #23
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	2101      	movs	r1, #1
 8005636:	5499      	strb	r1, [r3, r2]
 8005638:	e084      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800563a:	2210      	movs	r2, #16
 800563c:	18bb      	adds	r3, r7, r2
 800563e:	18ba      	adds	r2, r7, r2
 8005640:	8812      	ldrh	r2, [r2, #0]
 8005642:	0852      	lsrs	r2, r2, #1
 8005644:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005646:	2316      	movs	r3, #22
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d108      	bne.n	8005662 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005650:	2317      	movs	r3, #23
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	2100      	movs	r1, #0
 800565e:	5499      	strb	r1, [r3, r2]
 8005660:	e070      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005662:	2316      	movs	r3, #22
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d000      	beq.n	800566e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 800566c:	e06a      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800566e:	2317      	movs	r3, #23
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	e061      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005680:	230c      	movs	r3, #12
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	2108      	movs	r1, #8
 8005688:	0018      	movs	r0, r3
 800568a:	f000 f995 	bl	80059b8 <unsigned_bitwise_modulo>
 800568e:	0003      	movs	r3, r0
 8005690:	2b80      	cmp	r3, #128	@ 0x80
 8005692:	d957      	bls.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005694:	2212      	movs	r2, #18
 8005696:	18bb      	adds	r3, r7, r2
 8005698:	18ba      	adds	r2, r7, r2
 800569a:	8812      	ldrh	r2, [r2, #0]
 800569c:	3a01      	subs	r2, #1
 800569e:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80056a0:	2410      	movs	r4, #16
 80056a2:	193b      	adds	r3, r7, r4
 80056a4:	193a      	adds	r2, r7, r4
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	3201      	adds	r2, #1
 80056aa:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80056ac:	193b      	adds	r3, r7, r4
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 f980 	bl	80059b8 <unsigned_bitwise_modulo>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	d120      	bne.n	80056fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80056bc:	193b      	adds	r3, r7, r4
 80056be:	193a      	adds	r2, r7, r4
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80056c6:	2316      	movs	r3, #22
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80056d0:	2317      	movs	r3, #23
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	2100      	movs	r1, #0
 80056de:	5499      	strb	r1, [r3, r2]
 80056e0:	e030      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80056e2:	2316      	movs	r3, #22
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d12b      	bne.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80056ec:	2317      	movs	r3, #23
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	2101      	movs	r1, #1
 80056fa:	5499      	strb	r1, [r3, r2]
 80056fc:	e022      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80056fe:	2210      	movs	r2, #16
 8005700:	18bb      	adds	r3, r7, r2
 8005702:	18ba      	adds	r2, r7, r2
 8005704:	8812      	ldrh	r2, [r2, #0]
 8005706:	0852      	lsrs	r2, r2, #1
 8005708:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800570a:	2316      	movs	r3, #22
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d108      	bne.n	8005726 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005714:	2317      	movs	r3, #23
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	2100      	movs	r1, #0
 8005722:	5499      	strb	r1, [r3, r2]
 8005724:	e00e      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005726:	2316      	movs	r3, #22
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d109      	bne.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005730:	2317      	movs	r3, #23
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	2101      	movs	r1, #1
 800573e:	5499      	strb	r1, [r3, r2]
 8005740:	e000      	b.n	8005744 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005742:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8005744:	2316      	movs	r3, #22
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d152      	bne.n	80057f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 800574e:	2317      	movs	r3, #23
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005758:	2312      	movs	r3, #18
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	2280      	movs	r2, #128	@ 0x80
 8005760:	0052      	lsls	r2, r2, #1
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	829a      	strh	r2, [r3, #20]
 800576a:	e099      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 800576c:	2317      	movs	r3, #23
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d11b      	bne.n	80057ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	89db      	ldrh	r3, [r3, #14]
 800577a:	b29b      	uxth	r3, r3
 800577c:	2101      	movs	r1, #1
 800577e:	0018      	movs	r0, r3
 8005780:	f000 f91a 	bl	80059b8 <unsigned_bitwise_modulo>
 8005784:	1e03      	subs	r3, r0, #0
 8005786:	d109      	bne.n	800579c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005788:	2312      	movs	r3, #18
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	2280      	movs	r2, #128	@ 0x80
 8005790:	0052      	lsls	r2, r2, #1
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	829a      	strh	r2, [r3, #20]
 800579a:	e081      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 800579c:	2312      	movs	r3, #18
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	22ff      	movs	r2, #255	@ 0xff
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	829a      	strh	r2, [r3, #20]
 80057ac:	e078      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80057ae:	2317      	movs	r3, #23
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d000      	beq.n	80057ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 80057b8:	e072      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	89db      	ldrh	r3, [r3, #14]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2101      	movs	r1, #1
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 f8f8 	bl	80059b8 <unsigned_bitwise_modulo>
 80057c8:	1e03      	subs	r3, r0, #0
 80057ca:	d109      	bne.n	80057e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80057cc:	2312      	movs	r3, #18
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	2280      	movs	r2, #128	@ 0x80
 80057d4:	0052      	lsls	r2, r2, #1
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	829a      	strh	r2, [r3, #20]
 80057de:	e05f      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80057e0:	2312      	movs	r3, #18
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	2202      	movs	r2, #2
 80057e8:	32ff      	adds	r2, #255	@ 0xff
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	829a      	strh	r2, [r3, #20]
 80057f2:	e055      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80057f4:	2316      	movs	r3, #22
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d150      	bne.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80057fe:	2317      	movs	r3, #23
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005808:	2310      	movs	r3, #16
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	2280      	movs	r2, #128	@ 0x80
 8005810:	0052      	lsls	r2, r2, #1
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	829a      	strh	r2, [r3, #20]
 800581a:	e041      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 800581c:	2317      	movs	r3, #23
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d11b      	bne.n	800585e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	89db      	ldrh	r3, [r3, #14]
 800582a:	b29b      	uxth	r3, r3
 800582c:	2101      	movs	r1, #1
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f8c2 	bl	80059b8 <unsigned_bitwise_modulo>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d109      	bne.n	800584c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005838:	2310      	movs	r3, #16
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	2280      	movs	r2, #128	@ 0x80
 8005840:	0052      	lsls	r2, r2, #1
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	829a      	strh	r2, [r3, #20]
 800584a:	e029      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 800584c:	2310      	movs	r3, #16
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	22ff      	movs	r2, #255	@ 0xff
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	829a      	strh	r2, [r3, #20]
 800585c:	e020      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 800585e:	2317      	movs	r3, #23
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d11b      	bne.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	89db      	ldrh	r3, [r3, #14]
 800586c:	b29b      	uxth	r3, r3
 800586e:	2101      	movs	r1, #1
 8005870:	0018      	movs	r0, r3
 8005872:	f000 f8a1 	bl	80059b8 <unsigned_bitwise_modulo>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d109      	bne.n	800588e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800587a:	2310      	movs	r3, #16
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	2280      	movs	r2, #128	@ 0x80
 8005882:	0052      	lsls	r2, r2, #1
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	829a      	strh	r2, [r3, #20]
 800588c:	e008      	b.n	80058a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 800588e:	2310      	movs	r3, #16
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	2202      	movs	r2, #2
 8005896:	32ff      	adds	r2, #255	@ 0xff
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7ff fbf4 	bl	8005090 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8a9b      	ldrh	r3, [r3, #20]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2280      	movs	r2, #128	@ 0x80
 80058b0:	0052      	lsls	r2, r2, #1
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8adb      	ldrh	r3, [r3, #22]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8b9b      	ldrh	r3, [r3, #28]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	83da      	strh	r2, [r3, #30]

    return 1;
 80058d6:	2301      	movs	r3, #1
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b007      	add	sp, #28
 80058de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058e4:	46c0      	nop			@ (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80058ea:	b5b0      	push	{r4, r5, r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80058f4:	250f      	movs	r5, #15
 80058f6:	197c      	adds	r4, r7, r5
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f003 fd8c 	bl	800941c <HAL_TIM_OC_Start_IT>
 8005904:	0003      	movs	r3, r0
 8005906:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005908:	197b      	adds	r3, r7, r5
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <Start_OC_TIM+0x2a>

		Error_Handler();
 8005910:	f7fc fc6a 	bl	80021e8 <Error_Handler>
	}

	return ok;
 8005914:	230f      	movs	r3, #15
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	781b      	ldrb	r3, [r3, #0]
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b004      	add	sp, #16
 8005920:	bdb0      	pop	{r4, r5, r7, pc}

08005922 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005922:	b5b0      	push	{r4, r5, r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 800592c:	250f      	movs	r5, #15
 800592e:	197c      	adds	r4, r7, r5
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0011      	movs	r1, r2
 8005936:	0018      	movs	r0, r3
 8005938:	f003 fe94 	bl	8009664 <HAL_TIM_OC_Stop_IT>
 800593c:	0003      	movs	r3, r0
 800593e:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005940:	197b      	adds	r3, r7, r5
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <Stop_OC_TIM+0x2a>

		Error_Handler();
 8005948:	f7fc fc4e 	bl	80021e8 <Error_Handler>
	}

	return ok;
 800594c:	230f      	movs	r3, #15
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	781b      	ldrb	r3, [r3, #0]
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b004      	add	sp, #16
 8005958:	bdb0      	pop	{r4, r5, r7, pc}

0800595a <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	0002      	movs	r2, r0
 8005962:	1dbb      	adds	r3, r7, #6
 8005964:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8005966:	230e      	movs	r3, #14
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2202      	movs	r2, #2
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	e014      	b.n	800599a <isPrime+0x40>
        if (x % d == 0)
 8005970:	1dba      	adds	r2, r7, #6
 8005972:	230e      	movs	r3, #14
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	8812      	ldrh	r2, [r2, #0]
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	0019      	movs	r1, r3
 800597c:	0010      	movs	r0, r2
 800597e:	f7fa fc47 	bl	8000210 <__aeabi_uidivmod>
 8005982:	000b      	movs	r3, r1
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <isPrime+0x34>
            return NO;
 800598a:	2300      	movs	r3, #0
 800598c:	e010      	b.n	80059b0 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 800598e:	210e      	movs	r1, #14
 8005990:	187b      	adds	r3, r7, r1
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	187b      	adds	r3, r7, r1
 8005996:	3201      	adds	r2, #1
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	220e      	movs	r2, #14
 800599c:	18bb      	adds	r3, r7, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	18ba      	adds	r2, r7, r2
 80059a2:	8812      	ldrh	r2, [r2, #0]
 80059a4:	435a      	muls	r2, r3
 80059a6:	1dbb      	adds	r3, r7, #6
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	dde0      	ble.n	8005970 <isPrime+0x16>
    }
    return YES;
 80059ae:	2301      	movs	r3, #1
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b004      	add	sp, #16
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	000a      	movs	r2, r1
 80059c2:	1cfb      	adds	r3, r7, #3
 80059c4:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80059c6:	1cfb      	adds	r3, r7, #3
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	409a      	lsls	r2, r3
 80059ce:	0013      	movs	r3, r2
 80059d0:	3b01      	subs	r3, #1
 80059d2:	001a      	movs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4013      	ands	r3, r2
}
 80059d8:	0018      	movs	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	b002      	add	sp, #8
 80059de:	bd80      	pop	{r7, pc}

080059e0 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80059e4:	b662      	cpsie	i
}
 80059e6:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80059e8:	2301      	movs	r3, #1
}
 80059ea:	0018      	movs	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	000a      	movs	r2, r1
 80059fa:	1cbb      	adds	r3, r7, #2
 80059fc:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	1cba      	adds	r2, r7, #2
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	4013      	ands	r3, r2
 8005a08:	d001      	beq.n	8005a0e <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8005a0e:	2300      	movs	r3, #0
    }
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	000a      	movs	r2, r1
 8005a22:	1cbb      	adds	r3, r7, #2
 8005a24:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	1cbb      	adds	r3, r7, #2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	46c0      	nop			@ (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	000a      	movs	r2, r1
 8005a46:	1cbb      	adds	r3, r7, #2
 8005a48:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	1cba      	adds	r2, r7, #2
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	43d2      	mvns	r2, r2
 8005a54:	401a      	ands	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b002      	add	sp, #8
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a64:	480d      	ldr	r0, [pc, #52]	@ (8005a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a68:	f7ff ff3a 	bl	80058e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a6c:	480c      	ldr	r0, [pc, #48]	@ (8005aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a6e:	490d      	ldr	r1, [pc, #52]	@ (8005aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a70:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa8 <LoopForever+0xe>)
  movs r3, #0
 8005a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a74:	e002      	b.n	8005a7c <LoopCopyDataInit>

08005a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7a:	3304      	adds	r3, #4

08005a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a80:	d3f9      	bcc.n	8005a76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a82:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a84:	4c0a      	ldr	r4, [pc, #40]	@ (8005ab0 <LoopForever+0x16>)
  movs r3, #0
 8005a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a88:	e001      	b.n	8005a8e <LoopFillZerobss>

08005a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a8c:	3204      	adds	r2, #4

08005a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a90:	d3fb      	bcc.n	8005a8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005a92:	f007 f9ed 	bl	800ce70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005a96:	f7fe faf1 	bl	800407c <main>

08005a9a <LoopForever>:

LoopForever:
  b LoopForever
 8005a9a:	e7fe      	b.n	8005a9a <LoopForever>
  ldr   r0, =_estack
 8005a9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa4:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 8005aa8:	0800d964 	.word	0x0800d964
  ldr r2, =_sbss
 8005aac:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
 8005ab0:	20000cd4 	.word	0x20000cd4

08005ab4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ab4:	e7fe      	b.n	8005ab4 <ADC1_IRQHandler>
	...

08005ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005abe:	1dfb      	adds	r3, r7, #7
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <HAL_Init+0x3c>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <HAL_Init+0x3c>)
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	0049      	lsls	r1, r1, #1
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f000 f810 	bl	8005af8 <HAL_InitTick>
 8005ad8:	1e03      	subs	r3, r0, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005adc:	1dfb      	adds	r3, r7, #7
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e001      	b.n	8005ae8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005ae4:	f7fe fef8 	bl	80048d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ae8:	1dfb      	adds	r3, r7, #7
 8005aea:	781b      	ldrb	r3, [r3, #0]
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40022000 	.word	0x40022000

08005af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b00:	230f      	movs	r3, #15
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <HAL_InitTick+0x88>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02b      	beq.n	8005b68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005b10:	4b1c      	ldr	r3, [pc, #112]	@ (8005b84 <HAL_InitTick+0x8c>)
 8005b12:	681c      	ldr	r4, [r3, #0]
 8005b14:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <HAL_InitTick+0x88>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	0019      	movs	r1, r3
 8005b1a:	23fa      	movs	r3, #250	@ 0xfa
 8005b1c:	0098      	lsls	r0, r3, #2
 8005b1e:	f7fa faf1 	bl	8000104 <__udivsi3>
 8005b22:	0003      	movs	r3, r0
 8005b24:	0019      	movs	r1, r3
 8005b26:	0020      	movs	r0, r4
 8005b28:	f7fa faec 	bl	8000104 <__udivsi3>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f001 fb75 	bl	800721e <HAL_SYSTICK_Config>
 8005b34:	1e03      	subs	r3, r0, #0
 8005b36:	d112      	bne.n	8005b5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d80a      	bhi.n	8005b54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	2301      	movs	r3, #1
 8005b42:	425b      	negs	r3, r3
 8005b44:	2200      	movs	r2, #0
 8005b46:	0018      	movs	r0, r3
 8005b48:	f001 fb34 	bl	80071b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <HAL_InitTick+0x90>)
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e00d      	b.n	8005b70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005b54:	230f      	movs	r3, #15
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e008      	b.n	8005b70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b5e:	230f      	movs	r3, #15
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e003      	b.n	8005b70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b68:	230f      	movs	r3, #15
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005b70:	230f      	movs	r3, #15
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	781b      	ldrb	r3, [r3, #0]
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b005      	add	sp, #20
 8005b7c:	bd90      	pop	{r4, r7, pc}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	20000448 	.word	0x20000448
 8005b84:	20000440 	.word	0x20000440
 8005b88:	20000444 	.word	0x20000444

08005b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <HAL_IncTick+0x1c>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	001a      	movs	r2, r3
 8005b96:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <HAL_IncTick+0x20>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	18d2      	adds	r2, r2, r3
 8005b9c:	4b03      	ldr	r3, [pc, #12]	@ (8005bac <HAL_IncTick+0x20>)
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	46c0      	nop			@ (mov r8, r8)
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	20000448 	.word	0x20000448
 8005bac:	20000cd0 	.word	0x20000cd0

08005bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8005bb4:	4b02      	ldr	r3, [pc, #8]	@ (8005bc0 <HAL_GetTick+0x10>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	20000cd0 	.word	0x20000cd0

08005bc4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a05      	ldr	r2, [pc, #20]	@ (8005be8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	46c0      	nop			@ (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b002      	add	sp, #8
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	fe3fffff 	.word	0xfe3fffff

08005bec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	23e0      	movs	r3, #224	@ 0xe0
 8005bfa:	045b      	lsls	r3, r3, #17
 8005bfc:	4013      	ands	r3, r2
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	2104      	movs	r1, #4
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	2107      	movs	r1, #7
 8005c1e:	4091      	lsls	r1, r2
 8005c20:	000a      	movs	r2, r1
 8005c22:	43d2      	mvns	r2, r2
 8005c24:	401a      	ands	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2104      	movs	r1, #4
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4099      	lsls	r1, r3
 8005c30:	000b      	movs	r3, r1
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005c38:	46c0      	nop			@ (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b004      	add	sp, #16
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	2104      	movs	r1, #4
 8005c52:	400a      	ands	r2, r1
 8005c54:	2107      	movs	r1, #7
 8005c56:	4091      	lsls	r1, r2
 8005c58:	000a      	movs	r2, r1
 8005c5a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2104      	movs	r1, #4
 8005c60:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005c62:	40da      	lsrs	r2, r3
 8005c64:	0013      	movs	r3, r2
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	23c0      	movs	r3, #192	@ 0xc0
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d101      	bne.n	8005c86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	211f      	movs	r1, #31
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	210f      	movs	r1, #15
 8005ca8:	4091      	lsls	r1, r2
 8005caa:	000a      	movs	r2, r1
 8005cac:	43d2      	mvns	r2, r2
 8005cae:	401a      	ands	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	0e9b      	lsrs	r3, r3, #26
 8005cb4:	210f      	movs	r1, #15
 8005cb6:	4019      	ands	r1, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	201f      	movs	r0, #31
 8005cbc:	4003      	ands	r3, r0
 8005cbe:	4099      	lsls	r1, r3
 8005cc0:	000b      	movs	r3, r1
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b004      	add	sp, #16
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	035b      	lsls	r3, r3, #13
 8005ce2:	0b5b      	lsrs	r3, r3, #13
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	0352      	lsls	r2, r2, #13
 8005d04:	0b52      	lsrs	r2, r2, #13
 8005d06:	43d2      	mvns	r2, r2
 8005d08:	401a      	ands	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b002      	add	sp, #8
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	0212      	lsls	r2, r2, #8
 8005d2c:	43d2      	mvns	r2, r2
 8005d2e:	401a      	ands	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	400b      	ands	r3, r1
 8005d38:	4904      	ldr	r1, [pc, #16]	@ (8005d4c <LL_ADC_SetChannelSamplingTime+0x34>)
 8005d3a:	400b      	ands	r3, r1
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b004      	add	sp, #16
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	07ffff00 	.word	0x07ffff00

08005d50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	4a05      	ldr	r2, [pc, #20]	@ (8005d74 <LL_ADC_EnableInternalRegulator+0x24>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2280      	movs	r2, #128	@ 0x80
 8005d62:	0552      	lsls	r2, r2, #21
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b002      	add	sp, #8
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			@ (mov r8, r8)
 8005d74:	6fffffe8 	.word	0x6fffffe8

08005d78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	055b      	lsls	r3, r3, #21
 8005d88:	401a      	ands	r2, r3
 8005d8a:	2380      	movs	r3, #128	@ 0x80
 8005d8c:	055b      	lsls	r3, r3, #21
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d101      	bne.n	8005d96 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <LL_ADC_Enable+0x20>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	2201      	movs	r2, #1
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	7fffffe8 	.word	0x7fffffe8

08005dc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <LL_ADC_Disable+0x20>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005ddc:	46c0      	nop			@ (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b002      	add	sp, #8
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	7fffffe8 	.word	0x7fffffe8

08005de8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2201      	movs	r2, #1
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <LL_ADC_IsEnabled+0x18>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <LL_ADC_IsEnabled+0x1a>
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2202      	movs	r2, #2
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d101      	bne.n	8005e22 <LL_ADC_IsDisableOngoing+0x18>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <LL_ADC_IsDisableOngoing+0x1a>
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4a04      	ldr	r2, [pc, #16]	@ (8005e4c <LL_ADC_REG_StartConversion+0x20>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e44:	46c0      	nop			@ (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	7fffffe8 	.word	0x7fffffe8

08005e50 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	@ (8005e70 <LL_ADC_REG_StopConversion+0x20>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2210      	movs	r2, #16
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005e68:	46c0      	nop			@ (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	7fffffe8 	.word	0x7fffffe8

08005e74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2204      	movs	r2, #4
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d101      	bne.n	8005e8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	0018      	movs	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ea0:	231f      	movs	r3, #31
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e19f      	b.n	80061fe <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d12a      	bne.n	8005f1c <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4acf      	ldr	r2, [pc, #828]	@ (8006208 <HAL_ADC_Init+0x370>)
 8005eca:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4acf      	ldr	r2, [pc, #828]	@ (800620c <HAL_ADC_Init+0x374>)
 8005ed0:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4ace      	ldr	r2, [pc, #824]	@ (8006210 <HAL_ADC_Init+0x378>)
 8005ed6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4ace      	ldr	r2, [pc, #824]	@ (8006214 <HAL_ADC_Init+0x37c>)
 8005edc:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4acd      	ldr	r2, [pc, #820]	@ (8006218 <HAL_ADC_Init+0x380>)
 8005ee2:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4acd      	ldr	r2, [pc, #820]	@ (800621c <HAL_ADC_Init+0x384>)
 8005ee8:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4acc      	ldr	r2, [pc, #816]	@ (8006220 <HAL_ADC_Init+0x388>)
 8005eee:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2280      	movs	r2, #128	@ 0x80
 8005ef4:	589b      	ldr	r3, [r3, r2]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2180      	movs	r1, #128	@ 0x80
 8005efe:	4ac9      	ldr	r2, [pc, #804]	@ (8006224 <HAL_ADC_Init+0x38c>)
 8005f00:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2280      	movs	r2, #128	@ 0x80
 8005f06:	589b      	ldr	r3, [r3, r2]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	0010      	movs	r0, r2
 8005f0c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2254      	movs	r2, #84	@ 0x54
 8005f18:	2100      	movs	r1, #0
 8005f1a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff ff29 	bl	8005d78 <LL_ADC_IsInternalRegulatorEnabled>
 8005f26:	1e03      	subs	r3, r0, #0
 8005f28:	d115      	bne.n	8005f56 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7ff ff0e 	bl	8005d50 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f34:	4bbc      	ldr	r3, [pc, #752]	@ (8006228 <HAL_ADC_Init+0x390>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	49bc      	ldr	r1, [pc, #752]	@ (800622c <HAL_ADC_Init+0x394>)
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fa f8e2 	bl	8000104 <__udivsi3>
 8005f40:	0003      	movs	r3, r0
 8005f42:	3301      	adds	r3, #1
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005f48:	e002      	b.n	8005f50 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f9      	bne.n	8005f4a <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f7ff ff0c 	bl	8005d78 <LL_ADC_IsInternalRegulatorEnabled>
 8005f60:	1e03      	subs	r3, r0, #0
 8005f62:	d10f      	bne.n	8005f84 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f68:	2210      	movs	r2, #16
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f74:	2201      	movs	r2, #1
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f7c:	231f      	movs	r3, #31
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7ff ff73 	bl	8005e74 <LL_ADC_REG_IsConversionOngoing>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	2210      	movs	r2, #16
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d000      	beq.n	8005f9e <HAL_ADC_Init+0x106>
 8005f9c:	e122      	b.n	80061e4 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d000      	beq.n	8005fa6 <HAL_ADC_Init+0x10e>
 8005fa4:	e11e      	b.n	80061e4 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005faa:	4aa1      	ldr	r2, [pc, #644]	@ (8006230 <HAL_ADC_Init+0x398>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	2202      	movs	r2, #2
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f7ff ff14 	bl	8005de8 <LL_ADC_IsEnabled>
 8005fc0:	1e03      	subs	r3, r0, #0
 8005fc2:	d000      	beq.n	8005fc6 <HAL_ADC_Init+0x12e>
 8005fc4:	e0ad      	b.n	8006122 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	7e1b      	ldrb	r3, [r3, #24]
 8005fce:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005fd0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	7e5b      	ldrb	r3, [r3, #25]
 8005fd6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005fd8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7e9b      	ldrb	r3, [r3, #26]
 8005fde:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005fe0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_ADC_Init+0x158>
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	015b      	lsls	r3, r3, #5
 8005fee:	e000      	b.n	8005ff2 <HAL_ADC_Init+0x15a>
 8005ff0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005ff2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005ff8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da04      	bge.n	800600c <HAL_ADC_Init+0x174>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	e001      	b.n	8006010 <HAL_ADC_Init+0x178>
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006010:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	212c      	movs	r1, #44	@ 0x2c
 8006016:	5c5b      	ldrb	r3, [r3, r1]
 8006018:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800601a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4313      	orrs	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d115      	bne.n	8006058 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	7e9b      	ldrb	r3, [r3, #26]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2280      	movs	r2, #128	@ 0x80
 8006038:	0252      	lsls	r2, r2, #9
 800603a:	4313      	orrs	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e00b      	b.n	8006058 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006044:	2220      	movs	r2, #32
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	2201      	movs	r2, #1
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006064:	23e0      	movs	r3, #224	@ 0xe0
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800606e:	4313      	orrs	r3, r2
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4a6d      	ldr	r2, [pc, #436]	@ (8006234 <HAL_ADC_Init+0x39c>)
 800607e:	4013      	ands	r3, r2
 8006080:	0019      	movs	r1, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	430a      	orrs	r2, r1
 800608a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	0f9b      	lsrs	r3, r3, #30
 8006092:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006098:	4313      	orrs	r3, r2
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	223c      	movs	r2, #60	@ 0x3c
 80060a4:	5c9b      	ldrb	r3, [r3, r2]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d111      	bne.n	80060ce <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	0f9b      	lsrs	r3, r3, #30
 80060b0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80060b6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80060bc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80060c2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	2201      	movs	r2, #1
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a58      	ldr	r2, [pc, #352]	@ (8006238 <HAL_ADC_Init+0x3a0>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	0019      	movs	r1, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	23c0      	movs	r3, #192	@ 0xc0
 80060ea:	061b      	lsls	r3, r3, #24
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d018      	beq.n	8006122 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	05db      	lsls	r3, r3, #23
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d012      	beq.n	8006122 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006100:	2380      	movs	r3, #128	@ 0x80
 8006102:	061b      	lsls	r3, r3, #24
 8006104:	429a      	cmp	r2, r3
 8006106:	d00c      	beq.n	8006122 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006108:	4b4c      	ldr	r3, [pc, #304]	@ (800623c <HAL_ADC_Init+0x3a4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a4c      	ldr	r2, [pc, #304]	@ (8006240 <HAL_ADC_Init+0x3a8>)
 800610e:	4013      	ands	r3, r2
 8006110:	0019      	movs	r1, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	23f0      	movs	r3, #240	@ 0xf0
 8006118:	039b      	lsls	r3, r3, #14
 800611a:	401a      	ands	r2, r3
 800611c:	4b47      	ldr	r3, [pc, #284]	@ (800623c <HAL_ADC_Init+0x3a4>)
 800611e:	430a      	orrs	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612a:	001a      	movs	r2, r3
 800612c:	2100      	movs	r1, #0
 800612e:	f7ff fd6a 	bl	8005c06 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613a:	4942      	ldr	r1, [pc, #264]	@ (8006244 <HAL_ADC_Init+0x3ac>)
 800613c:	001a      	movs	r2, r3
 800613e:	f7ff fd62 	bl	8005c06 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2110      	movs	r1, #16
 8006156:	4249      	negs	r1, r1
 8006158:	430a      	orrs	r2, r1
 800615a:	629a      	str	r2, [r3, #40]	@ 0x28
 800615c:	e018      	b.n	8006190 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	2380      	movs	r3, #128	@ 0x80
 8006164:	039b      	lsls	r3, r3, #14
 8006166:	429a      	cmp	r2, r3
 8006168:	d112      	bne.n	8006190 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	3b01      	subs	r3, #1
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	221c      	movs	r2, #28
 800617a:	4013      	ands	r3, r2
 800617c:	2210      	movs	r2, #16
 800617e:	4252      	negs	r2, r2
 8006180:	409a      	lsls	r2, r3
 8006182:	0011      	movs	r1, r2
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2100      	movs	r1, #0
 8006196:	0018      	movs	r0, r3
 8006198:	f7ff fd52 	bl	8005c40 <LL_ADC_GetSamplingTimeCommonChannels>
 800619c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d10b      	bne.n	80061be <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b0:	2203      	movs	r2, #3
 80061b2:	4393      	bics	r3, r2
 80061b4:	2201      	movs	r2, #1
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80061bc:	e01c      	b.n	80061f8 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c2:	2212      	movs	r2, #18
 80061c4:	4393      	bics	r3, r2
 80061c6:	2210      	movs	r2, #16
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d2:	2201      	movs	r2, #1
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80061da:	231f      	movs	r3, #31
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80061e2:	e009      	b.n	80061f8 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e8:	2210      	movs	r2, #16
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80061f0:	231f      	movs	r3, #31
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80061f8:	231f      	movs	r3, #31
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	781b      	ldrb	r3, [r3, #0]
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b008      	add	sp, #32
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	08006561 	.word	0x08006561
 800620c:	08006571 	.word	0x08006571
 8006210:	08006581 	.word	0x08006581
 8006214:	08006591 	.word	0x08006591
 8006218:	08006fe9 	.word	0x08006fe9
 800621c:	08006ff9 	.word	0x08006ff9
 8006220:	08007009 	.word	0x08007009
 8006224:	08004921 	.word	0x08004921
 8006228:	20000440 	.word	0x20000440
 800622c:	00030d40 	.word	0x00030d40
 8006230:	fffffefd 	.word	0xfffffefd
 8006234:	ffde0201 	.word	0xffde0201
 8006238:	1ffffc02 	.word	0x1ffffc02
 800623c:	40012708 	.word	0x40012708
 8006240:	ffc3ffff 	.word	0xffc3ffff
 8006244:	07ffff04 	.word	0x07ffff04

08006248 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	230b      	movs	r3, #11
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	1c0a      	adds	r2, r1, #0
 8006258:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2317      	movs	r3, #23
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626c:	2210      	movs	r2, #16
 800626e:	431a      	orrs	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e06d      	b.n	8006354 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627c:	2201      	movs	r2, #1
 800627e:	4013      	ands	r3, r2
 8006280:	d03a      	beq.n	80062f8 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8006282:	230b      	movs	r3, #11
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b0a      	cmp	r3, #10
 800628a:	d82a      	bhi.n	80062e2 <HAL_ADC_RegisterCallback+0x9a>
 800628c:	009a      	lsls	r2, r3, #2
 800628e:	4b33      	ldr	r3, [pc, #204]	@ (800635c <HAL_ADC_RegisterCallback+0x114>)
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800629c:	e057      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80062a4:	e053      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80062ac:	e04f      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80062b4:	e04b      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80062bc:	e047      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80062c4:	e043      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80062cc:	e03f      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2180      	movs	r1, #128	@ 0x80
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	505a      	str	r2, [r3, r1]
        break;
 80062d6:	e03a      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2184      	movs	r1, #132	@ 0x84
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	505a      	str	r2, [r3, r1]
        break;
 80062e0:	e035      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e6:	2210      	movs	r2, #16
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80062ee:	2317      	movs	r3, #23
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
        break;
 80062f6:	e02a      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d11c      	bne.n	800633a <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006300:	230b      	movs	r3, #11
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b09      	cmp	r3, #9
 8006308:	d002      	beq.n	8006310 <HAL_ADC_RegisterCallback+0xc8>
 800630a:	2b0a      	cmp	r3, #10
 800630c:	d005      	beq.n	800631a <HAL_ADC_RegisterCallback+0xd2>
 800630e:	e009      	b.n	8006324 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2180      	movs	r1, #128	@ 0x80
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	505a      	str	r2, [r3, r1]
        break;
 8006318:	e019      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2184      	movs	r1, #132	@ 0x84
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	505a      	str	r2, [r3, r1]
        break;
 8006322:	e014      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006328:	2210      	movs	r2, #16
 800632a:	431a      	orrs	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006330:	2317      	movs	r3, #23
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
        break;
 8006338:	e009      	b.n	800634e <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	2210      	movs	r2, #16
 8006340:	431a      	orrs	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006346:	2317      	movs	r3, #23
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800634e:	2317      	movs	r3, #23
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	781b      	ldrb	r3, [r3, #0]
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bd80      	pop	{r7, pc}
 800635c:	0800d768 	.word	0x0800d768

08006360 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006360:	b5b0      	push	{r4, r5, r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff fd7f 	bl	8005e74 <LL_ADC_REG_IsConversionOngoing>
 8006376:	1e03      	subs	r3, r0, #0
 8006378:	d16c      	bne.n	8006454 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2254      	movs	r2, #84	@ 0x54
 800637e:	5c9b      	ldrb	r3, [r3, r2]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_ADC_Start_DMA+0x28>
 8006384:	2302      	movs	r3, #2
 8006386:	e06c      	b.n	8006462 <HAL_ADC_Start_DMA+0x102>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2254      	movs	r2, #84	@ 0x54
 800638c:	2101      	movs	r1, #1
 800638e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	4013      	ands	r3, r2
 800639a:	d113      	bne.n	80063c4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7ff fd21 	bl	8005de8 <LL_ADC_IsEnabled>
 80063a6:	1e03      	subs	r3, r0, #0
 80063a8:	d004      	beq.n	80063b4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7ff fd08 	bl	8005dc4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2101      	movs	r1, #1
 80063c0:	430a      	orrs	r2, r1
 80063c2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80063c4:	2517      	movs	r5, #23
 80063c6:	197c      	adds	r4, r7, r5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0018      	movs	r0, r3
 80063cc:	f000 fb02 	bl	80069d4 <ADC_Enable>
 80063d0:	0003      	movs	r3, r0
 80063d2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80063d4:	002c      	movs	r4, r5
 80063d6:	193b      	adds	r3, r7, r4
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d13e      	bne.n	800645c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e2:	4a22      	ldr	r2, [pc, #136]	@ (800646c <HAL_ADC_Start_DMA+0x10c>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	2280      	movs	r2, #128	@ 0x80
 80063e8:	0052      	lsls	r2, r2, #1
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006470 <HAL_ADC_Start_DMA+0x110>)
 80063fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006402:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <HAL_ADC_Start_DMA+0x114>)
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640a:	4a1b      	ldr	r2, [pc, #108]	@ (8006478 <HAL_ADC_Start_DMA+0x118>)
 800640c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	221c      	movs	r2, #28
 8006414:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2254      	movs	r2, #84	@ 0x54
 800641a:	2100      	movs	r1, #0
 800641c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2110      	movs	r1, #16
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3340      	adds	r3, #64	@ 0x40
 8006438:	0019      	movs	r1, r3
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	193c      	adds	r4, r7, r4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f000 ff84 	bl	800734c <HAL_DMA_Start_IT>
 8006444:	0003      	movs	r3, r0
 8006446:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	0018      	movs	r0, r3
 800644e:	f7ff fced 	bl	8005e2c <LL_ADC_REG_StartConversion>
 8006452:	e003      	b.n	800645c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006454:	2317      	movs	r3, #23
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	2202      	movs	r2, #2
 800645a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800645c:	2317      	movs	r3, #23
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	781b      	ldrb	r3, [r3, #0]
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b006      	add	sp, #24
 8006468:	bdb0      	pop	{r4, r5, r7, pc}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	fffff0fe 	.word	0xfffff0fe
 8006470:	08006b9d 	.word	0x08006b9d
 8006474:	08006c69 	.word	0x08006c69
 8006478:	08006c89 	.word	0x08006c89

0800647c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800647c:	b5b0      	push	{r4, r5, r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2254      	movs	r2, #84	@ 0x54
 8006488:	5c9b      	ldrb	r3, [r3, r2]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_ADC_Stop_DMA+0x16>
 800648e:	2302      	movs	r3, #2
 8006490:	e05f      	b.n	8006552 <HAL_ADC_Stop_DMA+0xd6>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2254      	movs	r2, #84	@ 0x54
 8006496:	2101      	movs	r1, #1
 8006498:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800649a:	250f      	movs	r5, #15
 800649c:	197c      	adds	r4, r7, r5
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 fa55 	bl	8006950 <ADC_ConversionStop>
 80064a6:	0003      	movs	r3, r0
 80064a8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80064aa:	0029      	movs	r1, r5
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d147      	bne.n	8006544 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	2225      	movs	r2, #37	@ 0x25
 80064ba:	5c9b      	ldrb	r3, [r3, r2]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d112      	bne.n	80064e8 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c6:	000d      	movs	r5, r1
 80064c8:	187c      	adds	r4, r7, r1
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 ffc4 	bl	8007458 <HAL_DMA_Abort>
 80064d0:	0003      	movs	r3, r0
 80064d2:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80064d4:	197b      	adds	r3, r7, r5
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	2240      	movs	r2, #64	@ 0x40
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2110      	movs	r1, #16
 80064f4:	438a      	bics	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80064f8:	220f      	movs	r2, #15
 80064fa:	18bb      	adds	r3, r7, r2
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006502:	18bc      	adds	r4, r7, r2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	0018      	movs	r0, r3
 8006508:	f000 faea 	bl	8006ae0 <ADC_Disable>
 800650c:	0003      	movs	r3, r0
 800650e:	7023      	strb	r3, [r4, #0]
 8006510:	e003      	b.n	800651a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0018      	movs	r0, r3
 8006516:	f000 fae3 	bl	8006ae0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800651a:	230f      	movs	r3, #15
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006528:	4a0c      	ldr	r2, [pc, #48]	@ (800655c <HAL_ADC_Stop_DMA+0xe0>)
 800652a:	4013      	ands	r3, r2
 800652c:	2201      	movs	r2, #1
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2101      	movs	r1, #1
 8006540:	438a      	bics	r2, r1
 8006542:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2254      	movs	r2, #84	@ 0x54
 8006548:	2100      	movs	r1, #0
 800654a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800654c:	230f      	movs	r3, #15
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	781b      	ldrb	r3, [r3, #0]
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b004      	add	sp, #16
 8006558:	bdb0      	pop	{r4, r5, r7, pc}
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	fffffefe 	.word	0xfffffefe

08006560 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006568:	46c0      	nop			@ (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006578:	46c0      	nop			@ (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006588:	46c0      	nop			@ (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b002      	add	sp, #8
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065aa:	2317      	movs	r3, #23
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2254      	movs	r2, #84	@ 0x54
 80065ba:	5c9b      	ldrb	r3, [r3, r2]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x24>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e1c0      	b.n	8006946 <HAL_ADC_ConfigChannel+0x3a6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2254      	movs	r2, #84	@ 0x54
 80065c8:	2101      	movs	r1, #1
 80065ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff fc4f 	bl	8005e74 <LL_ADC_REG_IsConversionOngoing>
 80065d6:	1e03      	subs	r3, r0, #0
 80065d8:	d000      	beq.n	80065dc <HAL_ADC_ConfigChannel+0x3c>
 80065da:	e1a3      	b.n	8006924 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d100      	bne.n	80065e6 <HAL_ADC_ConfigChannel+0x46>
 80065e4:	e143      	b.n	800686e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	2380      	movs	r3, #128	@ 0x80
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d004      	beq.n	80065fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80065f6:	4ac1      	ldr	r2, [pc, #772]	@ (80068fc <HAL_ADC_ConfigChannel+0x35c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d108      	bne.n	800660e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	0019      	movs	r1, r3
 8006606:	0010      	movs	r0, r2
 8006608:	f7ff fb62 	bl	8005cd0 <LL_ADC_REG_SetSequencerChAdd>
 800660c:	e0c9      	b.n	80067a2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	211f      	movs	r1, #31
 8006618:	400b      	ands	r3, r1
 800661a:	210f      	movs	r1, #15
 800661c:	4099      	lsls	r1, r3
 800661e:	000b      	movs	r3, r1
 8006620:	43db      	mvns	r3, r3
 8006622:	4013      	ands	r3, r2
 8006624:	0019      	movs	r1, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	035b      	lsls	r3, r3, #13
 800662c:	0b5b      	lsrs	r3, r3, #13
 800662e:	d105      	bne.n	800663c <HAL_ADC_ConfigChannel+0x9c>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	0e9b      	lsrs	r3, r3, #26
 8006636:	221f      	movs	r2, #31
 8006638:	4013      	ands	r3, r2
 800663a:	e098      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d000      	beq.n	8006648 <HAL_ADC_ConfigChannel+0xa8>
 8006646:	e091      	b.n	800676c <HAL_ADC_ConfigChannel+0x1cc>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2202      	movs	r2, #2
 800664e:	4013      	ands	r3, r2
 8006650:	d000      	beq.n	8006654 <HAL_ADC_ConfigChannel+0xb4>
 8006652:	e089      	b.n	8006768 <HAL_ADC_ConfigChannel+0x1c8>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2204      	movs	r2, #4
 800665a:	4013      	ands	r3, r2
 800665c:	d000      	beq.n	8006660 <HAL_ADC_ConfigChannel+0xc0>
 800665e:	e081      	b.n	8006764 <HAL_ADC_ConfigChannel+0x1c4>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2208      	movs	r2, #8
 8006666:	4013      	ands	r3, r2
 8006668:	d000      	beq.n	800666c <HAL_ADC_ConfigChannel+0xcc>
 800666a:	e079      	b.n	8006760 <HAL_ADC_ConfigChannel+0x1c0>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2210      	movs	r2, #16
 8006672:	4013      	ands	r3, r2
 8006674:	d000      	beq.n	8006678 <HAL_ADC_ConfigChannel+0xd8>
 8006676:	e071      	b.n	800675c <HAL_ADC_ConfigChannel+0x1bc>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2220      	movs	r2, #32
 800667e:	4013      	ands	r3, r2
 8006680:	d000      	beq.n	8006684 <HAL_ADC_ConfigChannel+0xe4>
 8006682:	e069      	b.n	8006758 <HAL_ADC_ConfigChannel+0x1b8>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2240      	movs	r2, #64	@ 0x40
 800668a:	4013      	ands	r3, r2
 800668c:	d000      	beq.n	8006690 <HAL_ADC_ConfigChannel+0xf0>
 800668e:	e061      	b.n	8006754 <HAL_ADC_ConfigChannel+0x1b4>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2280      	movs	r2, #128	@ 0x80
 8006696:	4013      	ands	r3, r2
 8006698:	d000      	beq.n	800669c <HAL_ADC_ConfigChannel+0xfc>
 800669a:	e059      	b.n	8006750 <HAL_ADC_ConfigChannel+0x1b0>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	4013      	ands	r3, r2
 80066a6:	d151      	bne.n	800674c <HAL_ADC_ConfigChannel+0x1ac>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4013      	ands	r3, r2
 80066b2:	d149      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x1a8>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	2380      	movs	r3, #128	@ 0x80
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4013      	ands	r3, r2
 80066be:	d141      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x1a4>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	2380      	movs	r3, #128	@ 0x80
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4013      	ands	r3, r2
 80066ca:	d139      	bne.n	8006740 <HAL_ADC_ConfigChannel+0x1a0>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	015b      	lsls	r3, r3, #5
 80066d4:	4013      	ands	r3, r2
 80066d6:	d131      	bne.n	800673c <HAL_ADC_ConfigChannel+0x19c>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	019b      	lsls	r3, r3, #6
 80066e0:	4013      	ands	r3, r2
 80066e2:	d129      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x198>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	01db      	lsls	r3, r3, #7
 80066ec:	4013      	ands	r3, r2
 80066ee:	d121      	bne.n	8006734 <HAL_ADC_ConfigChannel+0x194>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	4013      	ands	r3, r2
 80066fa:	d119      	bne.n	8006730 <HAL_ADC_ConfigChannel+0x190>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	2380      	movs	r3, #128	@ 0x80
 8006702:	025b      	lsls	r3, r3, #9
 8006704:	4013      	ands	r3, r2
 8006706:	d111      	bne.n	800672c <HAL_ADC_ConfigChannel+0x18c>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	2380      	movs	r3, #128	@ 0x80
 800670e:	029b      	lsls	r3, r3, #10
 8006710:	4013      	ands	r3, r2
 8006712:	d109      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x188>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	2380      	movs	r3, #128	@ 0x80
 800671a:	02db      	lsls	r3, r3, #11
 800671c:	4013      	ands	r3, r2
 800671e:	d001      	beq.n	8006724 <HAL_ADC_ConfigChannel+0x184>
 8006720:	2312      	movs	r3, #18
 8006722:	e024      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006724:	2300      	movs	r3, #0
 8006726:	e022      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006728:	2311      	movs	r3, #17
 800672a:	e020      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 800672c:	2310      	movs	r3, #16
 800672e:	e01e      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006730:	230f      	movs	r3, #15
 8006732:	e01c      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006734:	230e      	movs	r3, #14
 8006736:	e01a      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006738:	230d      	movs	r3, #13
 800673a:	e018      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 800673c:	230c      	movs	r3, #12
 800673e:	e016      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006740:	230b      	movs	r3, #11
 8006742:	e014      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006744:	230a      	movs	r3, #10
 8006746:	e012      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006748:	2309      	movs	r3, #9
 800674a:	e010      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 800674c:	2308      	movs	r3, #8
 800674e:	e00e      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006750:	2307      	movs	r3, #7
 8006752:	e00c      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006754:	2306      	movs	r3, #6
 8006756:	e00a      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006758:	2305      	movs	r3, #5
 800675a:	e008      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 800675c:	2304      	movs	r3, #4
 800675e:	e006      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006760:	2303      	movs	r3, #3
 8006762:	e004      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006764:	2302      	movs	r3, #2
 8006766:	e002      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_ADC_ConfigChannel+0x1ce>
 800676c:	2300      	movs	r3, #0
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	6852      	ldr	r2, [r2, #4]
 8006772:	201f      	movs	r0, #31
 8006774:	4002      	ands	r2, r0
 8006776:	4093      	lsls	r3, r2
 8006778:	000a      	movs	r2, r1
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	429a      	cmp	r2, r3
 800678e:	d808      	bhi.n	80067a2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	001a      	movs	r2, r3
 800679e:	f7ff fa77 	bl	8005c90 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	001a      	movs	r2, r3
 80067b0:	f7ff fab2 	bl	8005d18 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	db00      	blt.n	80067be <HAL_ADC_ConfigChannel+0x21e>
 80067bc:	e0bc      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067be:	4b50      	ldr	r3, [pc, #320]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 80067c0:	0018      	movs	r0, r3
 80067c2:	f7ff fa13 	bl	8005bec <LL_ADC_GetCommonPathInternalCh>
 80067c6:	0003      	movs	r3, r0
 80067c8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a4d      	ldr	r2, [pc, #308]	@ (8006904 <HAL_ADC_ConfigChannel+0x364>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d122      	bne.n	800681a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067dc:	d11d      	bne.n	800681a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2280      	movs	r2, #128	@ 0x80
 80067e2:	0412      	lsls	r2, r2, #16
 80067e4:	4313      	orrs	r3, r2
 80067e6:	4a46      	ldr	r2, [pc, #280]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 80067e8:	0019      	movs	r1, r3
 80067ea:	0010      	movs	r0, r2
 80067ec:	f7ff f9ea 	bl	8005bc4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067f0:	4b45      	ldr	r3, [pc, #276]	@ (8006908 <HAL_ADC_ConfigChannel+0x368>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4945      	ldr	r1, [pc, #276]	@ (800690c <HAL_ADC_ConfigChannel+0x36c>)
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7f9 fc84 	bl	8000104 <__udivsi3>
 80067fc:	0003      	movs	r3, r0
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	0013      	movs	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	189b      	adds	r3, r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800680a:	e002      	b.n	8006812 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3b01      	subs	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f9      	bne.n	800680c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006818:	e08e      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a3c      	ldr	r2, [pc, #240]	@ (8006910 <HAL_ADC_ConfigChannel+0x370>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10e      	bne.n	8006842 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	2380      	movs	r3, #128	@ 0x80
 8006828:	045b      	lsls	r3, r3, #17
 800682a:	4013      	ands	r3, r2
 800682c:	d109      	bne.n	8006842 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2280      	movs	r2, #128	@ 0x80
 8006832:	0452      	lsls	r2, r2, #17
 8006834:	4313      	orrs	r3, r2
 8006836:	4a32      	ldr	r2, [pc, #200]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 8006838:	0019      	movs	r1, r3
 800683a:	0010      	movs	r0, r2
 800683c:	f7ff f9c2 	bl	8005bc4 <LL_ADC_SetCommonPathInternalCh>
 8006840:	e07a      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a33      	ldr	r2, [pc, #204]	@ (8006914 <HAL_ADC_ConfigChannel+0x374>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d000      	beq.n	800684e <HAL_ADC_ConfigChannel+0x2ae>
 800684c:	e074      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	2380      	movs	r3, #128	@ 0x80
 8006852:	03db      	lsls	r3, r3, #15
 8006854:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006856:	d000      	beq.n	800685a <HAL_ADC_ConfigChannel+0x2ba>
 8006858:	e06e      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2280      	movs	r2, #128	@ 0x80
 800685e:	03d2      	lsls	r2, r2, #15
 8006860:	4313      	orrs	r3, r2
 8006862:	4a27      	ldr	r2, [pc, #156]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 8006864:	0019      	movs	r1, r3
 8006866:	0010      	movs	r0, r2
 8006868:	f7ff f9ac 	bl	8005bc4 <LL_ADC_SetCommonPathInternalCh>
 800686c:	e064      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691a      	ldr	r2, [r3, #16]
 8006872:	2380      	movs	r3, #128	@ 0x80
 8006874:	061b      	lsls	r3, r3, #24
 8006876:	429a      	cmp	r2, r3
 8006878:	d004      	beq.n	8006884 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800687e:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <HAL_ADC_ConfigChannel+0x35c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d107      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	0019      	movs	r1, r3
 800688e:	0010      	movs	r0, r2
 8006890:	f7ff fa2f 	bl	8005cf2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	da4d      	bge.n	8006938 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800689c:	4b18      	ldr	r3, [pc, #96]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff f9a4 	bl	8005bec <LL_ADC_GetCommonPathInternalCh>
 80068a4:	0003      	movs	r3, r0
 80068a6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <HAL_ADC_ConfigChannel+0x364>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d108      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4a18      	ldr	r2, [pc, #96]	@ (8006918 <HAL_ADC_ConfigChannel+0x378>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	4a11      	ldr	r2, [pc, #68]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 80068ba:	0019      	movs	r1, r3
 80068bc:	0010      	movs	r0, r2
 80068be:	f7ff f981 	bl	8005bc4 <LL_ADC_SetCommonPathInternalCh>
 80068c2:	e039      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <HAL_ADC_ConfigChannel+0x370>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d108      	bne.n	80068e0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4a12      	ldr	r2, [pc, #72]	@ (800691c <HAL_ADC_ConfigChannel+0x37c>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 80068d6:	0019      	movs	r1, r3
 80068d8:	0010      	movs	r0, r2
 80068da:	f7ff f973 	bl	8005bc4 <LL_ADC_SetCommonPathInternalCh>
 80068de:	e02b      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006914 <HAL_ADC_ConfigChannel+0x374>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d126      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006920 <HAL_ADC_ConfigChannel+0x380>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	4a03      	ldr	r2, [pc, #12]	@ (8006900 <HAL_ADC_ConfigChannel+0x360>)
 80068f2:	0019      	movs	r1, r3
 80068f4:	0010      	movs	r0, r2
 80068f6:	f7ff f965 	bl	8005bc4 <LL_ADC_SetCommonPathInternalCh>
 80068fa:	e01d      	b.n	8006938 <HAL_ADC_ConfigChannel+0x398>
 80068fc:	80000004 	.word	0x80000004
 8006900:	40012708 	.word	0x40012708
 8006904:	b0001000 	.word	0xb0001000
 8006908:	20000440 	.word	0x20000440
 800690c:	00030d40 	.word	0x00030d40
 8006910:	b8004000 	.word	0xb8004000
 8006914:	b4002000 	.word	0xb4002000
 8006918:	ff7fffff 	.word	0xff7fffff
 800691c:	feffffff 	.word	0xfeffffff
 8006920:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006928:	2220      	movs	r2, #32
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006930:	2317      	movs	r3, #23
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2254      	movs	r2, #84	@ 0x54
 800693c:	2100      	movs	r1, #0
 800693e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006940:	2317      	movs	r3, #23
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	781b      	ldrb	r3, [r3, #0]
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b006      	add	sp, #24
 800694c:	bd80      	pop	{r7, pc}
 800694e:	46c0      	nop			@ (mov r8, r8)

08006950 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	0018      	movs	r0, r3
 800695e:	f7ff fa89 	bl	8005e74 <LL_ADC_REG_IsConversionOngoing>
 8006962:	1e03      	subs	r3, r0, #0
 8006964:	d031      	beq.n	80069ca <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff fa4d 	bl	8005e0a <LL_ADC_IsDisableOngoing>
 8006970:	1e03      	subs	r3, r0, #0
 8006972:	d104      	bne.n	800697e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	0018      	movs	r0, r3
 800697a:	f7ff fa69 	bl	8005e50 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800697e:	f7ff f917 	bl	8005bb0 <HAL_GetTick>
 8006982:	0003      	movs	r3, r0
 8006984:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006986:	e01a      	b.n	80069be <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006988:	f7ff f912 	bl	8005bb0 <HAL_GetTick>
 800698c:	0002      	movs	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d913      	bls.n	80069be <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2204      	movs	r2, #4
 800699e:	4013      	ands	r3, r2
 80069a0:	d00d      	beq.n	80069be <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a6:	2210      	movs	r2, #16
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b2:	2201      	movs	r2, #1
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e006      	b.n	80069cc <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2204      	movs	r2, #4
 80069c6:	4013      	ands	r3, r2
 80069c8:	d1de      	bne.n	8006988 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	0018      	movs	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b004      	add	sp, #16
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80069dc:	2300      	movs	r3, #0
 80069de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	0018      	movs	r0, r3
 80069e6:	f7ff f9ff 	bl	8005de8 <LL_ADC_IsEnabled>
 80069ea:	1e03      	subs	r3, r0, #0
 80069ec:	d000      	beq.n	80069f0 <ADC_Enable+0x1c>
 80069ee:	e069      	b.n	8006ac4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4a36      	ldr	r2, [pc, #216]	@ (8006ad0 <ADC_Enable+0xfc>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	d00d      	beq.n	8006a18 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a00:	2210      	movs	r2, #16
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e056      	b.n	8006ac6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7ff f9bf 	bl	8005da0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006a22:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad4 <ADC_Enable+0x100>)
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7ff f8e1 	bl	8005bec <LL_ADC_GetCommonPathInternalCh>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	2380      	movs	r3, #128	@ 0x80
 8006a2e:	041b      	lsls	r3, r3, #16
 8006a30:	4013      	ands	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a34:	4b28      	ldr	r3, [pc, #160]	@ (8006ad8 <ADC_Enable+0x104>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4928      	ldr	r1, [pc, #160]	@ (8006adc <ADC_Enable+0x108>)
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7f9 fb62 	bl	8000104 <__udivsi3>
 8006a40:	0003      	movs	r3, r0
 8006a42:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006a44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a46:	e002      	b.n	8006a4e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f9      	bne.n	8006a48 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7e5b      	ldrb	r3, [r3, #25]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d033      	beq.n	8006ac4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006a5c:	f7ff f8a8 	bl	8005bb0 <HAL_GetTick>
 8006a60:	0003      	movs	r3, r0
 8006a62:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a64:	e027      	b.n	8006ab6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7ff f9bc 	bl	8005de8 <LL_ADC_IsEnabled>
 8006a70:	1e03      	subs	r3, r0, #0
 8006a72:	d104      	bne.n	8006a7e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7ff f991 	bl	8005da0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a7e:	f7ff f897 	bl	8005bb0 <HAL_GetTick>
 8006a82:	0002      	movs	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d914      	bls.n	8006ab6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2201      	movs	r2, #1
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00d      	beq.n	8006ab6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aaa:	2201      	movs	r2, #1
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e007      	b.n	8006ac6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2201      	movs	r2, #1
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d1d0      	bne.n	8006a66 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b004      	add	sp, #16
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	80000017 	.word	0x80000017
 8006ad4:	40012708 	.word	0x40012708
 8006ad8:	20000440 	.word	0x20000440
 8006adc:	00030d40 	.word	0x00030d40

08006ae0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	0018      	movs	r0, r3
 8006aee:	f7ff f98c 	bl	8005e0a <LL_ADC_IsDisableOngoing>
 8006af2:	0003      	movs	r3, r0
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7ff f974 	bl	8005de8 <LL_ADC_IsEnabled>
 8006b00:	1e03      	subs	r3, r0, #0
 8006b02:	d046      	beq.n	8006b92 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d143      	bne.n	8006b92 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2205      	movs	r2, #5
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10d      	bne.n	8006b34 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f7ff f951 	bl	8005dc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2203      	movs	r2, #3
 8006b28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b2a:	f7ff f841 	bl	8005bb0 <HAL_GetTick>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b32:	e028      	b.n	8006b86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b38:	2210      	movs	r2, #16
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b44:	2201      	movs	r2, #1
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e021      	b.n	8006b94 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b50:	f7ff f82e 	bl	8005bb0 <HAL_GetTick>
 8006b54:	0002      	movs	r2, r0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d913      	bls.n	8006b86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2201      	movs	r2, #1
 8006b66:	4013      	ands	r3, r2
 8006b68:	d00d      	beq.n	8006b86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	2210      	movs	r2, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e006      	b.n	8006b94 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d1de      	bne.n	8006b50 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	0018      	movs	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b004      	add	sp, #16
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bae:	2250      	movs	r2, #80	@ 0x50
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d142      	bne.n	8006c3a <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb8:	2280      	movs	r2, #128	@ 0x80
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7ff f851 	bl	8005c6e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bcc:	1e03      	subs	r3, r0, #0
 8006bce:	d02e      	beq.n	8006c2e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	7e9b      	ldrb	r3, [r3, #26]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d12a      	bne.n	8006c2e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2208      	movs	r2, #8
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d123      	bne.n	8006c2e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7ff f942 	bl	8005e74 <LL_ADC_REG_IsConversionOngoing>
 8006bf0:	1e03      	subs	r3, r0, #0
 8006bf2:	d110      	bne.n	8006c16 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	210c      	movs	r1, #12
 8006c00:	438a      	bics	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c08:	4a16      	ldr	r2, [pc, #88]	@ (8006c64 <ADC_DMAConvCplt+0xc8>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c14:	e00b      	b.n	8006c2e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c26:	2201      	movs	r2, #1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	0010      	movs	r0, r2
 8006c36:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c38:	e010      	b.n	8006c5c <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3e:	2210      	movs	r2, #16
 8006c40:	4013      	ands	r3, r2
 8006c42:	d005      	beq.n	8006c50 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	0010      	movs	r0, r2
 8006c4c:	4798      	blx	r3
}
 8006c4e:	e005      	b.n	8006c5c <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	0010      	movs	r0, r2
 8006c5a:	4798      	blx	r3
}
 8006c5c:	46c0      	nop			@ (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b004      	add	sp, #16
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	fffffefe 	.word	0xfffffefe

08006c68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	0010      	movs	r0, r2
 8006c7e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c80:	46c0      	nop			@ (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b004      	add	sp, #16
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9a:	2240      	movs	r2, #64	@ 0x40
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	0010      	movs	r0, r2
 8006cb6:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cb8:	46c0      	nop			@ (mov r8, r8)
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b004      	add	sp, #16
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <LL_ADC_GetCommonClock>:
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	23f0      	movs	r3, #240	@ 0xf0
 8006cce:	039b      	lsls	r3, r3, #14
 8006cd0:	4013      	ands	r3, r2
}
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b002      	add	sp, #8
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <LL_ADC_GetClock>:
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	0f9b      	lsrs	r3, r3, #30
 8006ce8:	079b      	lsls	r3, r3, #30
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b002      	add	sp, #8
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <LL_ADC_SetCalibrationFactor>:
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	22b4      	movs	r2, #180	@ 0xb4
 8006d00:	589b      	ldr	r3, [r3, r2]
 8006d02:	227f      	movs	r2, #127	@ 0x7f
 8006d04:	4393      	bics	r3, r2
 8006d06:	001a      	movs	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	21b4      	movs	r1, #180	@ 0xb4
 8006d10:	505a      	str	r2, [r3, r1]
}
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b002      	add	sp, #8
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <LL_ADC_GetCalibrationFactor>:
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	22b4      	movs	r2, #180	@ 0xb4
 8006d26:	589b      	ldr	r3, [r3, r2]
 8006d28:	227f      	movs	r2, #127	@ 0x7f
 8006d2a:	4013      	ands	r3, r2
}
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	b002      	add	sp, #8
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <LL_ADC_Enable>:
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a04      	ldr	r2, [pc, #16]	@ (8006d54 <LL_ADC_Enable+0x20>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	2201      	movs	r2, #1
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	46c0      	nop			@ (mov r8, r8)
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	7fffffe8 	.word	0x7fffffe8

08006d58 <LL_ADC_Disable>:
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a04      	ldr	r2, [pc, #16]	@ (8006d78 <LL_ADC_Disable+0x20>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	2202      	movs	r2, #2
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	46c0      	nop			@ (mov r8, r8)
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b002      	add	sp, #8
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	7fffffe8 	.word	0x7fffffe8

08006d7c <LL_ADC_IsEnabled>:
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <LL_ADC_IsEnabled+0x18>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <LL_ADC_IsEnabled+0x1a>
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b002      	add	sp, #8
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <LL_ADC_StartCalibration>:
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4a05      	ldr	r2, [pc, #20]	@ (8006dc4 <LL_ADC_StartCalibration+0x24>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	2280      	movs	r2, #128	@ 0x80
 8006db2:	0612      	lsls	r2, r2, #24
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	609a      	str	r2, [r3, #8]
}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	7fffffe8 	.word	0x7fffffe8

08006dc8 <LL_ADC_IsCalibrationOnGoing>:
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	0fdb      	lsrs	r3, r3, #31
 8006dd6:	07da      	lsls	r2, r3, #31
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d101      	bne.n	8006de4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	0018      	movs	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	b002      	add	sp, #8
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006df0:	b590      	push	{r4, r7, lr}
 8006df2:	b08b      	sub	sp, #44	@ 0x2c
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2254      	movs	r2, #84	@ 0x54
 8006e04:	5c9b      	ldrb	r3, [r3, r2]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_ADCEx_Calibration_Start+0x1e>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e0dd      	b.n	8006fca <HAL_ADCEx_Calibration_Start+0x1da>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2254      	movs	r2, #84	@ 0x54
 8006e12:	2101      	movs	r1, #1
 8006e14:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006e16:	231f      	movs	r3, #31
 8006e18:	18fc      	adds	r4, r7, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f7ff fe5f 	bl	8006ae0 <ADC_Disable>
 8006e22:	0003      	movs	r3, r0
 8006e24:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7ff ffa6 	bl	8006d7c <LL_ADC_IsEnabled>
 8006e30:	1e03      	subs	r3, r0, #0
 8006e32:	d000      	beq.n	8006e36 <HAL_ADCEx_Calibration_Start+0x46>
 8006e34:	e0bc      	b.n	8006fb0 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3a:	4a66      	ldr	r2, [pc, #408]	@ (8006fd4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2202      	movs	r2, #2
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a62      	ldr	r2, [pc, #392]	@ (8006fd8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	495f      	ldr	r1, [pc, #380]	@ (8006fdc <HAL_ADCEx_Calibration_Start+0x1ec>)
 8006e5e:	400a      	ands	r2, r1
 8006e60:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006e62:	2300      	movs	r3, #0
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e66:	e02d      	b.n	8006ec4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7ff ff97 	bl	8006da0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e72:	e014      	b.n	8006e9e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4a58      	ldr	r2, [pc, #352]	@ (8006fe0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d90d      	bls.n	8006e9e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	2212      	movs	r2, #18
 8006e88:	4393      	bics	r3, r2
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2254      	movs	r2, #84	@ 0x54
 8006e96:	2100      	movs	r1, #0
 8006e98:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e095      	b.n	8006fca <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff ff90 	bl	8006dc8 <LL_ADC_IsCalibrationOnGoing>
 8006ea8:	1e03      	subs	r3, r0, #0
 8006eaa:	d1e3      	bne.n	8006e74 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f7ff ff32 	bl	8006d1a <LL_ADC_GetCalibrationFactor>
 8006eb6:	0002      	movs	r2, r0
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	2b07      	cmp	r3, #7
 8006ec8:	d9ce      	bls.n	8006e68 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ecc:	6a38      	ldr	r0, [r7, #32]
 8006ece:	f7f9 f919 	bl	8000104 <__udivsi3>
 8006ed2:	0003      	movs	r3, r0
 8006ed4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7ff ff2a 	bl	8006d34 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7ff fef8 	bl	8006cda <LL_ADC_GetClock>
 8006eea:	1e03      	subs	r3, r0, #0
 8006eec:	d11b      	bne.n	8006f26 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006eee:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f7ff fee5 	bl	8006cc0 <LL_ADC_GetCommonClock>
 8006ef6:	0003      	movs	r3, r0
 8006ef8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	23e0      	movs	r3, #224	@ 0xe0
 8006efe:	035b      	lsls	r3, r3, #13
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d310      	bcc.n	8006f26 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	0c9b      	lsrs	r3, r3, #18
 8006f08:	3b03      	subs	r3, #3
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	0013      	movs	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8006f18:	e002      	b.n	8006f20 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f9      	bne.n	8006f1a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	0011      	movs	r1, r2
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f7ff fedf 	bl	8006cf2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f7ff ff0d 	bl	8006d58 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006f3e:	f7fe fe37 	bl	8005bb0 <HAL_GetTick>
 8006f42:	0003      	movs	r3, r0
 8006f44:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006f46:	e01b      	b.n	8006f80 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006f48:	f7fe fe32 	bl	8005bb0 <HAL_GetTick>
 8006f4c:	0002      	movs	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d914      	bls.n	8006f80 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7ff ff0e 	bl	8006d7c <LL_ADC_IsEnabled>
 8006f60:	1e03      	subs	r3, r0, #0
 8006f62:	d00d      	beq.n	8006f80 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f68:	2210      	movs	r2, #16
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f74:	2201      	movs	r2, #1
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e024      	b.n	8006fca <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7ff fef9 	bl	8006d7c <LL_ADC_IsEnabled>
 8006f8a:	1e03      	subs	r3, r0, #0
 8006f8c:	d1dc      	bne.n	8006f48 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68d9      	ldr	r1, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	4393      	bics	r3, r2
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fae:	e005      	b.n	8006fbc <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb4:	2210      	movs	r2, #16
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2254      	movs	r2, #84	@ 0x54
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006fc4:	231f      	movs	r3, #31
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
}
 8006fca:	0018      	movs	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b00b      	add	sp, #44	@ 0x2c
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	46c0      	nop			@ (mov r8, r8)
 8006fd4:	fffffefd 	.word	0xfffffefd
 8006fd8:	00008003 	.word	0x00008003
 8006fdc:	ffff7ffc 	.word	0xffff7ffc
 8006fe0:	0002f1ff 	.word	0x0002f1ff
 8006fe4:	40012708 	.word	0x40012708

08006fe8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006ff0:	46c0      	nop			@ (mov r8, r8)
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	b002      	add	sp, #8
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007010:	46c0      	nop			@ (mov r8, r8)
 8007012:	46bd      	mov	sp, r7
 8007014:	b002      	add	sp, #8
 8007016:	bd80      	pop	{r7, pc}

08007018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	0002      	movs	r2, r0
 8007020:	1dfb      	adds	r3, r7, #7
 8007022:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007024:	1dfb      	adds	r3, r7, #7
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b7f      	cmp	r3, #127	@ 0x7f
 800702a:	d809      	bhi.n	8007040 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800702c:	1dfb      	adds	r3, r7, #7
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	001a      	movs	r2, r3
 8007032:	231f      	movs	r3, #31
 8007034:	401a      	ands	r2, r3
 8007036:	4b04      	ldr	r3, [pc, #16]	@ (8007048 <__NVIC_EnableIRQ+0x30>)
 8007038:	2101      	movs	r1, #1
 800703a:	4091      	lsls	r1, r2
 800703c:	000a      	movs	r2, r1
 800703e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007040:	46c0      	nop			@ (mov r8, r8)
 8007042:	46bd      	mov	sp, r7
 8007044:	b002      	add	sp, #8
 8007046:	bd80      	pop	{r7, pc}
 8007048:	e000e100 	.word	0xe000e100

0800704c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	0002      	movs	r2, r0
 8007054:	1dfb      	adds	r3, r7, #7
 8007056:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007058:	1dfb      	adds	r3, r7, #7
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b7f      	cmp	r3, #127	@ 0x7f
 800705e:	d810      	bhi.n	8007082 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007060:	1dfb      	adds	r3, r7, #7
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	001a      	movs	r2, r3
 8007066:	231f      	movs	r3, #31
 8007068:	4013      	ands	r3, r2
 800706a:	4908      	ldr	r1, [pc, #32]	@ (800708c <__NVIC_DisableIRQ+0x40>)
 800706c:	2201      	movs	r2, #1
 800706e:	409a      	lsls	r2, r3
 8007070:	0013      	movs	r3, r2
 8007072:	2280      	movs	r2, #128	@ 0x80
 8007074:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007076:	f3bf 8f4f 	dsb	sy
}
 800707a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800707c:	f3bf 8f6f 	isb	sy
}
 8007080:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	46bd      	mov	sp, r7
 8007086:	b002      	add	sp, #8
 8007088:	bd80      	pop	{r7, pc}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	e000e100 	.word	0xe000e100

08007090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	0002      	movs	r2, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	1dfb      	adds	r3, r7, #7
 800709c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800709e:	1dfb      	adds	r3, r7, #7
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070a4:	d828      	bhi.n	80070f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007164 <__NVIC_SetPriority+0xd4>)
 80070a8:	1dfb      	adds	r3, r7, #7
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	089b      	lsrs	r3, r3, #2
 80070b0:	33c0      	adds	r3, #192	@ 0xc0
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	589b      	ldr	r3, [r3, r2]
 80070b6:	1dfa      	adds	r2, r7, #7
 80070b8:	7812      	ldrb	r2, [r2, #0]
 80070ba:	0011      	movs	r1, r2
 80070bc:	2203      	movs	r2, #3
 80070be:	400a      	ands	r2, r1
 80070c0:	00d2      	lsls	r2, r2, #3
 80070c2:	21ff      	movs	r1, #255	@ 0xff
 80070c4:	4091      	lsls	r1, r2
 80070c6:	000a      	movs	r2, r1
 80070c8:	43d2      	mvns	r2, r2
 80070ca:	401a      	ands	r2, r3
 80070cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	019b      	lsls	r3, r3, #6
 80070d2:	22ff      	movs	r2, #255	@ 0xff
 80070d4:	401a      	ands	r2, r3
 80070d6:	1dfb      	adds	r3, r7, #7
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	0018      	movs	r0, r3
 80070dc:	2303      	movs	r3, #3
 80070de:	4003      	ands	r3, r0
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070e4:	481f      	ldr	r0, [pc, #124]	@ (8007164 <__NVIC_SetPriority+0xd4>)
 80070e6:	1dfb      	adds	r3, r7, #7
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b25b      	sxtb	r3, r3
 80070ec:	089b      	lsrs	r3, r3, #2
 80070ee:	430a      	orrs	r2, r1
 80070f0:	33c0      	adds	r3, #192	@ 0xc0
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80070f6:	e031      	b.n	800715c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007168 <__NVIC_SetPriority+0xd8>)
 80070fa:	1dfb      	adds	r3, r7, #7
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	0019      	movs	r1, r3
 8007100:	230f      	movs	r3, #15
 8007102:	400b      	ands	r3, r1
 8007104:	3b08      	subs	r3, #8
 8007106:	089b      	lsrs	r3, r3, #2
 8007108:	3306      	adds	r3, #6
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	18d3      	adds	r3, r2, r3
 800710e:	3304      	adds	r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	1dfa      	adds	r2, r7, #7
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	0011      	movs	r1, r2
 8007118:	2203      	movs	r2, #3
 800711a:	400a      	ands	r2, r1
 800711c:	00d2      	lsls	r2, r2, #3
 800711e:	21ff      	movs	r1, #255	@ 0xff
 8007120:	4091      	lsls	r1, r2
 8007122:	000a      	movs	r2, r1
 8007124:	43d2      	mvns	r2, r2
 8007126:	401a      	ands	r2, r3
 8007128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	22ff      	movs	r2, #255	@ 0xff
 8007130:	401a      	ands	r2, r3
 8007132:	1dfb      	adds	r3, r7, #7
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	0018      	movs	r0, r3
 8007138:	2303      	movs	r3, #3
 800713a:	4003      	ands	r3, r0
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007140:	4809      	ldr	r0, [pc, #36]	@ (8007168 <__NVIC_SetPriority+0xd8>)
 8007142:	1dfb      	adds	r3, r7, #7
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	001c      	movs	r4, r3
 8007148:	230f      	movs	r3, #15
 800714a:	4023      	ands	r3, r4
 800714c:	3b08      	subs	r3, #8
 800714e:	089b      	lsrs	r3, r3, #2
 8007150:	430a      	orrs	r2, r1
 8007152:	3306      	adds	r3, #6
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	18c3      	adds	r3, r0, r3
 8007158:	3304      	adds	r3, #4
 800715a:	601a      	str	r2, [r3, #0]
}
 800715c:	46c0      	nop			@ (mov r8, r8)
 800715e:	46bd      	mov	sp, r7
 8007160:	b003      	add	sp, #12
 8007162:	bd90      	pop	{r4, r7, pc}
 8007164:	e000e100 	.word	0xe000e100
 8007168:	e000ed00 	.word	0xe000ed00

0800716c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	2380      	movs	r3, #128	@ 0x80
 800717a:	045b      	lsls	r3, r3, #17
 800717c:	429a      	cmp	r2, r3
 800717e:	d301      	bcc.n	8007184 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007180:	2301      	movs	r3, #1
 8007182:	e010      	b.n	80071a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007184:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <SysTick_Config+0x44>)
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	3a01      	subs	r2, #1
 800718a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800718c:	2301      	movs	r3, #1
 800718e:	425b      	negs	r3, r3
 8007190:	2103      	movs	r1, #3
 8007192:	0018      	movs	r0, r3
 8007194:	f7ff ff7c 	bl	8007090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007198:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <SysTick_Config+0x44>)
 800719a:	2200      	movs	r2, #0
 800719c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800719e:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <SysTick_Config+0x44>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	0018      	movs	r0, r3
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b002      	add	sp, #8
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	e000e010 	.word	0xe000e010

080071b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	210f      	movs	r1, #15
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	1c02      	adds	r2, r0, #0
 80071c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	187b      	adds	r3, r7, r1
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	b25b      	sxtb	r3, r3
 80071ce:	0011      	movs	r1, r2
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7ff ff5d 	bl	8007090 <__NVIC_SetPriority>
}
 80071d6:	46c0      	nop			@ (mov r8, r8)
 80071d8:	46bd      	mov	sp, r7
 80071da:	b004      	add	sp, #16
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	0002      	movs	r2, r0
 80071e6:	1dfb      	adds	r3, r7, #7
 80071e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ea:	1dfb      	adds	r3, r7, #7
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7ff ff11 	bl	8007018 <__NVIC_EnableIRQ>
}
 80071f6:	46c0      	nop			@ (mov r8, r8)
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b002      	add	sp, #8
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	0002      	movs	r2, r0
 8007206:	1dfb      	adds	r3, r7, #7
 8007208:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800720a:	1dfb      	adds	r3, r7, #7
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b25b      	sxtb	r3, r3
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff ff1b 	bl	800704c <__NVIC_DisableIRQ>
}
 8007216:	46c0      	nop			@ (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	b002      	add	sp, #8
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0018      	movs	r0, r3
 800722a:	f7ff ff9f 	bl	800716c <SysTick_Config>
 800722e:	0003      	movs	r3, r0
}
 8007230:	0018      	movs	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	b002      	add	sp, #8
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e077      	b.n	800733a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a3d      	ldr	r2, [pc, #244]	@ (8007344 <HAL_DMA_Init+0x10c>)
 8007250:	4694      	mov	ip, r2
 8007252:	4463      	add	r3, ip
 8007254:	2114      	movs	r1, #20
 8007256:	0018      	movs	r0, r3
 8007258:	f7f8 ff54 	bl	8000104 <__udivsi3>
 800725c:	0003      	movs	r3, r0
 800725e:	009a      	lsls	r2, r3, #2
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2225      	movs	r2, #37	@ 0x25
 8007268:	2102      	movs	r1, #2
 800726a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4934      	ldr	r1, [pc, #208]	@ (8007348 <HAL_DMA_Init+0x110>)
 8007278:	400a      	ands	r2, r1
 800727a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f000 fa8d 	bl	80077d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	01db      	lsls	r3, r3, #7
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d102      	bne.n	80072cc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d4:	213f      	movs	r1, #63	@ 0x3f
 80072d6:	400a      	ands	r2, r1
 80072d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80072e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d011      	beq.n	8007310 <HAL_DMA_Init+0xd8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d80d      	bhi.n	8007310 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	0018      	movs	r0, r3
 80072f8:	f000 fa98 	bl	800782c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	e008      	b.n	8007322 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2225      	movs	r2, #37	@ 0x25
 800732c:	2101      	movs	r1, #1
 800732e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2224      	movs	r2, #36	@ 0x24
 8007334:	2100      	movs	r1, #0
 8007336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	0018      	movs	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	b002      	add	sp, #8
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	bffdfff8 	.word	0xbffdfff8
 8007348:	ffff800f 	.word	0xffff800f

0800734c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2317      	movs	r3, #23
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2224      	movs	r2, #36	@ 0x24
 8007366:	5c9b      	ldrb	r3, [r3, r2]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_DMA_Start_IT+0x24>
 800736c:	2302      	movs	r3, #2
 800736e:	e06f      	b.n	8007450 <HAL_DMA_Start_IT+0x104>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2224      	movs	r2, #36	@ 0x24
 8007374:	2101      	movs	r1, #1
 8007376:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2225      	movs	r2, #37	@ 0x25
 800737c:	5c9b      	ldrb	r3, [r3, r2]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	d157      	bne.n	8007434 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2225      	movs	r2, #37	@ 0x25
 8007388:	2102      	movs	r1, #2
 800738a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2101      	movs	r1, #1
 800739e:	438a      	bics	r2, r1
 80073a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f9d3 	bl	8007754 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d008      	beq.n	80073c8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	210e      	movs	r1, #14
 80073c2:	430a      	orrs	r2, r1
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e00f      	b.n	80073e8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2104      	movs	r1, #4
 80073d4:	438a      	bics	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	210a      	movs	r1, #10
 80073e4:	430a      	orrs	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	2380      	movs	r3, #128	@ 0x80
 80073f0:	025b      	lsls	r3, r3, #9
 80073f2:	4013      	ands	r3, r2
 80073f4:	d008      	beq.n	8007408 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007400:	2180      	movs	r1, #128	@ 0x80
 8007402:	0049      	lsls	r1, r1, #1
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741a:	2180      	movs	r1, #128	@ 0x80
 800741c:	0049      	lsls	r1, r1, #1
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2101      	movs	r1, #1
 800742e:	430a      	orrs	r2, r1
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e00a      	b.n	800744a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2280      	movs	r2, #128	@ 0x80
 8007438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2224      	movs	r2, #36	@ 0x24
 800743e:	2100      	movs	r1, #0
 8007440:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007442:	2317      	movs	r3, #23
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	2201      	movs	r2, #1
 8007448:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800744a:	2317      	movs	r3, #23
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	781b      	ldrb	r3, [r3, #0]
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b006      	add	sp, #24
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e050      	b.n	800750c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2225      	movs	r2, #37	@ 0x25
 800746e:	5c9b      	ldrb	r3, [r3, r2]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d008      	beq.n	8007488 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2204      	movs	r2, #4
 800747a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	@ 0x24
 8007480:	2100      	movs	r1, #0
 8007482:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e041      	b.n	800750c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	210e      	movs	r1, #14
 8007494:	438a      	bics	r2, r1
 8007496:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a2:	491c      	ldr	r1, [pc, #112]	@ (8007514 <HAL_DMA_Abort+0xbc>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2101      	movs	r1, #1
 80074b4:	438a      	bics	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80074b8:	4b17      	ldr	r3, [pc, #92]	@ (8007518 <HAL_DMA_Abort+0xc0>)
 80074ba:	6859      	ldr	r1, [r3, #4]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	221c      	movs	r2, #28
 80074c2:	4013      	ands	r3, r2
 80074c4:	2201      	movs	r2, #1
 80074c6:	409a      	lsls	r2, r3
 80074c8:	4b13      	ldr	r3, [pc, #76]	@ (8007518 <HAL_DMA_Abort+0xc0>)
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80074d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00c      	beq.n	80074fa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ea:	490a      	ldr	r1, [pc, #40]	@ (8007514 <HAL_DMA_Abort+0xbc>)
 80074ec:	400a      	ands	r2, r1
 80074ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80074f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2225      	movs	r2, #37	@ 0x25
 80074fe:	2101      	movs	r1, #1
 8007500:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2224      	movs	r2, #36	@ 0x24
 8007506:	2100      	movs	r1, #0
 8007508:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	0018      	movs	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	b002      	add	sp, #8
 8007512:	bd80      	pop	{r7, pc}
 8007514:	fffffeff 	.word	0xfffffeff
 8007518:	40020000 	.word	0x40020000

0800751c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007524:	210f      	movs	r1, #15
 8007526:	187b      	adds	r3, r7, r1
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2225      	movs	r2, #37	@ 0x25
 8007530:	5c9b      	ldrb	r3, [r3, r2]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d006      	beq.n	8007546 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2204      	movs	r2, #4
 800753c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800753e:	187b      	adds	r3, r7, r1
 8007540:	2201      	movs	r2, #1
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	e049      	b.n	80075da <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	210e      	movs	r1, #14
 8007552:	438a      	bics	r2, r1
 8007554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2101      	movs	r1, #1
 8007562:	438a      	bics	r2, r1
 8007564:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007570:	491d      	ldr	r1, [pc, #116]	@ (80075e8 <HAL_DMA_Abort_IT+0xcc>)
 8007572:	400a      	ands	r2, r1
 8007574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007576:	4b1d      	ldr	r3, [pc, #116]	@ (80075ec <HAL_DMA_Abort_IT+0xd0>)
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	221c      	movs	r2, #28
 8007580:	4013      	ands	r3, r2
 8007582:	2201      	movs	r2, #1
 8007584:	409a      	lsls	r2, r3
 8007586:	4b19      	ldr	r3, [pc, #100]	@ (80075ec <HAL_DMA_Abort_IT+0xd0>)
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007594:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00c      	beq.n	80075b8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a8:	490f      	ldr	r1, [pc, #60]	@ (80075e8 <HAL_DMA_Abort_IT+0xcc>)
 80075aa:	400a      	ands	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80075b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2225      	movs	r2, #37	@ 0x25
 80075bc:	2101      	movs	r1, #1
 80075be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2224      	movs	r2, #36	@ 0x24
 80075c4:	2100      	movs	r1, #0
 80075c6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	0010      	movs	r0, r2
 80075d8:	4798      	blx	r3
    }
  }
  return status;
 80075da:	230f      	movs	r3, #15
 80075dc:	18fb      	adds	r3, r7, r3
 80075de:	781b      	ldrb	r3, [r3, #0]
}
 80075e0:	0018      	movs	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b004      	add	sp, #16
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	fffffeff 	.word	0xfffffeff
 80075ec:	40020000 	.word	0x40020000

080075f0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80075f8:	4b55      	ldr	r3, [pc, #340]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	221c      	movs	r2, #28
 800760c:	4013      	ands	r3, r2
 800760e:	2204      	movs	r2, #4
 8007610:	409a      	lsls	r2, r3
 8007612:	0013      	movs	r3, r2
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4013      	ands	r3, r2
 8007618:	d027      	beq.n	800766a <HAL_DMA_IRQHandler+0x7a>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2204      	movs	r2, #4
 800761e:	4013      	ands	r3, r2
 8007620:	d023      	beq.n	800766a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2220      	movs	r2, #32
 800762a:	4013      	ands	r3, r2
 800762c:	d107      	bne.n	800763e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2104      	movs	r1, #4
 800763a:	438a      	bics	r2, r1
 800763c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800763e:	4b44      	ldr	r3, [pc, #272]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 8007640:	6859      	ldr	r1, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	221c      	movs	r2, #28
 8007648:	4013      	ands	r3, r2
 800764a:	2204      	movs	r2, #4
 800764c:	409a      	lsls	r2, r3
 800764e:	4b40      	ldr	r3, [pc, #256]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	2b00      	cmp	r3, #0
 800765a:	d100      	bne.n	800765e <HAL_DMA_IRQHandler+0x6e>
 800765c:	e073      	b.n	8007746 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	0010      	movs	r0, r2
 8007666:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007668:	e06d      	b.n	8007746 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	221c      	movs	r2, #28
 8007670:	4013      	ands	r3, r2
 8007672:	2202      	movs	r2, #2
 8007674:	409a      	lsls	r2, r3
 8007676:	0013      	movs	r3, r2
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4013      	ands	r3, r2
 800767c:	d02e      	beq.n	80076dc <HAL_DMA_IRQHandler+0xec>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2202      	movs	r2, #2
 8007682:	4013      	ands	r3, r2
 8007684:	d02a      	beq.n	80076dc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2220      	movs	r2, #32
 800768e:	4013      	ands	r3, r2
 8007690:	d10b      	bne.n	80076aa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	210a      	movs	r1, #10
 800769e:	438a      	bics	r2, r1
 80076a0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2225      	movs	r2, #37	@ 0x25
 80076a6:	2101      	movs	r1, #1
 80076a8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80076aa:	4b29      	ldr	r3, [pc, #164]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 80076ac:	6859      	ldr	r1, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	221c      	movs	r2, #28
 80076b4:	4013      	ands	r3, r2
 80076b6:	2202      	movs	r2, #2
 80076b8:	409a      	lsls	r2, r3
 80076ba:	4b25      	ldr	r3, [pc, #148]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2224      	movs	r2, #36	@ 0x24
 80076c4:	2100      	movs	r1, #0
 80076c6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d03a      	beq.n	8007746 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	0010      	movs	r0, r2
 80076d8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80076da:	e034      	b.n	8007746 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e0:	221c      	movs	r2, #28
 80076e2:	4013      	ands	r3, r2
 80076e4:	2208      	movs	r2, #8
 80076e6:	409a      	lsls	r2, r3
 80076e8:	0013      	movs	r3, r2
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4013      	ands	r3, r2
 80076ee:	d02b      	beq.n	8007748 <HAL_DMA_IRQHandler+0x158>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2208      	movs	r2, #8
 80076f4:	4013      	ands	r3, r2
 80076f6:	d027      	beq.n	8007748 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	210e      	movs	r1, #14
 8007704:	438a      	bics	r2, r1
 8007706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007708:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 800770a:	6859      	ldr	r1, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007710:	221c      	movs	r2, #28
 8007712:	4013      	ands	r3, r2
 8007714:	2201      	movs	r2, #1
 8007716:	409a      	lsls	r2, r3
 8007718:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <HAL_DMA_IRQHandler+0x160>)
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2225      	movs	r2, #37	@ 0x25
 8007728:	2101      	movs	r1, #1
 800772a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2224      	movs	r2, #36	@ 0x24
 8007730:	2100      	movs	r1, #0
 8007732:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	0010      	movs	r0, r2
 8007744:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007746:	46c0      	nop			@ (mov r8, r8)
 8007748:	46c0      	nop			@ (mov r8, r8)
}
 800774a:	46bd      	mov	sp, r7
 800774c:	b004      	add	sp, #16
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40020000 	.word	0x40020000

08007754 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800776a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800777c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800777e:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <DMA_SetConfig+0x7c>)
 8007780:	6859      	ldr	r1, [r3, #4]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	221c      	movs	r2, #28
 8007788:	4013      	ands	r3, r2
 800778a:	2201      	movs	r2, #1
 800778c:	409a      	lsls	r2, r3
 800778e:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <DMA_SetConfig+0x7c>)
 8007790:	430a      	orrs	r2, r1
 8007792:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d108      	bne.n	80077b6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077b4:	e007      	b.n	80077c6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]
}
 80077c6:	46c0      	nop			@ (mov r8, r8)
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b004      	add	sp, #16
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	40020000 	.word	0x40020000

080077d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e0:	089b      	lsrs	r3, r3, #2
 80077e2:	4a10      	ldr	r2, [pc, #64]	@ (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80077e4:	4694      	mov	ip, r2
 80077e6:	4463      	add	r3, ip
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	001a      	movs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	001a      	movs	r2, r3
 80077f6:	23ff      	movs	r3, #255	@ 0xff
 80077f8:	4013      	ands	r3, r2
 80077fa:	3b08      	subs	r3, #8
 80077fc:	2114      	movs	r1, #20
 80077fe:	0018      	movs	r0, r3
 8007800:	f7f8 fc80 	bl	8000104 <__udivsi3>
 8007804:	0003      	movs	r3, r0
 8007806:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a07      	ldr	r2, [pc, #28]	@ (8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800780c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	221f      	movs	r2, #31
 8007812:	4013      	ands	r3, r2
 8007814:	2201      	movs	r2, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800781c:	46c0      	nop			@ (mov r8, r8)
 800781e:	46bd      	mov	sp, r7
 8007820:	b004      	add	sp, #16
 8007822:	bd80      	pop	{r7, pc}
 8007824:	10008200 	.word	0x10008200
 8007828:	40020880 	.word	0x40020880

0800782c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	223f      	movs	r2, #63	@ 0x3f
 800783a:	4013      	ands	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a0a      	ldr	r2, [pc, #40]	@ (800786c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007842:	4694      	mov	ip, r2
 8007844:	4463      	add	r3, ip
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	001a      	movs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a07      	ldr	r2, [pc, #28]	@ (8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007852:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3b01      	subs	r3, #1
 8007858:	2203      	movs	r2, #3
 800785a:	4013      	ands	r3, r2
 800785c:	2201      	movs	r2, #1
 800785e:	409a      	lsls	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007864:	46c0      	nop			@ (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b004      	add	sp, #16
 800786a:	bd80      	pop	{r7, pc}
 800786c:	1000823f 	.word	0x1000823f
 8007870:	40020940 	.word	0x40020940

08007874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007882:	e147      	b.n	8007b14 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2101      	movs	r1, #1
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4091      	lsls	r1, r2
 800788e:	000a      	movs	r2, r1
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d100      	bne.n	800789c <HAL_GPIO_Init+0x28>
 800789a:	e138      	b.n	8007b0e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2203      	movs	r2, #3
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d005      	beq.n	80078b4 <HAL_GPIO_Init+0x40>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	4013      	ands	r3, r2
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d130      	bne.n	8007916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	2203      	movs	r2, #3
 80078c0:	409a      	lsls	r2, r3
 80078c2:	0013      	movs	r3, r2
 80078c4:	43da      	mvns	r2, r3
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4013      	ands	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	409a      	lsls	r2, r3
 80078d6:	0013      	movs	r3, r2
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078ea:	2201      	movs	r2, #1
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	409a      	lsls	r2, r3
 80078f0:	0013      	movs	r3, r2
 80078f2:	43da      	mvns	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4013      	ands	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	091b      	lsrs	r3, r3, #4
 8007900:	2201      	movs	r2, #1
 8007902:	401a      	ands	r2, r3
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	409a      	lsls	r2, r3
 8007908:	0013      	movs	r3, r2
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2203      	movs	r2, #3
 800791c:	4013      	ands	r3, r2
 800791e:	2b03      	cmp	r3, #3
 8007920:	d017      	beq.n	8007952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	2203      	movs	r2, #3
 800792e:	409a      	lsls	r2, r3
 8007930:	0013      	movs	r3, r2
 8007932:	43da      	mvns	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4013      	ands	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	409a      	lsls	r2, r3
 8007944:	0013      	movs	r3, r2
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2203      	movs	r2, #3
 8007958:	4013      	ands	r3, r2
 800795a:	2b02      	cmp	r3, #2
 800795c:	d123      	bne.n	80079a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	08da      	lsrs	r2, r3, #3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3208      	adds	r2, #8
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	58d3      	ldr	r3, [r2, r3]
 800796a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2207      	movs	r2, #7
 8007970:	4013      	ands	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	220f      	movs	r2, #15
 8007976:	409a      	lsls	r2, r3
 8007978:	0013      	movs	r3, r2
 800797a:	43da      	mvns	r2, r3
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4013      	ands	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2107      	movs	r1, #7
 800798a:	400b      	ands	r3, r1
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	409a      	lsls	r2, r3
 8007990:	0013      	movs	r3, r2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	08da      	lsrs	r2, r3, #3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3208      	adds	r2, #8
 80079a0:	0092      	lsls	r2, r2, #2
 80079a2:	6939      	ldr	r1, [r7, #16]
 80079a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	2203      	movs	r2, #3
 80079b2:	409a      	lsls	r2, r3
 80079b4:	0013      	movs	r3, r2
 80079b6:	43da      	mvns	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	4013      	ands	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2203      	movs	r2, #3
 80079c4:	401a      	ands	r2, r3
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	409a      	lsls	r2, r3
 80079cc:	0013      	movs	r3, r2
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	23c0      	movs	r3, #192	@ 0xc0
 80079e0:	029b      	lsls	r3, r3, #10
 80079e2:	4013      	ands	r3, r2
 80079e4:	d100      	bne.n	80079e8 <HAL_GPIO_Init+0x174>
 80079e6:	e092      	b.n	8007b0e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80079e8:	4a50      	ldr	r2, [pc, #320]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	089b      	lsrs	r3, r3, #2
 80079ee:	3318      	adds	r3, #24
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	589b      	ldr	r3, [r3, r2]
 80079f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2203      	movs	r2, #3
 80079fa:	4013      	ands	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	220f      	movs	r2, #15
 8007a00:	409a      	lsls	r2, r3
 8007a02:	0013      	movs	r3, r2
 8007a04:	43da      	mvns	r2, r3
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	23a0      	movs	r3, #160	@ 0xa0
 8007a10:	05db      	lsls	r3, r3, #23
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d013      	beq.n	8007a3e <HAL_GPIO_Init+0x1ca>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a45      	ldr	r2, [pc, #276]	@ (8007b30 <HAL_GPIO_Init+0x2bc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00d      	beq.n	8007a3a <HAL_GPIO_Init+0x1c6>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a44      	ldr	r2, [pc, #272]	@ (8007b34 <HAL_GPIO_Init+0x2c0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <HAL_GPIO_Init+0x1c2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a43      	ldr	r2, [pc, #268]	@ (8007b38 <HAL_GPIO_Init+0x2c4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d101      	bne.n	8007a32 <HAL_GPIO_Init+0x1be>
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e006      	b.n	8007a40 <HAL_GPIO_Init+0x1cc>
 8007a32:	2305      	movs	r3, #5
 8007a34:	e004      	b.n	8007a40 <HAL_GPIO_Init+0x1cc>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e002      	b.n	8007a40 <HAL_GPIO_Init+0x1cc>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <HAL_GPIO_Init+0x1cc>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	2103      	movs	r1, #3
 8007a44:	400a      	ands	r2, r1
 8007a46:	00d2      	lsls	r2, r2, #3
 8007a48:	4093      	lsls	r3, r2
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007a50:	4936      	ldr	r1, [pc, #216]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	089b      	lsrs	r3, r3, #2
 8007a56:	3318      	adds	r3, #24
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a5e:	4b33      	ldr	r3, [pc, #204]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	43da      	mvns	r2, r3
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	2380      	movs	r3, #128	@ 0x80
 8007a74:	035b      	lsls	r3, r3, #13
 8007a76:	4013      	ands	r3, r2
 8007a78:	d003      	beq.n	8007a82 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007a82:	4b2a      	ldr	r3, [pc, #168]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007a88:	4b28      	ldr	r3, [pc, #160]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	43da      	mvns	r2, r3
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	4013      	ands	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	2380      	movs	r3, #128	@ 0x80
 8007a9e:	039b      	lsls	r3, r3, #14
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	d003      	beq.n	8007aac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007aac:	4b1f      	ldr	r3, [pc, #124]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007ab4:	2384      	movs	r3, #132	@ 0x84
 8007ab6:	58d3      	ldr	r3, [r2, r3]
 8007ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	43da      	mvns	r2, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	2380      	movs	r3, #128	@ 0x80
 8007aca:	029b      	lsls	r3, r3, #10
 8007acc:	4013      	ands	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007ad8:	4914      	ldr	r1, [pc, #80]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007ada:	2284      	movs	r2, #132	@ 0x84
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007ae0:	4a12      	ldr	r2, [pc, #72]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007ae2:	2380      	movs	r3, #128	@ 0x80
 8007ae4:	58d3      	ldr	r3, [r2, r3]
 8007ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	43da      	mvns	r2, r3
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4013      	ands	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	2380      	movs	r3, #128	@ 0x80
 8007af8:	025b      	lsls	r3, r3, #9
 8007afa:	4013      	ands	r3, r2
 8007afc:	d003      	beq.n	8007b06 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b06:	4909      	ldr	r1, [pc, #36]	@ (8007b2c <HAL_GPIO_Init+0x2b8>)
 8007b08:	2280      	movs	r2, #128	@ 0x80
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	3301      	adds	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	40da      	lsrs	r2, r3
 8007b1c:	1e13      	subs	r3, r2, #0
 8007b1e:	d000      	beq.n	8007b22 <HAL_GPIO_Init+0x2ae>
 8007b20:	e6b0      	b.n	8007884 <HAL_GPIO_Init+0x10>
  }
}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	46c0      	nop			@ (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b006      	add	sp, #24
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40021800 	.word	0x40021800
 8007b30:	50000400 	.word	0x50000400
 8007b34:	50000800 	.word	0x50000800
 8007b38:	50000c00 	.word	0x50000c00

08007b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	000a      	movs	r2, r1
 8007b46:	1cbb      	adds	r3, r7, #2
 8007b48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	1cba      	adds	r2, r7, #2
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	4013      	ands	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007b56:	230f      	movs	r3, #15
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e003      	b.n	8007b68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b60:	230f      	movs	r3, #15
 8007b62:	18fb      	adds	r3, r7, r3
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007b68:	230f      	movs	r3, #15
 8007b6a:	18fb      	adds	r3, r7, r3
 8007b6c:	781b      	ldrb	r3, [r3, #0]
}
 8007b6e:	0018      	movs	r0, r3
 8007b70:	46bd      	mov	sp, r7
 8007b72:	b004      	add	sp, #16
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	0008      	movs	r0, r1
 8007b80:	0011      	movs	r1, r2
 8007b82:	1cbb      	adds	r3, r7, #2
 8007b84:	1c02      	adds	r2, r0, #0
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	1c7b      	adds	r3, r7, #1
 8007b8a:	1c0a      	adds	r2, r1, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b8e:	1c7b      	adds	r3, r7, #1
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b96:	1cbb      	adds	r3, r7, #2
 8007b98:	881a      	ldrh	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007b9e:	e003      	b.n	8007ba8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ba0:	1cbb      	adds	r3, r7, #2
 8007ba2:	881a      	ldrh	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	0002      	movs	r2, r0
 8007bb8:	1dbb      	adds	r3, r7, #6
 8007bba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007bbc:	4b10      	ldr	r3, [pc, #64]	@ (8007c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	1dba      	adds	r2, r7, #6
 8007bc2:	8812      	ldrh	r2, [r2, #0]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	d008      	beq.n	8007bda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007bca:	1dba      	adds	r2, r7, #6
 8007bcc:	8812      	ldrh	r2, [r2, #0]
 8007bce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007bd0:	1dbb      	adds	r3, r7, #6
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f7fb fe89 	bl	80038ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007bda:	4b09      	ldr	r3, [pc, #36]	@ (8007c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	1dba      	adds	r2, r7, #6
 8007be0:	8812      	ldrh	r2, [r2, #0]
 8007be2:	4013      	ands	r3, r2
 8007be4:	d008      	beq.n	8007bf8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007be6:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007be8:	1dba      	adds	r2, r7, #6
 8007bea:	8812      	ldrh	r2, [r2, #0]
 8007bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007bee:	1dbb      	adds	r3, r7, #6
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f7fb fe50 	bl	8003898 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b002      	add	sp, #8
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40021800 	.word	0x40021800

08007c04 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e097      	b.n	8007d46 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2236      	movs	r2, #54	@ 0x36
 8007c1a:	5c9b      	ldrb	r3, [r3, r2]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d113      	bne.n	8007c4a <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2235      	movs	r2, #53	@ 0x35
 8007c26:	2100      	movs	r1, #0
 8007c28:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f000 fa8f 	bl	8008150 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a44      	ldr	r2, [pc, #272]	@ (8007d50 <HAL_LPTIM_Init+0x14c>)
 8007c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	0010      	movs	r0, r2
 8007c48:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2236      	movs	r2, #54	@ 0x36
 8007c4e:	2102      	movs	r1, #2
 8007c50:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d005      	beq.n	8007c6e <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c66:	2380      	movs	r3, #128	@ 0x80
 8007c68:	041b      	lsls	r3, r3, #16
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d103      	bne.n	8007c76 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	221e      	movs	r2, #30
 8007c72:	4393      	bics	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	4a36      	ldr	r2, [pc, #216]	@ (8007d54 <HAL_LPTIM_Init+0x150>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4a35      	ldr	r2, [pc, #212]	@ (8007d58 <HAL_LPTIM_Init+0x154>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a34      	ldr	r2, [pc, #208]	@ (8007d5c <HAL_LPTIM_Init+0x158>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c98:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007c9e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007ca4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007caa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d107      	bne.n	8007cca <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d005      	beq.n	8007cde <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cd6:	2380      	movs	r3, #128	@ 0x80
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d107      	bne.n	8007cee <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	@ (8007d54 <HAL_LPTIM_Init+0x150>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00a      	beq.n	8007d0e <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007d00:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007d06:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a11      	ldr	r2, [pc, #68]	@ (8007d60 <HAL_LPTIM_Init+0x15c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d108      	bne.n	8007d32 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d30:	e004      	b.n	8007d3c <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2236      	movs	r2, #54	@ 0x36
 8007d40:	2101      	movs	r1, #1
 8007d42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b004      	add	sp, #16
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	08004a09 	.word	0x08004a09
 8007d54:	0000ffff 	.word	0x0000ffff
 8007d58:	ffff1f3f 	.word	0xffff1f3f
 8007d5c:	ff19f1fe 	.word	0xff19f1fe
 8007d60:	40007c00 	.word	0x40007c00

08007d64 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2236      	movs	r2, #54	@ 0x36
 8007d74:	2102      	movs	r1, #2
 8007d76:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2180      	movs	r1, #128	@ 0x80
 8007d84:	0349      	lsls	r1, r1, #13
 8007d86:	430a      	orrs	r2, r1
 8007d88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2101      	movs	r1, #1
 8007d96:	430a      	orrs	r2, r1
 8007d98:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2110      	movs	r1, #16
 8007dae:	0018      	movs	r0, r3
 8007db0:	f000 f9fa 	bl	80081a8 <LPTIM_WaitForFlag>
 8007db4:	0003      	movs	r3, r0
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d101      	bne.n	8007dbe <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e060      	b.n	8007e80 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2108      	movs	r1, #8
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f000 f9e8 	bl	80081a8 <LPTIM_WaitForFlag>
 8007dd8:	0003      	movs	r3, r0
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d101      	bne.n	8007de2 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e04e      	b.n	8007e80 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	0018      	movs	r0, r3
 8007de6:	f000 fa17 	bl	8008218 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	0018      	movs	r0, r3
 8007dee:	f000 f9a3 	bl	8008138 <HAL_LPTIM_GetState>
 8007df2:	0003      	movs	r3, r0
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d101      	bne.n	8007dfc <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e041      	b.n	8007e80 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2110      	movs	r1, #16
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2108      	movs	r1, #8
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2102      	movs	r1, #2
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2101      	movs	r1, #1
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	4a11      	ldr	r2, [pc, #68]	@ (8007e88 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2104      	movs	r1, #4
 8007e52:	430a      	orrs	r2, r1
 8007e54:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2101      	movs	r1, #1
 8007e62:	430a      	orrs	r2, r1
 8007e64:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2102      	movs	r1, #2
 8007e72:	430a      	orrs	r2, r1
 8007e74:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2236      	movs	r2, #54	@ 0x36
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	0018      	movs	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b004      	add	sp, #16
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	0000ffff 	.word	0x0000ffff

08007e8c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d10f      	bne.n	8007ec2 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d108      	bne.n	8007ec2 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	0010      	movs	r0, r2
 8007ec0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d10f      	bne.n	8007ef0 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d108      	bne.n	8007ef0 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	0010      	movs	r0, r2
 8007eee:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d10f      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	2204      	movs	r2, #4
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d108      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2204      	movs	r2, #4
 8007f12:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	0010      	movs	r0, r2
 8007f1c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2208      	movs	r2, #8
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d10f      	bne.n	8007f4c <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2208      	movs	r2, #8
 8007f34:	4013      	ands	r3, r2
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d108      	bne.n	8007f4c <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2208      	movs	r2, #8
 8007f40:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	0010      	movs	r0, r2
 8007f4a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2210      	movs	r2, #16
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d10f      	bne.n	8007f7a <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	2210      	movs	r2, #16
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d108      	bne.n	8007f7a <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	0010      	movs	r0, r2
 8007f78:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2220      	movs	r2, #32
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	d10f      	bne.n	8007fa8 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d108      	bne.n	8007fa8 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	0010      	movs	r0, r2
 8007fa6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2240      	movs	r2, #64	@ 0x40
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b40      	cmp	r3, #64	@ 0x40
 8007fb4:	d10f      	bne.n	8007fd6 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2240      	movs	r2, #64	@ 0x40
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	2b40      	cmp	r3, #64	@ 0x40
 8007fc2:	d108      	bne.n	8007fd6 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2240      	movs	r2, #64	@ 0x40
 8007fca:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	0010      	movs	r0, r2
 8007fd4:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	b002      	add	sp, #8
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007fe6:	46c0      	nop			@ (mov r8, r8)
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b002      	add	sp, #8
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	b002      	add	sp, #8
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	46bd      	mov	sp, r7
 800800a:	b002      	add	sp, #8
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	46bd      	mov	sp, r7
 800801a:	b002      	add	sp, #8
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	46bd      	mov	sp, r7
 800802a:	b002      	add	sp, #8
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008036:	46c0      	nop			@ (mov r8, r8)
 8008038:	46bd      	mov	sp, r7
 800803a:	b002      	add	sp, #8
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b002      	add	sp, #8
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	230b      	movs	r3, #11
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	1c0a      	adds	r2, r1, #0
 8008060:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008062:	2317      	movs	r3, #23
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e05a      	b.n	800812a <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2236      	movs	r2, #54	@ 0x36
 8008078:	5c9b      	ldrb	r3, [r3, r2]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	d132      	bne.n	80080e6 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008080:	230b      	movs	r3, #11
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b08      	cmp	r3, #8
 8008088:	d828      	bhi.n	80080dc <HAL_LPTIM_RegisterCallback+0x8c>
 800808a:	009a      	lsls	r2, r3, #2
 800808c:	4b29      	ldr	r3, [pc, #164]	@ (8008134 <HAL_LPTIM_RegisterCallback+0xe4>)
 800808e:	18d3      	adds	r3, r2, r3
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800809a:	e043      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80080a2:	e03f      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80080aa:	e03b      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80080b2:	e037      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80080ba:	e033      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80080c2:	e02f      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80080ca:	e02b      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80080d2:	e027      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80080da:	e023      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80080dc:	2317      	movs	r3, #23
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	2201      	movs	r2, #1
 80080e2:	701a      	strb	r2, [r3, #0]
        break;
 80080e4:	e01e      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2236      	movs	r2, #54	@ 0x36
 80080ea:	5c9b      	ldrb	r3, [r3, r2]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d114      	bne.n	800811c <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80080f2:	230b      	movs	r3, #11
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <HAL_LPTIM_RegisterCallback+0xb2>
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d004      	beq.n	800810a <HAL_LPTIM_RegisterCallback+0xba>
 8008100:	e007      	b.n	8008112 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008108:	e00c      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008110:	e008      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008112:	2317      	movs	r3, #23
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
        break;
 800811a:	e003      	b.n	8008124 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800811c:	2317      	movs	r3, #23
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	2201      	movs	r2, #1
 8008122:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008124:	2317      	movs	r3, #23
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	781b      	ldrb	r3, [r3, #0]
}
 800812a:	0018      	movs	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	b006      	add	sp, #24
 8008130:	bd80      	pop	{r7, pc}
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	0800d794 	.word	0x0800d794

08008138 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2236      	movs	r2, #54	@ 0x36
 8008144:	5c9b      	ldrb	r3, [r3, r2]
 8008146:	b2db      	uxtb	r3, r3
}
 8008148:	0018      	movs	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}

08008150 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a0c      	ldr	r2, [pc, #48]	@ (800818c <LPTIM_ResetCallback+0x3c>)
 800815c:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a0b      	ldr	r2, [pc, #44]	@ (8008190 <LPTIM_ResetCallback+0x40>)
 8008162:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a0b      	ldr	r2, [pc, #44]	@ (8008194 <LPTIM_ResetCallback+0x44>)
 8008168:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a0a      	ldr	r2, [pc, #40]	@ (8008198 <LPTIM_ResetCallback+0x48>)
 800816e:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <LPTIM_ResetCallback+0x4c>)
 8008174:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <LPTIM_ResetCallback+0x50>)
 800817a:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a09      	ldr	r2, [pc, #36]	@ (80081a4 <LPTIM_ResetCallback+0x54>)
 8008180:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	46bd      	mov	sp, r7
 8008186:	b002      	add	sp, #8
 8008188:	bd80      	pop	{r7, pc}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	08007fdf 	.word	0x08007fdf
 8008190:	08007fef 	.word	0x08007fef
 8008194:	08007fff 	.word	0x08007fff
 8008198:	0800800f 	.word	0x0800800f
 800819c:	0800801f 	.word	0x0800801f
 80081a0:	0800802f 	.word	0x0800802f
 80081a4:	0800803f 	.word	0x0800803f

080081a8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80081b2:	230f      	movs	r3, #15
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80081ba:	4b15      	ldr	r3, [pc, #84]	@ (8008210 <LPTIM_WaitForFlag+0x68>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4915      	ldr	r1, [pc, #84]	@ (8008214 <LPTIM_WaitForFlag+0x6c>)
 80081c0:	0018      	movs	r0, r3
 80081c2:	f7f7 ff9f 	bl	8000104 <__udivsi3>
 80081c6:	0003      	movs	r3, r0
 80081c8:	001a      	movs	r2, r3
 80081ca:	0013      	movs	r3, r2
 80081cc:	015b      	lsls	r3, r3, #5
 80081ce:	1a9b      	subs	r3, r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	189b      	adds	r3, r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	3b01      	subs	r3, #1
 80081dc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d103      	bne.n	80081ec <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80081e4:	230f      	movs	r3, #15
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	2203      	movs	r2, #3
 80081ea:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4013      	ands	r3, r2
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d002      	beq.n	8008202 <LPTIM_WaitForFlag+0x5a>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1ea      	bne.n	80081d8 <LPTIM_WaitForFlag+0x30>

  return result;
 8008202:	230f      	movs	r3, #15
 8008204:	18fb      	adds	r3, r7, r3
 8008206:	781b      	ldrb	r3, [r3, #0]
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	b004      	add	sp, #16
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000440 	.word	0x20000440
 8008214:	00004e20 	.word	0x00004e20

08008218 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08c      	sub	sp, #48	@ 0x30
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008224:	f3ef 8310 	mrs	r3, PRIMASK
 8008228:	60fb      	str	r3, [r7, #12]
  return(result);
 800822a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800822e:	2301      	movs	r3, #1
 8008230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a72      	ldr	r2, [pc, #456]	@ (8008408 <LPTIM_Disable+0x1f0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <LPTIM_Disable+0x34>
 8008244:	4a71      	ldr	r2, [pc, #452]	@ (800840c <LPTIM_Disable+0x1f4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d007      	beq.n	800825a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800824a:	e00d      	b.n	8008268 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800824c:	4b70      	ldr	r3, [pc, #448]	@ (8008410 <LPTIM_Disable+0x1f8>)
 800824e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008250:	23c0      	movs	r3, #192	@ 0xc0
 8008252:	031b      	lsls	r3, r3, #12
 8008254:	4013      	ands	r3, r2
 8008256:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008258:	e006      	b.n	8008268 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800825a:	4b6d      	ldr	r3, [pc, #436]	@ (8008410 <LPTIM_Disable+0x1f8>)
 800825c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800825e:	23c0      	movs	r3, #192	@ 0xc0
 8008260:	039b      	lsls	r3, r3, #14
 8008262:	4013      	ands	r3, r2
 8008264:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008266:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828e:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a5c      	ldr	r2, [pc, #368]	@ (8008408 <LPTIM_Disable+0x1f0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <LPTIM_Disable+0x8a>
 800829a:	4a5c      	ldr	r2, [pc, #368]	@ (800840c <LPTIM_Disable+0x1f4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00e      	beq.n	80082be <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80082a0:	e01b      	b.n	80082da <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80082a2:	4b5b      	ldr	r3, [pc, #364]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a6:	4b5a      	ldr	r3, [pc, #360]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082a8:	2180      	movs	r1, #128	@ 0x80
 80082aa:	0609      	lsls	r1, r1, #24
 80082ac:	430a      	orrs	r2, r1
 80082ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80082b0:	4b57      	ldr	r3, [pc, #348]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b4:	4b56      	ldr	r3, [pc, #344]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082b6:	0052      	lsls	r2, r2, #1
 80082b8:	0852      	lsrs	r2, r2, #1
 80082ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80082bc:	e00d      	b.n	80082da <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80082be:	4b54      	ldr	r3, [pc, #336]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c2:	4b53      	ldr	r3, [pc, #332]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082c4:	2180      	movs	r1, #128	@ 0x80
 80082c6:	05c9      	lsls	r1, r1, #23
 80082c8:	430a      	orrs	r2, r1
 80082ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80082cc:	4b50      	ldr	r3, [pc, #320]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d0:	4b4f      	ldr	r3, [pc, #316]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082d2:	4950      	ldr	r1, [pc, #320]	@ (8008414 <LPTIM_Disable+0x1fc>)
 80082d4:	400a      	ands	r2, r1
 80082d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80082d8:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <LPTIM_Disable+0xd0>
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d100      	bne.n	80082e8 <LPTIM_Disable+0xd0>
 80082e6:	e071      	b.n	80083cc <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a46      	ldr	r2, [pc, #280]	@ (8008408 <LPTIM_Disable+0x1f0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <LPTIM_Disable+0xe2>
 80082f2:	4a46      	ldr	r2, [pc, #280]	@ (800840c <LPTIM_Disable+0x1f4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80082f8:	e00d      	b.n	8008316 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80082fa:	4b45      	ldr	r3, [pc, #276]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80082fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082fe:	4b44      	ldr	r3, [pc, #272]	@ (8008410 <LPTIM_Disable+0x1f8>)
 8008300:	4945      	ldr	r1, [pc, #276]	@ (8008418 <LPTIM_Disable+0x200>)
 8008302:	400a      	ands	r2, r1
 8008304:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008306:	e006      	b.n	8008316 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008308:	4b41      	ldr	r3, [pc, #260]	@ (8008410 <LPTIM_Disable+0x1f8>)
 800830a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800830c:	4b40      	ldr	r3, [pc, #256]	@ (8008410 <LPTIM_Disable+0x1f8>)
 800830e:	4943      	ldr	r1, [pc, #268]	@ (800841c <LPTIM_Disable+0x204>)
 8008310:	400a      	ands	r2, r1
 8008312:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008314:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01b      	beq.n	8008354 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2101      	movs	r1, #1
 8008328:	430a      	orrs	r2, r1
 800832a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2108      	movs	r1, #8
 8008338:	0018      	movs	r0, r3
 800833a:	f7ff ff35 	bl	80081a8 <LPTIM_WaitForFlag>
 800833e:	0003      	movs	r3, r0
 8008340:	2b03      	cmp	r3, #3
 8008342:	d103      	bne.n	800834c <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2236      	movs	r2, #54	@ 0x36
 8008348:	2103      	movs	r1, #3
 800834a:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2208      	movs	r2, #8
 8008352:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01b      	beq.n	8008392 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691a      	ldr	r2, [r3, #16]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2101      	movs	r1, #1
 8008366:	430a      	orrs	r2, r1
 8008368:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2110      	movs	r1, #16
 8008376:	0018      	movs	r0, r3
 8008378:	f7ff ff16 	bl	80081a8 <LPTIM_WaitForFlag>
 800837c:	0003      	movs	r3, r0
 800837e:	2b03      	cmp	r3, #3
 8008380:	d103      	bne.n	800838a <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2236      	movs	r2, #54	@ 0x36
 8008386:	2103      	movs	r1, #3
 8008388:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2210      	movs	r2, #16
 8008390:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a1c      	ldr	r2, [pc, #112]	@ (8008408 <LPTIM_Disable+0x1f0>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <LPTIM_Disable+0x18c>
 800839c:	4a1b      	ldr	r2, [pc, #108]	@ (800840c <LPTIM_Disable+0x1f4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00a      	beq.n	80083b8 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80083a2:	e013      	b.n	80083cc <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80083a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80083a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008418 <LPTIM_Disable+0x200>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	0019      	movs	r1, r3
 80083ae:	4b18      	ldr	r3, [pc, #96]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80083b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083b2:	430a      	orrs	r2, r1
 80083b4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80083b6:	e009      	b.n	80083cc <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80083b8:	4b15      	ldr	r3, [pc, #84]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80083ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083bc:	4a17      	ldr	r2, [pc, #92]	@ (800841c <LPTIM_Disable+0x204>)
 80083be:	4013      	ands	r3, r2
 80083c0:	0019      	movs	r1, r3
 80083c2:	4b13      	ldr	r3, [pc, #76]	@ (8008410 <LPTIM_Disable+0x1f8>)
 80083c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c6:	430a      	orrs	r2, r1
 80083c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80083ca:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2101      	movs	r1, #1
 80083d8:	438a      	bics	r2, r1
 80083da:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6a3a      	ldr	r2, [r7, #32]
 80083ea:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f383 8810 	msr	PRIMASK, r3
}
 80083fe:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008400:	46c0      	nop			@ (mov r8, r8)
 8008402:	46bd      	mov	sp, r7
 8008404:	b00c      	add	sp, #48	@ 0x30
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40007c00 	.word	0x40007c00
 800840c:	40009400 	.word	0x40009400
 8008410:	40021000 	.word	0x40021000
 8008414:	bfffffff 	.word	0xbfffffff
 8008418:	fff3ffff 	.word	0xfff3ffff
 800841c:	ffcfffff 	.word	0xffcfffff

08008420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008428:	4b19      	ldr	r3, [pc, #100]	@ (8008490 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a19      	ldr	r2, [pc, #100]	@ (8008494 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800842e:	4013      	ands	r3, r2
 8008430:	0019      	movs	r1, r3
 8008432:	4b17      	ldr	r3, [pc, #92]	@ (8008490 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	430a      	orrs	r2, r1
 8008438:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	429a      	cmp	r2, r3
 8008442:	d11f      	bne.n	8008484 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008444:	4b14      	ldr	r3, [pc, #80]	@ (8008498 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	0013      	movs	r3, r2
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	189b      	adds	r3, r3, r2
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	4912      	ldr	r1, [pc, #72]	@ (800849c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008452:	0018      	movs	r0, r3
 8008454:	f7f7 fe56 	bl	8000104 <__udivsi3>
 8008458:	0003      	movs	r3, r0
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800845e:	e008      	b.n	8008472 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3b01      	subs	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e001      	b.n	8008472 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e009      	b.n	8008486 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008472:	4b07      	ldr	r3, [pc, #28]	@ (8008490 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008474:	695a      	ldr	r2, [r3, #20]
 8008476:	2380      	movs	r3, #128	@ 0x80
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	401a      	ands	r2, r3
 800847c:	2380      	movs	r3, #128	@ 0x80
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	429a      	cmp	r2, r3
 8008482:	d0ed      	beq.n	8008460 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	0018      	movs	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	b004      	add	sp, #16
 800848c:	bd80      	pop	{r7, pc}
 800848e:	46c0      	nop			@ (mov r8, r8)
 8008490:	40007000 	.word	0x40007000
 8008494:	fffff9ff 	.word	0xfffff9ff
 8008498:	20000440 	.word	0x20000440
 800849c:	000f4240 	.word	0x000f4240

080084a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80084a4:	4b03      	ldr	r3, [pc, #12]	@ (80084b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	23e0      	movs	r3, #224	@ 0xe0
 80084aa:	01db      	lsls	r3, r3, #7
 80084ac:	4013      	ands	r3, r2
}
 80084ae:	0018      	movs	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40021000 	.word	0x40021000

080084b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e2fe      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2201      	movs	r2, #1
 80084d0:	4013      	ands	r3, r2
 80084d2:	d100      	bne.n	80084d6 <HAL_RCC_OscConfig+0x1e>
 80084d4:	e07c      	b.n	80085d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084d6:	4bc3      	ldr	r3, [pc, #780]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2238      	movs	r2, #56	@ 0x38
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084e0:	4bc0      	ldr	r3, [pc, #768]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	2203      	movs	r2, #3
 80084e6:	4013      	ands	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d102      	bne.n	80084f6 <HAL_RCC_OscConfig+0x3e>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d002      	beq.n	80084fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d10b      	bne.n	8008514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084fc:	4bb9      	ldr	r3, [pc, #740]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	2380      	movs	r3, #128	@ 0x80
 8008502:	029b      	lsls	r3, r3, #10
 8008504:	4013      	ands	r3, r2
 8008506:	d062      	beq.n	80085ce <HAL_RCC_OscConfig+0x116>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d15e      	bne.n	80085ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e2d9      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	2380      	movs	r3, #128	@ 0x80
 800851a:	025b      	lsls	r3, r3, #9
 800851c:	429a      	cmp	r2, r3
 800851e:	d107      	bne.n	8008530 <HAL_RCC_OscConfig+0x78>
 8008520:	4bb0      	ldr	r3, [pc, #704]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4baf      	ldr	r3, [pc, #700]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008526:	2180      	movs	r1, #128	@ 0x80
 8008528:	0249      	lsls	r1, r1, #9
 800852a:	430a      	orrs	r2, r1
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	e020      	b.n	8008572 <HAL_RCC_OscConfig+0xba>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	23a0      	movs	r3, #160	@ 0xa0
 8008536:	02db      	lsls	r3, r3, #11
 8008538:	429a      	cmp	r2, r3
 800853a:	d10e      	bne.n	800855a <HAL_RCC_OscConfig+0xa2>
 800853c:	4ba9      	ldr	r3, [pc, #676]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4ba8      	ldr	r3, [pc, #672]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008542:	2180      	movs	r1, #128	@ 0x80
 8008544:	02c9      	lsls	r1, r1, #11
 8008546:	430a      	orrs	r2, r1
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	4ba6      	ldr	r3, [pc, #664]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4ba5      	ldr	r3, [pc, #660]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008550:	2180      	movs	r1, #128	@ 0x80
 8008552:	0249      	lsls	r1, r1, #9
 8008554:	430a      	orrs	r2, r1
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e00b      	b.n	8008572 <HAL_RCC_OscConfig+0xba>
 800855a:	4ba2      	ldr	r3, [pc, #648]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4ba1      	ldr	r3, [pc, #644]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008560:	49a1      	ldr	r1, [pc, #644]	@ (80087e8 <HAL_RCC_OscConfig+0x330>)
 8008562:	400a      	ands	r2, r1
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	4b9f      	ldr	r3, [pc, #636]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b9e      	ldr	r3, [pc, #632]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800856c:	499f      	ldr	r1, [pc, #636]	@ (80087ec <HAL_RCC_OscConfig+0x334>)
 800856e:	400a      	ands	r2, r1
 8008570:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d014      	beq.n	80085a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857a:	f7fd fb19 	bl	8005bb0 <HAL_GetTick>
 800857e:	0003      	movs	r3, r0
 8008580:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008584:	f7fd fb14 	bl	8005bb0 <HAL_GetTick>
 8008588:	0002      	movs	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b64      	cmp	r3, #100	@ 0x64
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e298      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008596:	4b93      	ldr	r3, [pc, #588]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	2380      	movs	r3, #128	@ 0x80
 800859c:	029b      	lsls	r3, r3, #10
 800859e:	4013      	ands	r3, r2
 80085a0:	d0f0      	beq.n	8008584 <HAL_RCC_OscConfig+0xcc>
 80085a2:	e015      	b.n	80085d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fd fb04 	bl	8005bb0 <HAL_GetTick>
 80085a8:	0003      	movs	r3, r0
 80085aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085ac:	e008      	b.n	80085c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085ae:	f7fd faff 	bl	8005bb0 <HAL_GetTick>
 80085b2:	0002      	movs	r2, r0
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b64      	cmp	r3, #100	@ 0x64
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e283      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085c0:	4b88      	ldr	r3, [pc, #544]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	2380      	movs	r3, #128	@ 0x80
 80085c6:	029b      	lsls	r3, r3, #10
 80085c8:	4013      	ands	r3, r2
 80085ca:	d1f0      	bne.n	80085ae <HAL_RCC_OscConfig+0xf6>
 80085cc:	e000      	b.n	80085d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2202      	movs	r2, #2
 80085d6:	4013      	ands	r3, r2
 80085d8:	d100      	bne.n	80085dc <HAL_RCC_OscConfig+0x124>
 80085da:	e099      	b.n	8008710 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085dc:	4b81      	ldr	r3, [pc, #516]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2238      	movs	r2, #56	@ 0x38
 80085e2:	4013      	ands	r3, r2
 80085e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085e6:	4b7f      	ldr	r3, [pc, #508]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	2203      	movs	r2, #3
 80085ec:	4013      	ands	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b10      	cmp	r3, #16
 80085f4:	d102      	bne.n	80085fc <HAL_RCC_OscConfig+0x144>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d002      	beq.n	8008602 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d135      	bne.n	800866e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008602:	4b78      	ldr	r3, [pc, #480]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	2380      	movs	r3, #128	@ 0x80
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4013      	ands	r3, r2
 800860c:	d005      	beq.n	800861a <HAL_RCC_OscConfig+0x162>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e256      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800861a:	4b72      	ldr	r3, [pc, #456]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	4a74      	ldr	r2, [pc, #464]	@ (80087f0 <HAL_RCC_OscConfig+0x338>)
 8008620:	4013      	ands	r3, r2
 8008622:	0019      	movs	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	021a      	lsls	r2, r3, #8
 800862a:	4b6e      	ldr	r3, [pc, #440]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d112      	bne.n	800865c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008636:	4b6b      	ldr	r3, [pc, #428]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a6e      	ldr	r2, [pc, #440]	@ (80087f4 <HAL_RCC_OscConfig+0x33c>)
 800863c:	4013      	ands	r3, r2
 800863e:	0019      	movs	r1, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	4b67      	ldr	r3, [pc, #412]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008646:	430a      	orrs	r2, r1
 8008648:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800864a:	4b66      	ldr	r3, [pc, #408]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	0adb      	lsrs	r3, r3, #11
 8008650:	2207      	movs	r2, #7
 8008652:	4013      	ands	r3, r2
 8008654:	4a68      	ldr	r2, [pc, #416]	@ (80087f8 <HAL_RCC_OscConfig+0x340>)
 8008656:	40da      	lsrs	r2, r3
 8008658:	4b68      	ldr	r3, [pc, #416]	@ (80087fc <HAL_RCC_OscConfig+0x344>)
 800865a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800865c:	4b68      	ldr	r3, [pc, #416]	@ (8008800 <HAL_RCC_OscConfig+0x348>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	0018      	movs	r0, r3
 8008662:	f7fd fa49 	bl	8005af8 <HAL_InitTick>
 8008666:	1e03      	subs	r3, r0, #0
 8008668:	d051      	beq.n	800870e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e22c      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d030      	beq.n	80086d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008676:	4b5b      	ldr	r3, [pc, #364]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a5e      	ldr	r2, [pc, #376]	@ (80087f4 <HAL_RCC_OscConfig+0x33c>)
 800867c:	4013      	ands	r3, r2
 800867e:	0019      	movs	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	4b57      	ldr	r3, [pc, #348]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008686:	430a      	orrs	r2, r1
 8008688:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800868a:	4b56      	ldr	r3, [pc, #344]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4b55      	ldr	r3, [pc, #340]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008690:	2180      	movs	r1, #128	@ 0x80
 8008692:	0049      	lsls	r1, r1, #1
 8008694:	430a      	orrs	r2, r1
 8008696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008698:	f7fd fa8a 	bl	8005bb0 <HAL_GetTick>
 800869c:	0003      	movs	r3, r0
 800869e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086a2:	f7fd fa85 	bl	8005bb0 <HAL_GetTick>
 80086a6:	0002      	movs	r2, r0
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e209      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086b4:	4b4b      	ldr	r3, [pc, #300]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	2380      	movs	r3, #128	@ 0x80
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4013      	ands	r3, r2
 80086be:	d0f0      	beq.n	80086a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086c0:	4b48      	ldr	r3, [pc, #288]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	4a4a      	ldr	r2, [pc, #296]	@ (80087f0 <HAL_RCC_OscConfig+0x338>)
 80086c6:	4013      	ands	r3, r2
 80086c8:	0019      	movs	r1, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	021a      	lsls	r2, r3, #8
 80086d0:	4b44      	ldr	r3, [pc, #272]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
 80086d6:	e01b      	b.n	8008710 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80086d8:	4b42      	ldr	r3, [pc, #264]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	4b41      	ldr	r3, [pc, #260]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80086de:	4949      	ldr	r1, [pc, #292]	@ (8008804 <HAL_RCC_OscConfig+0x34c>)
 80086e0:	400a      	ands	r2, r1
 80086e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fd fa64 	bl	8005bb0 <HAL_GetTick>
 80086e8:	0003      	movs	r3, r0
 80086ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086ec:	e008      	b.n	8008700 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086ee:	f7fd fa5f 	bl	8005bb0 <HAL_GetTick>
 80086f2:	0002      	movs	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e1e3      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008700:	4b38      	ldr	r3, [pc, #224]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	2380      	movs	r3, #128	@ 0x80
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4013      	ands	r3, r2
 800870a:	d1f0      	bne.n	80086ee <HAL_RCC_OscConfig+0x236>
 800870c:	e000      	b.n	8008710 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800870e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2208      	movs	r2, #8
 8008716:	4013      	ands	r3, r2
 8008718:	d047      	beq.n	80087aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800871a:	4b32      	ldr	r3, [pc, #200]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2238      	movs	r2, #56	@ 0x38
 8008720:	4013      	ands	r3, r2
 8008722:	2b18      	cmp	r3, #24
 8008724:	d10a      	bne.n	800873c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008726:	4b2f      	ldr	r3, [pc, #188]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800872a:	2202      	movs	r2, #2
 800872c:	4013      	ands	r3, r2
 800872e:	d03c      	beq.n	80087aa <HAL_RCC_OscConfig+0x2f2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d138      	bne.n	80087aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e1c5      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d019      	beq.n	8008778 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008744:	4b27      	ldr	r3, [pc, #156]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 8008746:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008748:	4b26      	ldr	r3, [pc, #152]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800874a:	2101      	movs	r1, #1
 800874c:	430a      	orrs	r2, r1
 800874e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fd fa2e 	bl	8005bb0 <HAL_GetTick>
 8008754:	0003      	movs	r3, r0
 8008756:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875a:	f7fd fa29 	bl	8005bb0 <HAL_GetTick>
 800875e:	0002      	movs	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e1ad      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800876c:	4b1d      	ldr	r3, [pc, #116]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800876e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008770:	2202      	movs	r2, #2
 8008772:	4013      	ands	r3, r2
 8008774:	d0f1      	beq.n	800875a <HAL_RCC_OscConfig+0x2a2>
 8008776:	e018      	b.n	80087aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008778:	4b1a      	ldr	r3, [pc, #104]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800877a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800877c:	4b19      	ldr	r3, [pc, #100]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 800877e:	2101      	movs	r1, #1
 8008780:	438a      	bics	r2, r1
 8008782:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008784:	f7fd fa14 	bl	8005bb0 <HAL_GetTick>
 8008788:	0003      	movs	r3, r0
 800878a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800878e:	f7fd fa0f 	bl	8005bb0 <HAL_GetTick>
 8008792:	0002      	movs	r2, r0
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e193      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087a0:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80087a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087a4:	2202      	movs	r2, #2
 80087a6:	4013      	ands	r3, r2
 80087a8:	d1f1      	bne.n	800878e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2204      	movs	r2, #4
 80087b0:	4013      	ands	r3, r2
 80087b2:	d100      	bne.n	80087b6 <HAL_RCC_OscConfig+0x2fe>
 80087b4:	e0c6      	b.n	8008944 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087b6:	231f      	movs	r3, #31
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80087be:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2238      	movs	r2, #56	@ 0x38
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d11e      	bne.n	8008808 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80087ca:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <HAL_RCC_OscConfig+0x32c>)
 80087cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ce:	2202      	movs	r2, #2
 80087d0:	4013      	ands	r3, r2
 80087d2:	d100      	bne.n	80087d6 <HAL_RCC_OscConfig+0x31e>
 80087d4:	e0b6      	b.n	8008944 <HAL_RCC_OscConfig+0x48c>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d000      	beq.n	80087e0 <HAL_RCC_OscConfig+0x328>
 80087de:	e0b1      	b.n	8008944 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e171      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
 80087e4:	40021000 	.word	0x40021000
 80087e8:	fffeffff 	.word	0xfffeffff
 80087ec:	fffbffff 	.word	0xfffbffff
 80087f0:	ffff80ff 	.word	0xffff80ff
 80087f4:	ffffc7ff 	.word	0xffffc7ff
 80087f8:	00f42400 	.word	0x00f42400
 80087fc:	20000440 	.word	0x20000440
 8008800:	20000444 	.word	0x20000444
 8008804:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008808:	4bb1      	ldr	r3, [pc, #708]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800880a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800880c:	2380      	movs	r3, #128	@ 0x80
 800880e:	055b      	lsls	r3, r3, #21
 8008810:	4013      	ands	r3, r2
 8008812:	d101      	bne.n	8008818 <HAL_RCC_OscConfig+0x360>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <HAL_RCC_OscConfig+0x362>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d011      	beq.n	8008842 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800881e:	4bac      	ldr	r3, [pc, #688]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008822:	4bab      	ldr	r3, [pc, #684]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008824:	2180      	movs	r1, #128	@ 0x80
 8008826:	0549      	lsls	r1, r1, #21
 8008828:	430a      	orrs	r2, r1
 800882a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800882c:	4ba8      	ldr	r3, [pc, #672]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800882e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008830:	2380      	movs	r3, #128	@ 0x80
 8008832:	055b      	lsls	r3, r3, #21
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800883a:	231f      	movs	r3, #31
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	2201      	movs	r2, #1
 8008840:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008842:	4ba4      	ldr	r3, [pc, #656]	@ (8008ad4 <HAL_RCC_OscConfig+0x61c>)
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	2380      	movs	r3, #128	@ 0x80
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	4013      	ands	r3, r2
 800884c:	d11a      	bne.n	8008884 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800884e:	4ba1      	ldr	r3, [pc, #644]	@ (8008ad4 <HAL_RCC_OscConfig+0x61c>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4ba0      	ldr	r3, [pc, #640]	@ (8008ad4 <HAL_RCC_OscConfig+0x61c>)
 8008854:	2180      	movs	r1, #128	@ 0x80
 8008856:	0049      	lsls	r1, r1, #1
 8008858:	430a      	orrs	r2, r1
 800885a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800885c:	f7fd f9a8 	bl	8005bb0 <HAL_GetTick>
 8008860:	0003      	movs	r3, r0
 8008862:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008864:	e008      	b.n	8008878 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008866:	f7fd f9a3 	bl	8005bb0 <HAL_GetTick>
 800886a:	0002      	movs	r2, r0
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e127      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008878:	4b96      	ldr	r3, [pc, #600]	@ (8008ad4 <HAL_RCC_OscConfig+0x61c>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	2380      	movs	r3, #128	@ 0x80
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	4013      	ands	r3, r2
 8008882:	d0f0      	beq.n	8008866 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d106      	bne.n	800889a <HAL_RCC_OscConfig+0x3e2>
 800888c:	4b90      	ldr	r3, [pc, #576]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800888e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008890:	4b8f      	ldr	r3, [pc, #572]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008892:	2101      	movs	r1, #1
 8008894:	430a      	orrs	r2, r1
 8008896:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008898:	e01c      	b.n	80088d4 <HAL_RCC_OscConfig+0x41c>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d10c      	bne.n	80088bc <HAL_RCC_OscConfig+0x404>
 80088a2:	4b8b      	ldr	r3, [pc, #556]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088a6:	4b8a      	ldr	r3, [pc, #552]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088a8:	2104      	movs	r1, #4
 80088aa:	430a      	orrs	r2, r1
 80088ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088ae:	4b88      	ldr	r3, [pc, #544]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088b2:	4b87      	ldr	r3, [pc, #540]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088b4:	2101      	movs	r1, #1
 80088b6:	430a      	orrs	r2, r1
 80088b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088ba:	e00b      	b.n	80088d4 <HAL_RCC_OscConfig+0x41c>
 80088bc:	4b84      	ldr	r3, [pc, #528]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088c0:	4b83      	ldr	r3, [pc, #524]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088c2:	2101      	movs	r1, #1
 80088c4:	438a      	bics	r2, r1
 80088c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088c8:	4b81      	ldr	r3, [pc, #516]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088cc:	4b80      	ldr	r3, [pc, #512]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088ce:	2104      	movs	r1, #4
 80088d0:	438a      	bics	r2, r1
 80088d2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d014      	beq.n	8008906 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7fd f968 	bl	8005bb0 <HAL_GetTick>
 80088e0:	0003      	movs	r3, r0
 80088e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088e4:	e009      	b.n	80088fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088e6:	f7fd f963 	bl	8005bb0 <HAL_GetTick>
 80088ea:	0002      	movs	r2, r0
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	4a79      	ldr	r2, [pc, #484]	@ (8008ad8 <HAL_RCC_OscConfig+0x620>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e0e6      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088fa:	4b75      	ldr	r3, [pc, #468]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80088fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088fe:	2202      	movs	r2, #2
 8008900:	4013      	ands	r3, r2
 8008902:	d0f0      	beq.n	80088e6 <HAL_RCC_OscConfig+0x42e>
 8008904:	e013      	b.n	800892e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008906:	f7fd f953 	bl	8005bb0 <HAL_GetTick>
 800890a:	0003      	movs	r3, r0
 800890c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800890e:	e009      	b.n	8008924 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008910:	f7fd f94e 	bl	8005bb0 <HAL_GetTick>
 8008914:	0002      	movs	r2, r0
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	4a6f      	ldr	r2, [pc, #444]	@ (8008ad8 <HAL_RCC_OscConfig+0x620>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e0d1      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008924:	4b6a      	ldr	r3, [pc, #424]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008928:	2202      	movs	r2, #2
 800892a:	4013      	ands	r3, r2
 800892c:	d1f0      	bne.n	8008910 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800892e:	231f      	movs	r3, #31
 8008930:	18fb      	adds	r3, r7, r3
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d105      	bne.n	8008944 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008938:	4b65      	ldr	r3, [pc, #404]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800893a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800893c:	4b64      	ldr	r3, [pc, #400]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800893e:	4967      	ldr	r1, [pc, #412]	@ (8008adc <HAL_RCC_OscConfig+0x624>)
 8008940:	400a      	ands	r2, r1
 8008942:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d100      	bne.n	800894e <HAL_RCC_OscConfig+0x496>
 800894c:	e0bb      	b.n	8008ac6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800894e:	4b60      	ldr	r3, [pc, #384]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2238      	movs	r2, #56	@ 0x38
 8008954:	4013      	ands	r3, r2
 8008956:	2b10      	cmp	r3, #16
 8008958:	d100      	bne.n	800895c <HAL_RCC_OscConfig+0x4a4>
 800895a:	e07b      	b.n	8008a54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d156      	bne.n	8008a12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008964:	4b5a      	ldr	r3, [pc, #360]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b59      	ldr	r3, [pc, #356]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800896a:	495d      	ldr	r1, [pc, #372]	@ (8008ae0 <HAL_RCC_OscConfig+0x628>)
 800896c:	400a      	ands	r2, r1
 800896e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fd f91e 	bl	8005bb0 <HAL_GetTick>
 8008974:	0003      	movs	r3, r0
 8008976:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800897a:	f7fd f919 	bl	8005bb0 <HAL_GetTick>
 800897e:	0002      	movs	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e09d      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800898c:	4b50      	ldr	r3, [pc, #320]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	049b      	lsls	r3, r3, #18
 8008994:	4013      	ands	r3, r2
 8008996:	d1f0      	bne.n	800897a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008998:	4b4d      	ldr	r3, [pc, #308]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a51      	ldr	r2, [pc, #324]	@ (8008ae4 <HAL_RCC_OscConfig+0x62c>)
 800899e:	4013      	ands	r3, r2
 80089a0:	0019      	movs	r1, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c4:	431a      	orrs	r2, r3
 80089c6:	4b42      	ldr	r3, [pc, #264]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80089c8:	430a      	orrs	r2, r1
 80089ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089cc:	4b40      	ldr	r3, [pc, #256]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80089d2:	2180      	movs	r1, #128	@ 0x80
 80089d4:	0449      	lsls	r1, r1, #17
 80089d6:	430a      	orrs	r2, r1
 80089d8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80089da:	4b3d      	ldr	r3, [pc, #244]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	4b3c      	ldr	r3, [pc, #240]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 80089e0:	2180      	movs	r1, #128	@ 0x80
 80089e2:	0549      	lsls	r1, r1, #21
 80089e4:	430a      	orrs	r2, r1
 80089e6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e8:	f7fd f8e2 	bl	8005bb0 <HAL_GetTick>
 80089ec:	0003      	movs	r3, r0
 80089ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089f0:	e008      	b.n	8008a04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089f2:	f7fd f8dd 	bl	8005bb0 <HAL_GetTick>
 80089f6:	0002      	movs	r2, r0
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e061      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a04:	4b32      	ldr	r3, [pc, #200]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	2380      	movs	r3, #128	@ 0x80
 8008a0a:	049b      	lsls	r3, r3, #18
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	d0f0      	beq.n	80089f2 <HAL_RCC_OscConfig+0x53a>
 8008a10:	e059      	b.n	8008ac6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a12:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b2e      	ldr	r3, [pc, #184]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a18:	4931      	ldr	r1, [pc, #196]	@ (8008ae0 <HAL_RCC_OscConfig+0x628>)
 8008a1a:	400a      	ands	r2, r1
 8008a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fd f8c7 	bl	8005bb0 <HAL_GetTick>
 8008a22:	0003      	movs	r3, r0
 8008a24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a28:	f7fd f8c2 	bl	8005bb0 <HAL_GetTick>
 8008a2c:	0002      	movs	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e046      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a3a:	4b25      	ldr	r3, [pc, #148]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	2380      	movs	r3, #128	@ 0x80
 8008a40:	049b      	lsls	r3, r3, #18
 8008a42:	4013      	ands	r3, r2
 8008a44:	d1f0      	bne.n	8008a28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008a46:	4b22      	ldr	r3, [pc, #136]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	4b21      	ldr	r3, [pc, #132]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a4c:	4926      	ldr	r1, [pc, #152]	@ (8008ae8 <HAL_RCC_OscConfig+0x630>)
 8008a4e:	400a      	ands	r2, r1
 8008a50:	60da      	str	r2, [r3, #12]
 8008a52:	e038      	b.n	8008ac6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e033      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008a60:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad0 <HAL_RCC_OscConfig+0x618>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2203      	movs	r2, #3
 8008a6a:	401a      	ands	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d126      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2270      	movs	r2, #112	@ 0x70
 8008a78:	401a      	ands	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d11f      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	23fe      	movs	r3, #254	@ 0xfe
 8008a86:	01db      	lsls	r3, r3, #7
 8008a88:	401a      	ands	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d116      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	23f8      	movs	r3, #248	@ 0xf8
 8008a98:	039b      	lsls	r3, r3, #14
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d10e      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	23e0      	movs	r3, #224	@ 0xe0
 8008aa8:	051b      	lsls	r3, r3, #20
 8008aaa:	401a      	ands	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d106      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	0f5b      	lsrs	r3, r3, #29
 8008ab8:	075a      	lsls	r2, r3, #29
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d001      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	0018      	movs	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b008      	add	sp, #32
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	40021000 	.word	0x40021000
 8008ad4:	40007000 	.word	0x40007000
 8008ad8:	00001388 	.word	0x00001388
 8008adc:	efffffff 	.word	0xefffffff
 8008ae0:	feffffff 	.word	0xfeffffff
 8008ae4:	11c1808c 	.word	0x11c1808c
 8008ae8:	eefefffc 	.word	0xeefefffc

08008aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0e9      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b00:	4b76      	ldr	r3, [pc, #472]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2207      	movs	r2, #7
 8008b06:	4013      	ands	r3, r2
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d91e      	bls.n	8008b4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0e:	4b73      	ldr	r3, [pc, #460]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2207      	movs	r2, #7
 8008b14:	4393      	bics	r3, r2
 8008b16:	0019      	movs	r1, r3
 8008b18:	4b70      	ldr	r3, [pc, #448]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008b20:	f7fd f846 	bl	8005bb0 <HAL_GetTick>
 8008b24:	0003      	movs	r3, r0
 8008b26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b28:	e009      	b.n	8008b3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b2a:	f7fd f841 	bl	8005bb0 <HAL_GetTick>
 8008b2e:	0002      	movs	r2, r0
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	4a6a      	ldr	r2, [pc, #424]	@ (8008ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e0ca      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b3e:	4b67      	ldr	r3, [pc, #412]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2207      	movs	r2, #7
 8008b44:	4013      	ands	r3, r2
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d1ee      	bne.n	8008b2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2202      	movs	r2, #2
 8008b52:	4013      	ands	r3, r2
 8008b54:	d015      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	d006      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008b60:	4b60      	ldr	r3, [pc, #384]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	4b5f      	ldr	r3, [pc, #380]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b66:	21e0      	movs	r1, #224	@ 0xe0
 8008b68:	01c9      	lsls	r1, r1, #7
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	4a5d      	ldr	r2, [pc, #372]	@ (8008ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	0019      	movs	r1, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	4b59      	ldr	r3, [pc, #356]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2201      	movs	r2, #1
 8008b88:	4013      	ands	r3, r2
 8008b8a:	d057      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b94:	4b53      	ldr	r3, [pc, #332]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	2380      	movs	r3, #128	@ 0x80
 8008b9a:	029b      	lsls	r3, r3, #10
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	d12b      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e097      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d107      	bne.n	8008bbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bac:	4b4d      	ldr	r3, [pc, #308]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	2380      	movs	r3, #128	@ 0x80
 8008bb2:	049b      	lsls	r3, r3, #18
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	d11f      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e08b      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bc4:	4b47      	ldr	r3, [pc, #284]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	2380      	movs	r3, #128	@ 0x80
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	4013      	ands	r3, r2
 8008bce:	d113      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e07f      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d106      	bne.n	8008bea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008bdc:	4b41      	ldr	r3, [pc, #260]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be0:	2202      	movs	r2, #2
 8008be2:	4013      	ands	r3, r2
 8008be4:	d108      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e074      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bea:	4b3e      	ldr	r3, [pc, #248]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bee:	2202      	movs	r2, #2
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	d101      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e06d      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	4393      	bics	r3, r2
 8008c00:	0019      	movs	r1, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	4b37      	ldr	r3, [pc, #220]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c0c:	f7fc ffd0 	bl	8005bb0 <HAL_GetTick>
 8008c10:	0003      	movs	r3, r0
 8008c12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c14:	e009      	b.n	8008c2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c16:	f7fc ffcb 	bl	8005bb0 <HAL_GetTick>
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	4a2f      	ldr	r2, [pc, #188]	@ (8008ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e054      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2238      	movs	r2, #56	@ 0x38
 8008c30:	401a      	ands	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d1ec      	bne.n	8008c16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c3c:	4b27      	ldr	r3, [pc, #156]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2207      	movs	r2, #7
 8008c42:	4013      	ands	r3, r2
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d21e      	bcs.n	8008c88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4a:	4b24      	ldr	r3, [pc, #144]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2207      	movs	r2, #7
 8008c50:	4393      	bics	r3, r2
 8008c52:	0019      	movs	r1, r3
 8008c54:	4b21      	ldr	r3, [pc, #132]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008c5c:	f7fc ffa8 	bl	8005bb0 <HAL_GetTick>
 8008c60:	0003      	movs	r3, r0
 8008c62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c64:	e009      	b.n	8008c7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c66:	f7fc ffa3 	bl	8005bb0 <HAL_GetTick>
 8008c6a:	0002      	movs	r2, r0
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e02c      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c7a:	4b18      	ldr	r3, [pc, #96]	@ (8008cdc <HAL_RCC_ClockConfig+0x1f0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2207      	movs	r2, #7
 8008c80:	4013      	ands	r3, r2
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d1ee      	bne.n	8008c66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008c92:	4b14      	ldr	r3, [pc, #80]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	4a15      	ldr	r2, [pc, #84]	@ (8008cec <HAL_RCC_ClockConfig+0x200>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008ca6:	f000 f829 	bl	8008cfc <HAL_RCC_GetSysClockFreq>
 8008caa:	0001      	movs	r1, r0
 8008cac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	0a1b      	lsrs	r3, r3, #8
 8008cb2:	220f      	movs	r2, #15
 8008cb4:	401a      	ands	r2, r3
 8008cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf0 <HAL_RCC_ClockConfig+0x204>)
 8008cb8:	0092      	lsls	r2, r2, #2
 8008cba:	58d3      	ldr	r3, [r2, r3]
 8008cbc:	221f      	movs	r2, #31
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	000a      	movs	r2, r1
 8008cc2:	40da      	lsrs	r2, r3
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <HAL_RCC_ClockConfig+0x208>)
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf8 <HAL_RCC_ClockConfig+0x20c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7fc ff13 	bl	8005af8 <HAL_InitTick>
 8008cd2:	0003      	movs	r3, r0
}
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b004      	add	sp, #16
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	40022000 	.word	0x40022000
 8008ce0:	00001388 	.word	0x00001388
 8008ce4:	40021000 	.word	0x40021000
 8008ce8:	fffff0ff 	.word	0xfffff0ff
 8008cec:	ffff8fff 	.word	0xffff8fff
 8008cf0:	0800d708 	.word	0x0800d708
 8008cf4:	20000440 	.word	0x20000440
 8008cf8:	20000444 	.word	0x20000444

08008cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d02:	4b3c      	ldr	r3, [pc, #240]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2238      	movs	r2, #56	@ 0x38
 8008d08:	4013      	ands	r3, r2
 8008d0a:	d10f      	bne.n	8008d2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008d0c:	4b39      	ldr	r3, [pc, #228]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	0adb      	lsrs	r3, r3, #11
 8008d12:	2207      	movs	r2, #7
 8008d14:	4013      	ands	r3, r2
 8008d16:	2201      	movs	r2, #1
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	0013      	movs	r3, r2
 8008d1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	4835      	ldr	r0, [pc, #212]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008d22:	f7f7 f9ef 	bl	8000104 <__udivsi3>
 8008d26:	0003      	movs	r3, r0
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	e05d      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d2c:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	2238      	movs	r2, #56	@ 0x38
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d102      	bne.n	8008d3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008d38:	4b30      	ldr	r3, [pc, #192]	@ (8008dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	e054      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2238      	movs	r2, #56	@ 0x38
 8008d44:	4013      	ands	r3, r2
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d138      	bne.n	8008dbc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2203      	movs	r2, #3
 8008d50:	4013      	ands	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d54:	4b27      	ldr	r3, [pc, #156]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	091b      	lsrs	r3, r3, #4
 8008d5a:	2207      	movs	r2, #7
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d10d      	bne.n	8008d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	4824      	ldr	r0, [pc, #144]	@ (8008dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8008d6c:	f7f7 f9ca 	bl	8000104 <__udivsi3>
 8008d70:	0003      	movs	r3, r0
 8008d72:	0019      	movs	r1, r3
 8008d74:	4b1f      	ldr	r3, [pc, #124]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	0a1b      	lsrs	r3, r3, #8
 8008d7a:	227f      	movs	r2, #127	@ 0x7f
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	434b      	muls	r3, r1
 8008d80:	617b      	str	r3, [r7, #20]
        break;
 8008d82:	e00d      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	481c      	ldr	r0, [pc, #112]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008d88:	f7f7 f9bc 	bl	8000104 <__udivsi3>
 8008d8c:	0003      	movs	r3, r0
 8008d8e:	0019      	movs	r1, r3
 8008d90:	4b18      	ldr	r3, [pc, #96]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	227f      	movs	r2, #127	@ 0x7f
 8008d98:	4013      	ands	r3, r2
 8008d9a:	434b      	muls	r3, r1
 8008d9c:	617b      	str	r3, [r7, #20]
        break;
 8008d9e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008da0:	4b14      	ldr	r3, [pc, #80]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	0f5b      	lsrs	r3, r3, #29
 8008da6:	2207      	movs	r2, #7
 8008da8:	4013      	ands	r3, r2
 8008daa:	3301      	adds	r3, #1
 8008dac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	6978      	ldr	r0, [r7, #20]
 8008db2:	f7f7 f9a7 	bl	8000104 <__udivsi3>
 8008db6:	0003      	movs	r3, r0
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	e015      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2238      	movs	r2, #56	@ 0x38
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	d103      	bne.n	8008dd0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	e00b      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008dd0:	4b08      	ldr	r3, [pc, #32]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2238      	movs	r2, #56	@ 0x38
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b18      	cmp	r3, #24
 8008dda:	d103      	bne.n	8008de4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008ddc:	23fa      	movs	r3, #250	@ 0xfa
 8008dde:	01db      	lsls	r3, r3, #7
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	e001      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008de8:	693b      	ldr	r3, [r7, #16]
}
 8008dea:	0018      	movs	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b006      	add	sp, #24
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	46c0      	nop			@ (mov r8, r8)
 8008df4:	40021000 	.word	0x40021000
 8008df8:	00f42400 	.word	0x00f42400
 8008dfc:	007a1200 	.word	0x007a1200

08008e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e04:	4b02      	ldr	r3, [pc, #8]	@ (8008e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e06:	681b      	ldr	r3, [r3, #0]
}
 8008e08:	0018      	movs	r0, r3
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	20000440 	.word	0x20000440

08008e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e14:	b5b0      	push	{r4, r5, r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008e18:	f7ff fff2 	bl	8008e00 <HAL_RCC_GetHCLKFreq>
 8008e1c:	0004      	movs	r4, r0
 8008e1e:	f7ff fb3f 	bl	80084a0 <LL_RCC_GetAPB1Prescaler>
 8008e22:	0003      	movs	r3, r0
 8008e24:	0b1a      	lsrs	r2, r3, #12
 8008e26:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	58d3      	ldr	r3, [r2, r3]
 8008e2c:	221f      	movs	r2, #31
 8008e2e:	4013      	ands	r3, r2
 8008e30:	40dc      	lsrs	r4, r3
 8008e32:	0023      	movs	r3, r4
}
 8008e34:	0018      	movs	r0, r3
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bdb0      	pop	{r4, r5, r7, pc}
 8008e3a:	46c0      	nop			@ (mov r8, r8)
 8008e3c:	0800d748 	.word	0x0800d748

08008e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008e48:	2313      	movs	r3, #19
 8008e4a:	18fb      	adds	r3, r7, r3
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e50:	2312      	movs	r3, #18
 8008e52:	18fb      	adds	r3, r7, r3
 8008e54:	2200      	movs	r2, #0
 8008e56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	2380      	movs	r3, #128	@ 0x80
 8008e5e:	029b      	lsls	r3, r3, #10
 8008e60:	4013      	ands	r3, r2
 8008e62:	d100      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008e64:	e0a3      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e66:	2011      	movs	r0, #17
 8008e68:	183b      	adds	r3, r7, r0
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e6e:	4ba5      	ldr	r3, [pc, #660]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e72:	2380      	movs	r3, #128	@ 0x80
 8008e74:	055b      	lsls	r3, r3, #21
 8008e76:	4013      	ands	r3, r2
 8008e78:	d110      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7a:	4ba2      	ldr	r3, [pc, #648]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e7e:	4ba1      	ldr	r3, [pc, #644]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e80:	2180      	movs	r1, #128	@ 0x80
 8008e82:	0549      	lsls	r1, r1, #21
 8008e84:	430a      	orrs	r2, r1
 8008e86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008e88:	4b9e      	ldr	r3, [pc, #632]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e8c:	2380      	movs	r3, #128	@ 0x80
 8008e8e:	055b      	lsls	r3, r3, #21
 8008e90:	4013      	ands	r3, r2
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e96:	183b      	adds	r3, r7, r0
 8008e98:	2201      	movs	r2, #1
 8008e9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	4b99      	ldr	r3, [pc, #612]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008ea2:	2180      	movs	r1, #128	@ 0x80
 8008ea4:	0049      	lsls	r1, r1, #1
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eaa:	f7fc fe81 	bl	8005bb0 <HAL_GetTick>
 8008eae:	0003      	movs	r3, r0
 8008eb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008eb2:	e00b      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eb4:	f7fc fe7c 	bl	8005bb0 <HAL_GetTick>
 8008eb8:	0002      	movs	r2, r0
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d904      	bls.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008ec2:	2313      	movs	r3, #19
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	701a      	strb	r2, [r3, #0]
        break;
 8008eca:	e005      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	2380      	movs	r3, #128	@ 0x80
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	d0ed      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008ed8:	2313      	movs	r3, #19
 8008eda:	18fb      	adds	r3, r7, r3
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d154      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ee2:	4b88      	ldr	r3, [pc, #544]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ee4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ee6:	23c0      	movs	r3, #192	@ 0xc0
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4013      	ands	r3, r2
 8008eec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d019      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d014      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008efe:	4b81      	ldr	r3, [pc, #516]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f02:	4a82      	ldr	r2, [pc, #520]	@ (800910c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f08:	4b7e      	ldr	r3, [pc, #504]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f0c:	4b7d      	ldr	r3, [pc, #500]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f0e:	2180      	movs	r1, #128	@ 0x80
 8008f10:	0249      	lsls	r1, r1, #9
 8008f12:	430a      	orrs	r2, r1
 8008f14:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f16:	4b7b      	ldr	r3, [pc, #492]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f1c:	497c      	ldr	r1, [pc, #496]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008f1e:	400a      	ands	r2, r1
 8008f20:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f22:	4b78      	ldr	r3, [pc, #480]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	d016      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7fc fe3e 	bl	8005bb0 <HAL_GetTick>
 8008f34:	0003      	movs	r3, r0
 8008f36:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f38:	e00c      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f3a:	f7fc fe39 	bl	8005bb0 <HAL_GetTick>
 8008f3e:	0002      	movs	r2, r0
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	4a73      	ldr	r2, [pc, #460]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d904      	bls.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008f4a:	2313      	movs	r3, #19
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	2203      	movs	r2, #3
 8008f50:	701a      	strb	r2, [r3, #0]
            break;
 8008f52:	e004      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f54:	4b6b      	ldr	r3, [pc, #428]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	d0ed      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008f5e:	2313      	movs	r3, #19
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f68:	4b66      	ldr	r3, [pc, #408]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f6c:	4a67      	ldr	r2, [pc, #412]	@ (800910c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	0019      	movs	r1, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f76:	4b63      	ldr	r3, [pc, #396]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f7c:	e00c      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f7e:	2312      	movs	r3, #18
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	2213      	movs	r2, #19
 8008f84:	18ba      	adds	r2, r7, r2
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	701a      	strb	r2, [r3, #0]
 8008f8a:	e005      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	2312      	movs	r3, #18
 8008f8e:	18fb      	adds	r3, r7, r3
 8008f90:	2213      	movs	r2, #19
 8008f92:	18ba      	adds	r2, r7, r2
 8008f94:	7812      	ldrb	r2, [r2, #0]
 8008f96:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f98:	2311      	movs	r3, #17
 8008f9a:	18fb      	adds	r3, r7, r3
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d105      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fa2:	4b58      	ldr	r3, [pc, #352]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fa6:	4b57      	ldr	r3, [pc, #348]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fa8:	495b      	ldr	r1, [pc, #364]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008faa:	400a      	ands	r2, r1
 8008fac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	d009      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fb8:	4b52      	ldr	r3, [pc, #328]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	4393      	bics	r3, r2
 8008fc0:	0019      	movs	r1, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2210      	movs	r2, #16
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	d009      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fda:	4a50      	ldr	r2, [pc, #320]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	0019      	movs	r1, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	4b47      	ldr	r3, [pc, #284]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	2380      	movs	r3, #128	@ 0x80
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	d009      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ff6:	4b43      	ldr	r3, [pc, #268]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffa:	4a49      	ldr	r2, [pc, #292]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	0019      	movs	r1, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695a      	ldr	r2, [r3, #20]
 8009004:	4b3f      	ldr	r3, [pc, #252]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009006:	430a      	orrs	r2, r1
 8009008:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	2380      	movs	r3, #128	@ 0x80
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	4013      	ands	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009016:	4b3b      	ldr	r3, [pc, #236]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800901a:	4a42      	ldr	r2, [pc, #264]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800901c:	4013      	ands	r3, r2
 800901e:	0019      	movs	r1, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	4b37      	ldr	r3, [pc, #220]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009026:	430a      	orrs	r2, r1
 8009028:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2220      	movs	r2, #32
 8009030:	4013      	ands	r3, r2
 8009032:	d009      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009034:	4b33      	ldr	r3, [pc, #204]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009038:	4a3b      	ldr	r2, [pc, #236]	@ (8009128 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800903a:	4013      	ands	r3, r2
 800903c:	0019      	movs	r1, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	4b30      	ldr	r3, [pc, #192]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009044:	430a      	orrs	r2, r1
 8009046:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	2380      	movs	r3, #128	@ 0x80
 800904e:	01db      	lsls	r3, r3, #7
 8009050:	4013      	ands	r3, r2
 8009052:	d015      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009054:	4b2b      	ldr	r3, [pc, #172]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	0899      	lsrs	r1, r3, #2
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	4b28      	ldr	r3, [pc, #160]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009062:	430a      	orrs	r2, r1
 8009064:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69da      	ldr	r2, [r3, #28]
 800906a:	2380      	movs	r3, #128	@ 0x80
 800906c:	05db      	lsls	r3, r3, #23
 800906e:	429a      	cmp	r2, r3
 8009070:	d106      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009072:	4b24      	ldr	r3, [pc, #144]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	4b23      	ldr	r3, [pc, #140]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009078:	2180      	movs	r1, #128	@ 0x80
 800907a:	0249      	lsls	r1, r1, #9
 800907c:	430a      	orrs	r2, r1
 800907e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	2380      	movs	r3, #128	@ 0x80
 8009086:	039b      	lsls	r3, r3, #14
 8009088:	4013      	ands	r3, r2
 800908a:	d016      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800908c:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800908e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009090:	4a26      	ldr	r2, [pc, #152]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009092:	4013      	ands	r3, r2
 8009094:	0019      	movs	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1a      	ldr	r2, [r3, #32]
 800909a:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800909c:	430a      	orrs	r2, r1
 800909e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1a      	ldr	r2, [r3, #32]
 80090a4:	2380      	movs	r3, #128	@ 0x80
 80090a6:	03db      	lsls	r3, r3, #15
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d106      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80090ac:	4b15      	ldr	r3, [pc, #84]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090b2:	2180      	movs	r1, #128	@ 0x80
 80090b4:	0449      	lsls	r1, r1, #17
 80090b6:	430a      	orrs	r2, r1
 80090b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	2380      	movs	r3, #128	@ 0x80
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	4013      	ands	r3, r2
 80090c4:	d016      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80090c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ca:	4a19      	ldr	r2, [pc, #100]	@ (8009130 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	0019      	movs	r1, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090d6:	430a      	orrs	r2, r1
 80090d8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	2380      	movs	r3, #128	@ 0x80
 80090e0:	01db      	lsls	r3, r3, #7
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d106      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80090e6:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090ec:	2180      	movs	r1, #128	@ 0x80
 80090ee:	0249      	lsls	r1, r1, #9
 80090f0:	430a      	orrs	r2, r1
 80090f2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80090f4:	2312      	movs	r3, #18
 80090f6:	18fb      	adds	r3, r7, r3
 80090f8:	781b      	ldrb	r3, [r3, #0]
}
 80090fa:	0018      	movs	r0, r3
 80090fc:	46bd      	mov	sp, r7
 80090fe:	b006      	add	sp, #24
 8009100:	bd80      	pop	{r7, pc}
 8009102:	46c0      	nop			@ (mov r8, r8)
 8009104:	40021000 	.word	0x40021000
 8009108:	40007000 	.word	0x40007000
 800910c:	fffffcff 	.word	0xfffffcff
 8009110:	fffeffff 	.word	0xfffeffff
 8009114:	00001388 	.word	0x00001388
 8009118:	efffffff 	.word	0xefffffff
 800911c:	fffff3ff 	.word	0xfffff3ff
 8009120:	fff3ffff 	.word	0xfff3ffff
 8009124:	ffcfffff 	.word	0xffcfffff
 8009128:	ffffcfff 	.word	0xffffcfff
 800912c:	ffbfffff 	.word	0xffbfffff
 8009130:	ffff3fff 	.word	0xffff3fff

08009134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e056      	b.n	80091f4 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	223d      	movs	r2, #61	@ 0x3d
 800914a:	5c9b      	ldrb	r3, [r3, r2]
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d113      	bne.n	800917a <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	223c      	movs	r2, #60	@ 0x3c
 8009156:	2100      	movs	r1, #0
 8009158:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	0018      	movs	r0, r3
 800915e:	f002 f8c5 	bl	800b2ec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a23      	ldr	r2, [pc, #140]	@ (80091fc <HAL_TIM_Base_Init+0xc8>)
 800916e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	0010      	movs	r0, r2
 8009178:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	223d      	movs	r2, #61	@ 0x3d
 800917e:	2102      	movs	r1, #2
 8009180:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3304      	adds	r3, #4
 800918a:	0019      	movs	r1, r3
 800918c:	0010      	movs	r0, r2
 800918e:	f001 fbaf 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2248      	movs	r2, #72	@ 0x48
 8009196:	2101      	movs	r1, #1
 8009198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	223e      	movs	r2, #62	@ 0x3e
 800919e:	2101      	movs	r1, #1
 80091a0:	5499      	strb	r1, [r3, r2]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	223f      	movs	r2, #63	@ 0x3f
 80091a6:	2101      	movs	r1, #1
 80091a8:	5499      	strb	r1, [r3, r2]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2240      	movs	r2, #64	@ 0x40
 80091ae:	2101      	movs	r1, #1
 80091b0:	5499      	strb	r1, [r3, r2]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2241      	movs	r2, #65	@ 0x41
 80091b6:	2101      	movs	r1, #1
 80091b8:	5499      	strb	r1, [r3, r2]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2242      	movs	r2, #66	@ 0x42
 80091be:	2101      	movs	r1, #1
 80091c0:	5499      	strb	r1, [r3, r2]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2243      	movs	r2, #67	@ 0x43
 80091c6:	2101      	movs	r1, #1
 80091c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2244      	movs	r2, #68	@ 0x44
 80091ce:	2101      	movs	r1, #1
 80091d0:	5499      	strb	r1, [r3, r2]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2245      	movs	r2, #69	@ 0x45
 80091d6:	2101      	movs	r1, #1
 80091d8:	5499      	strb	r1, [r3, r2]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2246      	movs	r2, #70	@ 0x46
 80091de:	2101      	movs	r1, #1
 80091e0:	5499      	strb	r1, [r3, r2]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2247      	movs	r2, #71	@ 0x47
 80091e6:	2101      	movs	r1, #1
 80091e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	223d      	movs	r2, #61	@ 0x3d
 80091ee:	2101      	movs	r1, #1
 80091f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	0018      	movs	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b002      	add	sp, #8
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	08004b61 	.word	0x08004b61

08009200 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	223d      	movs	r2, #61	@ 0x3d
 800920c:	5c9b      	ldrb	r3, [r3, r2]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	d001      	beq.n	8009218 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e035      	b.n	8009284 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	223d      	movs	r2, #61	@ 0x3d
 800921c:	2102      	movs	r1, #2
 800921e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a19      	ldr	r2, [pc, #100]	@ (800928c <HAL_TIM_Base_Start+0x8c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00a      	beq.n	8009240 <HAL_TIM_Base_Start+0x40>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	2380      	movs	r3, #128	@ 0x80
 8009230:	05db      	lsls	r3, r3, #23
 8009232:	429a      	cmp	r2, r3
 8009234:	d004      	beq.n	8009240 <HAL_TIM_Base_Start+0x40>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a15      	ldr	r2, [pc, #84]	@ (8009290 <HAL_TIM_Base_Start+0x90>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d116      	bne.n	800926e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	4a13      	ldr	r2, [pc, #76]	@ (8009294 <HAL_TIM_Base_Start+0x94>)
 8009248:	4013      	ands	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b06      	cmp	r3, #6
 8009250:	d016      	beq.n	8009280 <HAL_TIM_Base_Start+0x80>
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	2380      	movs	r3, #128	@ 0x80
 8009256:	025b      	lsls	r3, r3, #9
 8009258:	429a      	cmp	r2, r3
 800925a:	d011      	beq.n	8009280 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2101      	movs	r1, #1
 8009268:	430a      	orrs	r2, r1
 800926a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926c:	e008      	b.n	8009280 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2101      	movs	r1, #1
 800927a:	430a      	orrs	r2, r1
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	e000      	b.n	8009282 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009280:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	0018      	movs	r0, r3
 8009286:	46bd      	mov	sp, r7
 8009288:	b004      	add	sp, #16
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40012c00 	.word	0x40012c00
 8009290:	40000400 	.word	0x40000400
 8009294:	00010007 	.word	0x00010007

08009298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	223d      	movs	r2, #61	@ 0x3d
 80092a4:	5c9b      	ldrb	r3, [r3, r2]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d001      	beq.n	80092b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e03d      	b.n	800932c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	223d      	movs	r2, #61	@ 0x3d
 80092b4:	2102      	movs	r1, #2
 80092b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2101      	movs	r1, #1
 80092c4:	430a      	orrs	r2, r1
 80092c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a19      	ldr	r2, [pc, #100]	@ (8009334 <HAL_TIM_Base_Start_IT+0x9c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d00a      	beq.n	80092e8 <HAL_TIM_Base_Start_IT+0x50>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	2380      	movs	r3, #128	@ 0x80
 80092d8:	05db      	lsls	r3, r3, #23
 80092da:	429a      	cmp	r2, r3
 80092dc:	d004      	beq.n	80092e8 <HAL_TIM_Base_Start_IT+0x50>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a15      	ldr	r2, [pc, #84]	@ (8009338 <HAL_TIM_Base_Start_IT+0xa0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d116      	bne.n	8009316 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	4a13      	ldr	r2, [pc, #76]	@ (800933c <HAL_TIM_Base_Start_IT+0xa4>)
 80092f0:	4013      	ands	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b06      	cmp	r3, #6
 80092f8:	d016      	beq.n	8009328 <HAL_TIM_Base_Start_IT+0x90>
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	2380      	movs	r3, #128	@ 0x80
 80092fe:	025b      	lsls	r3, r3, #9
 8009300:	429a      	cmp	r2, r3
 8009302:	d011      	beq.n	8009328 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2101      	movs	r1, #1
 8009310:	430a      	orrs	r2, r1
 8009312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009314:	e008      	b.n	8009328 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2101      	movs	r1, #1
 8009322:	430a      	orrs	r2, r1
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	e000      	b.n	800932a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009328:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	0018      	movs	r0, r3
 800932e:	46bd      	mov	sp, r7
 8009330:	b004      	add	sp, #16
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40012c00 	.word	0x40012c00
 8009338:	40000400 	.word	0x40000400
 800933c:	00010007 	.word	0x00010007

08009340 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e056      	b.n	8009400 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	223d      	movs	r2, #61	@ 0x3d
 8009356:	5c9b      	ldrb	r3, [r3, r2]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d113      	bne.n	8009386 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	223c      	movs	r2, #60	@ 0x3c
 8009362:	2100      	movs	r1, #0
 8009364:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	0018      	movs	r0, r3
 800936a:	f001 ffbf 	bl	800b2ec <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a23      	ldr	r2, [pc, #140]	@ (8009408 <HAL_TIM_OC_Init+0xc8>)
 800937a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	0010      	movs	r0, r2
 8009384:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	223d      	movs	r2, #61	@ 0x3d
 800938a:	2102      	movs	r1, #2
 800938c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3304      	adds	r3, #4
 8009396:	0019      	movs	r1, r3
 8009398:	0010      	movs	r0, r2
 800939a:	f001 faa9 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2248      	movs	r2, #72	@ 0x48
 80093a2:	2101      	movs	r1, #1
 80093a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	223e      	movs	r2, #62	@ 0x3e
 80093aa:	2101      	movs	r1, #1
 80093ac:	5499      	strb	r1, [r3, r2]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	223f      	movs	r2, #63	@ 0x3f
 80093b2:	2101      	movs	r1, #1
 80093b4:	5499      	strb	r1, [r3, r2]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2240      	movs	r2, #64	@ 0x40
 80093ba:	2101      	movs	r1, #1
 80093bc:	5499      	strb	r1, [r3, r2]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2241      	movs	r2, #65	@ 0x41
 80093c2:	2101      	movs	r1, #1
 80093c4:	5499      	strb	r1, [r3, r2]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2242      	movs	r2, #66	@ 0x42
 80093ca:	2101      	movs	r1, #1
 80093cc:	5499      	strb	r1, [r3, r2]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2243      	movs	r2, #67	@ 0x43
 80093d2:	2101      	movs	r1, #1
 80093d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2244      	movs	r2, #68	@ 0x44
 80093da:	2101      	movs	r1, #1
 80093dc:	5499      	strb	r1, [r3, r2]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2245      	movs	r2, #69	@ 0x45
 80093e2:	2101      	movs	r1, #1
 80093e4:	5499      	strb	r1, [r3, r2]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2246      	movs	r2, #70	@ 0x46
 80093ea:	2101      	movs	r1, #1
 80093ec:	5499      	strb	r1, [r3, r2]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2247      	movs	r2, #71	@ 0x47
 80093f2:	2101      	movs	r1, #1
 80093f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	223d      	movs	r2, #61	@ 0x3d
 80093fa:	2101      	movs	r1, #1
 80093fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	0018      	movs	r0, r3
 8009402:	46bd      	mov	sp, r7
 8009404:	b002      	add	sp, #8
 8009406:	bd80      	pop	{r7, pc}
 8009408:	0800940d 	.word	0x0800940d

0800940c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009414:	46c0      	nop			@ (mov r8, r8)
 8009416:	46bd      	mov	sp, r7
 8009418:	b002      	add	sp, #8
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009426:	230f      	movs	r3, #15
 8009428:	18fb      	adds	r3, r7, r3
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d108      	bne.n	8009446 <HAL_TIM_OC_Start_IT+0x2a>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	223e      	movs	r2, #62	@ 0x3e
 8009438:	5c9b      	ldrb	r3, [r3, r2]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	1e5a      	subs	r2, r3, #1
 8009440:	4193      	sbcs	r3, r2
 8009442:	b2db      	uxtb	r3, r3
 8009444:	e037      	b.n	80094b6 <HAL_TIM_OC_Start_IT+0x9a>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b04      	cmp	r3, #4
 800944a:	d108      	bne.n	800945e <HAL_TIM_OC_Start_IT+0x42>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	223f      	movs	r2, #63	@ 0x3f
 8009450:	5c9b      	ldrb	r3, [r3, r2]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	1e5a      	subs	r2, r3, #1
 8009458:	4193      	sbcs	r3, r2
 800945a:	b2db      	uxtb	r3, r3
 800945c:	e02b      	b.n	80094b6 <HAL_TIM_OC_Start_IT+0x9a>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b08      	cmp	r3, #8
 8009462:	d108      	bne.n	8009476 <HAL_TIM_OC_Start_IT+0x5a>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2240      	movs	r2, #64	@ 0x40
 8009468:	5c9b      	ldrb	r3, [r3, r2]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	1e5a      	subs	r2, r3, #1
 8009470:	4193      	sbcs	r3, r2
 8009472:	b2db      	uxtb	r3, r3
 8009474:	e01f      	b.n	80094b6 <HAL_TIM_OC_Start_IT+0x9a>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b0c      	cmp	r3, #12
 800947a:	d108      	bne.n	800948e <HAL_TIM_OC_Start_IT+0x72>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2241      	movs	r2, #65	@ 0x41
 8009480:	5c9b      	ldrb	r3, [r3, r2]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	3b01      	subs	r3, #1
 8009486:	1e5a      	subs	r2, r3, #1
 8009488:	4193      	sbcs	r3, r2
 800948a:	b2db      	uxtb	r3, r3
 800948c:	e013      	b.n	80094b6 <HAL_TIM_OC_Start_IT+0x9a>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b10      	cmp	r3, #16
 8009492:	d108      	bne.n	80094a6 <HAL_TIM_OC_Start_IT+0x8a>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2242      	movs	r2, #66	@ 0x42
 8009498:	5c9b      	ldrb	r3, [r3, r2]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	1e5a      	subs	r2, r3, #1
 80094a0:	4193      	sbcs	r3, r2
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	e007      	b.n	80094b6 <HAL_TIM_OC_Start_IT+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2243      	movs	r2, #67	@ 0x43
 80094aa:	5c9b      	ldrb	r3, [r3, r2]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	3b01      	subs	r3, #1
 80094b0:	1e5a      	subs	r2, r3, #1
 80094b2:	4193      	sbcs	r3, r2
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e0c4      	b.n	8009648 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d104      	bne.n	80094ce <HAL_TIM_OC_Start_IT+0xb2>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	223e      	movs	r2, #62	@ 0x3e
 80094c8:	2102      	movs	r1, #2
 80094ca:	5499      	strb	r1, [r3, r2]
 80094cc:	e023      	b.n	8009516 <HAL_TIM_OC_Start_IT+0xfa>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b04      	cmp	r3, #4
 80094d2:	d104      	bne.n	80094de <HAL_TIM_OC_Start_IT+0xc2>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	223f      	movs	r2, #63	@ 0x3f
 80094d8:	2102      	movs	r1, #2
 80094da:	5499      	strb	r1, [r3, r2]
 80094dc:	e01b      	b.n	8009516 <HAL_TIM_OC_Start_IT+0xfa>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d104      	bne.n	80094ee <HAL_TIM_OC_Start_IT+0xd2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2240      	movs	r2, #64	@ 0x40
 80094e8:	2102      	movs	r1, #2
 80094ea:	5499      	strb	r1, [r3, r2]
 80094ec:	e013      	b.n	8009516 <HAL_TIM_OC_Start_IT+0xfa>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b0c      	cmp	r3, #12
 80094f2:	d104      	bne.n	80094fe <HAL_TIM_OC_Start_IT+0xe2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2241      	movs	r2, #65	@ 0x41
 80094f8:	2102      	movs	r1, #2
 80094fa:	5499      	strb	r1, [r3, r2]
 80094fc:	e00b      	b.n	8009516 <HAL_TIM_OC_Start_IT+0xfa>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b10      	cmp	r3, #16
 8009502:	d104      	bne.n	800950e <HAL_TIM_OC_Start_IT+0xf2>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2242      	movs	r2, #66	@ 0x42
 8009508:	2102      	movs	r1, #2
 800950a:	5499      	strb	r1, [r3, r2]
 800950c:	e003      	b.n	8009516 <HAL_TIM_OC_Start_IT+0xfa>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2243      	movs	r2, #67	@ 0x43
 8009512:	2102      	movs	r1, #2
 8009514:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b0c      	cmp	r3, #12
 800951a:	d02a      	beq.n	8009572 <HAL_TIM_OC_Start_IT+0x156>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b0c      	cmp	r3, #12
 8009520:	d830      	bhi.n	8009584 <HAL_TIM_OC_Start_IT+0x168>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b08      	cmp	r3, #8
 8009526:	d01b      	beq.n	8009560 <HAL_TIM_OC_Start_IT+0x144>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2b08      	cmp	r3, #8
 800952c:	d82a      	bhi.n	8009584 <HAL_TIM_OC_Start_IT+0x168>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_TIM_OC_Start_IT+0x120>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b04      	cmp	r3, #4
 8009538:	d009      	beq.n	800954e <HAL_TIM_OC_Start_IT+0x132>
 800953a:	e023      	b.n	8009584 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2102      	movs	r1, #2
 8009548:	430a      	orrs	r2, r1
 800954a:	60da      	str	r2, [r3, #12]
      break;
 800954c:	e01f      	b.n	800958e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2104      	movs	r1, #4
 800955a:	430a      	orrs	r2, r1
 800955c:	60da      	str	r2, [r3, #12]
      break;
 800955e:	e016      	b.n	800958e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2108      	movs	r1, #8
 800956c:	430a      	orrs	r2, r1
 800956e:	60da      	str	r2, [r3, #12]
      break;
 8009570:	e00d      	b.n	800958e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2110      	movs	r1, #16
 800957e:	430a      	orrs	r2, r1
 8009580:	60da      	str	r2, [r3, #12]
      break;
 8009582:	e004      	b.n	800958e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009584:	230f      	movs	r3, #15
 8009586:	18fb      	adds	r3, r7, r3
 8009588:	2201      	movs	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
      break;
 800958c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800958e:	230f      	movs	r3, #15
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d154      	bne.n	8009642 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	2201      	movs	r2, #1
 80095a0:	0018      	movs	r0, r3
 80095a2:	f001 fe7f 	bl	800b2a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a29      	ldr	r2, [pc, #164]	@ (8009650 <HAL_TIM_OC_Start_IT+0x234>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d009      	beq.n	80095c4 <HAL_TIM_OC_Start_IT+0x1a8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a27      	ldr	r2, [pc, #156]	@ (8009654 <HAL_TIM_OC_Start_IT+0x238>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <HAL_TIM_OC_Start_IT+0x1a8>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a26      	ldr	r2, [pc, #152]	@ (8009658 <HAL_TIM_OC_Start_IT+0x23c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d101      	bne.n	80095c8 <HAL_TIM_OC_Start_IT+0x1ac>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <HAL_TIM_OC_Start_IT+0x1ae>
 80095c8:	2300      	movs	r3, #0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d008      	beq.n	80095e0 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2180      	movs	r1, #128	@ 0x80
 80095da:	0209      	lsls	r1, r1, #8
 80095dc:	430a      	orrs	r2, r1
 80095de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009650 <HAL_TIM_OC_Start_IT+0x234>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00a      	beq.n	8009600 <HAL_TIM_OC_Start_IT+0x1e4>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	2380      	movs	r3, #128	@ 0x80
 80095f0:	05db      	lsls	r3, r3, #23
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d004      	beq.n	8009600 <HAL_TIM_OC_Start_IT+0x1e4>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a18      	ldr	r2, [pc, #96]	@ (800965c <HAL_TIM_OC_Start_IT+0x240>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d116      	bne.n	800962e <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	4a16      	ldr	r2, [pc, #88]	@ (8009660 <HAL_TIM_OC_Start_IT+0x244>)
 8009608:	4013      	ands	r3, r2
 800960a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b06      	cmp	r3, #6
 8009610:	d016      	beq.n	8009640 <HAL_TIM_OC_Start_IT+0x224>
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	2380      	movs	r3, #128	@ 0x80
 8009616:	025b      	lsls	r3, r3, #9
 8009618:	429a      	cmp	r2, r3
 800961a:	d011      	beq.n	8009640 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2101      	movs	r1, #1
 8009628:	430a      	orrs	r2, r1
 800962a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800962c:	e008      	b.n	8009640 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2101      	movs	r1, #1
 800963a:	430a      	orrs	r2, r1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e000      	b.n	8009642 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009640:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009642:	230f      	movs	r3, #15
 8009644:	18fb      	adds	r3, r7, r3
 8009646:	781b      	ldrb	r3, [r3, #0]
}
 8009648:	0018      	movs	r0, r3
 800964a:	46bd      	mov	sp, r7
 800964c:	b004      	add	sp, #16
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40012c00 	.word	0x40012c00
 8009654:	40014400 	.word	0x40014400
 8009658:	40014800 	.word	0x40014800
 800965c:	40000400 	.word	0x40000400
 8009660:	00010007 	.word	0x00010007

08009664 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800966e:	230f      	movs	r3, #15
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b0c      	cmp	r3, #12
 800967a:	d02a      	beq.n	80096d2 <HAL_TIM_OC_Stop_IT+0x6e>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b0c      	cmp	r3, #12
 8009680:	d830      	bhi.n	80096e4 <HAL_TIM_OC_Stop_IT+0x80>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b08      	cmp	r3, #8
 8009686:	d01b      	beq.n	80096c0 <HAL_TIM_OC_Stop_IT+0x5c>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b08      	cmp	r3, #8
 800968c:	d82a      	bhi.n	80096e4 <HAL_TIM_OC_Stop_IT+0x80>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <HAL_TIM_OC_Stop_IT+0x38>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d009      	beq.n	80096ae <HAL_TIM_OC_Stop_IT+0x4a>
 800969a:	e023      	b.n	80096e4 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2102      	movs	r1, #2
 80096a8:	438a      	bics	r2, r1
 80096aa:	60da      	str	r2, [r3, #12]
      break;
 80096ac:	e01f      	b.n	80096ee <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2104      	movs	r1, #4
 80096ba:	438a      	bics	r2, r1
 80096bc:	60da      	str	r2, [r3, #12]
      break;
 80096be:	e016      	b.n	80096ee <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2108      	movs	r1, #8
 80096cc:	438a      	bics	r2, r1
 80096ce:	60da      	str	r2, [r3, #12]
      break;
 80096d0:	e00d      	b.n	80096ee <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68da      	ldr	r2, [r3, #12]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2110      	movs	r1, #16
 80096de:	438a      	bics	r2, r1
 80096e0:	60da      	str	r2, [r3, #12]
      break;
 80096e2:	e004      	b.n	80096ee <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80096e4:	230f      	movs	r3, #15
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	2201      	movs	r2, #1
 80096ea:	701a      	strb	r2, [r3, #0]
      break;
 80096ec:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80096ee:	230f      	movs	r3, #15
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d000      	beq.n	80096fa <HAL_TIM_OC_Stop_IT+0x96>
 80096f8:	e06e      	b.n	80097d8 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	0018      	movs	r0, r3
 8009704:	f001 fdce 	bl	800b2a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a36      	ldr	r2, [pc, #216]	@ (80097e8 <HAL_TIM_OC_Stop_IT+0x184>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d009      	beq.n	8009726 <HAL_TIM_OC_Stop_IT+0xc2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a35      	ldr	r2, [pc, #212]	@ (80097ec <HAL_TIM_OC_Stop_IT+0x188>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d004      	beq.n	8009726 <HAL_TIM_OC_Stop_IT+0xc2>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a33      	ldr	r2, [pc, #204]	@ (80097f0 <HAL_TIM_OC_Stop_IT+0x18c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d101      	bne.n	800972a <HAL_TIM_OC_Stop_IT+0xc6>
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <HAL_TIM_OC_Stop_IT+0xc8>
 800972a:	2300      	movs	r3, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d013      	beq.n	8009758 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	4a2f      	ldr	r2, [pc, #188]	@ (80097f4 <HAL_TIM_OC_Stop_IT+0x190>)
 8009738:	4013      	ands	r3, r2
 800973a:	d10d      	bne.n	8009758 <HAL_TIM_OC_Stop_IT+0xf4>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	4a2d      	ldr	r2, [pc, #180]	@ (80097f8 <HAL_TIM_OC_Stop_IT+0x194>)
 8009744:	4013      	ands	r3, r2
 8009746:	d107      	bne.n	8009758 <HAL_TIM_OC_Stop_IT+0xf4>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	492a      	ldr	r1, [pc, #168]	@ (80097fc <HAL_TIM_OC_Stop_IT+0x198>)
 8009754:	400a      	ands	r2, r1
 8009756:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	4a25      	ldr	r2, [pc, #148]	@ (80097f4 <HAL_TIM_OC_Stop_IT+0x190>)
 8009760:	4013      	ands	r3, r2
 8009762:	d10d      	bne.n	8009780 <HAL_TIM_OC_Stop_IT+0x11c>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	4a23      	ldr	r2, [pc, #140]	@ (80097f8 <HAL_TIM_OC_Stop_IT+0x194>)
 800976c:	4013      	ands	r3, r2
 800976e:	d107      	bne.n	8009780 <HAL_TIM_OC_Stop_IT+0x11c>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2101      	movs	r1, #1
 800977c:	438a      	bics	r2, r1
 800977e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d104      	bne.n	8009790 <HAL_TIM_OC_Stop_IT+0x12c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	223e      	movs	r2, #62	@ 0x3e
 800978a:	2101      	movs	r1, #1
 800978c:	5499      	strb	r1, [r3, r2]
 800978e:	e023      	b.n	80097d8 <HAL_TIM_OC_Stop_IT+0x174>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b04      	cmp	r3, #4
 8009794:	d104      	bne.n	80097a0 <HAL_TIM_OC_Stop_IT+0x13c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	223f      	movs	r2, #63	@ 0x3f
 800979a:	2101      	movs	r1, #1
 800979c:	5499      	strb	r1, [r3, r2]
 800979e:	e01b      	b.n	80097d8 <HAL_TIM_OC_Stop_IT+0x174>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d104      	bne.n	80097b0 <HAL_TIM_OC_Stop_IT+0x14c>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2240      	movs	r2, #64	@ 0x40
 80097aa:	2101      	movs	r1, #1
 80097ac:	5499      	strb	r1, [r3, r2]
 80097ae:	e013      	b.n	80097d8 <HAL_TIM_OC_Stop_IT+0x174>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b0c      	cmp	r3, #12
 80097b4:	d104      	bne.n	80097c0 <HAL_TIM_OC_Stop_IT+0x15c>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2241      	movs	r2, #65	@ 0x41
 80097ba:	2101      	movs	r1, #1
 80097bc:	5499      	strb	r1, [r3, r2]
 80097be:	e00b      	b.n	80097d8 <HAL_TIM_OC_Stop_IT+0x174>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b10      	cmp	r3, #16
 80097c4:	d104      	bne.n	80097d0 <HAL_TIM_OC_Stop_IT+0x16c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2242      	movs	r2, #66	@ 0x42
 80097ca:	2101      	movs	r1, #1
 80097cc:	5499      	strb	r1, [r3, r2]
 80097ce:	e003      	b.n	80097d8 <HAL_TIM_OC_Stop_IT+0x174>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2243      	movs	r2, #67	@ 0x43
 80097d4:	2101      	movs	r1, #1
 80097d6:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80097d8:	230f      	movs	r3, #15
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	781b      	ldrb	r3, [r3, #0]
}
 80097de:	0018      	movs	r0, r3
 80097e0:	46bd      	mov	sp, r7
 80097e2:	b004      	add	sp, #16
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	46c0      	nop			@ (mov r8, r8)
 80097e8:	40012c00 	.word	0x40012c00
 80097ec:	40014400 	.word	0x40014400
 80097f0:	40014800 	.word	0x40014800
 80097f4:	00001111 	.word	0x00001111
 80097f8:	00000444 	.word	0x00000444
 80097fc:	ffff7fff 	.word	0xffff7fff

08009800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e056      	b.n	80098c0 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	223d      	movs	r2, #61	@ 0x3d
 8009816:	5c9b      	ldrb	r3, [r3, r2]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d113      	bne.n	8009846 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	223c      	movs	r2, #60	@ 0x3c
 8009822:	2100      	movs	r1, #0
 8009824:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	0018      	movs	r0, r3
 800982a:	f001 fd5f 	bl	800b2ec <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009832:	2b00      	cmp	r3, #0
 8009834:	d102      	bne.n	800983c <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a23      	ldr	r2, [pc, #140]	@ (80098c8 <HAL_TIM_PWM_Init+0xc8>)
 800983a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	0010      	movs	r0, r2
 8009844:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	223d      	movs	r2, #61	@ 0x3d
 800984a:	2102      	movs	r1, #2
 800984c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3304      	adds	r3, #4
 8009856:	0019      	movs	r1, r3
 8009858:	0010      	movs	r0, r2
 800985a:	f001 f849 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2248      	movs	r2, #72	@ 0x48
 8009862:	2101      	movs	r1, #1
 8009864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	223e      	movs	r2, #62	@ 0x3e
 800986a:	2101      	movs	r1, #1
 800986c:	5499      	strb	r1, [r3, r2]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	223f      	movs	r2, #63	@ 0x3f
 8009872:	2101      	movs	r1, #1
 8009874:	5499      	strb	r1, [r3, r2]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2240      	movs	r2, #64	@ 0x40
 800987a:	2101      	movs	r1, #1
 800987c:	5499      	strb	r1, [r3, r2]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2241      	movs	r2, #65	@ 0x41
 8009882:	2101      	movs	r1, #1
 8009884:	5499      	strb	r1, [r3, r2]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2242      	movs	r2, #66	@ 0x42
 800988a:	2101      	movs	r1, #1
 800988c:	5499      	strb	r1, [r3, r2]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2243      	movs	r2, #67	@ 0x43
 8009892:	2101      	movs	r1, #1
 8009894:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2244      	movs	r2, #68	@ 0x44
 800989a:	2101      	movs	r1, #1
 800989c:	5499      	strb	r1, [r3, r2]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2245      	movs	r2, #69	@ 0x45
 80098a2:	2101      	movs	r1, #1
 80098a4:	5499      	strb	r1, [r3, r2]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2246      	movs	r2, #70	@ 0x46
 80098aa:	2101      	movs	r1, #1
 80098ac:	5499      	strb	r1, [r3, r2]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2247      	movs	r2, #71	@ 0x47
 80098b2:	2101      	movs	r1, #1
 80098b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	223d      	movs	r2, #61	@ 0x3d
 80098ba:	2101      	movs	r1, #1
 80098bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b002      	add	sp, #8
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	080098cd 	.word	0x080098cd

080098cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098d4:	46c0      	nop			@ (mov r8, r8)
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b002      	add	sp, #8
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d108      	bne.n	80098fe <HAL_TIM_PWM_Start+0x22>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	223e      	movs	r2, #62	@ 0x3e
 80098f0:	5c9b      	ldrb	r3, [r3, r2]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	4193      	sbcs	r3, r2
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	e037      	b.n	800996e <HAL_TIM_PWM_Start+0x92>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b04      	cmp	r3, #4
 8009902:	d108      	bne.n	8009916 <HAL_TIM_PWM_Start+0x3a>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	223f      	movs	r2, #63	@ 0x3f
 8009908:	5c9b      	ldrb	r3, [r3, r2]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	1e5a      	subs	r2, r3, #1
 8009910:	4193      	sbcs	r3, r2
 8009912:	b2db      	uxtb	r3, r3
 8009914:	e02b      	b.n	800996e <HAL_TIM_PWM_Start+0x92>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d108      	bne.n	800992e <HAL_TIM_PWM_Start+0x52>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2240      	movs	r2, #64	@ 0x40
 8009920:	5c9b      	ldrb	r3, [r3, r2]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	1e5a      	subs	r2, r3, #1
 8009928:	4193      	sbcs	r3, r2
 800992a:	b2db      	uxtb	r3, r3
 800992c:	e01f      	b.n	800996e <HAL_TIM_PWM_Start+0x92>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b0c      	cmp	r3, #12
 8009932:	d108      	bne.n	8009946 <HAL_TIM_PWM_Start+0x6a>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2241      	movs	r2, #65	@ 0x41
 8009938:	5c9b      	ldrb	r3, [r3, r2]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	3b01      	subs	r3, #1
 800993e:	1e5a      	subs	r2, r3, #1
 8009940:	4193      	sbcs	r3, r2
 8009942:	b2db      	uxtb	r3, r3
 8009944:	e013      	b.n	800996e <HAL_TIM_PWM_Start+0x92>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b10      	cmp	r3, #16
 800994a:	d108      	bne.n	800995e <HAL_TIM_PWM_Start+0x82>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2242      	movs	r2, #66	@ 0x42
 8009950:	5c9b      	ldrb	r3, [r3, r2]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	3b01      	subs	r3, #1
 8009956:	1e5a      	subs	r2, r3, #1
 8009958:	4193      	sbcs	r3, r2
 800995a:	b2db      	uxtb	r3, r3
 800995c:	e007      	b.n	800996e <HAL_TIM_PWM_Start+0x92>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2243      	movs	r2, #67	@ 0x43
 8009962:	5c9b      	ldrb	r3, [r3, r2]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	1e5a      	subs	r2, r3, #1
 800996a:	4193      	sbcs	r3, r2
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e081      	b.n	8009a7a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_TIM_PWM_Start+0xaa>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	223e      	movs	r2, #62	@ 0x3e
 8009980:	2102      	movs	r1, #2
 8009982:	5499      	strb	r1, [r3, r2]
 8009984:	e023      	b.n	80099ce <HAL_TIM_PWM_Start+0xf2>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b04      	cmp	r3, #4
 800998a:	d104      	bne.n	8009996 <HAL_TIM_PWM_Start+0xba>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	223f      	movs	r2, #63	@ 0x3f
 8009990:	2102      	movs	r1, #2
 8009992:	5499      	strb	r1, [r3, r2]
 8009994:	e01b      	b.n	80099ce <HAL_TIM_PWM_Start+0xf2>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b08      	cmp	r3, #8
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_PWM_Start+0xca>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2240      	movs	r2, #64	@ 0x40
 80099a0:	2102      	movs	r1, #2
 80099a2:	5499      	strb	r1, [r3, r2]
 80099a4:	e013      	b.n	80099ce <HAL_TIM_PWM_Start+0xf2>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b0c      	cmp	r3, #12
 80099aa:	d104      	bne.n	80099b6 <HAL_TIM_PWM_Start+0xda>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2241      	movs	r2, #65	@ 0x41
 80099b0:	2102      	movs	r1, #2
 80099b2:	5499      	strb	r1, [r3, r2]
 80099b4:	e00b      	b.n	80099ce <HAL_TIM_PWM_Start+0xf2>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d104      	bne.n	80099c6 <HAL_TIM_PWM_Start+0xea>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2242      	movs	r2, #66	@ 0x42
 80099c0:	2102      	movs	r1, #2
 80099c2:	5499      	strb	r1, [r3, r2]
 80099c4:	e003      	b.n	80099ce <HAL_TIM_PWM_Start+0xf2>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2243      	movs	r2, #67	@ 0x43
 80099ca:	2102      	movs	r1, #2
 80099cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	2201      	movs	r2, #1
 80099d6:	0018      	movs	r0, r3
 80099d8:	f001 fc64 	bl	800b2a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a28      	ldr	r2, [pc, #160]	@ (8009a84 <HAL_TIM_PWM_Start+0x1a8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d009      	beq.n	80099fa <HAL_TIM_PWM_Start+0x11e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a27      	ldr	r2, [pc, #156]	@ (8009a88 <HAL_TIM_PWM_Start+0x1ac>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d004      	beq.n	80099fa <HAL_TIM_PWM_Start+0x11e>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a25      	ldr	r2, [pc, #148]	@ (8009a8c <HAL_TIM_PWM_Start+0x1b0>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d101      	bne.n	80099fe <HAL_TIM_PWM_Start+0x122>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e000      	b.n	8009a00 <HAL_TIM_PWM_Start+0x124>
 80099fe:	2300      	movs	r3, #0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d008      	beq.n	8009a16 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2180      	movs	r1, #128	@ 0x80
 8009a10:	0209      	lsls	r1, r1, #8
 8009a12:	430a      	orrs	r2, r1
 8009a14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a84 <HAL_TIM_PWM_Start+0x1a8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00a      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x15a>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	2380      	movs	r3, #128	@ 0x80
 8009a26:	05db      	lsls	r3, r3, #23
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d004      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x15a>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a17      	ldr	r2, [pc, #92]	@ (8009a90 <HAL_TIM_PWM_Start+0x1b4>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d116      	bne.n	8009a64 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	4a15      	ldr	r2, [pc, #84]	@ (8009a94 <HAL_TIM_PWM_Start+0x1b8>)
 8009a3e:	4013      	ands	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b06      	cmp	r3, #6
 8009a46:	d016      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x19a>
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	2380      	movs	r3, #128	@ 0x80
 8009a4c:	025b      	lsls	r3, r3, #9
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d011      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a62:	e008      	b.n	8009a76 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	430a      	orrs	r2, r1
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	e000      	b.n	8009a78 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a76:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	b004      	add	sp, #16
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	46c0      	nop			@ (mov r8, r8)
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40014400 	.word	0x40014400
 8009a8c:	40014800 	.word	0x40014800
 8009a90:	40000400 	.word	0x40000400
 8009a94:	00010007 	.word	0x00010007

08009a98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e056      	b.n	8009b58 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	223d      	movs	r2, #61	@ 0x3d
 8009aae:	5c9b      	ldrb	r3, [r3, r2]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d113      	bne.n	8009ade <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	223c      	movs	r2, #60	@ 0x3c
 8009aba:	2100      	movs	r1, #0
 8009abc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f001 fc13 	bl	800b2ec <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a23      	ldr	r2, [pc, #140]	@ (8009b60 <HAL_TIM_IC_Init+0xc8>)
 8009ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	0010      	movs	r0, r2
 8009adc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	223d      	movs	r2, #61	@ 0x3d
 8009ae2:	2102      	movs	r1, #2
 8009ae4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3304      	adds	r3, #4
 8009aee:	0019      	movs	r1, r3
 8009af0:	0010      	movs	r0, r2
 8009af2:	f000 fefd 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2248      	movs	r2, #72	@ 0x48
 8009afa:	2101      	movs	r1, #1
 8009afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	223e      	movs	r2, #62	@ 0x3e
 8009b02:	2101      	movs	r1, #1
 8009b04:	5499      	strb	r1, [r3, r2]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	223f      	movs	r2, #63	@ 0x3f
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	5499      	strb	r1, [r3, r2]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2240      	movs	r2, #64	@ 0x40
 8009b12:	2101      	movs	r1, #1
 8009b14:	5499      	strb	r1, [r3, r2]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2241      	movs	r2, #65	@ 0x41
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	5499      	strb	r1, [r3, r2]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2242      	movs	r2, #66	@ 0x42
 8009b22:	2101      	movs	r1, #1
 8009b24:	5499      	strb	r1, [r3, r2]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2243      	movs	r2, #67	@ 0x43
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2244      	movs	r2, #68	@ 0x44
 8009b32:	2101      	movs	r1, #1
 8009b34:	5499      	strb	r1, [r3, r2]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2245      	movs	r2, #69	@ 0x45
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	5499      	strb	r1, [r3, r2]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2246      	movs	r2, #70	@ 0x46
 8009b42:	2101      	movs	r1, #1
 8009b44:	5499      	strb	r1, [r3, r2]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2247      	movs	r2, #71	@ 0x47
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	223d      	movs	r2, #61	@ 0x3d
 8009b52:	2101      	movs	r1, #1
 8009b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b002      	add	sp, #8
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	08009b65 	.word	0x08009b65

08009b64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009b6c:	46c0      	nop			@ (mov r8, r8)
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b002      	add	sp, #8
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b7e:	230f      	movs	r3, #15
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d104      	bne.n	8009b96 <HAL_TIM_IC_Start_IT+0x22>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	223e      	movs	r2, #62	@ 0x3e
 8009b90:	5c9b      	ldrb	r3, [r3, r2]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	e023      	b.n	8009bde <HAL_TIM_IC_Start_IT+0x6a>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d104      	bne.n	8009ba6 <HAL_TIM_IC_Start_IT+0x32>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	223f      	movs	r2, #63	@ 0x3f
 8009ba0:	5c9b      	ldrb	r3, [r3, r2]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	e01b      	b.n	8009bde <HAL_TIM_IC_Start_IT+0x6a>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d104      	bne.n	8009bb6 <HAL_TIM_IC_Start_IT+0x42>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2240      	movs	r2, #64	@ 0x40
 8009bb0:	5c9b      	ldrb	r3, [r3, r2]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	e013      	b.n	8009bde <HAL_TIM_IC_Start_IT+0x6a>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b0c      	cmp	r3, #12
 8009bba:	d104      	bne.n	8009bc6 <HAL_TIM_IC_Start_IT+0x52>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2241      	movs	r2, #65	@ 0x41
 8009bc0:	5c9b      	ldrb	r3, [r3, r2]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	e00b      	b.n	8009bde <HAL_TIM_IC_Start_IT+0x6a>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b10      	cmp	r3, #16
 8009bca:	d104      	bne.n	8009bd6 <HAL_TIM_IC_Start_IT+0x62>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2242      	movs	r2, #66	@ 0x42
 8009bd0:	5c9b      	ldrb	r3, [r3, r2]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	e003      	b.n	8009bde <HAL_TIM_IC_Start_IT+0x6a>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2243      	movs	r2, #67	@ 0x43
 8009bda:	5c9b      	ldrb	r3, [r3, r2]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	220e      	movs	r2, #14
 8009be0:	18ba      	adds	r2, r7, r2
 8009be2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d104      	bne.n	8009bf4 <HAL_TIM_IC_Start_IT+0x80>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2244      	movs	r2, #68	@ 0x44
 8009bee:	5c9b      	ldrb	r3, [r3, r2]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	e013      	b.n	8009c1c <HAL_TIM_IC_Start_IT+0xa8>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d104      	bne.n	8009c04 <HAL_TIM_IC_Start_IT+0x90>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2245      	movs	r2, #69	@ 0x45
 8009bfe:	5c9b      	ldrb	r3, [r3, r2]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	e00b      	b.n	8009c1c <HAL_TIM_IC_Start_IT+0xa8>
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d104      	bne.n	8009c14 <HAL_TIM_IC_Start_IT+0xa0>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2246      	movs	r2, #70	@ 0x46
 8009c0e:	5c9b      	ldrb	r3, [r3, r2]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	e003      	b.n	8009c1c <HAL_TIM_IC_Start_IT+0xa8>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2247      	movs	r2, #71	@ 0x47
 8009c18:	5c9b      	ldrb	r3, [r3, r2]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	210d      	movs	r1, #13
 8009c1e:	187a      	adds	r2, r7, r1
 8009c20:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c22:	230e      	movs	r3, #14
 8009c24:	18fb      	adds	r3, r7, r3
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d103      	bne.n	8009c34 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c2c:	187b      	adds	r3, r7, r1
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d001      	beq.n	8009c38 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e0c3      	b.n	8009dc0 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d104      	bne.n	8009c48 <HAL_TIM_IC_Start_IT+0xd4>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	223e      	movs	r2, #62	@ 0x3e
 8009c42:	2102      	movs	r1, #2
 8009c44:	5499      	strb	r1, [r3, r2]
 8009c46:	e023      	b.n	8009c90 <HAL_TIM_IC_Start_IT+0x11c>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d104      	bne.n	8009c58 <HAL_TIM_IC_Start_IT+0xe4>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	223f      	movs	r2, #63	@ 0x3f
 8009c52:	2102      	movs	r1, #2
 8009c54:	5499      	strb	r1, [r3, r2]
 8009c56:	e01b      	b.n	8009c90 <HAL_TIM_IC_Start_IT+0x11c>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b08      	cmp	r3, #8
 8009c5c:	d104      	bne.n	8009c68 <HAL_TIM_IC_Start_IT+0xf4>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2240      	movs	r2, #64	@ 0x40
 8009c62:	2102      	movs	r1, #2
 8009c64:	5499      	strb	r1, [r3, r2]
 8009c66:	e013      	b.n	8009c90 <HAL_TIM_IC_Start_IT+0x11c>
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b0c      	cmp	r3, #12
 8009c6c:	d104      	bne.n	8009c78 <HAL_TIM_IC_Start_IT+0x104>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2241      	movs	r2, #65	@ 0x41
 8009c72:	2102      	movs	r1, #2
 8009c74:	5499      	strb	r1, [r3, r2]
 8009c76:	e00b      	b.n	8009c90 <HAL_TIM_IC_Start_IT+0x11c>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d104      	bne.n	8009c88 <HAL_TIM_IC_Start_IT+0x114>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2242      	movs	r2, #66	@ 0x42
 8009c82:	2102      	movs	r1, #2
 8009c84:	5499      	strb	r1, [r3, r2]
 8009c86:	e003      	b.n	8009c90 <HAL_TIM_IC_Start_IT+0x11c>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2243      	movs	r2, #67	@ 0x43
 8009c8c:	2102      	movs	r1, #2
 8009c8e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d104      	bne.n	8009ca0 <HAL_TIM_IC_Start_IT+0x12c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2244      	movs	r2, #68	@ 0x44
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	5499      	strb	r1, [r3, r2]
 8009c9e:	e013      	b.n	8009cc8 <HAL_TIM_IC_Start_IT+0x154>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d104      	bne.n	8009cb0 <HAL_TIM_IC_Start_IT+0x13c>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2245      	movs	r2, #69	@ 0x45
 8009caa:	2102      	movs	r1, #2
 8009cac:	5499      	strb	r1, [r3, r2]
 8009cae:	e00b      	b.n	8009cc8 <HAL_TIM_IC_Start_IT+0x154>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	d104      	bne.n	8009cc0 <HAL_TIM_IC_Start_IT+0x14c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2246      	movs	r2, #70	@ 0x46
 8009cba:	2102      	movs	r1, #2
 8009cbc:	5499      	strb	r1, [r3, r2]
 8009cbe:	e003      	b.n	8009cc8 <HAL_TIM_IC_Start_IT+0x154>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2247      	movs	r2, #71	@ 0x47
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b0c      	cmp	r3, #12
 8009ccc:	d02a      	beq.n	8009d24 <HAL_TIM_IC_Start_IT+0x1b0>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b0c      	cmp	r3, #12
 8009cd2:	d830      	bhi.n	8009d36 <HAL_TIM_IC_Start_IT+0x1c2>
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d01b      	beq.n	8009d12 <HAL_TIM_IC_Start_IT+0x19e>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b08      	cmp	r3, #8
 8009cde:	d82a      	bhi.n	8009d36 <HAL_TIM_IC_Start_IT+0x1c2>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x17a>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d009      	beq.n	8009d00 <HAL_TIM_IC_Start_IT+0x18c>
 8009cec:	e023      	b.n	8009d36 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2102      	movs	r1, #2
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	60da      	str	r2, [r3, #12]
      break;
 8009cfe:	e01f      	b.n	8009d40 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2104      	movs	r1, #4
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	60da      	str	r2, [r3, #12]
      break;
 8009d10:	e016      	b.n	8009d40 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68da      	ldr	r2, [r3, #12]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2108      	movs	r1, #8
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	60da      	str	r2, [r3, #12]
      break;
 8009d22:	e00d      	b.n	8009d40 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68da      	ldr	r2, [r3, #12]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2110      	movs	r1, #16
 8009d30:	430a      	orrs	r2, r1
 8009d32:	60da      	str	r2, [r3, #12]
      break;
 8009d34:	e004      	b.n	8009d40 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8009d36:	230f      	movs	r3, #15
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	701a      	strb	r2, [r3, #0]
      break;
 8009d3e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009d40:	230f      	movs	r3, #15
 8009d42:	18fb      	adds	r3, r7, r3
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d137      	bne.n	8009dba <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	2201      	movs	r2, #1
 8009d52:	0018      	movs	r0, r3
 8009d54:	f001 faa6 	bl	800b2a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc8 <HAL_TIM_IC_Start_IT+0x254>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00a      	beq.n	8009d78 <HAL_TIM_IC_Start_IT+0x204>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	2380      	movs	r3, #128	@ 0x80
 8009d68:	05db      	lsls	r3, r3, #23
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d004      	beq.n	8009d78 <HAL_TIM_IC_Start_IT+0x204>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a16      	ldr	r2, [pc, #88]	@ (8009dcc <HAL_TIM_IC_Start_IT+0x258>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d116      	bne.n	8009da6 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	4a14      	ldr	r2, [pc, #80]	@ (8009dd0 <HAL_TIM_IC_Start_IT+0x25c>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b06      	cmp	r3, #6
 8009d88:	d016      	beq.n	8009db8 <HAL_TIM_IC_Start_IT+0x244>
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	2380      	movs	r3, #128	@ 0x80
 8009d8e:	025b      	lsls	r3, r3, #9
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d011      	beq.n	8009db8 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2101      	movs	r1, #1
 8009da0:	430a      	orrs	r2, r1
 8009da2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009da4:	e008      	b.n	8009db8 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2101      	movs	r1, #1
 8009db2:	430a      	orrs	r2, r1
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	e000      	b.n	8009dba <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009dba:	230f      	movs	r3, #15
 8009dbc:	18fb      	adds	r3, r7, r3
 8009dbe:	781b      	ldrb	r3, [r3, #0]
}
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	b004      	add	sp, #16
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40012c00 	.word	0x40012c00
 8009dcc:	40000400 	.word	0x40000400
 8009dd0:	00010007 	.word	0x00010007

08009dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2202      	movs	r2, #2
 8009df0:	4013      	ands	r3, r2
 8009df2:	d027      	beq.n	8009e44 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2202      	movs	r2, #2
 8009df8:	4013      	ands	r3, r2
 8009dfa:	d023      	beq.n	8009e44 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2203      	movs	r2, #3
 8009e02:	4252      	negs	r2, r2
 8009e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4013      	ands	r3, r2
 8009e16:	d006      	beq.n	8009e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2294      	movs	r2, #148	@ 0x94
 8009e1c:	589b      	ldr	r3, [r3, r2]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	0010      	movs	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	e00b      	b.n	8009e3e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	229c      	movs	r2, #156	@ 0x9c
 8009e2a:	589b      	ldr	r3, [r3, r2]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	0010      	movs	r0, r2
 8009e30:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	22a0      	movs	r2, #160	@ 0xa0
 8009e36:	589b      	ldr	r3, [r3, r2]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	0010      	movs	r0, r2
 8009e3c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2204      	movs	r2, #4
 8009e48:	4013      	ands	r3, r2
 8009e4a:	d028      	beq.n	8009e9e <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	4013      	ands	r3, r2
 8009e52:	d024      	beq.n	8009e9e <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2205      	movs	r2, #5
 8009e5a:	4252      	negs	r2, r2
 8009e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2202      	movs	r2, #2
 8009e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699a      	ldr	r2, [r3, #24]
 8009e6a:	23c0      	movs	r3, #192	@ 0xc0
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4013      	ands	r3, r2
 8009e70:	d006      	beq.n	8009e80 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2294      	movs	r2, #148	@ 0x94
 8009e76:	589b      	ldr	r3, [r3, r2]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	0010      	movs	r0, r2
 8009e7c:	4798      	blx	r3
 8009e7e:	e00b      	b.n	8009e98 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	229c      	movs	r2, #156	@ 0x9c
 8009e84:	589b      	ldr	r3, [r3, r2]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	0010      	movs	r0, r2
 8009e8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	22a0      	movs	r2, #160	@ 0xa0
 8009e90:	589b      	ldr	r3, [r3, r2]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	0010      	movs	r0, r2
 8009e96:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	d027      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2208      	movs	r2, #8
 8009eaa:	4013      	ands	r3, r2
 8009eac:	d023      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2209      	movs	r2, #9
 8009eb4:	4252      	negs	r2, r2
 8009eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2204      	movs	r2, #4
 8009ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d006      	beq.n	8009ed8 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2294      	movs	r2, #148	@ 0x94
 8009ece:	589b      	ldr	r3, [r3, r2]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	0010      	movs	r0, r2
 8009ed4:	4798      	blx	r3
 8009ed6:	e00b      	b.n	8009ef0 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	229c      	movs	r2, #156	@ 0x9c
 8009edc:	589b      	ldr	r3, [r3, r2]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	0010      	movs	r0, r2
 8009ee2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	22a0      	movs	r2, #160	@ 0xa0
 8009ee8:	589b      	ldr	r3, [r3, r2]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	0010      	movs	r0, r2
 8009eee:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2210      	movs	r2, #16
 8009efa:	4013      	ands	r3, r2
 8009efc:	d028      	beq.n	8009f50 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2210      	movs	r2, #16
 8009f02:	4013      	ands	r3, r2
 8009f04:	d024      	beq.n	8009f50 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2211      	movs	r2, #17
 8009f0c:	4252      	negs	r2, r2
 8009f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2208      	movs	r2, #8
 8009f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69da      	ldr	r2, [r3, #28]
 8009f1c:	23c0      	movs	r3, #192	@ 0xc0
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4013      	ands	r3, r2
 8009f22:	d006      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2294      	movs	r2, #148	@ 0x94
 8009f28:	589b      	ldr	r3, [r3, r2]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	0010      	movs	r0, r2
 8009f2e:	4798      	blx	r3
 8009f30:	e00b      	b.n	8009f4a <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	229c      	movs	r2, #156	@ 0x9c
 8009f36:	589b      	ldr	r3, [r3, r2]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	0010      	movs	r0, r2
 8009f3c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	22a0      	movs	r2, #160	@ 0xa0
 8009f42:	589b      	ldr	r3, [r3, r2]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	0010      	movs	r0, r2
 8009f48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2201      	movs	r2, #1
 8009f54:	4013      	ands	r3, r2
 8009f56:	d00e      	beq.n	8009f76 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	d00a      	beq.n	8009f76 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2202      	movs	r2, #2
 8009f66:	4252      	negs	r2, r2
 8009f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2284      	movs	r2, #132	@ 0x84
 8009f6e:	589b      	ldr	r3, [r3, r2]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	0010      	movs	r0, r2
 8009f74:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2280      	movs	r2, #128	@ 0x80
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	d104      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	2380      	movs	r3, #128	@ 0x80
 8009f82:	019b      	lsls	r3, r3, #6
 8009f84:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f86:	d00d      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2280      	movs	r2, #128	@ 0x80
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	d009      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a22      	ldr	r2, [pc, #136]	@ (800a020 <HAL_TIM_IRQHandler+0x24c>)
 8009f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	22b4      	movs	r2, #180	@ 0xb4
 8009f9c:	589b      	ldr	r3, [r3, r2]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	0010      	movs	r0, r2
 8009fa2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	2380      	movs	r3, #128	@ 0x80
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	4013      	ands	r3, r2
 8009fac:	d00d      	beq.n	8009fca <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2280      	movs	r2, #128	@ 0x80
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	d009      	beq.n	8009fca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a1a      	ldr	r2, [pc, #104]	@ (800a024 <HAL_TIM_IRQHandler+0x250>)
 8009fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	22b8      	movs	r2, #184	@ 0xb8
 8009fc2:	589b      	ldr	r3, [r3, r2]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	0010      	movs	r0, r2
 8009fc8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2240      	movs	r2, #64	@ 0x40
 8009fce:	4013      	ands	r3, r2
 8009fd0:	d00e      	beq.n	8009ff0 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2240      	movs	r2, #64	@ 0x40
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	d00a      	beq.n	8009ff0 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2241      	movs	r2, #65	@ 0x41
 8009fe0:	4252      	negs	r2, r2
 8009fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	228c      	movs	r2, #140	@ 0x8c
 8009fe8:	589b      	ldr	r3, [r3, r2]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	0010      	movs	r0, r2
 8009fee:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	d00e      	beq.n	800a016 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	d00a      	beq.n	800a016 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2221      	movs	r2, #33	@ 0x21
 800a006:	4252      	negs	r2, r2
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	22ac      	movs	r2, #172	@ 0xac
 800a00e:	589b      	ldr	r3, [r3, r2]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	0010      	movs	r0, r2
 800a014:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a016:	46c0      	nop			@ (mov r8, r8)
 800a018:	46bd      	mov	sp, r7
 800a01a:	b004      	add	sp, #16
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	46c0      	nop			@ (mov r8, r8)
 800a020:	ffffdf7f 	.word	0xffffdf7f
 800a024:	fffffeff 	.word	0xfffffeff

0800a028 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a034:	2317      	movs	r3, #23
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	223c      	movs	r2, #60	@ 0x3c
 800a040:	5c9b      	ldrb	r3, [r3, r2]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_TIM_OC_ConfigChannel+0x22>
 800a046:	2302      	movs	r3, #2
 800a048:	e048      	b.n	800a0dc <HAL_TIM_OC_ConfigChannel+0xb4>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	223c      	movs	r2, #60	@ 0x3c
 800a04e:	2101      	movs	r1, #1
 800a050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b14      	cmp	r3, #20
 800a056:	d835      	bhi.n	800a0c4 <HAL_TIM_OC_ConfigChannel+0x9c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	009a      	lsls	r2, r3, #2
 800a05c:	4b21      	ldr	r3, [pc, #132]	@ (800a0e4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a05e:	18d3      	adds	r3, r2, r3
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	0011      	movs	r1, r2
 800a06c:	0018      	movs	r0, r3
 800a06e:	f000 fcc3 	bl	800a9f8 <TIM_OC1_SetConfig>
      break;
 800a072:	e02c      	b.n	800a0ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	0011      	movs	r1, r2
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 fd3b 	bl	800aaf8 <TIM_OC2_SetConfig>
      break;
 800a082:	e024      	b.n	800a0ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	0011      	movs	r1, r2
 800a08c:	0018      	movs	r0, r3
 800a08e:	f000 fdb1 	bl	800abf4 <TIM_OC3_SetConfig>
      break;
 800a092:	e01c      	b.n	800a0ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	0011      	movs	r1, r2
 800a09c:	0018      	movs	r0, r3
 800a09e:	f000 fe2b 	bl	800acf8 <TIM_OC4_SetConfig>
      break;
 800a0a2:	e014      	b.n	800a0ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	0011      	movs	r1, r2
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	f000 fe87 	bl	800adc0 <TIM_OC5_SetConfig>
      break;
 800a0b2:	e00c      	b.n	800a0ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	0011      	movs	r1, r2
 800a0bc:	0018      	movs	r0, r3
 800a0be:	f000 fed9 	bl	800ae74 <TIM_OC6_SetConfig>
      break;
 800a0c2:	e004      	b.n	800a0ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a0c4:	2317      	movs	r3, #23
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	701a      	strb	r2, [r3, #0]
      break;
 800a0cc:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	223c      	movs	r2, #60	@ 0x3c
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	5499      	strb	r1, [r3, r2]

  return status;
 800a0d6:	2317      	movs	r3, #23
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	781b      	ldrb	r3, [r3, #0]
}
 800a0dc:	0018      	movs	r0, r3
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	b006      	add	sp, #24
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	0800d7b8 	.word	0x0800d7b8

0800a0e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f4:	2317      	movs	r3, #23
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	223c      	movs	r2, #60	@ 0x3c
 800a100:	5c9b      	ldrb	r3, [r3, r2]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d101      	bne.n	800a10a <HAL_TIM_IC_ConfigChannel+0x22>
 800a106:	2302      	movs	r3, #2
 800a108:	e08c      	b.n	800a224 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	223c      	movs	r2, #60	@ 0x3c
 800a10e:	2101      	movs	r1, #1
 800a110:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d11b      	bne.n	800a150 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a128:	f000 ff02 	bl	800af30 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	210c      	movs	r1, #12
 800a138:	438a      	bics	r2, r1
 800a13a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6999      	ldr	r1, [r3, #24]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	619a      	str	r2, [r3, #24]
 800a14e:	e062      	b.n	800a216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b04      	cmp	r3, #4
 800a154:	d11c      	bne.n	800a190 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a166:	f000 ff67 	bl	800b038 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699a      	ldr	r2, [r3, #24]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	492d      	ldr	r1, [pc, #180]	@ (800a22c <HAL_TIM_IC_ConfigChannel+0x144>)
 800a176:	400a      	ands	r2, r1
 800a178:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6999      	ldr	r1, [r3, #24]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	021a      	lsls	r2, r3, #8
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	619a      	str	r2, [r3, #24]
 800a18e:	e042      	b.n	800a216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b08      	cmp	r3, #8
 800a194:	d11b      	bne.n	800a1ce <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a1a6:	f000 ffbb 	bl	800b120 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	69da      	ldr	r2, [r3, #28]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	210c      	movs	r1, #12
 800a1b6:	438a      	bics	r2, r1
 800a1b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69d9      	ldr	r1, [r3, #28]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	61da      	str	r2, [r3, #28]
 800a1cc:	e023      	b.n	800a216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b0c      	cmp	r3, #12
 800a1d2:	d11c      	bne.n	800a20e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a1e4:	f000 ffdc 	bl	800b1a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69da      	ldr	r2, [r3, #28]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	490e      	ldr	r1, [pc, #56]	@ (800a22c <HAL_TIM_IC_ConfigChannel+0x144>)
 800a1f4:	400a      	ands	r2, r1
 800a1f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69d9      	ldr	r1, [r3, #28]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	021a      	lsls	r2, r3, #8
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	430a      	orrs	r2, r1
 800a20a:	61da      	str	r2, [r3, #28]
 800a20c:	e003      	b.n	800a216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a20e:	2317      	movs	r3, #23
 800a210:	18fb      	adds	r3, r7, r3
 800a212:	2201      	movs	r2, #1
 800a214:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	223c      	movs	r2, #60	@ 0x3c
 800a21a:	2100      	movs	r1, #0
 800a21c:	5499      	strb	r1, [r3, r2]

  return status;
 800a21e:	2317      	movs	r3, #23
 800a220:	18fb      	adds	r3, r7, r3
 800a222:	781b      	ldrb	r3, [r3, #0]
}
 800a224:	0018      	movs	r0, r3
 800a226:	46bd      	mov	sp, r7
 800a228:	b006      	add	sp, #24
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	fffff3ff 	.word	0xfffff3ff

0800a230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a23c:	2317      	movs	r3, #23
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	2200      	movs	r2, #0
 800a242:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	223c      	movs	r2, #60	@ 0x3c
 800a248:	5c9b      	ldrb	r3, [r3, r2]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a24e:	2302      	movs	r3, #2
 800a250:	e0e5      	b.n	800a41e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	223c      	movs	r2, #60	@ 0x3c
 800a256:	2101      	movs	r1, #1
 800a258:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b14      	cmp	r3, #20
 800a25e:	d900      	bls.n	800a262 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a260:	e0d1      	b.n	800a406 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	009a      	lsls	r2, r3, #2
 800a266:	4b70      	ldr	r3, [pc, #448]	@ (800a428 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a268:	18d3      	adds	r3, r2, r3
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	0011      	movs	r1, r2
 800a276:	0018      	movs	r0, r3
 800a278:	f000 fbbe 	bl	800a9f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	699a      	ldr	r2, [r3, #24]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2108      	movs	r1, #8
 800a288:	430a      	orrs	r2, r1
 800a28a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2104      	movs	r1, #4
 800a298:	438a      	bics	r2, r1
 800a29a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6999      	ldr	r1, [r3, #24]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	691a      	ldr	r2, [r3, #16]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	619a      	str	r2, [r3, #24]
      break;
 800a2ae:	e0af      	b.n	800a410 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	0011      	movs	r1, r2
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 fc1d 	bl	800aaf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2180      	movs	r1, #128	@ 0x80
 800a2ca:	0109      	lsls	r1, r1, #4
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4954      	ldr	r1, [pc, #336]	@ (800a42c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a2dc:	400a      	ands	r2, r1
 800a2de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6999      	ldr	r1, [r3, #24]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	021a      	lsls	r2, r3, #8
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	619a      	str	r2, [r3, #24]
      break;
 800a2f4:	e08c      	b.n	800a410 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	0011      	movs	r1, r2
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 fc78 	bl	800abf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69da      	ldr	r2, [r3, #28]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2108      	movs	r1, #8
 800a310:	430a      	orrs	r2, r1
 800a312:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	69da      	ldr	r2, [r3, #28]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2104      	movs	r1, #4
 800a320:	438a      	bics	r2, r1
 800a322:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69d9      	ldr	r1, [r3, #28]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	691a      	ldr	r2, [r3, #16]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	61da      	str	r2, [r3, #28]
      break;
 800a336:	e06b      	b.n	800a410 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	0011      	movs	r1, r2
 800a340:	0018      	movs	r0, r3
 800a342:	f000 fcd9 	bl	800acf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69da      	ldr	r2, [r3, #28]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2180      	movs	r1, #128	@ 0x80
 800a352:	0109      	lsls	r1, r1, #4
 800a354:	430a      	orrs	r2, r1
 800a356:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69da      	ldr	r2, [r3, #28]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4932      	ldr	r1, [pc, #200]	@ (800a42c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a364:	400a      	ands	r2, r1
 800a366:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69d9      	ldr	r1, [r3, #28]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	021a      	lsls	r2, r3, #8
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	61da      	str	r2, [r3, #28]
      break;
 800a37c:	e048      	b.n	800a410 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	0011      	movs	r1, r2
 800a386:	0018      	movs	r0, r3
 800a388:	f000 fd1a 	bl	800adc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2108      	movs	r1, #8
 800a398:	430a      	orrs	r2, r1
 800a39a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2104      	movs	r1, #4
 800a3a8:	438a      	bics	r2, r1
 800a3aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	691a      	ldr	r2, [r3, #16]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a3be:	e027      	b.n	800a410 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	0011      	movs	r1, r2
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 fd53 	bl	800ae74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2180      	movs	r1, #128	@ 0x80
 800a3da:	0109      	lsls	r1, r1, #4
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4910      	ldr	r1, [pc, #64]	@ (800a42c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a3ec:	400a      	ands	r2, r1
 800a3ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	021a      	lsls	r2, r3, #8
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a404:	e004      	b.n	800a410 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a406:	2317      	movs	r3, #23
 800a408:	18fb      	adds	r3, r7, r3
 800a40a:	2201      	movs	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
      break;
 800a40e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	223c      	movs	r2, #60	@ 0x3c
 800a414:	2100      	movs	r1, #0
 800a416:	5499      	strb	r1, [r3, r2]

  return status;
 800a418:	2317      	movs	r3, #23
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	781b      	ldrb	r3, [r3, #0]
}
 800a41e:	0018      	movs	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	b006      	add	sp, #24
 800a424:	bd80      	pop	{r7, pc}
 800a426:	46c0      	nop			@ (mov r8, r8)
 800a428:	0800d80c 	.word	0x0800d80c
 800a42c:	fffffbff 	.word	0xfffffbff

0800a430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a43a:	230f      	movs	r3, #15
 800a43c:	18fb      	adds	r3, r7, r3
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	223c      	movs	r2, #60	@ 0x3c
 800a446:	5c9b      	ldrb	r3, [r3, r2]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d101      	bne.n	800a450 <HAL_TIM_ConfigClockSource+0x20>
 800a44c:	2302      	movs	r3, #2
 800a44e:	e0bc      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x19a>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	223c      	movs	r2, #60	@ 0x3c
 800a454:	2101      	movs	r1, #1
 800a456:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	223d      	movs	r2, #61	@ 0x3d
 800a45c:	2102      	movs	r1, #2
 800a45e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4a5a      	ldr	r2, [pc, #360]	@ (800a5d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a46c:	4013      	ands	r3, r2
 800a46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	4a59      	ldr	r2, [pc, #356]	@ (800a5d8 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a474:	4013      	ands	r3, r2
 800a476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2280      	movs	r2, #128	@ 0x80
 800a486:	0192      	lsls	r2, r2, #6
 800a488:	4293      	cmp	r3, r2
 800a48a:	d040      	beq.n	800a50e <HAL_TIM_ConfigClockSource+0xde>
 800a48c:	2280      	movs	r2, #128	@ 0x80
 800a48e:	0192      	lsls	r2, r2, #6
 800a490:	4293      	cmp	r3, r2
 800a492:	d900      	bls.n	800a496 <HAL_TIM_ConfigClockSource+0x66>
 800a494:	e088      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a496:	2280      	movs	r2, #128	@ 0x80
 800a498:	0152      	lsls	r2, r2, #5
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d100      	bne.n	800a4a0 <HAL_TIM_ConfigClockSource+0x70>
 800a49e:	e088      	b.n	800a5b2 <HAL_TIM_ConfigClockSource+0x182>
 800a4a0:	2280      	movs	r2, #128	@ 0x80
 800a4a2:	0152      	lsls	r2, r2, #5
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d900      	bls.n	800a4aa <HAL_TIM_ConfigClockSource+0x7a>
 800a4a8:	e07e      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4aa:	2b70      	cmp	r3, #112	@ 0x70
 800a4ac:	d018      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0xb0>
 800a4ae:	d900      	bls.n	800a4b2 <HAL_TIM_ConfigClockSource+0x82>
 800a4b0:	e07a      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4b2:	2b60      	cmp	r3, #96	@ 0x60
 800a4b4:	d04f      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0x126>
 800a4b6:	d900      	bls.n	800a4ba <HAL_TIM_ConfigClockSource+0x8a>
 800a4b8:	e076      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4ba:	2b50      	cmp	r3, #80	@ 0x50
 800a4bc:	d03b      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x106>
 800a4be:	d900      	bls.n	800a4c2 <HAL_TIM_ConfigClockSource+0x92>
 800a4c0:	e072      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4c2:	2b40      	cmp	r3, #64	@ 0x40
 800a4c4:	d057      	beq.n	800a576 <HAL_TIM_ConfigClockSource+0x146>
 800a4c6:	d900      	bls.n	800a4ca <HAL_TIM_ConfigClockSource+0x9a>
 800a4c8:	e06e      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4ca:	2b30      	cmp	r3, #48	@ 0x30
 800a4cc:	d063      	beq.n	800a596 <HAL_TIM_ConfigClockSource+0x166>
 800a4ce:	d86b      	bhi.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d060      	beq.n	800a596 <HAL_TIM_ConfigClockSource+0x166>
 800a4d4:	d868      	bhi.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d05d      	beq.n	800a596 <HAL_TIM_ConfigClockSource+0x166>
 800a4da:	2b10      	cmp	r3, #16
 800a4dc:	d05b      	beq.n	800a596 <HAL_TIM_ConfigClockSource+0x166>
 800a4de:	e063      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4f0:	f000 feb8 	bl	800b264 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2277      	movs	r2, #119	@ 0x77
 800a500:	4313      	orrs	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	609a      	str	r2, [r3, #8]
      break;
 800a50c:	e052      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a51e:	f000 fea1 	bl	800b264 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2180      	movs	r1, #128	@ 0x80
 800a52e:	01c9      	lsls	r1, r1, #7
 800a530:	430a      	orrs	r2, r1
 800a532:	609a      	str	r2, [r3, #8]
      break;
 800a534:	e03e      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a542:	001a      	movs	r2, r3
 800a544:	f000 fd4a 	bl	800afdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2150      	movs	r1, #80	@ 0x50
 800a54e:	0018      	movs	r0, r3
 800a550:	f000 fe6c 	bl	800b22c <TIM_ITRx_SetConfig>
      break;
 800a554:	e02e      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a562:	001a      	movs	r2, r3
 800a564:	f000 fdaa 	bl	800b0bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2160      	movs	r1, #96	@ 0x60
 800a56e:	0018      	movs	r0, r3
 800a570:	f000 fe5c 	bl	800b22c <TIM_ITRx_SetConfig>
      break;
 800a574:	e01e      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a582:	001a      	movs	r2, r3
 800a584:	f000 fd2a 	bl	800afdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2140      	movs	r1, #64	@ 0x40
 800a58e:	0018      	movs	r0, r3
 800a590:	f000 fe4c 	bl	800b22c <TIM_ITRx_SetConfig>
      break;
 800a594:	e00e      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	0019      	movs	r1, r3
 800a5a0:	0010      	movs	r0, r2
 800a5a2:	f000 fe43 	bl	800b22c <TIM_ITRx_SetConfig>
      break;
 800a5a6:	e005      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a5a8:	230f      	movs	r3, #15
 800a5aa:	18fb      	adds	r3, r7, r3
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	701a      	strb	r2, [r3, #0]
      break;
 800a5b0:	e000      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a5b2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	223d      	movs	r2, #61	@ 0x3d
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	223c      	movs	r2, #60	@ 0x3c
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	5499      	strb	r1, [r3, r2]

  return status;
 800a5c4:	230f      	movs	r3, #15
 800a5c6:	18fb      	adds	r3, r7, r3
 800a5c8:	781b      	ldrb	r3, [r3, #0]
}
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b004      	add	sp, #16
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	46c0      	nop			@ (mov r8, r8)
 800a5d4:	ffceff88 	.word	0xffceff88
 800a5d8:	ffff00ff 	.word	0xffff00ff

0800a5dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b0c      	cmp	r3, #12
 800a5ee:	d01e      	beq.n	800a62e <HAL_TIM_ReadCapturedValue+0x52>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b0c      	cmp	r3, #12
 800a5f4:	d820      	bhi.n	800a638 <HAL_TIM_ReadCapturedValue+0x5c>
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	d013      	beq.n	800a624 <HAL_TIM_ReadCapturedValue+0x48>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b08      	cmp	r3, #8
 800a600:	d81a      	bhi.n	800a638 <HAL_TIM_ReadCapturedValue+0x5c>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_TIM_ReadCapturedValue+0x34>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d005      	beq.n	800a61a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800a60e:	e013      	b.n	800a638 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a616:	60fb      	str	r3, [r7, #12]
      break;
 800a618:	e00f      	b.n	800a63a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a620:	60fb      	str	r3, [r7, #12]
      break;
 800a622:	e00a      	b.n	800a63a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a62a:	60fb      	str	r3, [r7, #12]
      break;
 800a62c:	e005      	b.n	800a63a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a634:	60fb      	str	r3, [r7, #12]
      break;
 800a636:	e000      	b.n	800a63a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800a638:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800a63a:	68fb      	ldr	r3, [r7, #12]
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b004      	add	sp, #16
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a64c:	46c0      	nop			@ (mov r8, r8)
 800a64e:	46bd      	mov	sp, r7
 800a650:	b002      	add	sp, #8
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a65c:	46c0      	nop			@ (mov r8, r8)
 800a65e:	46bd      	mov	sp, r7
 800a660:	b002      	add	sp, #8
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a66c:	46c0      	nop			@ (mov r8, r8)
 800a66e:	46bd      	mov	sp, r7
 800a670:	b002      	add	sp, #8
 800a672:	bd80      	pop	{r7, pc}

0800a674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a67c:	46c0      	nop			@ (mov r8, r8)
 800a67e:	46bd      	mov	sp, r7
 800a680:	b002      	add	sp, #8
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a68c:	46c0      	nop			@ (mov r8, r8)
 800a68e:	46bd      	mov	sp, r7
 800a690:	b002      	add	sp, #8
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a69c:	46c0      	nop			@ (mov r8, r8)
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	b002      	add	sp, #8
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a6ac:	46c0      	nop			@ (mov r8, r8)
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	b002      	add	sp, #8
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6bc:	46c0      	nop			@ (mov r8, r8)
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a6cc:	46c0      	nop			@ (mov r8, r8)
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	b002      	add	sp, #8
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a6dc:	46c0      	nop			@ (mov r8, r8)
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	b002      	add	sp, #8
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	607a      	str	r2, [r7, #4]
 800a6ee:	230b      	movs	r3, #11
 800a6f0:	18fb      	adds	r3, r7, r3
 800a6f2:	1c0a      	adds	r2, r1, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6f6:	2317      	movs	r3, #23
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e0ea      	b.n	800a8de <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	223d      	movs	r2, #61	@ 0x3d
 800a70c:	5c9b      	ldrb	r3, [r3, r2]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b01      	cmp	r3, #1
 800a712:	d000      	beq.n	800a716 <HAL_TIM_RegisterCallback+0x32>
 800a714:	e08e      	b.n	800a834 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a716:	230b      	movs	r3, #11
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b1b      	cmp	r3, #27
 800a71e:	d900      	bls.n	800a722 <HAL_TIM_RegisterCallback+0x3e>
 800a720:	e083      	b.n	800a82a <HAL_TIM_RegisterCallback+0x146>
 800a722:	009a      	lsls	r2, r3, #2
 800a724:	4b70      	ldr	r3, [pc, #448]	@ (800a8e8 <HAL_TIM_RegisterCallback+0x204>)
 800a726:	18d3      	adds	r3, r2, r3
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a732:	e0d1      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a73a:	e0cd      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a742:	e0c9      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a74a:	e0c5      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a752:	e0c1      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a75a:	e0bd      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a762:	e0b9      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a76a:	e0b5      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a772:	e0b1      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a77a:	e0ad      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a782:	e0a9      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a78a:	e0a5      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a792:	e0a1      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2180      	movs	r1, #128	@ 0x80
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	505a      	str	r2, [r3, r1]
        break;
 800a79c:	e09c      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2184      	movs	r1, #132	@ 0x84
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	505a      	str	r2, [r3, r1]
        break;
 800a7a6:	e097      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2188      	movs	r1, #136	@ 0x88
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	505a      	str	r2, [r3, r1]
        break;
 800a7b0:	e092      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	218c      	movs	r1, #140	@ 0x8c
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	505a      	str	r2, [r3, r1]
        break;
 800a7ba:	e08d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2190      	movs	r1, #144	@ 0x90
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	505a      	str	r2, [r3, r1]
        break;
 800a7c4:	e088      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2194      	movs	r1, #148	@ 0x94
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	505a      	str	r2, [r3, r1]
        break;
 800a7ce:	e083      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2198      	movs	r1, #152	@ 0x98
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	505a      	str	r2, [r3, r1]
        break;
 800a7d8:	e07e      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	219c      	movs	r1, #156	@ 0x9c
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	505a      	str	r2, [r3, r1]
        break;
 800a7e2:	e079      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	21a0      	movs	r1, #160	@ 0xa0
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	505a      	str	r2, [r3, r1]
        break;
 800a7ec:	e074      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	21a4      	movs	r1, #164	@ 0xa4
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	505a      	str	r2, [r3, r1]
        break;
 800a7f6:	e06f      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	21a8      	movs	r1, #168	@ 0xa8
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	505a      	str	r2, [r3, r1]
        break;
 800a800:	e06a      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	21ac      	movs	r1, #172	@ 0xac
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	505a      	str	r2, [r3, r1]
        break;
 800a80a:	e065      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	21b0      	movs	r1, #176	@ 0xb0
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	505a      	str	r2, [r3, r1]
        break;
 800a814:	e060      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	21b4      	movs	r1, #180	@ 0xb4
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	505a      	str	r2, [r3, r1]
        break;
 800a81e:	e05b      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	21b8      	movs	r1, #184	@ 0xb8
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	505a      	str	r2, [r3, r1]
        break;
 800a828:	e056      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a82a:	2317      	movs	r3, #23
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	2201      	movs	r2, #1
 800a830:	701a      	strb	r2, [r3, #0]
        break;
 800a832:	e051      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	223d      	movs	r2, #61	@ 0x3d
 800a838:	5c9b      	ldrb	r3, [r3, r2]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d147      	bne.n	800a8d0 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800a840:	230b      	movs	r3, #11
 800a842:	18fb      	adds	r3, r7, r3
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2b0d      	cmp	r3, #13
 800a848:	d83d      	bhi.n	800a8c6 <HAL_TIM_RegisterCallback+0x1e2>
 800a84a:	009a      	lsls	r2, r3, #2
 800a84c:	4b27      	ldr	r3, [pc, #156]	@ (800a8ec <HAL_TIM_RegisterCallback+0x208>)
 800a84e:	18d3      	adds	r3, r2, r3
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a85a:	e03d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a862:	e039      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a86a:	e035      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a872:	e031      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a87a:	e02d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a882:	e029      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a88a:	e025      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a892:	e021      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a89a:	e01d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a8a2:	e019      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a8aa:	e015      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a8b2:	e011      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a8ba:	e00d      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2180      	movs	r1, #128	@ 0x80
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	505a      	str	r2, [r3, r1]
        break;
 800a8c4:	e008      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a8c6:	2317      	movs	r3, #23
 800a8c8:	18fb      	adds	r3, r7, r3
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	701a      	strb	r2, [r3, #0]
        break;
 800a8ce:	e003      	b.n	800a8d8 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a8d0:	2317      	movs	r3, #23
 800a8d2:	18fb      	adds	r3, r7, r3
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a8d8:	2317      	movs	r3, #23
 800a8da:	18fb      	adds	r3, r7, r3
 800a8dc:	781b      	ldrb	r3, [r3, #0]
}
 800a8de:	0018      	movs	r0, r3
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	b006      	add	sp, #24
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	46c0      	nop			@ (mov r8, r8)
 800a8e8:	0800d860 	.word	0x0800d860
 800a8ec:	0800d8d0 	.word	0x0800d8d0

0800a8f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a37      	ldr	r2, [pc, #220]	@ (800a9e0 <TIM_Base_SetConfig+0xf0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d008      	beq.n	800a91a <TIM_Base_SetConfig+0x2a>
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	2380      	movs	r3, #128	@ 0x80
 800a90c:	05db      	lsls	r3, r3, #23
 800a90e:	429a      	cmp	r2, r3
 800a910:	d003      	beq.n	800a91a <TIM_Base_SetConfig+0x2a>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a33      	ldr	r2, [pc, #204]	@ (800a9e4 <TIM_Base_SetConfig+0xf4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d108      	bne.n	800a92c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2270      	movs	r2, #112	@ 0x70
 800a91e:	4393      	bics	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a2c      	ldr	r2, [pc, #176]	@ (800a9e0 <TIM_Base_SetConfig+0xf0>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d014      	beq.n	800a95e <TIM_Base_SetConfig+0x6e>
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	2380      	movs	r3, #128	@ 0x80
 800a938:	05db      	lsls	r3, r3, #23
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d00f      	beq.n	800a95e <TIM_Base_SetConfig+0x6e>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a28      	ldr	r2, [pc, #160]	@ (800a9e4 <TIM_Base_SetConfig+0xf4>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00b      	beq.n	800a95e <TIM_Base_SetConfig+0x6e>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a27      	ldr	r2, [pc, #156]	@ (800a9e8 <TIM_Base_SetConfig+0xf8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d007      	beq.n	800a95e <TIM_Base_SetConfig+0x6e>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a26      	ldr	r2, [pc, #152]	@ (800a9ec <TIM_Base_SetConfig+0xfc>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d003      	beq.n	800a95e <TIM_Base_SetConfig+0x6e>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a25      	ldr	r2, [pc, #148]	@ (800a9f0 <TIM_Base_SetConfig+0x100>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d108      	bne.n	800a970 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4a24      	ldr	r2, [pc, #144]	@ (800a9f4 <TIM_Base_SetConfig+0x104>)
 800a962:	4013      	ands	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2280      	movs	r2, #128	@ 0x80
 800a974:	4393      	bics	r3, r2
 800a976:	001a      	movs	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	689a      	ldr	r2, [r3, #8]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a11      	ldr	r2, [pc, #68]	@ (800a9e0 <TIM_Base_SetConfig+0xf0>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d007      	beq.n	800a9ae <TIM_Base_SetConfig+0xbe>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a12      	ldr	r2, [pc, #72]	@ (800a9ec <TIM_Base_SetConfig+0xfc>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d003      	beq.n	800a9ae <TIM_Base_SetConfig+0xbe>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a11      	ldr	r2, [pc, #68]	@ (800a9f0 <TIM_Base_SetConfig+0x100>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d103      	bne.n	800a9b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	691a      	ldr	r2, [r3, #16]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d106      	bne.n	800a9d6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	4393      	bics	r3, r2
 800a9d0:	001a      	movs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	611a      	str	r2, [r3, #16]
  }
}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	b004      	add	sp, #16
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	46c0      	nop			@ (mov r8, r8)
 800a9e0:	40012c00 	.word	0x40012c00
 800a9e4:	40000400 	.word	0x40000400
 800a9e8:	40002000 	.word	0x40002000
 800a9ec:	40014400 	.word	0x40014400
 800a9f0:	40014800 	.word	0x40014800
 800a9f4:	fffffcff 	.word	0xfffffcff

0800a9f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4393      	bics	r3, r2
 800aa10:	001a      	movs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4a2e      	ldr	r2, [pc, #184]	@ (800aae0 <TIM_OC1_SetConfig+0xe8>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	4393      	bics	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	4393      	bics	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a24      	ldr	r2, [pc, #144]	@ (800aae4 <TIM_OC1_SetConfig+0xec>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d007      	beq.n	800aa66 <TIM_OC1_SetConfig+0x6e>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a23      	ldr	r2, [pc, #140]	@ (800aae8 <TIM_OC1_SetConfig+0xf0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d003      	beq.n	800aa66 <TIM_OC1_SetConfig+0x6e>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a22      	ldr	r2, [pc, #136]	@ (800aaec <TIM_OC1_SetConfig+0xf4>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d10c      	bne.n	800aa80 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2208      	movs	r2, #8
 800aa6a:	4393      	bics	r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	4393      	bics	r3, r2
 800aa7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a18      	ldr	r2, [pc, #96]	@ (800aae4 <TIM_OC1_SetConfig+0xec>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d007      	beq.n	800aa98 <TIM_OC1_SetConfig+0xa0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a17      	ldr	r2, [pc, #92]	@ (800aae8 <TIM_OC1_SetConfig+0xf0>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d003      	beq.n	800aa98 <TIM_OC1_SetConfig+0xa0>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a16      	ldr	r2, [pc, #88]	@ (800aaec <TIM_OC1_SetConfig+0xf4>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d111      	bne.n	800aabc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	4a15      	ldr	r2, [pc, #84]	@ (800aaf0 <TIM_OC1_SetConfig+0xf8>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	4a14      	ldr	r2, [pc, #80]	@ (800aaf4 <TIM_OC1_SetConfig+0xfc>)
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	621a      	str	r2, [r3, #32]
}
 800aad6:	46c0      	nop			@ (mov r8, r8)
 800aad8:	46bd      	mov	sp, r7
 800aada:	b006      	add	sp, #24
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	46c0      	nop			@ (mov r8, r8)
 800aae0:	fffeff8f 	.word	0xfffeff8f
 800aae4:	40012c00 	.word	0x40012c00
 800aae8:	40014400 	.word	0x40014400
 800aaec:	40014800 	.word	0x40014800
 800aaf0:	fffffeff 	.word	0xfffffeff
 800aaf4:	fffffdff 	.word	0xfffffdff

0800aaf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	2210      	movs	r2, #16
 800ab0e:	4393      	bics	r3, r2
 800ab10:	001a      	movs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4a2c      	ldr	r2, [pc, #176]	@ (800abd8 <TIM_OC2_SetConfig+0xe0>)
 800ab26:	4013      	ands	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4a2b      	ldr	r2, [pc, #172]	@ (800abdc <TIM_OC2_SetConfig+0xe4>)
 800ab2e:	4013      	ands	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2220      	movs	r2, #32
 800ab42:	4393      	bics	r3, r2
 800ab44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	011b      	lsls	r3, r3, #4
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a22      	ldr	r2, [pc, #136]	@ (800abe0 <TIM_OC2_SetConfig+0xe8>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d10d      	bne.n	800ab76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2280      	movs	r2, #128	@ 0x80
 800ab5e:	4393      	bics	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2240      	movs	r2, #64	@ 0x40
 800ab72:	4393      	bics	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a19      	ldr	r2, [pc, #100]	@ (800abe0 <TIM_OC2_SetConfig+0xe8>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d007      	beq.n	800ab8e <TIM_OC2_SetConfig+0x96>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a18      	ldr	r2, [pc, #96]	@ (800abe4 <TIM_OC2_SetConfig+0xec>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d003      	beq.n	800ab8e <TIM_OC2_SetConfig+0x96>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a17      	ldr	r2, [pc, #92]	@ (800abe8 <TIM_OC2_SetConfig+0xf0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d113      	bne.n	800abb6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	4a16      	ldr	r2, [pc, #88]	@ (800abec <TIM_OC2_SetConfig+0xf4>)
 800ab92:	4013      	ands	r3, r2
 800ab94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	4a15      	ldr	r2, [pc, #84]	@ (800abf0 <TIM_OC2_SetConfig+0xf8>)
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	621a      	str	r2, [r3, #32]
}
 800abd0:	46c0      	nop			@ (mov r8, r8)
 800abd2:	46bd      	mov	sp, r7
 800abd4:	b006      	add	sp, #24
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	feff8fff 	.word	0xfeff8fff
 800abdc:	fffffcff 	.word	0xfffffcff
 800abe0:	40012c00 	.word	0x40012c00
 800abe4:	40014400 	.word	0x40014400
 800abe8:	40014800 	.word	0x40014800
 800abec:	fffffbff 	.word	0xfffffbff
 800abf0:	fffff7ff 	.word	0xfffff7ff

0800abf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	4a31      	ldr	r2, [pc, #196]	@ (800acd0 <TIM_OC3_SetConfig+0xdc>)
 800ac0a:	401a      	ands	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4a2d      	ldr	r2, [pc, #180]	@ (800acd4 <TIM_OC3_SetConfig+0xe0>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2203      	movs	r2, #3
 800ac28:	4393      	bics	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	4a27      	ldr	r2, [pc, #156]	@ (800acd8 <TIM_OC3_SetConfig+0xe4>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a23      	ldr	r2, [pc, #140]	@ (800acdc <TIM_OC3_SetConfig+0xe8>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d10d      	bne.n	800ac6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	4a22      	ldr	r2, [pc, #136]	@ (800ace0 <TIM_OC3_SetConfig+0xec>)
 800ac56:	4013      	ands	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	021b      	lsls	r3, r3, #8
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	4a1e      	ldr	r2, [pc, #120]	@ (800ace4 <TIM_OC3_SetConfig+0xf0>)
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a1a      	ldr	r2, [pc, #104]	@ (800acdc <TIM_OC3_SetConfig+0xe8>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d007      	beq.n	800ac86 <TIM_OC3_SetConfig+0x92>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1b      	ldr	r2, [pc, #108]	@ (800ace8 <TIM_OC3_SetConfig+0xf4>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d003      	beq.n	800ac86 <TIM_OC3_SetConfig+0x92>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a1a      	ldr	r2, [pc, #104]	@ (800acec <TIM_OC3_SetConfig+0xf8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d113      	bne.n	800acae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	4a19      	ldr	r2, [pc, #100]	@ (800acf0 <TIM_OC3_SetConfig+0xfc>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	4a18      	ldr	r2, [pc, #96]	@ (800acf4 <TIM_OC3_SetConfig+0x100>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	621a      	str	r2, [r3, #32]
}
 800acc8:	46c0      	nop			@ (mov r8, r8)
 800acca:	46bd      	mov	sp, r7
 800accc:	b006      	add	sp, #24
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	fffffeff 	.word	0xfffffeff
 800acd4:	fffeff8f 	.word	0xfffeff8f
 800acd8:	fffffdff 	.word	0xfffffdff
 800acdc:	40012c00 	.word	0x40012c00
 800ace0:	fffff7ff 	.word	0xfffff7ff
 800ace4:	fffffbff 	.word	0xfffffbff
 800ace8:	40014400 	.word	0x40014400
 800acec:	40014800 	.word	0x40014800
 800acf0:	ffffefff 	.word	0xffffefff
 800acf4:	ffffdfff 	.word	0xffffdfff

0800acf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a1b      	ldr	r3, [r3, #32]
 800ad0c:	4a24      	ldr	r2, [pc, #144]	@ (800ada0 <TIM_OC4_SetConfig+0xa8>)
 800ad0e:	401a      	ands	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a20      	ldr	r2, [pc, #128]	@ (800ada4 <TIM_OC4_SetConfig+0xac>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4a1f      	ldr	r2, [pc, #124]	@ (800ada8 <TIM_OC4_SetConfig+0xb0>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	4a1b      	ldr	r2, [pc, #108]	@ (800adac <TIM_OC4_SetConfig+0xb4>)
 800ad40:	4013      	ands	r3, r2
 800ad42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	031b      	lsls	r3, r3, #12
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a17      	ldr	r2, [pc, #92]	@ (800adb0 <TIM_OC4_SetConfig+0xb8>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d007      	beq.n	800ad68 <TIM_OC4_SetConfig+0x70>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a16      	ldr	r2, [pc, #88]	@ (800adb4 <TIM_OC4_SetConfig+0xbc>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d003      	beq.n	800ad68 <TIM_OC4_SetConfig+0x70>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a15      	ldr	r2, [pc, #84]	@ (800adb8 <TIM_OC4_SetConfig+0xc0>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d109      	bne.n	800ad7c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	4a14      	ldr	r2, [pc, #80]	@ (800adbc <TIM_OC4_SetConfig+0xc4>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	019b      	lsls	r3, r3, #6
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	46c0      	nop			@ (mov r8, r8)
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	b006      	add	sp, #24
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	46c0      	nop			@ (mov r8, r8)
 800ada0:	ffffefff 	.word	0xffffefff
 800ada4:	feff8fff 	.word	0xfeff8fff
 800ada8:	fffffcff 	.word	0xfffffcff
 800adac:	ffffdfff 	.word	0xffffdfff
 800adb0:	40012c00 	.word	0x40012c00
 800adb4:	40014400 	.word	0x40014400
 800adb8:	40014800 	.word	0x40014800
 800adbc:	ffffbfff 	.word	0xffffbfff

0800adc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	4a21      	ldr	r2, [pc, #132]	@ (800ae5c <TIM_OC5_SetConfig+0x9c>)
 800add6:	401a      	ands	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <TIM_OC5_SetConfig+0xa0>)
 800adec:	4013      	ands	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	4a19      	ldr	r2, [pc, #100]	@ (800ae64 <TIM_OC5_SetConfig+0xa4>)
 800adfe:	4013      	ands	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a15      	ldr	r2, [pc, #84]	@ (800ae68 <TIM_OC5_SetConfig+0xa8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d007      	beq.n	800ae26 <TIM_OC5_SetConfig+0x66>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a14      	ldr	r2, [pc, #80]	@ (800ae6c <TIM_OC5_SetConfig+0xac>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d003      	beq.n	800ae26 <TIM_OC5_SetConfig+0x66>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a13      	ldr	r2, [pc, #76]	@ (800ae70 <TIM_OC5_SetConfig+0xb0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d109      	bne.n	800ae3a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	4a0c      	ldr	r2, [pc, #48]	@ (800ae5c <TIM_OC5_SetConfig+0x9c>)
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	021b      	lsls	r3, r3, #8
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	621a      	str	r2, [r3, #32]
}
 800ae54:	46c0      	nop			@ (mov r8, r8)
 800ae56:	46bd      	mov	sp, r7
 800ae58:	b006      	add	sp, #24
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	fffeffff 	.word	0xfffeffff
 800ae60:	fffeff8f 	.word	0xfffeff8f
 800ae64:	fffdffff 	.word	0xfffdffff
 800ae68:	40012c00 	.word	0x40012c00
 800ae6c:	40014400 	.word	0x40014400
 800ae70:	40014800 	.word	0x40014800

0800ae74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	4a22      	ldr	r2, [pc, #136]	@ (800af14 <TIM_OC6_SetConfig+0xa0>)
 800ae8a:	401a      	ands	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4a1e      	ldr	r2, [pc, #120]	@ (800af18 <TIM_OC6_SetConfig+0xa4>)
 800aea0:	4013      	ands	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	4a1a      	ldr	r2, [pc, #104]	@ (800af1c <TIM_OC6_SetConfig+0xa8>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	051b      	lsls	r3, r3, #20
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a16      	ldr	r2, [pc, #88]	@ (800af20 <TIM_OC6_SetConfig+0xac>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_OC6_SetConfig+0x68>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a15      	ldr	r2, [pc, #84]	@ (800af24 <TIM_OC6_SetConfig+0xb0>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_OC6_SetConfig+0x68>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a14      	ldr	r2, [pc, #80]	@ (800af28 <TIM_OC6_SetConfig+0xb4>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d109      	bne.n	800aef0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	4a13      	ldr	r2, [pc, #76]	@ (800af2c <TIM_OC6_SetConfig+0xb8>)
 800aee0:	4013      	ands	r3, r2
 800aee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	029b      	lsls	r3, r3, #10
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	46c0      	nop			@ (mov r8, r8)
 800af0c:	46bd      	mov	sp, r7
 800af0e:	b006      	add	sp, #24
 800af10:	bd80      	pop	{r7, pc}
 800af12:	46c0      	nop			@ (mov r8, r8)
 800af14:	ffefffff 	.word	0xffefffff
 800af18:	feff8fff 	.word	0xfeff8fff
 800af1c:	ffdfffff 	.word	0xffdfffff
 800af20:	40012c00 	.word	0x40012c00
 800af24:	40014400 	.word	0x40014400
 800af28:	40014800 	.word	0x40014800
 800af2c:	fffbffff 	.word	0xfffbffff

0800af30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	2201      	movs	r2, #1
 800af4a:	4393      	bics	r3, r2
 800af4c:	001a      	movs	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4a1e      	ldr	r2, [pc, #120]	@ (800afd4 <TIM_TI1_SetConfig+0xa4>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d008      	beq.n	800af72 <TIM_TI1_SetConfig+0x42>
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	2380      	movs	r3, #128	@ 0x80
 800af64:	05db      	lsls	r3, r3, #23
 800af66:	429a      	cmp	r2, r3
 800af68:	d003      	beq.n	800af72 <TIM_TI1_SetConfig+0x42>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	4a1a      	ldr	r2, [pc, #104]	@ (800afd8 <TIM_TI1_SetConfig+0xa8>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d101      	bne.n	800af76 <TIM_TI1_SetConfig+0x46>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <TIM_TI1_SetConfig+0x48>
 800af76:	2300      	movs	r3, #0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d008      	beq.n	800af8e <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2203      	movs	r2, #3
 800af80:	4393      	bics	r3, r2
 800af82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4313      	orrs	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
 800af8c:	e003      	b.n	800af96 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2201      	movs	r2, #1
 800af92:	4313      	orrs	r3, r2
 800af94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	22f0      	movs	r2, #240	@ 0xf0
 800af9a:	4393      	bics	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	011b      	lsls	r3, r3, #4
 800afa2:	22ff      	movs	r2, #255	@ 0xff
 800afa4:	4013      	ands	r3, r2
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	220a      	movs	r2, #10
 800afb0:	4393      	bics	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	220a      	movs	r2, #10
 800afb8:	4013      	ands	r3, r2
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	621a      	str	r2, [r3, #32]
}
 800afcc:	46c0      	nop			@ (mov r8, r8)
 800afce:	46bd      	mov	sp, r7
 800afd0:	b006      	add	sp, #24
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	40012c00 	.word	0x40012c00
 800afd8:	40000400 	.word	0x40000400

0800afdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	2201      	movs	r2, #1
 800aff4:	4393      	bics	r3, r2
 800aff6:	001a      	movs	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	22f0      	movs	r2, #240	@ 0xf0
 800b006:	4393      	bics	r3, r2
 800b008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	011b      	lsls	r3, r3, #4
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	4313      	orrs	r3, r2
 800b012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	220a      	movs	r2, #10
 800b018:	4393      	bics	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	621a      	str	r2, [r3, #32]
}
 800b030:	46c0      	nop			@ (mov r8, r8)
 800b032:	46bd      	mov	sp, r7
 800b034:	b006      	add	sp, #24
 800b036:	bd80      	pop	{r7, pc}

0800b038 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	2210      	movs	r2, #16
 800b052:	4393      	bics	r3, r2
 800b054:	001a      	movs	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	4a14      	ldr	r2, [pc, #80]	@ (800b0b4 <TIM_TI2_SetConfig+0x7c>)
 800b064:	4013      	ands	r3, r2
 800b066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	021b      	lsls	r3, r3, #8
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4313      	orrs	r3, r2
 800b070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	4a10      	ldr	r2, [pc, #64]	@ (800b0b8 <TIM_TI2_SetConfig+0x80>)
 800b076:	4013      	ands	r3, r2
 800b078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	031b      	lsls	r3, r3, #12
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	0c1b      	lsrs	r3, r3, #16
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	22a0      	movs	r2, #160	@ 0xa0
 800b08c:	4393      	bics	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	22a0      	movs	r2, #160	@ 0xa0
 800b096:	4013      	ands	r3, r2
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	621a      	str	r2, [r3, #32]
}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	b006      	add	sp, #24
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	46c0      	nop			@ (mov r8, r8)
 800b0b4:	fffffcff 	.word	0xfffffcff
 800b0b8:	ffff0fff 	.word	0xffff0fff

0800b0bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	2210      	movs	r2, #16
 800b0d4:	4393      	bics	r3, r2
 800b0d6:	001a      	movs	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	4a0d      	ldr	r2, [pc, #52]	@ (800b11c <TIM_TI2_ConfigInputStage+0x60>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	031b      	lsls	r3, r3, #12
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	22a0      	movs	r2, #160	@ 0xa0
 800b0f8:	4393      	bics	r3, r2
 800b0fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	4313      	orrs	r3, r2
 800b104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	621a      	str	r2, [r3, #32]
}
 800b112:	46c0      	nop			@ (mov r8, r8)
 800b114:	46bd      	mov	sp, r7
 800b116:	b006      	add	sp, #24
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	46c0      	nop			@ (mov r8, r8)
 800b11c:	ffff0fff 	.word	0xffff0fff

0800b120 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	4a17      	ldr	r2, [pc, #92]	@ (800b198 <TIM_TI3_SetConfig+0x78>)
 800b13a:	401a      	ands	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2203      	movs	r2, #3
 800b14a:	4393      	bics	r3, r2
 800b14c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4313      	orrs	r3, r2
 800b154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	22f0      	movs	r2, #240	@ 0xf0
 800b15a:	4393      	bics	r3, r2
 800b15c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	011b      	lsls	r3, r3, #4
 800b162:	22ff      	movs	r2, #255	@ 0xff
 800b164:	4013      	ands	r3, r2
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	4313      	orrs	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	4a0b      	ldr	r2, [pc, #44]	@ (800b19c <TIM_TI3_SetConfig+0x7c>)
 800b170:	4013      	ands	r3, r2
 800b172:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	021a      	lsls	r2, r3, #8
 800b178:	23a0      	movs	r3, #160	@ 0xa0
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	4013      	ands	r3, r2
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	621a      	str	r2, [r3, #32]
}
 800b190:	46c0      	nop			@ (mov r8, r8)
 800b192:	46bd      	mov	sp, r7
 800b194:	b006      	add	sp, #24
 800b196:	bd80      	pop	{r7, pc}
 800b198:	fffffeff 	.word	0xfffffeff
 800b19c:	fffff5ff 	.word	0xfffff5ff

0800b1a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	4a18      	ldr	r2, [pc, #96]	@ (800b21c <TIM_TI4_SetConfig+0x7c>)
 800b1ba:	401a      	ands	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	4a15      	ldr	r2, [pc, #84]	@ (800b220 <TIM_TI4_SetConfig+0x80>)
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	4a12      	ldr	r2, [pc, #72]	@ (800b224 <TIM_TI4_SetConfig+0x84>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	031b      	lsls	r3, r3, #12
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	0c1b      	lsrs	r3, r3, #16
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b228 <TIM_TI4_SetConfig+0x88>)
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	031a      	lsls	r2, r3, #12
 800b1fa:	23a0      	movs	r3, #160	@ 0xa0
 800b1fc:	021b      	lsls	r3, r3, #8
 800b1fe:	4013      	ands	r3, r2
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	4313      	orrs	r3, r2
 800b204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	621a      	str	r2, [r3, #32]
}
 800b212:	46c0      	nop			@ (mov r8, r8)
 800b214:	46bd      	mov	sp, r7
 800b216:	b006      	add	sp, #24
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	46c0      	nop			@ (mov r8, r8)
 800b21c:	ffffefff 	.word	0xffffefff
 800b220:	fffffcff 	.word	0xfffffcff
 800b224:	ffff0fff 	.word	0xffff0fff
 800b228:	ffff5fff 	.word	0xffff5fff

0800b22c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a08      	ldr	r2, [pc, #32]	@ (800b260 <TIM_ITRx_SetConfig+0x34>)
 800b240:	4013      	ands	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4313      	orrs	r3, r2
 800b24a:	2207      	movs	r2, #7
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	609a      	str	r2, [r3, #8]
}
 800b256:	46c0      	nop			@ (mov r8, r8)
 800b258:	46bd      	mov	sp, r7
 800b25a:	b004      	add	sp, #16
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	ffcfff8f 	.word	0xffcfff8f

0800b264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	4a09      	ldr	r2, [pc, #36]	@ (800b2a0 <TIM_ETR_SetConfig+0x3c>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	021a      	lsls	r2, r3, #8
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	431a      	orrs	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	4313      	orrs	r3, r2
 800b290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	609a      	str	r2, [r3, #8]
}
 800b298:	46c0      	nop			@ (mov r8, r8)
 800b29a:	46bd      	mov	sp, r7
 800b29c:	b006      	add	sp, #24
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	ffff00ff 	.word	0xffff00ff

0800b2a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	221f      	movs	r2, #31
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	409a      	lsls	r2, r3
 800b2ba:	0013      	movs	r3, r2
 800b2bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	43d2      	mvns	r2, r2
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a1a      	ldr	r2, [r3, #32]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	211f      	movs	r1, #31
 800b2d4:	400b      	ands	r3, r1
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	4099      	lsls	r1, r3
 800b2da:	000b      	movs	r3, r1
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	621a      	str	r2, [r3, #32]
}
 800b2e2:	46c0      	nop			@ (mov r8, r8)
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b006      	add	sp, #24
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2184      	movs	r1, #132	@ 0x84
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	@ (800b36c <TIM_ResetCallback+0x80>)
 800b2fa:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2188      	movs	r1, #136	@ 0x88
 800b300:	4a1b      	ldr	r2, [pc, #108]	@ (800b370 <TIM_ResetCallback+0x84>)
 800b302:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	218c      	movs	r1, #140	@ 0x8c
 800b308:	4a1a      	ldr	r2, [pc, #104]	@ (800b374 <TIM_ResetCallback+0x88>)
 800b30a:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2190      	movs	r1, #144	@ 0x90
 800b310:	4a19      	ldr	r2, [pc, #100]	@ (800b378 <TIM_ResetCallback+0x8c>)
 800b312:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2194      	movs	r1, #148	@ 0x94
 800b318:	4a18      	ldr	r2, [pc, #96]	@ (800b37c <TIM_ResetCallback+0x90>)
 800b31a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2198      	movs	r1, #152	@ 0x98
 800b320:	4a17      	ldr	r2, [pc, #92]	@ (800b380 <TIM_ResetCallback+0x94>)
 800b322:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	219c      	movs	r1, #156	@ 0x9c
 800b328:	4a16      	ldr	r2, [pc, #88]	@ (800b384 <TIM_ResetCallback+0x98>)
 800b32a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	21a0      	movs	r1, #160	@ 0xa0
 800b330:	4a15      	ldr	r2, [pc, #84]	@ (800b388 <TIM_ResetCallback+0x9c>)
 800b332:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	21a4      	movs	r1, #164	@ 0xa4
 800b338:	4a14      	ldr	r2, [pc, #80]	@ (800b38c <TIM_ResetCallback+0xa0>)
 800b33a:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	21a8      	movs	r1, #168	@ 0xa8
 800b340:	4a13      	ldr	r2, [pc, #76]	@ (800b390 <TIM_ResetCallback+0xa4>)
 800b342:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	21ac      	movs	r1, #172	@ 0xac
 800b348:	4a12      	ldr	r2, [pc, #72]	@ (800b394 <TIM_ResetCallback+0xa8>)
 800b34a:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	21b0      	movs	r1, #176	@ 0xb0
 800b350:	4a11      	ldr	r2, [pc, #68]	@ (800b398 <TIM_ResetCallback+0xac>)
 800b352:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	21b4      	movs	r1, #180	@ 0xb4
 800b358:	4a10      	ldr	r2, [pc, #64]	@ (800b39c <TIM_ResetCallback+0xb0>)
 800b35a:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	21b8      	movs	r1, #184	@ 0xb8
 800b360:	4a0f      	ldr	r2, [pc, #60]	@ (800b3a0 <TIM_ResetCallback+0xb4>)
 800b362:	505a      	str	r2, [r3, r1]
}
 800b364:	46c0      	nop			@ (mov r8, r8)
 800b366:	46bd      	mov	sp, r7
 800b368:	b002      	add	sp, #8
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	0800a645 	.word	0x0800a645
 800b370:	0800a655 	.word	0x0800a655
 800b374:	0800a6b5 	.word	0x0800a6b5
 800b378:	0800a6c5 	.word	0x0800a6c5
 800b37c:	0800a675 	.word	0x0800a675
 800b380:	0800a685 	.word	0x0800a685
 800b384:	0800a665 	.word	0x0800a665
 800b388:	0800a695 	.word	0x0800a695
 800b38c:	0800a6a5 	.word	0x0800a6a5
 800b390:	0800a6d5 	.word	0x0800a6d5
 800b394:	0800b5ad 	.word	0x0800b5ad
 800b398:	0800b5bd 	.word	0x0800b5bd
 800b39c:	0800b5cd 	.word	0x0800b5cd
 800b3a0:	0800b5dd 	.word	0x0800b5dd

0800b3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	223c      	movs	r2, #60	@ 0x3c
 800b3b2:	5c9b      	ldrb	r3, [r3, r2]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e050      	b.n	800b45e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	223c      	movs	r2, #60	@ 0x3c
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	223d      	movs	r2, #61	@ 0x3d
 800b3c8:	2102      	movs	r1, #2
 800b3ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a21      	ldr	r2, [pc, #132]	@ (800b468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d108      	bne.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	4a20      	ldr	r2, [pc, #128]	@ (800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2270      	movs	r2, #112	@ 0x70
 800b3fc:	4393      	bics	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	4313      	orrs	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a14      	ldr	r2, [pc, #80]	@ (800b468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00a      	beq.n	800b432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	2380      	movs	r3, #128	@ 0x80
 800b422:	05db      	lsls	r3, r3, #23
 800b424:	429a      	cmp	r2, r3
 800b426:	d004      	beq.n	800b432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a10      	ldr	r2, [pc, #64]	@ (800b470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d10c      	bne.n	800b44c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2280      	movs	r2, #128	@ 0x80
 800b436:	4393      	bics	r3, r2
 800b438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	4313      	orrs	r3, r2
 800b442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	223d      	movs	r2, #61	@ 0x3d
 800b450:	2101      	movs	r1, #1
 800b452:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	223c      	movs	r2, #60	@ 0x3c
 800b458:	2100      	movs	r1, #0
 800b45a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	0018      	movs	r0, r3
 800b460:	46bd      	mov	sp, r7
 800b462:	b004      	add	sp, #16
 800b464:	bd80      	pop	{r7, pc}
 800b466:	46c0      	nop			@ (mov r8, r8)
 800b468:	40012c00 	.word	0x40012c00
 800b46c:	ff0fffff 	.word	0xff0fffff
 800b470:	40000400 	.word	0x40000400

0800b474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	223c      	movs	r2, #60	@ 0x3c
 800b486:	5c9b      	ldrb	r3, [r3, r2]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e06f      	b.n	800b570 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	223c      	movs	r2, #60	@ 0x3c
 800b494:	2101      	movs	r1, #1
 800b496:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	22ff      	movs	r2, #255	@ 0xff
 800b49c:	4393      	bics	r3, r2
 800b49e:	001a      	movs	r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4a33      	ldr	r2, [pc, #204]	@ (800b578 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b4ac:	401a      	ands	r2, r3
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4a30      	ldr	r2, [pc, #192]	@ (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b4ba:	401a      	ands	r2, r3
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4a2e      	ldr	r2, [pc, #184]	@ (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b4c8:	401a      	ands	r2, r3
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4a2b      	ldr	r2, [pc, #172]	@ (800b584 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b4d6:	401a      	ands	r2, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4a29      	ldr	r2, [pc, #164]	@ (800b588 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b4e4:	401a      	ands	r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	4a26      	ldr	r2, [pc, #152]	@ (800b58c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b4f2:	401a      	ands	r2, r3
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4a24      	ldr	r2, [pc, #144]	@ (800b590 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b500:	401a      	ands	r2, r3
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a21      	ldr	r2, [pc, #132]	@ (800b594 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b510:	401a      	ands	r2, r3
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	69db      	ldr	r3, [r3, #28]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a1e      	ldr	r2, [pc, #120]	@ (800b598 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d11c      	bne.n	800b55e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4a1d      	ldr	r2, [pc, #116]	@ (800b59c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b528:	401a      	ands	r2, r3
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52e:	051b      	lsls	r3, r3, #20
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4a1a      	ldr	r2, [pc, #104]	@ (800b5a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b538:	401a      	ands	r2, r3
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	4313      	orrs	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4a17      	ldr	r2, [pc, #92]	@ (800b5a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b546:	401a      	ands	r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4a15      	ldr	r2, [pc, #84]	@ (800b5a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b554:	401a      	ands	r2, r3
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55a:	4313      	orrs	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	223c      	movs	r2, #60	@ 0x3c
 800b56a:	2100      	movs	r1, #0
 800b56c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	0018      	movs	r0, r3
 800b572:	46bd      	mov	sp, r7
 800b574:	b004      	add	sp, #16
 800b576:	bd80      	pop	{r7, pc}
 800b578:	fffffcff 	.word	0xfffffcff
 800b57c:	fffffbff 	.word	0xfffffbff
 800b580:	fffff7ff 	.word	0xfffff7ff
 800b584:	ffffefff 	.word	0xffffefff
 800b588:	ffffdfff 	.word	0xffffdfff
 800b58c:	ffffbfff 	.word	0xffffbfff
 800b590:	fff0ffff 	.word	0xfff0ffff
 800b594:	efffffff 	.word	0xefffffff
 800b598:	40012c00 	.word	0x40012c00
 800b59c:	ff0fffff 	.word	0xff0fffff
 800b5a0:	feffffff 	.word	0xfeffffff
 800b5a4:	fdffffff 	.word	0xfdffffff
 800b5a8:	dfffffff 	.word	0xdfffffff

0800b5ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5b4:	46c0      	nop			@ (mov r8, r8)
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	b002      	add	sp, #8
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b5c4:	46c0      	nop			@ (mov r8, r8)
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	b002      	add	sp, #8
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5d4:	46c0      	nop			@ (mov r8, r8)
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	b002      	add	sp, #8
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5e4:	46c0      	nop			@ (mov r8, r8)
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	b002      	add	sp, #8
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e055      	b.n	800b6aa <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2288      	movs	r2, #136	@ 0x88
 800b602:	589b      	ldr	r3, [r3, r2]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d116      	bne.n	800b636 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2284      	movs	r2, #132	@ 0x84
 800b60c:	2100      	movs	r1, #0
 800b60e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	0018      	movs	r0, r3
 800b614:	f000 fce0 	bl	800bfd8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	22c4      	movs	r2, #196	@ 0xc4
 800b61c:	589b      	ldr	r3, [r3, r2]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d103      	bne.n	800b62a <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	21c4      	movs	r1, #196	@ 0xc4
 800b626:	4a23      	ldr	r2, [pc, #140]	@ (800b6b4 <HAL_UART_Init+0xc8>)
 800b628:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	22c4      	movs	r2, #196	@ 0xc4
 800b62e:	589b      	ldr	r3, [r3, r2]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	0010      	movs	r0, r2
 800b634:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2288      	movs	r2, #136	@ 0x88
 800b63a:	2124      	movs	r1, #36	@ 0x24
 800b63c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2101      	movs	r1, #1
 800b64a:	438a      	bics	r2, r1
 800b64c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	0018      	movs	r0, r3
 800b65a:	f000 ff85 	bl	800c568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	0018      	movs	r0, r3
 800b662:	f000 fd09 	bl	800c078 <UART_SetConfig>
 800b666:	0003      	movs	r3, r0
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e01c      	b.n	800b6aa <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	490f      	ldr	r1, [pc, #60]	@ (800b6b8 <HAL_UART_Init+0xcc>)
 800b67c:	400a      	ands	r2, r1
 800b67e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	212a      	movs	r1, #42	@ 0x2a
 800b68c:	438a      	bics	r2, r1
 800b68e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2101      	movs	r1, #1
 800b69c:	430a      	orrs	r2, r1
 800b69e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f001 f814 	bl	800c6d0 <UART_CheckIdleState>
 800b6a8:	0003      	movs	r3, r0
}
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b002      	add	sp, #8
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	46c0      	nop			@ (mov r8, r8)
 800b6b4:	08004e09 	.word	0x08004e09
 800b6b8:	ffffb7ff 	.word	0xffffb7ff

0800b6bc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	607a      	str	r2, [r7, #4]
 800b6c6:	230b      	movs	r3, #11
 800b6c8:	18fb      	adds	r3, r7, r3
 800b6ca:	1c0a      	adds	r2, r1, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ce:	2317      	movs	r3, #23
 800b6d0:	18fb      	adds	r3, r7, r3
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d109      	bne.n	800b6f0 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2290      	movs	r2, #144	@ 0x90
 800b6e0:	589b      	ldr	r3, [r3, r2]
 800b6e2:	2240      	movs	r2, #64	@ 0x40
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2190      	movs	r1, #144	@ 0x90
 800b6ea:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e08f      	b.n	800b810 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2288      	movs	r2, #136	@ 0x88
 800b6f4:	589b      	ldr	r3, [r3, r2]
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d157      	bne.n	800b7aa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b6fa:	230b      	movs	r3, #11
 800b6fc:	18fb      	adds	r3, r7, r3
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	2b0c      	cmp	r3, #12
 800b702:	d845      	bhi.n	800b790 <HAL_UART_RegisterCallback+0xd4>
 800b704:	009a      	lsls	r2, r3, #2
 800b706:	4b44      	ldr	r3, [pc, #272]	@ (800b818 <HAL_UART_RegisterCallback+0x15c>)
 800b708:	18d3      	adds	r3, r2, r3
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2194      	movs	r1, #148	@ 0x94
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	505a      	str	r2, [r3, r1]
        break;
 800b716:	e078      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2198      	movs	r1, #152	@ 0x98
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	505a      	str	r2, [r3, r1]
        break;
 800b720:	e073      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	219c      	movs	r1, #156	@ 0x9c
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	505a      	str	r2, [r3, r1]
        break;
 800b72a:	e06e      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	21a0      	movs	r1, #160	@ 0xa0
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	505a      	str	r2, [r3, r1]
        break;
 800b734:	e069      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	21a4      	movs	r1, #164	@ 0xa4
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	505a      	str	r2, [r3, r1]
        break;
 800b73e:	e064      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	21a8      	movs	r1, #168	@ 0xa8
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	505a      	str	r2, [r3, r1]
        break;
 800b748:	e05f      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	21ac      	movs	r1, #172	@ 0xac
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	505a      	str	r2, [r3, r1]
        break;
 800b752:	e05a      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	21b0      	movs	r1, #176	@ 0xb0
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	505a      	str	r2, [r3, r1]
        break;
 800b75c:	e055      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	21b4      	movs	r1, #180	@ 0xb4
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	505a      	str	r2, [r3, r1]
        break;
 800b766:	e050      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	21b8      	movs	r1, #184	@ 0xb8
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	505a      	str	r2, [r3, r1]
        break;
 800b770:	e04b      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	21bc      	movs	r1, #188	@ 0xbc
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	505a      	str	r2, [r3, r1]
        break;
 800b77a:	e046      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	21c4      	movs	r1, #196	@ 0xc4
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	505a      	str	r2, [r3, r1]
        break;
 800b784:	e041      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	21c8      	movs	r1, #200	@ 0xc8
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	505a      	str	r2, [r3, r1]
        break;
 800b78e:	e03c      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2290      	movs	r2, #144	@ 0x90
 800b794:	589b      	ldr	r3, [r3, r2]
 800b796:	2240      	movs	r2, #64	@ 0x40
 800b798:	431a      	orrs	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2190      	movs	r1, #144	@ 0x90
 800b79e:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b7a0:	2317      	movs	r3, #23
 800b7a2:	18fb      	adds	r3, r7, r3
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	701a      	strb	r2, [r3, #0]
        break;
 800b7a8:	e02f      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2288      	movs	r2, #136	@ 0x88
 800b7ae:	589b      	ldr	r3, [r3, r2]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d11e      	bne.n	800b7f2 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800b7b4:	230b      	movs	r3, #11
 800b7b6:	18fb      	adds	r3, r7, r3
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b0b      	cmp	r3, #11
 800b7bc:	d002      	beq.n	800b7c4 <HAL_UART_RegisterCallback+0x108>
 800b7be:	2b0c      	cmp	r3, #12
 800b7c0:	d005      	beq.n	800b7ce <HAL_UART_RegisterCallback+0x112>
 800b7c2:	e009      	b.n	800b7d8 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	21c4      	movs	r1, #196	@ 0xc4
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	505a      	str	r2, [r3, r1]
        break;
 800b7cc:	e01d      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	21c8      	movs	r1, #200	@ 0xc8
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	505a      	str	r2, [r3, r1]
        break;
 800b7d6:	e018      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2290      	movs	r2, #144	@ 0x90
 800b7dc:	589b      	ldr	r3, [r3, r2]
 800b7de:	2240      	movs	r2, #64	@ 0x40
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2190      	movs	r1, #144	@ 0x90
 800b7e6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b7e8:	2317      	movs	r3, #23
 800b7ea:	18fb      	adds	r3, r7, r3
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	701a      	strb	r2, [r3, #0]
        break;
 800b7f0:	e00b      	b.n	800b80a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2290      	movs	r2, #144	@ 0x90
 800b7f6:	589b      	ldr	r3, [r3, r2]
 800b7f8:	2240      	movs	r2, #64	@ 0x40
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2190      	movs	r1, #144	@ 0x90
 800b800:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800b802:	2317      	movs	r3, #23
 800b804:	18fb      	adds	r3, r7, r3
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b80a:	2317      	movs	r3, #23
 800b80c:	18fb      	adds	r3, r7, r3
 800b80e:	781b      	ldrb	r3, [r3, #0]
}
 800b810:	0018      	movs	r0, r3
 800b812:	46bd      	mov	sp, r7
 800b814:	b006      	add	sp, #24
 800b816:	bd80      	pop	{r7, pc}
 800b818:	0800d920 	.word	0x0800d920

0800b81c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	1dbb      	adds	r3, r7, #6
 800b828:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	228c      	movs	r2, #140	@ 0x8c
 800b82e:	589b      	ldr	r3, [r3, r2]
 800b830:	2b20      	cmp	r3, #32
 800b832:	d14a      	bne.n	800b8ca <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <HAL_UART_Receive_DMA+0x26>
 800b83a:	1dbb      	adds	r3, r7, #6
 800b83c:	881b      	ldrh	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e042      	b.n	800b8cc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	2380      	movs	r3, #128	@ 0x80
 800b84c:	015b      	lsls	r3, r3, #5
 800b84e:	429a      	cmp	r2, r3
 800b850:	d109      	bne.n	800b866 <HAL_UART_Receive_DMA+0x4a>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d105      	bne.n	800b866 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2201      	movs	r2, #1
 800b85e:	4013      	ands	r3, r2
 800b860:	d001      	beq.n	800b866 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e032      	b.n	800b8cc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a18      	ldr	r2, [pc, #96]	@ (800b8d4 <HAL_UART_Receive_DMA+0xb8>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d020      	beq.n	800b8b8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	2380      	movs	r3, #128	@ 0x80
 800b87e:	041b      	lsls	r3, r3, #16
 800b880:	4013      	ands	r3, r2
 800b882:	d019      	beq.n	800b8b8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b884:	f3ef 8310 	mrs	r3, PRIMASK
 800b888:	613b      	str	r3, [r7, #16]
  return(result);
 800b88a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	2301      	movs	r3, #1
 800b890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f383 8810 	msr	PRIMASK, r3
}
 800b898:	46c0      	nop			@ (mov r8, r8)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2180      	movs	r1, #128	@ 0x80
 800b8a6:	04c9      	lsls	r1, r1, #19
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	f383 8810 	msr	PRIMASK, r3
}
 800b8b6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b8b8:	1dbb      	adds	r3, r7, #6
 800b8ba:	881a      	ldrh	r2, [r3, #0]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f001 f81f 	bl	800c904 <UART_Start_Receive_DMA>
 800b8c6:	0003      	movs	r3, r0
 800b8c8:	e000      	b.n	800b8cc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800b8ca:	2302      	movs	r3, #2
  }
}
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	b008      	add	sp, #32
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	40008000 	.word	0x40008000

0800b8d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8d8:	b5b0      	push	{r4, r5, r7, lr}
 800b8da:	b0aa      	sub	sp, #168	@ 0xa8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	22a4      	movs	r2, #164	@ 0xa4
 800b8e8:	18b9      	adds	r1, r7, r2
 800b8ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	20a0      	movs	r0, #160	@ 0xa0
 800b8f4:	1839      	adds	r1, r7, r0
 800b8f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	249c      	movs	r4, #156	@ 0x9c
 800b900:	1939      	adds	r1, r7, r4
 800b902:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b904:	0011      	movs	r1, r2
 800b906:	18bb      	adds	r3, r7, r2
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4aa5      	ldr	r2, [pc, #660]	@ (800bba0 <HAL_UART_IRQHandler+0x2c8>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	2298      	movs	r2, #152	@ 0x98
 800b910:	18bd      	adds	r5, r7, r2
 800b912:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800b914:	18bb      	adds	r3, r7, r2
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d11a      	bne.n	800b952 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b91c:	187b      	adds	r3, r7, r1
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2220      	movs	r2, #32
 800b922:	4013      	ands	r3, r2
 800b924:	d015      	beq.n	800b952 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b926:	183b      	adds	r3, r7, r0
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2220      	movs	r2, #32
 800b92c:	4013      	ands	r3, r2
 800b92e:	d105      	bne.n	800b93c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b930:	193b      	adds	r3, r7, r4
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	2380      	movs	r3, #128	@ 0x80
 800b936:	055b      	lsls	r3, r3, #21
 800b938:	4013      	ands	r3, r2
 800b93a:	d00a      	beq.n	800b952 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b940:	2b00      	cmp	r3, #0
 800b942:	d100      	bne.n	800b946 <HAL_UART_IRQHandler+0x6e>
 800b944:	e2ea      	b.n	800bf1c <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	0010      	movs	r0, r2
 800b94e:	4798      	blx	r3
      }
      return;
 800b950:	e2e4      	b.n	800bf1c <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b952:	2398      	movs	r3, #152	@ 0x98
 800b954:	18fb      	adds	r3, r7, r3
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d100      	bne.n	800b95e <HAL_UART_IRQHandler+0x86>
 800b95c:	e128      	b.n	800bbb0 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b95e:	239c      	movs	r3, #156	@ 0x9c
 800b960:	18fb      	adds	r3, r7, r3
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a8f      	ldr	r2, [pc, #572]	@ (800bba4 <HAL_UART_IRQHandler+0x2cc>)
 800b966:	4013      	ands	r3, r2
 800b968:	d106      	bne.n	800b978 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b96a:	23a0      	movs	r3, #160	@ 0xa0
 800b96c:	18fb      	adds	r3, r7, r3
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a8d      	ldr	r2, [pc, #564]	@ (800bba8 <HAL_UART_IRQHandler+0x2d0>)
 800b972:	4013      	ands	r3, r2
 800b974:	d100      	bne.n	800b978 <HAL_UART_IRQHandler+0xa0>
 800b976:	e11b      	b.n	800bbb0 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b978:	23a4      	movs	r3, #164	@ 0xa4
 800b97a:	18fb      	adds	r3, r7, r3
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2201      	movs	r2, #1
 800b980:	4013      	ands	r3, r2
 800b982:	d012      	beq.n	800b9aa <HAL_UART_IRQHandler+0xd2>
 800b984:	23a0      	movs	r3, #160	@ 0xa0
 800b986:	18fb      	adds	r3, r7, r3
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	2380      	movs	r3, #128	@ 0x80
 800b98c:	005b      	lsls	r3, r3, #1
 800b98e:	4013      	ands	r3, r2
 800b990:	d00b      	beq.n	800b9aa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2201      	movs	r2, #1
 800b998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2290      	movs	r2, #144	@ 0x90
 800b99e:	589b      	ldr	r3, [r3, r2]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2190      	movs	r1, #144	@ 0x90
 800b9a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9aa:	23a4      	movs	r3, #164	@ 0xa4
 800b9ac:	18fb      	adds	r3, r7, r3
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	d011      	beq.n	800b9da <HAL_UART_IRQHandler+0x102>
 800b9b6:	239c      	movs	r3, #156	@ 0x9c
 800b9b8:	18fb      	adds	r3, r7, r3
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	4013      	ands	r3, r2
 800b9c0:	d00b      	beq.n	800b9da <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2290      	movs	r2, #144	@ 0x90
 800b9ce:	589b      	ldr	r3, [r3, r2]
 800b9d0:	2204      	movs	r2, #4
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2190      	movs	r1, #144	@ 0x90
 800b9d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9da:	23a4      	movs	r3, #164	@ 0xa4
 800b9dc:	18fb      	adds	r3, r7, r3
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2204      	movs	r2, #4
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	d011      	beq.n	800ba0a <HAL_UART_IRQHandler+0x132>
 800b9e6:	239c      	movs	r3, #156	@ 0x9c
 800b9e8:	18fb      	adds	r3, r7, r3
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	d00b      	beq.n	800ba0a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2204      	movs	r2, #4
 800b9f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2290      	movs	r2, #144	@ 0x90
 800b9fe:	589b      	ldr	r3, [r3, r2]
 800ba00:	2202      	movs	r2, #2
 800ba02:	431a      	orrs	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2190      	movs	r1, #144	@ 0x90
 800ba08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba0a:	23a4      	movs	r3, #164	@ 0xa4
 800ba0c:	18fb      	adds	r3, r7, r3
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2208      	movs	r2, #8
 800ba12:	4013      	ands	r3, r2
 800ba14:	d017      	beq.n	800ba46 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba16:	23a0      	movs	r3, #160	@ 0xa0
 800ba18:	18fb      	adds	r3, r7, r3
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	4013      	ands	r3, r2
 800ba20:	d105      	bne.n	800ba2e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba22:	239c      	movs	r3, #156	@ 0x9c
 800ba24:	18fb      	adds	r3, r7, r3
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a5e      	ldr	r2, [pc, #376]	@ (800bba4 <HAL_UART_IRQHandler+0x2cc>)
 800ba2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba2c:	d00b      	beq.n	800ba46 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2208      	movs	r2, #8
 800ba34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2290      	movs	r2, #144	@ 0x90
 800ba3a:	589b      	ldr	r3, [r3, r2]
 800ba3c:	2208      	movs	r2, #8
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2190      	movs	r1, #144	@ 0x90
 800ba44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba46:	23a4      	movs	r3, #164	@ 0xa4
 800ba48:	18fb      	adds	r3, r7, r3
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	2380      	movs	r3, #128	@ 0x80
 800ba4e:	011b      	lsls	r3, r3, #4
 800ba50:	4013      	ands	r3, r2
 800ba52:	d013      	beq.n	800ba7c <HAL_UART_IRQHandler+0x1a4>
 800ba54:	23a0      	movs	r3, #160	@ 0xa0
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	2380      	movs	r3, #128	@ 0x80
 800ba5c:	04db      	lsls	r3, r3, #19
 800ba5e:	4013      	ands	r3, r2
 800ba60:	d00c      	beq.n	800ba7c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2280      	movs	r2, #128	@ 0x80
 800ba68:	0112      	lsls	r2, r2, #4
 800ba6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2290      	movs	r2, #144	@ 0x90
 800ba70:	589b      	ldr	r3, [r3, r2]
 800ba72:	2220      	movs	r2, #32
 800ba74:	431a      	orrs	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2190      	movs	r1, #144	@ 0x90
 800ba7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2290      	movs	r2, #144	@ 0x90
 800ba80:	589b      	ldr	r3, [r3, r2]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d100      	bne.n	800ba88 <HAL_UART_IRQHandler+0x1b0>
 800ba86:	e24b      	b.n	800bf20 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba88:	23a4      	movs	r3, #164	@ 0xa4
 800ba8a:	18fb      	adds	r3, r7, r3
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	4013      	ands	r3, r2
 800ba92:	d015      	beq.n	800bac0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba94:	23a0      	movs	r3, #160	@ 0xa0
 800ba96:	18fb      	adds	r3, r7, r3
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	d106      	bne.n	800baae <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800baa0:	239c      	movs	r3, #156	@ 0x9c
 800baa2:	18fb      	adds	r3, r7, r3
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	2380      	movs	r3, #128	@ 0x80
 800baa8:	055b      	lsls	r3, r3, #21
 800baaa:	4013      	ands	r3, r2
 800baac:	d008      	beq.n	800bac0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d004      	beq.n	800bac0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	0010      	movs	r0, r2
 800babe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2290      	movs	r2, #144	@ 0x90
 800bac4:	589b      	ldr	r3, [r3, r2]
 800bac6:	2194      	movs	r1, #148	@ 0x94
 800bac8:	187a      	adds	r2, r7, r1
 800baca:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	2240      	movs	r2, #64	@ 0x40
 800bad4:	4013      	ands	r3, r2
 800bad6:	2b40      	cmp	r3, #64	@ 0x40
 800bad8:	d004      	beq.n	800bae4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bada:	187b      	adds	r3, r7, r1
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2228      	movs	r2, #40	@ 0x28
 800bae0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bae2:	d050      	beq.n	800bb86 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	0018      	movs	r0, r3
 800bae8:	f000 fff2 	bl	800cad0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	2240      	movs	r2, #64	@ 0x40
 800baf4:	4013      	ands	r3, r2
 800baf6:	2b40      	cmp	r3, #64	@ 0x40
 800baf8:	d13e      	bne.n	800bb78 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bafa:	f3ef 8310 	mrs	r3, PRIMASK
 800bafe:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800bb00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb02:	2090      	movs	r0, #144	@ 0x90
 800bb04:	183a      	adds	r2, r7, r0
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	2301      	movs	r3, #1
 800bb0a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb0e:	f383 8810 	msr	PRIMASK, r3
}
 800bb12:	46c0      	nop			@ (mov r8, r8)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689a      	ldr	r2, [r3, #8]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2140      	movs	r1, #64	@ 0x40
 800bb20:	438a      	bics	r2, r1
 800bb22:	609a      	str	r2, [r3, #8]
 800bb24:	183b      	adds	r3, r7, r0
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb2c:	f383 8810 	msr	PRIMASK, r3
}
 800bb30:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2280      	movs	r2, #128	@ 0x80
 800bb36:	589b      	ldr	r3, [r3, r2]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d016      	beq.n	800bb6a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2280      	movs	r2, #128	@ 0x80
 800bb40:	589b      	ldr	r3, [r3, r2]
 800bb42:	4a1a      	ldr	r2, [pc, #104]	@ (800bbac <HAL_UART_IRQHandler+0x2d4>)
 800bb44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2280      	movs	r2, #128	@ 0x80
 800bb4a:	589b      	ldr	r3, [r3, r2]
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	f7fb fce5 	bl	800751c <HAL_DMA_Abort_IT>
 800bb52:	1e03      	subs	r3, r0, #0
 800bb54:	d022      	beq.n	800bb9c <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2280      	movs	r2, #128	@ 0x80
 800bb5a:	589b      	ldr	r3, [r3, r2]
 800bb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	2180      	movs	r1, #128	@ 0x80
 800bb62:	5852      	ldr	r2, [r2, r1]
 800bb64:	0010      	movs	r0, r2
 800bb66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb68:	e018      	b.n	800bb9c <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	22a4      	movs	r2, #164	@ 0xa4
 800bb6e:	589b      	ldr	r3, [r3, r2]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	0010      	movs	r0, r2
 800bb74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb76:	e011      	b.n	800bb9c <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	22a4      	movs	r2, #164	@ 0xa4
 800bb7c:	589b      	ldr	r3, [r3, r2]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	0010      	movs	r0, r2
 800bb82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb84:	e00a      	b.n	800bb9c <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	22a4      	movs	r2, #164	@ 0xa4
 800bb8a:	589b      	ldr	r3, [r3, r2]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	0010      	movs	r0, r2
 800bb90:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2290      	movs	r2, #144	@ 0x90
 800bb96:	2100      	movs	r1, #0
 800bb98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800bb9a:	e1c1      	b.n	800bf20 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb9c:	46c0      	nop			@ (mov r8, r8)
    return;
 800bb9e:	e1bf      	b.n	800bf20 <HAL_UART_IRQHandler+0x648>
 800bba0:	0000080f 	.word	0x0000080f
 800bba4:	10000001 	.word	0x10000001
 800bba8:	04000120 	.word	0x04000120
 800bbac:	0800cda3 	.word	0x0800cda3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d000      	beq.n	800bbba <HAL_UART_IRQHandler+0x2e2>
 800bbb8:	e140      	b.n	800be3c <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbba:	23a4      	movs	r3, #164	@ 0xa4
 800bbbc:	18fb      	adds	r3, r7, r3
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2210      	movs	r2, #16
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	d100      	bne.n	800bbc8 <HAL_UART_IRQHandler+0x2f0>
 800bbc6:	e139      	b.n	800be3c <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbc8:	23a0      	movs	r3, #160	@ 0xa0
 800bbca:	18fb      	adds	r3, r7, r3
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2210      	movs	r2, #16
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	d100      	bne.n	800bbd6 <HAL_UART_IRQHandler+0x2fe>
 800bbd4:	e132      	b.n	800be3c <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2210      	movs	r2, #16
 800bbdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	2240      	movs	r2, #64	@ 0x40
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	2b40      	cmp	r3, #64	@ 0x40
 800bbea:	d000      	beq.n	800bbee <HAL_UART_IRQHandler+0x316>
 800bbec:	e0a5      	b.n	800bd3a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2280      	movs	r2, #128	@ 0x80
 800bbf2:	589b      	ldr	r3, [r3, r2]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	217e      	movs	r1, #126	@ 0x7e
 800bbfa:	187b      	adds	r3, r7, r1
 800bbfc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800bbfe:	187b      	adds	r3, r7, r1
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d100      	bne.n	800bc08 <HAL_UART_IRQHandler+0x330>
 800bc06:	e18d      	b.n	800bf24 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	225c      	movs	r2, #92	@ 0x5c
 800bc0c:	5a9b      	ldrh	r3, [r3, r2]
 800bc0e:	187a      	adds	r2, r7, r1
 800bc10:	8812      	ldrh	r2, [r2, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d300      	bcc.n	800bc18 <HAL_UART_IRQHandler+0x340>
 800bc16:	e185      	b.n	800bf24 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	187a      	adds	r2, r7, r1
 800bc1c:	215e      	movs	r1, #94	@ 0x5e
 800bc1e:	8812      	ldrh	r2, [r2, #0]
 800bc20:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2280      	movs	r2, #128	@ 0x80
 800bc26:	589b      	ldr	r3, [r3, r2]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	4013      	ands	r3, r2
 800bc30:	d170      	bne.n	800bd14 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc32:	f3ef 8310 	mrs	r3, PRIMASK
 800bc36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc42:	f383 8810 	msr	PRIMASK, r3
}
 800bc46:	46c0      	nop			@ (mov r8, r8)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	49b8      	ldr	r1, [pc, #736]	@ (800bf34 <HAL_UART_IRQHandler+0x65c>)
 800bc54:	400a      	ands	r2, r1
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5e:	f383 8810 	msr	PRIMASK, r3
}
 800bc62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc64:	f3ef 8310 	mrs	r3, PRIMASK
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800bc6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6c:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc6e:	2301      	movs	r3, #1
 800bc70:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc74:	f383 8810 	msr	PRIMASK, r3
}
 800bc78:	46c0      	nop			@ (mov r8, r8)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689a      	ldr	r2, [r3, #8]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2101      	movs	r1, #1
 800bc86:	438a      	bics	r2, r1
 800bc88:	609a      	str	r2, [r3, #8]
 800bc8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc8c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc90:	f383 8810 	msr	PRIMASK, r3
}
 800bc94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc96:	f3ef 8310 	mrs	r3, PRIMASK
 800bc9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800bc9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bca0:	2301      	movs	r3, #1
 800bca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bca6:	f383 8810 	msr	PRIMASK, r3
}
 800bcaa:	46c0      	nop			@ (mov r8, r8)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689a      	ldr	r2, [r3, #8]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2140      	movs	r1, #64	@ 0x40
 800bcb8:	438a      	bics	r2, r1
 800bcba:	609a      	str	r2, [r3, #8]
 800bcbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcbe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc2:	f383 8810 	msr	PRIMASK, r3
}
 800bcc6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	228c      	movs	r2, #140	@ 0x8c
 800bccc:	2120      	movs	r1, #32
 800bcce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcd6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcda:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800bcdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bce0:	2301      	movs	r3, #1
 800bce2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bce6:	f383 8810 	msr	PRIMASK, r3
}
 800bcea:	46c0      	nop			@ (mov r8, r8)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2110      	movs	r1, #16
 800bcf8:	438a      	bics	r2, r1
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd02:	f383 8810 	msr	PRIMASK, r3
}
 800bd06:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2280      	movs	r2, #128	@ 0x80
 800bd0c:	589b      	ldr	r3, [r3, r2]
 800bd0e:	0018      	movs	r0, r3
 800bd10:	f7fb fba2 	bl	8007458 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	22c0      	movs	r2, #192	@ 0xc0
 800bd1e:	589b      	ldr	r3, [r3, r2]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	215c      	movs	r1, #92	@ 0x5c
 800bd24:	5a51      	ldrh	r1, [r2, r1]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	205e      	movs	r0, #94	@ 0x5e
 800bd2a:	5a12      	ldrh	r2, [r2, r0]
 800bd2c:	b292      	uxth	r2, r2
 800bd2e:	1a8a      	subs	r2, r1, r2
 800bd30:	b291      	uxth	r1, r2
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	0010      	movs	r0, r2
 800bd36:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd38:	e0f4      	b.n	800bf24 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	225c      	movs	r2, #92	@ 0x5c
 800bd3e:	5a99      	ldrh	r1, [r3, r2]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	225e      	movs	r2, #94	@ 0x5e
 800bd44:	5a9b      	ldrh	r3, [r3, r2]
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	208e      	movs	r0, #142	@ 0x8e
 800bd4a:	183b      	adds	r3, r7, r0
 800bd4c:	1a8a      	subs	r2, r1, r2
 800bd4e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	225e      	movs	r2, #94	@ 0x5e
 800bd54:	5a9b      	ldrh	r3, [r3, r2]
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d100      	bne.n	800bd5e <HAL_UART_IRQHandler+0x486>
 800bd5c:	e0e4      	b.n	800bf28 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800bd5e:	183b      	adds	r3, r7, r0
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d100      	bne.n	800bd68 <HAL_UART_IRQHandler+0x490>
 800bd66:	e0df      	b.n	800bf28 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd68:	f3ef 8310 	mrs	r3, PRIMASK
 800bd6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd70:	2488      	movs	r4, #136	@ 0x88
 800bd72:	193a      	adds	r2, r7, r4
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	2301      	movs	r3, #1
 800bd78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f383 8810 	msr	PRIMASK, r3
}
 800bd80:	46c0      	nop			@ (mov r8, r8)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	496a      	ldr	r1, [pc, #424]	@ (800bf38 <HAL_UART_IRQHandler+0x660>)
 800bd8e:	400a      	ands	r2, r1
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	193b      	adds	r3, r7, r4
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f383 8810 	msr	PRIMASK, r3
}
 800bd9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bda0:	f3ef 8310 	mrs	r3, PRIMASK
 800bda4:	61bb      	str	r3, [r7, #24]
  return(result);
 800bda6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bda8:	2484      	movs	r4, #132	@ 0x84
 800bdaa:	193a      	adds	r2, r7, r4
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	2301      	movs	r3, #1
 800bdb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	f383 8810 	msr	PRIMASK, r3
}
 800bdb8:	46c0      	nop			@ (mov r8, r8)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	689a      	ldr	r2, [r3, #8]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	495d      	ldr	r1, [pc, #372]	@ (800bf3c <HAL_UART_IRQHandler+0x664>)
 800bdc6:	400a      	ands	r2, r1
 800bdc8:	609a      	str	r2, [r3, #8]
 800bdca:	193b      	adds	r3, r7, r4
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	f383 8810 	msr	PRIMASK, r3
}
 800bdd6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	228c      	movs	r2, #140	@ 0x8c
 800bddc:	2120      	movs	r1, #32
 800bdde:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdec:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf4:	2480      	movs	r4, #128	@ 0x80
 800bdf6:	193a      	adds	r2, r7, r4
 800bdf8:	6013      	str	r3, [r2, #0]
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be00:	f383 8810 	msr	PRIMASK, r3
}
 800be04:	46c0      	nop			@ (mov r8, r8)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2110      	movs	r1, #16
 800be12:	438a      	bics	r2, r1
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	193b      	adds	r3, r7, r4
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1e:	f383 8810 	msr	PRIMASK, r3
}
 800be22:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	22c0      	movs	r2, #192	@ 0xc0
 800be2e:	589b      	ldr	r3, [r3, r2]
 800be30:	183a      	adds	r2, r7, r0
 800be32:	8811      	ldrh	r1, [r2, #0]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	0010      	movs	r0, r2
 800be38:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be3a:	e075      	b.n	800bf28 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be3c:	23a4      	movs	r3, #164	@ 0xa4
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	2380      	movs	r3, #128	@ 0x80
 800be44:	035b      	lsls	r3, r3, #13
 800be46:	4013      	ands	r3, r2
 800be48:	d012      	beq.n	800be70 <HAL_UART_IRQHandler+0x598>
 800be4a:	239c      	movs	r3, #156	@ 0x9c
 800be4c:	18fb      	adds	r3, r7, r3
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	2380      	movs	r3, #128	@ 0x80
 800be52:	03db      	lsls	r3, r3, #15
 800be54:	4013      	ands	r3, r2
 800be56:	d00b      	beq.n	800be70 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2280      	movs	r2, #128	@ 0x80
 800be5e:	0352      	lsls	r2, r2, #13
 800be60:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	22b4      	movs	r2, #180	@ 0xb4
 800be66:	589b      	ldr	r3, [r3, r2]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	0010      	movs	r0, r2
 800be6c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be6e:	e05e      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be70:	23a4      	movs	r3, #164	@ 0xa4
 800be72:	18fb      	adds	r3, r7, r3
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2280      	movs	r2, #128	@ 0x80
 800be78:	4013      	ands	r3, r2
 800be7a:	d016      	beq.n	800beaa <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be7c:	23a0      	movs	r3, #160	@ 0xa0
 800be7e:	18fb      	adds	r3, r7, r3
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2280      	movs	r2, #128	@ 0x80
 800be84:	4013      	ands	r3, r2
 800be86:	d106      	bne.n	800be96 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be88:	239c      	movs	r3, #156	@ 0x9c
 800be8a:	18fb      	adds	r3, r7, r3
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	2380      	movs	r3, #128	@ 0x80
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	4013      	ands	r3, r2
 800be94:	d009      	beq.n	800beaa <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d046      	beq.n	800bf2c <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	0010      	movs	r0, r2
 800bea6:	4798      	blx	r3
    }
    return;
 800bea8:	e040      	b.n	800bf2c <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800beaa:	23a4      	movs	r3, #164	@ 0xa4
 800beac:	18fb      	adds	r3, r7, r3
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2240      	movs	r2, #64	@ 0x40
 800beb2:	4013      	ands	r3, r2
 800beb4:	d00a      	beq.n	800becc <HAL_UART_IRQHandler+0x5f4>
 800beb6:	23a0      	movs	r3, #160	@ 0xa0
 800beb8:	18fb      	adds	r3, r7, r3
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2240      	movs	r2, #64	@ 0x40
 800bebe:	4013      	ands	r3, r2
 800bec0:	d004      	beq.n	800becc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	0018      	movs	r0, r3
 800bec6:	f000 ff85 	bl	800cdd4 <UART_EndTransmit_IT>
    return;
 800beca:	e030      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800becc:	23a4      	movs	r3, #164	@ 0xa4
 800bece:	18fb      	adds	r3, r7, r3
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	2380      	movs	r3, #128	@ 0x80
 800bed4:	041b      	lsls	r3, r3, #16
 800bed6:	4013      	ands	r3, r2
 800bed8:	d00d      	beq.n	800bef6 <HAL_UART_IRQHandler+0x61e>
 800beda:	23a0      	movs	r3, #160	@ 0xa0
 800bedc:	18fb      	adds	r3, r7, r3
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	2380      	movs	r3, #128	@ 0x80
 800bee2:	05db      	lsls	r3, r3, #23
 800bee4:	4013      	ands	r3, r2
 800bee6:	d006      	beq.n	800bef6 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	22bc      	movs	r2, #188	@ 0xbc
 800beec:	589b      	ldr	r3, [r3, r2]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	0010      	movs	r0, r2
 800bef2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bef4:	e01b      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bef6:	23a4      	movs	r3, #164	@ 0xa4
 800bef8:	18fb      	adds	r3, r7, r3
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	2380      	movs	r3, #128	@ 0x80
 800befe:	045b      	lsls	r3, r3, #17
 800bf00:	4013      	ands	r3, r2
 800bf02:	d014      	beq.n	800bf2e <HAL_UART_IRQHandler+0x656>
 800bf04:	23a0      	movs	r3, #160	@ 0xa0
 800bf06:	18fb      	adds	r3, r7, r3
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da0f      	bge.n	800bf2e <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	22b8      	movs	r2, #184	@ 0xb8
 800bf12:	589b      	ldr	r3, [r3, r2]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	0010      	movs	r0, r2
 800bf18:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf1a:	e008      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
      return;
 800bf1c:	46c0      	nop			@ (mov r8, r8)
 800bf1e:	e006      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
    return;
 800bf20:	46c0      	nop			@ (mov r8, r8)
 800bf22:	e004      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
      return;
 800bf24:	46c0      	nop			@ (mov r8, r8)
 800bf26:	e002      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
      return;
 800bf28:	46c0      	nop			@ (mov r8, r8)
 800bf2a:	e000      	b.n	800bf2e <HAL_UART_IRQHandler+0x656>
    return;
 800bf2c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	b02a      	add	sp, #168	@ 0xa8
 800bf32:	bdb0      	pop	{r4, r5, r7, pc}
 800bf34:	fffffeff 	.word	0xfffffeff
 800bf38:	fffffedf 	.word	0xfffffedf
 800bf3c:	effffffe 	.word	0xeffffffe

0800bf40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf48:	46c0      	nop			@ (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b002      	add	sp, #8
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf58:	46c0      	nop			@ (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bf68:	46c0      	nop			@ (mov r8, r8)
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	b002      	add	sp, #8
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf78:	46c0      	nop			@ (mov r8, r8)
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf88:	46c0      	nop			@ (mov r8, r8)
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	b002      	add	sp, #8
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bf98:	46c0      	nop			@ (mov r8, r8)
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bfa8:	46c0      	nop			@ (mov r8, r8)
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	b002      	add	sp, #8
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bfb8:	46c0      	nop			@ (mov r8, r8)
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	000a      	movs	r2, r1
 800bfca:	1cbb      	adds	r3, r7, #2
 800bfcc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfce:	46c0      	nop			@ (mov r8, r8)
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	b002      	add	sp, #8
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2194      	movs	r1, #148	@ 0x94
 800bfe4:	4a18      	ldr	r2, [pc, #96]	@ (800c048 <UART_InitCallbacksToDefault+0x70>)
 800bfe6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2198      	movs	r1, #152	@ 0x98
 800bfec:	4a17      	ldr	r2, [pc, #92]	@ (800c04c <UART_InitCallbacksToDefault+0x74>)
 800bfee:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	219c      	movs	r1, #156	@ 0x9c
 800bff4:	4a16      	ldr	r2, [pc, #88]	@ (800c050 <UART_InitCallbacksToDefault+0x78>)
 800bff6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	21a0      	movs	r1, #160	@ 0xa0
 800bffc:	4a15      	ldr	r2, [pc, #84]	@ (800c054 <UART_InitCallbacksToDefault+0x7c>)
 800bffe:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	21a4      	movs	r1, #164	@ 0xa4
 800c004:	4a14      	ldr	r2, [pc, #80]	@ (800c058 <UART_InitCallbacksToDefault+0x80>)
 800c006:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	21a8      	movs	r1, #168	@ 0xa8
 800c00c:	4a13      	ldr	r2, [pc, #76]	@ (800c05c <UART_InitCallbacksToDefault+0x84>)
 800c00e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	21ac      	movs	r1, #172	@ 0xac
 800c014:	4a12      	ldr	r2, [pc, #72]	@ (800c060 <UART_InitCallbacksToDefault+0x88>)
 800c016:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	21b0      	movs	r1, #176	@ 0xb0
 800c01c:	4a11      	ldr	r2, [pc, #68]	@ (800c064 <UART_InitCallbacksToDefault+0x8c>)
 800c01e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	21b4      	movs	r1, #180	@ 0xb4
 800c024:	4a10      	ldr	r2, [pc, #64]	@ (800c068 <UART_InitCallbacksToDefault+0x90>)
 800c026:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	21b8      	movs	r1, #184	@ 0xb8
 800c02c:	4a0f      	ldr	r2, [pc, #60]	@ (800c06c <UART_InitCallbacksToDefault+0x94>)
 800c02e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	21bc      	movs	r1, #188	@ 0xbc
 800c034:	4a0e      	ldr	r2, [pc, #56]	@ (800c070 <UART_InitCallbacksToDefault+0x98>)
 800c036:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	21c0      	movs	r1, #192	@ 0xc0
 800c03c:	4a0d      	ldr	r2, [pc, #52]	@ (800c074 <UART_InitCallbacksToDefault+0x9c>)
 800c03e:	505a      	str	r2, [r3, r1]

}
 800c040:	46c0      	nop			@ (mov r8, r8)
 800c042:	46bd      	mov	sp, r7
 800c044:	b002      	add	sp, #8
 800c046:	bd80      	pop	{r7, pc}
 800c048:	0800bf51 	.word	0x0800bf51
 800c04c:	0800bf41 	.word	0x0800bf41
 800c050:	0800bf71 	.word	0x0800bf71
 800c054:	0800bf61 	.word	0x0800bf61
 800c058:	0800bf81 	.word	0x0800bf81
 800c05c:	0800bf91 	.word	0x0800bf91
 800c060:	0800bfa1 	.word	0x0800bfa1
 800c064:	0800bfb1 	.word	0x0800bfb1
 800c068:	0800ce31 	.word	0x0800ce31
 800c06c:	0800ce41 	.word	0x0800ce41
 800c070:	0800ce51 	.word	0x0800ce51
 800c074:	0800bfc1 	.word	0x0800bfc1

0800c078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c078:	b5b0      	push	{r4, r5, r7, lr}
 800c07a:	b090      	sub	sp, #64	@ 0x40
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c080:	231a      	movs	r3, #26
 800c082:	2220      	movs	r2, #32
 800c084:	189b      	adds	r3, r3, r2
 800c086:	19db      	adds	r3, r3, r7
 800c088:	2200      	movs	r2, #0
 800c08a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08e:	689a      	ldr	r2, [r3, #8]
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	431a      	orrs	r2, r3
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	431a      	orrs	r2, r3
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	69db      	ldr	r3, [r3, #28]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4ac4      	ldr	r2, [pc, #784]	@ (800c3bc <UART_SetConfig+0x344>)
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	0019      	movs	r1, r3
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0b6:	430b      	orrs	r3, r1
 800c0b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	4abf      	ldr	r2, [pc, #764]	@ (800c3c0 <UART_SetConfig+0x348>)
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	68d9      	ldr	r1, [r3, #12]
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	0003      	movs	r3, r0
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4ab9      	ldr	r2, [pc, #740]	@ (800c3c4 <UART_SetConfig+0x34c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d004      	beq.n	800c0ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	4ab4      	ldr	r2, [pc, #720]	@ (800c3c8 <UART_SetConfig+0x350>)
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	0019      	movs	r1, r3
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c100:	430b      	orrs	r3, r1
 800c102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c10a:	220f      	movs	r2, #15
 800c10c:	4393      	bics	r3, r2
 800c10e:	0018      	movs	r0, r3
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	0003      	movs	r3, r0
 800c11a:	430b      	orrs	r3, r1
 800c11c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4aaa      	ldr	r2, [pc, #680]	@ (800c3cc <UART_SetConfig+0x354>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d131      	bne.n	800c18c <UART_SetConfig+0x114>
 800c128:	4ba9      	ldr	r3, [pc, #676]	@ (800c3d0 <UART_SetConfig+0x358>)
 800c12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c12c:	2203      	movs	r2, #3
 800c12e:	4013      	ands	r3, r2
 800c130:	2b03      	cmp	r3, #3
 800c132:	d01d      	beq.n	800c170 <UART_SetConfig+0xf8>
 800c134:	d823      	bhi.n	800c17e <UART_SetConfig+0x106>
 800c136:	2b02      	cmp	r3, #2
 800c138:	d00c      	beq.n	800c154 <UART_SetConfig+0xdc>
 800c13a:	d820      	bhi.n	800c17e <UART_SetConfig+0x106>
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <UART_SetConfig+0xce>
 800c140:	2b01      	cmp	r3, #1
 800c142:	d00e      	beq.n	800c162 <UART_SetConfig+0xea>
 800c144:	e01b      	b.n	800c17e <UART_SetConfig+0x106>
 800c146:	231b      	movs	r3, #27
 800c148:	2220      	movs	r2, #32
 800c14a:	189b      	adds	r3, r3, r2
 800c14c:	19db      	adds	r3, r3, r7
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
 800c152:	e071      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c154:	231b      	movs	r3, #27
 800c156:	2220      	movs	r2, #32
 800c158:	189b      	adds	r3, r3, r2
 800c15a:	19db      	adds	r3, r3, r7
 800c15c:	2202      	movs	r2, #2
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	e06a      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c162:	231b      	movs	r3, #27
 800c164:	2220      	movs	r2, #32
 800c166:	189b      	adds	r3, r3, r2
 800c168:	19db      	adds	r3, r3, r7
 800c16a:	2204      	movs	r2, #4
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	e063      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c170:	231b      	movs	r3, #27
 800c172:	2220      	movs	r2, #32
 800c174:	189b      	adds	r3, r3, r2
 800c176:	19db      	adds	r3, r3, r7
 800c178:	2208      	movs	r2, #8
 800c17a:	701a      	strb	r2, [r3, #0]
 800c17c:	e05c      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c17e:	231b      	movs	r3, #27
 800c180:	2220      	movs	r2, #32
 800c182:	189b      	adds	r3, r3, r2
 800c184:	19db      	adds	r3, r3, r7
 800c186:	2210      	movs	r2, #16
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	e055      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a90      	ldr	r2, [pc, #576]	@ (800c3d4 <UART_SetConfig+0x35c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d106      	bne.n	800c1a4 <UART_SetConfig+0x12c>
 800c196:	231b      	movs	r3, #27
 800c198:	2220      	movs	r2, #32
 800c19a:	189b      	adds	r3, r3, r2
 800c19c:	19db      	adds	r3, r3, r7
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	e049      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a86      	ldr	r2, [pc, #536]	@ (800c3c4 <UART_SetConfig+0x34c>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d13e      	bne.n	800c22c <UART_SetConfig+0x1b4>
 800c1ae:	4b88      	ldr	r3, [pc, #544]	@ (800c3d0 <UART_SetConfig+0x358>)
 800c1b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1b2:	23c0      	movs	r3, #192	@ 0xc0
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	22c0      	movs	r2, #192	@ 0xc0
 800c1ba:	0112      	lsls	r2, r2, #4
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d027      	beq.n	800c210 <UART_SetConfig+0x198>
 800c1c0:	22c0      	movs	r2, #192	@ 0xc0
 800c1c2:	0112      	lsls	r2, r2, #4
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d82a      	bhi.n	800c21e <UART_SetConfig+0x1a6>
 800c1c8:	2280      	movs	r2, #128	@ 0x80
 800c1ca:	0112      	lsls	r2, r2, #4
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d011      	beq.n	800c1f4 <UART_SetConfig+0x17c>
 800c1d0:	2280      	movs	r2, #128	@ 0x80
 800c1d2:	0112      	lsls	r2, r2, #4
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d822      	bhi.n	800c21e <UART_SetConfig+0x1a6>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <UART_SetConfig+0x16e>
 800c1dc:	2280      	movs	r2, #128	@ 0x80
 800c1de:	00d2      	lsls	r2, r2, #3
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d00e      	beq.n	800c202 <UART_SetConfig+0x18a>
 800c1e4:	e01b      	b.n	800c21e <UART_SetConfig+0x1a6>
 800c1e6:	231b      	movs	r3, #27
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	189b      	adds	r3, r3, r2
 800c1ec:	19db      	adds	r3, r3, r7
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	701a      	strb	r2, [r3, #0]
 800c1f2:	e021      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c1f4:	231b      	movs	r3, #27
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	189b      	adds	r3, r3, r2
 800c1fa:	19db      	adds	r3, r3, r7
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	701a      	strb	r2, [r3, #0]
 800c200:	e01a      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c202:	231b      	movs	r3, #27
 800c204:	2220      	movs	r2, #32
 800c206:	189b      	adds	r3, r3, r2
 800c208:	19db      	adds	r3, r3, r7
 800c20a:	2204      	movs	r2, #4
 800c20c:	701a      	strb	r2, [r3, #0]
 800c20e:	e013      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c210:	231b      	movs	r3, #27
 800c212:	2220      	movs	r2, #32
 800c214:	189b      	adds	r3, r3, r2
 800c216:	19db      	adds	r3, r3, r7
 800c218:	2208      	movs	r2, #8
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	e00c      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c21e:	231b      	movs	r3, #27
 800c220:	2220      	movs	r2, #32
 800c222:	189b      	adds	r3, r3, r2
 800c224:	19db      	adds	r3, r3, r7
 800c226:	2210      	movs	r2, #16
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	e005      	b.n	800c238 <UART_SetConfig+0x1c0>
 800c22c:	231b      	movs	r3, #27
 800c22e:	2220      	movs	r2, #32
 800c230:	189b      	adds	r3, r3, r2
 800c232:	19db      	adds	r3, r3, r7
 800c234:	2210      	movs	r2, #16
 800c236:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a61      	ldr	r2, [pc, #388]	@ (800c3c4 <UART_SetConfig+0x34c>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d000      	beq.n	800c244 <UART_SetConfig+0x1cc>
 800c242:	e092      	b.n	800c36a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c244:	231b      	movs	r3, #27
 800c246:	2220      	movs	r2, #32
 800c248:	189b      	adds	r3, r3, r2
 800c24a:	19db      	adds	r3, r3, r7
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b08      	cmp	r3, #8
 800c250:	d015      	beq.n	800c27e <UART_SetConfig+0x206>
 800c252:	dc18      	bgt.n	800c286 <UART_SetConfig+0x20e>
 800c254:	2b04      	cmp	r3, #4
 800c256:	d00d      	beq.n	800c274 <UART_SetConfig+0x1fc>
 800c258:	dc15      	bgt.n	800c286 <UART_SetConfig+0x20e>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <UART_SetConfig+0x1ec>
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d005      	beq.n	800c26e <UART_SetConfig+0x1f6>
 800c262:	e010      	b.n	800c286 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c264:	f7fc fdd6 	bl	8008e14 <HAL_RCC_GetPCLK1Freq>
 800c268:	0003      	movs	r3, r0
 800c26a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c26c:	e014      	b.n	800c298 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c26e:	4b5a      	ldr	r3, [pc, #360]	@ (800c3d8 <UART_SetConfig+0x360>)
 800c270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c272:	e011      	b.n	800c298 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c274:	f7fc fd42 	bl	8008cfc <HAL_RCC_GetSysClockFreq>
 800c278:	0003      	movs	r3, r0
 800c27a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c27c:	e00c      	b.n	800c298 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c27e:	2380      	movs	r3, #128	@ 0x80
 800c280:	021b      	lsls	r3, r3, #8
 800c282:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c284:	e008      	b.n	800c298 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c28a:	231a      	movs	r3, #26
 800c28c:	2220      	movs	r2, #32
 800c28e:	189b      	adds	r3, r3, r2
 800c290:	19db      	adds	r3, r3, r7
 800c292:	2201      	movs	r2, #1
 800c294:	701a      	strb	r2, [r3, #0]
        break;
 800c296:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d100      	bne.n	800c2a0 <UART_SetConfig+0x228>
 800c29e:	e147      	b.n	800c530 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800c3dc <UART_SetConfig+0x364>)
 800c2a6:	0052      	lsls	r2, r2, #1
 800c2a8:	5ad3      	ldrh	r3, [r2, r3]
 800c2aa:	0019      	movs	r1, r3
 800c2ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c2ae:	f7f3 ff29 	bl	8000104 <__udivsi3>
 800c2b2:	0003      	movs	r3, r0
 800c2b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	0013      	movs	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	189b      	adds	r3, r3, r2
 800c2c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d305      	bcc.n	800c2d2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d906      	bls.n	800c2e0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c2d2:	231a      	movs	r3, #26
 800c2d4:	2220      	movs	r2, #32
 800c2d6:	189b      	adds	r3, r3, r2
 800c2d8:	19db      	adds	r3, r3, r7
 800c2da:	2201      	movs	r2, #1
 800c2dc:	701a      	strb	r2, [r3, #0]
 800c2de:	e127      	b.n	800c530 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2e2:	61bb      	str	r3, [r7, #24]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2ec:	4b3b      	ldr	r3, [pc, #236]	@ (800c3dc <UART_SetConfig+0x364>)
 800c2ee:	0052      	lsls	r2, r2, #1
 800c2f0:	5ad3      	ldrh	r3, [r2, r3]
 800c2f2:	613b      	str	r3, [r7, #16]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	69b8      	ldr	r0, [r7, #24]
 800c2fe:	69f9      	ldr	r1, [r7, #28]
 800c300:	f7f3 ff8c 	bl	800021c <__aeabi_uldivmod>
 800c304:	0002      	movs	r2, r0
 800c306:	000b      	movs	r3, r1
 800c308:	0e11      	lsrs	r1, r2, #24
 800c30a:	021d      	lsls	r5, r3, #8
 800c30c:	430d      	orrs	r5, r1
 800c30e:	0214      	lsls	r4, r2, #8
 800c310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	085b      	lsrs	r3, r3, #1
 800c316:	60bb      	str	r3, [r7, #8]
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	68b8      	ldr	r0, [r7, #8]
 800c31e:	68f9      	ldr	r1, [r7, #12]
 800c320:	1900      	adds	r0, r0, r4
 800c322:	4169      	adcs	r1, r5
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	603b      	str	r3, [r7, #0]
 800c32a:	2300      	movs	r3, #0
 800c32c:	607b      	str	r3, [r7, #4]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f7f3 ff73 	bl	800021c <__aeabi_uldivmod>
 800c336:	0002      	movs	r2, r0
 800c338:	000b      	movs	r3, r1
 800c33a:	0013      	movs	r3, r2
 800c33c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c340:	23c0      	movs	r3, #192	@ 0xc0
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	429a      	cmp	r2, r3
 800c346:	d309      	bcc.n	800c35c <UART_SetConfig+0x2e4>
 800c348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c34a:	2380      	movs	r3, #128	@ 0x80
 800c34c:	035b      	lsls	r3, r3, #13
 800c34e:	429a      	cmp	r2, r3
 800c350:	d204      	bcs.n	800c35c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	e0e9      	b.n	800c530 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c35c:	231a      	movs	r3, #26
 800c35e:	2220      	movs	r2, #32
 800c360:	189b      	adds	r3, r3, r2
 800c362:	19db      	adds	r3, r3, r7
 800c364:	2201      	movs	r2, #1
 800c366:	701a      	strb	r2, [r3, #0]
 800c368:	e0e2      	b.n	800c530 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36c:	69da      	ldr	r2, [r3, #28]
 800c36e:	2380      	movs	r3, #128	@ 0x80
 800c370:	021b      	lsls	r3, r3, #8
 800c372:	429a      	cmp	r2, r3
 800c374:	d000      	beq.n	800c378 <UART_SetConfig+0x300>
 800c376:	e083      	b.n	800c480 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c378:	231b      	movs	r3, #27
 800c37a:	2220      	movs	r2, #32
 800c37c:	189b      	adds	r3, r3, r2
 800c37e:	19db      	adds	r3, r3, r7
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b08      	cmp	r3, #8
 800c384:	d015      	beq.n	800c3b2 <UART_SetConfig+0x33a>
 800c386:	dc2b      	bgt.n	800c3e0 <UART_SetConfig+0x368>
 800c388:	2b04      	cmp	r3, #4
 800c38a:	d00d      	beq.n	800c3a8 <UART_SetConfig+0x330>
 800c38c:	dc28      	bgt.n	800c3e0 <UART_SetConfig+0x368>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <UART_SetConfig+0x320>
 800c392:	2b02      	cmp	r3, #2
 800c394:	d005      	beq.n	800c3a2 <UART_SetConfig+0x32a>
 800c396:	e023      	b.n	800c3e0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c398:	f7fc fd3c 	bl	8008e14 <HAL_RCC_GetPCLK1Freq>
 800c39c:	0003      	movs	r3, r0
 800c39e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3a0:	e027      	b.n	800c3f2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d8 <UART_SetConfig+0x360>)
 800c3a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3a6:	e024      	b.n	800c3f2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3a8:	f7fc fca8 	bl	8008cfc <HAL_RCC_GetSysClockFreq>
 800c3ac:	0003      	movs	r3, r0
 800c3ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3b0:	e01f      	b.n	800c3f2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3b2:	2380      	movs	r3, #128	@ 0x80
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3b8:	e01b      	b.n	800c3f2 <UART_SetConfig+0x37a>
 800c3ba:	46c0      	nop			@ (mov r8, r8)
 800c3bc:	cfff69f3 	.word	0xcfff69f3
 800c3c0:	ffffcfff 	.word	0xffffcfff
 800c3c4:	40008000 	.word	0x40008000
 800c3c8:	11fff4ff 	.word	0x11fff4ff
 800c3cc:	40013800 	.word	0x40013800
 800c3d0:	40021000 	.word	0x40021000
 800c3d4:	40004400 	.word	0x40004400
 800c3d8:	00f42400 	.word	0x00f42400
 800c3dc:	0800d908 	.word	0x0800d908
      default:
        pclk = 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c3e4:	231a      	movs	r3, #26
 800c3e6:	2220      	movs	r2, #32
 800c3e8:	189b      	adds	r3, r3, r2
 800c3ea:	19db      	adds	r3, r3, r7
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	701a      	strb	r2, [r3, #0]
        break;
 800c3f0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d100      	bne.n	800c3fa <UART_SetConfig+0x382>
 800c3f8:	e09a      	b.n	800c530 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3fe:	4b58      	ldr	r3, [pc, #352]	@ (800c560 <UART_SetConfig+0x4e8>)
 800c400:	0052      	lsls	r2, r2, #1
 800c402:	5ad3      	ldrh	r3, [r2, r3]
 800c404:	0019      	movs	r1, r3
 800c406:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c408:	f7f3 fe7c 	bl	8000104 <__udivsi3>
 800c40c:	0003      	movs	r3, r0
 800c40e:	005a      	lsls	r2, r3, #1
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	085b      	lsrs	r3, r3, #1
 800c416:	18d2      	adds	r2, r2, r3
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	0019      	movs	r1, r3
 800c41e:	0010      	movs	r0, r2
 800c420:	f7f3 fe70 	bl	8000104 <__udivsi3>
 800c424:	0003      	movs	r3, r0
 800c426:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42a:	2b0f      	cmp	r3, #15
 800c42c:	d921      	bls.n	800c472 <UART_SetConfig+0x3fa>
 800c42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c430:	2380      	movs	r3, #128	@ 0x80
 800c432:	025b      	lsls	r3, r3, #9
 800c434:	429a      	cmp	r2, r3
 800c436:	d21c      	bcs.n	800c472 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	200e      	movs	r0, #14
 800c43e:	2420      	movs	r4, #32
 800c440:	1903      	adds	r3, r0, r4
 800c442:	19db      	adds	r3, r3, r7
 800c444:	210f      	movs	r1, #15
 800c446:	438a      	bics	r2, r1
 800c448:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44c:	085b      	lsrs	r3, r3, #1
 800c44e:	b29b      	uxth	r3, r3
 800c450:	2207      	movs	r2, #7
 800c452:	4013      	ands	r3, r2
 800c454:	b299      	uxth	r1, r3
 800c456:	1903      	adds	r3, r0, r4
 800c458:	19db      	adds	r3, r3, r7
 800c45a:	1902      	adds	r2, r0, r4
 800c45c:	19d2      	adds	r2, r2, r7
 800c45e:	8812      	ldrh	r2, [r2, #0]
 800c460:	430a      	orrs	r2, r1
 800c462:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	1902      	adds	r2, r0, r4
 800c46a:	19d2      	adds	r2, r2, r7
 800c46c:	8812      	ldrh	r2, [r2, #0]
 800c46e:	60da      	str	r2, [r3, #12]
 800c470:	e05e      	b.n	800c530 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c472:	231a      	movs	r3, #26
 800c474:	2220      	movs	r2, #32
 800c476:	189b      	adds	r3, r3, r2
 800c478:	19db      	adds	r3, r3, r7
 800c47a:	2201      	movs	r2, #1
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	e057      	b.n	800c530 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c480:	231b      	movs	r3, #27
 800c482:	2220      	movs	r2, #32
 800c484:	189b      	adds	r3, r3, r2
 800c486:	19db      	adds	r3, r3, r7
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b08      	cmp	r3, #8
 800c48c:	d015      	beq.n	800c4ba <UART_SetConfig+0x442>
 800c48e:	dc18      	bgt.n	800c4c2 <UART_SetConfig+0x44a>
 800c490:	2b04      	cmp	r3, #4
 800c492:	d00d      	beq.n	800c4b0 <UART_SetConfig+0x438>
 800c494:	dc15      	bgt.n	800c4c2 <UART_SetConfig+0x44a>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <UART_SetConfig+0x428>
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d005      	beq.n	800c4aa <UART_SetConfig+0x432>
 800c49e:	e010      	b.n	800c4c2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4a0:	f7fc fcb8 	bl	8008e14 <HAL_RCC_GetPCLK1Freq>
 800c4a4:	0003      	movs	r3, r0
 800c4a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4a8:	e014      	b.n	800c4d4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4aa:	4b2e      	ldr	r3, [pc, #184]	@ (800c564 <UART_SetConfig+0x4ec>)
 800c4ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4ae:	e011      	b.n	800c4d4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4b0:	f7fc fc24 	bl	8008cfc <HAL_RCC_GetSysClockFreq>
 800c4b4:	0003      	movs	r3, r0
 800c4b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4b8:	e00c      	b.n	800c4d4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4ba:	2380      	movs	r3, #128	@ 0x80
 800c4bc:	021b      	lsls	r3, r3, #8
 800c4be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4c0:	e008      	b.n	800c4d4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c4c6:	231a      	movs	r3, #26
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	189b      	adds	r3, r3, r2
 800c4cc:	19db      	adds	r3, r3, r7
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	701a      	strb	r2, [r3, #0]
        break;
 800c4d2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d02a      	beq.n	800c530 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4de:	4b20      	ldr	r3, [pc, #128]	@ (800c560 <UART_SetConfig+0x4e8>)
 800c4e0:	0052      	lsls	r2, r2, #1
 800c4e2:	5ad3      	ldrh	r3, [r2, r3]
 800c4e4:	0019      	movs	r1, r3
 800c4e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c4e8:	f7f3 fe0c 	bl	8000104 <__udivsi3>
 800c4ec:	0003      	movs	r3, r0
 800c4ee:	001a      	movs	r2, r3
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	085b      	lsrs	r3, r3, #1
 800c4f6:	18d2      	adds	r2, r2, r3
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	0019      	movs	r1, r3
 800c4fe:	0010      	movs	r0, r2
 800c500:	f7f3 fe00 	bl	8000104 <__udivsi3>
 800c504:	0003      	movs	r3, r0
 800c506:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50a:	2b0f      	cmp	r3, #15
 800c50c:	d90a      	bls.n	800c524 <UART_SetConfig+0x4ac>
 800c50e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c510:	2380      	movs	r3, #128	@ 0x80
 800c512:	025b      	lsls	r3, r3, #9
 800c514:	429a      	cmp	r2, r3
 800c516:	d205      	bcs.n	800c524 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	60da      	str	r2, [r3, #12]
 800c522:	e005      	b.n	800c530 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c524:	231a      	movs	r3, #26
 800c526:	2220      	movs	r2, #32
 800c528:	189b      	adds	r3, r3, r2
 800c52a:	19db      	adds	r3, r3, r7
 800c52c:	2201      	movs	r2, #1
 800c52e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	226a      	movs	r2, #106	@ 0x6a
 800c534:	2101      	movs	r1, #1
 800c536:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53a:	2268      	movs	r2, #104	@ 0x68
 800c53c:	2101      	movs	r1, #1
 800c53e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c542:	2200      	movs	r2, #0
 800c544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	2200      	movs	r2, #0
 800c54a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c54c:	231a      	movs	r3, #26
 800c54e:	2220      	movs	r2, #32
 800c550:	189b      	adds	r3, r3, r2
 800c552:	19db      	adds	r3, r3, r7
 800c554:	781b      	ldrb	r3, [r3, #0]
}
 800c556:	0018      	movs	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	b010      	add	sp, #64	@ 0x40
 800c55c:	bdb0      	pop	{r4, r5, r7, pc}
 800c55e:	46c0      	nop			@ (mov r8, r8)
 800c560:	0800d908 	.word	0x0800d908
 800c564:	00f42400 	.word	0x00f42400

0800c568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c574:	2208      	movs	r2, #8
 800c576:	4013      	ands	r3, r2
 800c578:	d00b      	beq.n	800c592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	4a4a      	ldr	r2, [pc, #296]	@ (800c6ac <UART_AdvFeatureConfig+0x144>)
 800c582:	4013      	ands	r3, r2
 800c584:	0019      	movs	r1, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c596:	2201      	movs	r2, #1
 800c598:	4013      	ands	r3, r2
 800c59a:	d00b      	beq.n	800c5b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	4a43      	ldr	r2, [pc, #268]	@ (800c6b0 <UART_AdvFeatureConfig+0x148>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	0019      	movs	r1, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	d00b      	beq.n	800c5d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4a3b      	ldr	r2, [pc, #236]	@ (800c6b4 <UART_AdvFeatureConfig+0x14c>)
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	0019      	movs	r1, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5da:	2204      	movs	r2, #4
 800c5dc:	4013      	ands	r3, r2
 800c5de:	d00b      	beq.n	800c5f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	4a34      	ldr	r2, [pc, #208]	@ (800c6b8 <UART_AdvFeatureConfig+0x150>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fc:	2210      	movs	r2, #16
 800c5fe:	4013      	ands	r3, r2
 800c600:	d00b      	beq.n	800c61a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	4a2c      	ldr	r2, [pc, #176]	@ (800c6bc <UART_AdvFeatureConfig+0x154>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	0019      	movs	r1, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	430a      	orrs	r2, r1
 800c618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61e:	2220      	movs	r2, #32
 800c620:	4013      	ands	r3, r2
 800c622:	d00b      	beq.n	800c63c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	4a25      	ldr	r2, [pc, #148]	@ (800c6c0 <UART_AdvFeatureConfig+0x158>)
 800c62c:	4013      	ands	r3, r2
 800c62e:	0019      	movs	r1, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	430a      	orrs	r2, r1
 800c63a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c640:	2240      	movs	r2, #64	@ 0x40
 800c642:	4013      	ands	r3, r2
 800c644:	d01d      	beq.n	800c682 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6c4 <UART_AdvFeatureConfig+0x15c>)
 800c64e:	4013      	ands	r3, r2
 800c650:	0019      	movs	r1, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c662:	2380      	movs	r3, #128	@ 0x80
 800c664:	035b      	lsls	r3, r3, #13
 800c666:	429a      	cmp	r2, r3
 800c668:	d10b      	bne.n	800c682 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	4a15      	ldr	r2, [pc, #84]	@ (800c6c8 <UART_AdvFeatureConfig+0x160>)
 800c672:	4013      	ands	r3, r2
 800c674:	0019      	movs	r1, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c686:	2280      	movs	r2, #128	@ 0x80
 800c688:	4013      	ands	r3, r2
 800c68a:	d00b      	beq.n	800c6a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4a0e      	ldr	r2, [pc, #56]	@ (800c6cc <UART_AdvFeatureConfig+0x164>)
 800c694:	4013      	ands	r3, r2
 800c696:	0019      	movs	r1, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	605a      	str	r2, [r3, #4]
  }
}
 800c6a4:	46c0      	nop			@ (mov r8, r8)
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	ffff7fff 	.word	0xffff7fff
 800c6b0:	fffdffff 	.word	0xfffdffff
 800c6b4:	fffeffff 	.word	0xfffeffff
 800c6b8:	fffbffff 	.word	0xfffbffff
 800c6bc:	ffffefff 	.word	0xffffefff
 800c6c0:	ffffdfff 	.word	0xffffdfff
 800c6c4:	ffefffff 	.word	0xffefffff
 800c6c8:	ff9fffff 	.word	0xff9fffff
 800c6cc:	fff7ffff 	.word	0xfff7ffff

0800c6d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b092      	sub	sp, #72	@ 0x48
 800c6d4:	af02      	add	r7, sp, #8
 800c6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2290      	movs	r2, #144	@ 0x90
 800c6dc:	2100      	movs	r1, #0
 800c6de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6e0:	f7f9 fa66 	bl	8005bb0 <HAL_GetTick>
 800c6e4:	0003      	movs	r3, r0
 800c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	2b08      	cmp	r3, #8
 800c6f4:	d12d      	bne.n	800c752 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f8:	2280      	movs	r2, #128	@ 0x80
 800c6fa:	0391      	lsls	r1, r2, #14
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	4a47      	ldr	r2, [pc, #284]	@ (800c81c <UART_CheckIdleState+0x14c>)
 800c700:	9200      	str	r2, [sp, #0]
 800c702:	2200      	movs	r2, #0
 800c704:	f000 f88e 	bl	800c824 <UART_WaitOnFlagUntilTimeout>
 800c708:	1e03      	subs	r3, r0, #0
 800c70a:	d022      	beq.n	800c752 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c70c:	f3ef 8310 	mrs	r3, PRIMASK
 800c710:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c714:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c716:	2301      	movs	r3, #1
 800c718:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71c:	f383 8810 	msr	PRIMASK, r3
}
 800c720:	46c0      	nop			@ (mov r8, r8)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2180      	movs	r1, #128	@ 0x80
 800c72e:	438a      	bics	r2, r1
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c738:	f383 8810 	msr	PRIMASK, r3
}
 800c73c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2288      	movs	r2, #136	@ 0x88
 800c742:	2120      	movs	r1, #32
 800c744:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2284      	movs	r2, #132	@ 0x84
 800c74a:	2100      	movs	r1, #0
 800c74c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e060      	b.n	800c814 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2204      	movs	r2, #4
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d146      	bne.n	800c7ee <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c762:	2280      	movs	r2, #128	@ 0x80
 800c764:	03d1      	lsls	r1, r2, #15
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	4a2c      	ldr	r2, [pc, #176]	@ (800c81c <UART_CheckIdleState+0x14c>)
 800c76a:	9200      	str	r2, [sp, #0]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f000 f859 	bl	800c824 <UART_WaitOnFlagUntilTimeout>
 800c772:	1e03      	subs	r3, r0, #0
 800c774:	d03b      	beq.n	800c7ee <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c776:	f3ef 8310 	mrs	r3, PRIMASK
 800c77a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c77c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c77e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c780:	2301      	movs	r3, #1
 800c782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f383 8810 	msr	PRIMASK, r3
}
 800c78a:	46c0      	nop			@ (mov r8, r8)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4922      	ldr	r1, [pc, #136]	@ (800c820 <UART_CheckIdleState+0x150>)
 800c798:	400a      	ands	r2, r1
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f383 8810 	msr	PRIMASK, r3
}
 800c7a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c7ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800c7ae:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	f383 8810 	msr	PRIMASK, r3
}
 800c7bc:	46c0      	nop			@ (mov r8, r8)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	438a      	bics	r2, r1
 800c7cc:	609a      	str	r2, [r3, #8]
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	f383 8810 	msr	PRIMASK, r3
}
 800c7d8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	228c      	movs	r2, #140	@ 0x8c
 800c7de:	2120      	movs	r1, #32
 800c7e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2284      	movs	r2, #132	@ 0x84
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e012      	b.n	800c814 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2288      	movs	r2, #136	@ 0x88
 800c7f2:	2120      	movs	r1, #32
 800c7f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	228c      	movs	r2, #140	@ 0x8c
 800c7fa:	2120      	movs	r1, #32
 800c7fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2284      	movs	r2, #132	@ 0x84
 800c80e:	2100      	movs	r1, #0
 800c810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	0018      	movs	r0, r3
 800c816:	46bd      	mov	sp, r7
 800c818:	b010      	add	sp, #64	@ 0x40
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	01ffffff 	.word	0x01ffffff
 800c820:	fffffedf 	.word	0xfffffedf

0800c824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	1dfb      	adds	r3, r7, #7
 800c832:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c834:	e051      	b.n	800c8da <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	3301      	adds	r3, #1
 800c83a:	d04e      	beq.n	800c8da <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c83c:	f7f9 f9b8 	bl	8005bb0 <HAL_GetTick>
 800c840:	0002      	movs	r2, r0
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	69ba      	ldr	r2, [r7, #24]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d302      	bcc.n	800c852 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	e051      	b.n	800c8fa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2204      	movs	r2, #4
 800c85e:	4013      	ands	r3, r2
 800c860:	d03b      	beq.n	800c8da <UART_WaitOnFlagUntilTimeout+0xb6>
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b80      	cmp	r3, #128	@ 0x80
 800c866:	d038      	beq.n	800c8da <UART_WaitOnFlagUntilTimeout+0xb6>
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b40      	cmp	r3, #64	@ 0x40
 800c86c:	d035      	beq.n	800c8da <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	69db      	ldr	r3, [r3, #28]
 800c874:	2208      	movs	r2, #8
 800c876:	4013      	ands	r3, r2
 800c878:	2b08      	cmp	r3, #8
 800c87a:	d111      	bne.n	800c8a0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2208      	movs	r2, #8
 800c882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	0018      	movs	r0, r3
 800c888:	f000 f922 	bl	800cad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2290      	movs	r2, #144	@ 0x90
 800c890:	2108      	movs	r1, #8
 800c892:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2284      	movs	r2, #132	@ 0x84
 800c898:	2100      	movs	r1, #0
 800c89a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e02c      	b.n	800c8fa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	69da      	ldr	r2, [r3, #28]
 800c8a6:	2380      	movs	r3, #128	@ 0x80
 800c8a8:	011b      	lsls	r3, r3, #4
 800c8aa:	401a      	ands	r2, r3
 800c8ac:	2380      	movs	r3, #128	@ 0x80
 800c8ae:	011b      	lsls	r3, r3, #4
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d112      	bne.n	800c8da <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2280      	movs	r2, #128	@ 0x80
 800c8ba:	0112      	lsls	r2, r2, #4
 800c8bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f000 f905 	bl	800cad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2290      	movs	r2, #144	@ 0x90
 800c8ca:	2120      	movs	r1, #32
 800c8cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2284      	movs	r2, #132	@ 0x84
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c8d6:	2303      	movs	r3, #3
 800c8d8:	e00f      	b.n	800c8fa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69db      	ldr	r3, [r3, #28]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	425a      	negs	r2, r3
 800c8ea:	4153      	adcs	r3, r2
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	001a      	movs	r2, r3
 800c8f0:	1dfb      	adds	r3, r7, #7
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d09e      	beq.n	800c836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	b004      	add	sp, #16
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b090      	sub	sp, #64	@ 0x40
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	1dbb      	adds	r3, r7, #6
 800c910:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	1dba      	adds	r2, r7, #6
 800c91c:	215c      	movs	r1, #92	@ 0x5c
 800c91e:	8812      	ldrh	r2, [r2, #0]
 800c920:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2290      	movs	r2, #144	@ 0x90
 800c926:	2100      	movs	r1, #0
 800c928:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	228c      	movs	r2, #140	@ 0x8c
 800c92e:	2122      	movs	r1, #34	@ 0x22
 800c930:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2280      	movs	r2, #128	@ 0x80
 800c936:	589b      	ldr	r3, [r3, r2]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d02d      	beq.n	800c998 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2280      	movs	r2, #128	@ 0x80
 800c940:	589b      	ldr	r3, [r3, r2]
 800c942:	4a40      	ldr	r2, [pc, #256]	@ (800ca44 <UART_Start_Receive_DMA+0x140>)
 800c944:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2280      	movs	r2, #128	@ 0x80
 800c94a:	589b      	ldr	r3, [r3, r2]
 800c94c:	4a3e      	ldr	r2, [pc, #248]	@ (800ca48 <UART_Start_Receive_DMA+0x144>)
 800c94e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2280      	movs	r2, #128	@ 0x80
 800c954:	589b      	ldr	r3, [r3, r2]
 800c956:	4a3d      	ldr	r2, [pc, #244]	@ (800ca4c <UART_Start_Receive_DMA+0x148>)
 800c958:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2280      	movs	r2, #128	@ 0x80
 800c95e:	589b      	ldr	r3, [r3, r2]
 800c960:	2200      	movs	r2, #0
 800c962:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2280      	movs	r2, #128	@ 0x80
 800c968:	5898      	ldr	r0, [r3, r2]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3324      	adds	r3, #36	@ 0x24
 800c970:	0019      	movs	r1, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c976:	001a      	movs	r2, r3
 800c978:	1dbb      	adds	r3, r7, #6
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	f7fa fce6 	bl	800734c <HAL_DMA_Start_IT>
 800c980:	1e03      	subs	r3, r0, #0
 800c982:	d009      	beq.n	800c998 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2290      	movs	r2, #144	@ 0x90
 800c988:	2110      	movs	r1, #16
 800c98a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	228c      	movs	r2, #140	@ 0x8c
 800c990:	2120      	movs	r1, #32
 800c992:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e050      	b.n	800ca3a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d019      	beq.n	800c9d4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800c9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b0:	f383 8810 	msr	PRIMASK, r3
}
 800c9b4:	46c0      	nop			@ (mov r8, r8)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2180      	movs	r1, #128	@ 0x80
 800c9c2:	0049      	lsls	r1, r1, #1
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ca:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ce:	f383 8810 	msr	PRIMASK, r3
}
 800c9d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c9da:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9de:	2301      	movs	r3, #1
 800c9e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f383 8810 	msr	PRIMASK, r3
}
 800c9e8:	46c0      	nop			@ (mov r8, r8)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689a      	ldr	r2, [r3, #8]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	430a      	orrs	r2, r1
 800c9f8:	609a      	str	r2, [r3, #8]
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	f383 8810 	msr	PRIMASK, r3
}
 800ca04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca06:	f3ef 8310 	mrs	r3, PRIMASK
 800ca0a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ca0c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca10:	2301      	movs	r3, #1
 800ca12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	f383 8810 	msr	PRIMASK, r3
}
 800ca1a:	46c0      	nop			@ (mov r8, r8)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	689a      	ldr	r2, [r3, #8]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2140      	movs	r1, #64	@ 0x40
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	609a      	str	r2, [r3, #8]
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca32:	f383 8810 	msr	PRIMASK, r3
}
 800ca36:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	0018      	movs	r0, r3
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	b010      	add	sp, #64	@ 0x40
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	46c0      	nop			@ (mov r8, r8)
 800ca44:	0800cb9d 	.word	0x0800cb9d
 800ca48:	0800ccd1 	.word	0x0800ccd1
 800ca4c:	0800cd19 	.word	0x0800cd19

0800ca50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	@ 0x28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca58:	f3ef 8310 	mrs	r3, PRIMASK
 800ca5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca5e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ca60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca62:	2301      	movs	r3, #1
 800ca64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f383 8810 	msr	PRIMASK, r3
}
 800ca6c:	46c0      	nop			@ (mov r8, r8)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	21c0      	movs	r1, #192	@ 0xc0
 800ca7a:	438a      	bics	r2, r1
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	f383 8810 	msr	PRIMASK, r3
}
 800ca88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8e:	617b      	str	r3, [r7, #20]
  return(result);
 800ca90:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ca92:	623b      	str	r3, [r7, #32]
 800ca94:	2301      	movs	r3, #1
 800ca96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	f383 8810 	msr	PRIMASK, r3
}
 800ca9e:	46c0      	nop			@ (mov r8, r8)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	689a      	ldr	r2, [r3, #8]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4908      	ldr	r1, [pc, #32]	@ (800cacc <UART_EndTxTransfer+0x7c>)
 800caac:	400a      	ands	r2, r1
 800caae:	609a      	str	r2, [r3, #8]
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	f383 8810 	msr	PRIMASK, r3
}
 800caba:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2288      	movs	r2, #136	@ 0x88
 800cac0:	2120      	movs	r1, #32
 800cac2:	5099      	str	r1, [r3, r2]
}
 800cac4:	46c0      	nop			@ (mov r8, r8)
 800cac6:	46bd      	mov	sp, r7
 800cac8:	b00a      	add	sp, #40	@ 0x28
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	ff7fffff 	.word	0xff7fffff

0800cad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08e      	sub	sp, #56	@ 0x38
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cad8:	f3ef 8310 	mrs	r3, PRIMASK
 800cadc:	617b      	str	r3, [r7, #20]
  return(result);
 800cade:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cae2:	2301      	movs	r3, #1
 800cae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	f383 8810 	msr	PRIMASK, r3
}
 800caec:	46c0      	nop			@ (mov r8, r8)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4926      	ldr	r1, [pc, #152]	@ (800cb94 <UART_EndRxTransfer+0xc4>)
 800cafa:	400a      	ands	r2, r1
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	f383 8810 	msr	PRIMASK, r3
}
 800cb08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb0e:	623b      	str	r3, [r7, #32]
  return(result);
 800cb10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb14:	2301      	movs	r3, #1
 800cb16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1a:	f383 8810 	msr	PRIMASK, r3
}
 800cb1e:	46c0      	nop			@ (mov r8, r8)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689a      	ldr	r2, [r3, #8]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	491b      	ldr	r1, [pc, #108]	@ (800cb98 <UART_EndRxTransfer+0xc8>)
 800cb2c:	400a      	ands	r2, r1
 800cb2e:	609a      	str	r2, [r3, #8]
 800cb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb36:	f383 8810 	msr	PRIMASK, r3
}
 800cb3a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d118      	bne.n	800cb76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb44:	f3ef 8310 	mrs	r3, PRIMASK
 800cb48:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb4e:	2301      	movs	r3, #1
 800cb50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f383 8810 	msr	PRIMASK, r3
}
 800cb58:	46c0      	nop			@ (mov r8, r8)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2110      	movs	r1, #16
 800cb66:	438a      	bics	r2, r1
 800cb68:	601a      	str	r2, [r3, #0]
 800cb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f383 8810 	msr	PRIMASK, r3
}
 800cb74:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	228c      	movs	r2, #140	@ 0x8c
 800cb7a:	2120      	movs	r1, #32
 800cb7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cb8a:	46c0      	nop			@ (mov r8, r8)
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	b00e      	add	sp, #56	@ 0x38
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	46c0      	nop			@ (mov r8, r8)
 800cb94:	fffffedf 	.word	0xfffffedf
 800cb98:	effffffe 	.word	0xeffffffe

0800cb9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b094      	sub	sp, #80	@ 0x50
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	d16f      	bne.n	800cc96 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800cbb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbb8:	225e      	movs	r2, #94	@ 0x5e
 800cbba:	2100      	movs	r1, #0
 800cbbc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbbe:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc2:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbc4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbc8:	2301      	movs	r3, #1
 800cbca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f383 8810 	msr	PRIMASK, r3
}
 800cbd2:	46c0      	nop			@ (mov r8, r8)
 800cbd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	493b      	ldr	r1, [pc, #236]	@ (800cccc <UART_DMAReceiveCplt+0x130>)
 800cbe0:	400a      	ands	r2, r1
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbe6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	f383 8810 	msr	PRIMASK, r3
}
 800cbee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbf0:	f3ef 8310 	mrs	r3, PRIMASK
 800cbf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc00:	f383 8810 	msr	PRIMASK, r3
}
 800cc04:	46c0      	nop			@ (mov r8, r8)
 800cc06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2101      	movs	r1, #1
 800cc12:	438a      	bics	r2, r1
 800cc14:	609a      	str	r2, [r3, #8]
 800cc16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1c:	f383 8810 	msr	PRIMASK, r3
}
 800cc20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc22:	f3ef 8310 	mrs	r3, PRIMASK
 800cc26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc32:	f383 8810 	msr	PRIMASK, r3
}
 800cc36:	46c0      	nop			@ (mov r8, r8)
 800cc38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	689a      	ldr	r2, [r3, #8]
 800cc3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2140      	movs	r1, #64	@ 0x40
 800cc44:	438a      	bics	r2, r1
 800cc46:	609a      	str	r2, [r3, #8]
 800cc48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	f383 8810 	msr	PRIMASK, r3
}
 800cc52:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc56:	228c      	movs	r2, #140	@ 0x8c
 800cc58:	2120      	movs	r1, #32
 800cc5a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d118      	bne.n	800cc96 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc64:	f3ef 8310 	mrs	r3, PRIMASK
 800cc68:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc6e:	2301      	movs	r3, #1
 800cc70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	f383 8810 	msr	PRIMASK, r3
}
 800cc78:	46c0      	nop			@ (mov r8, r8)
 800cc7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2110      	movs	r1, #16
 800cc86:	438a      	bics	r2, r1
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f383 8810 	msr	PRIMASK, r3
}
 800cc94:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc98:	2200      	movs	r2, #0
 800cc9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d109      	bne.n	800ccb8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca6:	22c0      	movs	r2, #192	@ 0xc0
 800cca8:	589b      	ldr	r3, [r3, r2]
 800ccaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccac:	215c      	movs	r1, #92	@ 0x5c
 800ccae:	5a51      	ldrh	r1, [r2, r1]
 800ccb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccb2:	0010      	movs	r0, r2
 800ccb4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccb6:	e005      	b.n	800ccc4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800ccb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccba:	22a0      	movs	r2, #160	@ 0xa0
 800ccbc:	589b      	ldr	r3, [r3, r2]
 800ccbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccc0:	0010      	movs	r0, r2
 800ccc2:	4798      	blx	r3
}
 800ccc4:	46c0      	nop			@ (mov r8, r8)
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	b014      	add	sp, #80	@ 0x50
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	fffffeff 	.word	0xfffffeff

0800ccd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccdc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2201      	movs	r2, #1
 800cce2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d10b      	bne.n	800cd04 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	22c0      	movs	r2, #192	@ 0xc0
 800ccf0:	589b      	ldr	r3, [r3, r2]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	215c      	movs	r1, #92	@ 0x5c
 800ccf6:	5a52      	ldrh	r2, [r2, r1]
 800ccf8:	0852      	lsrs	r2, r2, #1
 800ccfa:	b291      	uxth	r1, r2
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	0010      	movs	r0, r2
 800cd00:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd02:	e005      	b.n	800cd10 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	229c      	movs	r2, #156	@ 0x9c
 800cd08:	589b      	ldr	r3, [r3, r2]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	0010      	movs	r0, r2
 800cd0e:	4798      	blx	r3
}
 800cd10:	46c0      	nop			@ (mov r8, r8)
 800cd12:	46bd      	mov	sp, r7
 800cd14:	b004      	add	sp, #16
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2288      	movs	r2, #136	@ 0x88
 800cd2a:	589b      	ldr	r3, [r3, r2]
 800cd2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	228c      	movs	r2, #140	@ 0x8c
 800cd32:	589b      	ldr	r3, [r3, r2]
 800cd34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	2280      	movs	r2, #128	@ 0x80
 800cd3e:	4013      	ands	r3, r2
 800cd40:	2b80      	cmp	r3, #128	@ 0x80
 800cd42:	d10a      	bne.n	800cd5a <UART_DMAError+0x42>
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	2b21      	cmp	r3, #33	@ 0x21
 800cd48:	d107      	bne.n	800cd5a <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2256      	movs	r2, #86	@ 0x56
 800cd4e:	2100      	movs	r1, #0
 800cd50:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	0018      	movs	r0, r3
 800cd56:	f7ff fe7b 	bl	800ca50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	2240      	movs	r2, #64	@ 0x40
 800cd62:	4013      	ands	r3, r2
 800cd64:	2b40      	cmp	r3, #64	@ 0x40
 800cd66:	d10a      	bne.n	800cd7e <UART_DMAError+0x66>
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2b22      	cmp	r3, #34	@ 0x22
 800cd6c:	d107      	bne.n	800cd7e <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	225e      	movs	r2, #94	@ 0x5e
 800cd72:	2100      	movs	r1, #0
 800cd74:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	0018      	movs	r0, r3
 800cd7a:	f7ff fea9 	bl	800cad0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	2290      	movs	r2, #144	@ 0x90
 800cd82:	589b      	ldr	r3, [r3, r2]
 800cd84:	2210      	movs	r2, #16
 800cd86:	431a      	orrs	r2, r3
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2190      	movs	r1, #144	@ 0x90
 800cd8c:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	22a4      	movs	r2, #164	@ 0xa4
 800cd92:	589b      	ldr	r3, [r3, r2]
 800cd94:	697a      	ldr	r2, [r7, #20]
 800cd96:	0010      	movs	r0, r2
 800cd98:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd9a:	46c0      	nop			@ (mov r8, r8)
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	b006      	add	sp, #24
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	225e      	movs	r2, #94	@ 0x5e
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2256      	movs	r2, #86	@ 0x56
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	22a4      	movs	r2, #164	@ 0xa4
 800cdc4:	589b      	ldr	r3, [r3, r2]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	0010      	movs	r0, r2
 800cdca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdcc:	46c0      	nop			@ (mov r8, r8)
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	b004      	add	sp, #16
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cddc:	f3ef 8310 	mrs	r3, PRIMASK
 800cde0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cde2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cde4:	617b      	str	r3, [r7, #20]
 800cde6:	2301      	movs	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f383 8810 	msr	PRIMASK, r3
}
 800cdf0:	46c0      	nop			@ (mov r8, r8)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2140      	movs	r1, #64	@ 0x40
 800cdfe:	438a      	bics	r2, r1
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	f383 8810 	msr	PRIMASK, r3
}
 800ce0c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2288      	movs	r2, #136	@ 0x88
 800ce12:	2120      	movs	r1, #32
 800ce14:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2298      	movs	r2, #152	@ 0x98
 800ce20:	589b      	ldr	r3, [r3, r2]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	0010      	movs	r0, r2
 800ce26:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce28:	46c0      	nop			@ (mov r8, r8)
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	b006      	add	sp, #24
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce38:	46c0      	nop			@ (mov r8, r8)
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b002      	add	sp, #8
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce48:	46c0      	nop			@ (mov r8, r8)
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	b002      	add	sp, #8
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce58:	46c0      	nop			@ (mov r8, r8)
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	b002      	add	sp, #8
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <memset>:
 800ce60:	0003      	movs	r3, r0
 800ce62:	1882      	adds	r2, r0, r2
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d100      	bne.n	800ce6a <memset+0xa>
 800ce68:	4770      	bx	lr
 800ce6a:	7019      	strb	r1, [r3, #0]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	e7f9      	b.n	800ce64 <memset+0x4>

0800ce70 <__libc_init_array>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	2600      	movs	r6, #0
 800ce74:	4c0c      	ldr	r4, [pc, #48]	@ (800cea8 <__libc_init_array+0x38>)
 800ce76:	4d0d      	ldr	r5, [pc, #52]	@ (800ceac <__libc_init_array+0x3c>)
 800ce78:	1b64      	subs	r4, r4, r5
 800ce7a:	10a4      	asrs	r4, r4, #2
 800ce7c:	42a6      	cmp	r6, r4
 800ce7e:	d109      	bne.n	800ce94 <__libc_init_array+0x24>
 800ce80:	2600      	movs	r6, #0
 800ce82:	f000 f823 	bl	800cecc <_init>
 800ce86:	4c0a      	ldr	r4, [pc, #40]	@ (800ceb0 <__libc_init_array+0x40>)
 800ce88:	4d0a      	ldr	r5, [pc, #40]	@ (800ceb4 <__libc_init_array+0x44>)
 800ce8a:	1b64      	subs	r4, r4, r5
 800ce8c:	10a4      	asrs	r4, r4, #2
 800ce8e:	42a6      	cmp	r6, r4
 800ce90:	d105      	bne.n	800ce9e <__libc_init_array+0x2e>
 800ce92:	bd70      	pop	{r4, r5, r6, pc}
 800ce94:	00b3      	lsls	r3, r6, #2
 800ce96:	58eb      	ldr	r3, [r5, r3]
 800ce98:	4798      	blx	r3
 800ce9a:	3601      	adds	r6, #1
 800ce9c:	e7ee      	b.n	800ce7c <__libc_init_array+0xc>
 800ce9e:	00b3      	lsls	r3, r6, #2
 800cea0:	58eb      	ldr	r3, [r5, r3]
 800cea2:	4798      	blx	r3
 800cea4:	3601      	adds	r6, #1
 800cea6:	e7f2      	b.n	800ce8e <__libc_init_array+0x1e>
 800cea8:	0800d95c 	.word	0x0800d95c
 800ceac:	0800d95c 	.word	0x0800d95c
 800ceb0:	0800d960 	.word	0x0800d960
 800ceb4:	0800d95c 	.word	0x0800d95c

0800ceb8 <memcpy>:
 800ceb8:	2300      	movs	r3, #0
 800ceba:	b510      	push	{r4, lr}
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d100      	bne.n	800cec2 <memcpy+0xa>
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	5ccc      	ldrb	r4, [r1, r3]
 800cec4:	54c4      	strb	r4, [r0, r3]
 800cec6:	3301      	adds	r3, #1
 800cec8:	e7f8      	b.n	800cebc <memcpy+0x4>
	...

0800cecc <_init>:
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cece:	46c0      	nop			@ (mov r8, r8)
 800ced0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced2:	bc08      	pop	{r3}
 800ced4:	469e      	mov	lr, r3
 800ced6:	4770      	bx	lr

0800ced8 <_fini>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	46c0      	nop			@ (mov r8, r8)
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr
