
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0f8  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  0800e1b8  0800e1b8  0000f1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec38  0800ec38  000104e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ec38  0800ec38  0000fc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec40  0800ec40  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec40  0800ec40  0000fc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec44  0800ec44  0000fc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004e0  20000000  0800ec48  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008ec  200004e0  0800f128  000104e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800f128  00010dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223fc  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cd5  00000000  00000000  00032904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001387  00000000  00000000  00038f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016a1d  00000000  00000000  0003a2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008a5c  00000000  00000000  00050ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00059728  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000059e4  00000000  00000000  0005976c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004e0 	.word	0x200004e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e190 	.word	0x0800e190

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004e4 	.word	0x200004e4
 8000104:	0800e190 	.word	0x0800e190

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e05f      	b.n	800051a <Initialise_Preset_Arrays+0xce>

		if(i == 0){
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d112      	bne.n	8000488 <Initialise_Preset_Arrays+0x3c>
			factory_presets_array[i] = &factory_preset_0;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b31      	ldr	r3, [pc, #196]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4931      	ldr	r1, [pc, #196]	@ (8000530 <Initialise_Preset_Arrays+0xe4>)
 800046c:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b30      	ldr	r3, [pc, #192]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	4930      	ldr	r1, [pc, #192]	@ (8000538 <Initialise_Preset_Arrays+0xec>)
 8000478:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_0;
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	781a      	ldrb	r2, [r3, #0]
 800047e:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	492f      	ldr	r1, [pc, #188]	@ (8000540 <Initialise_Preset_Arrays+0xf4>)
 8000484:	50d1      	str	r1, [r2, r3]
 8000486:	e043      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 1){
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d112      	bne.n	80004b6 <Initialise_Preset_Arrays+0x6a>
			factory_presets_array[i] = &factory_preset_1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	492a      	ldr	r1, [pc, #168]	@ (8000544 <Initialise_Preset_Arrays+0xf8>)
 800049a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	4928      	ldr	r1, [pc, #160]	@ (8000548 <Initialise_Preset_Arrays+0xfc>)
 80004a6:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_1;
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	4926      	ldr	r1, [pc, #152]	@ (800054c <Initialise_Preset_Arrays+0x100>)
 80004b2:	50d1      	str	r1, [r2, r3]
 80004b4:	e02c      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 2){
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d112      	bne.n	80004e4 <Initialise_Preset_Arrays+0x98>
			factory_presets_array[i] = &factory_preset_2;
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	4922      	ldr	r1, [pc, #136]	@ (8000550 <Initialise_Preset_Arrays+0x104>)
 80004c8:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	4920      	ldr	r1, [pc, #128]	@ (8000554 <Initialise_Preset_Arrays+0x108>)
 80004d4:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_2;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004dc:	0092      	lsls	r2, r2, #2
 80004de:	491e      	ldr	r1, [pc, #120]	@ (8000558 <Initialise_Preset_Arrays+0x10c>)
 80004e0:	50d1      	str	r1, [r2, r3]
 80004e2:	e015      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 3){
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d111      	bne.n	8000510 <Initialise_Preset_Arrays+0xc4>
			factory_presets_array[i] = &factory_preset_3;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	4919      	ldr	r1, [pc, #100]	@ (800055c <Initialise_Preset_Arrays+0x110>)
 80004f6:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	4917      	ldr	r1, [pc, #92]	@ (8000560 <Initialise_Preset_Arrays+0x114>)
 8000502:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_3;
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 800050a:	0092      	lsls	r2, r2, #2
 800050c:	4915      	ldr	r1, [pc, #84]	@ (8000564 <Initialise_Preset_Arrays+0x118>)
 800050e:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	3201      	adds	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	d99b      	bls.n	800045a <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200004fc 	.word	0x200004fc
 8000530:	0800e1c8 	.word	0x0800e1c8
 8000534:	2000050c 	.word	0x2000050c
 8000538:	20000000 	.word	0x20000000
 800053c:	20000544 	.word	0x20000544
 8000540:	20000558 	.word	0x20000558
 8000544:	0800e1d0 	.word	0x0800e1d0
 8000548:	20000008 	.word	0x20000008
 800054c:	20000560 	.word	0x20000560
 8000550:	0800e1d8 	.word	0x0800e1d8
 8000554:	20000010 	.word	0x20000010
 8000558:	20000568 	.word	0x20000568
 800055c:	0800e1e0 	.word	0x0800e1e0
 8000560:	20000018 	.word	0x20000018
 8000564:	20000570 	.word	0x20000570

08000568 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 800056c:	4b68      	ldr	r3, [pc, #416]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b01      	cmp	r3, #1
 8000574:	d104      	bne.n	8000580 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 8000576:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b66      	ldr	r3, [pc, #408]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800057e:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000580:	4b66      	ldr	r3, [pc, #408]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b01      	cmp	r3, #1
 8000588:	d104      	bne.n	8000594 <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 800058a:	4b62      	ldr	r3, [pc, #392]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800058c:	891b      	ldrh	r3, [r3, #8]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000592:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 8000594:	4b62      	ldr	r3, [pc, #392]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 800059e:	4b5d      	ldr	r3, [pc, #372]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005a0:	7a9b      	ldrb	r3, [r3, #10]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a6:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 80005a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 80005b2:	4b58      	ldr	r3, [pc, #352]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b57      	ldr	r3, [pc, #348]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ba:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 80005bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d104      	bne.n	80005d0 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 80005c6:	4b53      	ldr	r3, [pc, #332]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b52      	ldr	r3, [pc, #328]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 80005d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d10e      	bne.n	80005f8 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005da:	4b54      	ldr	r3, [pc, #336]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	1e5a      	subs	r2, r3, #1
 80005e2:	0013      	movs	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4a51      	ldr	r2, [pc, #324]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005ec:	189b      	adds	r3, r3, r2
 80005ee:	4a4a      	ldr	r2, [pc, #296]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f8fd 	bl	80007f2 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005f8:	4b48      	ldr	r3, [pc, #288]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d10e      	bne.n	8000620 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000602:	4b4a      	ldr	r3, [pc, #296]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	0013      	movs	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	189b      	adds	r3, r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4a47      	ldr	r2, [pc, #284]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000614:	189b      	adds	r3, r3, r2
 8000616:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f8f8 	bl	8000810 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 8000620:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b03      	cmp	r3, #3
 8000628:	d10e      	bne.n	8000648 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800062a:	4b40      	ldr	r3, [pc, #256]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	0013      	movs	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	189b      	adds	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4a3d      	ldr	r2, [pc, #244]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800063c:	189b      	adds	r3, r3, r2
 800063e:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f8f3 	bl	800082e <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000648:	4b36      	ldr	r3, [pc, #216]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b03      	cmp	r3, #3
 8000650:	d10e      	bne.n	8000670 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000652:	4b36      	ldr	r3, [pc, #216]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	0013      	movs	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	189b      	adds	r3, r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4a33      	ldr	r2, [pc, #204]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000664:	189b      	adds	r3, r3, r2
 8000666:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f8ee 	bl	800084c <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b03      	cmp	r3, #3
 8000678:	d10e      	bne.n	8000698 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	0013      	movs	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	189b      	adds	r3, r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4a29      	ldr	r2, [pc, #164]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800068c:	189b      	adds	r3, r3, r2
 800068e:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8e9 	bl	800086a <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d105      	bne.n	80006ae <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <Update_Params_Based_On_Mode_Selected+0x1cc>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd15 	bl	80010d8 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d105      	bne.n	80006c4 <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fd2f 	bl	8001122 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d105      	bne.n	80006da <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <Update_Params_Based_On_Mode_Selected+0x1d4>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd3d 	bl	8001154 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d105      	bne.n	80006f0 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fd45 	bl	800117a <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d105      	bne.n	8000706 <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fd53 	bl	80011ac <Update_Phase_with_CC_Value>
	}

	return 1;
 8000706:	2301      	movs	r3, #1
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000438 	.word	0x20000438
 8000714:	20000d3c 	.word	0x20000d3c
 8000718:	20000d18 	.word	0x20000d18
 800071c:	20000430 	.word	0x20000430
 8000720:	20000434 	.word	0x20000434
 8000724:	2000043c 	.word	0x2000043c
 8000728:	20000440 	.word	0x20000440
 800072c:	20000554 	.word	0x20000554
 8000730:	2000051c 	.word	0x2000051c
 8000734:	2000057c 	.word	0x2000057c
 8000738:	2000057d 	.word	0x2000057d
 800073c:	2000057e 	.word	0x2000057e
 8000740:	2000057f 	.word	0x2000057f
 8000744:	20000580 	.word	0x20000580

08000748 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	b29a      	uxth	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	18db      	adds	r3, r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	b29a      	uxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}

0800079a <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a9b      	ldrb	r3, [r3, #10]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80007dc:	b29b      	uxth	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	711a      	strb	r2, [r3, #4]

	return 1;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]

	params_ptr->waveshape = preset_converted_ptr->waveshape;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	719a      	strb	r2, [r3, #6]

	return 1;
 8000806:	2301      	movs	r3, #1
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	885b      	ldrh	r3, [r3, #2]
 800081e:	b29a      	uxth	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	811a      	strh	r2, [r3, #8]

	return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	729a      	strb	r2, [r3, #10]

	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	88db      	ldrh	r3, [r3, #6]
 800085a:	b29a      	uxth	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	819a      	strh	r2, [r3, #12]

	return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	891b      	ldrh	r3, [r3, #8]
 8000878:	b29a      	uxth	r2, r3
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}

08000888 <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]

	uint64_t packed = 0;
 8000892:	2000      	movs	r0, #0
 8000894:	2100      	movs	r1, #0
 8000896:	61b8      	str	r0, [r7, #24]
 8000898:	61f9      	str	r1, [r7, #28]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 800089a:	210f      	movs	r1, #15
 800089c:	2008      	movs	r0, #8
 800089e:	1809      	adds	r1, r1, r0
 80008a0:	19c9      	adds	r1, r1, r7
 80008a2:	2000      	movs	r0, #0
 80008a4:	7008      	strb	r0, [r1, #0]
 80008a6:	e037      	b.n	8000918 <Pack_Preset_Into_Doubleword+0x90>

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 80008a8:	260f      	movs	r6, #15
 80008aa:	2108      	movs	r1, #8
 80008ac:	1870      	adds	r0, r6, r1
 80008ae:	19c1      	adds	r1, r0, r7
 80008b0:	7809      	ldrb	r1, [r1, #0]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	1841      	adds	r1, r0, r1
 80008b6:	7809      	ldrb	r1, [r1, #0]
 80008b8:	000c      	movs	r4, r1
 80008ba:	2100      	movs	r1, #0
 80008bc:	000d      	movs	r5, r1
 80008be:	2108      	movs	r1, #8
 80008c0:	1871      	adds	r1, r6, r1
 80008c2:	19c9      	adds	r1, r1, r7
 80008c4:	7809      	ldrb	r1, [r1, #0]
 80008c6:	00c9      	lsls	r1, r1, #3
 80008c8:	0008      	movs	r0, r1
 80008ca:	3820      	subs	r0, #32
 80008cc:	2800      	cmp	r0, #0
 80008ce:	db03      	blt.n	80008d8 <Pack_Preset_Into_Doubleword+0x50>
 80008d0:	0026      	movs	r6, r4
 80008d2:	4086      	lsls	r6, r0
 80008d4:	0033      	movs	r3, r6
 80008d6:	e008      	b.n	80008ea <Pack_Preset_Into_Doubleword+0x62>
 80008d8:	2020      	movs	r0, #32
 80008da:	1a40      	subs	r0, r0, r1
 80008dc:	0026      	movs	r6, r4
 80008de:	40c6      	lsrs	r6, r0
 80008e0:	0030      	movs	r0, r6
 80008e2:	002e      	movs	r6, r5
 80008e4:	408e      	lsls	r6, r1
 80008e6:	0033      	movs	r3, r6
 80008e8:	4303      	orrs	r3, r0
 80008ea:	0020      	movs	r0, r4
 80008ec:	4088      	lsls	r0, r1
 80008ee:	0002      	movs	r2, r0
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	4311      	orrs	r1, r2
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	69f9      	ldr	r1, [r7, #28]
 80008f8:	4319      	orrs	r1, r3
 80008fa:	6079      	str	r1, [r7, #4]
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	61b8      	str	r0, [r7, #24]
 8000902:	61f9      	str	r1, [r7, #28]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000904:	260f      	movs	r6, #15
 8000906:	2108      	movs	r1, #8
 8000908:	1870      	adds	r0, r6, r1
 800090a:	19c1      	adds	r1, r0, r7
 800090c:	7808      	ldrb	r0, [r1, #0]
 800090e:	2108      	movs	r1, #8
 8000910:	1871      	adds	r1, r6, r1
 8000912:	19c9      	adds	r1, r1, r7
 8000914:	3001      	adds	r0, #1
 8000916:	7008      	strb	r0, [r1, #0]
 8000918:	210f      	movs	r1, #15
 800091a:	2008      	movs	r0, #8
 800091c:	1809      	adds	r1, r1, r0
 800091e:	19c9      	adds	r1, r1, r7
 8000920:	7809      	ldrb	r1, [r1, #0]
 8000922:	2904      	cmp	r1, #4
 8000924:	d9c0      	bls.n	80008a8 <Pack_Preset_Into_Doubleword+0x20>
	}

	*Doubleword_ptr = packed;
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	600a      	str	r2, [r1, #0]
 800092e:	604b      	str	r3, [r1, #4]

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b009      	add	sp, #36	@ 0x24
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800093a <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800094c:	2317      	movs	r3, #23
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e020      	b.n	8000998 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000956:	2117      	movs	r1, #23
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	da06      	bge.n	8000976 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	227f      	movs	r2, #127	@ 0x7f
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e00a      	b.n	800098c <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000976:	2117      	movs	r1, #23
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	68f9      	ldr	r1, [r7, #12]
 8000986:	18cb      	adds	r3, r1, r3
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800098c:	2117      	movs	r1, #23
 800098e:	187b      	adds	r3, r7, r1
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	187b      	adds	r3, r7, r1
 8000994:	3201      	adds	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	2317      	movs	r3, #23
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d9d9      	bls.n	8000956 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b006      	add	sp, #24
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Pack_Misc_Into_Doubleword>:

uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6678      	str	r0, [r7, #100]	@ 0x64
 80009b4:	6639      	str	r1, [r7, #96]	@ 0x60
 80009b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80009b8:	65bb      	str	r3, [r7, #88]	@ 0x58

	//This function will break if presets are bigger than 5

	uint64_t packed = 0;
 80009ba:	2200      	movs	r2, #0
 80009bc:	2300      	movs	r3, #0
 80009be:	673a      	str	r2, [r7, #112]	@ 0x70
 80009c0:	677b      	str	r3, [r7, #116]	@ 0x74

	//USER PRESETS USED ARRAY
	for(uint8_t i = 0; i < num_presets; i++){
 80009c2:	2317      	movs	r3, #23
 80009c4:	2258      	movs	r2, #88	@ 0x58
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	19da      	adds	r2, r3, r7
 80009ca:	2300      	movs	r3, #0
 80009cc:	7013      	strb	r3, [r2, #0]
 80009ce:	e039      	b.n	8000a44 <Pack_Misc_Into_Doubleword+0x98>

		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 80009d0:	2117      	movs	r1, #23
 80009d2:	2358      	movs	r3, #88	@ 0x58
 80009d4:	18cb      	adds	r3, r1, r3
 80009d6:	19db      	adds	r3, r3, r7
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009e8:	2358      	movs	r3, #88	@ 0x58
 80009ea:	18cb      	adds	r3, r1, r3
 80009ec:	19db      	adds	r3, r3, r7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	00da      	lsls	r2, r3, #3
 80009f2:	0013      	movs	r3, r2
 80009f4:	3b20      	subs	r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db03      	blt.n	8000a02 <Pack_Misc_Into_Doubleword+0x56>
 80009fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80009fc:	4099      	lsls	r1, r3
 80009fe:	000d      	movs	r5, r1
 8000a00:	e009      	b.n	8000a16 <Pack_Misc_Into_Doubleword+0x6a>
 8000a02:	2320      	movs	r3, #32
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a0a:	0006      	movs	r6, r0
 8000a0c:	40de      	lsrs	r6, r3
 8000a0e:	0033      	movs	r3, r6
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000d      	movs	r5, r1
 8000a14:	431d      	orrs	r5, r3
 8000a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a24:	432b      	orrs	r3, r5
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	673a      	str	r2, [r7, #112]	@ 0x70
 8000a2e:	677b      	str	r3, [r7, #116]	@ 0x74
	for(uint8_t i = 0; i < num_presets; i++){
 8000a30:	2217      	movs	r2, #23
 8000a32:	2358      	movs	r3, #88	@ 0x58
 8000a34:	18d3      	adds	r3, r2, r3
 8000a36:	19db      	adds	r3, r3, r7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2158      	movs	r1, #88	@ 0x58
 8000a3c:	1852      	adds	r2, r2, r1
 8000a3e:	19d2      	adds	r2, r2, r7
 8000a40:	3301      	adds	r3, #1
 8000a42:	7013      	strb	r3, [r2, #0]
 8000a44:	2317      	movs	r3, #23
 8000a46:	2258      	movs	r2, #88	@ 0x58
 8000a48:	189b      	adds	r3, r3, r2
 8000a4a:	19da      	adds	r2, r3, r7
 8000a4c:	2630      	movs	r6, #48	@ 0x30
 8000a4e:	2308      	movs	r3, #8
 8000a50:	18f1      	adds	r1, r6, r3
 8000a52:	2358      	movs	r3, #88	@ 0x58
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	18cb      	adds	r3, r1, r3
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3b7      	bcc.n	80009d0 <Pack_Misc_Into_Doubleword+0x24>
	}

	//START REQUIRED BEFORE MIDI CLK
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000a60:	2516      	movs	r5, #22
 8000a62:	2358      	movs	r3, #88	@ 0x58
 8000a64:	18eb      	adds	r3, r5, r3
 8000a66:	19dc      	adds	r4, r3, r7
 8000a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f005 ff7b 	bl	8006968 <Get_Status_Bit>
 8000a72:	0003      	movs	r3, r0
 8000a74:	7023      	strb	r3, [r4, #0]

	uint8_t shift = num_presets << 3; //<< (4 * 8)
 8000a76:	2115      	movs	r1, #21
 8000a78:	2358      	movs	r3, #88	@ 0x58
 8000a7a:	18cb      	adds	r3, r1, r3
 8000a7c:	19da      	adds	r2, r3, r7
 8000a7e:	2308      	movs	r3, #8
 8000a80:	18f3      	adds	r3, r6, r3
 8000a82:	2058      	movs	r0, #88	@ 0x58
 8000a84:	4684      	mov	ip, r0
 8000a86:	44bc      	add	ip, r7
 8000a88:	4463      	add	r3, ip
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	7013      	strb	r3, [r2, #0]
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 8000a90:	2358      	movs	r3, #88	@ 0x58
 8000a92:	18eb      	adds	r3, r5, r3
 8000a94:	19db      	adds	r3, r3, r7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000aa0:	2358      	movs	r3, #88	@ 0x58
 8000aa2:	18cb      	adds	r3, r1, r3
 8000aa4:	19db      	adds	r3, r3, r7
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	3b20      	subs	r3, #32
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db03      	blt.n	8000ab8 <Pack_Misc_Into_Doubleword+0x10c>
 8000ab0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ab2:	4099      	lsls	r1, r3
 8000ab4:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ab6:	e00b      	b.n	8000ad0 <Pack_Misc_Into_Doubleword+0x124>
 8000ab8:	2320      	movs	r3, #32
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000abe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac0:	0004      	movs	r4, r0
 8000ac2:	40dc      	lsrs	r4, r3
 8000ac4:	0023      	movs	r3, r4
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	6579      	str	r1, [r7, #84]	@ 0x54
 8000aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000acc:	4319      	orrs	r1, r3
 8000ace:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ad8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000ada:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000adc:	0008      	movs	r0, r1
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	6138      	str	r0, [r7, #16]
 8000ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	617a      	str	r2, [r7, #20]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	697c      	ldr	r4, [r7, #20]
 8000aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8000aee:	677c      	str	r4, [r7, #116]	@ 0x74

	//OMNI ON/OFF (MIDI CHANNEL VOICE MODE)
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000af0:	2514      	movs	r5, #20
 8000af2:	2358      	movs	r3, #88	@ 0x58
 8000af4:	18eb      	adds	r3, r5, r3
 8000af6:	19dc      	adds	r4, r3, r7
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	00da      	lsls	r2, r3, #3
 8000afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f005 ff31 	bl	8006968 <Get_Status_Bit>
 8000b06:	0003      	movs	r3, r0
 8000b08:	7023      	strb	r3, [r4, #0]

	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 8000b0a:	2358      	movs	r3, #88	@ 0x58
 8000b0c:	18eb      	adds	r3, r5, r3
 8000b0e:	19db      	adds	r3, r3, r7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	2258      	movs	r2, #88	@ 0x58
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	19db      	adds	r3, r3, r7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3308      	adds	r3, #8
 8000b26:	001a      	movs	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	3b20      	subs	r3, #32
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db03      	blt.n	8000b38 <Pack_Misc_Into_Doubleword+0x18c>
 8000b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b32:	4099      	lsls	r1, r3
 8000b34:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b36:	e00b      	b.n	8000b50 <Pack_Misc_Into_Doubleword+0x1a4>
 8000b38:	2320      	movs	r3, #32
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b40:	0004      	movs	r4, r0
 8000b42:	40dc      	lsrs	r4, r3
 8000b44:	0023      	movs	r3, r4
 8000b46:	4091      	lsls	r1, r2
 8000b48:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000b4c:	4319      	orrs	r1, r3
 8000b4e:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b52:	4093      	lsls	r3, r2
 8000b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b58:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	4318      	orrs	r0, r3
 8000b60:	60b8      	str	r0, [r7, #8]
 8000b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b64:	431a      	orrs	r2, r3
 8000b66:	60fa      	str	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	68fc      	ldr	r4, [r7, #12]
 8000b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b6e:	677c      	str	r4, [r7, #116]	@ 0x74

	//MIDI BASIC CHANNEL
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	2315      	movs	r3, #21
 8000b7e:	2258      	movs	r2, #88	@ 0x58
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	19db      	adds	r3, r3, r7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3310      	adds	r3, #16
 8000b88:	001a      	movs	r2, r3
 8000b8a:	3a20      	subs	r2, #32
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	db03      	blt.n	8000b98 <Pack_Misc_Into_Doubleword+0x1ec>
 8000b90:	6a39      	ldr	r1, [r7, #32]
 8000b92:	4091      	lsls	r1, r2
 8000b94:	6479      	str	r1, [r7, #68]	@ 0x44
 8000b96:	e00b      	b.n	8000bb0 <Pack_Misc_Into_Doubleword+0x204>
 8000b98:	2220      	movs	r2, #32
 8000b9a:	1ad2      	subs	r2, r2, r3
 8000b9c:	6a38      	ldr	r0, [r7, #32]
 8000b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ba0:	0004      	movs	r4, r0
 8000ba2:	40d4      	lsrs	r4, r2
 8000ba4:	0022      	movs	r2, r4
 8000ba6:	4099      	lsls	r1, r3
 8000ba8:	6479      	str	r1, [r7, #68]	@ 0x44
 8000baa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000bac:	4311      	orrs	r1, r2
 8000bae:	6479      	str	r1, [r7, #68]	@ 0x44
 8000bb0:	6a3a      	ldr	r2, [r7, #32]
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8000bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bbc:	0008      	movs	r0, r1
 8000bbe:	4318      	orrs	r0, r3
 8000bc0:	6038      	str	r0, [r7, #0]
 8000bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	687c      	ldr	r4, [r7, #4]
 8000bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bce:	677c      	str	r4, [r7, #116]	@ 0x74

	*Doubleword_ptr = packed;
 8000bd0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000bd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bd6:	600a      	str	r2, [r1, #0]
 8000bd8:	604b      	str	r3, [r1, #4]

	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b01f      	add	sp, #124	@ 0x7c
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000be4 <Store_Single_Preset_In_Flash>:

uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	000a      	movs	r2, r1
 8000bee:	1cfb      	adds	r3, r7, #3
 8000bf0:	701a      	strb	r2, [r3, #0]

	//whole page has to be erased, so first store state of all presets (including one to be overwritten for simplicity)
	//as well as miscellaneous data

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 8000bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000bf4:	4a8f      	ldr	r2, [pc, #572]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f7ff fe9e 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &storage_user_preset_1);
 8000bfe:	4b8e      	ldr	r3, [pc, #568]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000c00:	4a8e      	ldr	r2, [pc, #568]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f7ff fe98 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &storage_user_preset_2);
 8000c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000c0c:	4a8d      	ldr	r2, [pc, #564]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f7ff fe92 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &storage_user_preset_3);
 8000c16:	4b8c      	ldr	r3, [pc, #560]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000c18:	4a8c      	ldr	r2, [pc, #560]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f7ff fe8c 	bl	800093a <Read_and_Interpret_Preset_From_Flash>

	uint64_t preset_packed = 0;
 8000c22:	2200      	movs	r2, #0
 8000c24:	2300      	movs	r3, #0
 8000c26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint64_t misc_packed = 0;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623a      	str	r2, [r7, #32]
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t errors = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 8000c36:	250c      	movs	r5, #12
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	4a85      	ldr	r2, [pc, #532]	@ (8000e50 <Store_Single_Preset_In_Flash+0x26c>)
 8000c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Unlock();
 8000c44:	f007 fe20 	bl	8008888 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 8000c48:	231c      	movs	r3, #28
 8000c4a:	18fa      	adds	r2, r7, r3
 8000c4c:	197b      	adds	r3, r7, r5
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f007 fecd 	bl	80089f0 <HAL_FLASHEx_Erase>

	if(preset_num == 0){
 8000c56:	1cfb      	adds	r3, r7, #3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d131      	bne.n	8000cc2 <Store_Single_Preset_In_Flash+0xde>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000c5e:	2428      	movs	r4, #40	@ 0x28
 8000c60:	193a      	adds	r2, r7, r4
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fe0e 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c70:	4970      	ldr	r1, [pc, #448]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000c72:	2001      	movs	r0, #1
 8000c74:	f007 fdba 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fe02 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c88:	496c      	ldr	r1, [pc, #432]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f007 fdae 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000c90:	193a      	adds	r2, r7, r4
 8000c92:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fdf6 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca0:	4968      	ldr	r1, [pc, #416]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f007 fda2 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	4b67      	ldr	r3, [pc, #412]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fdea 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb8:	4964      	ldr	r1, [pc, #400]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f007 fd96 	bl	80087ec <HAL_FLASH_Program>
 8000cc0:	e0a0      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 1){
 8000cc2:	1cfb      	adds	r3, r7, #3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d131      	bne.n	8000d2e <Store_Single_Preset_In_Flash+0x14a>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000cca:	2428      	movs	r4, #40	@ 0x28
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fdd8 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cdc:	4957      	ldr	r1, [pc, #348]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f007 fd84 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000ce4:	193a      	adds	r2, r7, r4
 8000ce6:	4b52      	ldr	r3, [pc, #328]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fdcc 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf4:	494f      	ldr	r1, [pc, #316]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f007 fd78 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000cfc:	193a      	adds	r2, r7, r4
 8000cfe:	4b50      	ldr	r3, [pc, #320]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fdc0 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d0c:	494d      	ldr	r1, [pc, #308]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f007 fd6c 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	4b4c      	ldr	r3, [pc, #304]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fdb4 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d24:	4949      	ldr	r1, [pc, #292]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000d26:	2001      	movs	r0, #1
 8000d28:	f007 fd60 	bl	80087ec <HAL_FLASH_Program>
 8000d2c:	e06a      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 2){
 8000d2e:	1cfb      	adds	r3, r7, #3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d131      	bne.n	8000d9a <Store_Single_Preset_In_Flash+0x1b6>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000d36:	2428      	movs	r4, #40	@ 0x28
 8000d38:	193a      	adds	r2, r7, r4
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff fda2 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d48:	493e      	ldr	r1, [pc, #248]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f007 fd4e 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000d50:	193a      	adds	r2, r7, r4
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fd96 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d60:	4934      	ldr	r1, [pc, #208]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000d62:	2001      	movs	r0, #1
 8000d64:	f007 fd42 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000d68:	193a      	adds	r2, r7, r4
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fd8a 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d78:	4930      	ldr	r1, [pc, #192]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f007 fd36 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d80:	193a      	adds	r2, r7, r4
 8000d82:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fd7e 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	492e      	ldr	r1, [pc, #184]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000d92:	2001      	movs	r0, #1
 8000d94:	f007 fd2a 	bl	80087ec <HAL_FLASH_Program>
 8000d98:	e034      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 3){
 8000d9a:	1cfb      	adds	r3, r7, #3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d130      	bne.n	8000e04 <Store_Single_Preset_In_Flash+0x220>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000da2:	2428      	movs	r4, #40	@ 0x28
 8000da4:	193a      	adds	r2, r7, r4
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fd6c 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db4:	4925      	ldr	r1, [pc, #148]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000db6:	2001      	movs	r0, #1
 8000db8:	f007 fd18 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000dbc:	193a      	adds	r2, r7, r4
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff fd60 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	4919      	ldr	r1, [pc, #100]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 fd0c 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff fd54 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de4:	4915      	ldr	r1, [pc, #84]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000de6:	2001      	movs	r0, #1
 8000de8:	f007 fd00 	bl	80087ec <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000dec:	193a      	adds	r2, r7, r4
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fd48 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfc:	4911      	ldr	r1, [pc, #68]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f007 fcf4 	bl	80087ec <HAL_FLASH_Program>
	}

	Pack_Misc_Into_Doubleword(user_presets_used_array, &statuses, &MIDI_basic_channel, &misc_packed, NUM_PRESETS);
 8000e04:	2320      	movs	r3, #32
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <Store_Single_Preset_In_Flash+0x270>)
 8000e0a:	4913      	ldr	r1, [pc, #76]	@ (8000e58 <Store_Single_Preset_In_Flash+0x274>)
 8000e0c:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <Store_Single_Preset_In_Flash+0x278>)
 8000e0e:	2404      	movs	r4, #4
 8000e10:	9400      	str	r4, [sp, #0]
 8000e12:	f7ff fdcb 	bl	80009ac <Pack_Misc_Into_Doubleword>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MISC_FLASH_MEMORY_ADDRESS, misc_packed);
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	4911      	ldr	r1, [pc, #68]	@ (8000e60 <Store_Single_Preset_In_Flash+0x27c>)
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 fce5 	bl	80087ec <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000e22:	f007 fd55 	bl	80088d0 <HAL_FLASH_Lock>

	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b00c      	add	sp, #48	@ 0x30
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	20000558 	.word	0x20000558
 8000e34:	0800f800 	.word	0x0800f800
 8000e38:	20000560 	.word	0x20000560
 8000e3c:	0800f808 	.word	0x0800f808
 8000e40:	20000568 	.word	0x20000568
 8000e44:	0800f810 	.word	0x0800f810
 8000e48:	20000570 	.word	0x20000570
 8000e4c:	0800f818 	.word	0x0800f818
 8000e50:	0800e1b8 	.word	0x0800e1b8
 8000e54:	20000582 	.word	0x20000582
 8000e58:	20000cfc 	.word	0x20000cfc
 8000e5c:	20000578 	.word	0x20000578
 8000e60:	0800f820 	.word	0x0800f820

08000e64 <Read_and_Interpret_Misc_From_Flash>:

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val,
										   volatile enum Validate *user_presets_used_array_ptr,
										   volatile uint32_t *statuses_ptr,
										   volatile enum MIDI_Channel *MIDI_basic_channel_ptr,
										   uint8_t num_presets){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 8000e76:	2316      	movs	r3, #22
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000e7e:	231f      	movs	r3, #31
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e02c      	b.n	8000ee2 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 8000e88:	211f      	movs	r1, #31
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	2016      	movs	r0, #22
 8000e96:	183b      	adds	r3, r7, r0
 8000e98:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 8000e9a:	183b      	adds	r3, r7, r0
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d106      	bne.n	8000eb2 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	18d3      	adds	r3, r2, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e011      	b.n	8000ed6 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000eb2:	2216      	movs	r2, #22
 8000eb4:	18bb      	adds	r3, r7, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2bff      	cmp	r3, #255	@ 0xff
 8000ebc:	d004      	beq.n	8000ec8 <Read_and_Interpret_Misc_From_Flash+0x64>
 8000ebe:	18bb      	adds	r3, r7, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d106      	bne.n	8000ed6 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000ec8:	231f      	movs	r3, #31
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000ed6:	211f      	movs	r1, #31
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	3201      	adds	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	18fa      	adds	r2, r7, r3
 8000ee6:	2128      	movs	r1, #40	@ 0x28
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3ca      	bcc.n	8000e88 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	2116      	movs	r1, #22
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0018      	movs	r0, r3
 8000f12:	f005 fd4f 	bl	80069b4 <Clear_Status_Bit>
 8000f16:	e00f      	b.n	8000f38 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000f18:	2216      	movs	r2, #22
 8000f1a:	18bb      	adds	r3, r7, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d004      	beq.n	8000f2e <Read_and_Interpret_Misc_From_Flash+0xca>
 8000f24:	18bb      	adds	r3, r7, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2bff      	cmp	r3, #255	@ 0xff
 8000f2c:	d104      	bne.n	8000f38 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	0018      	movs	r0, r3
 8000f34:	f005 fd2c 	bl	8006990 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000f38:	2328      	movs	r3, #40	@ 0x28
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	2116      	movs	r1, #22
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d107      	bne.n	8000f66 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	00da      	lsls	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f005 fd16 	bl	8006990 <Set_Status_Bit>
 8000f64:	e011      	b.n	8000f8a <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000f66:	2216      	movs	r2, #22
 8000f68:	18bb      	adds	r3, r7, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <Read_and_Interpret_Misc_From_Flash+0x118>
 8000f72:	18bb      	adds	r3, r7, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d106      	bne.n	8000f8a <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	00da      	lsls	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f005 fd15 	bl	80069b4 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000f8a:	2328      	movs	r3, #40	@ 0x28
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3302      	adds	r3, #2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	2116      	movs	r1, #22
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d908      	bls.n	8000fba <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000fa8:	2117      	movs	r1, #23
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	e005      	b.n	8000fc6 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000fba:	2316      	movs	r3, #22
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b008      	add	sp, #32
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000fde:	2317      	movs	r3, #23
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e03c      	b.n	8001062 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000fe8:	2117      	movs	r1, #23
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d112      	bne.n	8001020 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	18d3      	adds	r3, r2, r3
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	187b      	adds	r3, r7, r1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	0013      	movs	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	001a      	movs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	189b      	adds	r3, r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	f7ff fb95 	bl	8000748 <Convert_All_Preset_Values>
 800101e:	e01a      	b.n	8001056 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8001020:	2117      	movs	r1, #23
 8001022:	187b      	adds	r3, r7, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d111      	bne.n	8001056 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8001032:	187b      	adds	r3, r7, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	0013      	movs	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	189b      	adds	r3, r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	001a      	movs	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	189b      	adds	r3, r3, r2
 8001050:	0019      	movs	r1, r3
 8001052:	f7ff fb79 	bl	8000748 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8001056:	2117      	movs	r1, #23
 8001058:	187b      	adds	r3, r7, r1
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	3201      	adds	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	2317      	movs	r3, #23
 8001064:	18fa      	adds	r2, r7, r3
 8001066:	2320      	movs	r3, #32
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3ba      	bcc.n	8000fe8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bd80      	pop	{r7, pc}

0800107c <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8001084:	0019      	movs	r1, r3
 8001086:	0010      	movs	r0, r2
 8001088:	f7ff fc57 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8001090:	0019      	movs	r1, r3
 8001092:	0010      	movs	r0, r2
 8001094:	f7ff fc51 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 800109a:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 800109c:	0019      	movs	r1, r3
 800109e:	0010      	movs	r0, r2
 80010a0:	f7ff fc4b 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 80010a8:	0019      	movs	r1, r3
 80010aa:	0010      	movs	r0, r2
 80010ac:	f7ff fc45 	bl	800093a <Read_and_Interpret_Preset_From_Flash>

	return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	0800f800 	.word	0x0800f800
 80010c0:	20000008 	.word	0x20000008
 80010c4:	0800f808 	.word	0x0800f808
 80010c8:	20000010 	.word	0x20000010
 80010cc:	0800f810 	.word	0x0800f810
 80010d0:	20000018 	.word	0x20000018
 80010d4:	0800f818 	.word	0x0800f818

080010d8 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80010ea:	d803      	bhi.n	80010f4 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	719a      	strb	r2, [r3, #6]
 80010f2:	e011      	b.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b55      	cmp	r3, #85	@ 0x55
 80010fc:	d803      	bhi.n	8001106 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	719a      	strb	r2, [r3, #6]
 8001104:	e008      	b.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	db02      	blt.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}

08001122 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	210e      	movs	r1, #14
 8001134:	187b      	adds	r3, r7, r1
 8001136:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8001138:	187b      	adds	r3, r7, r1
 800113a:	187a      	adds	r2, r7, r1
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	00d2      	lsls	r2, r2, #3
 8001140:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	187a      	adds	r2, r7, r1
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	811a      	strh	r2, [r3, #8]

	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b004      	add	sp, #16
 8001152:	bd80      	pop	{r7, pc}

08001154 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 800115e:	210f      	movs	r1, #15
 8001160:	187b      	adds	r3, r7, r1
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	187a      	adds	r2, r7, r1
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	729a      	strb	r2, [r3, #10]

	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}

0800117a <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8001184:	210f      	movs	r1, #15
 8001186:	187b      	adds	r3, r7, r1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 800118e:	187a      	adds	r2, r7, r1
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	18db      	adds	r3, r3, r3
 8001196:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29a      	uxth	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	819a      	strh	r2, [r3, #12]

	return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011f0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 80011fe:	701a      	strb	r2, [r3, #0]

	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000438 	.word	0x20000438
 8001210:	2000057c 	.word	0x2000057c

08001214 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001224:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8001232:	705a      	strb	r2, [r3, #1]

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	20000430 	.word	0x20000430
 8001244:	2000057c 	.word	0x2000057c

08001248 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001258:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8001266:	709a      	strb	r2, [r3, #2]

	return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000434 	.word	0x20000434
 8001278:	2000057c 	.word	0x2000057c

0800127c <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 800128c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 800129a:	70da      	strb	r2, [r3, #3]

	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	2000043c 	.word	0x2000043c
 80012ac:	2000057c 	.word	0x2000057c

080012b0 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012c0:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 80012ce:	711a      	strb	r2, [r3, #4]

	return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	20000440 	.word	0x20000440
 80012e0:	2000057c 	.word	0x2000057c

080012e4 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012f0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 8001300:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 8001310:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 8001314:	2203      	movs	r2, #3
 8001316:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 8001320:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 8001324:	2203      	movs	r2, #3
 8001326:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001330:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]

	return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000438 	.word	0x20000438
 8001344:	20000430 	.word	0x20000430
 8001348:	20000434 	.word	0x20000434
 800134c:	2000043c 	.word	0x2000043c
 8001350:	20000440 	.word	0x20000440

08001354 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	240f      	movs	r4, #15
 8001362:	193b      	adds	r3, r7, r4
 8001364:	1c02      	adds	r2, r0, #0
 8001366:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8001368:	2117      	movs	r1, #23
 800136a:	187b      	adds	r3, r7, r1
 800136c:	193a      	adds	r2, r7, r4
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	3a01      	subs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8001380:	187b      	adds	r3, r7, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fa02 	bl	800079a <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800139e:	2404      	movs	r4, #4
 80013a0:	9400      	str	r4, [sp, #0]
 80013a2:	f7ff fe15 	bl	8000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b007      	add	sp, #28
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <Set_to_PC_Mode>:

uint8_t Set_to_PC_Mode(enum Preset_Selected preset){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	701a      	strb	r2, [r3, #0]

	preset_selected = preset;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <Set_to_PC_Mode+0x30>)
 80013be:	1dfa      	adds	r2, r7, #7
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	701a      	strb	r2, [r3, #0]
	Set_All_Pots_to_PC_Mode();
 80013c4:	f7ff ff8e 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
	Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <Set_to_PC_Mode+0x34>)
 80013ca:	2108      	movs	r1, #8
 80013cc:	0018      	movs	r0, r3
 80013ce:	f005 faf1 	bl	80069b4 <Clear_Status_Bit>
	Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80013d2:	f7ff f8c9 	bl	8000568 <Update_Params_Based_On_Mode_Selected>

	return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000554 	.word	0x20000554
 80013e4:	20000cfc 	.word	0x20000cfc

080013e8 <Set_LED_to_State>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t Set_LED_to_State(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	000a      	movs	r2, r1
 80013f2:	1cfb      	adds	r3, r7, #3
 80013f4:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 80013f6:	1cfb      	adds	r3, r7, #3
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d114      	bne.n	8001428 <Set_LED_to_State+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <Set_LED_to_State+0x8c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b07      	cmp	r3, #7
 8001406:	d026      	beq.n	8001456 <Set_LED_to_State+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <Set_LED_to_State+0x90>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <Set_LED_to_State+0x94>)
 8001412:	2296      	movs	r2, #150	@ 0x96
 8001414:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <Set_LED_to_State+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <Set_LED_to_State+0x90>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a16      	ldr	r2, [pc, #88]	@ (800147c <Set_LED_to_State+0x94>)
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	635a      	str	r2, [r3, #52]	@ 0x34
 8001426:	e016      	b.n	8001456 <Set_LED_to_State+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	1cfa      	adds	r2, r7, #3
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00f      	beq.n	8001456 <Set_LED_to_State+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <Set_LED_to_State+0x90>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <Set_LED_to_State+0x94>)
 8001440:	2296      	movs	r2, #150	@ 0x96
 8001442:	0052      	lsls	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <Set_LED_to_State+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <Set_LED_to_State+0x90>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <Set_LED_to_State+0x94>)
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1cfa      	adds	r2, r7, #3
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	701a      	strb	r2, [r3, #0]

	return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	20000448 	.word	0x20000448
 8001478:	20000698 	.word	0x20000698
 800147c:	20000020 	.word	0x20000020
 8001480:	20000581 	.word	0x20000581

08001484 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 800148c:	210f      	movs	r1, #15
 800148e:	187b      	adds	r3, r7, r1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8001496:	187b      	adds	r3, r7, r1
 8001498:	187a      	adds	r2, r7, r1
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	09d2      	lsrs	r2, r2, #7
 800149e:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 80014ac:	2300      	movs	r3, #0
	}
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 80014be:	210f      	movs	r1, #15
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	187a      	adds	r2, r7, r1
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	09d2      	lsrs	r2, r2, #7
 80014d0:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 80014de:	2301      	movs	r3, #1
	}
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b004      	add	sp, #16
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 80014f0:	210f      	movs	r1, #15
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	220c      	movs	r2, #12
 80014f6:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	200e      	movs	r0, #14
 8001500:	183b      	adds	r3, r7, r0
 8001502:	0912      	lsrs	r2, r2, #4
 8001504:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8001506:	183a      	adds	r2, r7, r0
 8001508:	187b      	adds	r3, r7, r1
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d101      	bne.n	8001516 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8001516:	2300      	movs	r3, #0
	}
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8001528:	210f      	movs	r1, #15
 800152a:	187b      	adds	r3, r7, r1
 800152c:	220b      	movs	r2, #11
 800152e:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	200e      	movs	r0, #14
 8001538:	183b      	adds	r3, r7, r0
 800153a:	0912      	lsrs	r2, r2, #4
 800153c:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 800153e:	183a      	adds	r2, r7, r0
 8001540:	187b      	adds	r3, r7, r1
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d101      	bne.n	800154e <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 800154e:	2300      	movs	r3, #0
	}
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bd80      	pop	{r7, pc}

08001558 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b77      	cmp	r3, #119	@ 0x77
 8001568:	d91d      	bls.n	80015a6 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b79      	cmp	r3, #121	@ 0x79
 8001572:	d101      	bne.n	8001578 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8001574:	2301      	movs	r3, #1
 8001576:	e017      	b.n	80015a8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001580:	d101      	bne.n	8001586 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8001582:	2301      	movs	r3, #1
 8001584:	e010      	b.n	80015a8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b7d      	cmp	r3, #125	@ 0x7d
 800158e:	d101      	bne.n	8001594 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8001590:	2301      	movs	r3, #1
 8001592:	e009      	b.n	80015a8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b7c      	cmp	r3, #124	@ 0x7c
 800159c:	d101      	bne.n	80015a2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 800159e:	2301      	movs	r3, #1
 80015a0:	e002      	b.n	80015a8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 80015a6:	2300      	movs	r3, #0
	}
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b77      	cmp	r3, #119	@ 0x77
 80015c0:	d901      	bls.n	80015c6 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e023      	b.n	800160e <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b14      	cmp	r3, #20
 80015ce:	d101      	bne.n	80015d4 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e01c      	b.n	800160e <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b15      	cmp	r3, #21
 80015dc:	d101      	bne.n	80015e2 <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 80015de:	2301      	movs	r3, #1
 80015e0:	e015      	b.n	800160e <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b16      	cmp	r3, #22
 80015ea:	d101      	bne.n	80015f0 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e00e      	b.n	800160e <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b17      	cmp	r3, #23
 80015f8:	d101      	bne.n	80015fe <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e007      	b.n	800160e <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b18      	cmp	r3, #24
 8001606:	d101      	bne.n	800160c <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 800160c:	2300      	movs	r3, #0
		}
	}
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}

08001616 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b79      	cmp	r3, #121	@ 0x79
 8001628:	d108      	bne.n	800163c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8001634:	2301      	movs	r3, #1
 8001636:	e031      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001638:	2300      	movs	r3, #0
 800163a:	e02f      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b7a      	cmp	r3, #122	@ 0x7a
 8001644:	d10d      	bne.n	8001662 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b7f      	cmp	r3, #127	@ 0x7f
 8001658:	d101      	bne.n	800165e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 800165a:	2301      	movs	r3, #1
 800165c:	e01e      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800165e:	2300      	movs	r3, #0
 8001660:	e01c      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b7c      	cmp	r3, #124	@ 0x7c
 800166a:	d108      	bne.n	800167e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8001676:	2301      	movs	r3, #1
 8001678:	e010      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800167a:	2300      	movs	r3, #0
 800167c:	e00e      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b7d      	cmp	r3, #125	@ 0x7d
 8001686:	d108      	bne.n	800169a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 8001692:	2301      	movs	r3, #1
 8001694:	e002      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 800169a:	2300      	movs	r3, #0
	}
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80016b4:	d101      	bne.n	80016ba <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 80016ba:	2300      	movs	r3, #0
	}
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b002      	add	sp, #8
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	000a      	movs	r2, r1
 80016ce:	1cfb      	adds	r3, r7, #3
 80016d0:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	200f      	movs	r0, #15
 80016da:	183b      	adds	r3, r7, r0
 80016dc:	210f      	movs	r1, #15
 80016de:	400a      	ands	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 80016e2:	210e      	movs	r1, #14
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	1cfa      	adds	r2, r7, #3
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 80016ec:	183a      	adds	r2, r7, r0
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d101      	bne.n	80016fc <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 80016fc:	2300      	movs	r3, #0
	}
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800170e:	230e      	movs	r3, #14
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	2200      	movs	r2, #0
 8001714:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001716:	230d      	movs	r3, #13
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e011      	b.n	8001744 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 8001720:	200d      	movs	r0, #13
 8001722:	183b      	adds	r3, r7, r0
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	0019      	movs	r1, r3
 800172e:	220e      	movs	r2, #14
 8001730:	18bb      	adds	r3, r7, r2
 8001732:	18ba      	adds	r2, r7, r2
 8001734:	8812      	ldrh	r2, [r2, #0]
 8001736:	188a      	adds	r2, r1, r2
 8001738:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800173a:	183b      	adds	r3, r7, r0
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	183b      	adds	r3, r7, r0
 8001740:	3201      	adds	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	230d      	movs	r3, #13
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b09      	cmp	r3, #9
 800174c:	d9e8      	bls.n	8001720 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800174e:	230e      	movs	r3, #14
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 800175c:	2300      	movs	r3, #0
	}
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800176e:	230f      	movs	r3, #15
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e00a      	b.n	800178e <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001778:	200f      	movs	r0, #15
 800177a:	183b      	adds	r3, r7, r0
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	2100      	movs	r1, #0
 8001782:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001784:	183b      	adds	r3, r7, r0
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	183b      	adds	r3, r7, r0
 800178a:	3201      	adds	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	230f      	movs	r3, #15
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d9ef      	bls.n	8001778 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	000a      	movs	r2, r1
 80017ac:	1cfb      	adds	r3, r7, #3
 80017ae:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	1cfa      	adds	r2, r7, #3
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d901      	bls.n	80017c2 <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80017c2:	2300      	movs	r3, #0
	}
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2bf8      	cmp	r3, #248	@ 0xf8
 80017dc:	d101      	bne.n	80017e2 <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80017de:	2301      	movs	r3, #1
 80017e0:	e023      	b.n	800182a <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2bfa      	cmp	r3, #250	@ 0xfa
 80017ea:	d101      	bne.n	80017f0 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e01c      	b.n	800182a <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2bfb      	cmp	r3, #251	@ 0xfb
 80017f8:	d101      	bne.n	80017fe <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e015      	b.n	800182a <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2bfc      	cmp	r3, #252	@ 0xfc
 8001806:	d101      	bne.n	800180c <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001808:	2301      	movs	r3, #1
 800180a:	e00e      	b.n	800182a <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2bfe      	cmp	r3, #254	@ 0xfe
 8001814:	d101      	bne.n	800181a <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001816:	2301      	movs	r3, #1
 8001818:	e007      	b.n	800182a <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2bff      	cmp	r3, #255	@ 0xff
 8001822:	d101      	bne.n	8001828 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001828:	2300      	movs	r3, #0
	}
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 8001832:	b5b0      	push	{r4, r5, r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 800183a:	250f      	movs	r5, #15
 800183c:	197c      	adds	r4, r7, r5
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	00da      	lsls	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f005 f88e 	bl	8006968 <Get_Status_Bit>
 800184c:	0003      	movs	r3, r0
 800184e:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 8001850:	197b      	adds	r3, r7, r5
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 800185c:	2300      	movs	r3, #0
	}
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bdb0      	pop	{r4, r5, r7, pc}

08001866 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	005a      	lsls	r2, r3, #1
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f005 f89b 	bl	80069b4 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f005 f894 	bl	80069b4 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

	return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <Reset_All_Controllers+0x9c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <Reset_All_Controllers+0x9c>)
 80018ae:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <Reset_All_Controllers+0xa0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <Reset_All_Controllers+0xa0>)
 80018b8:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <Reset_All_Controllers+0xa4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <Reset_All_Controllers+0xa4>)
 80018c2:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001944 <Reset_All_Controllers+0xa8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <Reset_All_Controllers+0xa8>)
 80018cc:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <Reset_All_Controllers+0xac>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <Reset_All_Controllers+0xac>)
 80018d6:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <Reset_All_Controllers+0x9c>)
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80018de:	4b17      	ldr	r3, [pc, #92]	@ (800193c <Reset_All_Controllers+0xa0>)
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <Reset_All_Controllers+0xa4>)
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <Reset_All_Controllers+0xa8>)
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <Reset_All_Controllers+0xac>)
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80018f6:	230e      	movs	r3, #14
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	223f      	movs	r2, #63	@ 0x3f
 80018fc:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e00c      	b.n	8001922 <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001908:	200f      	movs	r0, #15
 800190a:	183b      	adds	r3, r7, r0
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <Reset_All_Controllers+0xb0>)
 8001910:	210e      	movs	r1, #14
 8001912:	1879      	adds	r1, r7, r1
 8001914:	7809      	ldrb	r1, [r1, #0]
 8001916:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001918:	183b      	adds	r3, r7, r0
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	183b      	adds	r3, r7, r0
 800191e:	3201      	adds	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	230f      	movs	r3, #15
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d9ed      	bls.n	8001908 <Reset_All_Controllers+0x6c>
	}

	return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	20000438 	.word	0x20000438
 800193c:	20000430 	.word	0x20000430
 8001940:	20000434 	.word	0x20000434
 8001944:	2000043c 	.word	0x2000043c
 8001948:	20000440 	.word	0x20000440
 800194c:	2000057c 	.word	0x2000057c

08001950 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <Set_Local_Control+0x5c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <Set_Local_Control+0x5c>)
 800195c:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <Set_Local_Control+0x60>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <Set_Local_Control+0x60>)
 8001966:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <Set_Local_Control+0x64>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <Set_Local_Control+0x64>)
 8001970:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <Set_Local_Control+0x68>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <Set_Local_Control+0x68>)
 800197a:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <Set_Local_Control+0x6c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <Set_Local_Control+0x6c>)
 8001984:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <Set_Local_Control+0x5c>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <Set_Local_Control+0x60>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <Set_Local_Control+0x64>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <Set_Local_Control+0x68>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <Set_Local_Control+0x6c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]

	return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000438 	.word	0x20000438
 80019b0:	20000430 	.word	0x20000430
 80019b4:	20000434 	.word	0x20000434
 80019b8:	2000043c 	.word	0x2000043c
 80019bc:	20000440 	.word	0x20000440

080019c0 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	00da      	lsls	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f004 ffef 	bl	80069b4 <Clear_Status_Bit>

	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	00da      	lsls	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f004 ffcd 	bl	8006990 <Set_Status_Bit>

	return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001a04:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <Start_UART_Receive+0x18>)
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <Start_UART_Receive+0x1c>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f00b f868 	bl	800cae0 <HAL_UART_Receive_DMA>

	return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000594 	.word	0x20000594
 8001a1c:	20000b00 	.word	0x20000b00

08001a20 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	000a      	movs	r2, r1
 8001a2a:	1cfb      	adds	r3, r7, #3
 8001a2c:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 8001a3e:	2117      	movs	r1, #23
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 8001a4e:	1cfb      	adds	r3, r7, #3
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10d      	bne.n	8001a72 <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001a56:	4b6d      	ldr	r3, [pc, #436]	@ (8001c0c <Pot_Check+0x1ec>)
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <Pot_Check+0x1f0>)
 8001a5c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c14 <Pot_Check+0x1f4>)
 8001a60:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2264      	movs	r2, #100	@ 0x64
 8001a6a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <Pot_Check+0x1f8>)
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e04e      	b.n	8001b10 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 8001a72:	1cfb      	adds	r3, r7, #3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10f      	bne.n	8001a9a <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001a7a:	4b68      	ldr	r3, [pc, #416]	@ (8001c1c <Pot_Check+0x1fc>)
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001a7e:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <Pot_Check+0x200>)
 8001a80:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001a82:	4b68      	ldr	r3, [pc, #416]	@ (8001c24 <Pot_Check+0x204>)
 8001a84:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001a8c:	2317      	movs	r3, #23
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2264      	movs	r2, #100	@ 0x64
 8001a92:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001a94:	4b64      	ldr	r3, [pc, #400]	@ (8001c28 <Pot_Check+0x208>)
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e03a      	b.n	8001b10 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001a9a:	1cfb      	adds	r3, r7, #3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d10f      	bne.n	8001ac2 <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 8001aa2:	4b62      	ldr	r3, [pc, #392]	@ (8001c2c <Pot_Check+0x20c>)
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 8001aa6:	4b62      	ldr	r3, [pc, #392]	@ (8001c30 <Pot_Check+0x210>)
 8001aa8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001aaa:	4b62      	ldr	r3, [pc, #392]	@ (8001c34 <Pot_Check+0x214>)
 8001aac:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001ab4:	2317      	movs	r3, #23
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2264      	movs	r2, #100	@ 0x64
 8001aba:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001abc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c38 <Pot_Check+0x218>)
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e026      	b.n	8001b10 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 8001ac2:	1cfb      	adds	r3, r7, #3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d10f      	bne.n	8001aea <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001aca:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <Pot_Check+0x21c>)
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001ace:	4b5c      	ldr	r3, [pc, #368]	@ (8001c40 <Pot_Check+0x220>)
 8001ad0:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8001ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8001c44 <Pot_Check+0x224>)
 8001ad4:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3306      	adds	r3, #6
 8001ada:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001adc:	2317      	movs	r3, #23
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2264      	movs	r2, #100	@ 0x64
 8001ae2:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001ae4:	4b58      	ldr	r3, [pc, #352]	@ (8001c48 <Pot_Check+0x228>)
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	e012      	b.n	8001b10 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001aea:	1cfb      	adds	r3, r7, #3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d10e      	bne.n	8001b10 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 8001af2:	4b56      	ldr	r3, [pc, #344]	@ (8001c4c <Pot_Check+0x22c>)
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001af6:	4b56      	ldr	r3, [pc, #344]	@ (8001c50 <Pot_Check+0x230>)
 8001af8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001afa:	4b56      	ldr	r3, [pc, #344]	@ (8001c54 <Pot_Check+0x234>)
 8001afc:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3308      	adds	r3, #8
 8001b02:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001b04:	2317      	movs	r3, #23
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2264      	movs	r2, #100	@ 0x64
 8001b0a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001b0c:	4b52      	ldr	r3, [pc, #328]	@ (8001c58 <Pot_Check+0x238>)
 8001b0e:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10b      	bne.n	8001b32 <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e066      	b.n	8001c00 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10b      	bne.n	8001b54 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	881a      	ldrh	r2, [r3, #0]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e055      	b.n	8001c00 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d150      	bne.n	8001c00 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001b64:	200a      	movs	r0, #10
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	881a      	ldrh	r2, [r3, #0]
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d907      	bls.n	8001b88 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	8819      	ldrh	r1, [r3, #0]
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	1a8a      	subs	r2, r1, r2
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	e00d      	b.n	8001ba4 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	881a      	ldrh	r2, [r3, #0]
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d907      	bls.n	8001ba4 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	8819      	ldrh	r1, [r3, #0]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	1a8a      	subs	r2, r1, r2
 8001ba2:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 8001ba4:	2317      	movs	r3, #23
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	220a      	movs	r2, #10
 8001bae:	18ba      	adds	r2, r7, r2
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d924      	bls.n	8001c00 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e018      	b.n	8001c00 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d015      	beq.n	8001c00 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <Pot_Check+0x23c>)
 8001be4:	2120      	movs	r1, #32
 8001be6:	0018      	movs	r0, r3
 8001be8:	f004 fee4 	bl	80069b4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <Pot_Check+0x23c>)
 8001bee:	2140      	movs	r1, #64	@ 0x40
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f004 fedf 	bl	80069b4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001bf6:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <Pot_Check+0x23c>)
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f004 feda 	bl	80069b4 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b00a      	add	sp, #40	@ 0x28
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	2000059c 	.word	0x2000059c
 8001c10:	2000059e 	.word	0x2000059e
 8001c14:	20000595 	.word	0x20000595
 8001c18:	20000438 	.word	0x20000438
 8001c1c:	200005a0 	.word	0x200005a0
 8001c20:	200005a2 	.word	0x200005a2
 8001c24:	20000596 	.word	0x20000596
 8001c28:	20000430 	.word	0x20000430
 8001c2c:	200005a4 	.word	0x200005a4
 8001c30:	200005a6 	.word	0x200005a6
 8001c34:	20000597 	.word	0x20000597
 8001c38:	20000434 	.word	0x20000434
 8001c3c:	200005a8 	.word	0x200005a8
 8001c40:	200005aa 	.word	0x200005aa
 8001c44:	20000598 	.word	0x20000598
 8001c48:	2000043c 	.word	0x2000043c
 8001c4c:	200005ac 	.word	0x200005ac
 8001c50:	200005ae 	.word	0x200005ae
 8001c54:	20000599 	.word	0x20000599
 8001c58:	20000440 	.word	0x20000440
 8001c5c:	20000cfc 	.word	0x20000cfc

08001c60 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001c68:	250f      	movs	r5, #15
 8001c6a:	197c      	adds	r4, r7, r5
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	00da      	lsls	r2, r3, #3
 8001c70:	23a0      	movs	r3, #160	@ 0xa0
 8001c72:	05db      	lsls	r3, r3, #23
 8001c74:	0011      	movs	r1, r2
 8001c76:	0018      	movs	r0, r3
 8001c78:	f007 f8c2 	bl	8008e00 <HAL_GPIO_ReadPin>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001c80:	197b      	adds	r3, r7, r5
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001c88:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01e      	beq.n	8001cce <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e017      	b.n	8001cce <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b0e      	cmp	r3, #14
 8001ca4:	d013      	beq.n	8001cce <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <Check_Tap_Tempo_Switch_State+0x9c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d109      	bne.n	8001cc2 <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cb8:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <Check_Tap_Tempo_Switch_State+0x9c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e005      	b.n	8001cce <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <Check_Tap_Tempo_Switch_State+0x9c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <Check_Tap_Tempo_Switch_State+0x9c>)
 8001ccc:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e006      	b.n	8001cec <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b0e      	cmp	r3, #14
 8001ce4:	d102      	bne.n	8001cec <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	20000024 	.word	0x20000024
 8001cfc:	200005b0 	.word	0x200005b0

08001d00 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b093      	sub	sp, #76	@ 0x4c
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	2410      	movs	r4, #16
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	2338      	movs	r3, #56	@ 0x38
 8001d0e:	001a      	movs	r2, r3
 8001d10:	2100      	movs	r1, #0
 8001d12:	f00c fa07 	bl	800e124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d16:	003b      	movs	r3, r7
 8001d18:	0018      	movs	r0, r3
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	f00c fa00 	bl	800e124 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f007 fcdb 	bl	80096e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	0052      	lsls	r2, r2, #1
 8001d3a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d3c:	0021      	movs	r1, r4
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2202      	movs	r2, #2
 8001d54:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2208      	movs	r2, #8
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	0292      	lsls	r2, r2, #10
 8001d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	22c0      	movs	r2, #192	@ 0xc0
 8001d6e:	04d2      	lsls	r2, r2, #19
 8001d70:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2280      	movs	r2, #128	@ 0x80
 8001d76:	0592      	lsls	r2, r2, #22
 8001d78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f007 fcfd 	bl	800977c <HAL_RCC_OscConfig>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d86:	f000 fdcb 	bl	8002920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8a:	003b      	movs	r3, r7
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d90:	003b      	movs	r3, r7
 8001d92:	2202      	movs	r2, #2
 8001d94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d96:	003b      	movs	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d9c:	003b      	movs	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da2:	003b      	movs	r3, r7
 8001da4:	2102      	movs	r1, #2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f008 f802 	bl	8009db0 <HAL_RCC_ClockConfig>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001db0:	f000 fdb6 	bl	8002920 <Error_Handler>
  }
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b013      	add	sp, #76	@ 0x4c
 8001dba:	bd90      	pop	{r4, r7, pc}

08001dbc <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	001a      	movs	r2, r3
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f00c f9aa 	bl	800e124 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dd0:	4b54      	ldr	r3, [pc, #336]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001dd2:	4a55      	ldr	r2, [pc, #340]	@ (8001f28 <MX_ADC1_Init+0x16c>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001dd6:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	05d2      	lsls	r2, r2, #23
 8001ddc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dde:	4b51      	ldr	r3, [pc, #324]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001dea:	4b4e      	ldr	r3, [pc, #312]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	0392      	lsls	r2, r2, #14
 8001df0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001df2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001df4:	2208      	movs	r2, #8
 8001df6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001df8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001dfe:	4b49      	ldr	r3, [pc, #292]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e04:	4b47      	ldr	r3, [pc, #284]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001e0a:	4b46      	ldr	r3, [pc, #280]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e10:	4b44      	ldr	r3, [pc, #272]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e12:	2220      	movs	r2, #32
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e18:	4b42      	ldr	r3, [pc, #264]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e1e:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e24:	4b3f      	ldr	r3, [pc, #252]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e26:	222c      	movs	r2, #44	@ 0x2c
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001e32:	4b3c      	ldr	r3, [pc, #240]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001e38:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e40:	223c      	movs	r2, #60	@ 0x3c
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001e46:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e4c:	4b35      	ldr	r3, [pc, #212]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f004 ffde 	bl	8006e10 <HAL_ADC_Init>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001e58:	f000 fd62 	bl	8002920 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6e:	1d3a      	adds	r2, r7, #4
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f005 fb4f 	bl	8007518 <HAL_ADC_ConfigChannel>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001e7e:	f000 fd4f 	bl	8002920 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <MX_ADC1_Init+0x170>)
 8001e86:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e94:	1d3a      	adds	r2, r7, #4
 8001e96:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001e98:	0011      	movs	r1, r2
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f005 fb3c 	bl	8007518 <HAL_ADC_ConfigChannel>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001ea4:	f000 fd3c 	bl	8002920 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <MX_ADC1_Init+0x174>)
 8001eac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eba:	1d3a      	adds	r2, r7, #4
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f005 fb29 	bl	8007518 <HAL_ADC_ConfigChannel>
 8001ec6:	1e03      	subs	r3, r0, #0
 8001ec8:	d001      	beq.n	8001ece <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001eca:	f000 fd29 	bl	8002920 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <MX_ADC1_Init+0x178>)
 8001ed2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee0:	1d3a      	adds	r2, r7, #4
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001ee4:	0011      	movs	r1, r2
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f005 fb16 	bl	8007518 <HAL_ADC_ConfigChannel>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001ef0:	f000 fd16 	bl	8002920 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <MX_ADC1_Init+0x17c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2210      	movs	r2, #16
 8001efe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f06:	1d3a      	adds	r2, r7, #4
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MX_ADC1_Init+0x168>)
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f005 fb03 	bl	8007518 <HAL_ADC_ConfigChannel>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001f16:	f000 fd03 	bl	8002920 <Error_Handler>
  }
}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	200005b4 	.word	0x200005b4
 8001f28:	40012400 	.word	0x40012400
 8001f2c:	04000002 	.word	0x04000002
 8001f30:	10000010 	.word	0x10000010
 8001f34:	14000020 	.word	0x14000020
 8001f38:	18000040 	.word	0x18000040

08001f3c <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b094      	sub	sp, #80	@ 0x50
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f42:	2334      	movs	r3, #52	@ 0x34
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	0018      	movs	r0, r3
 8001f48:	231c      	movs	r3, #28
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f00c f8e9 	bl	800e124 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f52:	003b      	movs	r3, r7
 8001f54:	0018      	movs	r0, r3
 8001f56:	2334      	movs	r3, #52	@ 0x34
 8001f58:	001a      	movs	r2, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f00c f8e2 	bl	800e124 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f62:	4a3b      	ldr	r2, [pc, #236]	@ (8002050 <MX_TIM16_Init+0x114>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f66:	4b39      	ldr	r3, [pc, #228]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b37      	ldr	r3, [pc, #220]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8001f72:	4b36      	ldr	r3, [pc, #216]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f74:	22ff      	movs	r2, #255	@ 0xff
 8001f76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f78:	4b34      	ldr	r3, [pc, #208]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f7a:	2280      	movs	r2, #128	@ 0x80
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f008 fa32 	bl	800a3f8 <HAL_TIM_Base_Init>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001f98:	f000 fcc2 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <MX_TIM16_Init+0x110>)
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f008 fb30 	bl	800a604 <HAL_TIM_OC_Init>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001fa8:	f000 fcba 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fac:	2134      	movs	r1, #52	@ 0x34
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	22ff      	movs	r2, #255	@ 0xff
 8001fb8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc6:	187b      	adds	r3, r7, r1
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd8:	1879      	adds	r1, r7, r1
 8001fda:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <MX_TIM16_Init+0x110>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f009 f984 	bl	800b2ec <HAL_TIM_OC_ConfigChannel>
 8001fe4:	1e03      	subs	r3, r0, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001fe8:	f000 fc9a 	bl	8002920 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <MX_TIM16_Init+0x110>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <MX_TIM16_Init+0x110>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2108      	movs	r1, #8
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ffc:	003b      	movs	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002002:	003b      	movs	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002008:	003b      	movs	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800200e:	003b      	movs	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002014:	003b      	movs	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800201a:	003b      	movs	r3, r7
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	0192      	lsls	r2, r2, #6
 8002020:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002022:	003b      	movs	r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002028:	003b      	movs	r3, r7
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800202e:	003a      	movs	r2, r7
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <MX_TIM16_Init+0x110>)
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f00a fb7f 	bl	800c738 <HAL_TIMEx_ConfigBreakDeadTime>
 800203a:	1e03      	subs	r3, r0, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 800203e:	f000 fc6f 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b014      	add	sp, #80	@ 0x50
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	20000810 	.word	0x20000810
 8002050:	40014400 	.word	0x40014400

08002054 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	@ 0x30
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	2320      	movs	r3, #32
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	0018      	movs	r0, r3
 8002060:	2310      	movs	r3, #16
 8002062:	001a      	movs	r2, r3
 8002064:	2100      	movs	r1, #0
 8002066:	f00c f85d 	bl	800e124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	2314      	movs	r3, #20
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	0018      	movs	r0, r3
 8002070:	230c      	movs	r3, #12
 8002072:	001a      	movs	r2, r3
 8002074:	2100      	movs	r1, #0
 8002076:	f00c f855 	bl	800e124 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	0018      	movs	r0, r3
 800207e:	2310      	movs	r3, #16
 8002080:	001a      	movs	r2, r3
 8002082:	2100      	movs	r1, #0
 8002084:	f00c f84e 	bl	800e124 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <MX_TIM2_Init+0xf0>)
 800208a:	2280      	movs	r2, #128	@ 0x80
 800208c:	05d2      	lsls	r2, r2, #23
 800208e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8002090:	4b2c      	ldr	r3, [pc, #176]	@ (8002144 <MX_TIM2_Init+0xf0>)
 8002092:	223f      	movs	r2, #63	@ 0x3f
 8002094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <MX_TIM2_Init+0xf0>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 800209c:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <MX_TIM2_Init+0xf0>)
 800209e:	4a2a      	ldr	r2, [pc, #168]	@ (8002148 <MX_TIM2_Init+0xf4>)
 80020a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80020a2:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <MX_TIM2_Init+0xf0>)
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020aa:	4b26      	ldr	r3, [pc, #152]	@ (8002144 <MX_TIM2_Init+0xf0>)
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b0:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <MX_TIM2_Init+0xf0>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f008 f9a0 	bl	800a3f8 <HAL_TIM_Base_Init>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80020bc:	f000 fc30 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	2120      	movs	r1, #32
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	0152      	lsls	r2, r2, #5
 80020c8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ca:	187a      	adds	r2, r7, r1
 80020cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <MX_TIM2_Init+0xf0>)
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f009 fb0f 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80020da:	f000 fc21 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020de:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <MX_TIM2_Init+0xf0>)
 80020e0:	0018      	movs	r0, r3
 80020e2:	f008 fe3b 	bl	800ad5c <HAL_TIM_IC_Init>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020ea:	f000 fc19 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2114      	movs	r1, #20
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020fc:	187a      	adds	r2, r7, r1
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <MX_TIM2_Init+0xf0>)
 8002100:	0011      	movs	r1, r2
 8002102:	0018      	movs	r0, r3
 8002104:	f00a fab0 	bl	800c668 <HAL_TIMEx_MasterConfigSynchronization>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800210c:	f000 fc08 	bl	8002920 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2201      	movs	r2, #1
 800211a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	220f      	movs	r2, #15
 8002126:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002128:	1d39      	adds	r1, r7, #4
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_TIM2_Init+0xf0>)
 800212c:	2200      	movs	r2, #0
 800212e:	0018      	movs	r0, r3
 8002130:	f009 f93c 	bl	800b3ac <HAL_TIM_IC_ConfigChannel>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002138:	f000 fbf2 	bl	8002920 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800213c:	46c0      	nop			@ (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b00c      	add	sp, #48	@ 0x30
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200008cc 	.word	0x200008cc
 8002148:	001fffff 	.word	0x001fffff

0800214c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08e      	sub	sp, #56	@ 0x38
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	2328      	movs	r3, #40	@ 0x28
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	0018      	movs	r0, r3
 8002158:	2310      	movs	r3, #16
 800215a:	001a      	movs	r2, r3
 800215c:	2100      	movs	r1, #0
 800215e:	f00b ffe1 	bl	800e124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	231c      	movs	r3, #28
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	0018      	movs	r0, r3
 8002168:	230c      	movs	r3, #12
 800216a:	001a      	movs	r2, r3
 800216c:	2100      	movs	r1, #0
 800216e:	f00b ffd9 	bl	800e124 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002172:	003b      	movs	r3, r7
 8002174:	0018      	movs	r0, r3
 8002176:	231c      	movs	r3, #28
 8002178:	001a      	movs	r2, r3
 800217a:	2100      	movs	r1, #0
 800217c:	f00b ffd2 	bl	800e124 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002180:	4b32      	ldr	r3, [pc, #200]	@ (800224c <MX_TIM3_Init+0x100>)
 8002182:	4a33      	ldr	r2, [pc, #204]	@ (8002250 <MX_TIM3_Init+0x104>)
 8002184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8002186:	4b31      	ldr	r3, [pc, #196]	@ (800224c <MX_TIM3_Init+0x100>)
 8002188:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <MX_TIM3_Init+0x108>)
 800218a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b2f      	ldr	r3, [pc, #188]	@ (800224c <MX_TIM3_Init+0x100>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8002192:	4b2e      	ldr	r3, [pc, #184]	@ (800224c <MX_TIM3_Init+0x100>)
 8002194:	4a30      	ldr	r2, [pc, #192]	@ (8002258 <MX_TIM3_Init+0x10c>)
 8002196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002198:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <MX_TIM3_Init+0x100>)
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a0:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <MX_TIM3_Init+0x100>)
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <MX_TIM3_Init+0x100>)
 80021a8:	0018      	movs	r0, r3
 80021aa:	f008 f925 	bl	800a3f8 <HAL_TIM_Base_Init>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80021b2:	f000 fbb5 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b6:	2128      	movs	r1, #40	@ 0x28
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	0152      	lsls	r2, r2, #5
 80021be:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021c0:	187a      	adds	r2, r7, r1
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <MX_TIM3_Init+0x100>)
 80021c4:	0011      	movs	r1, r2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f009 fa94 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80021d0:	f000 fba6 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <MX_TIM3_Init+0x100>)
 80021d6:	0018      	movs	r0, r3
 80021d8:	f008 fa14 	bl	800a604 <HAL_TIM_OC_Init>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021e0:	f000 fb9e 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	211c      	movs	r1, #28
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f2:	187a      	adds	r2, r7, r1
 80021f4:	4b15      	ldr	r3, [pc, #84]	@ (800224c <MX_TIM3_Init+0x100>)
 80021f6:	0011      	movs	r1, r2
 80021f8:	0018      	movs	r0, r3
 80021fa:	f00a fa35 	bl	800c668 <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002202:	f000 fb8d 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002206:	003b      	movs	r3, r7
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800220c:	003b      	movs	r3, r7
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002212:	003b      	movs	r3, r7
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002218:	003b      	movs	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221e:	0039      	movs	r1, r7
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <MX_TIM3_Init+0x100>)
 8002222:	2200      	movs	r2, #0
 8002224:	0018      	movs	r0, r3
 8002226:	f009 f861 	bl	800b2ec <HAL_TIM_OC_ConfigChannel>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800222e:	f000 fb77 	bl	8002920 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_TIM3_Init+0x100>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <MX_TIM3_Init+0x100>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2108      	movs	r1, #8
 800223e:	438a      	bics	r2, r1
 8002240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b00e      	add	sp, #56	@ 0x38
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	20000988 	.word	0x20000988
 8002250:	40000400 	.word	0x40000400
 8002254:	00007fff 	.word	0x00007fff
 8002258:	00000fff 	.word	0x00000fff

0800225c <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b09c      	sub	sp, #112	@ 0x70
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	2360      	movs	r3, #96	@ 0x60
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	0018      	movs	r0, r3
 8002268:	2310      	movs	r3, #16
 800226a:	001a      	movs	r2, r3
 800226c:	2100      	movs	r1, #0
 800226e:	f00b ff59 	bl	800e124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002272:	2354      	movs	r3, #84	@ 0x54
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	0018      	movs	r0, r3
 8002278:	230c      	movs	r3, #12
 800227a:	001a      	movs	r2, r3
 800227c:	2100      	movs	r1, #0
 800227e:	f00b ff51 	bl	800e124 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002282:	2338      	movs	r3, #56	@ 0x38
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	0018      	movs	r0, r3
 8002288:	231c      	movs	r3, #28
 800228a:	001a      	movs	r2, r3
 800228c:	2100      	movs	r1, #0
 800228e:	f00b ff49 	bl	800e124 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	0018      	movs	r0, r3
 8002296:	2334      	movs	r3, #52	@ 0x34
 8002298:	001a      	movs	r2, r3
 800229a:	2100      	movs	r1, #0
 800229c:	f00b ff42 	bl	800e124 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022a2:	4a60      	ldr	r2, [pc, #384]	@ (8002424 <MX_TIM1_Init+0x1c8>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 80022b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002428 <MX_TIM1_Init+0x1cc>)
 80022b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022ba:	2280      	movs	r2, #128	@ 0x80
 80022bc:	0052      	lsls	r2, r2, #1
 80022be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c0:	4b57      	ldr	r3, [pc, #348]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022c6:	4b56      	ldr	r3, [pc, #344]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022cc:	4b54      	ldr	r3, [pc, #336]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022ce:	0018      	movs	r0, r3
 80022d0:	f008 f892 	bl	800a3f8 <HAL_TIM_Base_Init>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80022d8:	f000 fb22 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	2160      	movs	r1, #96	@ 0x60
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	0152      	lsls	r2, r2, #5
 80022e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e6:	187a      	adds	r2, r7, r1
 80022e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f009 fa01 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022f6:	f000 fb13 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022fa:	4b49      	ldr	r3, [pc, #292]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80022fc:	0018      	movs	r0, r3
 80022fe:	f008 fbe1 	bl	800aac4 <HAL_TIM_PWM_Init>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8002306:	f000 fb0b 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2154      	movs	r1, #84	@ 0x54
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002312:	187b      	adds	r3, r7, r1
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231e:	187a      	adds	r2, r7, r1
 8002320:	4b3f      	ldr	r3, [pc, #252]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f00a f99f 	bl	800c668 <HAL_TIMEx_MasterConfigSynchronization>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800232e:	f000 faf7 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002332:	2138      	movs	r1, #56	@ 0x38
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2260      	movs	r2, #96	@ 0x60
 8002338:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800233a:	187b      	adds	r3, r7, r1
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002340:	187b      	adds	r3, r7, r1
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002346:	187b      	adds	r3, r7, r1
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234c:	187b      	adds	r3, r7, r1
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800235e:	1879      	adds	r1, r7, r1
 8002360:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 8002362:	2204      	movs	r2, #4
 8002364:	0018      	movs	r0, r3
 8002366:	f009 f8c5 	bl	800b4f4 <HAL_TIM_PWM_ConfigChannel>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800236e:	f000 fad7 	bl	8002920 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8002372:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	492b      	ldr	r1, [pc, #172]	@ (800242c <MX_TIM1_Init+0x1d0>)
 800237e:	400a      	ands	r2, r1
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002382:	2338      	movs	r3, #56	@ 0x38
 8002384:	18f9      	adds	r1, r7, r3
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 8002388:	220c      	movs	r2, #12
 800238a:	0018      	movs	r0, r3
 800238c:	f009 f8b2 	bl	800b4f4 <HAL_TIM_PWM_ConfigChannel>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002394:	f000 fac4 	bl	8002920 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4922      	ldr	r1, [pc, #136]	@ (800242c <MX_TIM1_Init+0x1d0>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2280      	movs	r2, #128	@ 0x80
 80023ca:	0192      	lsls	r2, r2, #6
 80023cc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2280      	movs	r2, #128	@ 0x80
 80023e4:	0492      	lsls	r2, r2, #18
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023fa:	1d3a      	adds	r2, r7, #4
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 80023fe:	0011      	movs	r1, r2
 8002400:	0018      	movs	r0, r3
 8002402:	f00a f999 	bl	800c738 <HAL_TIMEx_ConfigBreakDeadTime>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 800240a:	f000 fa89 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <MX_TIM1_Init+0x1c4>)
 8002410:	0018      	movs	r0, r3
 8002412:	f003 fc55 	bl	8005cc0 <HAL_TIM_MspPostInit>

}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b01c      	add	sp, #112	@ 0x70
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	20000a44 	.word	0x20000a44
 8002424:	40012c00 	.word	0x40012c00
 8002428:	000003ff 	.word	0x000003ff
 800242c:	fffff7ff 	.word	0xfffff7ff

08002430 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b094      	sub	sp, #80	@ 0x50
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002436:	2334      	movs	r3, #52	@ 0x34
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	0018      	movs	r0, r3
 800243c:	231c      	movs	r3, #28
 800243e:	001a      	movs	r2, r3
 8002440:	2100      	movs	r1, #0
 8002442:	f00b fe6f 	bl	800e124 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002446:	003b      	movs	r3, r7
 8002448:	0018      	movs	r0, r3
 800244a:	2334      	movs	r3, #52	@ 0x34
 800244c:	001a      	movs	r2, r3
 800244e:	2100      	movs	r1, #0
 8002450:	f00b fe68 	bl	800e124 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002454:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002456:	4a3b      	ldr	r2, [pc, #236]	@ (8002544 <MX_TIM17_Init+0x114>)
 8002458:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 800245a:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <MX_TIM17_Init+0x110>)
 800245c:	4a3a      	ldr	r2, [pc, #232]	@ (8002548 <MX_TIM17_Init+0x118>)
 800245e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b37      	ldr	r3, [pc, #220]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8002466:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002468:	4a38      	ldr	r2, [pc, #224]	@ (800254c <MX_TIM17_Init+0x11c>)
 800246a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800246c:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <MX_TIM17_Init+0x110>)
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002474:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800247a:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <MX_TIM17_Init+0x110>)
 800247c:	2280      	movs	r2, #128	@ 0x80
 800247e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002480:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002482:	0018      	movs	r0, r3
 8002484:	f007 ffb8 	bl	800a3f8 <HAL_TIM_Base_Init>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 800248c:	f000 fa48 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002492:	0018      	movs	r0, r3
 8002494:	f008 f8b6 	bl	800a604 <HAL_TIM_OC_Init>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 800249c:	f000 fa40 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024a0:	2134      	movs	r1, #52	@ 0x34
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	4a29      	ldr	r2, [pc, #164]	@ (8002550 <MX_TIM17_Init+0x120>)
 80024ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024cc:	1879      	adds	r1, r7, r1
 80024ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <MX_TIM17_Init+0x110>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	0018      	movs	r0, r3
 80024d4:	f008 ff0a 	bl	800b2ec <HAL_TIM_OC_ConfigChannel>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80024dc:	f000 fa20 	bl	8002920 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80024e0:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <MX_TIM17_Init+0x110>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <MX_TIM17_Init+0x110>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2108      	movs	r1, #8
 80024ec:	430a      	orrs	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024f0:	003b      	movs	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024f6:	003b      	movs	r3, r7
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024fc:	003b      	movs	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002502:	003b      	movs	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002508:	003b      	movs	r3, r7
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800250e:	003b      	movs	r3, r7
 8002510:	2280      	movs	r2, #128	@ 0x80
 8002512:	0192      	lsls	r2, r2, #6
 8002514:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002516:	003b      	movs	r3, r7
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800251c:	003b      	movs	r3, r7
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002522:	003a      	movs	r2, r7
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <MX_TIM17_Init+0x110>)
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f00a f905 	bl	800c738 <HAL_TIMEx_ConfigBreakDeadTime>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8002532:	f000 f9f5 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b014      	add	sp, #80	@ 0x50
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	20000754 	.word	0x20000754
 8002544:	40014800 	.word	0x40014800
 8002548:	00007fff 	.word	0x00007fff
 800254c:	000003ff 	.word	0x000003ff
 8002550:	000001ff 	.word	0x000001ff

08002554 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 800255a:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <MX_LPTIM1_Init+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 8002566:	22e0      	movs	r2, #224	@ 0xe0
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800256c:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 800256e:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <MX_LPTIM1_Init+0x6c>)
 8002570:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002572:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	03d2      	lsls	r2, r2, #15
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002580:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 8002588:	2200      	movs	r2, #0
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <MX_LPTIM1_Init+0x64>)
 8002594:	0018      	movs	r0, r3
 8002596:	f006 fc97 	bl	8008ec8 <HAL_LPTIM_Init>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d001      	beq.n	80025a2 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800259e:	f000 f9bf 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 80025a2:	2202      	movs	r2, #2
 80025a4:	2102      	movs	r1, #2
 80025a6:	2011      	movs	r0, #17
 80025a8:	f005 fdc0 	bl	800812c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80025ac:	2011      	movs	r0, #17
 80025ae:	f005 fdd2 	bl	8008156 <HAL_NVIC_EnableIRQ>
}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000c84 	.word	0x20000c84
 80025bc:	40007c00 	.word	0x40007c00
 80025c0:	0000ffff 	.word	0x0000ffff

080025c4 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	0018      	movs	r0, r3
 80025ce:	231c      	movs	r3, #28
 80025d0:	001a      	movs	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f00b fda6 	bl	800e124 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <MX_TIM14_Init+0x94>)
 80025da:	4a20      	ldr	r2, [pc, #128]	@ (800265c <MX_TIM14_Init+0x98>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <MX_TIM14_Init+0x94>)
 80025e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002660 <MX_TIM14_Init+0x9c>)
 80025e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <MX_TIM14_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <MX_TIM14_Init+0xa0>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <MX_TIM14_Init+0x94>)
 80025f0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <MX_TIM14_Init+0x94>)
 80025f4:	2280      	movs	r2, #128	@ 0x80
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <MX_TIM14_Init+0x94>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <MX_TIM14_Init+0x94>)
 8002602:	0018      	movs	r0, r3
 8002604:	f007 fef8 	bl	800a3f8 <HAL_TIM_Base_Init>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 800260c:	f000 f988 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <MX_TIM14_Init+0x94>)
 8002612:	0018      	movs	r0, r3
 8002614:	f007 fff6 	bl	800a604 <HAL_TIM_OC_Init>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 800261c:	f000 f980 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <MX_TIM14_Init+0xa0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263c:	1d39      	adds	r1, r7, #4
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <MX_TIM14_Init+0x94>)
 8002640:	2200      	movs	r2, #0
 8002642:	0018      	movs	r0, r3
 8002644:	f008 fe52 	bl	800b2ec <HAL_TIM_OC_ConfigChannel>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 800264c:	f000 f968 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b008      	add	sp, #32
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000698 	.word	0x20000698
 800265c:	40002000 	.word	0x40002000
 8002660:	00007fff 	.word	0x00007fff
 8002664:	20000020 	.word	0x20000020

08002668 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800266c:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 800266e:	4a16      	ldr	r2, [pc, #88]	@ (80026c8 <MX_USART2_UART_Init+0x60>)
 8002670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 8002674:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <MX_USART2_UART_Init+0x64>)
 8002676:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800268a:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 800268c:	220c      	movs	r2, #12
 800268e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 8002698:	2200      	movs	r2, #0
 800269a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269c:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <MX_USART2_UART_Init+0x5c>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f00a f8fd 	bl	800c8b0 <HAL_UART_Init>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d001      	beq.n	80026be <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80026ba:	f000 f931 	bl	8002920 <Error_Handler>
  }
}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000b00 	.word	0x20000b00
 80026c8:	40004400 	.word	0x40004400
 80026cc:	00007a12 	.word	0x00007a12

080026d0 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <MX_DMA_Init+0x48>)
 80026d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026da:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <MX_DMA_Init+0x48>)
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <MX_DMA_Init+0x48>)
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2009      	movs	r0, #9
 80026f4:	f005 fd1a 	bl	800812c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026f8:	2009      	movs	r0, #9
 80026fa:	f005 fd2c 	bl	8008156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 80026fe:	2202      	movs	r2, #2
 8002700:	2102      	movs	r1, #2
 8002702:	200a      	movs	r0, #10
 8002704:	f005 fd12 	bl	800812c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002708:	200a      	movs	r0, #10
 800270a:	f005 fd24 	bl	8008156 <HAL_NVIC_EnableIRQ>

}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	40021000 	.word	0x40021000

0800271c <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b08b      	sub	sp, #44	@ 0x2c
 8002720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002722:	2414      	movs	r4, #20
 8002724:	193b      	adds	r3, r7, r4
 8002726:	0018      	movs	r0, r3
 8002728:	2314      	movs	r3, #20
 800272a:	001a      	movs	r2, r3
 800272c:	2100      	movs	r1, #0
 800272e:	f00b fcf9 	bl	800e124 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	4b77      	ldr	r3, [pc, #476]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	4b76      	ldr	r3, [pc, #472]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002738:	2104      	movs	r1, #4
 800273a:	430a      	orrs	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34
 800273e:	4b74      	ldr	r3, [pc, #464]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	2204      	movs	r2, #4
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800274a:	4b71      	ldr	r3, [pc, #452]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 800274c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274e:	4b70      	ldr	r3, [pc, #448]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002750:	2120      	movs	r1, #32
 8002752:	430a      	orrs	r2, r1
 8002754:	635a      	str	r2, [r3, #52]	@ 0x34
 8002756:	4b6e      	ldr	r3, [pc, #440]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4b6b      	ldr	r3, [pc, #428]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002766:	4b6a      	ldr	r3, [pc, #424]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002768:	2101      	movs	r1, #1
 800276a:	430a      	orrs	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	@ 0x34
 800276e:	4b68      	ldr	r3, [pc, #416]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002772:	2201      	movs	r2, #1
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b65      	ldr	r3, [pc, #404]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 800277c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800277e:	4b64      	ldr	r3, [pc, #400]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002780:	2102      	movs	r1, #2
 8002782:	430a      	orrs	r2, r1
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34
 8002786:	4b62      	ldr	r3, [pc, #392]	@ (8002910 <MX_GPIO_Init+0x1f4>)
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002792:	4b60      	ldr	r3, [pc, #384]	@ (8002914 <MX_GPIO_Init+0x1f8>)
 8002794:	2200      	movs	r2, #0
 8002796:	2140      	movs	r1, #64	@ 0x40
 8002798:	0018      	movs	r0, r3
 800279a:	f006 fb4e 	bl	8008e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	2204      	movs	r2, #4
 80027a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	2288      	movs	r2, #136	@ 0x88
 80027a8:	0352      	lsls	r2, r2, #13
 80027aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	4a58      	ldr	r2, [pc, #352]	@ (8002918 <MX_GPIO_Init+0x1fc>)
 80027b6:	0019      	movs	r1, r3
 80027b8:	0010      	movs	r0, r2
 80027ba:	f006 f9bd 	bl	8008b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80027be:	0021      	movs	r1, r4
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	2280      	movs	r2, #128	@ 0x80
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	000c      	movs	r4, r1
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2201      	movs	r2, #1
 80027ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80027dc:	193a      	adds	r2, r7, r4
 80027de:	23a0      	movs	r3, #160	@ 0xa0
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f006 f9a7 	bl	8008b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2240      	movs	r2, #64	@ 0x40
 80027ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	193b      	adds	r3, r7, r4
 80027f2:	2201      	movs	r2, #1
 80027f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	193b      	adds	r3, r7, r4
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002802:	193b      	adds	r3, r7, r4
 8002804:	4a43      	ldr	r2, [pc, #268]	@ (8002914 <MX_GPIO_Init+0x1f8>)
 8002806:	0019      	movs	r1, r3
 8002808:	0010      	movs	r0, r2
 800280a:	f006 f995 	bl	8008b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800280e:	193b      	adds	r3, r7, r4
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002816:	193b      	adds	r3, r7, r4
 8002818:	2200      	movs	r2, #0
 800281a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2201      	movs	r2, #1
 8002820:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8002822:	193a      	adds	r2, r7, r4
 8002824:	23a0      	movs	r3, #160	@ 0xa0
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f006 f984 	bl	8008b38 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2240      	movs	r2, #64	@ 0x40
 8002834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2201      	movs	r2, #1
 800283a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	193b      	adds	r3, r7, r4
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	193b      	adds	r3, r7, r4
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002848:	193b      	adds	r3, r7, r4
 800284a:	4a34      	ldr	r2, [pc, #208]	@ (800291c <MX_GPIO_Init+0x200>)
 800284c:	0019      	movs	r1, r3
 800284e:	0010      	movs	r0, r2
 8002850:	f006 f972 	bl	8008b38 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 8002854:	193b      	adds	r3, r7, r4
 8002856:	2210      	movs	r2, #16
 8002858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	193b      	adds	r3, r7, r4
 800285c:	2201      	movs	r2, #1
 800285e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	193b      	adds	r3, r7, r4
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	193b      	adds	r3, r7, r4
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 800286c:	193b      	adds	r3, r7, r4
 800286e:	4a2b      	ldr	r2, [pc, #172]	@ (800291c <MX_GPIO_Init+0x200>)
 8002870:	0019      	movs	r1, r3
 8002872:	0010      	movs	r0, r2
 8002874:	f006 f960 	bl	8008b38 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002878:	0021      	movs	r1, r4
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2280      	movs	r2, #128	@ 0x80
 800287e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	22c4      	movs	r2, #196	@ 0xc4
 8002884:	0392      	lsls	r2, r2, #14
 8002886:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002888:	000c      	movs	r4, r1
 800288a:	193b      	adds	r3, r7, r4
 800288c:	2202      	movs	r2, #2
 800288e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	193b      	adds	r3, r7, r4
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002896:	193b      	adds	r3, r7, r4
 8002898:	4a20      	ldr	r2, [pc, #128]	@ (800291c <MX_GPIO_Init+0x200>)
 800289a:	0019      	movs	r1, r3
 800289c:	0010      	movs	r0, r2
 800289e:	f006 f94b 	bl	8008b38 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 80028a2:	0021      	movs	r1, r4
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2280      	movs	r2, #128	@ 0x80
 80028a8:	0152      	lsls	r2, r2, #5
 80028aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	000c      	movs	r4, r1
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	2201      	movs	r2, #1
 80028b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 80028c0:	193a      	adds	r2, r7, r4
 80028c2:	23a0      	movs	r3, #160	@ 0xa0
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f006 f935 	bl	8008b38 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 80028ce:	0021      	movs	r1, r4
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2201      	movs	r2, #1
 80028da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80028e8:	187a      	adds	r2, r7, r1
 80028ea:	23a0      	movs	r3, #160	@ 0xa0
 80028ec:	05db      	lsls	r3, r3, #23
 80028ee:	0011      	movs	r1, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f006 f921 	bl	8008b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80028f6:	2202      	movs	r2, #2
 80028f8:	2102      	movs	r1, #2
 80028fa:	2007      	movs	r0, #7
 80028fc:	f005 fc16 	bl	800812c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002900:	2007      	movs	r0, #7
 8002902:	f005 fc28 	bl	8008156 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b00b      	add	sp, #44	@ 0x2c
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	40021000 	.word	0x40021000
 8002914:	50000800 	.word	0x50000800
 8002918:	50001400 	.word	0x50001400
 800291c:	50000400 	.word	0x50000400

08002920 <Error_Handler>:

void Error_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002928:	46c0      	nop			@ (mov r8, r8)
 800292a:	e7fd      	b.n	8002928 <Error_Handler+0x8>

0800292c <System_Init>:
  {

  }
}

void System_Init(void){
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002930:	f004 f87e 	bl	8006a30 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002934:	f7ff f9e4 	bl	8001d00 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002938:	f7ff fef0 	bl	800271c <MX_GPIO_Init>
	MX_DMA_Init();
 800293c:	f7ff fec8 	bl	80026d0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002940:	f7ff fe92 	bl	8002668 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002944:	f7ff fa3a 	bl	8001dbc <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002948:	f7ff faf8 	bl	8001f3c <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 800294c:	f7ff fb82 	bl	8002054 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002950:	f7ff fbfc 	bl	800214c <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 8002954:	f7ff fc82 	bl	800225c <MX_TIM1_Init>
	MX_TIM17_Init();
 8002958:	f7ff fd6a 	bl	8002430 <MX_TIM17_Init>
	MX_TIM14_Init();
 800295c:	f7ff fe32 	bl	80025c4 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002960:	f7ff fdf8 	bl	8002554 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <System_Init+0xc0>)
 8002966:	0018      	movs	r0, r3
 8002968:	f005 f9fe 	bl	8007d68 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 800296c:	4a20      	ldr	r2, [pc, #128]	@ (80029f0 <System_Init+0xc4>)
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <System_Init+0xc8>)
 8002970:	210e      	movs	r1, #14
 8002972:	0018      	movs	r0, r3
 8002974:	f009 f818 	bl	800b9a8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002978:	4a1f      	ldr	r2, [pc, #124]	@ (80029f8 <System_Init+0xcc>)
 800297a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <System_Init+0xc0>)
 800297c:	2100      	movs	r1, #0
 800297e:	0018      	movs	r0, r3
 8002980:	f004 fc1e 	bl	80071c0 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <System_Init+0xd0>)
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <System_Init+0xd4>)
 8002988:	2112      	movs	r1, #18
 800298a:	0018      	movs	r0, r3
 800298c:	f009 f80c 	bl	800b9a8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002990:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <System_Init+0xd8>)
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <System_Init+0xd4>)
 8002994:	210e      	movs	r1, #14
 8002996:	0018      	movs	r0, r3
 8002998:	f009 f806 	bl	800b9a8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 800299c:	4a1a      	ldr	r2, [pc, #104]	@ (8002a08 <System_Init+0xdc>)
 800299e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <System_Init+0xe0>)
 80029a0:	2114      	movs	r1, #20
 80029a2:	0018      	movs	r0, r3
 80029a4:	f009 f800 	bl	800b9a8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <System_Init+0xe4>)
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <System_Init+0xe8>)
 80029ac:	2101      	movs	r1, #1
 80029ae:	0018      	movs	r0, r3
 80029b0:	f009 ffe6 	bl	800c980 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <System_Init+0xec>)
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <System_Init+0xe8>)
 80029b8:	2103      	movs	r1, #3
 80029ba:	0018      	movs	r0, r3
 80029bc:	f009 ffe0 	bl	800c980 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 80029c0:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <System_Init+0xf0>)
 80029c2:	4b17      	ldr	r3, [pc, #92]	@ (8002a20 <System_Init+0xf4>)
 80029c4:	2102      	movs	r1, #2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f006 fca4 	bl	8009314 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80029cc:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <System_Init+0xf8>)
 80029ce:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <System_Init+0xfc>)
 80029d0:	2114      	movs	r1, #20
 80029d2:	0018      	movs	r0, r3
 80029d4:	f008 ffe8 	bl	800b9a8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80029d8:	4a14      	ldr	r2, [pc, #80]	@ (8002a2c <System_Init+0x100>)
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <System_Init+0x104>)
 80029dc:	2114      	movs	r1, #20
 80029de:	0018      	movs	r0, r3
 80029e0:	f008 ffe2 	bl	800b9a8 <HAL_TIM_RegisterCallback>
}
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	200005b4 	.word	0x200005b4
 80029f0:	08002a35 	.word	0x08002a35
 80029f4:	20000810 	.word	0x20000810
 80029f8:	08002a89 	.word	0x08002a89
 80029fc:	08002b1d 	.word	0x08002b1d
 8002a00:	200008cc 	.word	0x200008cc
 8002a04:	08002c39 	.word	0x08002c39
 8002a08:	08002d45 	.word	0x08002d45
 8002a0c:	20000988 	.word	0x20000988
 8002a10:	08002e81 	.word	0x08002e81
 8002a14:	20000b00 	.word	0x20000b00
 8002a18:	08002e91 	.word	0x08002e91
 8002a1c:	08004271 	.word	0x08004271
 8002a20:	20000c84 	.word	0x20000c84
 8002a24:	080049c1 	.word	0x080049c1
 8002a28:	20000754 	.word	0x20000754
 8002a2c:	080049d1 	.word	0x080049d1
 8002a30:	20000698 	.word	0x20000698

08002a34 <TIM16_callback>:
uint64_t depressed_num = 0;
enum Validate latched = NO;
//debug

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <TIM16_callback+0x40>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f002 fbd6 	bl	80051f0 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <TIM16_callback+0x40>)
 8002a46:	2100      	movs	r1, #0
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f002 fbfd 	bl	8005248 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <TIM16_callback+0x44>)
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <TIM16_callback+0x40>)
 8002a52:	0011      	movs	r1, r2
 8002a54:	0018      	movs	r0, r3
 8002a56:	f002 fced 	bl	8005434 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <TIM16_callback+0x48>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	001a      	movs	r2, r3
 8002a60:	4907      	ldr	r1, [pc, #28]	@ (8002a80 <TIM16_callback+0x4c>)
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <TIM16_callback+0x50>)
 8002a64:	0018      	movs	r0, r3
 8002a66:	f004 fc37 	bl	80072d8 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	20000d18 	.word	0x20000d18
 8002a78:	20000028 	.word	0x20000028
 8002a7c:	0800e9e8 	.word	0x0800e9e8
 8002a80:	20000d0c 	.word	0x20000d0c
 8002a84:	200005b4 	.word	0x200005b4

08002a88 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f004 fcae 	bl	80073f4 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002a98:	4a1b      	ldr	r2, [pc, #108]	@ (8002b08 <ADC_DMA_conversion_complete_callback+0x80>)
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <ADC_DMA_conversion_complete_callback+0x84>)
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f002 fd5e 	bl	8005560 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002aa4:	f7fd fd60 	bl	8000568 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002aa8:	250f      	movs	r5, #15
 8002aaa:	197c      	adds	r4, r7, r5
 8002aac:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <ADC_DMA_conversion_complete_callback+0x88>)
 8002aae:	2108      	movs	r1, #8
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f003 ff59 	bl	8006968 <Get_Status_Bit>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002aba:	197b      	adds	r3, r7, r5
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10a      	bne.n	8002ad8 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002ac4:	8a5b      	ldrh	r3, [r3, #18]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <ADC_DMA_conversion_complete_callback+0x90>)
 8002aca:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002ace:	8b5b      	ldrh	r3, [r3, #26]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ad4:	835a      	strh	r2, [r3, #26]
 8002ad6:	e003      	b.n	8002ae0 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b18 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f002 fb52 	bl	8005184 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f003 fab2 	bl	800604c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <ADC_DMA_conversion_complete_callback+0x88>)
 8002aea:	2110      	movs	r1, #16
 8002aec:	0018      	movs	r0, r3
 8002aee:	f003 ff3b 	bl	8006968 <Get_Status_Bit>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d104      	bne.n	8002b00 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <ADC_DMA_conversion_complete_callback+0x88>)
 8002af8:	2110      	movs	r1, #16
 8002afa:	0018      	movs	r0, r3
 8002afc:	f003 ff48 	bl	8006990 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b004      	add	sp, #16
 8002b06:	bdb0      	pop	{r4, r5, r7, pc}
 8002b08:	20000d0c 	.word	0x20000d0c
 8002b0c:	20000d3c 	.word	0x20000d3c
 8002b10:	20000cfc 	.word	0x20000cfc
 8002b14:	20000d84 	.word	0x20000d84
 8002b18:	20000d18 	.word	0x20000d18

08002b1c <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2100      	movs	r1, #0
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f008 feb9 	bl	800b8a0 <HAL_TIM_ReadCapturedValue>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <TIM2_ch1_IP_capture_callback+0x100>)
 8002b32:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002b34:	4b39      	ldr	r3, [pc, #228]	@ (8002c1c <TIM2_ch1_IP_capture_callback+0x100>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0a5b      	lsrs	r3, r3, #9
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x104>)
 8002b3e:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002b40:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002b4a:	f002 fa05 	bl	8004f58 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002b4e:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 8002b54:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002b5a:	e05b      	b.n	8002c14 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002b5c:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d124      	bne.n	8002bb0 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 8002b66:	4b2e      	ldr	r3, [pc, #184]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x104>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b80      	cmp	r3, #128	@ 0x80
 8002b6e:	d951      	bls.n	8002c14 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002b70:	f002 f9d4 	bl	8004f1c <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002b74:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002b80:	4a29      	ldr	r2, [pc, #164]	@ (8002c28 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002b82:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <TIM2_ch1_IP_capture_callback+0x110>)
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f002 f9b6 	bl	8004ef8 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002b8c:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <TIM2_ch1_IP_capture_callback+0x114>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d004      	beq.n	8002ba0 <TIM2_ch1_IP_capture_callback+0x84>
 8002b96:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <TIM2_ch1_IP_capture_callback+0x114>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d101      	bne.n	8002ba4 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002ba0:	f002 fe2a 	bl	80057f8 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <TIM2_ch1_IP_capture_callback+0x118>)
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f003 fef1 	bl	8006990 <Set_Status_Bit>
}
 8002bae:	e031      	b.n	8002c14 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d108      	bne.n	8002bcc <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002bba:	f002 f9cd 	bl	8004f58 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002bc4:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	705a      	strb	r2, [r3, #1]
}
 8002bca:	e023      	b.n	8002c14 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002bcc:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d11e      	bne.n	8002c14 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002bd6:	f002 f9a1 	bl	8004f1c <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002bda:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x108>)
 8002be2:	2203      	movs	r2, #3
 8002be4:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002be6:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002be8:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <TIM2_ch1_IP_capture_callback+0x110>)
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f002 f983 	bl	8004ef8 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <TIM2_ch1_IP_capture_callback+0x114>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d004      	beq.n	8002c06 <TIM2_ch1_IP_capture_callback+0xea>
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <TIM2_ch1_IP_capture_callback+0x114>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b07      	cmp	r3, #7
 8002c04:	d101      	bne.n	8002c0a <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002c06:	f002 fdf7 	bl	80057f8 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <TIM2_ch1_IP_capture_callback+0x118>)
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f003 febe 	bl	8006990 <Set_Status_Bit>
}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000cf4 	.word	0x20000cf4
 8002c20:	20000cf8 	.word	0x20000cf8
 8002c24:	20000444 	.word	0x20000444
 8002c28:	20000d60 	.word	0x20000d60
 8002c2c:	20000d18 	.word	0x20000d18
 8002c30:	20000430 	.word	0x20000430
 8002c34:	20000cfc 	.word	0x20000cfc

08002c38 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002c40:	240c      	movs	r4, #12
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	4a3a      	ldr	r2, [pc, #232]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002c46:	7852      	ldrb	r2, [r2, #1]
 8002c48:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <TIM2_ch1_overflow_callback+0xfc>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d131      	bne.n	8002cb8 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 8002c54:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <TIM2_ch1_overflow_callback+0xfc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002c5a:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <TIM2_ch1_overflow_callback+0xfc>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002c60:	4b35      	ldr	r3, [pc, #212]	@ (8002d38 <TIM2_ch1_overflow_callback+0x100>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002c66:	4b35      	ldr	r3, [pc, #212]	@ (8002d3c <TIM2_ch1_overflow_callback+0x104>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	0099      	lsls	r1, r3, #2
 8002c70:	23a0      	movs	r3, #160	@ 0xa0
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	2201      	movs	r2, #1
 8002c76:	0018      	movs	r0, r3
 8002c78:	f006 f8df 	bl	8008e3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c7c:	4b30      	ldr	r3, [pc, #192]	@ (8002d40 <TIM2_ch1_overflow_callback+0x108>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2140      	movs	r1, #64	@ 0x40
 8002c82:	0018      	movs	r0, r3
 8002c84:	f006 f8d9 	bl	8008e3a <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002c88:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d049      	beq.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002c92:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d044      	beq.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
 8002c9c:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d03f      	beq.n	8002d26 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002ca8:	4a21      	ldr	r2, [pc, #132]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002cb0:	193a      	adds	r2, r7, r4
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002cb6:	e036      	b.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <TIM2_ch1_overflow_callback+0xfc>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d131      	bne.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <TIM2_ch1_overflow_callback+0xfc>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <TIM2_ch1_overflow_callback+0xfc>)
 8002cca:	2203      	movs	r2, #3
 8002ccc:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <TIM2_ch1_overflow_callback+0x100>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <TIM2_ch1_overflow_callback+0x104>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	0099      	lsls	r1, r3, #2
 8002cde:	23a0      	movs	r3, #160	@ 0xa0
 8002ce0:	05db      	lsls	r3, r3, #23
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f006 f8a8 	bl	8008e3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <TIM2_ch1_overflow_callback+0x108>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	2140      	movs	r1, #64	@ 0x40
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f006 f8a2 	bl	8008e3a <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d012      	beq.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d00d      	beq.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
 8002d0a:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d008      	beq.n	8002d26 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002d16:	4a06      	ldr	r2, [pc, #24]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <TIM2_ch1_overflow_callback+0xf8>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	18ba      	adds	r2, r7, r2
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	20000430 	.word	0x20000430
 8002d34:	20000444 	.word	0x20000444
 8002d38:	20000da8 	.word	0x20000da8
 8002d3c:	20000cfa 	.word	0x20000cfa
 8002d40:	50000800 	.word	0x50000800

08002d44 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d4c:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b0b      	cmp	r3, #11
 8002d54:	d01c      	beq.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d017      	beq.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002d60:	4b3c      	ldr	r3, [pc, #240]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b0d      	cmp	r3, #13
 8002d68:	d012      	beq.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d00d      	beq.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002d74:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b11      	cmp	r3, #17
 8002d7c:	d008      	beq.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002d7e:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d003      	beq.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002d88:	4b33      	ldr	r3, [pc, #204]	@ (8002e58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f002 fa30 	bl	80051f0 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002d90:	4b32      	ldr	r3, [pc, #200]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002d92:	2100      	movs	r1, #0
 8002d94:	0018      	movs	r0, r3
 8002d96:	f003 fd80 	bl	800689a <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002d9a:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d106      	bne.n	8002db2 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002da4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002daa:	4b2d      	ldr	r3, [pc, #180]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dac:	2202      	movs	r2, #2
 8002dae:	705a      	strb	r2, [r3, #1]
 8002db0:	e00a      	b.n	8002dc8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002db2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d105      	bne.n	8002dc8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002dc2:	4b27      	ldr	r3, [pc, #156]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002dc8:	4b22      	ldr	r3, [pc, #136]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b0b      	cmp	r3, #11
 8002dd0:	d03c      	beq.n	8002e4c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d037      	beq.n	8002e4c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b0d      	cmp	r3, #13
 8002de4:	d032      	beq.n	8002e4c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002de6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d02d      	beq.n	8002e4c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b11      	cmp	r3, #17
 8002df8:	d028      	beq.n	8002e4c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d023      	beq.n	8002e4c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002e04:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002e06:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f002 f874 	bl	8004ef8 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002e10:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e12:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002e14:	0011      	movs	r1, r2
 8002e16:	0018      	movs	r0, r3
 8002e18:	f002 f86e 	bl	8004ef8 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002e1e:	2108      	movs	r1, #8
 8002e20:	0018      	movs	r0, r3
 8002e22:	f003 fdb5 	bl	8006990 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e28:	2100      	movs	r1, #0
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f002 fa0c 	bl	8005248 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002e30:	4a0f      	ldr	r2, [pc, #60]	@ (8002e70 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e34:	0011      	movs	r1, r2
 8002e36:	0018      	movs	r0, r3
 8002e38:	f002 fafc 	bl	8005434 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	001a      	movs	r2, r3
 8002e42:	490d      	ldr	r1, [pc, #52]	@ (8002e78 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002e44:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f004 fa46 	bl	80072d8 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000430 	.word	0x20000430
 8002e58:	20000d60 	.word	0x20000d60
 8002e5c:	20000988 	.word	0x20000988
 8002e60:	20000444 	.word	0x20000444
 8002e64:	20000d84 	.word	0x20000d84
 8002e68:	20000d18 	.word	0x20000d18
 8002e6c:	20000cfc 	.word	0x20000cfc
 8002e70:	20000028 	.word	0x20000028
 8002e74:	0800e9e8 	.word	0x0800e9e8
 8002e78:	20000d0c 	.word	0x20000d0c
 8002e7c:	200005b4 	.word	0x200005b4

08002e80 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002e98:	4bbe      	ldr	r3, [pc, #760]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fe fc96 	bl	80017cc <Is_System_Real_Time_Status_Byte>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <UART2_RX_transfer_complete_callback+0x1a>
 8002ea6:	f000 fc0c 	bl	80036c2 <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002eaa:	4bbb      	ldr	r3, [pc, #748]	@ (8003198 <UART2_RX_transfer_complete_callback+0x308>)
 8002eac:	2180      	movs	r1, #128	@ 0x80
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f003 fd5a 	bl	8006968 <Get_Status_Bit>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <UART2_RX_transfer_complete_callback+0x2e>
 8002eba:	f001 f895 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002ebe:	4bb7      	ldr	r3, [pc, #732]	@ (800319c <UART2_RX_transfer_complete_callback+0x30c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d159      	bne.n	8002f7c <UART2_RX_transfer_complete_callback+0xec>
 8002ec8:	4bb5      	ldr	r3, [pc, #724]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x310>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d154      	bne.n	8002f7c <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002ed2:	4bb4      	ldr	r3, [pc, #720]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d013      	beq.n	8002f04 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002edc:	4bb1      	ldr	r3, [pc, #708]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d00e      	beq.n	8002f04 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002ee6:	4baf      	ldr	r3, [pc, #700]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d009      	beq.n	8002f04 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002ef0:	4bac      	ldr	r3, [pc, #688]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d004      	beq.n	8002f04 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002efa:	4baa      	ldr	r3, [pc, #680]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d13b      	bne.n	8002f7c <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f04:	4ba3      	ldr	r3, [pc, #652]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f0c:	d10b      	bne.n	8002f26 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002f0e:	4ba5      	ldr	r3, [pc, #660]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f10:	4aa4      	ldr	r2, [pc, #656]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f12:	7812      	ldrb	r2, [r2, #0]
 8002f14:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002f16:	4ba3      	ldr	r3, [pc, #652]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f18:	2209      	movs	r2, #9
 8002f1a:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f1c:	4ba2      	ldr	r3, [pc, #648]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f22:	f001 f85e 	bl	8003fe2 <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f26:	4b9b      	ldr	r3, [pc, #620]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f2e:	d001      	beq.n	8002f34 <UART2_RX_transfer_complete_callback+0xa4>
 8002f30:	f001 f857 	bl	8003fe2 <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002f34:	4b9b      	ldr	r3, [pc, #620]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f36:	4a9b      	ldr	r2, [pc, #620]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002f3c:	4b99      	ldr	r3, [pc, #612]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f3e:	220b      	movs	r2, #11
 8002f40:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f42:	4b99      	ldr	r3, [pc, #612]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	0099      	lsls	r1, r3, #2
 8002f4c:	23a0      	movs	r3, #160	@ 0xa0
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	2200      	movs	r2, #0
 8002f52:	0018      	movs	r0, r3
 8002f54:	f005 ff71 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f58:	4b94      	ldr	r3, [pc, #592]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2140      	movs	r1, #64	@ 0x40
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f005 ff6b 	bl	8008e3a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002f64:	4b8d      	ldr	r3, [pc, #564]	@ (800319c <UART2_RX_transfer_complete_callback+0x30c>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b8c      	ldr	r3, [pc, #560]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002f76:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f78:	f001 f833 	bl	8003fe2 <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002f7c:	4b89      	ldr	r3, [pc, #548]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	d123      	bne.n	8002fce <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f86:	4b83      	ldr	r3, [pc, #524]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f8e:	d001      	beq.n	8002f94 <UART2_RX_transfer_complete_callback+0x104>
 8002f90:	f001 f82a 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	23a0      	movs	r3, #160	@ 0xa0
 8002f9a:	05db      	lsls	r3, r3, #23
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f005 ff4b 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fa4:	4b81      	ldr	r3, [pc, #516]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2140      	movs	r1, #64	@ 0x40
 8002faa:	0018      	movs	r0, r3
 8002fac:	f005 ff45 	bl	8008e3a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002fb0:	4b7a      	ldr	r3, [pc, #488]	@ (800319c <UART2_RX_transfer_complete_callback+0x30c>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b79      	ldr	r3, [pc, #484]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002fc2:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002fc4:	4b77      	ldr	r3, [pc, #476]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002fc6:	220a      	movs	r2, #10
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	f001 f80d 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002fce:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b0a      	cmp	r3, #10
 8002fd6:	d145      	bne.n	8003064 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fd8:	4b6e      	ldr	r3, [pc, #440]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fe0:	d001      	beq.n	8002fe6 <UART2_RX_transfer_complete_callback+0x156>
 8002fe2:	f001 f801 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800319c <UART2_RX_transfer_complete_callback+0x30c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002fec:	4b6e      	ldr	r3, [pc, #440]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002ff8:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b0b      	cmp	r3, #11
 8003002:	d80f      	bhi.n	8003024 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	0099      	lsls	r1, r3, #2
 8003008:	23a0      	movs	r3, #160	@ 0xa0
 800300a:	05db      	lsls	r3, r3, #23
 800300c:	2200      	movs	r2, #0
 800300e:	0018      	movs	r0, r3
 8003010:	f005 ff13 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003014:	4b65      	ldr	r3, [pc, #404]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 8003016:	2201      	movs	r2, #1
 8003018:	2140      	movs	r1, #64	@ 0x40
 800301a:	0018      	movs	r0, r3
 800301c:	f005 ff0d 	bl	8008e3a <HAL_GPIO_WritePin>
 8003020:	f000 ffe2 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003024:	4b60      	ldr	r3, [pc, #384]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b18      	cmp	r3, #24
 800302c:	d80f      	bhi.n	800304e <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	0099      	lsls	r1, r3, #2
 8003032:	23a0      	movs	r3, #160	@ 0xa0
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	2201      	movs	r2, #1
 8003038:	0018      	movs	r0, r3
 800303a:	f005 fefe 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800303e:	4b5b      	ldr	r3, [pc, #364]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 8003040:	2200      	movs	r2, #0
 8003042:	2140      	movs	r1, #64	@ 0x40
 8003044:	0018      	movs	r0, r3
 8003046:	f005 fef8 	bl	8008e3a <HAL_GPIO_WritePin>
 800304a:	f000 ffcd 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 800304e:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8003050:	220a      	movs	r2, #10
 8003052:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003054:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8003056:	2208      	movs	r2, #8
 8003058:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 800305a:	4b53      	ldr	r3, [pc, #332]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	f000 ffc2 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8003064:	4b4f      	ldr	r3, [pc, #316]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b0b      	cmp	r3, #11
 800306c:	d142      	bne.n	80030f4 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800306e:	4b49      	ldr	r3, [pc, #292]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2bf8      	cmp	r3, #248	@ 0xf8
 8003076:	d001      	beq.n	800307c <UART2_RX_transfer_complete_callback+0x1ec>
 8003078:	f000 ffb6 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800307c:	4b47      	ldr	r3, [pc, #284]	@ (800319c <UART2_RX_transfer_complete_callback+0x30c>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003082:	4b49      	ldr	r3, [pc, #292]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 800308e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003090:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b0b      	cmp	r3, #11
 8003098:	d80f      	bhi.n	80030ba <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	0099      	lsls	r1, r3, #2
 800309e:	23a0      	movs	r3, #160	@ 0xa0
 80030a0:	05db      	lsls	r3, r3, #23
 80030a2:	2200      	movs	r2, #0
 80030a4:	0018      	movs	r0, r3
 80030a6:	f005 fec8 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80030aa:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	2140      	movs	r1, #64	@ 0x40
 80030b0:	0018      	movs	r0, r3
 80030b2:	f005 fec2 	bl	8008e3a <HAL_GPIO_WritePin>
 80030b6:	f000 ff97 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80030ba:	4b3b      	ldr	r3, [pc, #236]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b18      	cmp	r3, #24
 80030c2:	d80f      	bhi.n	80030e4 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	0099      	lsls	r1, r3, #2
 80030c8:	23a0      	movs	r3, #160	@ 0xa0
 80030ca:	05db      	lsls	r3, r3, #23
 80030cc:	2201      	movs	r2, #1
 80030ce:	0018      	movs	r0, r3
 80030d0:	f005 feb3 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80030d4:	4b35      	ldr	r3, [pc, #212]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	2140      	movs	r1, #64	@ 0x40
 80030da:	0018      	movs	r0, r3
 80030dc:	f005 fead 	bl	8008e3a <HAL_GPIO_WritePin>
 80030e0:	f000 ff82 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80030e4:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80030ea:	4b2e      	ldr	r3, [pc, #184]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 80030ec:	220c      	movs	r2, #12
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	f000 ff7a 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80030f4:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d158      	bne.n	80031b0 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80030fe:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2bf8      	cmp	r3, #248	@ 0xf8
 8003106:	d138      	bne.n	800317a <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <UART2_RX_transfer_complete_callback+0x30c>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800310e:	4b26      	ldr	r3, [pc, #152]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3301      	adds	r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 800311a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800311c:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b0b      	cmp	r3, #11
 8003124:	d80f      	bhi.n	8003146 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	0099      	lsls	r1, r3, #2
 800312a:	23a0      	movs	r3, #160	@ 0xa0
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	2200      	movs	r2, #0
 8003130:	0018      	movs	r0, r3
 8003132:	f005 fe82 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003136:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 8003138:	2201      	movs	r2, #1
 800313a:	2140      	movs	r1, #64	@ 0x40
 800313c:	0018      	movs	r0, r3
 800313e:	f005 fe7c 	bl	8008e3a <HAL_GPIO_WritePin>
 8003142:	f000 ff51 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b18      	cmp	r3, #24
 800314e:	d80f      	bhi.n	8003170 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	23a0      	movs	r3, #160	@ 0xa0
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	2201      	movs	r2, #1
 800315a:	0018      	movs	r0, r3
 800315c:	f005 fe6d 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003160:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <UART2_RX_transfer_complete_callback+0x31c>)
 8003162:	2200      	movs	r2, #0
 8003164:	2140      	movs	r1, #64	@ 0x40
 8003166:	0018      	movs	r0, r3
 8003168:	f005 fe67 	bl	8008e3a <HAL_GPIO_WritePin>
 800316c:	f000 ff3c 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x318>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	f000 ff37 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <UART2_RX_transfer_complete_callback+0x304>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2bfa      	cmp	r3, #250	@ 0xfa
 8003182:	d001      	beq.n	8003188 <UART2_RX_transfer_complete_callback+0x2f8>
 8003184:	f000 ff30 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x314>)
 800318a:	220d      	movs	r2, #13
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	f000 ff2b 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	20000594 	.word	0x20000594
 8003198:	20000cfc 	.word	0x20000cfc
 800319c:	20000da8 	.word	0x20000da8
 80031a0:	20000444 	.word	0x20000444
 80031a4:	20000430 	.word	0x20000430
 80031a8:	20000cfa 	.word	0x20000cfa
 80031ac:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 80031b0:	4bdc      	ldr	r3, [pc, #880]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b0d      	cmp	r3, #13
 80031b8:	d160      	bne.n	800327c <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80031ba:	4bdb      	ldr	r3, [pc, #876]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2bf8      	cmp	r3, #248	@ 0xf8
 80031c2:	d001      	beq.n	80031c8 <UART2_RX_transfer_complete_callback+0x338>
 80031c4:	f000 ff10 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 80031c8:	4bd8      	ldr	r3, [pc, #864]	@ (800352c <UART2_RX_transfer_complete_callback+0x69c>)
 80031ca:	0018      	movs	r0, r3
 80031cc:	f002 f810 	bl	80051f0 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80031d0:	2380      	movs	r3, #128	@ 0x80
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	23a0      	movs	r3, #160	@ 0xa0
 80031d6:	05db      	lsls	r3, r3, #23
 80031d8:	2201      	movs	r2, #1
 80031da:	0018      	movs	r0, r3
 80031dc:	f005 fe2d 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80031e0:	4bd3      	ldr	r3, [pc, #844]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	2140      	movs	r1, #64	@ 0x40
 80031e6:	0018      	movs	r0, r3
 80031e8:	f005 fe27 	bl	8008e3a <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	0099      	lsls	r1, r3, #2
 80031f0:	23a0      	movs	r3, #160	@ 0xa0
 80031f2:	05db      	lsls	r3, r3, #23
 80031f4:	2200      	movs	r2, #0
 80031f6:	0018      	movs	r0, r3
 80031f8:	f005 fe1f 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80031fc:	4bcc      	ldr	r3, [pc, #816]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 80031fe:	2201      	movs	r2, #1
 8003200:	2140      	movs	r1, #64	@ 0x40
 8003202:	0018      	movs	r0, r3
 8003204:	f005 fe19 	bl	8008e3a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003208:	4bca      	ldr	r3, [pc, #808]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a4>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 800320e:	4bca      	ldr	r3, [pc, #808]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8003214:	4bc3      	ldr	r3, [pc, #780]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003216:	220d      	movs	r2, #13
 8003218:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800321a:	4bc2      	ldr	r3, [pc, #776]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800321c:	2208      	movs	r2, #8
 800321e:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8003220:	4bc6      	ldr	r3, [pc, #792]	@ (800353c <UART2_RX_transfer_complete_callback+0x6ac>)
 8003222:	2100      	movs	r1, #0
 8003224:	0018      	movs	r0, r3
 8003226:	f003 fb38 	bl	800689a <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 800322a:	4bc5      	ldr	r3, [pc, #788]	@ (8003540 <UART2_RX_transfer_complete_callback+0x6b0>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8003230:	4ac4      	ldr	r2, [pc, #784]	@ (8003544 <UART2_RX_transfer_complete_callback+0x6b4>)
 8003232:	4bbe      	ldr	r3, [pc, #760]	@ (800352c <UART2_RX_transfer_complete_callback+0x69c>)
 8003234:	0011      	movs	r1, r2
 8003236:	0018      	movs	r0, r3
 8003238:	f001 fe5e 	bl	8004ef8 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 800323c:	4ac2      	ldr	r2, [pc, #776]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6b8>)
 800323e:	4bbb      	ldr	r3, [pc, #748]	@ (800352c <UART2_RX_transfer_complete_callback+0x69c>)
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f001 fe58 	bl	8004ef8 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003248:	4bc0      	ldr	r3, [pc, #768]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 800324a:	2108      	movs	r1, #8
 800324c:	0018      	movs	r0, r3
 800324e:	f003 fb9f 	bl	8006990 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8003252:	4bbd      	ldr	r3, [pc, #756]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6b8>)
 8003254:	2100      	movs	r1, #0
 8003256:	0018      	movs	r0, r3
 8003258:	f001 fff6 	bl	8005248 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800325c:	4abc      	ldr	r2, [pc, #752]	@ (8003550 <UART2_RX_transfer_complete_callback+0x6c0>)
 800325e:	4bba      	ldr	r3, [pc, #744]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6b8>)
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f002 f8e6 	bl	8005434 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003268:	4bba      	ldr	r3, [pc, #744]	@ (8003554 <UART2_RX_transfer_complete_callback+0x6c4>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	001a      	movs	r2, r3
 800326e:	49ba      	ldr	r1, [pc, #744]	@ (8003558 <UART2_RX_transfer_complete_callback+0x6c8>)
 8003270:	4bba      	ldr	r3, [pc, #744]	@ (800355c <UART2_RX_transfer_complete_callback+0x6cc>)
 8003272:	0018      	movs	r0, r3
 8003274:	f004 f830 	bl	80072d8 <HAL_ADC_Start_DMA>
 8003278:	f000 feb6 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 800327c:	4ba9      	ldr	r3, [pc, #676]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b08      	cmp	r3, #8
 8003284:	d146      	bne.n	8003314 <UART2_RX_transfer_complete_callback+0x484>
 8003286:	4bb1      	ldr	r3, [pc, #708]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 8003288:	2120      	movs	r1, #32
 800328a:	0018      	movs	r0, r3
 800328c:	f003 fb6c 	bl	8006968 <Get_Status_Bit>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d13f      	bne.n	8003314 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003294:	4ba4      	ldr	r3, [pc, #656]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2bf8      	cmp	r3, #248	@ 0xf8
 800329c:	d001      	beq.n	80032a2 <UART2_RX_transfer_complete_callback+0x412>
 800329e:	f000 fea3 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80032a2:	4ba4      	ldr	r3, [pc, #656]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a4>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80032a8:	4ba3      	ldr	r3, [pc, #652]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032b4:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80032b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b0b      	cmp	r3, #11
 80032be:	d80f      	bhi.n	80032e0 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80032c0:	2380      	movs	r3, #128	@ 0x80
 80032c2:	0099      	lsls	r1, r3, #2
 80032c4:	23a0      	movs	r3, #160	@ 0xa0
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	2200      	movs	r2, #0
 80032ca:	0018      	movs	r0, r3
 80032cc:	f005 fdb5 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80032d0:	4b97      	ldr	r3, [pc, #604]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	2140      	movs	r1, #64	@ 0x40
 80032d6:	0018      	movs	r0, r3
 80032d8:	f005 fdaf 	bl	8008e3a <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80032dc:	f000 fe84 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80032e0:	4b95      	ldr	r3, [pc, #596]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b18      	cmp	r3, #24
 80032e8:	d80f      	bhi.n	800330a <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	0099      	lsls	r1, r3, #2
 80032ee:	23a0      	movs	r3, #160	@ 0xa0
 80032f0:	05db      	lsls	r3, r3, #23
 80032f2:	2201      	movs	r2, #1
 80032f4:	0018      	movs	r0, r3
 80032f6:	f005 fda0 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80032fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	2140      	movs	r1, #64	@ 0x40
 8003300:	0018      	movs	r0, r3
 8003302:	f005 fd9a 	bl	8008e3a <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003306:	f000 fe6f 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800330a:	4b8b      	ldr	r3, [pc, #556]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003310:	f000 fe6a 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003314:	4b83      	ldr	r3, [pc, #524]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b08      	cmp	r3, #8
 800331c:	d14c      	bne.n	80033b8 <UART2_RX_transfer_complete_callback+0x528>
 800331e:	4b88      	ldr	r3, [pc, #544]	@ (8003540 <UART2_RX_transfer_complete_callback+0x6b0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d147      	bne.n	80033b8 <UART2_RX_transfer_complete_callback+0x528>
 8003328:	4b88      	ldr	r3, [pc, #544]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 800332a:	2120      	movs	r1, #32
 800332c:	0018      	movs	r0, r3
 800332e:	f003 fb1b 	bl	8006968 <Get_Status_Bit>
 8003332:	0003      	movs	r3, r0
 8003334:	2b01      	cmp	r3, #1
 8003336:	d13f      	bne.n	80033b8 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003338:	4b7b      	ldr	r3, [pc, #492]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2bf8      	cmp	r3, #248	@ 0xf8
 8003340:	d11e      	bne.n	8003380 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8003342:	4b7d      	ldr	r3, [pc, #500]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003348:	4b7b      	ldr	r3, [pc, #492]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3301      	adds	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b79      	ldr	r3, [pc, #484]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003354:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8003356:	4b77      	ldr	r3, [pc, #476]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a4>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 800335c:	4b71      	ldr	r3, [pc, #452]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800335e:	2210      	movs	r2, #16
 8003360:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003364:	2208      	movs	r2, #8
 8003366:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003368:	4b78      	ldr	r3, [pc, #480]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 800336a:	2120      	movs	r1, #32
 800336c:	0018      	movs	r0, r3
 800336e:	f003 fb21 	bl	80069b4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003372:	4b76      	ldr	r3, [pc, #472]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 8003374:	2140      	movs	r1, #64	@ 0x40
 8003376:	0018      	movs	r0, r3
 8003378:	f003 fb1c 	bl	80069b4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800337c:	f000 fe33 	bl	8003fe6 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003380:	4b69      	ldr	r3, [pc, #420]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2bfa      	cmp	r3, #250	@ 0xfa
 8003388:	d001      	beq.n	800338e <UART2_RX_transfer_complete_callback+0x4fe>
 800338a:	f000 fe2c 	bl	8003fe6 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 800338e:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8003394:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003396:	220e      	movs	r2, #14
 8003398:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 800339a:	4b62      	ldr	r3, [pc, #392]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800339c:	2208      	movs	r2, #8
 800339e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 80033a2:	2120      	movs	r1, #32
 80033a4:	0018      	movs	r0, r3
 80033a6:	f003 fb05 	bl	80069b4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033aa:	4b68      	ldr	r3, [pc, #416]	@ (800354c <UART2_RX_transfer_complete_callback+0x6bc>)
 80033ac:	2140      	movs	r1, #64	@ 0x40
 80033ae:	0018      	movs	r0, r3
 80033b0:	f003 fb00 	bl	80069b4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033b4:	f000 fe17 	bl	8003fe6 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 80033b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b0e      	cmp	r3, #14
 80033c0:	d123      	bne.n	800340a <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033c2:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2bf8      	cmp	r3, #248	@ 0xf8
 80033ca:	d001      	beq.n	80033d0 <UART2_RX_transfer_complete_callback+0x540>
 80033cc:	f000 fe0c 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	0099      	lsls	r1, r3, #2
 80033d4:	23a0      	movs	r3, #160	@ 0xa0
 80033d6:	05db      	lsls	r3, r3, #23
 80033d8:	2200      	movs	r2, #0
 80033da:	0018      	movs	r0, r3
 80033dc:	f005 fd2d 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80033e0:	4b53      	ldr	r3, [pc, #332]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	2140      	movs	r1, #64	@ 0x40
 80033e6:	0018      	movs	r0, r3
 80033e8:	f005 fd27 	bl	8008e3a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80033ec:	4b51      	ldr	r3, [pc, #324]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a4>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80033f2:	4b51      	ldr	r3, [pc, #324]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033fe:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8003400:	4b48      	ldr	r3, [pc, #288]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003402:	220f      	movs	r2, #15
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	f000 fdef 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 800340a:	4b46      	ldr	r3, [pc, #280]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b0f      	cmp	r3, #15
 8003412:	d142      	bne.n	800349a <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003414:	4b44      	ldr	r3, [pc, #272]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2bf8      	cmp	r3, #248	@ 0xf8
 800341c:	d001      	beq.n	8003422 <UART2_RX_transfer_complete_callback+0x592>
 800341e:	f000 fde3 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8003422:	4b45      	ldr	r3, [pc, #276]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	4b42      	ldr	r3, [pc, #264]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 800342e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003430:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b0b      	cmp	r3, #11
 8003438:	d80f      	bhi.n	800345a <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	0099      	lsls	r1, r3, #2
 800343e:	23a0      	movs	r3, #160	@ 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	2200      	movs	r2, #0
 8003444:	0018      	movs	r0, r3
 8003446:	f005 fcf8 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800344a:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 800344c:	2201      	movs	r2, #1
 800344e:	2140      	movs	r1, #64	@ 0x40
 8003450:	0018      	movs	r0, r3
 8003452:	f005 fcf2 	bl	8008e3a <HAL_GPIO_WritePin>
 8003456:	f000 fdc7 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800345a:	4b37      	ldr	r3, [pc, #220]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b18      	cmp	r3, #24
 8003462:	d80f      	bhi.n	8003484 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003464:	2380      	movs	r3, #128	@ 0x80
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	23a0      	movs	r3, #160	@ 0xa0
 800346a:	05db      	lsls	r3, r3, #23
 800346c:	2201      	movs	r2, #1
 800346e:	0018      	movs	r0, r3
 8003470:	f005 fce3 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003474:	4b2e      	ldr	r3, [pc, #184]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003476:	2200      	movs	r2, #0
 8003478:	2140      	movs	r1, #64	@ 0x40
 800347a:	0018      	movs	r0, r3
 800347c:	f005 fcdd 	bl	8008e3a <HAL_GPIO_WritePin>
 8003480:	f000 fdb2 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8003484:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003486:	220f      	movs	r2, #15
 8003488:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800348a:	4b26      	ldr	r3, [pc, #152]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800348c:	2208      	movs	r2, #8
 800348e:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8003490:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	f000 fda7 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d15d      	bne.n	8003560 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80034a4:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <UART2_RX_transfer_complete_callback+0x698>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2bf8      	cmp	r3, #248	@ 0xf8
 80034ac:	d001      	beq.n	80034b2 <UART2_RX_transfer_complete_callback+0x622>
 80034ae:	f000 fd9b 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 80034b2:	4b21      	ldr	r3, [pc, #132]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034be:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b0b      	cmp	r3, #11
 80034c8:	d80f      	bhi.n	80034ea <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	0099      	lsls	r1, r3, #2
 80034ce:	23a0      	movs	r3, #160	@ 0xa0
 80034d0:	05db      	lsls	r3, r3, #23
 80034d2:	2200      	movs	r2, #0
 80034d4:	0018      	movs	r0, r3
 80034d6:	f005 fcb0 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 80034dc:	2201      	movs	r2, #1
 80034de:	2140      	movs	r1, #64	@ 0x40
 80034e0:	0018      	movs	r0, r3
 80034e2:	f005 fcaa 	bl	8008e3a <HAL_GPIO_WritePin>
 80034e6:	f000 fd7f 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80034ea:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b18      	cmp	r3, #24
 80034f2:	d80f      	bhi.n	8003514 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	0099      	lsls	r1, r3, #2
 80034f8:	23a0      	movs	r3, #160	@ 0xa0
 80034fa:	05db      	lsls	r3, r3, #23
 80034fc:	2201      	movs	r2, #1
 80034fe:	0018      	movs	r0, r3
 8003500:	f005 fc9b 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003504:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003506:	2200      	movs	r2, #0
 8003508:	2140      	movs	r1, #64	@ 0x40
 800350a:	0018      	movs	r0, r3
 800350c:	f005 fc95 	bl	8008e3a <HAL_GPIO_WritePin>
 8003510:	f000 fd6a 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <UART2_RX_transfer_complete_callback+0x694>)
 8003516:	2211      	movs	r2, #17
 8003518:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 800351a:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6a8>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	f000 fd62 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
 8003524:	20000430 	.word	0x20000430
 8003528:	20000594 	.word	0x20000594
 800352c:	20000d60 	.word	0x20000d60
 8003530:	50000800 	.word	0x50000800
 8003534:	20000da8 	.word	0x20000da8
 8003538:	20000cfa 	.word	0x20000cfa
 800353c:	20000988 	.word	0x20000988
 8003540:	20000444 	.word	0x20000444
 8003544:	20000d84 	.word	0x20000d84
 8003548:	20000d18 	.word	0x20000d18
 800354c:	20000cfc 	.word	0x20000cfc
 8003550:	20000028 	.word	0x20000028
 8003554:	0800e9e8 	.word	0x0800e9e8
 8003558:	20000d0c 	.word	0x20000d0c
 800355c:	200005b4 	.word	0x200005b4
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8003560:	4bed      	ldr	r3, [pc, #948]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa88>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b11      	cmp	r3, #17
 8003568:	d146      	bne.n	80035f8 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800356a:	4bec      	ldr	r3, [pc, #944]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2bf8      	cmp	r3, #248	@ 0xf8
 8003572:	d135      	bne.n	80035e0 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8003574:	4bea      	ldr	r3, [pc, #936]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa90>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4be8      	ldr	r3, [pc, #928]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa90>)
 8003580:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003582:	4be7      	ldr	r3, [pc, #924]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa90>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b0b      	cmp	r3, #11
 800358a:	d80f      	bhi.n	80035ac <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	0099      	lsls	r1, r3, #2
 8003590:	23a0      	movs	r3, #160	@ 0xa0
 8003592:	05db      	lsls	r3, r3, #23
 8003594:	2200      	movs	r2, #0
 8003596:	0018      	movs	r0, r3
 8003598:	f005 fc4f 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800359c:	4be1      	ldr	r3, [pc, #900]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa94>)
 800359e:	2201      	movs	r2, #1
 80035a0:	2140      	movs	r1, #64	@ 0x40
 80035a2:	0018      	movs	r0, r3
 80035a4:	f005 fc49 	bl	8008e3a <HAL_GPIO_WritePin>
 80035a8:	f000 fd1e 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80035ac:	4bdc      	ldr	r3, [pc, #880]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa90>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b18      	cmp	r3, #24
 80035b4:	d80f      	bhi.n	80035d6 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	0099      	lsls	r1, r3, #2
 80035ba:	23a0      	movs	r3, #160	@ 0xa0
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	2201      	movs	r2, #1
 80035c0:	0018      	movs	r0, r3
 80035c2:	f005 fc3a 	bl	8008e3a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80035c6:	4bd7      	ldr	r3, [pc, #860]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa94>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	2140      	movs	r1, #64	@ 0x40
 80035cc:	0018      	movs	r0, r3
 80035ce:	f005 fc34 	bl	8008e3a <HAL_GPIO_WritePin>
 80035d2:	f000 fd09 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80035d6:	4bd2      	ldr	r3, [pc, #840]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa90>)
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	f000 fd04 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80035e0:	4bce      	ldr	r3, [pc, #824]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2bfa      	cmp	r3, #250	@ 0xfa
 80035e8:	d001      	beq.n	80035ee <UART2_RX_transfer_complete_callback+0x75e>
 80035ea:	f000 fcfd 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80035ee:	4bca      	ldr	r3, [pc, #808]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa88>)
 80035f0:	2212      	movs	r2, #18
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	f000 fcf8 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 80035f8:	4bc7      	ldr	r3, [pc, #796]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa88>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b12      	cmp	r3, #18
 8003600:	d001      	beq.n	8003606 <UART2_RX_transfer_complete_callback+0x776>
 8003602:	f000 fcf1 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003606:	4bc5      	ldr	r3, [pc, #788]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2bf8      	cmp	r3, #248	@ 0xf8
 800360e:	d001      	beq.n	8003614 <UART2_RX_transfer_complete_callback+0x784>
 8003610:	f000 fcea 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003614:	4bc4      	ldr	r3, [pc, #784]	@ (8003928 <UART2_RX_transfer_complete_callback+0xa98>)
 8003616:	0018      	movs	r0, r3
 8003618:	f001 fdea 	bl	80051f0 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	0099      	lsls	r1, r3, #2
 8003620:	23a0      	movs	r3, #160	@ 0xa0
 8003622:	05db      	lsls	r3, r3, #23
 8003624:	2201      	movs	r2, #1
 8003626:	0018      	movs	r0, r3
 8003628:	f005 fc07 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800362c:	4bbd      	ldr	r3, [pc, #756]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa94>)
 800362e:	2200      	movs	r2, #0
 8003630:	2140      	movs	r1, #64	@ 0x40
 8003632:	0018      	movs	r0, r3
 8003634:	f005 fc01 	bl	8008e3a <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	0099      	lsls	r1, r3, #2
 800363c:	23a0      	movs	r3, #160	@ 0xa0
 800363e:	05db      	lsls	r3, r3, #23
 8003640:	2200      	movs	r2, #0
 8003642:	0018      	movs	r0, r3
 8003644:	f005 fbf9 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003648:	4bb6      	ldr	r3, [pc, #728]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa94>)
 800364a:	2201      	movs	r2, #1
 800364c:	2140      	movs	r1, #64	@ 0x40
 800364e:	0018      	movs	r0, r3
 8003650:	f005 fbf3 	bl	8008e3a <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8003654:	4bb0      	ldr	r3, [pc, #704]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa88>)
 8003656:	2212      	movs	r2, #18
 8003658:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800365a:	4baf      	ldr	r3, [pc, #700]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa88>)
 800365c:	2208      	movs	r2, #8
 800365e:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8003660:	4baf      	ldr	r3, [pc, #700]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa90>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8003666:	4bb1      	ldr	r3, [pc, #708]	@ (800392c <UART2_RX_transfer_complete_callback+0xa9c>)
 8003668:	2100      	movs	r1, #0
 800366a:	0018      	movs	r0, r3
 800366c:	f003 f915 	bl	800689a <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8003670:	4baf      	ldr	r3, [pc, #700]	@ (8003930 <UART2_RX_transfer_complete_callback+0xaa0>)
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8003676:	4aaf      	ldr	r2, [pc, #700]	@ (8003934 <UART2_RX_transfer_complete_callback+0xaa4>)
 8003678:	4bab      	ldr	r3, [pc, #684]	@ (8003928 <UART2_RX_transfer_complete_callback+0xa98>)
 800367a:	0011      	movs	r1, r2
 800367c:	0018      	movs	r0, r3
 800367e:	f001 fc3b 	bl	8004ef8 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8003682:	4aad      	ldr	r2, [pc, #692]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003684:	4ba8      	ldr	r3, [pc, #672]	@ (8003928 <UART2_RX_transfer_complete_callback+0xa98>)
 8003686:	0011      	movs	r1, r2
 8003688:	0018      	movs	r0, r3
 800368a:	f001 fc35 	bl	8004ef8 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 800368e:	4bab      	ldr	r3, [pc, #684]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 8003690:	2108      	movs	r1, #8
 8003692:	0018      	movs	r0, r3
 8003694:	f003 f97c 	bl	8006990 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8003698:	4ba7      	ldr	r3, [pc, #668]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaa8>)
 800369a:	2100      	movs	r1, #0
 800369c:	0018      	movs	r0, r3
 800369e:	f001 fdd3 	bl	8005248 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80036a2:	4aa7      	ldr	r2, [pc, #668]	@ (8003940 <UART2_RX_transfer_complete_callback+0xab0>)
 80036a4:	4ba4      	ldr	r3, [pc, #656]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaa8>)
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f001 fec3 	bl	8005434 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80036ae:	4ba5      	ldr	r3, [pc, #660]	@ (8003944 <UART2_RX_transfer_complete_callback+0xab4>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	001a      	movs	r2, r3
 80036b4:	49a4      	ldr	r1, [pc, #656]	@ (8003948 <UART2_RX_transfer_complete_callback+0xab8>)
 80036b6:	4ba5      	ldr	r3, [pc, #660]	@ (800394c <UART2_RX_transfer_complete_callback+0xabc>)
 80036b8:	0018      	movs	r0, r3
 80036ba:	f003 fe0d 	bl	80072d8 <HAL_ADC_Start_DMA>
 80036be:	f000 fc93 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 80036c2:	4ba3      	ldr	r3, [pc, #652]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d000      	beq.n	80036ce <UART2_RX_transfer_complete_callback+0x83e>
 80036cc:	e29e      	b.n	8003c0c <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 80036ce:	4ba1      	ldr	r3, [pc, #644]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d000      	beq.n	80036da <UART2_RX_transfer_complete_callback+0x84a>
 80036d8:	e0a3      	b.n	8003822 <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036da:	4b9f      	ldr	r3, [pc, #636]	@ (8003958 <UART2_RX_transfer_complete_callback+0xac8>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fe f812 	bl	8001706 <Is_Data_Buffer_Empty>
 80036e2:	0003      	movs	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <UART2_RX_transfer_complete_callback+0x85c>
 80036e8:	f000 fc7e 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 80036ec:	4b8b      	ldr	r3, [pc, #556]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fd fec8 	bl	8001484 <Is_Status_Byte>
 80036f4:	0003      	movs	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d001      	beq.n	80036fe <UART2_RX_transfer_complete_callback+0x86e>
 80036fa:	f000 fc75 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 80036fe:	4b87      	ldr	r3, [pc, #540]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003700:	0018      	movs	r0, r3
 8003702:	f7fd fef1 	bl	80014e8 <Is_PC_Status_Byte>
 8003706:	0003      	movs	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d134      	bne.n	8003776 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 800370c:	4b83      	ldr	r3, [pc, #524]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b90      	ldr	r3, [pc, #576]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 8003714:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003716:	4b91      	ldr	r3, [pc, #580]	@ (800395c <UART2_RX_transfer_complete_callback+0xacc>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b7f      	ldr	r3, [pc, #508]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 800371e:	0011      	movs	r1, r2
 8003720:	0018      	movs	r0, r3
 8003722:	f7fd ffcf 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003726:	0003      	movs	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d10d      	bne.n	8003748 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 800372c:	4b7b      	ldr	r3, [pc, #492]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b87      	ldr	r3, [pc, #540]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 8003734:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	005a      	lsls	r2, r3, #1
 800373a:	4b80      	ldr	r3, [pc, #512]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f003 f926 	bl	8006990 <Set_Status_Bit>
 8003744:	f000 fc50 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003748:	4b7c      	ldr	r3, [pc, #496]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 800374a:	0018      	movs	r0, r3
 800374c:	f7fe f871 	bl	8001832 <Is_OMNI_On>
 8003750:	0003      	movs	r3, r0
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <UART2_RX_transfer_complete_callback+0x8ca>
 8003756:	f000 fc47 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800375a:	4b70      	ldr	r3, [pc, #448]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b7b      	ldr	r3, [pc, #492]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 8003762:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	005a      	lsls	r2, r3, #1
 8003768:	4b74      	ldr	r3, [pc, #464]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 800376a:	0011      	movs	r1, r2
 800376c:	0018      	movs	r0, r3
 800376e:	f003 f90f 	bl	8006990 <Set_Status_Bit>
 8003772:	f000 fc39 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003776:	4b69      	ldr	r3, [pc, #420]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003778:	0018      	movs	r0, r3
 800377a:	f7fd fed1 	bl	8001520 <Is_CC_Status_Byte>
 800377e:	0003      	movs	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d134      	bne.n	80037ee <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 8003784:	4b65      	ldr	r3, [pc, #404]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b72      	ldr	r3, [pc, #456]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 800378c:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800378e:	4b73      	ldr	r3, [pc, #460]	@ (800395c <UART2_RX_transfer_complete_callback+0xacc>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	4b61      	ldr	r3, [pc, #388]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f7fd ff93 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800379e:	0003      	movs	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10d      	bne.n	80037c0 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80037a4:	4b5d      	ldr	r3, [pc, #372]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b69      	ldr	r3, [pc, #420]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 80037ac:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	005a      	lsls	r2, r3, #1
 80037b2:	4b62      	ldr	r3, [pc, #392]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f003 f8ea 	bl	8006990 <Set_Status_Bit>
 80037bc:	f000 fc14 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80037c0:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7fe f835 	bl	8001832 <Is_OMNI_On>
 80037c8:	0003      	movs	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <UART2_RX_transfer_complete_callback+0x942>
 80037ce:	f000 fc0b 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80037d2:	4b52      	ldr	r3, [pc, #328]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 80037da:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	005a      	lsls	r2, r3, #1
 80037e0:	4b56      	ldr	r3, [pc, #344]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f003 f8d3 	bl	8006990 <Set_Status_Bit>
 80037ea:	f000 fbfd 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80037ee:	4b4b      	ldr	r3, [pc, #300]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fd ff57 	bl	80016a4 <Is_Sysex_Start_Status_Byte>
 80037f6:	0003      	movs	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <UART2_RX_transfer_complete_callback+0x970>
 80037fc:	f000 fbf4 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8003800:	4b46      	ldr	r3, [pc, #280]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b52      	ldr	r3, [pc, #328]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 8003808:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 800380a:	4b52      	ldr	r3, [pc, #328]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	005a      	lsls	r2, r3, #1
 8003814:	4b49      	ldr	r3, [pc, #292]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f003 f8b9 	bl	8006990 <Set_Status_Bit>
 800381e:	f000 fbe3 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 8003822:	4b4c      	ldr	r3, [pc, #304]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <UART2_RX_transfer_complete_callback+0x9a0>
 800382c:	f000 fbdc 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 8003830:	4b3a      	ldr	r3, [pc, #232]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003832:	0018      	movs	r0, r3
 8003834:	f7fd fe3f 	bl	80014b6 <Is_Data_Byte>
 8003838:	0003      	movs	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d000      	beq.n	8003840 <UART2_RX_transfer_complete_callback+0x9b0>
 800383e:	e151      	b.n	8003ae4 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	005a      	lsls	r2, r3, #1
 8003844:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 8003846:	0011      	movs	r1, r2
 8003848:	0018      	movs	r0, r3
 800384a:	f003 f8a1 	bl	8006990 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800384e:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 8003850:	0018      	movs	r0, r3
 8003852:	f7fd fe49 	bl	80014e8 <Is_PC_Status_Byte>
 8003856:	0003      	movs	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d143      	bne.n	80038e4 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 800385c:	4b3f      	ldr	r3, [pc, #252]	@ (800395c <UART2_RX_transfer_complete_callback+0xacc>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b3c      	ldr	r3, [pc, #240]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 8003864:	0011      	movs	r1, r2
 8003866:	0018      	movs	r0, r3
 8003868:	f7fd ff2c 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800386c:	0003      	movs	r3, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	d008      	beq.n	8003884 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 8003872:	4b32      	ldr	r3, [pc, #200]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 8003874:	0018      	movs	r0, r3
 8003876:	f7fd ffdc 	bl	8001832 <Is_OMNI_On>
 800387a:	0003      	movs	r3, r0
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <UART2_RX_transfer_complete_callback+0x9f4>
 8003880:	f000 fbb2 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003884:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <UART2_RX_transfer_complete_callback+0xac8>)
 8003886:	0018      	movs	r0, r3
 8003888:	f7fd ff3d 	bl	8001706 <Is_Data_Buffer_Empty>
 800388c:	0003      	movs	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <UART2_RX_transfer_complete_callback+0xa06>
 8003892:	f000 fba9 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003896:	4b21      	ldr	r3, [pc, #132]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003898:	2104      	movs	r1, #4
 800389a:	0018      	movs	r0, r3
 800389c:	f7fd ff81 	bl	80017a2 <Is_Program_Change_Data_Byte_In_Range>
 80038a0:	0003      	movs	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10f      	bne.n	80038c6 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80038a6:	f7fd fd1d 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80038aa:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003960 <UART2_RX_transfer_complete_callback+0xad0>)
 80038b6:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80038b8:	f7fc fe56 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80038bc:	4b1f      	ldr	r3, [pc, #124]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 80038be:	2108      	movs	r1, #8
 80038c0:	0018      	movs	r0, r3
 80038c2:	f003 f877 	bl	80069b4 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 80038c6:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <UART2_RX_transfer_complete_callback+0xac8>)
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7fd ff4c 	bl	8001766 <Clear_Data_Buffer>
								active_status_byte = 0;
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac0>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80038d4:	4a19      	ldr	r2, [pc, #100]	@ (800393c <UART2_RX_transfer_complete_callback+0xaac>)
 80038d6:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <UART2_RX_transfer_complete_callback+0xad4>)
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd ffc3 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>
 80038e0:	f000 fb82 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac4>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fd fe1a 	bl	8001520 <Is_CC_Status_Byte>
 80038ec:	0003      	movs	r3, r0
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <UART2_RX_transfer_complete_callback+0xa66>
 80038f2:	f000 fb79 	bl	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <UART2_RX_transfer_complete_callback+0xac8>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7fd ff04 	bl	8001706 <Is_Data_Buffer_Empty>
 80038fe:	0003      	movs	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d131      	bne.n	8003968 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <UART2_RX_transfer_complete_callback+0xa8c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <UART2_RX_transfer_complete_callback+0xac8>)
 800390c:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800390e:	4b15      	ldr	r3, [pc, #84]	@ (8003964 <UART2_RX_transfer_complete_callback+0xad4>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e368      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	20000430 	.word	0x20000430
 800391c:	20000594 	.word	0x20000594
 8003920:	20000cfa 	.word	0x20000cfa
 8003924:	50000800 	.word	0x50000800
 8003928:	20000d60 	.word	0x20000d60
 800392c:	20000988 	.word	0x20000988
 8003930:	20000444 	.word	0x20000444
 8003934:	20000d84 	.word	0x20000d84
 8003938:	20000d18 	.word	0x20000d18
 800393c:	20000cfc 	.word	0x20000cfc
 8003940:	20000028 	.word	0x20000028
 8003944:	0800e9e8 	.word	0x0800e9e8
 8003948:	20000d0c 	.word	0x20000d0c
 800394c:	200005b4 	.word	0x200005b4
 8003950:	20000583 	.word	0x20000583
 8003954:	20000584 	.word	0x20000584
 8003958:	20000588 	.word	0x20000588
 800395c:	20000582 	.word	0x20000582
 8003960:	20000554 	.word	0x20000554
 8003964:	20000d04 	.word	0x20000d04

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003968:	4bd6      	ldr	r3, [pc, #856]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4bd6      	ldr	r3, [pc, #856]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003970:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003972:	4ad6      	ldr	r2, [pc, #856]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003974:	4bd6      	ldr	r3, [pc, #856]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe40>)
 8003976:	0011      	movs	r1, r2
 8003978:	0018      	movs	r0, r3
 800397a:	f7fd ff74 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800397e:	4bd2      	ldr	r3, [pc, #840]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003980:	0018      	movs	r0, r3
 8003982:	f7fd fde9 	bl	8001558 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003986:	0003      	movs	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d14c      	bne.n	8003a26 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 800398c:	4bd1      	ldr	r3, [pc, #836]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe44>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4bd1      	ldr	r3, [pc, #836]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe48>)
 8003994:	0011      	movs	r1, r2
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe94 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800399c:	0003      	movs	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d139      	bne.n	8003a16 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80039a2:	4ace      	ldr	r2, [pc, #824]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe4c>)
 80039a4:	4bc8      	ldr	r3, [pc, #800]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 80039a6:	0011      	movs	r1, r2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7fd fe34 	bl	8001616 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80039ae:	0003      	movs	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d130      	bne.n	8003a16 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80039b4:	4bc4      	ldr	r3, [pc, #784]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b79      	cmp	r3, #121	@ 0x79
 80039bc:	d10b      	bne.n	80039d6 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 80039be:	4ac8      	ldr	r2, [pc, #800]	@ (8003ce0 <UART2_RX_transfer_complete_callback+0xe50>)
 80039c0:	4bc8      	ldr	r3, [pc, #800]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe54>)
 80039c2:	0011      	movs	r1, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fd ff69 	bl	800189c <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80039ca:	4bc0      	ldr	r3, [pc, #768]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 80039cc:	2108      	movs	r1, #8
 80039ce:	0018      	movs	r0, r3
 80039d0:	f002 fff0 	bl	80069b4 <Clear_Status_Bit>
 80039d4:	e01f      	b.n	8003a16 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80039d6:	4bbc      	ldr	r3, [pc, #752]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b7a      	cmp	r3, #122	@ 0x7a
 80039de:	d107      	bne.n	80039f0 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 80039e0:	f7fd ffb6 	bl	8001950 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80039e4:	4bb9      	ldr	r3, [pc, #740]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 80039e6:	2108      	movs	r1, #8
 80039e8:	0018      	movs	r0, r3
 80039ea:	f002 ffe3 	bl	80069b4 <Clear_Status_Bit>
 80039ee:	e012      	b.n	8003a16 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80039f0:	4bb5      	ldr	r3, [pc, #724]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b7c      	cmp	r3, #124	@ 0x7c
 80039f8:	d104      	bne.n	8003a04 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 80039fa:	4bb4      	ldr	r3, [pc, #720]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7fd ffdf 	bl	80019c0 <Set_OMNI_Off>
 8003a02:	e008      	b.n	8003a16 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003a04:	4bb0      	ldr	r3, [pc, #704]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a0c:	d103      	bne.n	8003a16 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003a0e:	4baf      	ldr	r3, [pc, #700]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fd ffe5 	bl	80019e0 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003a16:	4bb4      	ldr	r3, [pc, #720]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003a1c:	4baa      	ldr	r3, [pc, #680]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7fd fea1 	bl	8001766 <Clear_Data_Buffer>
 8003a24:	e2e0      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003a26:	4ba8      	ldr	r3, [pc, #672]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fd fdc1 	bl	80015b0 <Is_Utilised_CC_First_Data_Byte>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d14f      	bne.n	8003ad4 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003a34:	4ba7      	ldr	r3, [pc, #668]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe44>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4ba7      	ldr	r3, [pc, #668]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe48>)
 8003a3c:	0011      	movs	r1, r2
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fd fe40 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003a44:	0003      	movs	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d006      	beq.n	8003a58 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003a4a:	4ba0      	ldr	r3, [pc, #640]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fd fef0 	bl	8001832 <Is_OMNI_On>
 8003a52:	0003      	movs	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d135      	bne.n	8003ac4 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003a58:	4b9b      	ldr	r3, [pc, #620]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b14      	cmp	r3, #20
 8003a60:	d104      	bne.n	8003a6c <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a62:	4b9e      	ldr	r3, [pc, #632]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fd fbbb 	bl	80011e0 <Set_Waveshape_to_CC_Mode_and_Value>
 8003a6a:	e02b      	b.n	8003ac4 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003a6c:	4b96      	ldr	r3, [pc, #600]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b15      	cmp	r3, #21
 8003a74:	d109      	bne.n	8003a8a <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a76:	4b99      	ldr	r3, [pc, #612]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7fd fbcb 	bl	8001214 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003a7e:	4b93      	ldr	r3, [pc, #588]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a80:	2108      	movs	r1, #8
 8003a82:	0018      	movs	r0, r3
 8003a84:	f002 ff96 	bl	80069b4 <Clear_Status_Bit>
 8003a88:	e01c      	b.n	8003ac4 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b16      	cmp	r3, #22
 8003a92:	d104      	bne.n	8003a9e <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a94:	4b91      	ldr	r3, [pc, #580]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fd fbd6 	bl	8001248 <Set_Depth_to_CC_Mode_and_Value>
 8003a9c:	e012      	b.n	8003ac4 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003a9e:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b17      	cmp	r3, #23
 8003aa6:	d104      	bne.n	8003ab2 <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe4c>)
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fd fbe6 	bl	800127c <Set_Symmetry_to_CC_Mode_and_Value>
 8003ab0:	e008      	b.n	8003ac4 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003ab2:	4b85      	ldr	r3, [pc, #532]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b18      	cmp	r3, #24
 8003aba:	d103      	bne.n	8003ac4 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003abc:	4b87      	ldr	r3, [pc, #540]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe4c>)
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7fd fbf6 	bl	80012b0 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003ac4:	4b88      	ldr	r3, [pc, #544]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003aca:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7fd fe4a 	bl	8001766 <Clear_Data_Buffer>
 8003ad2:	e289      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003ad4:	4b84      	ldr	r3, [pc, #528]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003ada:	4b7b      	ldr	r3, [pc, #492]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7fd fe42 	bl	8001766 <Clear_Data_Buffer>
 8003ae2:	e281      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003ae4:	4b78      	ldr	r3, [pc, #480]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7fd fe3d 	bl	8001766 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003aec:	4a77      	ldr	r2, [pc, #476]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003aee:	4b78      	ldr	r3, [pc, #480]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe40>)
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fd feb7 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003af8:	4b72      	ldr	r3, [pc, #456]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fd fcf4 	bl	80014e8 <Is_PC_Status_Byte>
 8003b00:	0003      	movs	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d131      	bne.n	8003b6a <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003b06:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b72      	ldr	r3, [pc, #456]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe48>)
 8003b0e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003b10:	4b70      	ldr	r3, [pc, #448]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe44>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7fd fdd2 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003b20:	0003      	movs	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d10c      	bne.n	8003b40 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003b26:	4b67      	ldr	r3, [pc, #412]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b2e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	005a      	lsls	r2, r3, #1
 8003b34:	4b65      	ldr	r3, [pc, #404]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f002 ff29 	bl	8006990 <Set_Status_Bit>
 8003b3e:	e253      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003b40:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7fd fe75 	bl	8001832 <Is_OMNI_On>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d000      	beq.n	8003b50 <UART2_RX_transfer_complete_callback+0xcc0>
 8003b4e:	e24b      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003b50:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b64      	ldr	r3, [pc, #400]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b58:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	005a      	lsls	r2, r3, #1
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b60:	0011      	movs	r1, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f002 ff14 	bl	8006990 <Set_Status_Bit>
 8003b68:	e23e      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003b6a:	4b56      	ldr	r3, [pc, #344]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fd fcd7 	bl	8001520 <Is_CC_Status_Byte>
 8003b72:	0003      	movs	r3, r0
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d131      	bne.n	8003bdc <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003b78:	4b52      	ldr	r3, [pc, #328]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4b56      	ldr	r3, [pc, #344]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe48>)
 8003b80:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003b82:	4b54      	ldr	r3, [pc, #336]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe44>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fd fd99 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003b92:	0003      	movs	r3, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10c      	bne.n	8003bb2 <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8003b98:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b52      	ldr	r3, [pc, #328]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ba0:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	005a      	lsls	r2, r3, #1
 8003ba6:	4b49      	ldr	r3, [pc, #292]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f002 fef0 	bl	8006990 <Set_Status_Bit>
 8003bb0:	e21a      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003bb2:	4b46      	ldr	r3, [pc, #280]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fd fe3c 	bl	8001832 <Is_OMNI_On>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d000      	beq.n	8003bc2 <UART2_RX_transfer_complete_callback+0xd32>
 8003bc0:	e212      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003bc2:	4b40      	ldr	r3, [pc, #256]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bca:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	005a      	lsls	r2, r3, #1
 8003bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f002 fedb 	bl	8006990 <Set_Status_Bit>
 8003bda:	e205      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003bdc:	4b39      	ldr	r3, [pc, #228]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fd fd60 	bl	80016a4 <Is_Sysex_Start_Status_Byte>
 8003be4:	0003      	movs	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d000      	beq.n	8003bec <UART2_RX_transfer_complete_callback+0xd5c>
 8003bea:	e1fd      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003bec:	4b35      	ldr	r3, [pc, #212]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bf4:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003bf6:	4b38      	ldr	r3, [pc, #224]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe48>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	005a      	lsls	r2, r3, #1
 8003c00:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c02:	0011      	movs	r1, r2
 8003c04:	0018      	movs	r0, r3
 8003c06:	f002 fec3 	bl	8006990 <Set_Status_Bit>
 8003c0a:	e1ed      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003c0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d100      	bne.n	8003c18 <UART2_RX_transfer_complete_callback+0xd88>
 8003c16:	e1e7      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f002 fea1 	bl	8006968 <Get_Status_Bit>
 8003c26:	0003      	movs	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10d      	bne.n	8003c48 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8003c32:	4b25      	ldr	r3, [pc, #148]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fd fd96 	bl	8001766 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003c3a:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c3c:	4b24      	ldr	r3, [pc, #144]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe40>)
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fd fe10 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>
 8003c46:	e1cf      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003c48:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7fd fc33 	bl	80014b6 <Is_Data_Byte>
 8003c50:	0003      	movs	r3, r0
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d000      	beq.n	8003c58 <UART2_RX_transfer_complete_callback+0xdc8>
 8003c56:	e133      	b.n	8003ec0 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8003c58:	4b23      	ldr	r3, [pc, #140]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7fd fc44 	bl	80014e8 <Is_PC_Status_Byte>
 8003c60:	0003      	movs	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d144      	bne.n	8003cf0 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003c66:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7fd fd4c 	bl	8001706 <Is_Data_Buffer_Empty>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d000      	beq.n	8003c76 <UART2_RX_transfer_complete_callback+0xde6>
 8003c74:	e1b8      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003c76:	4b13      	ldr	r3, [pc, #76]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003c78:	2104      	movs	r1, #4
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7fd fd91 	bl	80017a2 <Is_Program_Change_Data_Byte_In_Range>
 8003c80:	0003      	movs	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10f      	bne.n	8003ca6 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 8003c86:	f7fd fb2d 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe34>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <UART2_RX_transfer_complete_callback+0xe5c>)
 8003c96:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003c98:	f7fc fc66 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f002 fe87 	bl	80069b4 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fd fd5c 	bl	8001766 <Clear_Data_Buffer>
							active_status_byte = 0;
 8003cae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe58>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003cb4:	4a05      	ldr	r2, [pc, #20]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe3c>)
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe40>)
 8003cb8:	0011      	movs	r1, r2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fd fdd3 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>
 8003cc0:	e192      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	20000594 	.word	0x20000594
 8003cc8:	20000588 	.word	0x20000588
 8003ccc:	20000cfc 	.word	0x20000cfc
 8003cd0:	20000d04 	.word	0x20000d04
 8003cd4:	20000582 	.word	0x20000582
 8003cd8:	20000584 	.word	0x20000584
 8003cdc:	20000589 	.word	0x20000589
 8003ce0:	20000028 	.word	0x20000028
 8003ce4:	20000d18 	.word	0x20000d18
 8003ce8:	20000583 	.word	0x20000583
 8003cec:	20000554 	.word	0x20000554

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003cf0:	4bc4      	ldr	r3, [pc, #784]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fd fc14 	bl	8001520 <Is_CC_Status_Byte>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d000      	beq.n	8003d00 <UART2_RX_transfer_complete_callback+0xe70>
 8003cfe:	e0d2      	b.n	8003ea6 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003d00:	4bc1      	ldr	r3, [pc, #772]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fd fcff 	bl	8001706 <Is_Data_Buffer_Empty>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d108      	bne.n	8003d20 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003d0e:	4bbf      	ldr	r3, [pc, #764]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4bbc      	ldr	r3, [pc, #752]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d16:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003d18:	4bbd      	ldr	r3, [pc, #756]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1180>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e163      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003d20:	4bba      	ldr	r3, [pc, #744]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4bb8      	ldr	r3, [pc, #736]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d28:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003d2a:	4aba      	ldr	r2, [pc, #744]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003d2c:	4bb8      	ldr	r3, [pc, #736]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1180>)
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7fd fd98 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d36:	4bb7      	ldr	r3, [pc, #732]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003d38:	2108      	movs	r1, #8
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f002 fe3a 	bl	80069b4 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003d40:	4bb1      	ldr	r3, [pc, #708]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fd fc08 	bl	8001558 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d14c      	bne.n	8003de8 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003d4e:	4bb2      	ldr	r3, [pc, #712]	@ (8004018 <UART2_RX_transfer_complete_callback+0x1188>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4bab      	ldr	r3, [pc, #684]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003d56:	0011      	movs	r1, r2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fd fcb3 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d139      	bne.n	8003dd8 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003d64:	4aad      	ldr	r2, [pc, #692]	@ (800401c <UART2_RX_transfer_complete_callback+0x118c>)
 8003d66:	4ba8      	ldr	r3, [pc, #672]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d68:	0011      	movs	r1, r2
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fd fc53 	bl	8001616 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003d70:	0003      	movs	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d130      	bne.n	8003dd8 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003d76:	4ba4      	ldr	r3, [pc, #656]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b79      	cmp	r3, #121	@ 0x79
 8003d7e:	d10b      	bne.n	8003d98 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8003d80:	4aa7      	ldr	r2, [pc, #668]	@ (8004020 <UART2_RX_transfer_complete_callback+0x1190>)
 8003d82:	4ba8      	ldr	r3, [pc, #672]	@ (8004024 <UART2_RX_transfer_complete_callback+0x1194>)
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fd fd88 	bl	800189c <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d8c:	4ba1      	ldr	r3, [pc, #644]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003d8e:	2108      	movs	r1, #8
 8003d90:	0018      	movs	r0, r3
 8003d92:	f002 fe0f 	bl	80069b4 <Clear_Status_Bit>
 8003d96:	e01f      	b.n	8003dd8 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003d98:	4b9b      	ldr	r3, [pc, #620]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d9a:	785b      	ldrb	r3, [r3, #1]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b7a      	cmp	r3, #122	@ 0x7a
 8003da0:	d107      	bne.n	8003db2 <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003da2:	f7fd fdd5 	bl	8001950 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003da6:	4b9b      	ldr	r3, [pc, #620]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003da8:	2108      	movs	r1, #8
 8003daa:	0018      	movs	r0, r3
 8003dac:	f002 fe02 	bl	80069b4 <Clear_Status_Bit>
 8003db0:	e012      	b.n	8003dd8 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003db2:	4b95      	ldr	r3, [pc, #596]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003db4:	785b      	ldrb	r3, [r3, #1]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b7c      	cmp	r3, #124	@ 0x7c
 8003dba:	d104      	bne.n	8003dc6 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003dbc:	4b95      	ldr	r3, [pc, #596]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fd fdfe 	bl	80019c0 <Set_OMNI_Off>
 8003dc4:	e008      	b.n	8003dd8 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003dc6:	4b90      	ldr	r3, [pc, #576]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b7d      	cmp	r3, #125	@ 0x7d
 8003dce:	d103      	bne.n	8003dd8 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003dd0:	4b90      	ldr	r3, [pc, #576]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fd fe04 	bl	80019e0 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003dde:	4b8a      	ldr	r3, [pc, #552]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7fd fcc0 	bl	8001766 <Clear_Data_Buffer>
 8003de6:	e0ff      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003de8:	4b87      	ldr	r3, [pc, #540]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fd fbe0 	bl	80015b0 <Is_Utilised_CC_First_Data_Byte>
 8003df0:	0003      	movs	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d14f      	bne.n	8003e96 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003df6:	4b88      	ldr	r3, [pc, #544]	@ (8004018 <UART2_RX_transfer_complete_callback+0x1188>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	4b81      	ldr	r3, [pc, #516]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003dfe:	0011      	movs	r1, r2
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7fd fc5f 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003e06:	0003      	movs	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d006      	beq.n	8003e1a <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003e0c:	4b81      	ldr	r3, [pc, #516]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fd fd0f 	bl	8001832 <Is_OMNI_On>
 8003e14:	0003      	movs	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d135      	bne.n	8003e86 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b14      	cmp	r3, #20
 8003e22:	d104      	bne.n	8003e2e <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e24:	4b7d      	ldr	r3, [pc, #500]	@ (800401c <UART2_RX_transfer_complete_callback+0x118c>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7fd f9da 	bl	80011e0 <Set_Waveshape_to_CC_Mode_and_Value>
 8003e2c:	e02b      	b.n	8003e86 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003e2e:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b15      	cmp	r3, #21
 8003e36:	d109      	bne.n	8003e4c <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e38:	4b78      	ldr	r3, [pc, #480]	@ (800401c <UART2_RX_transfer_complete_callback+0x118c>)
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fd f9ea 	bl	8001214 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003e40:	4b74      	ldr	r3, [pc, #464]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003e42:	2108      	movs	r1, #8
 8003e44:	0018      	movs	r0, r3
 8003e46:	f002 fdb5 	bl	80069b4 <Clear_Status_Bit>
 8003e4a:	e01c      	b.n	8003e86 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003e4c:	4b6e      	ldr	r3, [pc, #440]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b16      	cmp	r3, #22
 8003e54:	d104      	bne.n	8003e60 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e56:	4b71      	ldr	r3, [pc, #452]	@ (800401c <UART2_RX_transfer_complete_callback+0x118c>)
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7fd f9f5 	bl	8001248 <Set_Depth_to_CC_Mode_and_Value>
 8003e5e:	e012      	b.n	8003e86 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003e60:	4b69      	ldr	r3, [pc, #420]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b17      	cmp	r3, #23
 8003e68:	d104      	bne.n	8003e74 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800401c <UART2_RX_transfer_complete_callback+0x118c>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd fa05 	bl	800127c <Set_Symmetry_to_CC_Mode_and_Value>
 8003e72:	e008      	b.n	8003e86 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003e74:	4b64      	ldr	r3, [pc, #400]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b18      	cmp	r3, #24
 8003e7c:	d103      	bne.n	8003e86 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e7e:	4b67      	ldr	r3, [pc, #412]	@ (800401c <UART2_RX_transfer_complete_callback+0x118c>)
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fd fa15 	bl	80012b0 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003e86:	4b5f      	ldr	r3, [pc, #380]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fd fc69 	bl	8001766 <Clear_Data_Buffer>
 8003e94:	e0a8      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003e96:	4b5b      	ldr	r3, [pc, #364]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e9c:	4b5a      	ldr	r3, [pc, #360]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fd fc61 	bl	8001766 <Clear_Data_Buffer>
 8003ea4:	e0a0      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8003ea6:	4b57      	ldr	r3, [pc, #348]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fd fbfb 	bl	80016a4 <Is_Sysex_Start_Status_Byte>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d000      	beq.n	8003eb6 <UART2_RX_transfer_complete_callback+0x1026>
 8003eb4:	e098      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003eb6:	4b54      	ldr	r3, [pc, #336]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fd fc24 	bl	8001706 <Is_Data_Buffer_Empty>
 8003ebe:	e093      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003ec0:	4b51      	ldr	r3, [pc, #324]	@ (8004008 <UART2_RX_transfer_complete_callback+0x1178>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fd fc4f 	bl	8001766 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003ec8:	4a52      	ldr	r2, [pc, #328]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003eca:	4b51      	ldr	r3, [pc, #324]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1180>)
 8003ecc:	0011      	movs	r1, r2
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fd fcc9 	bl	8001866 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fd fb06 	bl	80014e8 <Is_PC_Status_Byte>
 8003edc:	0003      	movs	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d130      	bne.n	8003f44 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8004028 <UART2_RX_transfer_complete_callback+0x1198>)
 8003eea:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003eec:	4b4a      	ldr	r3, [pc, #296]	@ (8004018 <UART2_RX_transfer_complete_callback+0x1188>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4b46      	ldr	r3, [pc, #280]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7fd fbe4 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003efc:	0003      	movs	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10c      	bne.n	8003f1c <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003f02:	4b42      	ldr	r3, [pc, #264]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b3e      	ldr	r3, [pc, #248]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f0a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f0c:	2380      	movs	r3, #128	@ 0x80
 8003f0e:	005a      	lsls	r2, r3, #1
 8003f10:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f002 fd3b 	bl	8006990 <Set_Status_Bit>
 8003f1a:	e065      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7fd fc87 	bl	8001832 <Is_OMNI_On>
 8003f24:	0003      	movs	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d15e      	bne.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003f2a:	4b38      	ldr	r3, [pc, #224]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f32:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	005a      	lsls	r2, r3, #1
 8003f38:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f002 fd27 	bl	8006990 <Set_Status_Bit>
 8003f42:	e051      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003f44:	4b31      	ldr	r3, [pc, #196]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fd faea 	bl	8001520 <Is_CC_Status_Byte>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d130      	bne.n	8003fb4 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 8003f52:	4b2e      	ldr	r3, [pc, #184]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b33      	ldr	r3, [pc, #204]	@ (8004028 <UART2_RX_transfer_complete_callback+0x1198>)
 8003f5a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004018 <UART2_RX_transfer_complete_callback+0x1188>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f64:	0011      	movs	r1, r2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fd fbac 	bl	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10c      	bne.n	8003f8c <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 8003f72:	4b26      	ldr	r3, [pc, #152]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b22      	ldr	r3, [pc, #136]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f7a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	005a      	lsls	r2, r3, #1
 8003f80:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f002 fd03 	bl	8006990 <Set_Status_Bit>
 8003f8a:	e02d      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003f8c:	4b21      	ldr	r3, [pc, #132]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7fd fc4f 	bl	8001832 <Is_OMNI_On>
 8003f94:	0003      	movs	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d126      	bne.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003fa2:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	005a      	lsls	r2, r3, #1
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f002 fcef 	bl	8006990 <Set_Status_Bit>
 8003fb2:	e019      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003fb4:	4b15      	ldr	r3, [pc, #84]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fd fb74 	bl	80016a4 <Is_Sysex_Start_Status_Byte>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d112      	bne.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1174>)
 8003fca:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003fcc:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <UART2_RX_transfer_complete_callback+0x1198>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003fd2:	2380      	movs	r3, #128	@ 0x80
 8003fd4:	005a      	lsls	r2, r3, #1
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1184>)
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f002 fcd8 	bl	8006990 <Set_Status_Bit>
 8003fe0:	e002      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	e000      	b.n	8003fe8 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003fe6:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003fe8:	4b08      	ldr	r3, [pc, #32]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003fee:	4907      	ldr	r1, [pc, #28]	@ (800400c <UART2_RX_transfer_complete_callback+0x117c>)
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <UART2_RX_transfer_complete_callback+0x119c>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f008 fd73 	bl	800cae0 <HAL_UART_Receive_DMA>
}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	20000583 	.word	0x20000583
 8004008:	20000588 	.word	0x20000588
 800400c:	20000594 	.word	0x20000594
 8004010:	20000d04 	.word	0x20000d04
 8004014:	20000cfc 	.word	0x20000cfc
 8004018:	20000582 	.word	0x20000582
 800401c:	20000589 	.word	0x20000589
 8004020:	20000028 	.word	0x20000028
 8004024:	20000d18 	.word	0x20000d18
 8004028:	20000584 	.word	0x20000584
 800402c:	20000b00 	.word	0x20000b00

08004030 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	0002      	movs	r2, r0
 8004038:	1dbb      	adds	r3, r7, #6
 800403a:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 800403c:	1dbb      	adds	r3, r7, #6
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2b80      	cmp	r3, #128	@ 0x80
 8004042:	d117      	bne.n	8004074 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8004044:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b06      	cmp	r3, #6
 800404c:	d004      	beq.n	8004058 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 800404e:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b07      	cmp	r3, #7
 8004056:	d10d      	bne.n	8004074 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	0099      	lsls	r1, r3, #2
 800405c:	23a0      	movs	r3, #160	@ 0xa0
 800405e:	05db      	lsls	r3, r3, #23
 8004060:	2201      	movs	r2, #1
 8004062:	0018      	movs	r0, r3
 8004064:	f004 fee9 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800406a:	2200      	movs	r2, #0
 800406c:	2140      	movs	r1, #64	@ 0x40
 800406e:	0018      	movs	r0, r3
 8004070:	f004 fee3 	bl	8008e3a <HAL_GPIO_WritePin>
		}
	}
}
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000430 	.word	0x20000430
 8004080:	50000800 	.word	0x50000800

08004084 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	0002      	movs	r2, r0
 800408c:	1dbb      	adds	r3, r7, #6
 800408e:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8004090:	1dbb      	adds	r3, r7, #6
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	2b80      	cmp	r3, #128	@ 0x80
 8004096:	d000      	beq.n	800409a <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8004098:	e0dd      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 800409a:	4b71      	ldr	r3, [pc, #452]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d114      	bne.n	80040ce <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040a4:	2380      	movs	r3, #128	@ 0x80
 80040a6:	0099      	lsls	r1, r3, #2
 80040a8:	23a0      	movs	r3, #160	@ 0xa0
 80040aa:	05db      	lsls	r3, r3, #23
 80040ac:	2200      	movs	r2, #0
 80040ae:	0018      	movs	r0, r3
 80040b0:	f004 fec3 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	2140      	movs	r1, #64	@ 0x40
 80040ba:	0018      	movs	r0, r3
 80040bc:	f004 febd 	bl	8008e3a <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80040c0:	4b67      	ldr	r3, [pc, #412]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80040c6:	4b66      	ldr	r3, [pc, #408]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80040cc:	e0c3      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 80040ce:	4b64      	ldr	r3, [pc, #400]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d114      	bne.n	8004102 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	0099      	lsls	r1, r3, #2
 80040dc:	23a0      	movs	r3, #160	@ 0xa0
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	2200      	movs	r2, #0
 80040e2:	0018      	movs	r0, r3
 80040e4:	f004 fea9 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	2140      	movs	r1, #64	@ 0x40
 80040ee:	0018      	movs	r0, r3
 80040f0:	f004 fea3 	bl	8008e3a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 80040f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040f6:	2203      	movs	r2, #3
 80040f8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80040fa:	4b59      	ldr	r3, [pc, #356]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040fc:	2207      	movs	r2, #7
 80040fe:	701a      	strb	r2, [r3, #0]
}
 8004100:	e0a9      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8004102:	4b57      	ldr	r3, [pc, #348]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d114      	bne.n	8004136 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800410c:	2380      	movs	r3, #128	@ 0x80
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	23a0      	movs	r3, #160	@ 0xa0
 8004112:	05db      	lsls	r3, r3, #23
 8004114:	2200      	movs	r2, #0
 8004116:	0018      	movs	r0, r3
 8004118:	f004 fe8f 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800411c:	4b51      	ldr	r3, [pc, #324]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800411e:	2201      	movs	r2, #1
 8004120:	2140      	movs	r1, #64	@ 0x40
 8004122:	0018      	movs	r0, r3
 8004124:	f004 fe89 	bl	8008e3a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8004128:	4b4d      	ldr	r3, [pc, #308]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800412a:	2202      	movs	r2, #2
 800412c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800412e:	4b4c      	ldr	r3, [pc, #304]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004130:	2207      	movs	r2, #7
 8004132:	701a      	strb	r2, [r3, #0]
}
 8004134:	e08f      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004136:	4b4a      	ldr	r3, [pc, #296]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b04      	cmp	r3, #4
 800413e:	d12b      	bne.n	8004198 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d126      	bne.n	8004198 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 800414a:	4b48      	ldr	r3, [pc, #288]	@ (800426c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800414c:	2120      	movs	r1, #32
 800414e:	0018      	movs	r0, r3
 8004150:	f002 fc0a 	bl	8006968 <Get_Status_Bit>
 8004154:	0003      	movs	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d11e      	bne.n	8004198 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	0099      	lsls	r1, r3, #2
 800415e:	23a0      	movs	r3, #160	@ 0xa0
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	2200      	movs	r2, #0
 8004164:	0018      	movs	r0, r3
 8004166:	f004 fe68 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800416a:	4b3e      	ldr	r3, [pc, #248]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800416c:	2201      	movs	r2, #1
 800416e:	2140      	movs	r1, #64	@ 0x40
 8004170:	0018      	movs	r0, r3
 8004172:	f004 fe62 	bl	8008e3a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8004176:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004178:	2204      	movs	r2, #4
 800417a:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800417c:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800417e:	2207      	movs	r2, #7
 8004180:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004182:	4b3a      	ldr	r3, [pc, #232]	@ (800426c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004184:	2120      	movs	r1, #32
 8004186:	0018      	movs	r0, r3
 8004188:	f002 fc14 	bl	80069b4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800418c:	4b37      	ldr	r3, [pc, #220]	@ (800426c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800418e:	2140      	movs	r1, #64	@ 0x40
 8004190:	0018      	movs	r0, r3
 8004192:	f002 fc0f 	bl	80069b4 <Clear_Status_Bit>
 8004196:	e05e      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004198:	4b31      	ldr	r3, [pc, #196]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d12b      	bne.n	80041fa <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80041a2:	4b31      	ldr	r3, [pc, #196]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d126      	bne.n	80041fa <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80041ac:	4b2f      	ldr	r3, [pc, #188]	@ (800426c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041ae:	2120      	movs	r1, #32
 80041b0:	0018      	movs	r0, r3
 80041b2:	f002 fbd9 	bl	8006968 <Get_Status_Bit>
 80041b6:	0003      	movs	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d11e      	bne.n	80041fa <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	23a0      	movs	r3, #160	@ 0xa0
 80041c2:	05db      	lsls	r3, r3, #23
 80041c4:	2200      	movs	r2, #0
 80041c6:	0018      	movs	r0, r3
 80041c8:	f004 fe37 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041cc:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	2140      	movs	r1, #64	@ 0x40
 80041d2:	0018      	movs	r0, r3
 80041d4:	f004 fe31 	bl	8008e3a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80041d8:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041da:	2208      	movs	r2, #8
 80041dc:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80041de:	4b20      	ldr	r3, [pc, #128]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041e6:	2120      	movs	r1, #32
 80041e8:	0018      	movs	r0, r3
 80041ea:	f002 fbe3 	bl	80069b4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80041ee:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041f0:	2140      	movs	r1, #64	@ 0x40
 80041f2:	0018      	movs	r0, r3
 80041f4:	f002 fbde 	bl	80069b4 <Clear_Status_Bit>
 80041f8:	e02d      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 80041fa:	4b19      	ldr	r3, [pc, #100]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b07      	cmp	r3, #7
 8004202:	d114      	bne.n	800422e <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	0099      	lsls	r1, r3, #2
 8004208:	23a0      	movs	r3, #160	@ 0xa0
 800420a:	05db      	lsls	r3, r3, #23
 800420c:	2200      	movs	r2, #0
 800420e:	0018      	movs	r0, r3
 8004210:	f004 fe13 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004214:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004216:	2201      	movs	r2, #1
 8004218:	2140      	movs	r1, #64	@ 0x40
 800421a:	0018      	movs	r0, r3
 800421c:	f004 fe0d 	bl	8008e3a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004220:	4b0f      	ldr	r3, [pc, #60]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004222:	2207      	movs	r2, #7
 8004224:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004226:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004228:	2206      	movs	r2, #6
 800422a:	701a      	strb	r2, [r3, #0]
}
 800422c:	e013      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 800422e:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b06      	cmp	r3, #6
 8004236:	d10e      	bne.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004238:	2380      	movs	r3, #128	@ 0x80
 800423a:	0099      	lsls	r1, r3, #2
 800423c:	23a0      	movs	r3, #160	@ 0xa0
 800423e:	05db      	lsls	r3, r3, #23
 8004240:	2200      	movs	r2, #0
 8004242:	0018      	movs	r0, r3
 8004244:	f004 fdf9 	bl	8008e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800424a:	2201      	movs	r2, #1
 800424c:	2140      	movs	r1, #64	@ 0x40
 800424e:	0018      	movs	r0, r3
 8004250:	f004 fdf3 	bl	8008e3a <HAL_GPIO_WritePin>
}
 8004254:	e7ff      	b.n	8004256 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	20000430 	.word	0x20000430
 8004264:	50000800 	.word	0x50000800
 8004268:	20000444 	.word	0x20000444
 800426c:	20000cfc 	.word	0x20000cfc

08004270 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	6078      	str	r0, [r7, #4]
	static volatile enum Validate preset_select_mode_is_active = NO;
	static volatile enum Validate save_or_preset_mode_engaged = NO;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8004278:	250f      	movs	r5, #15
 800427a:	197c      	adds	r4, r7, r5
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	00da      	lsls	r2, r3, #3
 8004280:	23a0      	movs	r3, #160	@ 0xa0
 8004282:	05db      	lsls	r3, r3, #23
 8004284:	0011      	movs	r1, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f004 fdba 	bl	8008e00 <HAL_GPIO_ReadPin>
 800428c:	0003      	movs	r3, r0
 800428e:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_active == NO){
 8004290:	4bc2      	ldr	r3, [pc, #776]	@ (800459c <LPTIM1_callback+0x32c>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d000      	beq.n	800429c <LPTIM1_callback+0x2c>
 800429a:	e1a2      	b.n	80045e2 <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 800429c:	4bc0      	ldr	r3, [pc, #768]	@ (80045a0 <LPTIM1_callback+0x330>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10a      	bne.n	80042bc <LPTIM1_callback+0x4c>
 80042a6:	197b      	adds	r3, r7, r5
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042ae:	4bbc      	ldr	r3, [pc, #752]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042b0:	2205      	movs	r2, #5
 80042b2:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80042b4:	4bba      	ldr	r3, [pc, #744]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	705a      	strb	r2, [r3, #1]
 80042ba:	e070      	b.n	800439e <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 80042bc:	4bb8      	ldr	r3, [pc, #736]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d10b      	bne.n	80042de <LPTIM1_callback+0x6e>
 80042c6:	230f      	movs	r3, #15
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042d0:	4bb3      	ldr	r3, [pc, #716]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042d2:	2205      	movs	r2, #5
 80042d4:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 80042d6:	4bb2      	ldr	r3, [pc, #712]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042d8:	2202      	movs	r2, #2
 80042da:	705a      	strb	r2, [r3, #1]
 80042dc:	e05f      	b.n	800439e <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 80042de:	4bb0      	ldr	r3, [pc, #704]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d10b      	bne.n	8004300 <LPTIM1_callback+0x90>
 80042e8:	230f      	movs	r3, #15
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042f2:	4bab      	ldr	r3, [pc, #684]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042f4:	2205      	movs	r2, #5
 80042f6:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 80042f8:	4ba9      	ldr	r3, [pc, #676]	@ (80045a0 <LPTIM1_callback+0x330>)
 80042fa:	2203      	movs	r2, #3
 80042fc:	705a      	strb	r2, [r3, #1]
 80042fe:	e04e      	b.n	800439e <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004300:	4ba7      	ldr	r3, [pc, #668]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b06      	cmp	r3, #6
 8004308:	d122      	bne.n	8004350 <LPTIM1_callback+0xe0>
 800430a:	230f      	movs	r3, #15
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11d      	bne.n	8004350 <LPTIM1_callback+0xe0>
 8004314:	4ba3      	ldr	r3, [pc, #652]	@ (80045a4 <LPTIM1_callback+0x334>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d118      	bne.n	8004350 <LPTIM1_callback+0xe0>
 800431e:	4ba2      	ldr	r3, [pc, #648]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004320:	2120      	movs	r1, #32
 8004322:	0018      	movs	r0, r3
 8004324:	f002 fb20 	bl	8006968 <Get_Status_Bit>
 8004328:	0003      	movs	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d110      	bne.n	8004350 <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800432e:	4b9c      	ldr	r3, [pc, #624]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004330:	2205      	movs	r2, #5
 8004332:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8004334:	4b9a      	ldr	r3, [pc, #616]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004336:	2206      	movs	r2, #6
 8004338:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800433a:	4b9b      	ldr	r3, [pc, #620]	@ (80045a8 <LPTIM1_callback+0x338>)
 800433c:	2120      	movs	r1, #32
 800433e:	0018      	movs	r0, r3
 8004340:	f002 fb38 	bl	80069b4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004344:	4b98      	ldr	r3, [pc, #608]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004346:	2140      	movs	r1, #64	@ 0x40
 8004348:	0018      	movs	r0, r3
 800434a:	f002 fb33 	bl	80069b4 <Clear_Status_Bit>
 800434e:	e026      	b.n	800439e <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004350:	4b93      	ldr	r3, [pc, #588]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b08      	cmp	r3, #8
 8004358:	d121      	bne.n	800439e <LPTIM1_callback+0x12e>
 800435a:	230f      	movs	r3, #15
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11c      	bne.n	800439e <LPTIM1_callback+0x12e>
 8004364:	4b8f      	ldr	r3, [pc, #572]	@ (80045a4 <LPTIM1_callback+0x334>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d117      	bne.n	800439e <LPTIM1_callback+0x12e>
 800436e:	4b8e      	ldr	r3, [pc, #568]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004370:	2120      	movs	r1, #32
 8004372:	0018      	movs	r0, r3
 8004374:	f002 faf8 	bl	8006968 <Get_Status_Bit>
 8004378:	0003      	movs	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10f      	bne.n	800439e <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800437e:	4b88      	ldr	r3, [pc, #544]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004380:	2205      	movs	r2, #5
 8004382:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8004384:	4b86      	ldr	r3, [pc, #536]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004386:	2208      	movs	r2, #8
 8004388:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800438a:	4b87      	ldr	r3, [pc, #540]	@ (80045a8 <LPTIM1_callback+0x338>)
 800438c:	2120      	movs	r1, #32
 800438e:	0018      	movs	r0, r3
 8004390:	f002 fb10 	bl	80069b4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004394:	4b84      	ldr	r3, [pc, #528]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004396:	2140      	movs	r1, #64	@ 0x40
 8004398:	0018      	movs	r0, r3
 800439a:	f002 fb0b 	bl	80069b4 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 800439e:	4b80      	ldr	r3, [pc, #512]	@ (80045a0 <LPTIM1_callback+0x330>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d004      	beq.n	80043b2 <LPTIM1_callback+0x142>
 80043a8:	4b7d      	ldr	r3, [pc, #500]	@ (80045a0 <LPTIM1_callback+0x330>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11a      	bne.n	80043e8 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 80043b2:	4b7e      	ldr	r3, [pc, #504]	@ (80045ac <LPTIM1_callback+0x33c>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	23a0      	movs	r3, #160	@ 0xa0
 80043c2:	05db      	lsls	r3, r3, #23
 80043c4:	2200      	movs	r2, #0
 80043c6:	0018      	movs	r0, r3
 80043c8:	f004 fd37 	bl	8008e3a <HAL_GPIO_WritePin>
 80043cc:	e00c      	b.n	80043e8 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80043ce:	4b77      	ldr	r3, [pc, #476]	@ (80045ac <LPTIM1_callback+0x33c>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	0099      	lsls	r1, r3, #2
 80043dc:	23a0      	movs	r3, #160	@ 0xa0
 80043de:	05db      	lsls	r3, r3, #23
 80043e0:	2201      	movs	r2, #1
 80043e2:	0018      	movs	r0, r3
 80043e4:	f004 fd29 	bl	8008e3a <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 80043e8:	2380      	movs	r3, #128	@ 0x80
 80043ea:	011a      	lsls	r2, r3, #4
 80043ec:	4b6e      	ldr	r3, [pc, #440]	@ (80045a8 <LPTIM1_callback+0x338>)
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f002 fab9 	bl	8006968 <Get_Status_Bit>
 80043f6:	0003      	movs	r3, r0
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d000      	beq.n	80043fe <LPTIM1_callback+0x18e>
 80043fc:	e0c0      	b.n	8004580 <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	011a      	lsls	r2, r3, #4
 8004402:	4b69      	ldr	r3, [pc, #420]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f002 fad4 	bl	80069b4 <Clear_Status_Bit>

			pots_counter = 0;
 800440c:	4b68      	ldr	r3, [pc, #416]	@ (80045b0 <LPTIM1_callback+0x340>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8004412:	4b63      	ldr	r3, [pc, #396]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b03      	cmp	r3, #3
 800441a:	d004      	beq.n	8004426 <LPTIM1_callback+0x1b6>
 800441c:	4b60      	ldr	r3, [pc, #384]	@ (80045a0 <LPTIM1_callback+0x330>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d105      	bne.n	8004432 <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8004426:	4b63      	ldr	r3, [pc, #396]	@ (80045b4 <LPTIM1_callback+0x344>)
 8004428:	2101      	movs	r1, #1
 800442a:	0018      	movs	r0, r3
 800442c:	f7fd faf8 	bl	8001a20 <Pot_Check>
 8004430:	e069      	b.n	8004506 <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8004432:	4b5b      	ldr	r3, [pc, #364]	@ (80045a0 <LPTIM1_callback+0x330>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b06      	cmp	r3, #6
 800443a:	d117      	bne.n	800446c <LPTIM1_callback+0x1fc>
 800443c:	4b59      	ldr	r3, [pc, #356]	@ (80045a4 <LPTIM1_callback+0x334>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d112      	bne.n	800446c <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004446:	4b58      	ldr	r3, [pc, #352]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004448:	2140      	movs	r1, #64	@ 0x40
 800444a:	0018      	movs	r0, r3
 800444c:	f002 faa0 	bl	8006990 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004450:	4b55      	ldr	r3, [pc, #340]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004452:	2120      	movs	r1, #32
 8004454:	0018      	movs	r0, r3
 8004456:	f002 fa87 	bl	8006968 <Get_Status_Bit>
 800445a:	0003      	movs	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d152      	bne.n	8004506 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8004460:	4b54      	ldr	r3, [pc, #336]	@ (80045b4 <LPTIM1_callback+0x344>)
 8004462:	2101      	movs	r1, #1
 8004464:	0018      	movs	r0, r3
 8004466:	f7fd fadb 	bl	8001a20 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 800446a:	e04c      	b.n	8004506 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 800446c:	4b4c      	ldr	r3, [pc, #304]	@ (80045a0 <LPTIM1_callback+0x330>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b08      	cmp	r3, #8
 8004474:	d12b      	bne.n	80044ce <LPTIM1_callback+0x25e>
 8004476:	4b4b      	ldr	r3, [pc, #300]	@ (80045a4 <LPTIM1_callback+0x334>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d126      	bne.n	80044ce <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004480:	4b49      	ldr	r3, [pc, #292]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004482:	2140      	movs	r1, #64	@ 0x40
 8004484:	0018      	movs	r0, r3
 8004486:	f002 fa83 	bl	8006990 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 800448a:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <LPTIM1_callback+0x338>)
 800448c:	2120      	movs	r1, #32
 800448e:	0018      	movs	r0, r3
 8004490:	f002 fa6a 	bl	8006968 <Get_Status_Bit>
 8004494:	0003      	movs	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d135      	bne.n	8004506 <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	0099      	lsls	r1, r3, #2
 800449e:	23a0      	movs	r3, #160	@ 0xa0
 80044a0:	05db      	lsls	r3, r3, #23
 80044a2:	2201      	movs	r2, #1
 80044a4:	0018      	movs	r0, r3
 80044a6:	f004 fcc8 	bl	8008e3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044aa:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <LPTIM1_callback+0x348>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	@ 0x40
 80044b0:	0018      	movs	r0, r3
 80044b2:	f004 fcc2 	bl	8008e3a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 80044b6:	4b41      	ldr	r3, [pc, #260]	@ (80045bc <LPTIM1_callback+0x34c>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 80044bc:	4b40      	ldr	r3, [pc, #256]	@ (80045c0 <LPTIM1_callback+0x350>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80044c2:	4b3c      	ldr	r3, [pc, #240]	@ (80045b4 <LPTIM1_callback+0x344>)
 80044c4:	2101      	movs	r1, #1
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7fd faaa 	bl	8001a20 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044cc:	e01b      	b.n	8004506 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80044ce:	4b34      	ldr	r3, [pc, #208]	@ (80045a0 <LPTIM1_callback+0x330>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d116      	bne.n	8004506 <LPTIM1_callback+0x296>
 80044d8:	4b32      	ldr	r3, [pc, #200]	@ (80045a4 <LPTIM1_callback+0x334>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d111      	bne.n	8004506 <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80044e2:	4b31      	ldr	r3, [pc, #196]	@ (80045a8 <LPTIM1_callback+0x338>)
 80044e4:	2140      	movs	r1, #64	@ 0x40
 80044e6:	0018      	movs	r0, r3
 80044e8:	f002 fa52 	bl	8006990 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044ec:	4b2e      	ldr	r3, [pc, #184]	@ (80045a8 <LPTIM1_callback+0x338>)
 80044ee:	2120      	movs	r1, #32
 80044f0:	0018      	movs	r0, r3
 80044f2:	f002 fa39 	bl	8006968 <Get_Status_Bit>
 80044f6:	0003      	movs	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d104      	bne.n	8004506 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80044fc:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <LPTIM1_callback+0x344>)
 80044fe:	2101      	movs	r1, #1
 8004500:	0018      	movs	r0, r3
 8004502:	f7fd fa8d 	bl	8001a20 <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8004506:	4b2f      	ldr	r3, [pc, #188]	@ (80045c4 <LPTIM1_callback+0x354>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b03      	cmp	r3, #3
 800450e:	d004      	beq.n	800451a <LPTIM1_callback+0x2aa>
 8004510:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <LPTIM1_callback+0x354>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d104      	bne.n	8004524 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 800451a:	4b26      	ldr	r3, [pc, #152]	@ (80045b4 <LPTIM1_callback+0x344>)
 800451c:	2100      	movs	r1, #0
 800451e:	0018      	movs	r0, r3
 8004520:	f7fd fa7e 	bl	8001a20 <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8004524:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <LPTIM1_callback+0x358>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b03      	cmp	r3, #3
 800452c:	d004      	beq.n	8004538 <LPTIM1_callback+0x2c8>
 800452e:	4b26      	ldr	r3, [pc, #152]	@ (80045c8 <LPTIM1_callback+0x358>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d104      	bne.n	8004542 <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8004538:	4b1e      	ldr	r3, [pc, #120]	@ (80045b4 <LPTIM1_callback+0x344>)
 800453a:	2102      	movs	r1, #2
 800453c:	0018      	movs	r0, r3
 800453e:	f7fd fa6f 	bl	8001a20 <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8004542:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <LPTIM1_callback+0x35c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b03      	cmp	r3, #3
 800454a:	d004      	beq.n	8004556 <LPTIM1_callback+0x2e6>
 800454c:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <LPTIM1_callback+0x35c>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d104      	bne.n	8004560 <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8004556:	4b17      	ldr	r3, [pc, #92]	@ (80045b4 <LPTIM1_callback+0x344>)
 8004558:	2103      	movs	r1, #3
 800455a:	0018      	movs	r0, r3
 800455c:	f7fd fa60 	bl	8001a20 <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8004560:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <LPTIM1_callback+0x360>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d004      	beq.n	8004574 <LPTIM1_callback+0x304>
 800456a:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <LPTIM1_callback+0x360>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d136      	bne.n	80045e2 <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8004574:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <LPTIM1_callback+0x344>)
 8004576:	2104      	movs	r1, #4
 8004578:	0018      	movs	r0, r3
 800457a:	f7fd fa51 	bl	8001a20 <Pot_Check>
 800457e:	e030      	b.n	80045e2 <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <LPTIM1_callback+0x340>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b40      	cmp	r3, #64	@ 0x40
 8004588:	d124      	bne.n	80045d4 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	011a      	lsls	r2, r3, #4
 800458e:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <LPTIM1_callback+0x338>)
 8004590:	0011      	movs	r1, r2
 8004592:	0018      	movs	r0, r3
 8004594:	f002 f9fc 	bl	8006990 <Set_Status_Bit>
 8004598:	e023      	b.n	80045e2 <LPTIM1_callback+0x372>
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	20000ce0 	.word	0x20000ce0
 80045a0:	20000430 	.word	0x20000430
 80045a4:	20000444 	.word	0x20000444
 80045a8:	20000cfc 	.word	0x20000cfc
 80045ac:	20000ce4 	.word	0x20000ce4
 80045b0:	2000059a 	.word	0x2000059a
 80045b4:	20000d0c 	.word	0x20000d0c
 80045b8:	50000800 	.word	0x50000800
 80045bc:	20000da8 	.word	0x20000da8
 80045c0:	20000cfa 	.word	0x20000cfa
 80045c4:	20000438 	.word	0x20000438
 80045c8:	20000434 	.word	0x20000434
 80045cc:	2000043c 	.word	0x2000043c
 80045d0:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 80045d4:	4bb5      	ldr	r3, [pc, #724]	@ (80048ac <LPTIM1_callback+0x63c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4bb3      	ldr	r3, [pc, #716]	@ (80048ac <LPTIM1_callback+0x63c>)
 80045e0:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 80045e2:	4bb3      	ldr	r3, [pc, #716]	@ (80048b0 <LPTIM1_callback+0x640>)
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7fd fb3b 	bl	8001c60 <Check_Tap_Tempo_Switch_State>
	static uint64_t depressed_num;
	static enum Preset_Selected preset = PRESET_ONE;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 80045ea:	230e      	movs	r3, #14
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	4ab1      	ldr	r2, [pc, #708]	@ (80048b4 <LPTIM1_callback+0x644>)
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	701a      	strb	r2, [r3, #0]

	if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80045f4:	4bae      	ldr	r3, [pc, #696]	@ (80048b0 <LPTIM1_callback+0x640>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d000      	beq.n	8004600 <LPTIM1_callback+0x390>
 80045fe:	e17d      	b.n	80048fc <LPTIM1_callback+0x68c>

		if((preset_save_mode_is_active == NO) && (preset_select_mode_is_active == NO)){
 8004600:	4bad      	ldr	r3, [pc, #692]	@ (80048b8 <LPTIM1_callback+0x648>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d000      	beq.n	800460c <LPTIM1_callback+0x39c>
 800460a:	e085      	b.n	8004718 <LPTIM1_callback+0x4a8>
 800460c:	4bab      	ldr	r3, [pc, #684]	@ (80048bc <LPTIM1_callback+0x64c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d000      	beq.n	8004618 <LPTIM1_callback+0x3a8>
 8004616:	e07f      	b.n	8004718 <LPTIM1_callback+0x4a8>

			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT)){
 8004618:	4ba9      	ldr	r3, [pc, #676]	@ (80048c0 <LPTIM1_callback+0x650>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <LPTIM1_callback+0x3ba>
 8004622:	d112      	bne.n	800464a <LPTIM1_callback+0x3da>
 8004624:	49a7      	ldr	r1, [pc, #668]	@ (80048c4 <LPTIM1_callback+0x654>)
 8004626:	428a      	cmp	r2, r1
 8004628:	d90f      	bls.n	800464a <LPTIM1_callback+0x3da>
 800462a:	4ba5      	ldr	r3, [pc, #660]	@ (80048c0 <LPTIM1_callback+0x650>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <LPTIM1_callback+0x3da>
 8004634:	d102      	bne.n	800463c <LPTIM1_callback+0x3cc>
 8004636:	49a4      	ldr	r1, [pc, #656]	@ (80048c8 <LPTIM1_callback+0x658>)
 8004638:	428a      	cmp	r2, r1
 800463a:	d806      	bhi.n	800464a <LPTIM1_callback+0x3da>

				preset_select_mode_is_active = YES;
 800463c:	4b9f      	ldr	r3, [pc, #636]	@ (80048bc <LPTIM1_callback+0x64c>)
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
				save_or_preset_mode_engaged = YES;
 8004642:	4ba2      	ldr	r3, [pc, #648]	@ (80048cc <LPTIM1_callback+0x65c>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e017      	b.n	800467a <LPTIM1_callback+0x40a>

			}
			else if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_MAX_COUNT)){
 800464a:	4b9d      	ldr	r3, [pc, #628]	@ (80048c0 <LPTIM1_callback+0x650>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <LPTIM1_callback+0x3ec>
 8004654:	d111      	bne.n	800467a <LPTIM1_callback+0x40a>
 8004656:	499c      	ldr	r1, [pc, #624]	@ (80048c8 <LPTIM1_callback+0x658>)
 8004658:	428a      	cmp	r2, r1
 800465a:	d90e      	bls.n	800467a <LPTIM1_callback+0x40a>
 800465c:	4b98      	ldr	r3, [pc, #608]	@ (80048c0 <LPTIM1_callback+0x650>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <LPTIM1_callback+0x40a>
 8004666:	d102      	bne.n	800466e <LPTIM1_callback+0x3fe>
 8004668:	4999      	ldr	r1, [pc, #612]	@ (80048d0 <LPTIM1_callback+0x660>)
 800466a:	428a      	cmp	r2, r1
 800466c:	d805      	bhi.n	800467a <LPTIM1_callback+0x40a>

				preset_save_mode_is_active = YES;
 800466e:	4b92      	ldr	r3, [pc, #584]	@ (80048b8 <LPTIM1_callback+0x648>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
				save_or_preset_mode_engaged = YES;
 8004674:	4b95      	ldr	r3, [pc, #596]	@ (80048cc <LPTIM1_callback+0x65c>)
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
			}
			if(save_or_preset_mode_engaged == YES){
 800467a:	4b94      	ldr	r3, [pc, #592]	@ (80048cc <LPTIM1_callback+0x65c>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d000      	beq.n	8004686 <LPTIM1_callback+0x416>
 8004684:	e0f9      	b.n	800487a <LPTIM1_callback+0x60a>

				//start counter
				Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	4b92      	ldr	r3, [pc, #584]	@ (80048d4 <LPTIM1_callback+0x664>)
 800468c:	0011      	movs	r1, r2
 800468e:	0018      	movs	r0, r3
 8004690:	f002 f97e 	bl	8006990 <Set_Status_Bit>
				//reset counter
				preset_save_idle_counter = 0;
 8004694:	4b90      	ldr	r3, [pc, #576]	@ (80048d8 <LPTIM1_callback+0x668>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

				depressed_num = 0;
 800469a:	4989      	ldr	r1, [pc, #548]	@ (80048c0 <LPTIM1_callback+0x650>)
 800469c:	2200      	movs	r2, #0
 800469e:	2300      	movs	r3, #0
 80046a0:	600a      	str	r2, [r1, #0]
 80046a2:	604b      	str	r3, [r1, #4]

				led_state_saved = led_state;
 80046a4:	4b8d      	ldr	r3, [pc, #564]	@ (80048dc <LPTIM1_callback+0x66c>)
 80046a6:	220e      	movs	r2, #14
 80046a8:	18ba      	adds	r2, r7, r2
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	701a      	strb	r2, [r3, #0]

				if(preset == PRESET_ONE){
 80046ae:	4b8c      	ldr	r3, [pc, #560]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d108      	bne.n	80046c8 <LPTIM1_callback+0x458>

					Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 80046b6:	4b7f      	ldr	r3, [pc, #508]	@ (80048b4 <LPTIM1_callback+0x644>)
 80046b8:	2103      	movs	r1, #3
 80046ba:	0018      	movs	r0, r3
 80046bc:	f7fc fe94 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_TWO;
 80046c0:	4b87      	ldr	r3, [pc, #540]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
			if(save_or_preset_mode_engaged == YES){
 80046c6:	e0d8      	b.n	800487a <LPTIM1_callback+0x60a>
				}
				else if(preset == PRESET_TWO){
 80046c8:	4b85      	ldr	r3, [pc, #532]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d108      	bne.n	80046e2 <LPTIM1_callback+0x472>

					Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 80046d0:	4b78      	ldr	r3, [pc, #480]	@ (80048b4 <LPTIM1_callback+0x644>)
 80046d2:	2104      	movs	r1, #4
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fc fe87 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_THREE;
 80046da:	4b81      	ldr	r3, [pc, #516]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046dc:	2203      	movs	r2, #3
 80046de:	701a      	strb	r2, [r3, #0]
			if(save_or_preset_mode_engaged == YES){
 80046e0:	e0cb      	b.n	800487a <LPTIM1_callback+0x60a>
				}
				else if(preset == PRESET_THREE){
 80046e2:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d108      	bne.n	80046fc <LPTIM1_callback+0x48c>

					Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 80046ea:	4b72      	ldr	r3, [pc, #456]	@ (80048b4 <LPTIM1_callback+0x644>)
 80046ec:	2105      	movs	r1, #5
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fc fe7a 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_FOUR;
 80046f4:	4b7a      	ldr	r3, [pc, #488]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046f6:	2204      	movs	r2, #4
 80046f8:	701a      	strb	r2, [r3, #0]
			if(save_or_preset_mode_engaged == YES){
 80046fa:	e0be      	b.n	800487a <LPTIM1_callback+0x60a>
				}
				else if(preset == PRESET_FOUR){
 80046fc:	4b78      	ldr	r3, [pc, #480]	@ (80048e0 <LPTIM1_callback+0x670>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d000      	beq.n	8004706 <LPTIM1_callback+0x496>
 8004704:	e0b9      	b.n	800487a <LPTIM1_callback+0x60a>

					Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 8004706:	4b6b      	ldr	r3, [pc, #428]	@ (80048b4 <LPTIM1_callback+0x644>)
 8004708:	2106      	movs	r1, #6
 800470a:	0018      	movs	r0, r3
 800470c:	f7fc fe6c 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_ONE;
 8004710:	4b73      	ldr	r3, [pc, #460]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
			if(save_or_preset_mode_engaged == YES){
 8004716:	e0b0      	b.n	800487a <LPTIM1_callback+0x60a>
				}
			}
		}
		else{ //at least one of preset_save and preset_select active

			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT)){
 8004718:	4b69      	ldr	r3, [pc, #420]	@ (80048c0 <LPTIM1_callback+0x650>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <LPTIM1_callback+0x4bc>
 8004722:	d164      	bne.n	80047ee <LPTIM1_callback+0x57e>
 8004724:	21c8      	movs	r1, #200	@ 0xc8
 8004726:	0049      	lsls	r1, r1, #1
 8004728:	428a      	cmp	r2, r1
 800472a:	d360      	bcc.n	80047ee <LPTIM1_callback+0x57e>
 800472c:	4b64      	ldr	r3, [pc, #400]	@ (80048c0 <LPTIM1_callback+0x650>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d15b      	bne.n	80047ee <LPTIM1_callback+0x57e>
 8004736:	d102      	bne.n	800473e <LPTIM1_callback+0x4ce>
 8004738:	4962      	ldr	r1, [pc, #392]	@ (80048c4 <LPTIM1_callback+0x654>)
 800473a:	428a      	cmp	r2, r1
 800473c:	d857      	bhi.n	80047ee <LPTIM1_callback+0x57e>

				//get correct preset, as it will be 'off by one'
				if(preset == PRESET_ONE){
 800473e:	4b68      	ldr	r3, [pc, #416]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d103      	bne.n	800474e <LPTIM1_callback+0x4de>

					preset = PRESET_FOUR;
 8004746:	4b66      	ldr	r3, [pc, #408]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004748:	2204      	movs	r2, #4
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e016      	b.n	800477c <LPTIM1_callback+0x50c>
				}
				else if(preset == PRESET_TWO){
 800474e:	4b64      	ldr	r3, [pc, #400]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d103      	bne.n	800475e <LPTIM1_callback+0x4ee>

					preset = PRESET_ONE;
 8004756:	4b62      	ldr	r3, [pc, #392]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e00e      	b.n	800477c <LPTIM1_callback+0x50c>
				}
				else if(preset == PRESET_THREE){
 800475e:	4b60      	ldr	r3, [pc, #384]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d103      	bne.n	800476e <LPTIM1_callback+0x4fe>

					preset = PRESET_TWO;
 8004766:	4b5e      	ldr	r3, [pc, #376]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e006      	b.n	800477c <LPTIM1_callback+0x50c>
				}
				else if(preset == PRESET_FOUR){
 800476e:	4b5c      	ldr	r3, [pc, #368]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d102      	bne.n	800477c <LPTIM1_callback+0x50c>

					preset = PRESET_THREE;
 8004776:	4b5a      	ldr	r3, [pc, #360]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004778:	2203      	movs	r2, #3
 800477a:	701a      	strb	r2, [r3, #0]
				}

				if(preset_save_mode_is_active == YES){
 800477c:	4b4e      	ldr	r3, [pc, #312]	@ (80048b8 <LPTIM1_callback+0x648>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d11b      	bne.n	80047be <LPTIM1_callback+0x54e>

					//convert running params to preset, and update user preset and user preset used
					Store_Params_as_User_Preset(preset,
 8004786:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004788:	7818      	ldrb	r0, [r3, #0]
 800478a:	4c56      	ldr	r4, [pc, #344]	@ (80048e4 <LPTIM1_callback+0x674>)
 800478c:	4a56      	ldr	r2, [pc, #344]	@ (80048e8 <LPTIM1_callback+0x678>)
 800478e:	4957      	ldr	r1, [pc, #348]	@ (80048ec <LPTIM1_callback+0x67c>)
 8004790:	4b57      	ldr	r3, [pc, #348]	@ (80048f0 <LPTIM1_callback+0x680>)
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	4b57      	ldr	r3, [pc, #348]	@ (80048f4 <LPTIM1_callback+0x684>)
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	0023      	movs	r3, r4
 800479a:	f7fc fddb 	bl	8001354 <Store_Params_as_User_Preset>
												user_presets_array,
												factory_presets_array,
												presets_converted_array);

					//store presets in flash
					Store_Single_Preset_In_Flash(user_presets_array[(uint8_t)(preset - 1)], (uint8_t)(preset - 1));
 800479e:	4b50      	ldr	r3, [pc, #320]	@ (80048e0 <LPTIM1_callback+0x670>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	001a      	movs	r2, r3
 80047a8:	4b4e      	ldr	r3, [pc, #312]	@ (80048e4 <LPTIM1_callback+0x674>)
 80047aa:	0092      	lsls	r2, r2, #2
 80047ac:	58d2      	ldr	r2, [r2, r3]
 80047ae:	4b4c      	ldr	r3, [pc, #304]	@ (80048e0 <LPTIM1_callback+0x670>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	0019      	movs	r1, r3
 80047b8:	0010      	movs	r0, r2
 80047ba:	f7fc fa13 	bl	8000be4 <Store_Single_Preset_In_Flash>
				}

				Set_to_PC_Mode(preset);
 80047be:	4b48      	ldr	r3, [pc, #288]	@ (80048e0 <LPTIM1_callback+0x670>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fc fdf4 	bl	80013b0 <Set_to_PC_Mode>

				//led confirm - overwrite prev state with saved state
				Set_LED_to_State(&LED_fsm, LED_CONFIRM);
 80047c8:	4b3a      	ldr	r3, [pc, #232]	@ (80048b4 <LPTIM1_callback+0x644>)
 80047ca:	2107      	movs	r1, #7
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fc fe0b 	bl	80013e8 <Set_LED_to_State>
				LED_fsm.prev_state = led_state_saved;
 80047d2:	4b42      	ldr	r3, [pc, #264]	@ (80048dc <LPTIM1_callback+0x66c>)
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <LPTIM1_callback+0x644>)
 80047d8:	705a      	strb	r2, [r3, #1]

				preset = PRESET_ONE;
 80047da:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <LPTIM1_callback+0x670>)
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_active = NO;
 80047e0:	4b35      	ldr	r3, [pc, #212]	@ (80048b8 <LPTIM1_callback+0x648>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
				save_or_preset_mode_engaged = NO;
 80047e6:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <LPTIM1_callback+0x65c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e046      	b.n	800487c <LPTIM1_callback+0x60c>

			}
			else if(((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT))){
 80047ee:	4b34      	ldr	r3, [pc, #208]	@ (80048c0 <LPTIM1_callback+0x650>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <LPTIM1_callback+0x590>
 80047f8:	d140      	bne.n	800487c <LPTIM1_callback+0x60c>
 80047fa:	4932      	ldr	r1, [pc, #200]	@ (80048c4 <LPTIM1_callback+0x654>)
 80047fc:	428a      	cmp	r2, r1
 80047fe:	d93d      	bls.n	800487c <LPTIM1_callback+0x60c>
 8004800:	4b2f      	ldr	r3, [pc, #188]	@ (80048c0 <LPTIM1_callback+0x650>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d138      	bne.n	800487c <LPTIM1_callback+0x60c>
 800480a:	d102      	bne.n	8004812 <LPTIM1_callback+0x5a2>
 800480c:	492e      	ldr	r1, [pc, #184]	@ (80048c8 <LPTIM1_callback+0x658>)
 800480e:	428a      	cmp	r2, r1
 8004810:	d834      	bhi.n	800487c <LPTIM1_callback+0x60c>

				//we want to have advancing through LED blinks, in either preset save or preset select mode, to
				//advance by PRESET_SELECT_MODE_ADVANCE_COUNT

				if(preset == PRESET_ONE){
 8004812:	4b33      	ldr	r3, [pc, #204]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <LPTIM1_callback+0x5bc>

					Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 800481a:	4b26      	ldr	r3, [pc, #152]	@ (80048b4 <LPTIM1_callback+0x644>)
 800481c:	2103      	movs	r1, #3
 800481e:	0018      	movs	r0, r3
 8004820:	f7fc fde2 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_TWO;
 8004824:	4b2e      	ldr	r3, [pc, #184]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004826:	2202      	movs	r2, #2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e027      	b.n	800487c <LPTIM1_callback+0x60c>
				}
				else if(preset == PRESET_TWO){
 800482c:	4b2c      	ldr	r3, [pc, #176]	@ (80048e0 <LPTIM1_callback+0x670>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d108      	bne.n	8004846 <LPTIM1_callback+0x5d6>

					Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 8004834:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <LPTIM1_callback+0x644>)
 8004836:	2104      	movs	r1, #4
 8004838:	0018      	movs	r0, r3
 800483a:	f7fc fdd5 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_THREE;
 800483e:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004840:	2203      	movs	r2, #3
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e01a      	b.n	800487c <LPTIM1_callback+0x60c>
				}
				else if(preset == PRESET_THREE){
 8004846:	4b26      	ldr	r3, [pc, #152]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d108      	bne.n	8004860 <LPTIM1_callback+0x5f0>

					Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 800484e:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <LPTIM1_callback+0x644>)
 8004850:	2105      	movs	r1, #5
 8004852:	0018      	movs	r0, r3
 8004854:	f7fc fdc8 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_FOUR;
 8004858:	4b21      	ldr	r3, [pc, #132]	@ (80048e0 <LPTIM1_callback+0x670>)
 800485a:	2204      	movs	r2, #4
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e00d      	b.n	800487c <LPTIM1_callback+0x60c>
				}
				else if(preset == PRESET_FOUR){
 8004860:	4b1f      	ldr	r3, [pc, #124]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d109      	bne.n	800487c <LPTIM1_callback+0x60c>

					Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 8004868:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <LPTIM1_callback+0x644>)
 800486a:	2106      	movs	r1, #6
 800486c:	0018      	movs	r0, r3
 800486e:	f7fc fdbb 	bl	80013e8 <Set_LED_to_State>
					preset = PRESET_ONE;
 8004872:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <LPTIM1_callback+0x670>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e000      	b.n	800487c <LPTIM1_callback+0x60c>
			if(save_or_preset_mode_engaged == YES){
 800487a:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
		if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 800487c:	4b1e      	ldr	r3, [pc, #120]	@ (80048f8 <LPTIM1_callback+0x688>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b05      	cmp	r3, #5
 8004884:	d10c      	bne.n	80048a0 <LPTIM1_callback+0x630>

			union Speed_FSM_States curr_state = speed_fsm.current_state;
 8004886:	210c      	movs	r1, #12
 8004888:	187b      	adds	r3, r7, r1
 800488a:	4a1b      	ldr	r2, [pc, #108]	@ (80048f8 <LPTIM1_callback+0x688>)
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	701a      	strb	r2, [r3, #0]
			speed_fsm.current_state = speed_fsm.prev_state;
 8004890:	4b19      	ldr	r3, [pc, #100]	@ (80048f8 <LPTIM1_callback+0x688>)
 8004892:	4a19      	ldr	r2, [pc, #100]	@ (80048f8 <LPTIM1_callback+0x688>)
 8004894:	7852      	ldrb	r2, [r2, #1]
 8004896:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state = curr_state;
 8004898:	4b17      	ldr	r3, [pc, #92]	@ (80048f8 <LPTIM1_callback+0x688>)
 800489a:	187a      	adds	r2, r7, r1
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	705a      	strb	r2, [r3, #1]
		}

		depressed_num = 0;
 80048a0:	4907      	ldr	r1, [pc, #28]	@ (80048c0 <LPTIM1_callback+0x650>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	2300      	movs	r3, #0
 80048a6:	600a      	str	r2, [r1, #0]
 80048a8:	604b      	str	r3, [r1, #4]
 80048aa:	e043      	b.n	8004934 <LPTIM1_callback+0x6c4>
 80048ac:	2000059a 	.word	0x2000059a
 80048b0:	20000ce4 	.word	0x20000ce4
 80048b4:	20000448 	.word	0x20000448
 80048b8:	20000ce0 	.word	0x20000ce0
 80048bc:	20000ce6 	.word	0x20000ce6
 80048c0:	20000ce8 	.word	0x20000ce8
 80048c4:	000009c3 	.word	0x000009c3
 80048c8:	00001387 	.word	0x00001387
 80048cc:	20000cf0 	.word	0x20000cf0
 80048d0:	00001b57 	.word	0x00001b57
 80048d4:	20000cfc 	.word	0x20000cfc
 80048d8:	20000d08 	.word	0x20000d08
 80048dc:	20000cf1 	.word	0x20000cf1
 80048e0:	20000025 	.word	0x20000025
 80048e4:	2000050c 	.word	0x2000050c
 80048e8:	20000578 	.word	0x20000578
 80048ec:	20000d18 	.word	0x20000d18
 80048f0:	2000051c 	.word	0x2000051c
 80048f4:	200004fc 	.word	0x200004fc
 80048f8:	20000430 	.word	0x20000430
	}
	else if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 80048fc:	4b26      	ldr	r3, [pc, #152]	@ (8004998 <LPTIM1_callback+0x728>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d116      	bne.n	8004934 <LPTIM1_callback+0x6c4>

		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	4b24      	ldr	r3, [pc, #144]	@ (800499c <LPTIM1_callback+0x72c>)
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f002 f82a 	bl	8006968 <Get_Status_Bit>
 8004914:	0003      	movs	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <LPTIM1_callback+0x6b0>

			preset_save_idle_counter = 0;
 800491a:	4b21      	ldr	r3, [pc, #132]	@ (80049a0 <LPTIM1_callback+0x730>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
		}

		depressed_num++;
 8004920:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <LPTIM1_callback+0x734>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2001      	movs	r0, #1
 8004928:	2100      	movs	r1, #0
 800492a:	1812      	adds	r2, r2, r0
 800492c:	414b      	adcs	r3, r1
 800492e:	491d      	ldr	r1, [pc, #116]	@ (80049a4 <LPTIM1_callback+0x734>)
 8004930:	600a      	str	r2, [r1, #0]
 8004932:	604b      	str	r3, [r1, #4]
	}
	//if preset save timer has timed out, come out of preset save mode
	if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out) == YES){
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	019a      	lsls	r2, r3, #6
 8004938:	4b18      	ldr	r3, [pc, #96]	@ (800499c <LPTIM1_callback+0x72c>)
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f002 f813 	bl	8006968 <Get_Status_Bit>
 8004942:	0003      	movs	r3, r0
 8004944:	2b01      	cmp	r3, #1
 8004946:	d11d      	bne.n	8004984 <LPTIM1_callback+0x714>

		preset = PRESET_ONE;
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <LPTIM1_callback+0x738>)
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
		preset_save_mode_is_active = NO;
 800494e:	4b17      	ldr	r3, [pc, #92]	@ (80049ac <LPTIM1_callback+0x73c>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
		preset_select_mode_is_active = NO;
 8004954:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <LPTIM1_callback+0x740>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
		LED_fsm.prev_state = LED_fsm.current_state;
 800495a:	4b16      	ldr	r3, [pc, #88]	@ (80049b4 <LPTIM1_callback+0x744>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <LPTIM1_callback+0x744>)
 8004962:	705a      	strb	r2, [r3, #1]
		LED_fsm.current_state = led_state_saved;
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <LPTIM1_callback+0x748>)
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <LPTIM1_callback+0x744>)
 800496a:	701a      	strb	r2, [r3, #0]
		depressed_num = 0;
 800496c:	490d      	ldr	r1, [pc, #52]	@ (80049a4 <LPTIM1_callback+0x734>)
 800496e:	2200      	movs	r2, #0
 8004970:	2300      	movs	r3, #0
 8004972:	600a      	str	r2, [r1, #0]
 8004974:	604b      	str	r3, [r1, #4]

		Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	019a      	lsls	r2, r3, #6
 800497a:	4b08      	ldr	r3, [pc, #32]	@ (800499c <LPTIM1_callback+0x72c>)
 800497c:	0011      	movs	r1, r2
 800497e:	0018      	movs	r0, r3
 8004980:	f002 f818 	bl	80069b4 <Clear_Status_Bit>
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004984:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <LPTIM1_callback+0x74c>)
 8004986:	22fa      	movs	r2, #250	@ 0xfa
 8004988:	21fa      	movs	r1, #250	@ 0xfa
 800498a:	0018      	movs	r0, r3
 800498c:	f004 fb4c 	bl	8009028 <HAL_LPTIM_SetOnce_Start_IT>

}
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b004      	add	sp, #16
 8004996:	bdb0      	pop	{r4, r5, r7, pc}
 8004998:	20000ce4 	.word	0x20000ce4
 800499c:	20000cfc 	.word	0x20000cfc
 80049a0:	20000d08 	.word	0x20000d08
 80049a4:	20000ce8 	.word	0x20000ce8
 80049a8:	20000025 	.word	0x20000025
 80049ac:	20000ce0 	.word	0x20000ce0
 80049b0:	20000ce6 	.word	0x20000ce6
 80049b4:	20000448 	.word	0x20000448
 80049b8:	20000cf1 	.word	0x20000cf1
 80049bc:	20000c84 	.word	0x20000c84

080049c0 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]


}
 80049c8:	46c0      	nop			@ (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 80049d8:	4bd1      	ldr	r3, [pc, #836]	@ (8004d20 <TIM14_callback+0x350>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d106      	bne.n	80049f0 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80049e2:	4bd0      	ldr	r3, [pc, #832]	@ (8004d24 <TIM14_callback+0x354>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	2140      	movs	r1, #64	@ 0x40
 80049e8:	0018      	movs	r0, r3
 80049ea:	f004 fa26 	bl	8008e3a <HAL_GPIO_WritePin>

				Set_LED_to_State(&LED_fsm, prev);
			}
		}
	}
}
 80049ee:	e1c3      	b.n	8004d78 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 80049f0:	4bcb      	ldr	r3, [pc, #812]	@ (8004d20 <TIM14_callback+0x350>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d106      	bne.n	8004a08 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80049fa:	4bca      	ldr	r3, [pc, #808]	@ (8004d24 <TIM14_callback+0x354>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	2140      	movs	r1, #64	@ 0x40
 8004a00:	0018      	movs	r0, r3
 8004a02:	f004 fa1a 	bl	8008e3a <HAL_GPIO_WritePin>
}
 8004a06:	e1b7      	b.n	8004d78 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 8004a08:	4bc5      	ldr	r3, [pc, #788]	@ (8004d20 <TIM14_callback+0x350>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d133      	bne.n	8004a7a <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004a12:	4bc5      	ldr	r3, [pc, #788]	@ (8004d28 <TIM14_callback+0x358>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 8004a1a:	4bc4      	ldr	r3, [pc, #784]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004a24:	4bbf      	ldr	r3, [pc, #764]	@ (8004d24 <TIM14_callback+0x354>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	2140      	movs	r1, #64	@ 0x40
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f004 fa05 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004a30:	4bbe      	ldr	r3, [pc, #760]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4bbc      	ldr	r3, [pc, #752]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a3c:	701a      	strb	r2, [r3, #0]
}
 8004a3e:	e19b      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8004a40:	4bba      	ldr	r3, [pc, #744]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d900      	bls.n	8004a4c <TIM14_callback+0x7c>
 8004a4a:	e195      	b.n	8004d78 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a4c:	4bb5      	ldr	r3, [pc, #724]	@ (8004d24 <TIM14_callback+0x354>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2140      	movs	r1, #64	@ 0x40
 8004a52:	0018      	movs	r0, r3
 8004a54:	f004 f9f1 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004a58:	4bb4      	ldr	r3, [pc, #720]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	4bb2      	ldr	r3, [pc, #712]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a64:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 8004a66:	4bb1      	ldr	r3, [pc, #708]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d000      	beq.n	8004a72 <TIM14_callback+0xa2>
 8004a70:	e182      	b.n	8004d78 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004a72:	4bae      	ldr	r3, [pc, #696]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
}
 8004a78:	e17e      	b.n	8004d78 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 8004a7a:	4ba9      	ldr	r3, [pc, #676]	@ (8004d20 <TIM14_callback+0x350>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d156      	bne.n	8004b32 <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004a84:	4ba8      	ldr	r3, [pc, #672]	@ (8004d28 <TIM14_callback+0x358>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8004a8c:	4ba7      	ldr	r3, [pc, #668]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d815      	bhi.n	8004ac2 <TIM14_callback+0xf2>
 8004a96:	4ba5      	ldr	r3, [pc, #660]	@ (8004d2c <TIM14_callback+0x35c>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10d      	bne.n	8004ac2 <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8004d24 <TIM14_callback+0x354>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2140      	movs	r1, #64	@ 0x40
 8004aac:	0018      	movs	r0, r3
 8004aae:	f004 f9c4 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8004d2c <TIM14_callback+0x35c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	4b9b      	ldr	r3, [pc, #620]	@ (8004d2c <TIM14_callback+0x35c>)
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	e15a      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8004ac2:	4b9a      	ldr	r3, [pc, #616]	@ (8004d2c <TIM14_callback+0x35c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d815      	bhi.n	8004af8 <TIM14_callback+0x128>
 8004acc:	4b97      	ldr	r3, [pc, #604]	@ (8004d2c <TIM14_callback+0x35c>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10d      	bne.n	8004af8 <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004adc:	4b91      	ldr	r3, [pc, #580]	@ (8004d24 <TIM14_callback+0x354>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2140      	movs	r1, #64	@ 0x40
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f004 f9a9 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004ae8:	4b90      	ldr	r3, [pc, #576]	@ (8004d2c <TIM14_callback+0x35c>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	3301      	adds	r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4b8e      	ldr	r3, [pc, #568]	@ (8004d2c <TIM14_callback+0x35c>)
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e13f      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8004af8:	4b8c      	ldr	r3, [pc, #560]	@ (8004d2c <TIM14_callback+0x35c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d900      	bls.n	8004b04 <TIM14_callback+0x134>
 8004b02:	e139      	b.n	8004d78 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b04:	4b87      	ldr	r3, [pc, #540]	@ (8004d24 <TIM14_callback+0x354>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	2140      	movs	r1, #64	@ 0x40
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f004 f995 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004b10:	4b86      	ldr	r3, [pc, #536]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b84      	ldr	r3, [pc, #528]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b1c:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004b1e:	4b83      	ldr	r3, [pc, #524]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b07      	cmp	r3, #7
 8004b26:	d000      	beq.n	8004b2a <TIM14_callback+0x15a>
 8004b28:	e126      	b.n	8004d78 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004b2a:	4b80      	ldr	r3, [pc, #512]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
}
 8004b30:	e122      	b.n	8004d78 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004b32:	4b7b      	ldr	r3, [pc, #492]	@ (8004d20 <TIM14_callback+0x350>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d156      	bne.n	8004bea <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004b3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004d28 <TIM14_callback+0x358>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2200      	movs	r2, #0
 8004b42:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004b44:	4b79      	ldr	r3, [pc, #484]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d815      	bhi.n	8004b7a <TIM14_callback+0x1aa>
 8004b4e:	4b77      	ldr	r3, [pc, #476]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004b5e:	4b71      	ldr	r3, [pc, #452]	@ (8004d24 <TIM14_callback+0x354>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	2140      	movs	r1, #64	@ 0x40
 8004b64:	0018      	movs	r0, r3
 8004b66:	f004 f968 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004b6a:	4b70      	ldr	r3, [pc, #448]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	4b6d      	ldr	r3, [pc, #436]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e0fe      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8004b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d815      	bhi.n	8004bb0 <TIM14_callback+0x1e0>
 8004b84:	4b69      	ldr	r3, [pc, #420]	@ (8004d2c <TIM14_callback+0x35c>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10d      	bne.n	8004bb0 <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b94:	4b63      	ldr	r3, [pc, #396]	@ (8004d24 <TIM14_callback+0x354>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	2140      	movs	r1, #64	@ 0x40
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f004 f94d 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004ba0:	4b62      	ldr	r3, [pc, #392]	@ (8004d2c <TIM14_callback+0x35c>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b60      	ldr	r3, [pc, #384]	@ (8004d2c <TIM14_callback+0x35c>)
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e0e3      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 8004bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d2c <TIM14_callback+0x35c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d900      	bls.n	8004bbc <TIM14_callback+0x1ec>
 8004bba:	e0dd      	b.n	8004d78 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004bbc:	4b59      	ldr	r3, [pc, #356]	@ (8004d24 <TIM14_callback+0x354>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2140      	movs	r1, #64	@ 0x40
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f004 f939 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004bc8:	4b58      	ldr	r3, [pc, #352]	@ (8004d2c <TIM14_callback+0x35c>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	3301      	adds	r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b56      	ldr	r3, [pc, #344]	@ (8004d2c <TIM14_callback+0x35c>)
 8004bd4:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004bd6:	4b55      	ldr	r3, [pc, #340]	@ (8004d2c <TIM14_callback+0x35c>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d000      	beq.n	8004be2 <TIM14_callback+0x212>
 8004be0:	e0ca      	b.n	8004d78 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004be2:	4b52      	ldr	r3, [pc, #328]	@ (8004d2c <TIM14_callback+0x35c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
}
 8004be8:	e0c6      	b.n	8004d78 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8004bea:	4b4d      	ldr	r3, [pc, #308]	@ (8004d20 <TIM14_callback+0x350>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b06      	cmp	r3, #6
 8004bf2:	d156      	bne.n	8004ca2 <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8004d28 <TIM14_callback+0x358>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004d2c <TIM14_callback+0x35c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d815      	bhi.n	8004c32 <TIM14_callback+0x262>
 8004c06:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004c16:	4b43      	ldr	r3, [pc, #268]	@ (8004d24 <TIM14_callback+0x354>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2140      	movs	r1, #64	@ 0x40
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f004 f90c 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004c22:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e0a2      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004c32:	4b3e      	ldr	r3, [pc, #248]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d815      	bhi.n	8004c68 <TIM14_callback+0x298>
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10d      	bne.n	8004c68 <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004c4c:	4b35      	ldr	r3, [pc, #212]	@ (8004d24 <TIM14_callback+0x354>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2140      	movs	r1, #64	@ 0x40
 8004c52:	0018      	movs	r0, r3
 8004c54:	f004 f8f1 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004c58:	4b34      	ldr	r3, [pc, #208]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4b32      	ldr	r3, [pc, #200]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e087      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004c68:	4b30      	ldr	r3, [pc, #192]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b0a      	cmp	r3, #10
 8004c70:	d900      	bls.n	8004c74 <TIM14_callback+0x2a4>
 8004c72:	e081      	b.n	8004d78 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004c74:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <TIM14_callback+0x354>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	2140      	movs	r1, #64	@ 0x40
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f004 f8dd 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004c80:	4b2a      	ldr	r3, [pc, #168]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3301      	adds	r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4b28      	ldr	r3, [pc, #160]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c8c:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004c8e:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b0b      	cmp	r3, #11
 8004c96:	d000      	beq.n	8004c9a <TIM14_callback+0x2ca>
 8004c98:	e06e      	b.n	8004d78 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004c9a:	4b24      	ldr	r3, [pc, #144]	@ (8004d2c <TIM14_callback+0x35c>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
}
 8004ca0:	e06a      	b.n	8004d78 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <TIM14_callback+0x350>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b07      	cmp	r3, #7
 8004caa:	d165      	bne.n	8004d78 <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004cac:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <TIM14_callback+0x358>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d2c <TIM14_callback+0x35c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d815      	bhi.n	8004cea <TIM14_callback+0x31a>
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <TIM14_callback+0x35c>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <TIM14_callback+0x354>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2140      	movs	r1, #64	@ 0x40
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f004 f8b0 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004cda:	4b14      	ldr	r3, [pc, #80]	@ (8004d2c <TIM14_callback+0x35c>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <TIM14_callback+0x35c>)
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e046      	b.n	8004d78 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <TIM14_callback+0x35c>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d81d      	bhi.n	8004d30 <TIM14_callback+0x360>
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d2c <TIM14_callback+0x35c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d115      	bne.n	8004d30 <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004d04:	4b07      	ldr	r3, [pc, #28]	@ (8004d24 <TIM14_callback+0x354>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	2140      	movs	r1, #64	@ 0x40
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f004 f895 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <TIM14_callback+0x35c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	3301      	adds	r3, #1
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <TIM14_callback+0x35c>)
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e02b      	b.n	8004d78 <TIM14_callback+0x3a8>
 8004d20:	20000448 	.word	0x20000448
 8004d24:	50000800 	.word	0x50000800
 8004d28:	20000698 	.word	0x20000698
 8004d2c:	20000581 	.word	0x20000581
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <TIM14_callback+0x3b0>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d81e      	bhi.n	8004d78 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <TIM14_callback+0x3b4>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	@ 0x40
 8004d40:	0018      	movs	r0, r3
 8004d42:	f004 f87a 	bl	8008e3a <HAL_GPIO_WritePin>
			LED_counter++;
 8004d46:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <TIM14_callback+0x3b0>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <TIM14_callback+0x3b0>)
 8004d52:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004d54:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <TIM14_callback+0x3b0>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b0b      	cmp	r3, #11
 8004d5c:	d10c      	bne.n	8004d78 <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 8004d5e:	210f      	movs	r1, #15
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	4a09      	ldr	r2, [pc, #36]	@ (8004d88 <TIM14_callback+0x3b8>)
 8004d64:	7852      	ldrb	r2, [r2, #1]
 8004d66:	701a      	strb	r2, [r3, #0]
				Set_LED_to_State(&LED_fsm, prev);
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <TIM14_callback+0x3b8>)
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fc fb39 	bl	80013e8 <Set_LED_to_State>
}
 8004d76:	e7ff      	b.n	8004d78 <TIM14_callback+0x3a8>
 8004d78:	46c0      	nop			@ (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000581 	.word	0x20000581
 8004d84:	50000800 	.word	0x50000800
 8004d88:	20000448 	.word	0x20000448

08004d8c <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	0002      	movs	r2, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	1dbb      	adds	r3, r7, #6
 8004d98:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004d9a:	4b34      	ldr	r3, [pc, #208]	@ (8004e6c <Input_Capture_Processing+0xe0>)
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f001 fe08 	bl	80069b4 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004da4:	1dbb      	adds	r3, r7, #6
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	0018      	movs	r0, r3
 8004dac:	f001 fd91 	bl	80068d2 <isPrime>
 8004db0:	0003      	movs	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d106      	bne.n	8004dc4 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004db6:	1dbb      	adds	r3, r7, #6
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	1dbb      	adds	r3, r7, #6
 8004dc2:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004dc4:	1dbb      	adds	r3, r7, #6
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	019b      	lsls	r3, r3, #6
 8004dcc:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004dce:	2317      	movs	r3, #23
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e02d      	b.n	8004e34 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004dd8:	2317      	movs	r3, #23
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2280      	movs	r2, #128	@ 0x80
 8004de2:	0052      	lsls	r2, r2, #1
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	1dbb      	adds	r3, r7, #6
 8004dea:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004dec:	1dbb      	adds	r3, r7, #6
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	001a      	movs	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	0011      	movs	r1, r2
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fb fa0b 	bl	8000214 <__aeabi_uidivmod>
 8004dfe:	000b      	movs	r3, r1
 8004e00:	001a      	movs	r2, r3
 8004e02:	210e      	movs	r1, #14
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004e08:	187b      	adds	r3, r7, r1
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004e10:	1dbb      	adds	r3, r7, #6
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	0019      	movs	r1, r3
 8004e18:	6938      	ldr	r0, [r7, #16]
 8004e1a:	f7fb f975 	bl	8000108 <__udivsi3>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	835a      	strh	r2, [r3, #26]
			break;
 8004e26:	e00a      	b.n	8004e3e <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004e28:	2117      	movs	r1, #23
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	3201      	adds	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	2317      	movs	r3, #23
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b80      	cmp	r3, #128	@ 0x80
 8004e3c:	d9cc      	bls.n	8004dd8 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8004e3e:	1dbb      	adds	r3, r7, #6
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2280      	movs	r2, #128	@ 0x80
 8004e46:	0052      	lsls	r2, r2, #1
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2101      	movs	r1, #1
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 f9f7 	bl	8005248 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f001 f8f5 	bl	800604c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8004e62:	2301      	movs	r3, #1
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b006      	add	sp, #24
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000cfc 	.word	0x20000cfc

08004e70 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004e76:	1dfc      	adds	r4, r7, #7
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <Start_Input_Capture_Timer+0x30>)
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 f811 	bl	8004ea4 <Start_IC_TIM>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004e86:	1dfb      	adds	r3, r7, #7
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8004e8e:	f7fd fd47 	bl	8002920 <Error_Handler>
	}

	return ok;
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	200008cc 	.word	0x200008cc

08004ea4 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004ea4:	b5b0      	push	{r4, r5, r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8004eae:	250f      	movs	r5, #15
 8004eb0:	197c      	adds	r4, r7, r5
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <Start_IC_TIM+0x50>)
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f005 fb51 	bl	800a55c <HAL_TIM_Base_Start_IT>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <Start_IC_TIM+0x50>)
 8004ec2:	0011      	movs	r1, r2
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f005 ffb7 	bl	800ae38 <HAL_TIM_IC_Start_IT>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	0019      	movs	r1, r3
 8004ece:	197b      	adds	r3, r7, r5
 8004ed0:	197a      	adds	r2, r7, r5
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004ed8:	197b      	adds	r3, r7, r5
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <Start_IC_TIM+0x40>

		Error_Handler();
 8004ee0:	f7fd fd1e 	bl	8002920 <Error_Handler>
	}

	return ok_AND;
 8004ee4:	230f      	movs	r3, #15
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	781b      	ldrb	r3, [r3, #0]
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	200008cc 	.word	0x200008cc

08004ef8 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	0010      	movs	r0, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	2324      	movs	r3, #36	@ 0x24
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	f009 f935 	bl	800e17c <memcpy>

	return 1;
 8004f12:	2301      	movs	r3, #1
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f22:	2100      	movs	r1, #0
 8004f24:	0018      	movs	r0, r3
 8004f26:	f001 fcb8 	bl	800689a <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <Start_Measurement_Reelapse_Timer+0x38>)
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004f3e:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f40:	2100      	movs	r1, #0
 8004f42:	0018      	movs	r0, r3
 8004f44:	f001 fc8d 	bl	8006862 <Start_OC_TIM>

	return 1;
 8004f48:	2301      	movs	r3, #1
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000988 	.word	0x20000988
 8004f54:	20000cf8 	.word	0x20000cf8

08004f58 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004f5c:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <Begin_Input_Capture_Measurement+0x14>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2200      	movs	r2, #0
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004f64:	2301      	movs	r3, #1
}
 8004f66:	0018      	movs	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200008cc 	.word	0x200008cc

08004f70 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004f74:	f7fd fcda 	bl	800292c <System_Init>

	//STARTUP
	Startup();
 8004f78:	f000 fb5c 	bl	8005634 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80050ac <main+0x13c>)
 8004f7e:	2104      	movs	r1, #4
 8004f80:	0018      	movs	r0, r3
 8004f82:	f001 fcf1 	bl	8006968 <Get_Status_Bit>
 8004f86:	0003      	movs	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d107      	bne.n	8004f9c <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004f8c:	4b48      	ldr	r3, [pc, #288]	@ (80050b0 <main+0x140>)
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4a48      	ldr	r2, [pc, #288]	@ (80050b4 <main+0x144>)
 8004f94:	0011      	movs	r1, r2
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff fef8 	bl	8004d8c <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004f9c:	4b43      	ldr	r3, [pc, #268]	@ (80050ac <main+0x13c>)
 8004f9e:	2140      	movs	r1, #64	@ 0x40
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f001 fce1 	bl	8006968 <Get_Status_Bit>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d12b      	bne.n	8005004 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004fac:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <main+0x148>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	23fa      	movs	r3, #250	@ 0xfa
 8004fb2:	01db      	lsls	r3, r3, #7
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d218      	bcs.n	8004fea <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004fb8:	4b40      	ldr	r3, [pc, #256]	@ (80050bc <main+0x14c>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80050ac <main+0x13c>)
 8004fc4:	2140      	movs	r1, #64	@ 0x40
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f001 fcf4 	bl	80069b4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004fcc:	4b37      	ldr	r3, [pc, #220]	@ (80050ac <main+0x13c>)
 8004fce:	2120      	movs	r1, #32
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f001 fcef 	bl	80069b4 <Clear_Status_Bit>
					idle_counter = 0;
 8004fd6:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <main+0x148>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e012      	b.n	8005004 <main+0x94>
				}
				else{

					idle_counter++;
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <main+0x148>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	4b34      	ldr	r3, [pc, #208]	@ (80050b8 <main+0x148>)
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e00c      	b.n	8005004 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004fea:	4b30      	ldr	r3, [pc, #192]	@ (80050ac <main+0x13c>)
 8004fec:	2140      	movs	r1, #64	@ 0x40
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f001 fce0 	bl	80069b4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80050ac <main+0x13c>)
 8004ff6:	2120      	movs	r1, #32
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f001 fcc9 	bl	8006990 <Set_Status_Bit>
				idle_counter = 0;
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80050b8 <main+0x148>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	005a      	lsls	r2, r3, #1
 8005008:	4b28      	ldr	r3, [pc, #160]	@ (80050ac <main+0x13c>)
 800500a:	0011      	movs	r1, r2
 800500c:	0018      	movs	r0, r3
 800500e:	f001 fcab 	bl	8006968 <Get_Status_Bit>
 8005012:	0003      	movs	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d122      	bne.n	800505e <main+0xee>

			if(midi_counter < MIDI_COUNT){
 8005018:	4b29      	ldr	r3, [pc, #164]	@ (80050c0 <main+0x150>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a29      	ldr	r2, [pc, #164]	@ (80050c4 <main+0x154>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d805      	bhi.n	800502e <main+0xbe>

				midi_counter++;
 8005022:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <main+0x150>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	4b25      	ldr	r3, [pc, #148]	@ (80050c0 <main+0x150>)
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e017      	b.n	800505e <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800502e:	2380      	movs	r3, #128	@ 0x80
 8005030:	005a      	lsls	r2, r3, #1
 8005032:	4b1e      	ldr	r3, [pc, #120]	@ (80050ac <main+0x13c>)
 8005034:	0011      	movs	r1, r2
 8005036:	0018      	movs	r0, r3
 8005038:	f001 fcbc 	bl	80069b4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	4b1a      	ldr	r3, [pc, #104]	@ (80050ac <main+0x13c>)
 8005042:	0011      	movs	r1, r2
 8005044:	0018      	movs	r0, r3
 8005046:	f001 fca3 	bl	8006990 <Set_Status_Bit>
				active_status_byte = 0;
 800504a:	4b1f      	ldr	r3, [pc, #124]	@ (80050c8 <main+0x158>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8005050:	4b1e      	ldr	r3, [pc, #120]	@ (80050cc <main+0x15c>)
 8005052:	0018      	movs	r0, r3
 8005054:	f7fc fb87 	bl	8001766 <Clear_Data_Buffer>
				midi_counter = 0;
 8005058:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <main+0x150>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <main+0x13c>)
 8005064:	0011      	movs	r1, r2
 8005066:	0018      	movs	r0, r3
 8005068:	f001 fc7e 	bl	8006968 <Get_Status_Bit>
 800506c:	0003      	movs	r3, r0
 800506e:	2b01      	cmp	r3, #1
 8005070:	d184      	bne.n	8004f7c <main+0xc>

			if(preset_save_idle_counter < PRESET_SAVE_IDLE_COUNT){
 8005072:	4b17      	ldr	r3, [pc, #92]	@ (80050d0 <main+0x160>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a17      	ldr	r2, [pc, #92]	@ (80050d4 <main+0x164>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d805      	bhi.n	8005088 <main+0x118>

				preset_save_idle_counter++;
 800507c:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <main+0x160>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <main+0x160>)
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e779      	b.n	8004f7c <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <main+0x13c>)
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f001 fc8f 	bl	80069b4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	019a      	lsls	r2, r3, #6
 800509a:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <main+0x13c>)
 800509c:	0011      	movs	r1, r2
 800509e:	0018      	movs	r0, r3
 80050a0:	f001 fc76 	bl	8006990 <Set_Status_Bit>
				preset_save_idle_counter = 0;
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <main+0x160>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80050aa:	e767      	b.n	8004f7c <main+0xc>
 80050ac:	20000cfc 	.word	0x20000cfc
 80050b0:	20000cf8 	.word	0x20000cf8
 80050b4:	20000d60 	.word	0x20000d60
 80050b8:	20000d00 	.word	0x20000d00
 80050bc:	20000444 	.word	0x20000444
 80050c0:	20000d04 	.word	0x20000d04
 80050c4:	00030d3f 	.word	0x00030d3f
 80050c8:	20000583 	.word	0x20000583
 80050cc:	20000588 	.word	0x20000588
 80050d0:	20000d08 	.word	0x20000d08
 80050d4:	001c3a8f 	.word	0x001c3a8f

080050d8 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 80050e4:	2417      	movs	r4, #23
 80050e6:	193b      	adds	r3, r7, r4
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f005 f9e8 	bl	800a4c4 <HAL_TIM_Base_Start>
 80050f4:	0003      	movs	r3, r0
 80050f6:	0019      	movs	r1, r3
 80050f8:	193b      	adds	r3, r7, r4
 80050fa:	193a      	adds	r2, r7, r4
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f005 fd49 	bl	800aba0 <HAL_TIM_PWM_Start>
 800510e:	0003      	movs	r3, r0
 8005110:	0019      	movs	r1, r3
 8005112:	193b      	adds	r3, r7, r4
 8005114:	193a      	adds	r2, r7, r4
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0011      	movs	r1, r2
 8005122:	0018      	movs	r0, r3
 8005124:	f005 fd3c 	bl	800aba0 <HAL_TIM_PWM_Start>
 8005128:	0003      	movs	r3, r0
 800512a:	0019      	movs	r1, r3
 800512c:	193b      	adds	r3, r7, r4
 800512e:	193a      	adds	r2, r7, r4
 8005130:	7812      	ldrb	r2, [r2, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8005136:	193b      	adds	r3, r7, r4
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 800513e:	f7fd fbef 	bl	8002920 <Error_Handler>
	}

	return ok_OR;
 8005142:	2317      	movs	r3, #23
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	781b      	ldrb	r3, [r3, #0]
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b007      	add	sp, #28
 800514e:	bd90      	pop	{r4, r7, pc}

08005150 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8005156:	1dfc      	adds	r4, r7, #7
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <Start_Freq_Gen_Timer+0x30>)
 800515a:	2100      	movs	r1, #0
 800515c:	0018      	movs	r0, r3
 800515e:	f001 fb80 	bl	8006862 <Start_OC_TIM>
 8005162:	0003      	movs	r3, r0
 8005164:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005166:	1dfb      	adds	r3, r7, #7
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 800516e:	f7fd fbd7 	bl	8002920 <Error_Handler>
	}

	return ok;
 8005172:	1dfb      	adds	r3, r7, #7
 8005174:	781b      	ldrb	r3, [r3, #0]
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b003      	add	sp, #12
 800517c:	bd90      	pop	{r4, r7, pc}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	20000810 	.word	0x20000810

08005184 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8005190:	210b      	movs	r1, #11
 8005192:	187b      	adds	r3, r7, r1
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	891b      	ldrh	r3, [r3, #8]
 800519c:	b29b      	uxth	r3, r3
 800519e:	001a      	movs	r2, r3
 80051a0:	0013      	movs	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	019b      	lsls	r3, r3, #6
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	09da      	lsrs	r2, r3, #7
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	187b      	adds	r3, r7, r1
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	01db      	lsls	r3, r3, #7
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 80051d4:	187b      	adds	r3, r7, r1
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2280      	movs	r2, #128	@ 0x80
 80051da:	00d2      	lsls	r2, r2, #3
 80051dc:	411a      	asrs	r2, r3
 80051de:	0013      	movs	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	835a      	strh	r2, [r3, #26]

    return 1;
 80051e6:	2301      	movs	r3, #1
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b004      	add	sp, #16
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8b1b      	ldrh	r3, [r3, #24]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <Set_Oscillator_Values+0x50>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8b1b      	ldrh	r3, [r3, #24]
 8005208:	b29b      	uxth	r3, r3
 800520a:	001a      	movs	r2, r3
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <Set_Oscillator_Values+0x50>)
 800520e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8bdb      	ldrh	r3, [r3, #30]
 8005214:	b29a      	uxth	r2, r3
 8005216:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <Set_Oscillator_Values+0x50>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	885b      	ldrh	r3, [r3, #2]
 8005220:	b29a      	uxth	r2, r3
 8005222:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <Set_Oscillator_Values+0x54>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	889b      	ldrh	r3, [r3, #4]
 800522c:	b29a      	uxth	r2, r3
 800522e:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <Set_Oscillator_Values+0x54>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8005234:	2301      	movs	r3, #1
}
 8005236:	0018      	movs	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	b002      	add	sp, #8
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	20000810 	.word	0x20000810
 8005244:	20000a44 	.word	0x20000a44

08005248 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	000a      	movs	r2, r1
 8005252:	1cfb      	adds	r3, r7, #3
 8005254:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 8005256:	1cfb      	adds	r3, r7, #3
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d144      	bne.n	80052e8 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	89db      	ldrh	r3, [r3, #14]
 8005262:	b29b      	uxth	r3, r3
 8005264:	3301      	adds	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	89db      	ldrh	r3, [r3, #14]
 8005270:	b29a      	uxth	r2, r3
 8005272:	2380      	movs	r3, #128	@ 0x80
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	429a      	cmp	r2, r3
 8005278:	d102      	bne.n	8005280 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	89db      	ldrh	r3, [r3, #14]
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	741a      	strb	r2, [r3, #16]
 8005296:	e05a      	b.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	89db      	ldrh	r3, [r3, #14]
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b80      	cmp	r3, #128	@ 0x80
 80052a0:	d106      	bne.n	80052b0 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	741a      	strb	r2, [r3, #16]
 80052ae:	e04e      	b.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	89db      	ldrh	r3, [r3, #14]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d106      	bne.n	80052cc <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	741a      	strb	r2, [r3, #16]
 80052ca:	e040      	b.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	89db      	ldrh	r3, [r3, #14]
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	23c0      	movs	r3, #192	@ 0xc0
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d139      	bne.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	741a      	strb	r2, [r3, #16]
 80052e6:	e032      	b.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 80052e8:	1cfb      	adds	r3, r7, #3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d11f      	bne.n	8005330 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	799b      	ldrb	r3, [r3, #6]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d004      	beq.n	8005304 <Calculate_Next_Main_Oscillator_Values+0xbc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	799b      	ldrb	r3, [r3, #6]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	22a7      	movs	r2, #167	@ 0xa7
 8005308:	0052      	lsls	r2, r2, #1
 800530a:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	741a      	strb	r2, [r3, #16]
 8005318:	e019      	b.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2280      	movs	r2, #128	@ 0x80
 800531e:	0052      	lsls	r2, r2, #1
 8005320:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	741a      	strb	r2, [r3, #16]
 800532e:	e00e      	b.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8005330:	1cfb      	adds	r3, r7, #3
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d10a      	bne.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	89db      	ldrh	r3, [r3, #14]
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	799b      	ldrb	r3, [r3, #6]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	89db      	ldrh	r3, [r3, #14]
 800535c:	b29b      	uxth	r3, r3
 800535e:	001a      	movs	r2, r3
 8005360:	4b31      	ldr	r3, [pc, #196]	@ (8005428 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8005362:	0052      	lsls	r2, r2, #1
 8005364:	5ad2      	ldrh	r2, [r2, r3]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	e029      	b.n	80053c0 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	799b      	ldrb	r3, [r3, #6]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d109      	bne.n	800538a <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	89db      	ldrh	r3, [r3, #14]
 800537a:	b29b      	uxth	r3, r3
 800537c:	001a      	movs	r2, r3
 800537e:	4b2b      	ldr	r3, [pc, #172]	@ (800542c <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8005380:	0052      	lsls	r2, r2, #1
 8005382:	5ad2      	ldrh	r2, [r2, r3]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	e01a      	b.n	80053c0 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	799b      	ldrb	r3, [r3, #6]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d108      	bne.n	80053a6 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	89db      	ldrh	r3, [r3, #14]
 8005398:	b29b      	uxth	r3, r3
 800539a:	2bff      	cmp	r3, #255	@ 0xff
 800539c:	d803      	bhi.n	80053a6 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a23      	ldr	r2, [pc, #140]	@ (8005430 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e00c      	b.n	80053c0 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	799b      	ldrb	r3, [r3, #6]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d107      	bne.n	80053c0 <Calculate_Next_Main_Oscillator_Values+0x178>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	89db      	ldrh	r3, [r3, #14]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2bff      	cmp	r3, #255	@ 0xff
 80053b8:	d902      	bls.n	80053c0 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7a9b      	ldrb	r3, [r3, #10]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053c8:	d108      	bne.n	80053dc <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e01b      	b.n	8005414 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7a9b      	ldrb	r3, [r3, #10]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	001a      	movs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	7a9b      	ldrb	r3, [r3, #10]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4353      	muls	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	09db      	lsrs	r3, r3, #7
 8005400:	b29b      	uxth	r3, r3
 8005402:	4a0b      	ldr	r2, [pc, #44]	@ (8005430 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e002      	b.n	8005414 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a07      	ldr	r2, [pc, #28]	@ (8005430 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005412:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	805a      	strh	r2, [r3, #2]

	return 1;
 800541e:	2301      	movs	r3, #1
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}
 8005428:	0800e5e8 	.word	0x0800e5e8
 800542c:	0800e1e8 	.word	0x0800e1e8
 8005430:	000003ff 	.word	0x000003ff

08005434 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	4a44      	ldr	r2, [pc, #272]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005442:	5a9b      	ldrh	r3, [r3, r2]
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	4a41      	ldr	r2, [pc, #260]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800544e:	5a9b      	ldrh	r3, [r3, r2]
 8005450:	b29b      	uxth	r3, r3
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b299      	uxth	r1, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	0052      	lsls	r2, r2, #1
 800545e:	52d1      	strh	r1, [r2, r3]
 8005460:	e006      	b.n	8005470 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b299      	uxth	r1, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	2380      	movs	r3, #128	@ 0x80
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4a38      	ldr	r2, [pc, #224]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005474:	5a9b      	ldrh	r3, [r3, r2]
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10e      	bne.n	800549a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4a35      	ldr	r2, [pc, #212]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005480:	2180      	movs	r1, #128	@ 0x80
 8005482:	0089      	lsls	r1, r1, #2
 8005484:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	4a33      	ldr	r2, [pc, #204]	@ (8005558 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800548a:	5a9b      	ldrh	r3, [r3, r2]
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b299      	uxth	r1, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4a30      	ldr	r2, [pc, #192]	@ (8005558 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005496:	5299      	strh	r1, [r3, r2]
 8005498:	e026      	b.n	80054e8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	@ (8005558 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800549e:	5a9b      	ldrh	r3, [r3, r2]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10e      	bne.n	80054c4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005558 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054aa:	2180      	movs	r1, #128	@ 0x80
 80054ac:	0089      	lsls	r1, r1, #2
 80054ae:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4a28      	ldr	r2, [pc, #160]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054b4:	5a9b      	ldrh	r3, [r3, r2]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b299      	uxth	r1, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	4a25      	ldr	r2, [pc, #148]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054c0:	5299      	strh	r1, [r3, r2]
 80054c2:	e011      	b.n	80054e8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4a23      	ldr	r2, [pc, #140]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054c8:	5a9b      	ldrh	r3, [r3, r2]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b299      	uxth	r1, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	4a20      	ldr	r2, [pc, #128]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054d4:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054da:	5a9b      	ldrh	r3, [r3, r2]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b299      	uxth	r1, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054e6:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054ec:	5a9b      	ldrh	r3, [r3, r2]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	001a      	movs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	18d2      	adds	r2, r2, r3
 80054fa:	2380      	movs	r3, #128	@ 0x80
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	429a      	cmp	r2, r3
 8005500:	dd13      	ble.n	800552a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4913      	ldr	r1, [pc, #76]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005508:	5a5b      	ldrh	r3, [r3, r1]
 800550a:	b29b      	uxth	r3, r3
 800550c:	0019      	movs	r1, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005512:	b29b      	uxth	r3, r3
 8005514:	18cb      	adds	r3, r1, r3
 8005516:	4911      	ldr	r1, [pc, #68]	@ (800555c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8005518:	468c      	mov	ip, r1
 800551a:	4463      	add	r3, ip
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	18d3      	adds	r3, r2, r3
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	809a      	strh	r2, [r3, #4]
 8005528:	e00f      	b.n	800554a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	4909      	ldr	r1, [pc, #36]	@ (8005554 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005530:	5a5b      	ldrh	r3, [r3, r1]
 8005532:	b29b      	uxth	r3, r3
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800553a:	b29b      	uxth	r3, r3
 800553c:	18cb      	adds	r3, r1, r3
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 800554a:	2301      	movs	r3, #1
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b002      	add	sp, #8
 8005552:	bd80      	pop	{r7, pc}
 8005554:	00000402 	.word	0x00000402
 8005558:	00000404 	.word	0x00000404
 800555c:	7ffffe00 	.word	0x7ffffe00

08005560 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29a      	uxth	r2, r3
 8005570:	2116      	movs	r1, #22
 8005572:	187b      	adds	r3, r7, r1
 8005574:	0952      	lsrs	r2, r2, #5
 8005576:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8005578:	187b      	adds	r3, r7, r1
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	2b2a      	cmp	r3, #42	@ 0x2a
 800557e:	d803      	bhi.n	8005588 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	719a      	strb	r2, [r3, #6]
 8005586:	e010      	b.n	80055aa <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8005588:	2316      	movs	r3, #22
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	2b55      	cmp	r3, #85	@ 0x55
 8005590:	d803      	bhi.n	800559a <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	719a      	strb	r2, [r3, #6]
 8005598:	e007      	b.n	80055aa <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800559a:	2316      	movs	r3, #22
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055a2:	d802      	bhi.n	80055aa <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3302      	adds	r3, #2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	2114      	movs	r1, #20
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	0952      	lsrs	r2, r2, #5
 80055b8:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 80055ba:	187b      	adds	r3, r7, r1
 80055bc:	187a      	adds	r2, r7, r1
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	00d2      	lsls	r2, r2, #3
 80055c2:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	187a      	adds	r2, r7, r1
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	3304      	adds	r3, #4
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	2113      	movs	r1, #19
 80055da:	187b      	adds	r3, r7, r1
 80055dc:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	187a      	adds	r2, r7, r1
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	3306      	adds	r3, #6
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	2110      	movs	r1, #16
 80055f0:	187b      	adds	r3, r7, r1
 80055f2:	0952      	lsrs	r2, r2, #5
 80055f4:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 80055f6:	187a      	adds	r2, r7, r1
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	18db      	adds	r3, r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	187a      	adds	r2, r7, r1
 8005604:	8812      	ldrh	r2, [r2, #0]
 8005606:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29a      	uxth	r2, r3
 8005610:	210e      	movs	r1, #14
 8005612:	187b      	adds	r3, r7, r1
 8005614:	0952      	lsrs	r2, r2, #5
 8005616:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8005618:	187b      	adds	r3, r7, r1
 800561a:	187a      	adds	r2, r7, r1
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	0092      	lsls	r2, r2, #2
 8005620:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	187a      	adds	r2, r7, r1
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800562a:	2301      	movs	r3, #1
}
 800562c:	0018      	movs	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	b006      	add	sp, #24
 8005632:	bd80      	pop	{r7, pc}

08005634 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b085      	sub	sp, #20
 8005638:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800563a:	2007      	movs	r0, #7
 800563c:	f002 fd9b 	bl	8008176 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8005640:	4b5a      	ldr	r3, [pc, #360]	@ (80057ac <Startup+0x178>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b59      	ldr	r3, [pc, #356]	@ (80057ac <Startup+0x178>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2101      	movs	r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8005650:	4b57      	ldr	r3, [pc, #348]	@ (80057b0 <Startup+0x17c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	4b56      	ldr	r3, [pc, #344]	@ (80057b0 <Startup+0x17c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2101      	movs	r1, #1
 800565c:	430a      	orrs	r2, r1
 800565e:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8005660:	2380      	movs	r3, #128	@ 0x80
 8005662:	0099      	lsls	r1, r3, #2
 8005664:	23a0      	movs	r3, #160	@ 0xa0
 8005666:	05db      	lsls	r3, r3, #23
 8005668:	2201      	movs	r2, #1
 800566a:	0018      	movs	r0, r3
 800566c:	f003 fbe5 	bl	8008e3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	0159      	lsls	r1, r3, #5
 8005674:	23a0      	movs	r3, #160	@ 0xa0
 8005676:	05db      	lsls	r3, r3, #23
 8005678:	2201      	movs	r2, #1
 800567a:	0018      	movs	r0, r3
 800567c:	f003 fbdd 	bl	8008e3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8005680:	23a0      	movs	r3, #160	@ 0xa0
 8005682:	05db      	lsls	r3, r3, #23
 8005684:	2200      	movs	r2, #0
 8005686:	2180      	movs	r1, #128	@ 0x80
 8005688:	0018      	movs	r0, r3
 800568a:	f003 fbd6 	bl	8008e3a <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 800568e:	f7fa fedd 	bl	800044c <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8005692:	f7fb fcf3 	bl	800107c <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8005696:	4b47      	ldr	r3, [pc, #284]	@ (80057b4 <Startup+0x180>)
 8005698:	4a47      	ldr	r2, [pc, #284]	@ (80057b8 <Startup+0x184>)
 800569a:	4948      	ldr	r1, [pc, #288]	@ (80057bc <Startup+0x188>)
 800569c:	4c48      	ldr	r4, [pc, #288]	@ (80057c0 <Startup+0x18c>)
 800569e:	2004      	movs	r0, #4
 80056a0:	9000      	str	r0, [sp, #0]
 80056a2:	0020      	movs	r0, r4
 80056a4:	f7fb fbde 	bl	8000e64 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 80056a8:	4b46      	ldr	r3, [pc, #280]	@ (80057c4 <Startup+0x190>)
 80056aa:	4a47      	ldr	r2, [pc, #284]	@ (80057c8 <Startup+0x194>)
 80056ac:	4943      	ldr	r1, [pc, #268]	@ (80057bc <Startup+0x188>)
 80056ae:	4847      	ldr	r0, [pc, #284]	@ (80057cc <Startup+0x198>)
 80056b0:	2404      	movs	r4, #4
 80056b2:	9400      	str	r4, [sp, #0]
 80056b4:	f7fb fc8c 	bl	8000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80056b8:	4b45      	ldr	r3, [pc, #276]	@ (80057d0 <Startup+0x19c>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	001a      	movs	r2, r3
 80056be:	4945      	ldr	r1, [pc, #276]	@ (80057d4 <Startup+0x1a0>)
 80056c0:	4b45      	ldr	r3, [pc, #276]	@ (80057d8 <Startup+0x1a4>)
 80056c2:	0018      	movs	r0, r3
 80056c4:	f001 fe08 	bl	80072d8 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 80056c8:	46c0      	nop			@ (mov r8, r8)
 80056ca:	4b3b      	ldr	r3, [pc, #236]	@ (80057b8 <Startup+0x184>)
 80056cc:	2110      	movs	r1, #16
 80056ce:	0018      	movs	r0, r3
 80056d0:	f001 f94a 	bl	8006968 <Get_Status_Bit>
 80056d4:	1e03      	subs	r3, r0, #0
 80056d6:	d0f8      	beq.n	80056ca <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80056d8:	1dbb      	adds	r3, r7, #6
 80056da:	2200      	movs	r2, #0
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e02c      	b.n	800573a <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 80056e0:	4b3e      	ldr	r3, [pc, #248]	@ (80057dc <Startup+0x1a8>)
 80056e2:	799b      	ldrb	r3, [r3, #6]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d111      	bne.n	800570e <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 80056ea:	4b3c      	ldr	r3, [pc, #240]	@ (80057dc <Startup+0x1a8>)
 80056ec:	7a9b      	ldrb	r3, [r3, #10]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	001a      	movs	r2, r3
 80056f2:	0013      	movs	r3, r2
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	11db      	asrs	r3, r3, #7
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1dba      	adds	r2, r7, #6
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	4937      	ldr	r1, [pc, #220]	@ (80057e0 <Startup+0x1ac>)
 8005702:	1acb      	subs	r3, r1, r3
 8005704:	b299      	uxth	r1, r3
 8005706:	4b37      	ldr	r3, [pc, #220]	@ (80057e4 <Startup+0x1b0>)
 8005708:	0052      	lsls	r2, r2, #1
 800570a:	52d1      	strh	r1, [r2, r3]
 800570c:	e010      	b.n	8005730 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 800570e:	4b33      	ldr	r3, [pc, #204]	@ (80057dc <Startup+0x1a8>)
 8005710:	7a9b      	ldrb	r3, [r3, #10]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	001a      	movs	r2, r3
 8005716:	0013      	movs	r3, r2
 8005718:	029b      	lsls	r3, r3, #10
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	121b      	asrs	r3, r3, #8
 800571e:	b29b      	uxth	r3, r3
 8005720:	1dba      	adds	r2, r7, #6
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	492e      	ldr	r1, [pc, #184]	@ (80057e0 <Startup+0x1ac>)
 8005726:	1acb      	subs	r3, r1, r3
 8005728:	b299      	uxth	r1, r3
 800572a:	4b2e      	ldr	r3, [pc, #184]	@ (80057e4 <Startup+0x1b0>)
 800572c:	0052      	lsls	r2, r2, #1
 800572e:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005730:	1dbb      	adds	r3, r7, #6
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	1dbb      	adds	r3, r7, #6
 8005736:	3201      	adds	r2, #1
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	1dbb      	adds	r3, r7, #6
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	429a      	cmp	r2, r3
 8005744:	d9cc      	bls.n	80056e0 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8005746:	4b25      	ldr	r3, [pc, #148]	@ (80057dc <Startup+0x1a8>)
 8005748:	2102      	movs	r1, #2
 800574a:	0018      	movs	r0, r3
 800574c:	f7ff fd7c 	bl	8005248 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8005750:	4a24      	ldr	r2, [pc, #144]	@ (80057e4 <Startup+0x1b0>)
 8005752:	4b22      	ldr	r3, [pc, #136]	@ (80057dc <Startup+0x1a8>)
 8005754:	0011      	movs	r1, r2
 8005756:	0018      	movs	r0, r3
 8005758:	f7ff fe6c 	bl	8005434 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 800575c:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <Startup+0x1a8>)
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff fd46 	bl	80051f0 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8005764:	4b20      	ldr	r3, [pc, #128]	@ (80057e8 <Startup+0x1b4>)
 8005766:	220c      	movs	r2, #12
 8005768:	2104      	movs	r1, #4
 800576a:	0018      	movs	r0, r3
 800576c:	f7ff fcb4 	bl	80050d8 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8005770:	f7ff fcee 	bl	8005150 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8005774:	f7fc f944 	bl	8001a00 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8005778:	f7ff fb7a 	bl	8004e70 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 800577c:	f001 f8ec 	bl	8006958 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8005780:	4b1a      	ldr	r3, [pc, #104]	@ (80057ec <Startup+0x1b8>)
 8005782:	22fa      	movs	r2, #250	@ 0xfa
 8005784:	21fa      	movs	r1, #250	@ 0xfa
 8005786:	0018      	movs	r0, r3
 8005788:	f003 fc4e 	bl	8009028 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 800578c:	4b18      	ldr	r3, [pc, #96]	@ (80057f0 <Startup+0x1bc>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8005792:	4b18      	ldr	r3, [pc, #96]	@ (80057f4 <Startup+0x1c0>)
 8005794:	2100      	movs	r1, #0
 8005796:	0018      	movs	r0, r3
 8005798:	f001 f863 	bl	8006862 <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800579c:	2007      	movs	r0, #7
 800579e:	f002 fcda 	bl	8008156 <HAL_NVIC_EnableIRQ>

	return 1;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b003      	add	sp, #12
 80057aa:	bd90      	pop	{r4, r7, pc}
 80057ac:	200008cc 	.word	0x200008cc
 80057b0:	20000810 	.word	0x20000810
 80057b4:	20000582 	.word	0x20000582
 80057b8:	20000cfc 	.word	0x20000cfc
 80057bc:	20000578 	.word	0x20000578
 80057c0:	0800f820 	.word	0x0800f820
 80057c4:	2000050c 	.word	0x2000050c
 80057c8:	200004fc 	.word	0x200004fc
 80057cc:	2000051c 	.word	0x2000051c
 80057d0:	0800e9e8 	.word	0x0800e9e8
 80057d4:	20000d0c 	.word	0x20000d0c
 80057d8:	200005b4 	.word	0x200005b4
 80057dc:	20000d18 	.word	0x20000d18
 80057e0:	000003ff 	.word	0x000003ff
 80057e4:	20000028 	.word	0x20000028
 80057e8:	20000a44 	.word	0x20000a44
 80057ec:	20000c84 	.word	0x20000c84
 80057f0:	20000448 	.word	0x20000448
 80057f4:	20000698 	.word	0x20000698

080057f8 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4a12      	ldr	r2, [pc, #72]	@ (800584c <Advance_Pending_States+0x54>)
 8005802:	7812      	ldrb	r2, [r2, #0]
 8005804:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8005806:	4b11      	ldr	r3, [pc, #68]	@ (800584c <Advance_Pending_States+0x54>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b05      	cmp	r3, #5
 800580e:	d103      	bne.n	8005818 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8005810:	4b0e      	ldr	r3, [pc, #56]	@ (800584c <Advance_Pending_States+0x54>)
 8005812:	2204      	movs	r2, #4
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e007      	b.n	8005828 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8005818:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <Advance_Pending_States+0x54>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b07      	cmp	r3, #7
 8005820:	d102      	bne.n	8005828 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8005822:	4b0a      	ldr	r3, [pc, #40]	@ (800584c <Advance_Pending_States+0x54>)
 8005824:	2206      	movs	r2, #6
 8005826:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d007      	beq.n	8005840 <Advance_Pending_States+0x48>
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d003      	beq.n	8005840 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <Advance_Pending_States+0x54>)
 800583a:	1d3a      	adds	r2, r7, #4
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8005840:	2301      	movs	r3, #1
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	20000430 	.word	0x20000430

08005850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005856:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <HAL_MspInit+0x44>)
 8005858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800585a:	4b0e      	ldr	r3, [pc, #56]	@ (8005894 <HAL_MspInit+0x44>)
 800585c:	2101      	movs	r1, #1
 800585e:	430a      	orrs	r2, r1
 8005860:	641a      	str	r2, [r3, #64]	@ 0x40
 8005862:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <HAL_MspInit+0x44>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	2201      	movs	r2, #1
 8005868:	4013      	ands	r3, r2
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <HAL_MspInit+0x44>)
 8005870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005872:	4b08      	ldr	r3, [pc, #32]	@ (8005894 <HAL_MspInit+0x44>)
 8005874:	2180      	movs	r1, #128	@ 0x80
 8005876:	0549      	lsls	r1, r1, #21
 8005878:	430a      	orrs	r2, r1
 800587a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800587c:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_MspInit+0x44>)
 800587e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005880:	2380      	movs	r3, #128	@ 0x80
 8005882:	055b      	lsls	r3, r3, #21
 8005884:	4013      	ands	r3, r2
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b002      	add	sp, #8
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	40021000 	.word	0x40021000

08005898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b08b      	sub	sp, #44	@ 0x2c
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a0:	2414      	movs	r4, #20
 80058a2:	193b      	adds	r3, r7, r4
 80058a4:	0018      	movs	r0, r3
 80058a6:	2314      	movs	r3, #20
 80058a8:	001a      	movs	r2, r3
 80058aa:	2100      	movs	r1, #0
 80058ac:	f008 fc3a 	bl	800e124 <memset>
  if(hadc->Instance==ADC1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005970 <HAL_ADC_MspInit+0xd8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d155      	bne.n	8005966 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80058ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005974 <HAL_ADC_MspInit+0xdc>)
 80058bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058be:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <HAL_ADC_MspInit+0xdc>)
 80058c0:	2180      	movs	r1, #128	@ 0x80
 80058c2:	0349      	lsls	r1, r1, #13
 80058c4:	430a      	orrs	r2, r1
 80058c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80058c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005974 <HAL_ADC_MspInit+0xdc>)
 80058ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	035b      	lsls	r3, r3, #13
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058d6:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <HAL_ADC_MspInit+0xdc>)
 80058d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058da:	4b26      	ldr	r3, [pc, #152]	@ (8005974 <HAL_ADC_MspInit+0xdc>)
 80058dc:	2101      	movs	r1, #1
 80058de:	430a      	orrs	r2, r1
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80058e2:	4b24      	ldr	r3, [pc, #144]	@ (8005974 <HAL_ADC_MspInit+0xdc>)
 80058e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e6:	2201      	movs	r2, #1
 80058e8:	4013      	ands	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80058ee:	193b      	adds	r3, r7, r4
 80058f0:	2273      	movs	r2, #115	@ 0x73
 80058f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058f4:	193b      	adds	r3, r7, r4
 80058f6:	2203      	movs	r2, #3
 80058f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	2200      	movs	r2, #0
 80058fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005900:	193a      	adds	r2, r7, r4
 8005902:	23a0      	movs	r3, #160	@ 0xa0
 8005904:	05db      	lsls	r3, r3, #23
 8005906:	0011      	movs	r1, r2
 8005908:	0018      	movs	r0, r3
 800590a:	f003 f915 	bl	8008b38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800590e:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005910:	4a1a      	ldr	r2, [pc, #104]	@ (800597c <HAL_ADC_MspInit+0xe4>)
 8005912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005914:	4b18      	ldr	r3, [pc, #96]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005916:	2205      	movs	r2, #5
 8005918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800591a:	4b17      	ldr	r3, [pc, #92]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 800591c:	2200      	movs	r2, #0
 800591e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005920:	4b15      	ldr	r3, [pc, #84]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005922:	2200      	movs	r2, #0
 8005924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005926:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005928:	2280      	movs	r2, #128	@ 0x80
 800592a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800592c:	4b12      	ldr	r3, [pc, #72]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 800592e:	2280      	movs	r2, #128	@ 0x80
 8005930:	0052      	lsls	r2, r2, #1
 8005932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005934:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005936:	2280      	movs	r2, #128	@ 0x80
 8005938:	00d2      	lsls	r2, r2, #3
 800593a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800593c:	4b0e      	ldr	r3, [pc, #56]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 800593e:	2200      	movs	r2, #0
 8005940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005944:	2280      	movs	r2, #128	@ 0x80
 8005946:	0192      	lsls	r2, r2, #6
 8005948:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800594a:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 800594c:	0018      	movs	r0, r3
 800594e:	f002 fc2f 	bl	80081b0 <HAL_DMA_Init>
 8005952:	1e03      	subs	r3, r0, #0
 8005954:	d001      	beq.n	800595a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8005956:	f7fc ffe3 	bl	8002920 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a06      	ldr	r2, [pc, #24]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 800595e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_ADC_MspInit+0xe0>)
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b00b      	add	sp, #44	@ 0x2c
 800596c:	bd90      	pop	{r4, r7, pc}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	40012400 	.word	0x40012400
 8005974:	40021000 	.word	0x40021000
 8005978:	2000063c 	.word	0x2000063c
 800597c:	40020008 	.word	0x40020008

08005980 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b097      	sub	sp, #92	@ 0x5c
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005988:	2344      	movs	r3, #68	@ 0x44
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	0018      	movs	r0, r3
 800598e:	2314      	movs	r3, #20
 8005990:	001a      	movs	r2, r3
 8005992:	2100      	movs	r1, #0
 8005994:	f008 fbc6 	bl	800e124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005998:	241c      	movs	r4, #28
 800599a:	193b      	adds	r3, r7, r4
 800599c:	0018      	movs	r0, r3
 800599e:	2328      	movs	r3, #40	@ 0x28
 80059a0:	001a      	movs	r2, r3
 80059a2:	2100      	movs	r1, #0
 80059a4:	f008 fbbe 	bl	800e124 <memset>
  if(hlptim->Instance==LPTIM1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a46      	ldr	r2, [pc, #280]	@ (8005ac8 <HAL_LPTIM_MspInit+0x148>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d13e      	bne.n	8005a30 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80059b2:	193b      	adds	r3, r7, r4
 80059b4:	2280      	movs	r2, #128	@ 0x80
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 80059ba:	193b      	adds	r3, r7, r4
 80059bc:	2200      	movs	r2, #0
 80059be:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059c0:	193b      	adds	r3, r7, r4
 80059c2:	0018      	movs	r0, r3
 80059c4:	f004 fb9e 	bl	800a104 <HAL_RCCEx_PeriphCLKConfig>
 80059c8:	1e03      	subs	r3, r0, #0
 80059ca:	d001      	beq.n	80059d0 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 80059cc:	f7fc ffa8 	bl	8002920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80059d0:	4b3e      	ldr	r3, [pc, #248]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 80059d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059d4:	4b3d      	ldr	r3, [pc, #244]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 80059d6:	2180      	movs	r1, #128	@ 0x80
 80059d8:	0609      	lsls	r1, r1, #24
 80059da:	430a      	orrs	r2, r1
 80059dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059de:	4b3b      	ldr	r3, [pc, #236]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 80059e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e2:	0fdb      	lsrs	r3, r3, #31
 80059e4:	07db      	lsls	r3, r3, #31
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ea:	4b38      	ldr	r3, [pc, #224]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 80059ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ee:	4b37      	ldr	r3, [pc, #220]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 80059f0:	2102      	movs	r1, #2
 80059f2:	430a      	orrs	r2, r1
 80059f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80059f6:	4b35      	ldr	r3, [pc, #212]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	2202      	movs	r2, #2
 80059fc:	4013      	ands	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a02:	2144      	movs	r1, #68	@ 0x44
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0a:	187b      	adds	r3, r7, r1
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a10:	187b      	adds	r3, r7, r1
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	2200      	movs	r2, #0
 8005a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	2205      	movs	r2, #5
 8005a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a22:	187b      	adds	r3, r7, r1
 8005a24:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad0 <HAL_LPTIM_MspInit+0x150>)
 8005a26:	0019      	movs	r1, r3
 8005a28:	0010      	movs	r0, r2
 8005a2a:	f003 f885 	bl	8008b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8005a2e:	e046      	b.n	8005abe <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a27      	ldr	r2, [pc, #156]	@ (8005ad4 <HAL_LPTIM_MspInit+0x154>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d141      	bne.n	8005abe <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8005a3a:	211c      	movs	r1, #28
 8005a3c:	187b      	adds	r3, r7, r1
 8005a3e:	2280      	movs	r2, #128	@ 0x80
 8005a40:	00d2      	lsls	r2, r2, #3
 8005a42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	2200      	movs	r2, #0
 8005a48:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f004 fb59 	bl	800a104 <HAL_RCCEx_PeriphCLKConfig>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8005a56:	f7fc ff63 	bl	8002920 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8005a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 8005a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 8005a60:	2180      	movs	r1, #128	@ 0x80
 8005a62:	05c9      	lsls	r1, r1, #23
 8005a64:	430a      	orrs	r2, r1
 8005a66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a68:	4b18      	ldr	r3, [pc, #96]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 8005a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a6c:	2380      	movs	r3, #128	@ 0x80
 8005a6e:	05db      	lsls	r3, r3, #23
 8005a70:	4013      	ands	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a76:	4b15      	ldr	r3, [pc, #84]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 8005a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a7a:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a82:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <HAL_LPTIM_MspInit+0x14c>)
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	2201      	movs	r2, #1
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005a8e:	2144      	movs	r1, #68	@ 0x44
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	2280      	movs	r2, #128	@ 0x80
 8005a94:	0052      	lsls	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	187b      	adds	r3, r7, r1
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	2205      	movs	r2, #5
 8005aae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab0:	187a      	adds	r2, r7, r1
 8005ab2:	23a0      	movs	r3, #160	@ 0xa0
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f003 f83d 	bl	8008b38 <HAL_GPIO_Init>
}
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b017      	add	sp, #92	@ 0x5c
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	40007c00 	.word	0x40007c00
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	50000400 	.word	0x50000400
 8005ad4:	40009400 	.word	0x40009400

08005ad8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b099      	sub	sp, #100	@ 0x64
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae0:	234c      	movs	r3, #76	@ 0x4c
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	2314      	movs	r3, #20
 8005ae8:	001a      	movs	r2, r3
 8005aea:	2100      	movs	r1, #0
 8005aec:	f008 fb1a 	bl	800e124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005af0:	2424      	movs	r4, #36	@ 0x24
 8005af2:	193b      	adds	r3, r7, r4
 8005af4:	0018      	movs	r0, r3
 8005af6:	2328      	movs	r3, #40	@ 0x28
 8005af8:	001a      	movs	r2, r3
 8005afa:	2100      	movs	r1, #0
 8005afc:	f008 fb12 	bl	800e124 <memset>
  if(htim_base->Instance==TIM1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a68      	ldr	r2, [pc, #416]	@ (8005ca8 <HAL_TIM_Base_MspInit+0x1d0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d11d      	bne.n	8005b46 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8005b0a:	193b      	adds	r3, r7, r4
 8005b0c:	2280      	movs	r2, #128	@ 0x80
 8005b0e:	0392      	lsls	r2, r2, #14
 8005b10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8005b12:	193b      	adds	r3, r7, r4
 8005b14:	2200      	movs	r2, #0
 8005b16:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f004 faf2 	bl	800a104 <HAL_RCCEx_PeriphCLKConfig>
 8005b20:	1e03      	subs	r3, r0, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005b24:	f7fc fefc 	bl	8002920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b28:	4b60      	ldr	r3, [pc, #384]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b2e:	2180      	movs	r1, #128	@ 0x80
 8005b30:	0109      	lsls	r1, r1, #4
 8005b32:	430a      	orrs	r2, r1
 8005b34:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b36:	4b5d      	ldr	r3, [pc, #372]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b3a:	2380      	movs	r3, #128	@ 0x80
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	4013      	ands	r3, r2
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005b44:	e0ab      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	2380      	movs	r3, #128	@ 0x80
 8005b4c:	05db      	lsls	r3, r3, #23
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d138      	bne.n	8005bc4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b52:	4b56      	ldr	r3, [pc, #344]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b56:	4b55      	ldr	r3, [pc, #340]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b58:	2101      	movs	r1, #1
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b5e:	4b53      	ldr	r3, [pc, #332]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	2201      	movs	r2, #1
 8005b64:	4013      	ands	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6a:	4b50      	ldr	r3, [pc, #320]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b70:	2101      	movs	r1, #1
 8005b72:	430a      	orrs	r2, r1
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b76:	4b4d      	ldr	r3, [pc, #308]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
 8005b80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8005b82:	214c      	movs	r1, #76	@ 0x4c
 8005b84:	187b      	adds	r3, r7, r1
 8005b86:	2280      	movs	r2, #128	@ 0x80
 8005b88:	0212      	lsls	r2, r2, #8
 8005b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	2202      	movs	r2, #2
 8005b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	2201      	movs	r2, #1
 8005b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8005ba4:	187a      	adds	r2, r7, r1
 8005ba6:	23a0      	movs	r3, #160	@ 0xa0
 8005ba8:	05db      	lsls	r3, r3, #23
 8005baa:	0011      	movs	r1, r2
 8005bac:	0018      	movs	r0, r3
 8005bae:	f002 ffc3 	bl	8008b38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	200f      	movs	r0, #15
 8005bb8:	f002 fab8 	bl	800812c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005bbc:	200f      	movs	r0, #15
 8005bbe:	f002 faca 	bl	8008156 <HAL_NVIC_EnableIRQ>
}
 8005bc2:	e06c      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a39      	ldr	r2, [pc, #228]	@ (8005cb0 <HAL_TIM_Base_MspInit+0x1d8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d114      	bne.n	8005bf8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bce:	4b37      	ldr	r3, [pc, #220]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005bd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bd2:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005bda:	4b34      	ldr	r3, [pc, #208]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bde:	2202      	movs	r2, #2
 8005be0:	4013      	ands	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	2010      	movs	r0, #16
 8005bec:	f002 fa9e 	bl	800812c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005bf0:	2010      	movs	r0, #16
 8005bf2:	f002 fab0 	bl	8008156 <HAL_NVIC_EnableIRQ>
}
 8005bf6:	e052      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb4 <HAL_TIM_Base_MspInit+0x1dc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d116      	bne.n	8005c30 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005c02:	4b2a      	ldr	r3, [pc, #168]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c06:	4b29      	ldr	r3, [pc, #164]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c08:	2180      	movs	r1, #128	@ 0x80
 8005c0a:	0289      	lsls	r1, r1, #10
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c10:	4b26      	ldr	r3, [pc, #152]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	029b      	lsls	r3, r3, #10
 8005c18:	4013      	ands	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2100      	movs	r1, #0
 8005c22:	2015      	movs	r0, #21
 8005c24:	f002 fa82 	bl	800812c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005c28:	2015      	movs	r0, #21
 8005c2a:	f002 fa94 	bl	8008156 <HAL_NVIC_EnableIRQ>
}
 8005c2e:	e036      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a20      	ldr	r2, [pc, #128]	@ (8005cb8 <HAL_TIM_Base_MspInit+0x1e0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d116      	bne.n	8005c68 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c40:	2180      	movs	r1, #128	@ 0x80
 8005c42:	02c9      	lsls	r1, r1, #11
 8005c44:	430a      	orrs	r2, r1
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c48:	4b18      	ldr	r3, [pc, #96]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	02db      	lsls	r3, r3, #11
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8005c56:	2203      	movs	r2, #3
 8005c58:	2103      	movs	r1, #3
 8005c5a:	2016      	movs	r0, #22
 8005c5c:	f002 fa66 	bl	800812c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005c60:	2016      	movs	r0, #22
 8005c62:	f002 fa78 	bl	8008156 <HAL_NVIC_EnableIRQ>
}
 8005c66:	e01a      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a13      	ldr	r2, [pc, #76]	@ (8005cbc <HAL_TIM_Base_MspInit+0x1e4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d115      	bne.n	8005c9e <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8005c72:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c78:	2180      	movs	r1, #128	@ 0x80
 8005c7a:	0209      	lsls	r1, r1, #8
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c80:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <HAL_TIM_Base_MspInit+0x1d4>)
 8005c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c84:	2380      	movs	r3, #128	@ 0x80
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8005c8e:	2203      	movs	r2, #3
 8005c90:	2103      	movs	r1, #3
 8005c92:	2013      	movs	r0, #19
 8005c94:	f002 fa4a 	bl	800812c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005c98:	2013      	movs	r0, #19
 8005c9a:	f002 fa5c 	bl	8008156 <HAL_NVIC_EnableIRQ>
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b019      	add	sp, #100	@ 0x64
 8005ca4:	bd90      	pop	{r4, r7, pc}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40002000 	.word	0x40002000

08005cc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b08b      	sub	sp, #44	@ 0x2c
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	2414      	movs	r4, #20
 8005cca:	193b      	adds	r3, r7, r4
 8005ccc:	0018      	movs	r0, r3
 8005cce:	2314      	movs	r3, #20
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	f008 fa26 	bl	800e124 <memset>
  if(htim->Instance==TIM1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	@ (8005d74 <HAL_TIM_MspPostInit+0xb4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d144      	bne.n	8005d6c <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce2:	4b25      	ldr	r3, [pc, #148]	@ (8005d78 <HAL_TIM_MspPostInit+0xb8>)
 8005ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ce6:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <HAL_TIM_MspPostInit+0xb8>)
 8005ce8:	2101      	movs	r1, #1
 8005cea:	430a      	orrs	r2, r1
 8005cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8005cee:	4b22      	ldr	r3, [pc, #136]	@ (8005d78 <HAL_TIM_MspPostInit+0xb8>)
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <HAL_TIM_MspPostInit+0xb8>)
 8005cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d78 <HAL_TIM_MspPostInit+0xb8>)
 8005d00:	2102      	movs	r1, #2
 8005d02:	430a      	orrs	r2, r1
 8005d04:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d06:	4b1c      	ldr	r3, [pc, #112]	@ (8005d78 <HAL_TIM_MspPostInit+0xb8>)
 8005d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8005d12:	193b      	adds	r3, r7, r4
 8005d14:	2280      	movs	r2, #128	@ 0x80
 8005d16:	0112      	lsls	r2, r2, #4
 8005d18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1a:	193b      	adds	r3, r7, r4
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d20:	193b      	adds	r3, r7, r4
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d26:	193b      	adds	r3, r7, r4
 8005d28:	2200      	movs	r2, #0
 8005d2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005d2c:	193b      	adds	r3, r7, r4
 8005d2e:	2202      	movs	r2, #2
 8005d30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005d32:	193a      	adds	r2, r7, r4
 8005d34:	23a0      	movs	r3, #160	@ 0xa0
 8005d36:	05db      	lsls	r3, r3, #23
 8005d38:	0011      	movs	r1, r2
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f002 fefc 	bl	8008b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8005d40:	0021      	movs	r1, r4
 8005d42:	187b      	adds	r3, r7, r1
 8005d44:	2208      	movs	r2, #8
 8005d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	2200      	movs	r2, #0
 8005d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	2200      	movs	r2, #0
 8005d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005d5a:	187b      	adds	r3, r7, r1
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005d60:	187b      	adds	r3, r7, r1
 8005d62:	4a06      	ldr	r2, [pc, #24]	@ (8005d7c <HAL_TIM_MspPostInit+0xbc>)
 8005d64:	0019      	movs	r1, r3
 8005d66:	0010      	movs	r0, r2
 8005d68:	f002 fee6 	bl	8008b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005d6c:	46c0      	nop			@ (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b00b      	add	sp, #44	@ 0x2c
 8005d72:	bd90      	pop	{r4, r7, pc}
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	50000400 	.word	0x50000400

08005d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b08b      	sub	sp, #44	@ 0x2c
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d88:	2414      	movs	r4, #20
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	2314      	movs	r3, #20
 8005d90:	001a      	movs	r2, r3
 8005d92:	2100      	movs	r1, #0
 8005d94:	f008 f9c6 	bl	800e124 <memset>
  if(huart->Instance==USART2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ec8 <HAL_UART_MspInit+0x148>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d000      	beq.n	8005da4 <HAL_UART_MspInit+0x24>
 8005da2:	e08d      	b.n	8005ec0 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005da4:	4b49      	ldr	r3, [pc, #292]	@ (8005ecc <HAL_UART_MspInit+0x14c>)
 8005da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da8:	4b48      	ldr	r3, [pc, #288]	@ (8005ecc <HAL_UART_MspInit+0x14c>)
 8005daa:	2180      	movs	r1, #128	@ 0x80
 8005dac:	0289      	lsls	r1, r1, #10
 8005dae:	430a      	orrs	r2, r1
 8005db0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005db2:	4b46      	ldr	r3, [pc, #280]	@ (8005ecc <HAL_UART_MspInit+0x14c>)
 8005db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dc0:	4b42      	ldr	r3, [pc, #264]	@ (8005ecc <HAL_UART_MspInit+0x14c>)
 8005dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dc4:	4b41      	ldr	r3, [pc, #260]	@ (8005ecc <HAL_UART_MspInit+0x14c>)
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ecc <HAL_UART_MspInit+0x14c>)
 8005dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005dd8:	0021      	movs	r1, r4
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	220c      	movs	r2, #12
 8005dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de0:	187b      	adds	r3, r7, r1
 8005de2:	2202      	movs	r2, #2
 8005de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005de6:	187b      	adds	r3, r7, r1
 8005de8:	2201      	movs	r2, #1
 8005dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dec:	187b      	adds	r3, r7, r1
 8005dee:	2200      	movs	r2, #0
 8005df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	2201      	movs	r2, #1
 8005df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df8:	187a      	adds	r2, r7, r1
 8005dfa:	23a0      	movs	r3, #160	@ 0xa0
 8005dfc:	05db      	lsls	r3, r3, #23
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f002 fe99 	bl	8008b38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005e06:	4b32      	ldr	r3, [pc, #200]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e08:	4a32      	ldr	r2, [pc, #200]	@ (8005ed4 <HAL_UART_MspInit+0x154>)
 8005e0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005e0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e0e:	2234      	movs	r2, #52	@ 0x34
 8005e10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e12:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e18:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e20:	2280      	movs	r2, #128	@ 0x80
 8005e22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e24:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e2a:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005e30:	4b27      	ldr	r3, [pc, #156]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e36:	4b26      	ldr	r3, [pc, #152]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e38:	2280      	movs	r2, #128	@ 0x80
 8005e3a:	0152      	lsls	r2, r2, #5
 8005e3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e3e:	4b24      	ldr	r3, [pc, #144]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e40:	0018      	movs	r0, r3
 8005e42:	f002 f9b5 	bl	80081b0 <HAL_DMA_Init>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005e4a:	f7fc fd69 	bl	8002920 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2180      	movs	r1, #128	@ 0x80
 8005e52:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e54:	505a      	str	r2, [r3, r1]
 8005e56:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed0 <HAL_UART_MspInit+0x150>)
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005edc <HAL_UART_MspInit+0x15c>)
 8005e60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005e62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e64:	2235      	movs	r2, #53	@ 0x35
 8005e66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e74:	4b18      	ldr	r3, [pc, #96]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e76:	2280      	movs	r2, #128	@ 0x80
 8005e78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e80:	4b15      	ldr	r3, [pc, #84]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005e86:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e8e:	2280      	movs	r2, #128	@ 0x80
 8005e90:	0152      	lsls	r2, r2, #5
 8005e92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005e96:	0018      	movs	r0, r3
 8005e98:	f002 f98a 	bl	80081b0 <HAL_DMA_Init>
 8005e9c:	1e03      	subs	r3, r0, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8005ea0:	f7fc fd3e 	bl	8002920 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005ea8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <HAL_UART_MspInit+0x158>)
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	201c      	movs	r0, #28
 8005eb6:	f002 f939 	bl	800812c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005eba:	201c      	movs	r0, #28
 8005ebc:	f002 f94b 	bl	8008156 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005ec0:	46c0      	nop			@ (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b00b      	add	sp, #44	@ 0x2c
 8005ec6:	bd90      	pop	{r4, r7, pc}
 8005ec8:	40004400 	.word	0x40004400
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	20000bcc 	.word	0x20000bcc
 8005ed4:	4002001c 	.word	0x4002001c
 8005ed8:	20000c28 	.word	0x20000c28
 8005edc:	40020030 	.word	0x40020030

08005ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ee4:	46c0      	nop			@ (mov r8, r8)
 8005ee6:	e7fd      	b.n	8005ee4 <NMI_Handler+0x4>

08005ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eec:	46c0      	nop			@ (mov r8, r8)
 8005eee:	e7fd      	b.n	8005eec <HardFault_Handler+0x4>

08005ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f08:	f000 fdfc 	bl	8006b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f0c:	46c0      	nop			@ (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005f16:	2080      	movs	r0, #128	@ 0x80
 8005f18:	f002 ffac 	bl	8008e74 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005f1c:	46c0      	nop			@ (mov r8, r8)
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005f28:	4b03      	ldr	r3, [pc, #12]	@ (8005f38 <DMA1_Channel1_IRQHandler+0x14>)
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f002 fb1c 	bl	8008568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005f30:	46c0      	nop			@ (mov r8, r8)
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	2000063c 	.word	0x2000063c

08005f3c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005f42:	0018      	movs	r0, r3
 8005f44:	f002 fb10 	bl	8008568 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005f48:	4b04      	ldr	r3, [pc, #16]	@ (8005f5c <DMA1_Channel2_3_IRQHandler+0x20>)
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f002 fb0c 	bl	8008568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005f50:	46c0      	nop			@ (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	20000bcc 	.word	0x20000bcc
 8005f5c:	20000c28 	.word	0x20000c28

08005f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005f64:	4b03      	ldr	r3, [pc, #12]	@ (8005f74 <TIM2_IRQHandler+0x14>)
 8005f66:	0018      	movs	r0, r3
 8005f68:	f005 f896 	bl	800b098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005f6c:	46c0      	nop			@ (mov r8, r8)
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	200008cc 	.word	0x200008cc

08005f78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f7c:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <TIM3_IRQHandler+0x14>)
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f005 f88a 	bl	800b098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	20000988 	.word	0x20000988

08005f90 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005f94:	4b03      	ldr	r3, [pc, #12]	@ (8005fa4 <TIM16_IRQHandler+0x14>)
 8005f96:	0018      	movs	r0, r3
 8005f98:	f005 f87e 	bl	800b098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005f9c:	46c0      	nop			@ (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	20000810 	.word	0x20000810

08005fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005fac:	4b03      	ldr	r3, [pc, #12]	@ (8005fbc <USART2_IRQHandler+0x14>)
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f006 fdf4 	bl	800cb9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	20000b00 	.word	0x20000b00

08005fc0 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005fc4:	4b03      	ldr	r3, [pc, #12]	@ (8005fd4 <LPTIM1_IRQHandler+0x14>)
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f003 f8c2 	bl	8009150 <HAL_LPTIM_IRQHandler>
}
 8005fcc:	46c0      	nop			@ (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	20000c84 	.word	0x20000c84

08005fd8 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005fdc:	4b03      	ldr	r3, [pc, #12]	@ (8005fec <TIM17_IRQHandler+0x14>)
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f005 f85a 	bl	800b098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	20000754 	.word	0x20000754

08005ff0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005ff4:	4b03      	ldr	r3, [pc, #12]	@ (8006004 <TIM14_IRQHandler+0x14>)
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f005 f84e 	bl	800b098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005ffc:	46c0      	nop			@ (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	20000698 	.word	0x20000698

08006008 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	5c9b      	ldrb	r3, [r3, r2]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d107      	bne.n	800602c <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8b5b      	ldrh	r3, [r3, #26]
 8006020:	b29b      	uxth	r3, r3
 8006022:	18db      	adds	r3, r3, r3
 8006024:	b29a      	uxth	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	839a      	strh	r2, [r3, #28]
 800602a:	e00a      	b.n	8006042 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	5c9b      	ldrb	r3, [r3, r2]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8b5b      	ldrh	r3, [r3, #26]
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8006042:	2301      	movs	r3, #1
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006054:	2317      	movs	r3, #23
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 800605c:	2316      	movs	r3, #22
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8006064:	2315      	movs	r3, #21
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 800606c:	2114      	movs	r1, #20
 800606e:	187b      	adds	r3, r7, r1
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	899b      	ldrh	r3, [r3, #12]
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b7f      	cmp	r3, #127	@ 0x7f
 800607c:	d803      	bhi.n	8006086 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 800607e:	187b      	adds	r3, r7, r1
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e003      	b.n	800608e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8006086:	2314      	movs	r3, #20
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	799b      	ldrb	r3, [r3, #6]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d004      	beq.n	80060a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	799b      	ldrb	r3, [r3, #6]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d146      	bne.n	8006130 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	7c5b      	ldrb	r3, [r3, #17]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7c1b      	ldrb	r3, [r3, #16]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d113      	bne.n	80060e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	7c5b      	ldrb	r3, [r3, #17]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d10e      	bne.n	80060e8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 80060ca:	2314      	movs	r3, #20
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 80060d4:	2316      	movs	r3, #22
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 80060dc:	e027      	b.n	800612e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80060de:	2316      	movs	r3, #22
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 80060e6:	e022      	b.n	800612e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7c1b      	ldrb	r3, [r3, #16]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7c5b      	ldrb	r3, [r3, #17]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d009      	beq.n	8006110 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	7c1b      	ldrb	r3, [r3, #16]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d13c      	bne.n	8006180 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7c5b      	ldrb	r3, [r3, #17]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d137      	bne.n	8006180 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8006110:	2314      	movs	r3, #20
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 800611a:	2316      	movs	r3, #22
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8006122:	e02d      	b.n	8006180 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8006124:	2316      	movs	r3, #22
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	2201      	movs	r2, #1
 800612a:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800612c:	e028      	b.n	8006180 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800612e:	e027      	b.n	8006180 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	799b      	ldrb	r3, [r3, #6]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d123      	bne.n	8006182 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7c1b      	ldrb	r3, [r3, #16]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10e      	bne.n	8006162 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8006144:	2314      	movs	r3, #20
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 800614e:	2316      	movs	r3, #22
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e014      	b.n	8006182 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8006158:	2316      	movs	r3, #22
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	e00f      	b.n	8006182 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8006162:	2314      	movs	r3, #20
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 800616c:	2316      	movs	r3, #22
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e005      	b.n	8006182 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8006176:	2316      	movs	r3, #22
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e000      	b.n	8006182 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8006180:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8006182:	2314      	movs	r3, #20
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	899b      	ldrh	r3, [r3, #12]
 8006190:	b29b      	uxth	r3, r3
 8006192:	b2da      	uxtb	r2, r3
 8006194:	2315      	movs	r3, #21
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	217f      	movs	r1, #127	@ 0x7f
 800619a:	1a8a      	subs	r2, r1, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e007      	b.n	80061b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	899b      	ldrh	r3, [r3, #12]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	2315      	movs	r3, #21
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	3a80      	subs	r2, #128	@ 0x80
 80061ae:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8a5b      	ldrh	r3, [r3, #18]
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	200e      	movs	r0, #14
 80061b8:	183b      	adds	r3, r7, r0
 80061ba:	2180      	movs	r1, #128	@ 0x80
 80061bc:	0049      	lsls	r1, r1, #1
 80061be:	1a8a      	subs	r2, r1, r2
 80061c0:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 80061c2:	0001      	movs	r1, r0
 80061c4:	187b      	adds	r3, r7, r1
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	2215      	movs	r2, #21
 80061ca:	18ba      	adds	r2, r7, r2
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	435a      	muls	r2, r3
 80061d0:	0013      	movs	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	189b      	adds	r3, r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	10da      	asrs	r2, r3, #3
 80061da:	240c      	movs	r4, #12
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 80061e0:	250a      	movs	r5, #10
 80061e2:	197b      	adds	r3, r7, r5
 80061e4:	193a      	adds	r2, r7, r4
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	0a12      	lsrs	r2, r2, #8
 80061ea:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 80061ec:	2312      	movs	r3, #18
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	0008      	movs	r0, r1
 80061f2:	1879      	adds	r1, r7, r1
 80061f4:	197a      	adds	r2, r7, r5
 80061f6:	8809      	ldrh	r1, [r1, #0]
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	1a8a      	subs	r2, r1, r2
 80061fc:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 80061fe:	2610      	movs	r6, #16
 8006200:	19bb      	adds	r3, r7, r6
 8006202:	1839      	adds	r1, r7, r0
 8006204:	197a      	adds	r2, r7, r5
 8006206:	8809      	ldrh	r1, [r1, #0]
 8006208:	8812      	ldrh	r2, [r2, #0]
 800620a:	188a      	adds	r2, r1, r2
 800620c:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800620e:	19bb      	adds	r3, r7, r6
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	2bff      	cmp	r3, #255	@ 0xff
 8006214:	d90f      	bls.n	8006236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8006216:	19bb      	adds	r3, r7, r6
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	429a      	cmp	r2, r3
 8006220:	d000      	beq.n	8006224 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8006222:	e0b0      	b.n	8006386 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8006224:	193b      	adds	r3, r7, r4
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	2108      	movs	r1, #8
 800622a:	0018      	movs	r0, r3
 800622c:	f000 fb80 	bl	8006930 <unsigned_bitwise_modulo>
 8006230:	1e03      	subs	r3, r0, #0
 8006232:	d000      	beq.n	8006236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8006234:	e0a7      	b.n	8006386 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006236:	230c      	movs	r3, #12
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	2108      	movs	r1, #8
 800623e:	0018      	movs	r0, r3
 8006240:	f000 fb76 	bl	8006930 <unsigned_bitwise_modulo>
 8006244:	0003      	movs	r3, r0
 8006246:	2b80      	cmp	r3, #128	@ 0x80
 8006248:	d117      	bne.n	800627a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800624a:	2316      	movs	r3, #22
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8006254:	2317      	movs	r3, #23
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	2202      	movs	r2, #2
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e008      	b.n	8006270 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800625e:	2316      	movs	r3, #22
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d103      	bne.n	8006270 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006268:	2317      	movs	r3, #23
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006278:	e21f      	b.n	80066ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800627a:	230c      	movs	r3, #12
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	2108      	movs	r1, #8
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fb54 	bl	8006930 <unsigned_bitwise_modulo>
 8006288:	1e03      	subs	r3, r0, #0
 800628a:	d121      	bne.n	80062d0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800628c:	2212      	movs	r2, #18
 800628e:	18bb      	adds	r3, r7, r2
 8006290:	18ba      	adds	r2, r7, r2
 8006292:	8812      	ldrh	r2, [r2, #0]
 8006294:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8006296:	2210      	movs	r2, #16
 8006298:	18bb      	adds	r3, r7, r2
 800629a:	18ba      	adds	r2, r7, r2
 800629c:	8812      	ldrh	r2, [r2, #0]
 800629e:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80062a0:	2316      	movs	r3, #22
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062aa:	2317      	movs	r3, #23
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	e008      	b.n	80062c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80062b4:	2316      	movs	r3, #22
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d103      	bne.n	80062c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062be:	2317      	movs	r3, #23
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	2100      	movs	r1, #0
 80062cc:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80062ce:	e1f4      	b.n	80066ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80062d0:	230c      	movs	r3, #12
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	2108      	movs	r1, #8
 80062d8:	0018      	movs	r0, r3
 80062da:	f000 fb29 	bl	8006930 <unsigned_bitwise_modulo>
 80062de:	0003      	movs	r3, r0
 80062e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e2:	d821      	bhi.n	8006328 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80062e4:	2212      	movs	r2, #18
 80062e6:	18bb      	adds	r3, r7, r2
 80062e8:	18ba      	adds	r2, r7, r2
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80062ee:	2210      	movs	r2, #16
 80062f0:	18bb      	adds	r3, r7, r2
 80062f2:	18ba      	adds	r2, r7, r2
 80062f4:	8812      	ldrh	r2, [r2, #0]
 80062f6:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80062f8:	2316      	movs	r3, #22
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006302:	2317      	movs	r3, #23
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e008      	b.n	800631e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800630c:	2316      	movs	r3, #22
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d103      	bne.n	800631e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006316:	2317      	movs	r3, #23
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	2100      	movs	r1, #0
 8006324:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006326:	e1c8      	b.n	80066ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8006328:	230c      	movs	r3, #12
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	2108      	movs	r1, #8
 8006330:	0018      	movs	r0, r3
 8006332:	f000 fafd 	bl	8006930 <unsigned_bitwise_modulo>
 8006336:	0003      	movs	r3, r0
 8006338:	2b80      	cmp	r3, #128	@ 0x80
 800633a:	d800      	bhi.n	800633e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 800633c:	e1bd      	b.n	80066ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800633e:	2212      	movs	r2, #18
 8006340:	18bb      	adds	r3, r7, r2
 8006342:	18ba      	adds	r2, r7, r2
 8006344:	8812      	ldrh	r2, [r2, #0]
 8006346:	3a01      	subs	r2, #1
 8006348:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800634a:	2210      	movs	r2, #16
 800634c:	18bb      	adds	r3, r7, r2
 800634e:	18ba      	adds	r2, r7, r2
 8006350:	8812      	ldrh	r2, [r2, #0]
 8006352:	3201      	adds	r2, #1
 8006354:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8006356:	2316      	movs	r3, #22
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006360:	2317      	movs	r3, #23
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	e008      	b.n	800637c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800636a:	2316      	movs	r3, #22
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d103      	bne.n	800637c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006374:	2317      	movs	r3, #23
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006384:	e199      	b.n	80066ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8006386:	2110      	movs	r1, #16
 8006388:	187b      	adds	r3, r7, r1
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	429a      	cmp	r2, r3
 8006392:	d810      	bhi.n	80063b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8006394:	187b      	adds	r3, r7, r1
 8006396:	881a      	ldrh	r2, [r3, #0]
 8006398:	2380      	movs	r3, #128	@ 0x80
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	429a      	cmp	r2, r3
 800639e:	d000      	beq.n	80063a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 80063a0:	e18c      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80063a2:	230c      	movs	r3, #12
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	2108      	movs	r1, #8
 80063aa:	0018      	movs	r0, r3
 80063ac:	f000 fac0 	bl	8006930 <unsigned_bitwise_modulo>
 80063b0:	1e03      	subs	r3, r0, #0
 80063b2:	d100      	bne.n	80063b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80063b4:	e182      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80063b6:	230c      	movs	r3, #12
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	2108      	movs	r1, #8
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 fab6 	bl	8006930 <unsigned_bitwise_modulo>
 80063c4:	0003      	movs	r3, r0
 80063c6:	2b80      	cmp	r3, #128	@ 0x80
 80063c8:	d159      	bne.n	800647e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80063ca:	2212      	movs	r2, #18
 80063cc:	18bb      	adds	r3, r7, r2
 80063ce:	18ba      	adds	r2, r7, r2
 80063d0:	8812      	ldrh	r2, [r2, #0]
 80063d2:	3a01      	subs	r2, #1
 80063d4:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80063d6:	2110      	movs	r1, #16
 80063d8:	187b      	adds	r3, r7, r1
 80063da:	187a      	adds	r2, r7, r1
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	3201      	adds	r2, #1
 80063e0:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80063e2:	000c      	movs	r4, r1
 80063e4:	187b      	adds	r3, r7, r1
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	2101      	movs	r1, #1
 80063ea:	0018      	movs	r0, r3
 80063ec:	f000 faa0 	bl	8006930 <unsigned_bitwise_modulo>
 80063f0:	1e03      	subs	r3, r0, #0
 80063f2:	d121      	bne.n	8006438 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80063f4:	193b      	adds	r3, r7, r4
 80063f6:	193a      	adds	r2, r7, r4
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	0852      	lsrs	r2, r2, #1
 80063fc:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80063fe:	2316      	movs	r3, #22
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006408:	2317      	movs	r3, #23
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	2100      	movs	r1, #0
 8006416:	5499      	strb	r1, [r3, r2]
 8006418:	e150      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800641a:	2316      	movs	r3, #22
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d000      	beq.n	8006426 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8006424:	e14a      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006426:	2317      	movs	r3, #23
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	2101      	movs	r1, #1
 8006434:	5499      	strb	r1, [r3, r2]
 8006436:	e141      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006438:	2210      	movs	r2, #16
 800643a:	18bb      	adds	r3, r7, r2
 800643c:	18ba      	adds	r2, r7, r2
 800643e:	8812      	ldrh	r2, [r2, #0]
 8006440:	0852      	lsrs	r2, r2, #1
 8006442:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006444:	2316      	movs	r3, #22
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d108      	bne.n	8006460 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800644e:	2317      	movs	r3, #23
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	2100      	movs	r1, #0
 800645c:	5499      	strb	r1, [r3, r2]
 800645e:	e12d      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006460:	2316      	movs	r3, #22
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d000      	beq.n	800646c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 800646a:	e127      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800646c:	2317      	movs	r3, #23
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	2101      	movs	r1, #1
 800647a:	5499      	strb	r1, [r3, r2]
 800647c:	e11e      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800647e:	230c      	movs	r3, #12
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	2108      	movs	r1, #8
 8006486:	0018      	movs	r0, r3
 8006488:	f000 fa52 	bl	8006930 <unsigned_bitwise_modulo>
 800648c:	1e03      	subs	r3, r0, #0
 800648e:	d152      	bne.n	8006536 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8006490:	2212      	movs	r2, #18
 8006492:	18bb      	adds	r3, r7, r2
 8006494:	18ba      	adds	r2, r7, r2
 8006496:	8812      	ldrh	r2, [r2, #0]
 8006498:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800649a:	2410      	movs	r4, #16
 800649c:	193b      	adds	r3, r7, r4
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 fa44 	bl	8006930 <unsigned_bitwise_modulo>
 80064a8:	1e03      	subs	r3, r0, #0
 80064aa:	d121      	bne.n	80064f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80064ac:	193b      	adds	r3, r7, r4
 80064ae:	193a      	adds	r2, r7, r4
 80064b0:	8812      	ldrh	r2, [r2, #0]
 80064b2:	0852      	lsrs	r2, r2, #1
 80064b4:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80064b6:	2316      	movs	r3, #22
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d108      	bne.n	80064d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80064c0:	2317      	movs	r3, #23
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	2100      	movs	r1, #0
 80064ce:	5499      	strb	r1, [r3, r2]
 80064d0:	e0f4      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80064d2:	2316      	movs	r3, #22
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d000      	beq.n	80064de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 80064dc:	e0ee      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80064de:	2317      	movs	r3, #23
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	2101      	movs	r1, #1
 80064ec:	5499      	strb	r1, [r3, r2]
 80064ee:	e0e5      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80064f0:	2210      	movs	r2, #16
 80064f2:	18bb      	adds	r3, r7, r2
 80064f4:	18ba      	adds	r2, r7, r2
 80064f6:	8812      	ldrh	r2, [r2, #0]
 80064f8:	0852      	lsrs	r2, r2, #1
 80064fa:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80064fc:	2316      	movs	r3, #22
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d108      	bne.n	8006518 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006506:	2317      	movs	r3, #23
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	2100      	movs	r1, #0
 8006514:	5499      	strb	r1, [r3, r2]
 8006516:	e0d1      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006518:	2316      	movs	r3, #22
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d000      	beq.n	8006524 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8006522:	e0cb      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006524:	2317      	movs	r3, #23
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	2101      	movs	r1, #1
 8006532:	5499      	strb	r1, [r3, r2]
 8006534:	e0c2      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8006536:	230c      	movs	r3, #12
 8006538:	18fb      	adds	r3, r7, r3
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	2108      	movs	r1, #8
 800653e:	0018      	movs	r0, r3
 8006540:	f000 f9f6 	bl	8006930 <unsigned_bitwise_modulo>
 8006544:	0003      	movs	r3, r0
 8006546:	2b7f      	cmp	r3, #127	@ 0x7f
 8006548:	d856      	bhi.n	80065f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 800654a:	2212      	movs	r2, #18
 800654c:	18bb      	adds	r3, r7, r2
 800654e:	18ba      	adds	r2, r7, r2
 8006550:	8812      	ldrh	r2, [r2, #0]
 8006552:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8006554:	2410      	movs	r4, #16
 8006556:	193b      	adds	r3, r7, r4
 8006558:	193a      	adds	r2, r7, r4
 800655a:	8812      	ldrh	r2, [r2, #0]
 800655c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800655e:	193b      	adds	r3, r7, r4
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	2101      	movs	r1, #1
 8006564:	0018      	movs	r0, r3
 8006566:	f000 f9e3 	bl	8006930 <unsigned_bitwise_modulo>
 800656a:	1e03      	subs	r3, r0, #0
 800656c:	d121      	bne.n	80065b2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800656e:	193b      	adds	r3, r7, r4
 8006570:	193a      	adds	r2, r7, r4
 8006572:	8812      	ldrh	r2, [r2, #0]
 8006574:	0852      	lsrs	r2, r2, #1
 8006576:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006578:	2316      	movs	r3, #22
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d108      	bne.n	8006594 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006582:	2317      	movs	r3, #23
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	2100      	movs	r1, #0
 8006590:	5499      	strb	r1, [r3, r2]
 8006592:	e093      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006594:	2316      	movs	r3, #22
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d000      	beq.n	80065a0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 800659e:	e08d      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065a0:	2317      	movs	r3, #23
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	2101      	movs	r1, #1
 80065ae:	5499      	strb	r1, [r3, r2]
 80065b0:	e084      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80065b2:	2210      	movs	r2, #16
 80065b4:	18bb      	adds	r3, r7, r2
 80065b6:	18ba      	adds	r2, r7, r2
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	0852      	lsrs	r2, r2, #1
 80065bc:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80065be:	2316      	movs	r3, #22
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065c8:	2317      	movs	r3, #23
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	2100      	movs	r1, #0
 80065d6:	5499      	strb	r1, [r3, r2]
 80065d8:	e070      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80065da:	2316      	movs	r3, #22
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d000      	beq.n	80065e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 80065e4:	e06a      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80065e6:	2317      	movs	r3, #23
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]
 80065f6:	e061      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80065f8:	230c      	movs	r3, #12
 80065fa:	18fb      	adds	r3, r7, r3
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	2108      	movs	r1, #8
 8006600:	0018      	movs	r0, r3
 8006602:	f000 f995 	bl	8006930 <unsigned_bitwise_modulo>
 8006606:	0003      	movs	r3, r0
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d957      	bls.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800660c:	2212      	movs	r2, #18
 800660e:	18bb      	adds	r3, r7, r2
 8006610:	18ba      	adds	r2, r7, r2
 8006612:	8812      	ldrh	r2, [r2, #0]
 8006614:	3a01      	subs	r2, #1
 8006616:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8006618:	2410      	movs	r4, #16
 800661a:	193b      	adds	r3, r7, r4
 800661c:	193a      	adds	r2, r7, r4
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	3201      	adds	r2, #1
 8006622:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8006624:	193b      	adds	r3, r7, r4
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	2101      	movs	r1, #1
 800662a:	0018      	movs	r0, r3
 800662c:	f000 f980 	bl	8006930 <unsigned_bitwise_modulo>
 8006630:	1e03      	subs	r3, r0, #0
 8006632:	d120      	bne.n	8006676 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006634:	193b      	adds	r3, r7, r4
 8006636:	193a      	adds	r2, r7, r4
 8006638:	8812      	ldrh	r2, [r2, #0]
 800663a:	0852      	lsrs	r2, r2, #1
 800663c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800663e:	2316      	movs	r3, #22
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d108      	bne.n	800665a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006648:	2317      	movs	r3, #23
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	2100      	movs	r1, #0
 8006656:	5499      	strb	r1, [r3, r2]
 8006658:	e030      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800665a:	2316      	movs	r3, #22
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d12b      	bne.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006664:	2317      	movs	r3, #23
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	2101      	movs	r1, #1
 8006672:	5499      	strb	r1, [r3, r2]
 8006674:	e022      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006676:	2210      	movs	r2, #16
 8006678:	18bb      	adds	r3, r7, r2
 800667a:	18ba      	adds	r2, r7, r2
 800667c:	8812      	ldrh	r2, [r2, #0]
 800667e:	0852      	lsrs	r2, r2, #1
 8006680:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006682:	2316      	movs	r3, #22
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d108      	bne.n	800669e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800668c:	2317      	movs	r3, #23
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	2100      	movs	r1, #0
 800669a:	5499      	strb	r1, [r3, r2]
 800669c:	e00e      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800669e:	2316      	movs	r3, #22
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d109      	bne.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80066a8:	2317      	movs	r3, #23
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	2101      	movs	r1, #1
 80066b6:	5499      	strb	r1, [r3, r2]
 80066b8:	e000      	b.n	80066bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80066ba:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 80066bc:	2316      	movs	r3, #22
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d152      	bne.n	800676c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80066c6:	2317      	movs	r3, #23
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80066d0:	2312      	movs	r3, #18
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	2280      	movs	r2, #128	@ 0x80
 80066d8:	0052      	lsls	r2, r2, #1
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	b29a      	uxth	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	829a      	strh	r2, [r3, #20]
 80066e2:	e099      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80066e4:	2317      	movs	r3, #23
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d11b      	bne.n	8006726 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	89db      	ldrh	r3, [r3, #14]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2101      	movs	r1, #1
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 f91a 	bl	8006930 <unsigned_bitwise_modulo>
 80066fc:	1e03      	subs	r3, r0, #0
 80066fe:	d109      	bne.n	8006714 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006700:	2312      	movs	r3, #18
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	2280      	movs	r2, #128	@ 0x80
 8006708:	0052      	lsls	r2, r2, #1
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	b29a      	uxth	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	829a      	strh	r2, [r3, #20]
 8006712:	e081      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8006714:	2312      	movs	r3, #18
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	22ff      	movs	r2, #255	@ 0xff
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	829a      	strh	r2, [r3, #20]
 8006724:	e078      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006726:	2317      	movs	r3, #23
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d000      	beq.n	8006732 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8006730:	e072      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	89db      	ldrh	r3, [r3, #14]
 8006736:	b29b      	uxth	r3, r3
 8006738:	2101      	movs	r1, #1
 800673a:	0018      	movs	r0, r3
 800673c:	f000 f8f8 	bl	8006930 <unsigned_bitwise_modulo>
 8006740:	1e03      	subs	r3, r0, #0
 8006742:	d109      	bne.n	8006758 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006744:	2312      	movs	r3, #18
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	2280      	movs	r2, #128	@ 0x80
 800674c:	0052      	lsls	r2, r2, #1
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	829a      	strh	r2, [r3, #20]
 8006756:	e05f      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8006758:	2312      	movs	r3, #18
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	2202      	movs	r2, #2
 8006760:	32ff      	adds	r2, #255	@ 0xff
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	829a      	strh	r2, [r3, #20]
 800676a:	e055      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 800676c:	2316      	movs	r3, #22
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d150      	bne.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8006776:	2317      	movs	r3, #23
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8006780:	2310      	movs	r3, #16
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	2280      	movs	r2, #128	@ 0x80
 8006788:	0052      	lsls	r2, r2, #1
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	b29a      	uxth	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	829a      	strh	r2, [r3, #20]
 8006792:	e041      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006794:	2317      	movs	r3, #23
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d11b      	bne.n	80067d6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	89db      	ldrh	r3, [r3, #14]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2101      	movs	r1, #1
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 f8c2 	bl	8006930 <unsigned_bitwise_modulo>
 80067ac:	1e03      	subs	r3, r0, #0
 80067ae:	d109      	bne.n	80067c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80067b0:	2310      	movs	r3, #16
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	2280      	movs	r2, #128	@ 0x80
 80067b8:	0052      	lsls	r2, r2, #1
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	829a      	strh	r2, [r3, #20]
 80067c2:	e029      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 80067c4:	2310      	movs	r3, #16
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	22ff      	movs	r2, #255	@ 0xff
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	829a      	strh	r2, [r3, #20]
 80067d4:	e020      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80067d6:	2317      	movs	r3, #23
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d11b      	bne.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	89db      	ldrh	r3, [r3, #14]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2101      	movs	r1, #1
 80067e8:	0018      	movs	r0, r3
 80067ea:	f000 f8a1 	bl	8006930 <unsigned_bitwise_modulo>
 80067ee:	1e03      	subs	r3, r0, #0
 80067f0:	d109      	bne.n	8006806 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80067f2:	2310      	movs	r3, #16
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	2280      	movs	r2, #128	@ 0x80
 80067fa:	0052      	lsls	r2, r2, #1
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	829a      	strh	r2, [r3, #20]
 8006804:	e008      	b.n	8006818 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8006806:	2310      	movs	r3, #16
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	2202      	movs	r2, #2
 800680e:	32ff      	adds	r2, #255	@ 0xff
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0018      	movs	r0, r3
 800681c:	f7ff fbf4 	bl	8006008 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8a9b      	ldrh	r3, [r3, #20]
 8006824:	b29b      	uxth	r3, r3
 8006826:	2280      	movs	r2, #128	@ 0x80
 8006828:	0052      	lsls	r2, r2, #1
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	b29a      	uxth	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8adb      	ldrh	r3, [r3, #22]
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8b9b      	ldrh	r3, [r3, #28]
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	83da      	strh	r2, [r3, #30]

    return 1;
 800684e:	2301      	movs	r3, #1
}
 8006850:	0018      	movs	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	b007      	add	sp, #28
 8006856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800685c:	46c0      	nop			@ (mov r8, r8)
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8006862:	b5b0      	push	{r4, r5, r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 800686c:	250f      	movs	r5, #15
 800686e:	197c      	adds	r4, r7, r5
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0011      	movs	r1, r2
 8006876:	0018      	movs	r0, r3
 8006878:	f003 ff32 	bl	800a6e0 <HAL_TIM_OC_Start_IT>
 800687c:	0003      	movs	r3, r0
 800687e:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8006880:	197b      	adds	r3, r7, r5
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <Start_OC_TIM+0x2a>

		Error_Handler();
 8006888:	f7fc f84a 	bl	8002920 <Error_Handler>
	}

	return ok;
 800688c:	230f      	movs	r3, #15
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	781b      	ldrb	r3, [r3, #0]
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b004      	add	sp, #16
 8006898:	bdb0      	pop	{r4, r5, r7, pc}

0800689a <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 800689a:	b5b0      	push	{r4, r5, r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 80068a4:	250f      	movs	r5, #15
 80068a6:	197c      	adds	r4, r7, r5
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0011      	movs	r1, r2
 80068ae:	0018      	movs	r0, r3
 80068b0:	f004 f83a 	bl	800a928 <HAL_TIM_OC_Stop_IT>
 80068b4:	0003      	movs	r3, r0
 80068b6:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80068b8:	197b      	adds	r3, r7, r5
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <Stop_OC_TIM+0x2a>

		Error_Handler();
 80068c0:	f7fc f82e 	bl	8002920 <Error_Handler>
	}

	return ok;
 80068c4:	230f      	movs	r3, #15
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	781b      	ldrb	r3, [r3, #0]
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b004      	add	sp, #16
 80068d0:	bdb0      	pop	{r4, r5, r7, pc}

080068d2 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	0002      	movs	r2, r0
 80068da:	1dbb      	adds	r3, r7, #6
 80068dc:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 80068de:	230e      	movs	r3, #14
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	2202      	movs	r2, #2
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	e014      	b.n	8006912 <isPrime+0x40>
        if (x % d == 0)
 80068e8:	1dba      	adds	r2, r7, #6
 80068ea:	230e      	movs	r3, #14
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	8812      	ldrh	r2, [r2, #0]
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	0019      	movs	r1, r3
 80068f4:	0010      	movs	r0, r2
 80068f6:	f7f9 fc8d 	bl	8000214 <__aeabi_uidivmod>
 80068fa:	000b      	movs	r3, r1
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <isPrime+0x34>
            return NO;
 8006902:	2300      	movs	r3, #0
 8006904:	e010      	b.n	8006928 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8006906:	210e      	movs	r1, #14
 8006908:	187b      	adds	r3, r7, r1
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	187b      	adds	r3, r7, r1
 800690e:	3201      	adds	r2, #1
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	220e      	movs	r2, #14
 8006914:	18bb      	adds	r3, r7, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	18ba      	adds	r2, r7, r2
 800691a:	8812      	ldrh	r2, [r2, #0]
 800691c:	435a      	muls	r2, r3
 800691e:	1dbb      	adds	r3, r7, #6
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	dde0      	ble.n	80068e8 <isPrime+0x16>
    }
    return YES;
 8006926:	2301      	movs	r3, #1
}
 8006928:	0018      	movs	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	b004      	add	sp, #16
 800692e:	bd80      	pop	{r7, pc}

08006930 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	000a      	movs	r2, r1
 800693a:	1cfb      	adds	r3, r7, #3
 800693c:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 800693e:	1cfb      	adds	r3, r7, #3
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2201      	movs	r2, #1
 8006944:	409a      	lsls	r2, r3
 8006946:	0013      	movs	r3, r2
 8006948:	3b01      	subs	r3, #1
 800694a:	001a      	movs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4013      	ands	r3, r2
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b002      	add	sp, #8
 8006956:	bd80      	pop	{r7, pc}

08006958 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800695c:	b662      	cpsie	i
}
 800695e:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8006960:	2301      	movs	r3, #1
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	000a      	movs	r2, r1
 8006972:	1cbb      	adds	r3, r7, #2
 8006974:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	1cba      	adds	r2, r7, #2
 800697c:	8812      	ldrh	r2, [r2, #0]
 800697e:	4013      	ands	r3, r2
 8006980:	d001      	beq.n	8006986 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8006986:	2300      	movs	r3, #0
    }
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}

08006990 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	000a      	movs	r2, r1
 800699a:	1cbb      	adds	r3, r7, #2
 800699c:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	1cbb      	adds	r3, r7, #2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
}
 80069ac:	46c0      	nop			@ (mov r8, r8)
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b002      	add	sp, #8
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	000a      	movs	r2, r1
 80069be:	1cbb      	adds	r3, r7, #2
 80069c0:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1cba      	adds	r2, r7, #2
 80069c8:	8812      	ldrh	r2, [r2, #0]
 80069ca:	43d2      	mvns	r2, r2
 80069cc:	401a      	ands	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	46c0      	nop			@ (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b002      	add	sp, #8
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80069dc:	480d      	ldr	r0, [pc, #52]	@ (8006a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80069de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80069e0:	f7ff ff3a 	bl	8006858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069e4:	480c      	ldr	r0, [pc, #48]	@ (8006a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80069e6:	490d      	ldr	r1, [pc, #52]	@ (8006a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80069e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006a20 <LoopForever+0xe>)
  movs r3, #0
 80069ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069ec:	e002      	b.n	80069f4 <LoopCopyDataInit>

080069ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069f2:	3304      	adds	r3, #4

080069f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069f8:	d3f9      	bcc.n	80069ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80069fc:	4c0a      	ldr	r4, [pc, #40]	@ (8006a28 <LoopForever+0x16>)
  movs r3, #0
 80069fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a00:	e001      	b.n	8006a06 <LoopFillZerobss>

08006a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a04:	3204      	adds	r2, #4

08006a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a08:	d3fb      	bcc.n	8006a02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006a0a:	f007 fb93 	bl	800e134 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006a0e:	f7fe faaf 	bl	8004f70 <main>

08006a12 <LoopForever>:

LoopForever:
  b LoopForever
 8006a12:	e7fe      	b.n	8006a12 <LoopForever>
  ldr   r0, =_estack
 8006a14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a1c:	200004e0 	.word	0x200004e0
  ldr r2, =_sidata
 8006a20:	0800ec48 	.word	0x0800ec48
  ldr r2, =_sbss
 8006a24:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 8006a28:	20000dcc 	.word	0x20000dcc

08006a2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a2c:	e7fe      	b.n	8006a2c <ADC1_IRQHandler>
	...

08006a30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a36:	1dfb      	adds	r3, r7, #7
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <HAL_Init+0x3c>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <HAL_Init+0x3c>)
 8006a42:	2180      	movs	r1, #128	@ 0x80
 8006a44:	0049      	lsls	r1, r1, #1
 8006a46:	430a      	orrs	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f000 f810 	bl	8006a70 <HAL_InitTick>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006a54:	1dfb      	adds	r3, r7, #7
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	e001      	b.n	8006a60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006a5c:	f7fe fef8 	bl	8005850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a60:	1dfb      	adds	r3, r7, #7
 8006a62:	781b      	ldrb	r3, [r3, #0]
}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40022000 	.word	0x40022000

08006a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a78:	230f      	movs	r3, #15
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006a80:	4b1d      	ldr	r3, [pc, #116]	@ (8006af8 <HAL_InitTick+0x88>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02b      	beq.n	8006ae0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006a88:	4b1c      	ldr	r3, [pc, #112]	@ (8006afc <HAL_InitTick+0x8c>)
 8006a8a:	681c      	ldr	r4, [r3, #0]
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006af8 <HAL_InitTick+0x88>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	0019      	movs	r1, r3
 8006a92:	23fa      	movs	r3, #250	@ 0xfa
 8006a94:	0098      	lsls	r0, r3, #2
 8006a96:	f7f9 fb37 	bl	8000108 <__udivsi3>
 8006a9a:	0003      	movs	r3, r0
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	f7f9 fb32 	bl	8000108 <__udivsi3>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f001 fb75 	bl	8008196 <HAL_SYSTICK_Config>
 8006aac:	1e03      	subs	r3, r0, #0
 8006aae:	d112      	bne.n	8006ad6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d80a      	bhi.n	8006acc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	2301      	movs	r3, #1
 8006aba:	425b      	negs	r3, r3
 8006abc:	2200      	movs	r2, #0
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f001 fb34 	bl	800812c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8006b00 <HAL_InitTick+0x90>)
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e00d      	b.n	8006ae8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006acc:	230f      	movs	r3, #15
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e008      	b.n	8006ae8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006ad6:	230f      	movs	r3, #15
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e003      	b.n	8006ae8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ae0:	230f      	movs	r3, #15
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006ae8:	230f      	movs	r3, #15
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	781b      	ldrb	r3, [r3, #0]
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b005      	add	sp, #20
 8006af4:	bd90      	pop	{r4, r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	20000454 	.word	0x20000454
 8006afc:	2000044c 	.word	0x2000044c
 8006b00:	20000450 	.word	0x20000450

08006b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b08:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <HAL_IncTick+0x1c>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	001a      	movs	r2, r3
 8006b0e:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <HAL_IncTick+0x20>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	18d2      	adds	r2, r2, r3
 8006b14:	4b03      	ldr	r3, [pc, #12]	@ (8006b24 <HAL_IncTick+0x20>)
 8006b16:	601a      	str	r2, [r3, #0]
}
 8006b18:	46c0      	nop			@ (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	20000454 	.word	0x20000454
 8006b24:	20000dac 	.word	0x20000dac

08006b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8006b2c:	4b02      	ldr	r3, [pc, #8]	@ (8006b38 <HAL_GetTick+0x10>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			@ (mov r8, r8)
 8006b38:	20000dac 	.word	0x20000dac

08006b3c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a05      	ldr	r2, [pc, #20]	@ (8006b60 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006b4c:	401a      	ands	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	fe3fffff 	.word	0xfe3fffff

08006b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	23e0      	movs	r3, #224	@ 0xe0
 8006b72:	045b      	lsls	r3, r3, #17
 8006b74:	4013      	ands	r3, r2
}
 8006b76:	0018      	movs	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b002      	add	sp, #8
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	2104      	movs	r1, #4
 8006b92:	400a      	ands	r2, r1
 8006b94:	2107      	movs	r1, #7
 8006b96:	4091      	lsls	r1, r2
 8006b98:	000a      	movs	r2, r1
 8006b9a:	43d2      	mvns	r2, r2
 8006b9c:	401a      	ands	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2104      	movs	r1, #4
 8006ba2:	400b      	ands	r3, r1
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	4099      	lsls	r1, r3
 8006ba8:	000b      	movs	r3, r1
 8006baa:	431a      	orrs	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006bb0:	46c0      	nop			@ (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b004      	add	sp, #16
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	2104      	movs	r1, #4
 8006bca:	400a      	ands	r2, r1
 8006bcc:	2107      	movs	r1, #7
 8006bce:	4091      	lsls	r1, r2
 8006bd0:	000a      	movs	r2, r1
 8006bd2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006bda:	40da      	lsrs	r2, r3
 8006bdc:	0013      	movs	r3, r2
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b002      	add	sp, #8
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	23c0      	movs	r3, #192	@ 0xc0
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d101      	bne.n	8006bfe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	211f      	movs	r1, #31
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	210f      	movs	r1, #15
 8006c20:	4091      	lsls	r1, r2
 8006c22:	000a      	movs	r2, r1
 8006c24:	43d2      	mvns	r2, r2
 8006c26:	401a      	ands	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0e9b      	lsrs	r3, r3, #26
 8006c2c:	210f      	movs	r1, #15
 8006c2e:	4019      	ands	r1, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	201f      	movs	r0, #31
 8006c34:	4003      	ands	r3, r0
 8006c36:	4099      	lsls	r1, r3
 8006c38:	000b      	movs	r3, r1
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006c40:	46c0      	nop			@ (mov r8, r8)
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	035b      	lsls	r3, r3, #13
 8006c5a:	0b5b      	lsrs	r3, r3, #13
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b002      	add	sp, #8
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	0352      	lsls	r2, r2, #13
 8006c7c:	0b52      	lsrs	r2, r2, #13
 8006c7e:	43d2      	mvns	r2, r2
 8006c80:	401a      	ands	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	b002      	add	sp, #8
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	0212      	lsls	r2, r2, #8
 8006ca4:	43d2      	mvns	r2, r2
 8006ca6:	401a      	ands	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	400b      	ands	r3, r1
 8006cb0:	4904      	ldr	r1, [pc, #16]	@ (8006cc4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8006cba:	46c0      	nop			@ (mov r8, r8)
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b004      	add	sp, #16
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	07ffff00 	.word	0x07ffff00

08006cc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	4a05      	ldr	r2, [pc, #20]	@ (8006cec <LL_ADC_EnableInternalRegulator+0x24>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2280      	movs	r2, #128	@ 0x80
 8006cda:	0552      	lsls	r2, r2, #21
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b002      	add	sp, #8
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	6fffffe8 	.word	0x6fffffe8

08006cf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	2380      	movs	r3, #128	@ 0x80
 8006cfe:	055b      	lsls	r3, r3, #21
 8006d00:	401a      	ands	r2, r3
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	055b      	lsls	r3, r3, #21
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d101      	bne.n	8006d0e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <LL_ADC_Enable+0x20>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	2201      	movs	r2, #1
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d30:	46c0      	nop			@ (mov r8, r8)
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b002      	add	sp, #8
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	7fffffe8 	.word	0x7fffffe8

08006d3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4a04      	ldr	r2, [pc, #16]	@ (8006d5c <LL_ADC_Disable+0x20>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006d54:	46c0      	nop			@ (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b002      	add	sp, #8
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	7fffffe8 	.word	0x7fffffe8

08006d60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <LL_ADC_IsEnabled+0x18>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <LL_ADC_IsEnabled+0x1a>
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d101      	bne.n	8006d9a <LL_ADC_IsDisableOngoing+0x18>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <LL_ADC_IsDisableOngoing+0x1a>
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a04      	ldr	r2, [pc, #16]	@ (8006dc4 <LL_ADC_REG_StartConversion+0x20>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	2204      	movs	r2, #4
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006dbc:	46c0      	nop			@ (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	7fffffe8 	.word	0x7fffffe8

08006dc8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	4a04      	ldr	r2, [pc, #16]	@ (8006de8 <LL_ADC_REG_StopConversion+0x20>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2210      	movs	r2, #16
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006de0:	46c0      	nop			@ (mov r8, r8)
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b002      	add	sp, #8
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	7fffffe8 	.word	0x7fffffe8

08006dec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d101      	bne.n	8006e04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	0018      	movs	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b002      	add	sp, #8
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e18:	231f      	movs	r3, #31
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e19f      	b.n	8007176 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d12a      	bne.n	8006e94 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4acf      	ldr	r2, [pc, #828]	@ (8007180 <HAL_ADC_Init+0x370>)
 8006e42:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4acf      	ldr	r2, [pc, #828]	@ (8007184 <HAL_ADC_Init+0x374>)
 8006e48:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4ace      	ldr	r2, [pc, #824]	@ (8007188 <HAL_ADC_Init+0x378>)
 8006e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4ace      	ldr	r2, [pc, #824]	@ (800718c <HAL_ADC_Init+0x37c>)
 8006e54:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4acd      	ldr	r2, [pc, #820]	@ (8007190 <HAL_ADC_Init+0x380>)
 8006e5a:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4acd      	ldr	r2, [pc, #820]	@ (8007194 <HAL_ADC_Init+0x384>)
 8006e60:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4acc      	ldr	r2, [pc, #816]	@ (8007198 <HAL_ADC_Init+0x388>)
 8006e66:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2280      	movs	r2, #128	@ 0x80
 8006e6c:	589b      	ldr	r3, [r3, r2]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2180      	movs	r1, #128	@ 0x80
 8006e76:	4ac9      	ldr	r2, [pc, #804]	@ (800719c <HAL_ADC_Init+0x38c>)
 8006e78:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2280      	movs	r2, #128	@ 0x80
 8006e7e:	589b      	ldr	r3, [r3, r2]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	0010      	movs	r0, r2
 8006e84:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2254      	movs	r2, #84	@ 0x54
 8006e90:	2100      	movs	r1, #0
 8006e92:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff ff29 	bl	8006cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d115      	bne.n	8006ece <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff ff0e 	bl	8006cc8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006eac:	4bbc      	ldr	r3, [pc, #752]	@ (80071a0 <HAL_ADC_Init+0x390>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	49bc      	ldr	r1, [pc, #752]	@ (80071a4 <HAL_ADC_Init+0x394>)
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7f9 f928 	bl	8000108 <__udivsi3>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	3301      	adds	r3, #1
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006ec0:	e002      	b.n	8006ec8 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f9      	bne.n	8006ec2 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7ff ff0c 	bl	8006cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8006ed8:	1e03      	subs	r3, r0, #0
 8006eda:	d10f      	bne.n	8006efc <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eec:	2201      	movs	r2, #1
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ef4:	231f      	movs	r3, #31
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	2201      	movs	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff ff73 	bl	8006dec <LL_ADC_REG_IsConversionOngoing>
 8006f06:	0003      	movs	r3, r0
 8006f08:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0e:	2210      	movs	r2, #16
 8006f10:	4013      	ands	r3, r2
 8006f12:	d000      	beq.n	8006f16 <HAL_ADC_Init+0x106>
 8006f14:	e122      	b.n	800715c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d000      	beq.n	8006f1e <HAL_ADC_Init+0x10e>
 8006f1c:	e11e      	b.n	800715c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f22:	4aa1      	ldr	r2, [pc, #644]	@ (80071a8 <HAL_ADC_Init+0x398>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	2202      	movs	r2, #2
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7ff ff14 	bl	8006d60 <LL_ADC_IsEnabled>
 8006f38:	1e03      	subs	r3, r0, #0
 8006f3a:	d000      	beq.n	8006f3e <HAL_ADC_Init+0x12e>
 8006f3c:	e0ad      	b.n	800709a <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	7e1b      	ldrb	r3, [r3, #24]
 8006f46:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006f48:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7e5b      	ldrb	r3, [r3, #25]
 8006f4e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006f50:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7e9b      	ldrb	r3, [r3, #26]
 8006f56:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006f58:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_ADC_Init+0x158>
 8006f62:	2380      	movs	r3, #128	@ 0x80
 8006f64:	015b      	lsls	r3, r3, #5
 8006f66:	e000      	b.n	8006f6a <HAL_ADC_Init+0x15a>
 8006f68:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006f6a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006f70:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da04      	bge.n	8006f84 <HAL_ADC_Init+0x174>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	e001      	b.n	8006f88 <HAL_ADC_Init+0x178>
 8006f84:	2380      	movs	r3, #128	@ 0x80
 8006f86:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006f88:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	212c      	movs	r1, #44	@ 0x2c
 8006f8e:	5c5b      	ldrb	r3, [r3, r1]
 8006f90:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006f92:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	5c9b      	ldrb	r3, [r3, r2]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d115      	bne.n	8006fd0 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	7e9b      	ldrb	r3, [r3, #26]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2280      	movs	r2, #128	@ 0x80
 8006fb0:	0252      	lsls	r2, r2, #9
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e00b      	b.n	8006fd0 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc8:	2201      	movs	r2, #1
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fdc:	23e0      	movs	r3, #224	@ 0xe0
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4a6d      	ldr	r2, [pc, #436]	@ (80071ac <HAL_ADC_Init+0x39c>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	0019      	movs	r1, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	430a      	orrs	r2, r1
 8007002:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	0f9b      	lsrs	r3, r3, #30
 800700a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007010:	4313      	orrs	r3, r2
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	223c      	movs	r2, #60	@ 0x3c
 800701c:	5c9b      	ldrb	r3, [r3, r2]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d111      	bne.n	8007046 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	0f9b      	lsrs	r3, r3, #30
 8007028:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800702e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8007034:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800703a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	2201      	movs	r2, #1
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	4a58      	ldr	r2, [pc, #352]	@ (80071b0 <HAL_ADC_Init+0x3a0>)
 800704e:	4013      	ands	r3, r2
 8007050:	0019      	movs	r1, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	430a      	orrs	r2, r1
 800705a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	23c0      	movs	r3, #192	@ 0xc0
 8007062:	061b      	lsls	r3, r3, #24
 8007064:	429a      	cmp	r2, r3
 8007066:	d018      	beq.n	800709a <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800706c:	2380      	movs	r3, #128	@ 0x80
 800706e:	05db      	lsls	r3, r3, #23
 8007070:	429a      	cmp	r2, r3
 8007072:	d012      	beq.n	800709a <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	061b      	lsls	r3, r3, #24
 800707c:	429a      	cmp	r2, r3
 800707e:	d00c      	beq.n	800709a <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8007080:	4b4c      	ldr	r3, [pc, #304]	@ (80071b4 <HAL_ADC_Init+0x3a4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a4c      	ldr	r2, [pc, #304]	@ (80071b8 <HAL_ADC_Init+0x3a8>)
 8007086:	4013      	ands	r3, r2
 8007088:	0019      	movs	r1, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	23f0      	movs	r3, #240	@ 0xf0
 8007090:	039b      	lsls	r3, r3, #14
 8007092:	401a      	ands	r2, r3
 8007094:	4b47      	ldr	r3, [pc, #284]	@ (80071b4 <HAL_ADC_Init+0x3a4>)
 8007096:	430a      	orrs	r2, r1
 8007098:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a2:	001a      	movs	r2, r3
 80070a4:	2100      	movs	r1, #0
 80070a6:	f7ff fd6a 	bl	8006b7e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b2:	4942      	ldr	r1, [pc, #264]	@ (80071bc <HAL_ADC_Init+0x3ac>)
 80070b4:	001a      	movs	r2, r3
 80070b6:	f7ff fd62 	bl	8006b7e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2110      	movs	r1, #16
 80070ce:	4249      	negs	r1, r1
 80070d0:	430a      	orrs	r2, r1
 80070d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80070d4:	e018      	b.n	8007108 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	2380      	movs	r3, #128	@ 0x80
 80070dc:	039b      	lsls	r3, r3, #14
 80070de:	429a      	cmp	r2, r3
 80070e0:	d112      	bne.n	8007108 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	221c      	movs	r2, #28
 80070f2:	4013      	ands	r3, r2
 80070f4:	2210      	movs	r2, #16
 80070f6:	4252      	negs	r2, r2
 80070f8:	409a      	lsls	r2, r3
 80070fa:	0011      	movs	r1, r2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2100      	movs	r1, #0
 800710e:	0018      	movs	r0, r3
 8007110:	f7ff fd52 	bl	8006bb8 <LL_ADC_GetSamplingTimeCommonChannels>
 8007114:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800711a:	429a      	cmp	r2, r3
 800711c:	d10b      	bne.n	8007136 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007128:	2203      	movs	r2, #3
 800712a:	4393      	bics	r3, r2
 800712c:	2201      	movs	r2, #1
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007134:	e01c      	b.n	8007170 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713a:	2212      	movs	r2, #18
 800713c:	4393      	bics	r3, r2
 800713e:	2210      	movs	r2, #16
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800714a:	2201      	movs	r2, #1
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8007152:	231f      	movs	r3, #31
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	2201      	movs	r2, #1
 8007158:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800715a:	e009      	b.n	8007170 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007160:	2210      	movs	r2, #16
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007168:	231f      	movs	r3, #31
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8007170:	231f      	movs	r3, #31
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	781b      	ldrb	r3, [r3, #0]
}
 8007176:	0018      	movs	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	b008      	add	sp, #32
 800717c:	bd80      	pop	{r7, pc}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	080074d9 	.word	0x080074d9
 8007184:	080074e9 	.word	0x080074e9
 8007188:	080074f9 	.word	0x080074f9
 800718c:	08007509 	.word	0x08007509
 8007190:	08007f61 	.word	0x08007f61
 8007194:	08007f71 	.word	0x08007f71
 8007198:	08007f81 	.word	0x08007f81
 800719c:	08005899 	.word	0x08005899
 80071a0:	2000044c 	.word	0x2000044c
 80071a4:	00030d40 	.word	0x00030d40
 80071a8:	fffffefd 	.word	0xfffffefd
 80071ac:	ffde0201 	.word	0xffde0201
 80071b0:	1ffffc02 	.word	0x1ffffc02
 80071b4:	40012708 	.word	0x40012708
 80071b8:	ffc3ffff 	.word	0xffc3ffff
 80071bc:	07ffff04 	.word	0x07ffff04

080071c0 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	230b      	movs	r3, #11
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	1c0a      	adds	r2, r1, #0
 80071d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071d2:	2317      	movs	r3, #23
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d107      	bne.n	80071f0 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e4:	2210      	movs	r2, #16
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e06d      	b.n	80072cc <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f4:	2201      	movs	r2, #1
 80071f6:	4013      	ands	r3, r2
 80071f8:	d03a      	beq.n	8007270 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 80071fa:	230b      	movs	r3, #11
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b0a      	cmp	r3, #10
 8007202:	d82a      	bhi.n	800725a <HAL_ADC_RegisterCallback+0x9a>
 8007204:	009a      	lsls	r2, r3, #2
 8007206:	4b33      	ldr	r3, [pc, #204]	@ (80072d4 <HAL_ADC_RegisterCallback+0x114>)
 8007208:	18d3      	adds	r3, r2, r3
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007214:	e057      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800721c:	e053      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007224:	e04f      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800722c:	e04b      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007234:	e047      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800723c:	e043      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007244:	e03f      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2180      	movs	r1, #128	@ 0x80
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	505a      	str	r2, [r3, r1]
        break;
 800724e:	e03a      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2184      	movs	r1, #132	@ 0x84
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	505a      	str	r2, [r3, r1]
        break;
 8007258:	e035      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725e:	2210      	movs	r2, #16
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8007266:	2317      	movs	r3, #23
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
        break;
 800726e:	e02a      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11c      	bne.n	80072b2 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8007278:	230b      	movs	r3, #11
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b09      	cmp	r3, #9
 8007280:	d002      	beq.n	8007288 <HAL_ADC_RegisterCallback+0xc8>
 8007282:	2b0a      	cmp	r3, #10
 8007284:	d005      	beq.n	8007292 <HAL_ADC_RegisterCallback+0xd2>
 8007286:	e009      	b.n	800729c <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2180      	movs	r1, #128	@ 0x80
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	505a      	str	r2, [r3, r1]
        break;
 8007290:	e019      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2184      	movs	r1, #132	@ 0x84
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	505a      	str	r2, [r3, r1]
        break;
 800729a:	e014      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a0:	2210      	movs	r2, #16
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80072a8:	2317      	movs	r3, #23
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
        break;
 80072b0:	e009      	b.n	80072c6 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b6:	2210      	movs	r2, #16
 80072b8:	431a      	orrs	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 80072be:	2317      	movs	r3, #23
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	2201      	movs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80072c6:	2317      	movs	r3, #23
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	781b      	ldrb	r3, [r3, #0]
}
 80072cc:	0018      	movs	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b006      	add	sp, #24
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	0800ea4c 	.word	0x0800ea4c

080072d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80072d8:	b5b0      	push	{r4, r5, r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7ff fd7f 	bl	8006dec <LL_ADC_REG_IsConversionOngoing>
 80072ee:	1e03      	subs	r3, r0, #0
 80072f0:	d16c      	bne.n	80073cc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2254      	movs	r2, #84	@ 0x54
 80072f6:	5c9b      	ldrb	r3, [r3, r2]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_ADC_Start_DMA+0x28>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e06c      	b.n	80073da <HAL_ADC_Start_DMA+0x102>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2254      	movs	r2, #84	@ 0x54
 8007304:	2101      	movs	r1, #1
 8007306:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	4013      	ands	r3, r2
 8007312:	d113      	bne.n	800733c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	0018      	movs	r0, r3
 800731a:	f7ff fd21 	bl	8006d60 <LL_ADC_IsEnabled>
 800731e:	1e03      	subs	r3, r0, #0
 8007320:	d004      	beq.n	800732c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	0018      	movs	r0, r3
 8007328:	f7ff fd08 	bl	8006d3c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2101      	movs	r1, #1
 8007338:	430a      	orrs	r2, r1
 800733a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800733c:	2517      	movs	r5, #23
 800733e:	197c      	adds	r4, r7, r5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	0018      	movs	r0, r3
 8007344:	f000 fb02 	bl	800794c <ADC_Enable>
 8007348:	0003      	movs	r3, r0
 800734a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800734c:	002c      	movs	r4, r5
 800734e:	193b      	adds	r3, r7, r4
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d13e      	bne.n	80073d4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735a:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <HAL_ADC_Start_DMA+0x10c>)
 800735c:	4013      	ands	r3, r2
 800735e:	2280      	movs	r2, #128	@ 0x80
 8007360:	0052      	lsls	r2, r2, #1
 8007362:	431a      	orrs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007372:	4a1d      	ldr	r2, [pc, #116]	@ (80073e8 <HAL_ADC_Start_DMA+0x110>)
 8007374:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737a:	4a1c      	ldr	r2, [pc, #112]	@ (80073ec <HAL_ADC_Start_DMA+0x114>)
 800737c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007382:	4a1b      	ldr	r2, [pc, #108]	@ (80073f0 <HAL_ADC_Start_DMA+0x118>)
 8007384:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	221c      	movs	r2, #28
 800738c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2254      	movs	r2, #84	@ 0x54
 8007392:	2100      	movs	r1, #0
 8007394:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2110      	movs	r1, #16
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3340      	adds	r3, #64	@ 0x40
 80073b0:	0019      	movs	r1, r3
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	193c      	adds	r4, r7, r4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f000 ff84 	bl	80082c4 <HAL_DMA_Start_IT>
 80073bc:	0003      	movs	r3, r0
 80073be:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7ff fced 	bl	8006da4 <LL_ADC_REG_StartConversion>
 80073ca:	e003      	b.n	80073d4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80073cc:	2317      	movs	r3, #23
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	2202      	movs	r2, #2
 80073d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80073d4:	2317      	movs	r3, #23
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	781b      	ldrb	r3, [r3, #0]
}
 80073da:	0018      	movs	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	b006      	add	sp, #24
 80073e0:	bdb0      	pop	{r4, r5, r7, pc}
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	fffff0fe 	.word	0xfffff0fe
 80073e8:	08007b15 	.word	0x08007b15
 80073ec:	08007be1 	.word	0x08007be1
 80073f0:	08007c01 	.word	0x08007c01

080073f4 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80073f4:	b5b0      	push	{r4, r5, r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2254      	movs	r2, #84	@ 0x54
 8007400:	5c9b      	ldrb	r3, [r3, r2]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_ADC_Stop_DMA+0x16>
 8007406:	2302      	movs	r3, #2
 8007408:	e05f      	b.n	80074ca <HAL_ADC_Stop_DMA+0xd6>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2254      	movs	r2, #84	@ 0x54
 800740e:	2101      	movs	r1, #1
 8007410:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8007412:	250f      	movs	r5, #15
 8007414:	197c      	adds	r4, r7, r5
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	0018      	movs	r0, r3
 800741a:	f000 fa55 	bl	80078c8 <ADC_ConversionStop>
 800741e:	0003      	movs	r3, r0
 8007420:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007422:	0029      	movs	r1, r5
 8007424:	187b      	adds	r3, r7, r1
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d147      	bne.n	80074bc <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007430:	2225      	movs	r2, #37	@ 0x25
 8007432:	5c9b      	ldrb	r3, [r3, r2]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d112      	bne.n	8007460 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743e:	000d      	movs	r5, r1
 8007440:	187c      	adds	r4, r7, r1
 8007442:	0018      	movs	r0, r3
 8007444:	f000 ffc4 	bl	80083d0 <HAL_DMA_Abort>
 8007448:	0003      	movs	r3, r0
 800744a:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800744c:	197b      	adds	r3, r7, r5
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007458:	2240      	movs	r2, #64	@ 0x40
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2110      	movs	r1, #16
 800746c:	438a      	bics	r2, r1
 800746e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007470:	220f      	movs	r2, #15
 8007472:	18bb      	adds	r3, r7, r2
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d107      	bne.n	800748a <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800747a:	18bc      	adds	r4, r7, r2
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	0018      	movs	r0, r3
 8007480:	f000 faea 	bl	8007a58 <ADC_Disable>
 8007484:	0003      	movs	r3, r0
 8007486:	7023      	strb	r3, [r4, #0]
 8007488:	e003      	b.n	8007492 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	0018      	movs	r0, r3
 800748e:	f000 fae3 	bl	8007a58 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007492:	230f      	movs	r3, #15
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d107      	bne.n	80074ac <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a0:	4a0c      	ldr	r2, [pc, #48]	@ (80074d4 <HAL_ADC_Stop_DMA+0xe0>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	2201      	movs	r2, #1
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2101      	movs	r1, #1
 80074b8:	438a      	bics	r2, r1
 80074ba:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2254      	movs	r2, #84	@ 0x54
 80074c0:	2100      	movs	r1, #0
 80074c2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80074c4:	230f      	movs	r3, #15
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
}
 80074ca:	0018      	movs	r0, r3
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b004      	add	sp, #16
 80074d0:	bdb0      	pop	{r4, r5, r7, pc}
 80074d2:	46c0      	nop			@ (mov r8, r8)
 80074d4:	fffffefe 	.word	0xfffffefe

080074d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80074e0:	46c0      	nop			@ (mov r8, r8)
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b002      	add	sp, #8
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80074f0:	46c0      	nop			@ (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b002      	add	sp, #8
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007500:	46c0      	nop			@ (mov r8, r8)
 8007502:	46bd      	mov	sp, r7
 8007504:	b002      	add	sp, #8
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007510:	46c0      	nop			@ (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007522:	2317      	movs	r3, #23
 8007524:	18fb      	adds	r3, r7, r3
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2254      	movs	r2, #84	@ 0x54
 8007532:	5c9b      	ldrb	r3, [r3, r2]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_ADC_ConfigChannel+0x24>
 8007538:	2302      	movs	r3, #2
 800753a:	e1c0      	b.n	80078be <HAL_ADC_ConfigChannel+0x3a6>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2254      	movs	r2, #84	@ 0x54
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	0018      	movs	r0, r3
 800754a:	f7ff fc4f 	bl	8006dec <LL_ADC_REG_IsConversionOngoing>
 800754e:	1e03      	subs	r3, r0, #0
 8007550:	d000      	beq.n	8007554 <HAL_ADC_ConfigChannel+0x3c>
 8007552:	e1a3      	b.n	800789c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d100      	bne.n	800755e <HAL_ADC_ConfigChannel+0x46>
 800755c:	e143      	b.n	80077e6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	2380      	movs	r3, #128	@ 0x80
 8007564:	061b      	lsls	r3, r3, #24
 8007566:	429a      	cmp	r2, r3
 8007568:	d004      	beq.n	8007574 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800756e:	4ac1      	ldr	r2, [pc, #772]	@ (8007874 <HAL_ADC_ConfigChannel+0x35c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d108      	bne.n	8007586 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0019      	movs	r1, r3
 800757e:	0010      	movs	r0, r2
 8007580:	f7ff fb62 	bl	8006c48 <LL_ADC_REG_SetSequencerChAdd>
 8007584:	e0c9      	b.n	800771a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	211f      	movs	r1, #31
 8007590:	400b      	ands	r3, r1
 8007592:	210f      	movs	r1, #15
 8007594:	4099      	lsls	r1, r3
 8007596:	000b      	movs	r3, r1
 8007598:	43db      	mvns	r3, r3
 800759a:	4013      	ands	r3, r2
 800759c:	0019      	movs	r1, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	035b      	lsls	r3, r3, #13
 80075a4:	0b5b      	lsrs	r3, r3, #13
 80075a6:	d105      	bne.n	80075b4 <HAL_ADC_ConfigChannel+0x9c>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	0e9b      	lsrs	r3, r3, #26
 80075ae:	221f      	movs	r2, #31
 80075b0:	4013      	ands	r3, r2
 80075b2:	e098      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2201      	movs	r2, #1
 80075ba:	4013      	ands	r3, r2
 80075bc:	d000      	beq.n	80075c0 <HAL_ADC_ConfigChannel+0xa8>
 80075be:	e091      	b.n	80076e4 <HAL_ADC_ConfigChannel+0x1cc>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2202      	movs	r2, #2
 80075c6:	4013      	ands	r3, r2
 80075c8:	d000      	beq.n	80075cc <HAL_ADC_ConfigChannel+0xb4>
 80075ca:	e089      	b.n	80076e0 <HAL_ADC_ConfigChannel+0x1c8>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2204      	movs	r2, #4
 80075d2:	4013      	ands	r3, r2
 80075d4:	d000      	beq.n	80075d8 <HAL_ADC_ConfigChannel+0xc0>
 80075d6:	e081      	b.n	80076dc <HAL_ADC_ConfigChannel+0x1c4>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2208      	movs	r2, #8
 80075de:	4013      	ands	r3, r2
 80075e0:	d000      	beq.n	80075e4 <HAL_ADC_ConfigChannel+0xcc>
 80075e2:	e079      	b.n	80076d8 <HAL_ADC_ConfigChannel+0x1c0>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2210      	movs	r2, #16
 80075ea:	4013      	ands	r3, r2
 80075ec:	d000      	beq.n	80075f0 <HAL_ADC_ConfigChannel+0xd8>
 80075ee:	e071      	b.n	80076d4 <HAL_ADC_ConfigChannel+0x1bc>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2220      	movs	r2, #32
 80075f6:	4013      	ands	r3, r2
 80075f8:	d000      	beq.n	80075fc <HAL_ADC_ConfigChannel+0xe4>
 80075fa:	e069      	b.n	80076d0 <HAL_ADC_ConfigChannel+0x1b8>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2240      	movs	r2, #64	@ 0x40
 8007602:	4013      	ands	r3, r2
 8007604:	d000      	beq.n	8007608 <HAL_ADC_ConfigChannel+0xf0>
 8007606:	e061      	b.n	80076cc <HAL_ADC_ConfigChannel+0x1b4>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2280      	movs	r2, #128	@ 0x80
 800760e:	4013      	ands	r3, r2
 8007610:	d000      	beq.n	8007614 <HAL_ADC_ConfigChannel+0xfc>
 8007612:	e059      	b.n	80076c8 <HAL_ADC_ConfigChannel+0x1b0>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	2380      	movs	r3, #128	@ 0x80
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4013      	ands	r3, r2
 800761e:	d151      	bne.n	80076c4 <HAL_ADC_ConfigChannel+0x1ac>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4013      	ands	r3, r2
 800762a:	d149      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x1a8>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	2380      	movs	r3, #128	@ 0x80
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4013      	ands	r3, r2
 8007636:	d141      	bne.n	80076bc <HAL_ADC_ConfigChannel+0x1a4>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	2380      	movs	r3, #128	@ 0x80
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	4013      	ands	r3, r2
 8007642:	d139      	bne.n	80076b8 <HAL_ADC_ConfigChannel+0x1a0>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	015b      	lsls	r3, r3, #5
 800764c:	4013      	ands	r3, r2
 800764e:	d131      	bne.n	80076b4 <HAL_ADC_ConfigChannel+0x19c>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	2380      	movs	r3, #128	@ 0x80
 8007656:	019b      	lsls	r3, r3, #6
 8007658:	4013      	ands	r3, r2
 800765a:	d129      	bne.n	80076b0 <HAL_ADC_ConfigChannel+0x198>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	2380      	movs	r3, #128	@ 0x80
 8007662:	01db      	lsls	r3, r3, #7
 8007664:	4013      	ands	r3, r2
 8007666:	d121      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x194>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	2380      	movs	r3, #128	@ 0x80
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	4013      	ands	r3, r2
 8007672:	d119      	bne.n	80076a8 <HAL_ADC_ConfigChannel+0x190>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	2380      	movs	r3, #128	@ 0x80
 800767a:	025b      	lsls	r3, r3, #9
 800767c:	4013      	ands	r3, r2
 800767e:	d111      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x18c>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	2380      	movs	r3, #128	@ 0x80
 8007686:	029b      	lsls	r3, r3, #10
 8007688:	4013      	ands	r3, r2
 800768a:	d109      	bne.n	80076a0 <HAL_ADC_ConfigChannel+0x188>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	02db      	lsls	r3, r3, #11
 8007694:	4013      	ands	r3, r2
 8007696:	d001      	beq.n	800769c <HAL_ADC_ConfigChannel+0x184>
 8007698:	2312      	movs	r3, #18
 800769a:	e024      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 800769c:	2300      	movs	r3, #0
 800769e:	e022      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076a0:	2311      	movs	r3, #17
 80076a2:	e020      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076a4:	2310      	movs	r3, #16
 80076a6:	e01e      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076a8:	230f      	movs	r3, #15
 80076aa:	e01c      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076ac:	230e      	movs	r3, #14
 80076ae:	e01a      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076b0:	230d      	movs	r3, #13
 80076b2:	e018      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076b4:	230c      	movs	r3, #12
 80076b6:	e016      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076b8:	230b      	movs	r3, #11
 80076ba:	e014      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076bc:	230a      	movs	r3, #10
 80076be:	e012      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076c0:	2309      	movs	r3, #9
 80076c2:	e010      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076c4:	2308      	movs	r3, #8
 80076c6:	e00e      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076c8:	2307      	movs	r3, #7
 80076ca:	e00c      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076cc:	2306      	movs	r3, #6
 80076ce:	e00a      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076d0:	2305      	movs	r3, #5
 80076d2:	e008      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076d4:	2304      	movs	r3, #4
 80076d6:	e006      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076d8:	2303      	movs	r3, #3
 80076da:	e004      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076dc:	2302      	movs	r3, #2
 80076de:	e002      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_ADC_ConfigChannel+0x1ce>
 80076e4:	2300      	movs	r3, #0
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	6852      	ldr	r2, [r2, #4]
 80076ea:	201f      	movs	r0, #31
 80076ec:	4002      	ands	r2, r0
 80076ee:	4093      	lsls	r3, r2
 80076f0:	000a      	movs	r2, r1
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	089b      	lsrs	r3, r3, #2
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	429a      	cmp	r2, r3
 8007706:	d808      	bhi.n	800771a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	001a      	movs	r2, r3
 8007716:	f7ff fa77 	bl	8006c08 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	001a      	movs	r2, r3
 8007728:	f7ff fab2 	bl	8006c90 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	db00      	blt.n	8007736 <HAL_ADC_ConfigChannel+0x21e>
 8007734:	e0bc      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007736:	4b50      	ldr	r3, [pc, #320]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 8007738:	0018      	movs	r0, r3
 800773a:	f7ff fa13 	bl	8006b64 <LL_ADC_GetCommonPathInternalCh>
 800773e:	0003      	movs	r3, r0
 8007740:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4d      	ldr	r2, [pc, #308]	@ (800787c <HAL_ADC_ConfigChannel+0x364>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d122      	bne.n	8007792 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	2380      	movs	r3, #128	@ 0x80
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007754:	d11d      	bne.n	8007792 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2280      	movs	r2, #128	@ 0x80
 800775a:	0412      	lsls	r2, r2, #16
 800775c:	4313      	orrs	r3, r2
 800775e:	4a46      	ldr	r2, [pc, #280]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 8007760:	0019      	movs	r1, r3
 8007762:	0010      	movs	r0, r2
 8007764:	f7ff f9ea 	bl	8006b3c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007768:	4b45      	ldr	r3, [pc, #276]	@ (8007880 <HAL_ADC_ConfigChannel+0x368>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4945      	ldr	r1, [pc, #276]	@ (8007884 <HAL_ADC_ConfigChannel+0x36c>)
 800776e:	0018      	movs	r0, r3
 8007770:	f7f8 fcca 	bl	8000108 <__udivsi3>
 8007774:	0003      	movs	r3, r0
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	0013      	movs	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	189b      	adds	r3, r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007782:	e002      	b.n	800778a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3b01      	subs	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f9      	bne.n	8007784 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007790:	e08e      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a3c      	ldr	r2, [pc, #240]	@ (8007888 <HAL_ADC_ConfigChannel+0x370>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d10e      	bne.n	80077ba <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	2380      	movs	r3, #128	@ 0x80
 80077a0:	045b      	lsls	r3, r3, #17
 80077a2:	4013      	ands	r3, r2
 80077a4:	d109      	bne.n	80077ba <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2280      	movs	r2, #128	@ 0x80
 80077aa:	0452      	lsls	r2, r2, #17
 80077ac:	4313      	orrs	r3, r2
 80077ae:	4a32      	ldr	r2, [pc, #200]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 80077b0:	0019      	movs	r1, r3
 80077b2:	0010      	movs	r0, r2
 80077b4:	f7ff f9c2 	bl	8006b3c <LL_ADC_SetCommonPathInternalCh>
 80077b8:	e07a      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a33      	ldr	r2, [pc, #204]	@ (800788c <HAL_ADC_ConfigChannel+0x374>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d000      	beq.n	80077c6 <HAL_ADC_ConfigChannel+0x2ae>
 80077c4:	e074      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	2380      	movs	r3, #128	@ 0x80
 80077ca:	03db      	lsls	r3, r3, #15
 80077cc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80077ce:	d000      	beq.n	80077d2 <HAL_ADC_ConfigChannel+0x2ba>
 80077d0:	e06e      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2280      	movs	r2, #128	@ 0x80
 80077d6:	03d2      	lsls	r2, r2, #15
 80077d8:	4313      	orrs	r3, r2
 80077da:	4a27      	ldr	r2, [pc, #156]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 80077dc:	0019      	movs	r1, r3
 80077de:	0010      	movs	r0, r2
 80077e0:	f7ff f9ac 	bl	8006b3c <LL_ADC_SetCommonPathInternalCh>
 80077e4:	e064      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	2380      	movs	r3, #128	@ 0x80
 80077ec:	061b      	lsls	r3, r3, #24
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d004      	beq.n	80077fc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80077f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007874 <HAL_ADC_ConfigChannel+0x35c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d107      	bne.n	800780c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	0019      	movs	r1, r3
 8007806:	0010      	movs	r0, r2
 8007808:	f7ff fa2f 	bl	8006c6a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	da4d      	bge.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007814:	4b18      	ldr	r3, [pc, #96]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 8007816:	0018      	movs	r0, r3
 8007818:	f7ff f9a4 	bl	8006b64 <LL_ADC_GetCommonPathInternalCh>
 800781c:	0003      	movs	r3, r0
 800781e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a15      	ldr	r2, [pc, #84]	@ (800787c <HAL_ADC_ConfigChannel+0x364>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d108      	bne.n	800783c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <HAL_ADC_ConfigChannel+0x378>)
 800782e:	4013      	ands	r3, r2
 8007830:	4a11      	ldr	r2, [pc, #68]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 8007832:	0019      	movs	r1, r3
 8007834:	0010      	movs	r0, r2
 8007836:	f7ff f981 	bl	8006b3c <LL_ADC_SetCommonPathInternalCh>
 800783a:	e039      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a11      	ldr	r2, [pc, #68]	@ (8007888 <HAL_ADC_ConfigChannel+0x370>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d108      	bne.n	8007858 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4a12      	ldr	r2, [pc, #72]	@ (8007894 <HAL_ADC_ConfigChannel+0x37c>)
 800784a:	4013      	ands	r3, r2
 800784c:	4a0a      	ldr	r2, [pc, #40]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 800784e:	0019      	movs	r1, r3
 8007850:	0010      	movs	r0, r2
 8007852:	f7ff f973 	bl	8006b3c <LL_ADC_SetCommonPathInternalCh>
 8007856:	e02b      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a0b      	ldr	r2, [pc, #44]	@ (800788c <HAL_ADC_ConfigChannel+0x374>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d126      	bne.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4a0c      	ldr	r2, [pc, #48]	@ (8007898 <HAL_ADC_ConfigChannel+0x380>)
 8007866:	4013      	ands	r3, r2
 8007868:	4a03      	ldr	r2, [pc, #12]	@ (8007878 <HAL_ADC_ConfigChannel+0x360>)
 800786a:	0019      	movs	r1, r3
 800786c:	0010      	movs	r0, r2
 800786e:	f7ff f965 	bl	8006b3c <LL_ADC_SetCommonPathInternalCh>
 8007872:	e01d      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x398>
 8007874:	80000004 	.word	0x80000004
 8007878:	40012708 	.word	0x40012708
 800787c:	b0001000 	.word	0xb0001000
 8007880:	2000044c 	.word	0x2000044c
 8007884:	00030d40 	.word	0x00030d40
 8007888:	b8004000 	.word	0xb8004000
 800788c:	b4002000 	.word	0xb4002000
 8007890:	ff7fffff 	.word	0xff7fffff
 8007894:	feffffff 	.word	0xfeffffff
 8007898:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a0:	2220      	movs	r2, #32
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80078a8:	2317      	movs	r3, #23
 80078aa:	18fb      	adds	r3, r7, r3
 80078ac:	2201      	movs	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2254      	movs	r2, #84	@ 0x54
 80078b4:	2100      	movs	r1, #0
 80078b6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80078b8:	2317      	movs	r3, #23
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	781b      	ldrb	r3, [r3, #0]
}
 80078be:	0018      	movs	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b006      	add	sp, #24
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			@ (mov r8, r8)

080078c8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	0018      	movs	r0, r3
 80078d6:	f7ff fa89 	bl	8006dec <LL_ADC_REG_IsConversionOngoing>
 80078da:	1e03      	subs	r3, r0, #0
 80078dc:	d031      	beq.n	8007942 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7ff fa4d 	bl	8006d82 <LL_ADC_IsDisableOngoing>
 80078e8:	1e03      	subs	r3, r0, #0
 80078ea:	d104      	bne.n	80078f6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7ff fa69 	bl	8006dc8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80078f6:	f7ff f917 	bl	8006b28 <HAL_GetTick>
 80078fa:	0003      	movs	r3, r0
 80078fc:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80078fe:	e01a      	b.n	8007936 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007900:	f7ff f912 	bl	8006b28 <HAL_GetTick>
 8007904:	0002      	movs	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d913      	bls.n	8007936 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2204      	movs	r2, #4
 8007916:	4013      	ands	r3, r2
 8007918:	d00d      	beq.n	8007936 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791e:	2210      	movs	r2, #16
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792a:	2201      	movs	r2, #1
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e006      	b.n	8007944 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2204      	movs	r2, #4
 800793e:	4013      	ands	r3, r2
 8007940:	d1de      	bne.n	8007900 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	0018      	movs	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	b004      	add	sp, #16
 800794a:	bd80      	pop	{r7, pc}

0800794c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	0018      	movs	r0, r3
 800795e:	f7ff f9ff 	bl	8006d60 <LL_ADC_IsEnabled>
 8007962:	1e03      	subs	r3, r0, #0
 8007964:	d000      	beq.n	8007968 <ADC_Enable+0x1c>
 8007966:	e069      	b.n	8007a3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	4a36      	ldr	r2, [pc, #216]	@ (8007a48 <ADC_Enable+0xfc>)
 8007970:	4013      	ands	r3, r2
 8007972:	d00d      	beq.n	8007990 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007978:	2210      	movs	r2, #16
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007984:	2201      	movs	r2, #1
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e056      	b.n	8007a3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	0018      	movs	r0, r3
 8007996:	f7ff f9bf 	bl	8006d18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800799a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a4c <ADC_Enable+0x100>)
 800799c:	0018      	movs	r0, r3
 800799e:	f7ff f8e1 	bl	8006b64 <LL_ADC_GetCommonPathInternalCh>
 80079a2:	0002      	movs	r2, r0
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	041b      	lsls	r3, r3, #16
 80079a8:	4013      	ands	r3, r2
 80079aa:	d00f      	beq.n	80079cc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079ac:	4b28      	ldr	r3, [pc, #160]	@ (8007a50 <ADC_Enable+0x104>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4928      	ldr	r1, [pc, #160]	@ (8007a54 <ADC_Enable+0x108>)
 80079b2:	0018      	movs	r0, r3
 80079b4:	f7f8 fba8 	bl	8000108 <__udivsi3>
 80079b8:	0003      	movs	r3, r0
 80079ba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80079bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80079be:	e002      	b.n	80079c6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f9      	bne.n	80079c0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7e5b      	ldrb	r3, [r3, #25]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d033      	beq.n	8007a3c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80079d4:	f7ff f8a8 	bl	8006b28 <HAL_GetTick>
 80079d8:	0003      	movs	r3, r0
 80079da:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079dc:	e027      	b.n	8007a2e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	0018      	movs	r0, r3
 80079e4:	f7ff f9bc 	bl	8006d60 <LL_ADC_IsEnabled>
 80079e8:	1e03      	subs	r3, r0, #0
 80079ea:	d104      	bne.n	80079f6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7ff f991 	bl	8006d18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80079f6:	f7ff f897 	bl	8006b28 <HAL_GetTick>
 80079fa:	0002      	movs	r2, r0
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d914      	bls.n	8007a2e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00d      	beq.n	8007a2e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a16:	2210      	movs	r2, #16
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a22:	2201      	movs	r2, #1
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e007      	b.n	8007a3e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2201      	movs	r2, #1
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d1d0      	bne.n	80079de <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	0018      	movs	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b004      	add	sp, #16
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	80000017 	.word	0x80000017
 8007a4c:	40012708 	.word	0x40012708
 8007a50:	2000044c 	.word	0x2000044c
 8007a54:	00030d40 	.word	0x00030d40

08007a58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	0018      	movs	r0, r3
 8007a66:	f7ff f98c 	bl	8006d82 <LL_ADC_IsDisableOngoing>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	0018      	movs	r0, r3
 8007a74:	f7ff f974 	bl	8006d60 <LL_ADC_IsEnabled>
 8007a78:	1e03      	subs	r3, r0, #0
 8007a7a:	d046      	beq.n	8007b0a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d143      	bne.n	8007b0a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2205      	movs	r2, #5
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10d      	bne.n	8007aac <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f7ff f951 	bl	8006d3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007aa2:	f7ff f841 	bl	8006b28 <HAL_GetTick>
 8007aa6:	0003      	movs	r3, r0
 8007aa8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007aaa:	e028      	b.n	8007afe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007abc:	2201      	movs	r2, #1
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e021      	b.n	8007b0c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007ac8:	f7ff f82e 	bl	8006b28 <HAL_GetTick>
 8007acc:	0002      	movs	r2, r0
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d913      	bls.n	8007afe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2201      	movs	r2, #1
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d00d      	beq.n	8007afe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af2:	2201      	movs	r2, #1
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e006      	b.n	8007b0c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2201      	movs	r2, #1
 8007b06:	4013      	ands	r3, r2
 8007b08:	d1de      	bne.n	8007ac8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b004      	add	sp, #16
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b26:	2250      	movs	r2, #80	@ 0x50
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d142      	bne.n	8007bb2 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b30:	2280      	movs	r2, #128	@ 0x80
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f7ff f851 	bl	8006be6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b44:	1e03      	subs	r3, r0, #0
 8007b46:	d02e      	beq.n	8007ba6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	7e9b      	ldrb	r3, [r3, #26]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d12a      	bne.n	8007ba6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2208      	movs	r2, #8
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d123      	bne.n	8007ba6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	0018      	movs	r0, r3
 8007b64:	f7ff f942 	bl	8006dec <LL_ADC_REG_IsConversionOngoing>
 8007b68:	1e03      	subs	r3, r0, #0
 8007b6a:	d110      	bne.n	8007b8e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	210c      	movs	r1, #12
 8007b78:	438a      	bics	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b80:	4a16      	ldr	r2, [pc, #88]	@ (8007bdc <ADC_DMAConvCplt+0xc8>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	2201      	movs	r2, #1
 8007b86:	431a      	orrs	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b8c:	e00b      	b.n	8007ba6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b92:	2220      	movs	r2, #32
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	0010      	movs	r0, r2
 8007bae:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007bb0:	e010      	b.n	8007bd4 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb6:	2210      	movs	r2, #16
 8007bb8:	4013      	ands	r3, r2
 8007bba:	d005      	beq.n	8007bc8 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	0010      	movs	r0, r2
 8007bc4:	4798      	blx	r3
}
 8007bc6:	e005      	b.n	8007bd4 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	0010      	movs	r0, r2
 8007bd2:	4798      	blx	r3
}
 8007bd4:	46c0      	nop			@ (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b004      	add	sp, #16
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	fffffefe 	.word	0xfffffefe

08007be0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	0010      	movs	r0, r2
 8007bf6:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b004      	add	sp, #16
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c12:	2240      	movs	r2, #64	@ 0x40
 8007c14:	431a      	orrs	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c1e:	2204      	movs	r2, #4
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	0010      	movs	r0, r2
 8007c2e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c30:	46c0      	nop			@ (mov r8, r8)
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b004      	add	sp, #16
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <LL_ADC_GetCommonClock>:
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	23f0      	movs	r3, #240	@ 0xf0
 8007c46:	039b      	lsls	r3, r3, #14
 8007c48:	4013      	ands	r3, r2
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b002      	add	sp, #8
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <LL_ADC_GetClock>:
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	0f9b      	lsrs	r3, r3, #30
 8007c60:	079b      	lsls	r3, r3, #30
}
 8007c62:	0018      	movs	r0, r3
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b002      	add	sp, #8
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <LL_ADC_SetCalibrationFactor>:
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	22b4      	movs	r2, #180	@ 0xb4
 8007c78:	589b      	ldr	r3, [r3, r2]
 8007c7a:	227f      	movs	r2, #127	@ 0x7f
 8007c7c:	4393      	bics	r3, r2
 8007c7e:	001a      	movs	r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	21b4      	movs	r1, #180	@ 0xb4
 8007c88:	505a      	str	r2, [r3, r1]
}
 8007c8a:	46c0      	nop			@ (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b002      	add	sp, #8
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <LL_ADC_GetCalibrationFactor>:
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	22b4      	movs	r2, #180	@ 0xb4
 8007c9e:	589b      	ldr	r3, [r3, r2]
 8007ca0:	227f      	movs	r2, #127	@ 0x7f
 8007ca2:	4013      	ands	r3, r2
}
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	b002      	add	sp, #8
 8007caa:	bd80      	pop	{r7, pc}

08007cac <LL_ADC_Enable>:
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4a04      	ldr	r2, [pc, #16]	@ (8007ccc <LL_ADC_Enable+0x20>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	46c0      	nop			@ (mov r8, r8)
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b002      	add	sp, #8
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	7fffffe8 	.word	0x7fffffe8

08007cd0 <LL_ADC_Disable>:
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	4a04      	ldr	r2, [pc, #16]	@ (8007cf0 <LL_ADC_Disable+0x20>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	609a      	str	r2, [r3, #8]
}
 8007ce8:	46c0      	nop			@ (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	7fffffe8 	.word	0x7fffffe8

08007cf4 <LL_ADC_IsEnabled>:
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2201      	movs	r2, #1
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <LL_ADC_IsEnabled+0x18>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <LL_ADC_IsEnabled+0x1a>
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	0018      	movs	r0, r3
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b002      	add	sp, #8
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <LL_ADC_StartCalibration>:
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	4a05      	ldr	r2, [pc, #20]	@ (8007d3c <LL_ADC_StartCalibration+0x24>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	2280      	movs	r2, #128	@ 0x80
 8007d2a:	0612      	lsls	r2, r2, #24
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	609a      	str	r2, [r3, #8]
}
 8007d32:	46c0      	nop			@ (mov r8, r8)
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b002      	add	sp, #8
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	46c0      	nop			@ (mov r8, r8)
 8007d3c:	7fffffe8 	.word	0x7fffffe8

08007d40 <LL_ADC_IsCalibrationOnGoing>:
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	0fdb      	lsrs	r3, r3, #31
 8007d4e:	07da      	lsls	r2, r3, #31
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d101      	bne.n	8007d5c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	0018      	movs	r0, r3
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b002      	add	sp, #8
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8007d68:	b590      	push	{r4, r7, lr}
 8007d6a:	b08b      	sub	sp, #44	@ 0x2c
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2254      	movs	r2, #84	@ 0x54
 8007d7c:	5c9b      	ldrb	r3, [r3, r2]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_ADCEx_Calibration_Start+0x1e>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0dd      	b.n	8007f42 <HAL_ADCEx_Calibration_Start+0x1da>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2254      	movs	r2, #84	@ 0x54
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007d8e:	231f      	movs	r3, #31
 8007d90:	18fc      	adds	r4, r7, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	0018      	movs	r0, r3
 8007d96:	f7ff fe5f 	bl	8007a58 <ADC_Disable>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7ff ffa6 	bl	8007cf4 <LL_ADC_IsEnabled>
 8007da8:	1e03      	subs	r3, r0, #0
 8007daa:	d000      	beq.n	8007dae <HAL_ADCEx_Calibration_Start+0x46>
 8007dac:	e0bc      	b.n	8007f28 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db2:	4a66      	ldr	r2, [pc, #408]	@ (8007f4c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	2202      	movs	r2, #2
 8007db8:	431a      	orrs	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	4a62      	ldr	r2, [pc, #392]	@ (8007f50 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	495f      	ldr	r1, [pc, #380]	@ (8007f54 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007dd6:	400a      	ands	r2, r1
 8007dd8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dde:	e02d      	b.n	8007e3c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	0018      	movs	r0, r3
 8007de6:	f7ff ff97 	bl	8007d18 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007dea:	e014      	b.n	8007e16 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4a58      	ldr	r2, [pc, #352]	@ (8007f58 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d90d      	bls.n	8007e16 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfe:	2212      	movs	r2, #18
 8007e00:	4393      	bics	r3, r2
 8007e02:	2210      	movs	r2, #16
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2254      	movs	r2, #84	@ 0x54
 8007e0e:	2100      	movs	r1, #0
 8007e10:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e095      	b.n	8007f42 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f7ff ff90 	bl	8007d40 <LL_ADC_IsCalibrationOnGoing>
 8007e20:	1e03      	subs	r3, r0, #0
 8007e22:	d1e3      	bne.n	8007dec <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7ff ff32 	bl	8007c92 <LL_ADC_GetCalibrationFactor>
 8007e2e:	0002      	movs	r2, r0
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	3301      	adds	r3, #1
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	2b07      	cmp	r3, #7
 8007e40:	d9ce      	bls.n	8007de0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007e42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e44:	6a38      	ldr	r0, [r7, #32]
 8007e46:	f7f8 f95f 	bl	8000108 <__udivsi3>
 8007e4a:	0003      	movs	r3, r0
 8007e4c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	0018      	movs	r0, r3
 8007e54:	f7ff ff2a 	bl	8007cac <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f7ff fef8 	bl	8007c52 <LL_ADC_GetClock>
 8007e62:	1e03      	subs	r3, r0, #0
 8007e64:	d11b      	bne.n	8007e9e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e66:	4b3d      	ldr	r3, [pc, #244]	@ (8007f5c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8007e68:	0018      	movs	r0, r3
 8007e6a:	f7ff fee5 	bl	8007c38 <LL_ADC_GetCommonClock>
 8007e6e:	0003      	movs	r3, r0
 8007e70:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	23e0      	movs	r3, #224	@ 0xe0
 8007e76:	035b      	lsls	r3, r3, #13
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d310      	bcc.n	8007e9e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	0c9b      	lsrs	r3, r3, #18
 8007e80:	3b03      	subs	r3, #3
 8007e82:	2201      	movs	r2, #1
 8007e84:	409a      	lsls	r2, r3
 8007e86:	0013      	movs	r3, r2
 8007e88:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8007e90:	e002      	b.n	8007e98 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f9      	bne.n	8007e92 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	0011      	movs	r1, r2
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	f7ff fedf 	bl	8007c6a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f7ff ff0d 	bl	8007cd0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007eb6:	f7fe fe37 	bl	8006b28 <HAL_GetTick>
 8007eba:	0003      	movs	r3, r0
 8007ebc:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007ebe:	e01b      	b.n	8007ef8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007ec0:	f7fe fe32 	bl	8006b28 <HAL_GetTick>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d914      	bls.n	8007ef8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f7ff ff0e 	bl	8007cf4 <LL_ADC_IsEnabled>
 8007ed8:	1e03      	subs	r3, r0, #0
 8007eda:	d00d      	beq.n	8007ef8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eec:	2201      	movs	r2, #1
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e024      	b.n	8007f42 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7ff fef9 	bl	8007cf4 <LL_ADC_IsEnabled>
 8007f02:	1e03      	subs	r3, r0, #0
 8007f04:	d1dc      	bne.n	8007ec0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68d9      	ldr	r1, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	4393      	bics	r3, r2
 8007f1e:	2201      	movs	r2, #1
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f26:	e005      	b.n	8007f34 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2254      	movs	r2, #84	@ 0x54
 8007f38:	2100      	movs	r1, #0
 8007f3a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007f3c:	231f      	movs	r3, #31
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	781b      	ldrb	r3, [r3, #0]
}
 8007f42:	0018      	movs	r0, r3
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b00b      	add	sp, #44	@ 0x2c
 8007f48:	bd90      	pop	{r4, r7, pc}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	fffffefd 	.word	0xfffffefd
 8007f50:	00008003 	.word	0x00008003
 8007f54:	ffff7ffc 	.word	0xffff7ffc
 8007f58:	0002f1ff 	.word	0x0002f1ff
 8007f5c:	40012708 	.word	0x40012708

08007f60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007f68:	46c0      	nop			@ (mov r8, r8)
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b002      	add	sp, #8
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007f78:	46c0      	nop			@ (mov r8, r8)
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007f88:	46c0      	nop			@ (mov r8, r8)
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	b002      	add	sp, #8
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	0002      	movs	r2, r0
 8007f98:	1dfb      	adds	r3, r7, #7
 8007f9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f9c:	1dfb      	adds	r3, r7, #7
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fa2:	d809      	bhi.n	8007fb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fa4:	1dfb      	adds	r3, r7, #7
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	001a      	movs	r2, r3
 8007faa:	231f      	movs	r3, #31
 8007fac:	401a      	ands	r2, r3
 8007fae:	4b04      	ldr	r3, [pc, #16]	@ (8007fc0 <__NVIC_EnableIRQ+0x30>)
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	4091      	lsls	r1, r2
 8007fb4:	000a      	movs	r2, r1
 8007fb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007fb8:	46c0      	nop			@ (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	e000e100 	.word	0xe000e100

08007fc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	0002      	movs	r2, r0
 8007fcc:	1dfb      	adds	r3, r7, #7
 8007fce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007fd0:	1dfb      	adds	r3, r7, #7
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fd6:	d810      	bhi.n	8007ffa <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fd8:	1dfb      	adds	r3, r7, #7
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	001a      	movs	r2, r3
 8007fde:	231f      	movs	r3, #31
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	4908      	ldr	r1, [pc, #32]	@ (8008004 <__NVIC_DisableIRQ+0x40>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	409a      	lsls	r2, r3
 8007fe8:	0013      	movs	r3, r2
 8007fea:	2280      	movs	r2, #128	@ 0x80
 8007fec:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007fee:	f3bf 8f4f 	dsb	sy
}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007ff4:	f3bf 8f6f 	isb	sy
}
 8007ff8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	b002      	add	sp, #8
 8008000:	bd80      	pop	{r7, pc}
 8008002:	46c0      	nop			@ (mov r8, r8)
 8008004:	e000e100 	.word	0xe000e100

08008008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	0002      	movs	r2, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	1dfb      	adds	r3, r7, #7
 8008014:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008016:	1dfb      	adds	r3, r7, #7
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b7f      	cmp	r3, #127	@ 0x7f
 800801c:	d828      	bhi.n	8008070 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800801e:	4a2f      	ldr	r2, [pc, #188]	@ (80080dc <__NVIC_SetPriority+0xd4>)
 8008020:	1dfb      	adds	r3, r7, #7
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	b25b      	sxtb	r3, r3
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	33c0      	adds	r3, #192	@ 0xc0
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	589b      	ldr	r3, [r3, r2]
 800802e:	1dfa      	adds	r2, r7, #7
 8008030:	7812      	ldrb	r2, [r2, #0]
 8008032:	0011      	movs	r1, r2
 8008034:	2203      	movs	r2, #3
 8008036:	400a      	ands	r2, r1
 8008038:	00d2      	lsls	r2, r2, #3
 800803a:	21ff      	movs	r1, #255	@ 0xff
 800803c:	4091      	lsls	r1, r2
 800803e:	000a      	movs	r2, r1
 8008040:	43d2      	mvns	r2, r2
 8008042:	401a      	ands	r2, r3
 8008044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	019b      	lsls	r3, r3, #6
 800804a:	22ff      	movs	r2, #255	@ 0xff
 800804c:	401a      	ands	r2, r3
 800804e:	1dfb      	adds	r3, r7, #7
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	0018      	movs	r0, r3
 8008054:	2303      	movs	r3, #3
 8008056:	4003      	ands	r3, r0
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800805c:	481f      	ldr	r0, [pc, #124]	@ (80080dc <__NVIC_SetPriority+0xd4>)
 800805e:	1dfb      	adds	r3, r7, #7
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b25b      	sxtb	r3, r3
 8008064:	089b      	lsrs	r3, r3, #2
 8008066:	430a      	orrs	r2, r1
 8008068:	33c0      	adds	r3, #192	@ 0xc0
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800806e:	e031      	b.n	80080d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008070:	4a1b      	ldr	r2, [pc, #108]	@ (80080e0 <__NVIC_SetPriority+0xd8>)
 8008072:	1dfb      	adds	r3, r7, #7
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	0019      	movs	r1, r3
 8008078:	230f      	movs	r3, #15
 800807a:	400b      	ands	r3, r1
 800807c:	3b08      	subs	r3, #8
 800807e:	089b      	lsrs	r3, r3, #2
 8008080:	3306      	adds	r3, #6
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	18d3      	adds	r3, r2, r3
 8008086:	3304      	adds	r3, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	1dfa      	adds	r2, r7, #7
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	0011      	movs	r1, r2
 8008090:	2203      	movs	r2, #3
 8008092:	400a      	ands	r2, r1
 8008094:	00d2      	lsls	r2, r2, #3
 8008096:	21ff      	movs	r1, #255	@ 0xff
 8008098:	4091      	lsls	r1, r2
 800809a:	000a      	movs	r2, r1
 800809c:	43d2      	mvns	r2, r2
 800809e:	401a      	ands	r2, r3
 80080a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	019b      	lsls	r3, r3, #6
 80080a6:	22ff      	movs	r2, #255	@ 0xff
 80080a8:	401a      	ands	r2, r3
 80080aa:	1dfb      	adds	r3, r7, #7
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	0018      	movs	r0, r3
 80080b0:	2303      	movs	r3, #3
 80080b2:	4003      	ands	r3, r0
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080b8:	4809      	ldr	r0, [pc, #36]	@ (80080e0 <__NVIC_SetPriority+0xd8>)
 80080ba:	1dfb      	adds	r3, r7, #7
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	001c      	movs	r4, r3
 80080c0:	230f      	movs	r3, #15
 80080c2:	4023      	ands	r3, r4
 80080c4:	3b08      	subs	r3, #8
 80080c6:	089b      	lsrs	r3, r3, #2
 80080c8:	430a      	orrs	r2, r1
 80080ca:	3306      	adds	r3, #6
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	18c3      	adds	r3, r0, r3
 80080d0:	3304      	adds	r3, #4
 80080d2:	601a      	str	r2, [r3, #0]
}
 80080d4:	46c0      	nop			@ (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b003      	add	sp, #12
 80080da:	bd90      	pop	{r4, r7, pc}
 80080dc:	e000e100 	.word	0xe000e100
 80080e0:	e000ed00 	.word	0xe000ed00

080080e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	1e5a      	subs	r2, r3, #1
 80080f0:	2380      	movs	r3, #128	@ 0x80
 80080f2:	045b      	lsls	r3, r3, #17
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d301      	bcc.n	80080fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080f8:	2301      	movs	r3, #1
 80080fa:	e010      	b.n	800811e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <SysTick_Config+0x44>)
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	3a01      	subs	r2, #1
 8008102:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008104:	2301      	movs	r3, #1
 8008106:	425b      	negs	r3, r3
 8008108:	2103      	movs	r1, #3
 800810a:	0018      	movs	r0, r3
 800810c:	f7ff ff7c 	bl	8008008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008110:	4b05      	ldr	r3, [pc, #20]	@ (8008128 <SysTick_Config+0x44>)
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008116:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <SysTick_Config+0x44>)
 8008118:	2207      	movs	r2, #7
 800811a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800811c:	2300      	movs	r3, #0
}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b002      	add	sp, #8
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	e000e010 	.word	0xe000e010

0800812c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
 8008136:	210f      	movs	r1, #15
 8008138:	187b      	adds	r3, r7, r1
 800813a:	1c02      	adds	r2, r0, #0
 800813c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	187b      	adds	r3, r7, r1
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	b25b      	sxtb	r3, r3
 8008146:	0011      	movs	r1, r2
 8008148:	0018      	movs	r0, r3
 800814a:	f7ff ff5d 	bl	8008008 <__NVIC_SetPriority>
}
 800814e:	46c0      	nop			@ (mov r8, r8)
 8008150:	46bd      	mov	sp, r7
 8008152:	b004      	add	sp, #16
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	0002      	movs	r2, r0
 800815e:	1dfb      	adds	r3, r7, #7
 8008160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008162:	1dfb      	adds	r3, r7, #7
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	b25b      	sxtb	r3, r3
 8008168:	0018      	movs	r0, r3
 800816a:	f7ff ff11 	bl	8007f90 <__NVIC_EnableIRQ>
}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	46bd      	mov	sp, r7
 8008172:	b002      	add	sp, #8
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	0002      	movs	r2, r0
 800817e:	1dfb      	adds	r3, r7, #7
 8008180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008182:	1dfb      	adds	r3, r7, #7
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b25b      	sxtb	r3, r3
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff ff1b 	bl	8007fc4 <__NVIC_DisableIRQ>
}
 800818e:	46c0      	nop			@ (mov r8, r8)
 8008190:	46bd      	mov	sp, r7
 8008192:	b002      	add	sp, #8
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	0018      	movs	r0, r3
 80081a2:	f7ff ff9f 	bl	80080e4 <SysTick_Config>
 80081a6:	0003      	movs	r3, r0
}
 80081a8:	0018      	movs	r0, r3
 80081aa:	46bd      	mov	sp, r7
 80081ac:	b002      	add	sp, #8
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e077      	b.n	80082b2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a3d      	ldr	r2, [pc, #244]	@ (80082bc <HAL_DMA_Init+0x10c>)
 80081c8:	4694      	mov	ip, r2
 80081ca:	4463      	add	r3, ip
 80081cc:	2114      	movs	r1, #20
 80081ce:	0018      	movs	r0, r3
 80081d0:	f7f7 ff9a 	bl	8000108 <__udivsi3>
 80081d4:	0003      	movs	r3, r0
 80081d6:	009a      	lsls	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2225      	movs	r2, #37	@ 0x25
 80081e0:	2102      	movs	r1, #2
 80081e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4934      	ldr	r1, [pc, #208]	@ (80082c0 <HAL_DMA_Init+0x110>)
 80081f0:	400a      	ands	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6819      	ldr	r1, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	431a      	orrs	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	0018      	movs	r0, r3
 800822e:	f000 fa8d 	bl	800874c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	2380      	movs	r3, #128	@ 0x80
 8008238:	01db      	lsls	r3, r3, #7
 800823a:	429a      	cmp	r2, r3
 800823c:	d102      	bne.n	8008244 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	213f      	movs	r1, #63	@ 0x3f
 800824e:	400a      	ands	r2, r1
 8008250:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800825a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d011      	beq.n	8008288 <HAL_DMA_Init+0xd8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b04      	cmp	r3, #4
 800826a:	d80d      	bhi.n	8008288 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	0018      	movs	r0, r3
 8008270:	f000 fa98 	bl	80087a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008284:	605a      	str	r2, [r3, #4]
 8008286:	e008      	b.n	800829a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2225      	movs	r2, #37	@ 0x25
 80082a4:	2101      	movs	r1, #1
 80082a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2224      	movs	r2, #36	@ 0x24
 80082ac:	2100      	movs	r1, #0
 80082ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	0018      	movs	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	b002      	add	sp, #8
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	46c0      	nop			@ (mov r8, r8)
 80082bc:	bffdfff8 	.word	0xbffdfff8
 80082c0:	ffff800f 	.word	0xffff800f

080082c4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d2:	2317      	movs	r3, #23
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2224      	movs	r2, #36	@ 0x24
 80082de:	5c9b      	ldrb	r3, [r3, r2]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_DMA_Start_IT+0x24>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e06f      	b.n	80083c8 <HAL_DMA_Start_IT+0x104>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2224      	movs	r2, #36	@ 0x24
 80082ec:	2101      	movs	r1, #1
 80082ee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2225      	movs	r2, #37	@ 0x25
 80082f4:	5c9b      	ldrb	r3, [r3, r2]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d157      	bne.n	80083ac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2225      	movs	r2, #37	@ 0x25
 8008300:	2102      	movs	r1, #2
 8008302:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2101      	movs	r1, #1
 8008316:	438a      	bics	r2, r1
 8008318:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f9d3 	bl	80086cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	210e      	movs	r1, #14
 800833a:	430a      	orrs	r2, r1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e00f      	b.n	8008360 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2104      	movs	r1, #4
 800834c:	438a      	bics	r2, r1
 800834e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	210a      	movs	r1, #10
 800835c:	430a      	orrs	r2, r1
 800835e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	2380      	movs	r3, #128	@ 0x80
 8008368:	025b      	lsls	r3, r3, #9
 800836a:	4013      	ands	r3, r2
 800836c:	d008      	beq.n	8008380 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008378:	2180      	movs	r1, #128	@ 0x80
 800837a:	0049      	lsls	r1, r1, #1
 800837c:	430a      	orrs	r2, r1
 800837e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008384:	2b00      	cmp	r3, #0
 8008386:	d008      	beq.n	800839a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008392:	2180      	movs	r1, #128	@ 0x80
 8008394:	0049      	lsls	r1, r1, #1
 8008396:	430a      	orrs	r2, r1
 8008398:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2101      	movs	r1, #1
 80083a6:	430a      	orrs	r2, r1
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	e00a      	b.n	80083c2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2280      	movs	r2, #128	@ 0x80
 80083b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2224      	movs	r2, #36	@ 0x24
 80083b6:	2100      	movs	r1, #0
 80083b8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80083ba:	2317      	movs	r3, #23
 80083bc:	18fb      	adds	r3, r7, r3
 80083be:	2201      	movs	r2, #1
 80083c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80083c2:	2317      	movs	r3, #23
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	781b      	ldrb	r3, [r3, #0]
}
 80083c8:	0018      	movs	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b006      	add	sp, #24
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e050      	b.n	8008484 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2225      	movs	r2, #37	@ 0x25
 80083e6:	5c9b      	ldrb	r3, [r3, r2]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d008      	beq.n	8008400 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2204      	movs	r2, #4
 80083f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2224      	movs	r2, #36	@ 0x24
 80083f8:	2100      	movs	r1, #0
 80083fa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e041      	b.n	8008484 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	210e      	movs	r1, #14
 800840c:	438a      	bics	r2, r1
 800840e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841a:	491c      	ldr	r1, [pc, #112]	@ (800848c <HAL_DMA_Abort+0xbc>)
 800841c:	400a      	ands	r2, r1
 800841e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2101      	movs	r1, #1
 800842c:	438a      	bics	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008430:	4b17      	ldr	r3, [pc, #92]	@ (8008490 <HAL_DMA_Abort+0xc0>)
 8008432:	6859      	ldr	r1, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	221c      	movs	r2, #28
 800843a:	4013      	ands	r3, r2
 800843c:	2201      	movs	r2, #1
 800843e:	409a      	lsls	r2, r3
 8008440:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <HAL_DMA_Abort+0xc0>)
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800844e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00c      	beq.n	8008472 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008462:	490a      	ldr	r1, [pc, #40]	@ (800848c <HAL_DMA_Abort+0xbc>)
 8008464:	400a      	ands	r2, r1
 8008466:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008470:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2225      	movs	r2, #37	@ 0x25
 8008476:	2101      	movs	r1, #1
 8008478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2224      	movs	r2, #36	@ 0x24
 800847e:	2100      	movs	r1, #0
 8008480:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	0018      	movs	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	b002      	add	sp, #8
 800848a:	bd80      	pop	{r7, pc}
 800848c:	fffffeff 	.word	0xfffffeff
 8008490:	40020000 	.word	0x40020000

08008494 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800849c:	210f      	movs	r1, #15
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2225      	movs	r2, #37	@ 0x25
 80084a8:	5c9b      	ldrb	r3, [r3, r2]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d006      	beq.n	80084be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2204      	movs	r2, #4
 80084b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80084b6:	187b      	adds	r3, r7, r1
 80084b8:	2201      	movs	r2, #1
 80084ba:	701a      	strb	r2, [r3, #0]
 80084bc:	e049      	b.n	8008552 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	210e      	movs	r1, #14
 80084ca:	438a      	bics	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2101      	movs	r1, #1
 80084da:	438a      	bics	r2, r1
 80084dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e8:	491d      	ldr	r1, [pc, #116]	@ (8008560 <HAL_DMA_Abort_IT+0xcc>)
 80084ea:	400a      	ands	r2, r1
 80084ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80084ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <HAL_DMA_Abort_IT+0xd0>)
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	221c      	movs	r2, #28
 80084f8:	4013      	ands	r3, r2
 80084fa:	2201      	movs	r2, #1
 80084fc:	409a      	lsls	r2, r3
 80084fe:	4b19      	ldr	r3, [pc, #100]	@ (8008564 <HAL_DMA_Abort_IT+0xd0>)
 8008500:	430a      	orrs	r2, r1
 8008502:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800850c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00c      	beq.n	8008530 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008520:	490f      	ldr	r1, [pc, #60]	@ (8008560 <HAL_DMA_Abort_IT+0xcc>)
 8008522:	400a      	ands	r2, r1
 8008524:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800852e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2225      	movs	r2, #37	@ 0x25
 8008534:	2101      	movs	r1, #1
 8008536:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	@ 0x24
 800853c:	2100      	movs	r1, #0
 800853e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	0010      	movs	r0, r2
 8008550:	4798      	blx	r3
    }
  }
  return status;
 8008552:	230f      	movs	r3, #15
 8008554:	18fb      	adds	r3, r7, r3
 8008556:	781b      	ldrb	r3, [r3, #0]
}
 8008558:	0018      	movs	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	b004      	add	sp, #16
 800855e:	bd80      	pop	{r7, pc}
 8008560:	fffffeff 	.word	0xfffffeff
 8008564:	40020000 	.word	0x40020000

08008568 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8008570:	4b55      	ldr	r3, [pc, #340]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	221c      	movs	r2, #28
 8008584:	4013      	ands	r3, r2
 8008586:	2204      	movs	r2, #4
 8008588:	409a      	lsls	r2, r3
 800858a:	0013      	movs	r3, r2
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4013      	ands	r3, r2
 8008590:	d027      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x7a>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2204      	movs	r2, #4
 8008596:	4013      	ands	r3, r2
 8008598:	d023      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2220      	movs	r2, #32
 80085a2:	4013      	ands	r3, r2
 80085a4:	d107      	bne.n	80085b6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2104      	movs	r1, #4
 80085b2:	438a      	bics	r2, r1
 80085b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80085b6:	4b44      	ldr	r3, [pc, #272]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 80085b8:	6859      	ldr	r1, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085be:	221c      	movs	r2, #28
 80085c0:	4013      	ands	r3, r2
 80085c2:	2204      	movs	r2, #4
 80085c4:	409a      	lsls	r2, r3
 80085c6:	4b40      	ldr	r3, [pc, #256]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 80085c8:	430a      	orrs	r2, r1
 80085ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d100      	bne.n	80085d6 <HAL_DMA_IRQHandler+0x6e>
 80085d4:	e073      	b.n	80086be <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	0010      	movs	r0, r2
 80085de:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80085e0:	e06d      	b.n	80086be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	221c      	movs	r2, #28
 80085e8:	4013      	ands	r3, r2
 80085ea:	2202      	movs	r2, #2
 80085ec:	409a      	lsls	r2, r3
 80085ee:	0013      	movs	r3, r2
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4013      	ands	r3, r2
 80085f4:	d02e      	beq.n	8008654 <HAL_DMA_IRQHandler+0xec>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2202      	movs	r2, #2
 80085fa:	4013      	ands	r3, r2
 80085fc:	d02a      	beq.n	8008654 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2220      	movs	r2, #32
 8008606:	4013      	ands	r3, r2
 8008608:	d10b      	bne.n	8008622 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	210a      	movs	r1, #10
 8008616:	438a      	bics	r2, r1
 8008618:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2225      	movs	r2, #37	@ 0x25
 800861e:	2101      	movs	r1, #1
 8008620:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8008622:	4b29      	ldr	r3, [pc, #164]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 8008624:	6859      	ldr	r1, [r3, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862a:	221c      	movs	r2, #28
 800862c:	4013      	ands	r3, r2
 800862e:	2202      	movs	r2, #2
 8008630:	409a      	lsls	r2, r3
 8008632:	4b25      	ldr	r3, [pc, #148]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 8008634:	430a      	orrs	r2, r1
 8008636:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2224      	movs	r2, #36	@ 0x24
 800863c:	2100      	movs	r1, #0
 800863e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d03a      	beq.n	80086be <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	0010      	movs	r0, r2
 8008650:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8008652:	e034      	b.n	80086be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	221c      	movs	r2, #28
 800865a:	4013      	ands	r3, r2
 800865c:	2208      	movs	r2, #8
 800865e:	409a      	lsls	r2, r3
 8008660:	0013      	movs	r3, r2
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4013      	ands	r3, r2
 8008666:	d02b      	beq.n	80086c0 <HAL_DMA_IRQHandler+0x158>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2208      	movs	r2, #8
 800866c:	4013      	ands	r3, r2
 800866e:	d027      	beq.n	80086c0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	210e      	movs	r1, #14
 800867c:	438a      	bics	r2, r1
 800867e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008680:	4b11      	ldr	r3, [pc, #68]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 8008682:	6859      	ldr	r1, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008688:	221c      	movs	r2, #28
 800868a:	4013      	ands	r3, r2
 800868c:	2201      	movs	r2, #1
 800868e:	409a      	lsls	r2, r3
 8008690:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <HAL_DMA_IRQHandler+0x160>)
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2225      	movs	r2, #37	@ 0x25
 80086a0:	2101      	movs	r1, #1
 80086a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2224      	movs	r2, #36	@ 0x24
 80086a8:	2100      	movs	r1, #0
 80086aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	0010      	movs	r0, r2
 80086bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80086be:	46c0      	nop			@ (mov r8, r8)
 80086c0:	46c0      	nop			@ (mov r8, r8)
}
 80086c2:	46bd      	mov	sp, r7
 80086c4:	b004      	add	sp, #16
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40020000 	.word	0x40020000

080086cc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80086e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80086f4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80086f6:	4b14      	ldr	r3, [pc, #80]	@ (8008748 <DMA_SetConfig+0x7c>)
 80086f8:	6859      	ldr	r1, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	221c      	movs	r2, #28
 8008700:	4013      	ands	r3, r2
 8008702:	2201      	movs	r2, #1
 8008704:	409a      	lsls	r2, r3
 8008706:	4b10      	ldr	r3, [pc, #64]	@ (8008748 <DMA_SetConfig+0x7c>)
 8008708:	430a      	orrs	r2, r1
 800870a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2b10      	cmp	r3, #16
 800871a:	d108      	bne.n	800872e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800872c:	e007      	b.n	800873e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	60da      	str	r2, [r3, #12]
}
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	46bd      	mov	sp, r7
 8008742:	b004      	add	sp, #16
 8008744:	bd80      	pop	{r7, pc}
 8008746:	46c0      	nop			@ (mov r8, r8)
 8008748:	40020000 	.word	0x40020000

0800874c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008758:	089b      	lsrs	r3, r3, #2
 800875a:	4a10      	ldr	r2, [pc, #64]	@ (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800875c:	4694      	mov	ip, r2
 800875e:	4463      	add	r3, ip
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	001a      	movs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	001a      	movs	r2, r3
 800876e:	23ff      	movs	r3, #255	@ 0xff
 8008770:	4013      	ands	r3, r2
 8008772:	3b08      	subs	r3, #8
 8008774:	2114      	movs	r1, #20
 8008776:	0018      	movs	r0, r3
 8008778:	f7f7 fcc6 	bl	8000108 <__udivsi3>
 800877c:	0003      	movs	r3, r0
 800877e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a07      	ldr	r2, [pc, #28]	@ (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8008784:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	221f      	movs	r2, #31
 800878a:	4013      	ands	r3, r2
 800878c:	2201      	movs	r2, #1
 800878e:	409a      	lsls	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8008794:	46c0      	nop			@ (mov r8, r8)
 8008796:	46bd      	mov	sp, r7
 8008798:	b004      	add	sp, #16
 800879a:	bd80      	pop	{r7, pc}
 800879c:	10008200 	.word	0x10008200
 80087a0:	40020880 	.word	0x40020880

080087a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	223f      	movs	r2, #63	@ 0x3f
 80087b2:	4013      	ands	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4a0a      	ldr	r2, [pc, #40]	@ (80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80087ba:	4694      	mov	ip, r2
 80087bc:	4463      	add	r3, ip
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	001a      	movs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a07      	ldr	r2, [pc, #28]	@ (80087e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80087ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2203      	movs	r2, #3
 80087d2:	4013      	ands	r3, r2
 80087d4:	2201      	movs	r2, #1
 80087d6:	409a      	lsls	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80087dc:	46c0      	nop			@ (mov r8, r8)
 80087de:	46bd      	mov	sp, r7
 80087e0:	b004      	add	sp, #16
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	1000823f 	.word	0x1000823f
 80087e8:	40020940 	.word	0x40020940

080087ec <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80087ec:	b5b0      	push	{r4, r5, r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603a      	str	r2, [r7, #0]
 80087f8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80087fa:	4b21      	ldr	r3, [pc, #132]	@ (8008880 <HAL_FLASH_Program+0x94>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_FLASH_Program+0x1a>
 8008802:	2302      	movs	r3, #2
 8008804:	e038      	b.n	8008878 <HAL_FLASH_Program+0x8c>
 8008806:	4b1e      	ldr	r3, [pc, #120]	@ (8008880 <HAL_FLASH_Program+0x94>)
 8008808:	2201      	movs	r2, #1
 800880a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800880c:	4b1c      	ldr	r3, [pc, #112]	@ (8008880 <HAL_FLASH_Program+0x94>)
 800880e:	2200      	movs	r2, #0
 8008810:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008812:	2517      	movs	r5, #23
 8008814:	197c      	adds	r4, r7, r5
 8008816:	23fa      	movs	r3, #250	@ 0xfa
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	0018      	movs	r0, r3
 800881c:	f000 f87a 	bl	8008914 <FLASH_WaitForLastOperation>
 8008820:	0003      	movs	r3, r0
 8008822:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008824:	197b      	adds	r3, r7, r5
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11f      	bne.n	800886c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d106      	bne.n	8008840 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	0008      	movs	r0, r1
 800883a:	f000 f8b9 	bl	80089b0 <FLASH_Program_DoubleWord>
 800883e:	e005      	b.n	800884c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	0011      	movs	r1, r2
 8008846:	0018      	movs	r0, r3
 8008848:	f005 fcae 	bl	800e1a8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800884c:	2317      	movs	r3, #23
 800884e:	18fc      	adds	r4, r7, r3
 8008850:	23fa      	movs	r3, #250	@ 0xfa
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	0018      	movs	r0, r3
 8008856:	f000 f85d 	bl	8008914 <FLASH_WaitForLastOperation>
 800885a:	0003      	movs	r3, r0
 800885c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800885e:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <HAL_FLASH_Program+0x98>)
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	43d9      	mvns	r1, r3
 8008866:	4b07      	ldr	r3, [pc, #28]	@ (8008884 <HAL_FLASH_Program+0x98>)
 8008868:	400a      	ands	r2, r1
 800886a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800886c:	4b04      	ldr	r3, [pc, #16]	@ (8008880 <HAL_FLASH_Program+0x94>)
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008872:	2317      	movs	r3, #23
 8008874:	18fb      	adds	r3, r7, r3
 8008876:	781b      	ldrb	r3, [r3, #0]
}
 8008878:	0018      	movs	r0, r3
 800887a:	46bd      	mov	sp, r7
 800887c:	b006      	add	sp, #24
 800887e:	bdb0      	pop	{r4, r5, r7, pc}
 8008880:	20000db0 	.word	0x20000db0
 8008884:	40022000 	.word	0x40022000

08008888 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800888e:	1dfb      	adds	r3, r7, #7
 8008890:	2200      	movs	r2, #0
 8008892:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008894:	4b0b      	ldr	r3, [pc, #44]	@ (80088c4 <HAL_FLASH_Unlock+0x3c>)
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	da0c      	bge.n	80088b6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800889c:	4b09      	ldr	r3, [pc, #36]	@ (80088c4 <HAL_FLASH_Unlock+0x3c>)
 800889e:	4a0a      	ldr	r2, [pc, #40]	@ (80088c8 <HAL_FLASH_Unlock+0x40>)
 80088a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80088a2:	4b08      	ldr	r3, [pc, #32]	@ (80088c4 <HAL_FLASH_Unlock+0x3c>)
 80088a4:	4a09      	ldr	r2, [pc, #36]	@ (80088cc <HAL_FLASH_Unlock+0x44>)
 80088a6:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80088a8:	4b06      	ldr	r3, [pc, #24]	@ (80088c4 <HAL_FLASH_Unlock+0x3c>)
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	da02      	bge.n	80088b6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80088b0:	1dfb      	adds	r3, r7, #7
 80088b2:	2201      	movs	r2, #1
 80088b4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80088b6:	1dfb      	adds	r3, r7, #7
 80088b8:	781b      	ldrb	r3, [r3, #0]
}
 80088ba:	0018      	movs	r0, r3
 80088bc:	46bd      	mov	sp, r7
 80088be:	b002      	add	sp, #8
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	40022000 	.word	0x40022000
 80088c8:	45670123 	.word	0x45670123
 80088cc:	cdef89ab 	.word	0xcdef89ab

080088d0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80088d6:	1dfb      	adds	r3, r7, #7
 80088d8:	2201      	movs	r2, #1
 80088da:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80088dc:	23fa      	movs	r3, #250	@ 0xfa
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	0018      	movs	r0, r3
 80088e2:	f000 f817 	bl	8008914 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80088e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <HAL_FLASH_Lock+0x40>)
 80088e8:	695a      	ldr	r2, [r3, #20]
 80088ea:	4b09      	ldr	r3, [pc, #36]	@ (8008910 <HAL_FLASH_Lock+0x40>)
 80088ec:	2180      	movs	r1, #128	@ 0x80
 80088ee:	0609      	lsls	r1, r1, #24
 80088f0:	430a      	orrs	r2, r1
 80088f2:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80088f4:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <HAL_FLASH_Lock+0x40>)
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da02      	bge.n	8008902 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 80088fc:	1dfb      	adds	r3, r7, #7
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008902:	1dfb      	adds	r3, r7, #7
 8008904:	781b      	ldrb	r3, [r3, #0]
}
 8008906:	0018      	movs	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	b002      	add	sp, #8
 800890c:	bd80      	pop	{r7, pc}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	40022000 	.word	0x40022000

08008914 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800891c:	f7fe f904 	bl	8006b28 <HAL_GetTick>
 8008920:	0003      	movs	r3, r0
 8008922:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008924:	2380      	movs	r3, #128	@ 0x80
 8008926:	025b      	lsls	r3, r3, #9
 8008928:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800892a:	e00c      	b.n	8008946 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3301      	adds	r3, #1
 8008930:	d009      	beq.n	8008946 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008932:	f7fe f8f9 	bl	8006b28 <HAL_GetTick>
 8008936:	0002      	movs	r2, r0
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	429a      	cmp	r2, r3
 8008940:	d801      	bhi.n	8008946 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e028      	b.n	8008998 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8008946:	4b16      	ldr	r3, [pc, #88]	@ (80089a0 <FLASH_WaitForLastOperation+0x8c>)
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	d1ed      	bne.n	800892c <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008950:	4b13      	ldr	r3, [pc, #76]	@ (80089a0 <FLASH_WaitForLastOperation+0x8c>)
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	4a13      	ldr	r2, [pc, #76]	@ (80089a4 <FLASH_WaitForLastOperation+0x90>)
 8008956:	4013      	ands	r3, r2
 8008958:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800895a:	4b11      	ldr	r3, [pc, #68]	@ (80089a0 <FLASH_WaitForLastOperation+0x8c>)
 800895c:	4a12      	ldr	r2, [pc, #72]	@ (80089a8 <FLASH_WaitForLastOperation+0x94>)
 800895e:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d011      	beq.n	800898a <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008966:	4b11      	ldr	r3, [pc, #68]	@ (80089ac <FLASH_WaitForLastOperation+0x98>)
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e013      	b.n	8008998 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3301      	adds	r3, #1
 8008974:	d009      	beq.n	800898a <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008976:	f7fe f8d7 	bl	8006b28 <HAL_GetTick>
 800897a:	0002      	movs	r2, r0
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d801      	bhi.n	800898a <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e006      	b.n	8008998 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800898a:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <FLASH_WaitForLastOperation+0x8c>)
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	2380      	movs	r3, #128	@ 0x80
 8008990:	02db      	lsls	r3, r3, #11
 8008992:	4013      	ands	r3, r2
 8008994:	d1ec      	bne.n	8008970 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b004      	add	sp, #16
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40022000 	.word	0x40022000
 80089a4:	0000c3fa 	.word	0x0000c3fa
 80089a8:	0000c3fb 	.word	0x0000c3fb
 80089ac:	20000db0 	.word	0x20000db0

080089b0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80089b0:	b5b0      	push	{r4, r5, r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	603a      	str	r2, [r7, #0]
 80089ba:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80089bc:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <FLASH_Program_DoubleWord+0x3c>)
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	4b0a      	ldr	r3, [pc, #40]	@ (80089ec <FLASH_Program_DoubleWord+0x3c>)
 80089c2:	2101      	movs	r1, #1
 80089c4:	430a      	orrs	r2, r1
 80089c6:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80089ce:	f3bf 8f6f 	isb	sy
}
 80089d2:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	001c      	movs	r4, r3
 80089d8:	2300      	movs	r3, #0
 80089da:	001d      	movs	r5, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3304      	adds	r3, #4
 80089e0:	0022      	movs	r2, r4
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	46c0      	nop			@ (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b004      	add	sp, #16
 80089ea:	bdb0      	pop	{r4, r5, r7, pc}
 80089ec:	40022000 	.word	0x40022000

080089f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80089f0:	b5b0      	push	{r4, r5, r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80089fa:	4b35      	ldr	r3, [pc, #212]	@ (8008ad0 <HAL_FLASHEx_Erase+0xe0>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_FLASHEx_Erase+0x16>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e05f      	b.n	8008ac6 <HAL_FLASHEx_Erase+0xd6>
 8008a06:	4b32      	ldr	r3, [pc, #200]	@ (8008ad0 <HAL_FLASHEx_Erase+0xe0>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008a0c:	4b30      	ldr	r3, [pc, #192]	@ (8008ad0 <HAL_FLASHEx_Erase+0xe0>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008a12:	250f      	movs	r5, #15
 8008a14:	197c      	adds	r4, r7, r5
 8008a16:	23fa      	movs	r3, #250	@ 0xfa
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f7ff ff7a 	bl	8008914 <FLASH_WaitForLastOperation>
 8008a20:	0003      	movs	r3, r0
 8008a22:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008a24:	002c      	movs	r4, r5
 8008a26:	193b      	adds	r3, r7, r4
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d145      	bne.n	8008aba <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2204      	movs	r2, #4
 8008a32:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d10d      	bne.n	8008a58 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	0018      	movs	r0, r3
 8008a42:	f000 f849 	bl	8008ad8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008a46:	193c      	adds	r4, r7, r4
 8008a48:	23fa      	movs	r3, #250	@ 0xfa
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7ff ff61 	bl	8008914 <FLASH_WaitForLastOperation>
 8008a52:	0003      	movs	r3, r0
 8008a54:	7023      	strb	r3, [r4, #0]
 8008a56:	e030      	b.n	8008aba <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	4252      	negs	r2, r2
 8008a5e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	e01a      	b.n	8008a9e <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	0011      	movs	r1, r2
 8008a70:	0018      	movs	r0, r3
 8008a72:	f000 f845 	bl	8008b00 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008a76:	250f      	movs	r5, #15
 8008a78:	197c      	adds	r4, r7, r5
 8008a7a:	23fa      	movs	r3, #250	@ 0xfa
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f7ff ff48 	bl	8008914 <FLASH_WaitForLastOperation>
 8008a84:	0003      	movs	r3, r0
 8008a86:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008a88:	197b      	adds	r3, r7, r5
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	601a      	str	r2, [r3, #0]
          break;
 8008a96:	e00a      	b.n	8008aae <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	18d3      	adds	r3, r2, r3
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d3dc      	bcc.n	8008a68 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008aae:	4b09      	ldr	r3, [pc, #36]	@ (8008ad4 <HAL_FLASHEx_Erase+0xe4>)
 8008ab0:	695a      	ldr	r2, [r3, #20]
 8008ab2:	4b08      	ldr	r3, [pc, #32]	@ (8008ad4 <HAL_FLASHEx_Erase+0xe4>)
 8008ab4:	2102      	movs	r1, #2
 8008ab6:	438a      	bics	r2, r1
 8008ab8:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008aba:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <HAL_FLASHEx_Erase+0xe0>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008ac0:	230f      	movs	r3, #15
 8008ac2:	18fb      	adds	r3, r7, r3
 8008ac4:	781b      	ldrb	r3, [r3, #0]
}
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	b004      	add	sp, #16
 8008acc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ace:	46c0      	nop			@ (mov r8, r8)
 8008ad0:	20000db0 	.word	0x20000db0
 8008ad4:	40022000 	.word	0x40022000

08008ad8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008ae0:	4b06      	ldr	r3, [pc, #24]	@ (8008afc <FLASH_MassErase+0x24>)
 8008ae2:	695a      	ldr	r2, [r3, #20]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <FLASH_MassErase+0x24>)
 8008aea:	2180      	movs	r1, #128	@ 0x80
 8008aec:	0249      	lsls	r1, r1, #9
 8008aee:	430a      	orrs	r2, r1
 8008af0:	615a      	str	r2, [r3, #20]
}
 8008af2:	46c0      	nop			@ (mov r8, r8)
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b002      	add	sp, #8
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	40022000 	.word	0x40022000

08008b00 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008b0a:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <FLASH_PageErase+0x2c>)
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	4a08      	ldr	r2, [pc, #32]	@ (8008b30 <FLASH_PageErase+0x30>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	00da      	lsls	r2, r3, #3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	4b03      	ldr	r3, [pc, #12]	@ (8008b2c <FLASH_PageErase+0x2c>)
 8008b1e:	4905      	ldr	r1, [pc, #20]	@ (8008b34 <FLASH_PageErase+0x34>)
 8008b20:	430a      	orrs	r2, r1
 8008b22:	615a      	str	r2, [r3, #20]
}
 8008b24:	46c0      	nop			@ (mov r8, r8)
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b004      	add	sp, #16
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40022000 	.word	0x40022000
 8008b30:	ffffe007 	.word	0xffffe007
 8008b34:	00010002 	.word	0x00010002

08008b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b46:	e147      	b.n	8008dd8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4091      	lsls	r1, r2
 8008b52:	000a      	movs	r2, r1
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d100      	bne.n	8008b60 <HAL_GPIO_Init+0x28>
 8008b5e:	e138      	b.n	8008dd2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2203      	movs	r2, #3
 8008b66:	4013      	ands	r3, r2
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d005      	beq.n	8008b78 <HAL_GPIO_Init+0x40>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2203      	movs	r2, #3
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d130      	bne.n	8008bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	2203      	movs	r2, #3
 8008b84:	409a      	lsls	r2, r3
 8008b86:	0013      	movs	r3, r2
 8008b88:	43da      	mvns	r2, r3
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	409a      	lsls	r2, r3
 8008b9a:	0013      	movs	r3, r2
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bae:	2201      	movs	r2, #1
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	409a      	lsls	r2, r3
 8008bb4:	0013      	movs	r3, r2
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	091b      	lsrs	r3, r3, #4
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	401a      	ands	r2, r3
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	409a      	lsls	r2, r3
 8008bcc:	0013      	movs	r3, r2
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2203      	movs	r2, #3
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d017      	beq.n	8008c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	409a      	lsls	r2, r3
 8008bf4:	0013      	movs	r3, r2
 8008bf6:	43da      	mvns	r2, r3
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	409a      	lsls	r2, r3
 8008c08:	0013      	movs	r3, r2
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d123      	bne.n	8008c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	08da      	lsrs	r2, r3, #3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3208      	adds	r2, #8
 8008c2a:	0092      	lsls	r2, r2, #2
 8008c2c:	58d3      	ldr	r3, [r2, r3]
 8008c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2207      	movs	r2, #7
 8008c34:	4013      	ands	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	220f      	movs	r2, #15
 8008c3a:	409a      	lsls	r2, r3
 8008c3c:	0013      	movs	r3, r2
 8008c3e:	43da      	mvns	r2, r3
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	4013      	ands	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	691a      	ldr	r2, [r3, #16]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2107      	movs	r1, #7
 8008c4e:	400b      	ands	r3, r1
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	409a      	lsls	r2, r3
 8008c54:	0013      	movs	r3, r2
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	08da      	lsrs	r2, r3, #3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3208      	adds	r2, #8
 8008c64:	0092      	lsls	r2, r2, #2
 8008c66:	6939      	ldr	r1, [r7, #16]
 8008c68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	2203      	movs	r2, #3
 8008c76:	409a      	lsls	r2, r3
 8008c78:	0013      	movs	r3, r2
 8008c7a:	43da      	mvns	r2, r3
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2203      	movs	r2, #3
 8008c88:	401a      	ands	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	409a      	lsls	r2, r3
 8008c90:	0013      	movs	r3, r2
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	23c0      	movs	r3, #192	@ 0xc0
 8008ca4:	029b      	lsls	r3, r3, #10
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	d100      	bne.n	8008cac <HAL_GPIO_Init+0x174>
 8008caa:	e092      	b.n	8008dd2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008cac:	4a50      	ldr	r2, [pc, #320]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	089b      	lsrs	r3, r3, #2
 8008cb2:	3318      	adds	r3, #24
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	589b      	ldr	r3, [r3, r2]
 8008cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2203      	movs	r2, #3
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	220f      	movs	r2, #15
 8008cc4:	409a      	lsls	r2, r3
 8008cc6:	0013      	movs	r3, r2
 8008cc8:	43da      	mvns	r2, r3
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	23a0      	movs	r3, #160	@ 0xa0
 8008cd4:	05db      	lsls	r3, r3, #23
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d013      	beq.n	8008d02 <HAL_GPIO_Init+0x1ca>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a45      	ldr	r2, [pc, #276]	@ (8008df4 <HAL_GPIO_Init+0x2bc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00d      	beq.n	8008cfe <HAL_GPIO_Init+0x1c6>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a44      	ldr	r2, [pc, #272]	@ (8008df8 <HAL_GPIO_Init+0x2c0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d007      	beq.n	8008cfa <HAL_GPIO_Init+0x1c2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a43      	ldr	r2, [pc, #268]	@ (8008dfc <HAL_GPIO_Init+0x2c4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d101      	bne.n	8008cf6 <HAL_GPIO_Init+0x1be>
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e006      	b.n	8008d04 <HAL_GPIO_Init+0x1cc>
 8008cf6:	2305      	movs	r3, #5
 8008cf8:	e004      	b.n	8008d04 <HAL_GPIO_Init+0x1cc>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e002      	b.n	8008d04 <HAL_GPIO_Init+0x1cc>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <HAL_GPIO_Init+0x1cc>
 8008d02:	2300      	movs	r3, #0
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	2103      	movs	r1, #3
 8008d08:	400a      	ands	r2, r1
 8008d0a:	00d2      	lsls	r2, r2, #3
 8008d0c:	4093      	lsls	r3, r2
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008d14:	4936      	ldr	r1, [pc, #216]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	089b      	lsrs	r3, r3, #2
 8008d1a:	3318      	adds	r3, #24
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d22:	4b33      	ldr	r3, [pc, #204]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	43da      	mvns	r2, r3
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4013      	ands	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	2380      	movs	r3, #128	@ 0x80
 8008d38:	035b      	lsls	r3, r3, #13
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d003      	beq.n	8008d46 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d46:	4b2a      	ldr	r3, [pc, #168]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008d4c:	4b28      	ldr	r3, [pc, #160]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	43da      	mvns	r2, r3
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	2380      	movs	r3, #128	@ 0x80
 8008d62:	039b      	lsls	r3, r3, #14
 8008d64:	4013      	ands	r3, r2
 8008d66:	d003      	beq.n	8008d70 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d70:	4b1f      	ldr	r3, [pc, #124]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008d76:	4a1e      	ldr	r2, [pc, #120]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d78:	2384      	movs	r3, #132	@ 0x84
 8008d7a:	58d3      	ldr	r3, [r2, r3]
 8008d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	43da      	mvns	r2, r3
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	4013      	ands	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	2380      	movs	r3, #128	@ 0x80
 8008d8e:	029b      	lsls	r3, r3, #10
 8008d90:	4013      	ands	r3, r2
 8008d92:	d003      	beq.n	8008d9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d9c:	4914      	ldr	r1, [pc, #80]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008d9e:	2284      	movs	r2, #132	@ 0x84
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008da4:	4a12      	ldr	r2, [pc, #72]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008da6:	2380      	movs	r3, #128	@ 0x80
 8008da8:	58d3      	ldr	r3, [r2, r3]
 8008daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	43da      	mvns	r2, r3
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	4013      	ands	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	025b      	lsls	r3, r3, #9
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d003      	beq.n	8008dca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008dca:	4909      	ldr	r1, [pc, #36]	@ (8008df0 <HAL_GPIO_Init+0x2b8>)
 8008dcc:	2280      	movs	r2, #128	@ 0x80
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	40da      	lsrs	r2, r3
 8008de0:	1e13      	subs	r3, r2, #0
 8008de2:	d000      	beq.n	8008de6 <HAL_GPIO_Init+0x2ae>
 8008de4:	e6b0      	b.n	8008b48 <HAL_GPIO_Init+0x10>
  }
}
 8008de6:	46c0      	nop			@ (mov r8, r8)
 8008de8:	46c0      	nop			@ (mov r8, r8)
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b006      	add	sp, #24
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40021800 	.word	0x40021800
 8008df4:	50000400 	.word	0x50000400
 8008df8:	50000800 	.word	0x50000800
 8008dfc:	50000c00 	.word	0x50000c00

08008e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	000a      	movs	r2, r1
 8008e0a:	1cbb      	adds	r3, r7, #2
 8008e0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	1cba      	adds	r2, r7, #2
 8008e14:	8812      	ldrh	r2, [r2, #0]
 8008e16:	4013      	ands	r3, r2
 8008e18:	d004      	beq.n	8008e24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008e1a:	230f      	movs	r3, #15
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	2201      	movs	r2, #1
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	e003      	b.n	8008e2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e24:	230f      	movs	r3, #15
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008e2c:	230f      	movs	r3, #15
 8008e2e:	18fb      	adds	r3, r7, r3
 8008e30:	781b      	ldrb	r3, [r3, #0]
}
 8008e32:	0018      	movs	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	b004      	add	sp, #16
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	0008      	movs	r0, r1
 8008e44:	0011      	movs	r1, r2
 8008e46:	1cbb      	adds	r3, r7, #2
 8008e48:	1c02      	adds	r2, r0, #0
 8008e4a:	801a      	strh	r2, [r3, #0]
 8008e4c:	1c7b      	adds	r3, r7, #1
 8008e4e:	1c0a      	adds	r2, r1, #0
 8008e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e52:	1c7b      	adds	r3, r7, #1
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e5a:	1cbb      	adds	r3, r7, #2
 8008e5c:	881a      	ldrh	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e62:	e003      	b.n	8008e6c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e64:	1cbb      	adds	r3, r7, #2
 8008e66:	881a      	ldrh	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008e6c:	46c0      	nop			@ (mov r8, r8)
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	b002      	add	sp, #8
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	0002      	movs	r2, r0
 8008e7c:	1dbb      	adds	r3, r7, #6
 8008e7e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008e80:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	1dba      	adds	r2, r7, #6
 8008e86:	8812      	ldrh	r2, [r2, #0]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	d008      	beq.n	8008e9e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e8e:	1dba      	adds	r2, r7, #6
 8008e90:	8812      	ldrh	r2, [r2, #0]
 8008e92:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008e94:	1dbb      	adds	r3, r7, #6
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7fb f8f3 	bl	8004084 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008e9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	1dba      	adds	r2, r7, #6
 8008ea4:	8812      	ldrh	r2, [r2, #0]
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	d008      	beq.n	8008ebc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008eaa:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008eac:	1dba      	adds	r2, r7, #6
 8008eae:	8812      	ldrh	r2, [r2, #0]
 8008eb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008eb2:	1dbb      	adds	r3, r7, #6
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f7fb f8ba 	bl	8004030 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008ebc:	46c0      	nop			@ (mov r8, r8)
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b002      	add	sp, #8
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40021800 	.word	0x40021800

08008ec8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e097      	b.n	800900a <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2236      	movs	r2, #54	@ 0x36
 8008ede:	5c9b      	ldrb	r3, [r3, r2]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d113      	bne.n	8008f0e <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2235      	movs	r2, #53	@ 0x35
 8008eea:	2100      	movs	r1, #0
 8008eec:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f000 fa8f 	bl	8009414 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a44      	ldr	r2, [pc, #272]	@ (8009014 <HAL_LPTIM_Init+0x14c>)
 8008f02:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	0010      	movs	r0, r2
 8008f0c:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2236      	movs	r2, #54	@ 0x36
 8008f12:	2102      	movs	r1, #2
 8008f14:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d005      	beq.n	8008f32 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f2a:	2380      	movs	r3, #128	@ 0x80
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d103      	bne.n	8008f3a <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	221e      	movs	r2, #30
 8008f36:	4393      	bics	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	4a36      	ldr	r2, [pc, #216]	@ (8009018 <HAL_LPTIM_Init+0x150>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4a35      	ldr	r2, [pc, #212]	@ (800901c <HAL_LPTIM_Init+0x154>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4a34      	ldr	r2, [pc, #208]	@ (8009020 <HAL_LPTIM_Init+0x158>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f5c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008f62:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8008f68:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8008f6e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d107      	bne.n	8008f8e <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f86:	4313      	orrs	r3, r2
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d005      	beq.n	8008fa2 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f9a:	2380      	movs	r3, #128	@ 0x80
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d107      	bne.n	8008fb2 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008faa:	4313      	orrs	r3, r2
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	4a18      	ldr	r2, [pc, #96]	@ (8009018 <HAL_LPTIM_Init+0x150>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00a      	beq.n	8008fd2 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008fc4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008fca:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a11      	ldr	r2, [pc, #68]	@ (8009024 <HAL_LPTIM_Init+0x15c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d108      	bne.n	8008ff6 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ff4:	e004      	b.n	8009000 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2236      	movs	r2, #54	@ 0x36
 8009004:	2101      	movs	r1, #1
 8009006:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	0018      	movs	r0, r3
 800900c:	46bd      	mov	sp, r7
 800900e:	b004      	add	sp, #16
 8009010:	bd80      	pop	{r7, pc}
 8009012:	46c0      	nop			@ (mov r8, r8)
 8009014:	08005981 	.word	0x08005981
 8009018:	0000ffff 	.word	0x0000ffff
 800901c:	ffff1f3f 	.word	0xffff1f3f
 8009020:	ff19f1fe 	.word	0xff19f1fe
 8009024:	40007c00 	.word	0x40007c00

08009028 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2236      	movs	r2, #54	@ 0x36
 8009038:	2102      	movs	r1, #2
 800903a:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2180      	movs	r1, #128	@ 0x80
 8009048:	0349      	lsls	r1, r1, #13
 800904a:	430a      	orrs	r2, r1
 800904c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2101      	movs	r1, #1
 800905a:	430a      	orrs	r2, r1
 800905c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2210      	movs	r2, #16
 8009064:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2110      	movs	r1, #16
 8009072:	0018      	movs	r0, r3
 8009074:	f000 f9fa 	bl	800946c <LPTIM_WaitForFlag>
 8009078:	0003      	movs	r3, r0
 800907a:	2b03      	cmp	r3, #3
 800907c:	d101      	bne.n	8009082 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e060      	b.n	8009144 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2208      	movs	r2, #8
 8009088:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2108      	movs	r1, #8
 8009096:	0018      	movs	r0, r3
 8009098:	f000 f9e8 	bl	800946c <LPTIM_WaitForFlag>
 800909c:	0003      	movs	r3, r0
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d101      	bne.n	80090a6 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e04e      	b.n	8009144 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f000 fa17 	bl	80094dc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	0018      	movs	r0, r3
 80090b2:	f000 f9a3 	bl	80093fc <HAL_LPTIM_GetState>
 80090b6:	0003      	movs	r3, r0
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d101      	bne.n	80090c0 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e041      	b.n	8009144 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2110      	movs	r1, #16
 80090cc:	430a      	orrs	r2, r1
 80090ce:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2108      	movs	r1, #8
 80090dc:	430a      	orrs	r2, r1
 80090de:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2102      	movs	r1, #2
 80090ec:	430a      	orrs	r2, r1
 80090ee:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689a      	ldr	r2, [r3, #8]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2101      	movs	r1, #1
 80090fc:	430a      	orrs	r2, r1
 80090fe:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	4a11      	ldr	r2, [pc, #68]	@ (800914c <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d007      	beq.n	800911a <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2104      	movs	r1, #4
 8009116:	430a      	orrs	r2, r1
 8009118:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2101      	movs	r1, #1
 8009126:	430a      	orrs	r2, r1
 8009128:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691a      	ldr	r2, [r3, #16]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2102      	movs	r1, #2
 8009136:	430a      	orrs	r2, r1
 8009138:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2236      	movs	r2, #54	@ 0x36
 800913e:	2101      	movs	r1, #1
 8009140:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	0018      	movs	r0, r3
 8009146:	46bd      	mov	sp, r7
 8009148:	b004      	add	sp, #16
 800914a:	bd80      	pop	{r7, pc}
 800914c:	0000ffff 	.word	0x0000ffff

08009150 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2201      	movs	r2, #1
 8009160:	4013      	ands	r3, r2
 8009162:	2b01      	cmp	r3, #1
 8009164:	d10f      	bne.n	8009186 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2201      	movs	r2, #1
 800916e:	4013      	ands	r3, r2
 8009170:	2b01      	cmp	r3, #1
 8009172:	d108      	bne.n	8009186 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2201      	movs	r2, #1
 800917a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	0010      	movs	r0, r2
 8009184:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2202      	movs	r2, #2
 800918e:	4013      	ands	r3, r2
 8009190:	2b02      	cmp	r3, #2
 8009192:	d10f      	bne.n	80091b4 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	2202      	movs	r2, #2
 800919c:	4013      	ands	r3, r2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d108      	bne.n	80091b4 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2202      	movs	r2, #2
 80091a8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	0010      	movs	r0, r2
 80091b2:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2204      	movs	r2, #4
 80091bc:	4013      	ands	r3, r2
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d10f      	bne.n	80091e2 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	2204      	movs	r2, #4
 80091ca:	4013      	ands	r3, r2
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d108      	bne.n	80091e2 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2204      	movs	r2, #4
 80091d6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	0010      	movs	r0, r2
 80091e0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2208      	movs	r2, #8
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d10f      	bne.n	8009210 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2208      	movs	r2, #8
 80091f8:	4013      	ands	r3, r2
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d108      	bne.n	8009210 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2208      	movs	r2, #8
 8009204:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	0010      	movs	r0, r2
 800920e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2210      	movs	r2, #16
 8009218:	4013      	ands	r3, r2
 800921a:	2b10      	cmp	r3, #16
 800921c:	d10f      	bne.n	800923e <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2210      	movs	r2, #16
 8009226:	4013      	ands	r3, r2
 8009228:	2b10      	cmp	r3, #16
 800922a:	d108      	bne.n	800923e <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2210      	movs	r2, #16
 8009232:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	0010      	movs	r0, r2
 800923c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2220      	movs	r2, #32
 8009246:	4013      	ands	r3, r2
 8009248:	2b20      	cmp	r3, #32
 800924a:	d10f      	bne.n	800926c <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	2220      	movs	r2, #32
 8009254:	4013      	ands	r3, r2
 8009256:	2b20      	cmp	r3, #32
 8009258:	d108      	bne.n	800926c <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2220      	movs	r2, #32
 8009260:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	0010      	movs	r0, r2
 800926a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2240      	movs	r2, #64	@ 0x40
 8009274:	4013      	ands	r3, r2
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d10f      	bne.n	800929a <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2240      	movs	r2, #64	@ 0x40
 8009282:	4013      	ands	r3, r2
 8009284:	2b40      	cmp	r3, #64	@ 0x40
 8009286:	d108      	bne.n	800929a <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2240      	movs	r2, #64	@ 0x40
 800928e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	0010      	movs	r0, r2
 8009298:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	46bd      	mov	sp, r7
 800929e:	b002      	add	sp, #8
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80092aa:	46c0      	nop			@ (mov r8, r8)
 80092ac:	46bd      	mov	sp, r7
 80092ae:	b002      	add	sp, #8
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80092ba:	46c0      	nop			@ (mov r8, r8)
 80092bc:	46bd      	mov	sp, r7
 80092be:	b002      	add	sp, #8
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80092ca:	46c0      	nop			@ (mov r8, r8)
 80092cc:	46bd      	mov	sp, r7
 80092ce:	b002      	add	sp, #8
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	46bd      	mov	sp, r7
 80092de:	b002      	add	sp, #8
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80092ea:	46c0      	nop			@ (mov r8, r8)
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b002      	add	sp, #8
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80092fa:	46c0      	nop			@ (mov r8, r8)
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b002      	add	sp, #8
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800930a:	46c0      	nop			@ (mov r8, r8)
 800930c:	46bd      	mov	sp, r7
 800930e:	b002      	add	sp, #8
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	607a      	str	r2, [r7, #4]
 800931e:	230b      	movs	r3, #11
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	1c0a      	adds	r2, r1, #0
 8009324:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009326:	2317      	movs	r3, #23
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e05a      	b.n	80093ee <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2236      	movs	r2, #54	@ 0x36
 800933c:	5c9b      	ldrb	r3, [r3, r2]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b01      	cmp	r3, #1
 8009342:	d132      	bne.n	80093aa <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8009344:	230b      	movs	r3, #11
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b08      	cmp	r3, #8
 800934c:	d828      	bhi.n	80093a0 <HAL_LPTIM_RegisterCallback+0x8c>
 800934e:	009a      	lsls	r2, r3, #2
 8009350:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <HAL_LPTIM_RegisterCallback+0xe4>)
 8009352:	18d3      	adds	r3, r2, r3
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800935e:	e043      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8009366:	e03f      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800936e:	e03b      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8009376:	e037      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800937e:	e033      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009386:	e02f      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800938e:	e02b      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009396:	e027      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800939e:	e023      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80093a0:	2317      	movs	r3, #23
 80093a2:	18fb      	adds	r3, r7, r3
 80093a4:	2201      	movs	r2, #1
 80093a6:	701a      	strb	r2, [r3, #0]
        break;
 80093a8:	e01e      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2236      	movs	r2, #54	@ 0x36
 80093ae:	5c9b      	ldrb	r3, [r3, r2]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d114      	bne.n	80093e0 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80093b6:	230b      	movs	r3, #11
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <HAL_LPTIM_RegisterCallback+0xb2>
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d004      	beq.n	80093ce <HAL_LPTIM_RegisterCallback+0xba>
 80093c4:	e007      	b.n	80093d6 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80093cc:	e00c      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80093d4:	e008      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80093d6:	2317      	movs	r3, #23
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	2201      	movs	r2, #1
 80093dc:	701a      	strb	r2, [r3, #0]
        break;
 80093de:	e003      	b.n	80093e8 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80093e0:	2317      	movs	r3, #23
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80093e8:	2317      	movs	r3, #23
 80093ea:	18fb      	adds	r3, r7, r3
 80093ec:	781b      	ldrb	r3, [r3, #0]
}
 80093ee:	0018      	movs	r0, r3
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b006      	add	sp, #24
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	0800ea78 	.word	0x0800ea78

080093fc <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2236      	movs	r2, #54	@ 0x36
 8009408:	5c9b      	ldrb	r3, [r3, r2]
 800940a:	b2db      	uxtb	r3, r3
}
 800940c:	0018      	movs	r0, r3
 800940e:	46bd      	mov	sp, r7
 8009410:	b002      	add	sp, #8
 8009412:	bd80      	pop	{r7, pc}

08009414 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a0c      	ldr	r2, [pc, #48]	@ (8009450 <LPTIM_ResetCallback+0x3c>)
 8009420:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a0b      	ldr	r2, [pc, #44]	@ (8009454 <LPTIM_ResetCallback+0x40>)
 8009426:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a0b      	ldr	r2, [pc, #44]	@ (8009458 <LPTIM_ResetCallback+0x44>)
 800942c:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a0a      	ldr	r2, [pc, #40]	@ (800945c <LPTIM_ResetCallback+0x48>)
 8009432:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a0a      	ldr	r2, [pc, #40]	@ (8009460 <LPTIM_ResetCallback+0x4c>)
 8009438:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a09      	ldr	r2, [pc, #36]	@ (8009464 <LPTIM_ResetCallback+0x50>)
 800943e:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a09      	ldr	r2, [pc, #36]	@ (8009468 <LPTIM_ResetCallback+0x54>)
 8009444:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8009446:	46c0      	nop			@ (mov r8, r8)
 8009448:	46bd      	mov	sp, r7
 800944a:	b002      	add	sp, #8
 800944c:	bd80      	pop	{r7, pc}
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	080092a3 	.word	0x080092a3
 8009454:	080092b3 	.word	0x080092b3
 8009458:	080092c3 	.word	0x080092c3
 800945c:	080092d3 	.word	0x080092d3
 8009460:	080092e3 	.word	0x080092e3
 8009464:	080092f3 	.word	0x080092f3
 8009468:	08009303 	.word	0x08009303

0800946c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009476:	230f      	movs	r3, #15
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800947e:	4b15      	ldr	r3, [pc, #84]	@ (80094d4 <LPTIM_WaitForFlag+0x68>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4915      	ldr	r1, [pc, #84]	@ (80094d8 <LPTIM_WaitForFlag+0x6c>)
 8009484:	0018      	movs	r0, r3
 8009486:	f7f6 fe3f 	bl	8000108 <__udivsi3>
 800948a:	0003      	movs	r3, r0
 800948c:	001a      	movs	r2, r3
 800948e:	0013      	movs	r3, r2
 8009490:	015b      	lsls	r3, r3, #5
 8009492:	1a9b      	subs	r3, r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	189b      	adds	r3, r3, r2
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	3b01      	subs	r3, #1
 80094a0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80094a8:	230f      	movs	r3, #15
 80094aa:	18fb      	adds	r3, r7, r3
 80094ac:	2203      	movs	r2, #3
 80094ae:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4013      	ands	r3, r2
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d002      	beq.n	80094c6 <LPTIM_WaitForFlag+0x5a>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1ea      	bne.n	800949c <LPTIM_WaitForFlag+0x30>

  return result;
 80094c6:	230f      	movs	r3, #15
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	781b      	ldrb	r3, [r3, #0]
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b004      	add	sp, #16
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2000044c 	.word	0x2000044c
 80094d8:	00004e20 	.word	0x00004e20

080094dc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08c      	sub	sp, #48	@ 0x30
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e8:	f3ef 8310 	mrs	r3, PRIMASK
 80094ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80094ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80094f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f2:	2301      	movs	r3, #1
 80094f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f383 8810 	msr	PRIMASK, r3
}
 80094fc:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a72      	ldr	r2, [pc, #456]	@ (80096cc <LPTIM_Disable+0x1f0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <LPTIM_Disable+0x34>
 8009508:	4a71      	ldr	r2, [pc, #452]	@ (80096d0 <LPTIM_Disable+0x1f4>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d007      	beq.n	800951e <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800950e:	e00d      	b.n	800952c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009510:	4b70      	ldr	r3, [pc, #448]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009512:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009514:	23c0      	movs	r3, #192	@ 0xc0
 8009516:	031b      	lsls	r3, r3, #12
 8009518:	4013      	ands	r3, r2
 800951a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800951c:	e006      	b.n	800952c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800951e:	4b6d      	ldr	r3, [pc, #436]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009522:	23c0      	movs	r3, #192	@ 0xc0
 8009524:	039b      	lsls	r3, r3, #14
 8009526:	4013      	ands	r3, r2
 8009528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800952a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009552:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a5c      	ldr	r2, [pc, #368]	@ (80096cc <LPTIM_Disable+0x1f0>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <LPTIM_Disable+0x8a>
 800955e:	4a5c      	ldr	r2, [pc, #368]	@ (80096d0 <LPTIM_Disable+0x1f4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00e      	beq.n	8009582 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8009564:	e01b      	b.n	800959e <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009566:	4b5b      	ldr	r3, [pc, #364]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956a:	4b5a      	ldr	r3, [pc, #360]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 800956c:	2180      	movs	r1, #128	@ 0x80
 800956e:	0609      	lsls	r1, r1, #24
 8009570:	430a      	orrs	r2, r1
 8009572:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009574:	4b57      	ldr	r3, [pc, #348]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009578:	4b56      	ldr	r3, [pc, #344]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 800957a:	0052      	lsls	r2, r2, #1
 800957c:	0852      	lsrs	r2, r2, #1
 800957e:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8009580:	e00d      	b.n	800959e <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009582:	4b54      	ldr	r3, [pc, #336]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009586:	4b53      	ldr	r3, [pc, #332]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009588:	2180      	movs	r1, #128	@ 0x80
 800958a:	05c9      	lsls	r1, r1, #23
 800958c:	430a      	orrs	r2, r1
 800958e:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009590:	4b50      	ldr	r3, [pc, #320]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009594:	4b4f      	ldr	r3, [pc, #316]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009596:	4950      	ldr	r1, [pc, #320]	@ (80096d8 <LPTIM_Disable+0x1fc>)
 8009598:	400a      	ands	r2, r1
 800959a:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 800959c:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <LPTIM_Disable+0xd0>
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d100      	bne.n	80095ac <LPTIM_Disable+0xd0>
 80095aa:	e071      	b.n	8009690 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a46      	ldr	r2, [pc, #280]	@ (80096cc <LPTIM_Disable+0x1f0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d003      	beq.n	80095be <LPTIM_Disable+0xe2>
 80095b6:	4a46      	ldr	r2, [pc, #280]	@ (80096d0 <LPTIM_Disable+0x1f4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d007      	beq.n	80095cc <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80095bc:	e00d      	b.n	80095da <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80095be:	4b45      	ldr	r3, [pc, #276]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 80095c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095c2:	4b44      	ldr	r3, [pc, #272]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 80095c4:	4945      	ldr	r1, [pc, #276]	@ (80096dc <LPTIM_Disable+0x200>)
 80095c6:	400a      	ands	r2, r1
 80095c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80095ca:	e006      	b.n	80095da <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80095cc:	4b41      	ldr	r3, [pc, #260]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 80095ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095d0:	4b40      	ldr	r3, [pc, #256]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 80095d2:	4943      	ldr	r1, [pc, #268]	@ (80096e0 <LPTIM_Disable+0x204>)
 80095d4:	400a      	ands	r2, r1
 80095d6:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80095d8:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01b      	beq.n	8009618 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2101      	movs	r1, #1
 80095ec:	430a      	orrs	r2, r1
 80095ee:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2108      	movs	r1, #8
 80095fc:	0018      	movs	r0, r3
 80095fe:	f7ff ff35 	bl	800946c <LPTIM_WaitForFlag>
 8009602:	0003      	movs	r3, r0
 8009604:	2b03      	cmp	r3, #3
 8009606:	d103      	bne.n	8009610 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2236      	movs	r2, #54	@ 0x36
 800960c:	2103      	movs	r1, #3
 800960e:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2208      	movs	r2, #8
 8009616:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01b      	beq.n	8009656 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2101      	movs	r1, #1
 800962a:	430a      	orrs	r2, r1
 800962c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2110      	movs	r1, #16
 800963a:	0018      	movs	r0, r3
 800963c:	f7ff ff16 	bl	800946c <LPTIM_WaitForFlag>
 8009640:	0003      	movs	r3, r0
 8009642:	2b03      	cmp	r3, #3
 8009644:	d103      	bne.n	800964e <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2236      	movs	r2, #54	@ 0x36
 800964a:	2103      	movs	r1, #3
 800964c:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2210      	movs	r2, #16
 8009654:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1c      	ldr	r2, [pc, #112]	@ (80096cc <LPTIM_Disable+0x1f0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <LPTIM_Disable+0x18c>
 8009660:	4a1b      	ldr	r2, [pc, #108]	@ (80096d0 <LPTIM_Disable+0x1f4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00a      	beq.n	800967c <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8009666:	e013      	b.n	8009690 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009668:	4b1a      	ldr	r3, [pc, #104]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 800966a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966c:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <LPTIM_Disable+0x200>)
 800966e:	4013      	ands	r3, r2
 8009670:	0019      	movs	r1, r3
 8009672:	4b18      	ldr	r3, [pc, #96]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009676:	430a      	orrs	r2, r1
 8009678:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800967a:	e009      	b.n	8009690 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800967c:	4b15      	ldr	r3, [pc, #84]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 800967e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009680:	4a17      	ldr	r2, [pc, #92]	@ (80096e0 <LPTIM_Disable+0x204>)
 8009682:	4013      	ands	r3, r2
 8009684:	0019      	movs	r1, r3
 8009686:	4b13      	ldr	r3, [pc, #76]	@ (80096d4 <LPTIM_Disable+0x1f8>)
 8009688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968a:	430a      	orrs	r2, r1
 800968c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800968e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2101      	movs	r1, #1
 800969c:	438a      	bics	r2, r1
 800969e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6a3a      	ldr	r2, [r7, #32]
 80096ae:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80096b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f383 8810 	msr	PRIMASK, r3
}
 80096c2:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80096c4:	46c0      	nop			@ (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b00c      	add	sp, #48	@ 0x30
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	40007c00 	.word	0x40007c00
 80096d0:	40009400 	.word	0x40009400
 80096d4:	40021000 	.word	0x40021000
 80096d8:	bfffffff 	.word	0xbfffffff
 80096dc:	fff3ffff 	.word	0xfff3ffff
 80096e0:	ffcfffff 	.word	0xffcfffff

080096e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80096ec:	4b19      	ldr	r3, [pc, #100]	@ (8009754 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a19      	ldr	r2, [pc, #100]	@ (8009758 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80096f2:	4013      	ands	r3, r2
 80096f4:	0019      	movs	r1, r3
 80096f6:	4b17      	ldr	r3, [pc, #92]	@ (8009754 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	2380      	movs	r3, #128	@ 0x80
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	429a      	cmp	r2, r3
 8009706:	d11f      	bne.n	8009748 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009708:	4b14      	ldr	r3, [pc, #80]	@ (800975c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	0013      	movs	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	189b      	adds	r3, r3, r2
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	4912      	ldr	r1, [pc, #72]	@ (8009760 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009716:	0018      	movs	r0, r3
 8009718:	f7f6 fcf6 	bl	8000108 <__udivsi3>
 800971c:	0003      	movs	r3, r0
 800971e:	3301      	adds	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009722:	e008      	b.n	8009736 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3b01      	subs	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	e001      	b.n	8009736 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e009      	b.n	800974a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009736:	4b07      	ldr	r3, [pc, #28]	@ (8009754 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009738:	695a      	ldr	r2, [r3, #20]
 800973a:	2380      	movs	r3, #128	@ 0x80
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	401a      	ands	r2, r3
 8009740:	2380      	movs	r3, #128	@ 0x80
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	429a      	cmp	r2, r3
 8009746:	d0ed      	beq.n	8009724 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	0018      	movs	r0, r3
 800974c:	46bd      	mov	sp, r7
 800974e:	b004      	add	sp, #16
 8009750:	bd80      	pop	{r7, pc}
 8009752:	46c0      	nop			@ (mov r8, r8)
 8009754:	40007000 	.word	0x40007000
 8009758:	fffff9ff 	.word	0xfffff9ff
 800975c:	2000044c 	.word	0x2000044c
 8009760:	000f4240 	.word	0x000f4240

08009764 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009768:	4b03      	ldr	r3, [pc, #12]	@ (8009778 <LL_RCC_GetAPB1Prescaler+0x14>)
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	23e0      	movs	r3, #224	@ 0xe0
 800976e:	01db      	lsls	r3, r3, #7
 8009770:	4013      	ands	r3, r2
}
 8009772:	0018      	movs	r0, r3
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	40021000 	.word	0x40021000

0800977c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e2fe      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2201      	movs	r2, #1
 8009794:	4013      	ands	r3, r2
 8009796:	d100      	bne.n	800979a <HAL_RCC_OscConfig+0x1e>
 8009798:	e07c      	b.n	8009894 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800979a:	4bc3      	ldr	r3, [pc, #780]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2238      	movs	r2, #56	@ 0x38
 80097a0:	4013      	ands	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097a4:	4bc0      	ldr	r3, [pc, #768]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2203      	movs	r2, #3
 80097aa:	4013      	ands	r3, r2
 80097ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	2b10      	cmp	r3, #16
 80097b2:	d102      	bne.n	80097ba <HAL_RCC_OscConfig+0x3e>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d002      	beq.n	80097c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d10b      	bne.n	80097d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c0:	4bb9      	ldr	r3, [pc, #740]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	2380      	movs	r3, #128	@ 0x80
 80097c6:	029b      	lsls	r3, r3, #10
 80097c8:	4013      	ands	r3, r2
 80097ca:	d062      	beq.n	8009892 <HAL_RCC_OscConfig+0x116>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d15e      	bne.n	8009892 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e2d9      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	2380      	movs	r3, #128	@ 0x80
 80097de:	025b      	lsls	r3, r3, #9
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d107      	bne.n	80097f4 <HAL_RCC_OscConfig+0x78>
 80097e4:	4bb0      	ldr	r3, [pc, #704]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4baf      	ldr	r3, [pc, #700]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80097ea:	2180      	movs	r1, #128	@ 0x80
 80097ec:	0249      	lsls	r1, r1, #9
 80097ee:	430a      	orrs	r2, r1
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e020      	b.n	8009836 <HAL_RCC_OscConfig+0xba>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	23a0      	movs	r3, #160	@ 0xa0
 80097fa:	02db      	lsls	r3, r3, #11
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d10e      	bne.n	800981e <HAL_RCC_OscConfig+0xa2>
 8009800:	4ba9      	ldr	r3, [pc, #676]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4ba8      	ldr	r3, [pc, #672]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009806:	2180      	movs	r1, #128	@ 0x80
 8009808:	02c9      	lsls	r1, r1, #11
 800980a:	430a      	orrs	r2, r1
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	4ba6      	ldr	r3, [pc, #664]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4ba5      	ldr	r3, [pc, #660]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009814:	2180      	movs	r1, #128	@ 0x80
 8009816:	0249      	lsls	r1, r1, #9
 8009818:	430a      	orrs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e00b      	b.n	8009836 <HAL_RCC_OscConfig+0xba>
 800981e:	4ba2      	ldr	r3, [pc, #648]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4ba1      	ldr	r3, [pc, #644]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009824:	49a1      	ldr	r1, [pc, #644]	@ (8009aac <HAL_RCC_OscConfig+0x330>)
 8009826:	400a      	ands	r2, r1
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	4b9f      	ldr	r3, [pc, #636]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b9e      	ldr	r3, [pc, #632]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009830:	499f      	ldr	r1, [pc, #636]	@ (8009ab0 <HAL_RCC_OscConfig+0x334>)
 8009832:	400a      	ands	r2, r1
 8009834:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d014      	beq.n	8009868 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800983e:	f7fd f973 	bl	8006b28 <HAL_GetTick>
 8009842:	0003      	movs	r3, r0
 8009844:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009848:	f7fd f96e 	bl	8006b28 <HAL_GetTick>
 800984c:	0002      	movs	r2, r0
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b64      	cmp	r3, #100	@ 0x64
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e298      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800985a:	4b93      	ldr	r3, [pc, #588]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	2380      	movs	r3, #128	@ 0x80
 8009860:	029b      	lsls	r3, r3, #10
 8009862:	4013      	ands	r3, r2
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0xcc>
 8009866:	e015      	b.n	8009894 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009868:	f7fd f95e 	bl	8006b28 <HAL_GetTick>
 800986c:	0003      	movs	r3, r0
 800986e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009870:	e008      	b.n	8009884 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009872:	f7fd f959 	bl	8006b28 <HAL_GetTick>
 8009876:	0002      	movs	r2, r0
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b64      	cmp	r3, #100	@ 0x64
 800987e:	d901      	bls.n	8009884 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e283      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009884:	4b88      	ldr	r3, [pc, #544]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	2380      	movs	r3, #128	@ 0x80
 800988a:	029b      	lsls	r3, r3, #10
 800988c:	4013      	ands	r3, r2
 800988e:	d1f0      	bne.n	8009872 <HAL_RCC_OscConfig+0xf6>
 8009890:	e000      	b.n	8009894 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009892:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2202      	movs	r2, #2
 800989a:	4013      	ands	r3, r2
 800989c:	d100      	bne.n	80098a0 <HAL_RCC_OscConfig+0x124>
 800989e:	e099      	b.n	80099d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098a0:	4b81      	ldr	r3, [pc, #516]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	2238      	movs	r2, #56	@ 0x38
 80098a6:	4013      	ands	r3, r2
 80098a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098aa:	4b7f      	ldr	r3, [pc, #508]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2203      	movs	r2, #3
 80098b0:	4013      	ands	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d102      	bne.n	80098c0 <HAL_RCC_OscConfig+0x144>
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d002      	beq.n	80098c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d135      	bne.n	8009932 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098c6:	4b78      	ldr	r3, [pc, #480]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	2380      	movs	r3, #128	@ 0x80
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4013      	ands	r3, r2
 80098d0:	d005      	beq.n	80098de <HAL_RCC_OscConfig+0x162>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e256      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098de:	4b72      	ldr	r3, [pc, #456]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	4a74      	ldr	r2, [pc, #464]	@ (8009ab4 <HAL_RCC_OscConfig+0x338>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	0019      	movs	r1, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	021a      	lsls	r2, r3, #8
 80098ee:	4b6e      	ldr	r3, [pc, #440]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d112      	bne.n	8009920 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80098fa:	4b6b      	ldr	r3, [pc, #428]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a6e      	ldr	r2, [pc, #440]	@ (8009ab8 <HAL_RCC_OscConfig+0x33c>)
 8009900:	4013      	ands	r3, r2
 8009902:	0019      	movs	r1, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	4b67      	ldr	r3, [pc, #412]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800990a:	430a      	orrs	r2, r1
 800990c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800990e:	4b66      	ldr	r3, [pc, #408]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	0adb      	lsrs	r3, r3, #11
 8009914:	2207      	movs	r2, #7
 8009916:	4013      	ands	r3, r2
 8009918:	4a68      	ldr	r2, [pc, #416]	@ (8009abc <HAL_RCC_OscConfig+0x340>)
 800991a:	40da      	lsrs	r2, r3
 800991c:	4b68      	ldr	r3, [pc, #416]	@ (8009ac0 <HAL_RCC_OscConfig+0x344>)
 800991e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009920:	4b68      	ldr	r3, [pc, #416]	@ (8009ac4 <HAL_RCC_OscConfig+0x348>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	0018      	movs	r0, r3
 8009926:	f7fd f8a3 	bl	8006a70 <HAL_InitTick>
 800992a:	1e03      	subs	r3, r0, #0
 800992c:	d051      	beq.n	80099d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e22c      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d030      	beq.n	800999c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800993a:	4b5b      	ldr	r3, [pc, #364]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a5e      	ldr	r2, [pc, #376]	@ (8009ab8 <HAL_RCC_OscConfig+0x33c>)
 8009940:	4013      	ands	r3, r2
 8009942:	0019      	movs	r1, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	4b57      	ldr	r3, [pc, #348]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800994a:	430a      	orrs	r2, r1
 800994c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800994e:	4b56      	ldr	r3, [pc, #344]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	4b55      	ldr	r3, [pc, #340]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009954:	2180      	movs	r1, #128	@ 0x80
 8009956:	0049      	lsls	r1, r1, #1
 8009958:	430a      	orrs	r2, r1
 800995a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7fd f8e4 	bl	8006b28 <HAL_GetTick>
 8009960:	0003      	movs	r3, r0
 8009962:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009964:	e008      	b.n	8009978 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009966:	f7fd f8df 	bl	8006b28 <HAL_GetTick>
 800996a:	0002      	movs	r2, r0
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d901      	bls.n	8009978 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e209      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009978:	4b4b      	ldr	r3, [pc, #300]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	2380      	movs	r3, #128	@ 0x80
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	4013      	ands	r3, r2
 8009982:	d0f0      	beq.n	8009966 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009984:	4b48      	ldr	r3, [pc, #288]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4a4a      	ldr	r2, [pc, #296]	@ (8009ab4 <HAL_RCC_OscConfig+0x338>)
 800998a:	4013      	ands	r3, r2
 800998c:	0019      	movs	r1, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	021a      	lsls	r2, r3, #8
 8009994:	4b44      	ldr	r3, [pc, #272]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009996:	430a      	orrs	r2, r1
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	e01b      	b.n	80099d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800999c:	4b42      	ldr	r3, [pc, #264]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	4b41      	ldr	r3, [pc, #260]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80099a2:	4949      	ldr	r1, [pc, #292]	@ (8009ac8 <HAL_RCC_OscConfig+0x34c>)
 80099a4:	400a      	ands	r2, r1
 80099a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a8:	f7fd f8be 	bl	8006b28 <HAL_GetTick>
 80099ac:	0003      	movs	r3, r0
 80099ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099b0:	e008      	b.n	80099c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099b2:	f7fd f8b9 	bl	8006b28 <HAL_GetTick>
 80099b6:	0002      	movs	r2, r0
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d901      	bls.n	80099c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e1e3      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099c4:	4b38      	ldr	r3, [pc, #224]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	2380      	movs	r3, #128	@ 0x80
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	4013      	ands	r3, r2
 80099ce:	d1f0      	bne.n	80099b2 <HAL_RCC_OscConfig+0x236>
 80099d0:	e000      	b.n	80099d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2208      	movs	r2, #8
 80099da:	4013      	ands	r3, r2
 80099dc:	d047      	beq.n	8009a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80099de:	4b32      	ldr	r3, [pc, #200]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	2238      	movs	r2, #56	@ 0x38
 80099e4:	4013      	ands	r3, r2
 80099e6:	2b18      	cmp	r3, #24
 80099e8:	d10a      	bne.n	8009a00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80099ea:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 80099ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ee:	2202      	movs	r2, #2
 80099f0:	4013      	ands	r3, r2
 80099f2:	d03c      	beq.n	8009a6e <HAL_RCC_OscConfig+0x2f2>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d138      	bne.n	8009a6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e1c5      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d019      	beq.n	8009a3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009a08:	4b27      	ldr	r3, [pc, #156]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009a0c:	4b26      	ldr	r3, [pc, #152]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a0e:	2101      	movs	r1, #1
 8009a10:	430a      	orrs	r2, r1
 8009a12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7fd f888 	bl	8006b28 <HAL_GetTick>
 8009a18:	0003      	movs	r3, r0
 8009a1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a1c:	e008      	b.n	8009a30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a1e:	f7fd f883 	bl	8006b28 <HAL_GetTick>
 8009a22:	0002      	movs	r2, r0
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d901      	bls.n	8009a30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e1ad      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a30:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a34:	2202      	movs	r2, #2
 8009a36:	4013      	ands	r3, r2
 8009a38:	d0f1      	beq.n	8009a1e <HAL_RCC_OscConfig+0x2a2>
 8009a3a:	e018      	b.n	8009a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009a40:	4b19      	ldr	r3, [pc, #100]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a42:	2101      	movs	r1, #1
 8009a44:	438a      	bics	r2, r1
 8009a46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a48:	f7fd f86e 	bl	8006b28 <HAL_GetTick>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a52:	f7fd f869 	bl	8006b28 <HAL_GetTick>
 8009a56:	0002      	movs	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e193      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a64:	4b10      	ldr	r3, [pc, #64]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a68:	2202      	movs	r2, #2
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	d1f1      	bne.n	8009a52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2204      	movs	r2, #4
 8009a74:	4013      	ands	r3, r2
 8009a76:	d100      	bne.n	8009a7a <HAL_RCC_OscConfig+0x2fe>
 8009a78:	e0c6      	b.n	8009c08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a7a:	231f      	movs	r3, #31
 8009a7c:	18fb      	adds	r3, r7, r3
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009a82:	4b09      	ldr	r3, [pc, #36]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2238      	movs	r2, #56	@ 0x38
 8009a88:	4013      	ands	r3, r2
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d11e      	bne.n	8009acc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009a8e:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <HAL_RCC_OscConfig+0x32c>)
 8009a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a92:	2202      	movs	r2, #2
 8009a94:	4013      	ands	r3, r2
 8009a96:	d100      	bne.n	8009a9a <HAL_RCC_OscConfig+0x31e>
 8009a98:	e0b6      	b.n	8009c08 <HAL_RCC_OscConfig+0x48c>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d000      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x328>
 8009aa2:	e0b1      	b.n	8009c08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e171      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
 8009aa8:	40021000 	.word	0x40021000
 8009aac:	fffeffff 	.word	0xfffeffff
 8009ab0:	fffbffff 	.word	0xfffbffff
 8009ab4:	ffff80ff 	.word	0xffff80ff
 8009ab8:	ffffc7ff 	.word	0xffffc7ff
 8009abc:	00f42400 	.word	0x00f42400
 8009ac0:	2000044c 	.word	0x2000044c
 8009ac4:	20000450 	.word	0x20000450
 8009ac8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009acc:	4bb1      	ldr	r3, [pc, #708]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ad0:	2380      	movs	r3, #128	@ 0x80
 8009ad2:	055b      	lsls	r3, r3, #21
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	d101      	bne.n	8009adc <HAL_RCC_OscConfig+0x360>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e000      	b.n	8009ade <HAL_RCC_OscConfig+0x362>
 8009adc:	2300      	movs	r3, #0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d011      	beq.n	8009b06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009ae2:	4bac      	ldr	r3, [pc, #688]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ae6:	4bab      	ldr	r3, [pc, #684]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009ae8:	2180      	movs	r1, #128	@ 0x80
 8009aea:	0549      	lsls	r1, r1, #21
 8009aec:	430a      	orrs	r2, r1
 8009aee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009af0:	4ba8      	ldr	r3, [pc, #672]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009af4:	2380      	movs	r3, #128	@ 0x80
 8009af6:	055b      	lsls	r3, r3, #21
 8009af8:	4013      	ands	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009afe:	231f      	movs	r3, #31
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	2201      	movs	r2, #1
 8009b04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b06:	4ba4      	ldr	r3, [pc, #656]	@ (8009d98 <HAL_RCC_OscConfig+0x61c>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	2380      	movs	r3, #128	@ 0x80
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d11a      	bne.n	8009b48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b12:	4ba1      	ldr	r3, [pc, #644]	@ (8009d98 <HAL_RCC_OscConfig+0x61c>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4ba0      	ldr	r3, [pc, #640]	@ (8009d98 <HAL_RCC_OscConfig+0x61c>)
 8009b18:	2180      	movs	r1, #128	@ 0x80
 8009b1a:	0049      	lsls	r1, r1, #1
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009b20:	f7fd f802 	bl	8006b28 <HAL_GetTick>
 8009b24:	0003      	movs	r3, r0
 8009b26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b2a:	f7fc fffd 	bl	8006b28 <HAL_GetTick>
 8009b2e:	0002      	movs	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e127      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b3c:	4b96      	ldr	r3, [pc, #600]	@ (8009d98 <HAL_RCC_OscConfig+0x61c>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	2380      	movs	r3, #128	@ 0x80
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	4013      	ands	r3, r2
 8009b46:	d0f0      	beq.n	8009b2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d106      	bne.n	8009b5e <HAL_RCC_OscConfig+0x3e2>
 8009b50:	4b90      	ldr	r3, [pc, #576]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b54:	4b8f      	ldr	r3, [pc, #572]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b56:	2101      	movs	r1, #1
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b5c:	e01c      	b.n	8009b98 <HAL_RCC_OscConfig+0x41c>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	2b05      	cmp	r3, #5
 8009b64:	d10c      	bne.n	8009b80 <HAL_RCC_OscConfig+0x404>
 8009b66:	4b8b      	ldr	r3, [pc, #556]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b6c:	2104      	movs	r1, #4
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b72:	4b88      	ldr	r3, [pc, #544]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b76:	4b87      	ldr	r3, [pc, #540]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b78:	2101      	movs	r1, #1
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b7e:	e00b      	b.n	8009b98 <HAL_RCC_OscConfig+0x41c>
 8009b80:	4b84      	ldr	r3, [pc, #528]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b84:	4b83      	ldr	r3, [pc, #524]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b86:	2101      	movs	r1, #1
 8009b88:	438a      	bics	r2, r1
 8009b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b8c:	4b81      	ldr	r3, [pc, #516]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b90:	4b80      	ldr	r3, [pc, #512]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009b92:	2104      	movs	r1, #4
 8009b94:	438a      	bics	r2, r1
 8009b96:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d014      	beq.n	8009bca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba0:	f7fc ffc2 	bl	8006b28 <HAL_GetTick>
 8009ba4:	0003      	movs	r3, r0
 8009ba6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ba8:	e009      	b.n	8009bbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009baa:	f7fc ffbd 	bl	8006b28 <HAL_GetTick>
 8009bae:	0002      	movs	r2, r0
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	4a79      	ldr	r2, [pc, #484]	@ (8009d9c <HAL_RCC_OscConfig+0x620>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e0e6      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bbe:	4b75      	ldr	r3, [pc, #468]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	d0f0      	beq.n	8009baa <HAL_RCC_OscConfig+0x42e>
 8009bc8:	e013      	b.n	8009bf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bca:	f7fc ffad 	bl	8006b28 <HAL_GetTick>
 8009bce:	0003      	movs	r3, r0
 8009bd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bd2:	e009      	b.n	8009be8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bd4:	f7fc ffa8 	bl	8006b28 <HAL_GetTick>
 8009bd8:	0002      	movs	r2, r0
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	4a6f      	ldr	r2, [pc, #444]	@ (8009d9c <HAL_RCC_OscConfig+0x620>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d901      	bls.n	8009be8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e0d1      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009be8:	4b6a      	ldr	r3, [pc, #424]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bec:	2202      	movs	r2, #2
 8009bee:	4013      	ands	r3, r2
 8009bf0:	d1f0      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009bf2:	231f      	movs	r3, #31
 8009bf4:	18fb      	adds	r3, r7, r3
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d105      	bne.n	8009c08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009bfc:	4b65      	ldr	r3, [pc, #404]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c00:	4b64      	ldr	r3, [pc, #400]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c02:	4967      	ldr	r1, [pc, #412]	@ (8009da0 <HAL_RCC_OscConfig+0x624>)
 8009c04:	400a      	ands	r2, r1
 8009c06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d100      	bne.n	8009c12 <HAL_RCC_OscConfig+0x496>
 8009c10:	e0bb      	b.n	8009d8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c12:	4b60      	ldr	r3, [pc, #384]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2238      	movs	r2, #56	@ 0x38
 8009c18:	4013      	ands	r3, r2
 8009c1a:	2b10      	cmp	r3, #16
 8009c1c:	d100      	bne.n	8009c20 <HAL_RCC_OscConfig+0x4a4>
 8009c1e:	e07b      	b.n	8009d18 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d156      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c28:	4b5a      	ldr	r3, [pc, #360]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b59      	ldr	r3, [pc, #356]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c2e:	495d      	ldr	r1, [pc, #372]	@ (8009da4 <HAL_RCC_OscConfig+0x628>)
 8009c30:	400a      	ands	r2, r1
 8009c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c34:	f7fc ff78 	bl	8006b28 <HAL_GetTick>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c3e:	f7fc ff73 	bl	8006b28 <HAL_GetTick>
 8009c42:	0002      	movs	r2, r0
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e09d      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c50:	4b50      	ldr	r3, [pc, #320]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	2380      	movs	r3, #128	@ 0x80
 8009c56:	049b      	lsls	r3, r3, #18
 8009c58:	4013      	ands	r3, r2
 8009c5a:	d1f0      	bne.n	8009c3e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	4a51      	ldr	r2, [pc, #324]	@ (8009da8 <HAL_RCC_OscConfig+0x62c>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	0019      	movs	r1, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	431a      	orrs	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	4b42      	ldr	r3, [pc, #264]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c90:	4b40      	ldr	r3, [pc, #256]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	4b3f      	ldr	r3, [pc, #252]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009c96:	2180      	movs	r1, #128	@ 0x80
 8009c98:	0449      	lsls	r1, r1, #17
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009ca4:	2180      	movs	r1, #128	@ 0x80
 8009ca6:	0549      	lsls	r1, r1, #21
 8009ca8:	430a      	orrs	r2, r1
 8009caa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cac:	f7fc ff3c 	bl	8006b28 <HAL_GetTick>
 8009cb0:	0003      	movs	r3, r0
 8009cb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cb4:	e008      	b.n	8009cc8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cb6:	f7fc ff37 	bl	8006b28 <HAL_GetTick>
 8009cba:	0002      	movs	r2, r0
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d901      	bls.n	8009cc8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e061      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cc8:	4b32      	ldr	r3, [pc, #200]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	2380      	movs	r3, #128	@ 0x80
 8009cce:	049b      	lsls	r3, r3, #18
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	d0f0      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x53a>
 8009cd4:	e059      	b.n	8009d8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4b2e      	ldr	r3, [pc, #184]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009cdc:	4931      	ldr	r1, [pc, #196]	@ (8009da4 <HAL_RCC_OscConfig+0x628>)
 8009cde:	400a      	ands	r2, r1
 8009ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ce2:	f7fc ff21 	bl	8006b28 <HAL_GetTick>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cea:	e008      	b.n	8009cfe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cec:	f7fc ff1c 	bl	8006b28 <HAL_GetTick>
 8009cf0:	0002      	movs	r2, r0
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e046      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cfe:	4b25      	ldr	r3, [pc, #148]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	2380      	movs	r3, #128	@ 0x80
 8009d04:	049b      	lsls	r3, r3, #18
 8009d06:	4013      	ands	r3, r2
 8009d08:	d1f0      	bne.n	8009cec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009d0a:	4b22      	ldr	r3, [pc, #136]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	4b21      	ldr	r3, [pc, #132]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009d10:	4926      	ldr	r1, [pc, #152]	@ (8009dac <HAL_RCC_OscConfig+0x630>)
 8009d12:	400a      	ands	r2, r1
 8009d14:	60da      	str	r2, [r3, #12]
 8009d16:	e038      	b.n	8009d8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e033      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009d24:	4b1b      	ldr	r3, [pc, #108]	@ (8009d94 <HAL_RCC_OscConfig+0x618>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2203      	movs	r2, #3
 8009d2e:	401a      	ands	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d126      	bne.n	8009d86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2270      	movs	r2, #112	@ 0x70
 8009d3c:	401a      	ands	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d11f      	bne.n	8009d86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	23fe      	movs	r3, #254	@ 0xfe
 8009d4a:	01db      	lsls	r3, r3, #7
 8009d4c:	401a      	ands	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d116      	bne.n	8009d86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	23f8      	movs	r3, #248	@ 0xf8
 8009d5c:	039b      	lsls	r3, r3, #14
 8009d5e:	401a      	ands	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d10e      	bne.n	8009d86 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	23e0      	movs	r3, #224	@ 0xe0
 8009d6c:	051b      	lsls	r3, r3, #20
 8009d6e:	401a      	ands	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d106      	bne.n	8009d86 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	0f5b      	lsrs	r3, r3, #29
 8009d7c:	075a      	lsls	r2, r3, #29
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d001      	beq.n	8009d8a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b008      	add	sp, #32
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	40021000 	.word	0x40021000
 8009d98:	40007000 	.word	0x40007000
 8009d9c:	00001388 	.word	0x00001388
 8009da0:	efffffff 	.word	0xefffffff
 8009da4:	feffffff 	.word	0xfeffffff
 8009da8:	11c1808c 	.word	0x11c1808c
 8009dac:	eefefffc 	.word	0xeefefffc

08009db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e0e9      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009dc4:	4b76      	ldr	r3, [pc, #472]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2207      	movs	r2, #7
 8009dca:	4013      	ands	r3, r2
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d91e      	bls.n	8009e10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dd2:	4b73      	ldr	r3, [pc, #460]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2207      	movs	r2, #7
 8009dd8:	4393      	bics	r3, r2
 8009dda:	0019      	movs	r1, r3
 8009ddc:	4b70      	ldr	r3, [pc, #448]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009de4:	f7fc fea0 	bl	8006b28 <HAL_GetTick>
 8009de8:	0003      	movs	r3, r0
 8009dea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009dec:	e009      	b.n	8009e02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dee:	f7fc fe9b 	bl	8006b28 <HAL_GetTick>
 8009df2:	0002      	movs	r2, r0
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	4a6a      	ldr	r2, [pc, #424]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e0ca      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009e02:	4b67      	ldr	r3, [pc, #412]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2207      	movs	r2, #7
 8009e08:	4013      	ands	r3, r2
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d1ee      	bne.n	8009dee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2202      	movs	r2, #2
 8009e16:	4013      	ands	r3, r2
 8009e18:	d015      	beq.n	8009e46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2204      	movs	r2, #4
 8009e20:	4013      	ands	r3, r2
 8009e22:	d006      	beq.n	8009e32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009e24:	4b60      	ldr	r3, [pc, #384]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	4b5f      	ldr	r3, [pc, #380]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e2a:	21e0      	movs	r1, #224	@ 0xe0
 8009e2c:	01c9      	lsls	r1, r1, #7
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e32:	4b5d      	ldr	r3, [pc, #372]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	4a5d      	ldr	r2, [pc, #372]	@ (8009fac <HAL_RCC_ClockConfig+0x1fc>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	0019      	movs	r1, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	4b59      	ldr	r3, [pc, #356]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e42:	430a      	orrs	r2, r1
 8009e44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d057      	beq.n	8009f00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d107      	bne.n	8009e68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e58:	4b53      	ldr	r3, [pc, #332]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	2380      	movs	r3, #128	@ 0x80
 8009e5e:	029b      	lsls	r3, r3, #10
 8009e60:	4013      	ands	r3, r2
 8009e62:	d12b      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e097      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d107      	bne.n	8009e80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e70:	4b4d      	ldr	r3, [pc, #308]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	2380      	movs	r3, #128	@ 0x80
 8009e76:	049b      	lsls	r3, r3, #18
 8009e78:	4013      	ands	r3, r2
 8009e7a:	d11f      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e08b      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d107      	bne.n	8009e98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e88:	4b47      	ldr	r3, [pc, #284]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	2380      	movs	r3, #128	@ 0x80
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4013      	ands	r3, r2
 8009e92:	d113      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e07f      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d106      	bne.n	8009eae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009ea0:	4b41      	ldr	r3, [pc, #260]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	d108      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e074      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009eae:	4b3e      	ldr	r3, [pc, #248]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	d101      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e06d      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2207      	movs	r2, #7
 8009ec2:	4393      	bics	r3, r2
 8009ec4:	0019      	movs	r1, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	4b37      	ldr	r3, [pc, #220]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ed0:	f7fc fe2a 	bl	8006b28 <HAL_GetTick>
 8009ed4:	0003      	movs	r3, r0
 8009ed6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ed8:	e009      	b.n	8009eee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009eda:	f7fc fe25 	bl	8006b28 <HAL_GetTick>
 8009ede:	0002      	movs	r2, r0
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e054      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eee:	4b2e      	ldr	r3, [pc, #184]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	2238      	movs	r2, #56	@ 0x38
 8009ef4:	401a      	ands	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d1ec      	bne.n	8009eda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f00:	4b27      	ldr	r3, [pc, #156]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2207      	movs	r2, #7
 8009f06:	4013      	ands	r3, r2
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d21e      	bcs.n	8009f4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f0e:	4b24      	ldr	r3, [pc, #144]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2207      	movs	r2, #7
 8009f14:	4393      	bics	r3, r2
 8009f16:	0019      	movs	r1, r3
 8009f18:	4b21      	ldr	r3, [pc, #132]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009f20:	f7fc fe02 	bl	8006b28 <HAL_GetTick>
 8009f24:	0003      	movs	r3, r0
 8009f26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f28:	e009      	b.n	8009f3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f2a:	f7fc fdfd 	bl	8006b28 <HAL_GetTick>
 8009f2e:	0002      	movs	r2, r0
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e02c      	b.n	8009f98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f3e:	4b18      	ldr	r3, [pc, #96]	@ (8009fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2207      	movs	r2, #7
 8009f44:	4013      	ands	r3, r2
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d1ee      	bne.n	8009f2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2204      	movs	r2, #4
 8009f52:	4013      	ands	r3, r2
 8009f54:	d009      	beq.n	8009f6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009f56:	4b14      	ldr	r3, [pc, #80]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	4a15      	ldr	r2, [pc, #84]	@ (8009fb0 <HAL_RCC_ClockConfig+0x200>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	0019      	movs	r1, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68da      	ldr	r2, [r3, #12]
 8009f64:	4b10      	ldr	r3, [pc, #64]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f66:	430a      	orrs	r2, r1
 8009f68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009f6a:	f000 f829 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 8009f6e:	0001      	movs	r1, r0
 8009f70:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	0a1b      	lsrs	r3, r3, #8
 8009f76:	220f      	movs	r2, #15
 8009f78:	401a      	ands	r2, r3
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <HAL_RCC_ClockConfig+0x204>)
 8009f7c:	0092      	lsls	r2, r2, #2
 8009f7e:	58d3      	ldr	r3, [r2, r3]
 8009f80:	221f      	movs	r2, #31
 8009f82:	4013      	ands	r3, r2
 8009f84:	000a      	movs	r2, r1
 8009f86:	40da      	lsrs	r2, r3
 8009f88:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb8 <HAL_RCC_ClockConfig+0x208>)
 8009f8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009fbc <HAL_RCC_ClockConfig+0x20c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	0018      	movs	r0, r3
 8009f92:	f7fc fd6d 	bl	8006a70 <HAL_InitTick>
 8009f96:	0003      	movs	r3, r0
}
 8009f98:	0018      	movs	r0, r3
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	b004      	add	sp, #16
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	40022000 	.word	0x40022000
 8009fa4:	00001388 	.word	0x00001388
 8009fa8:	40021000 	.word	0x40021000
 8009fac:	fffff0ff 	.word	0xfffff0ff
 8009fb0:	ffff8fff 	.word	0xffff8fff
 8009fb4:	0800e9ec 	.word	0x0800e9ec
 8009fb8:	2000044c 	.word	0x2000044c
 8009fbc:	20000450 	.word	0x20000450

08009fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fc6:	4b3c      	ldr	r3, [pc, #240]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2238      	movs	r2, #56	@ 0x38
 8009fcc:	4013      	ands	r3, r2
 8009fce:	d10f      	bne.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009fd0:	4b39      	ldr	r3, [pc, #228]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	0adb      	lsrs	r3, r3, #11
 8009fd6:	2207      	movs	r2, #7
 8009fd8:	4013      	ands	r3, r2
 8009fda:	2201      	movs	r2, #1
 8009fdc:	409a      	lsls	r2, r3
 8009fde:	0013      	movs	r3, r2
 8009fe0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	4835      	ldr	r0, [pc, #212]	@ (800a0bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8009fe6:	f7f6 f88f 	bl	8000108 <__udivsi3>
 8009fea:	0003      	movs	r3, r0
 8009fec:	613b      	str	r3, [r7, #16]
 8009fee:	e05d      	b.n	800a0ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ff0:	4b31      	ldr	r3, [pc, #196]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	2238      	movs	r2, #56	@ 0x38
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d102      	bne.n	800a002 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ffc:	4b30      	ldr	r3, [pc, #192]	@ (800a0c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8009ffe:	613b      	str	r3, [r7, #16]
 800a000:	e054      	b.n	800a0ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a002:	4b2d      	ldr	r3, [pc, #180]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2238      	movs	r2, #56	@ 0x38
 800a008:	4013      	ands	r3, r2
 800a00a:	2b10      	cmp	r3, #16
 800a00c:	d138      	bne.n	800a080 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a00e:	4b2a      	ldr	r3, [pc, #168]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2203      	movs	r2, #3
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a018:	4b27      	ldr	r3, [pc, #156]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	091b      	lsrs	r3, r3, #4
 800a01e:	2207      	movs	r2, #7
 800a020:	4013      	ands	r3, r2
 800a022:	3301      	adds	r3, #1
 800a024:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d10d      	bne.n	800a048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	4824      	ldr	r0, [pc, #144]	@ (800a0c0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a030:	f7f6 f86a 	bl	8000108 <__udivsi3>
 800a034:	0003      	movs	r3, r0
 800a036:	0019      	movs	r1, r3
 800a038:	4b1f      	ldr	r3, [pc, #124]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	0a1b      	lsrs	r3, r3, #8
 800a03e:	227f      	movs	r2, #127	@ 0x7f
 800a040:	4013      	ands	r3, r2
 800a042:	434b      	muls	r3, r1
 800a044:	617b      	str	r3, [r7, #20]
        break;
 800a046:	e00d      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a048:	68b9      	ldr	r1, [r7, #8]
 800a04a:	481c      	ldr	r0, [pc, #112]	@ (800a0bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800a04c:	f7f6 f85c 	bl	8000108 <__udivsi3>
 800a050:	0003      	movs	r3, r0
 800a052:	0019      	movs	r1, r3
 800a054:	4b18      	ldr	r3, [pc, #96]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	0a1b      	lsrs	r3, r3, #8
 800a05a:	227f      	movs	r2, #127	@ 0x7f
 800a05c:	4013      	ands	r3, r2
 800a05e:	434b      	muls	r3, r1
 800a060:	617b      	str	r3, [r7, #20]
        break;
 800a062:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a064:	4b14      	ldr	r3, [pc, #80]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	0f5b      	lsrs	r3, r3, #29
 800a06a:	2207      	movs	r2, #7
 800a06c:	4013      	ands	r3, r2
 800a06e:	3301      	adds	r3, #1
 800a070:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	6978      	ldr	r0, [r7, #20]
 800a076:	f7f6 f847 	bl	8000108 <__udivsi3>
 800a07a:	0003      	movs	r3, r0
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	e015      	b.n	800a0ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a080:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	2238      	movs	r2, #56	@ 0x38
 800a086:	4013      	ands	r3, r2
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d103      	bne.n	800a094 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a08c:	2380      	movs	r3, #128	@ 0x80
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	e00b      	b.n	800a0ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a094:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	2238      	movs	r2, #56	@ 0x38
 800a09a:	4013      	ands	r3, r2
 800a09c:	2b18      	cmp	r3, #24
 800a09e:	d103      	bne.n	800a0a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a0a0:	23fa      	movs	r3, #250	@ 0xfa
 800a0a2:	01db      	lsls	r3, r3, #7
 800a0a4:	613b      	str	r3, [r7, #16]
 800a0a6:	e001      	b.n	800a0ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a0ac:	693b      	ldr	r3, [r7, #16]
}
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	b006      	add	sp, #24
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	46c0      	nop			@ (mov r8, r8)
 800a0b8:	40021000 	.word	0x40021000
 800a0bc:	00f42400 	.word	0x00f42400
 800a0c0:	007a1200 	.word	0x007a1200

0800a0c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0c8:	4b02      	ldr	r3, [pc, #8]	@ (800a0d4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
}
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	46c0      	nop			@ (mov r8, r8)
 800a0d4:	2000044c 	.word	0x2000044c

0800a0d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0d8:	b5b0      	push	{r4, r5, r7, lr}
 800a0da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a0dc:	f7ff fff2 	bl	800a0c4 <HAL_RCC_GetHCLKFreq>
 800a0e0:	0004      	movs	r4, r0
 800a0e2:	f7ff fb3f 	bl	8009764 <LL_RCC_GetAPB1Prescaler>
 800a0e6:	0003      	movs	r3, r0
 800a0e8:	0b1a      	lsrs	r2, r3, #12
 800a0ea:	4b05      	ldr	r3, [pc, #20]	@ (800a100 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a0ec:	0092      	lsls	r2, r2, #2
 800a0ee:	58d3      	ldr	r3, [r2, r3]
 800a0f0:	221f      	movs	r2, #31
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	40dc      	lsrs	r4, r3
 800a0f6:	0023      	movs	r3, r4
}
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0fe:	46c0      	nop			@ (mov r8, r8)
 800a100:	0800ea2c 	.word	0x0800ea2c

0800a104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a10c:	2313      	movs	r3, #19
 800a10e:	18fb      	adds	r3, r7, r3
 800a110:	2200      	movs	r2, #0
 800a112:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a114:	2312      	movs	r3, #18
 800a116:	18fb      	adds	r3, r7, r3
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	2380      	movs	r3, #128	@ 0x80
 800a122:	029b      	lsls	r3, r3, #10
 800a124:	4013      	ands	r3, r2
 800a126:	d100      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a128:	e0a3      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a12a:	2011      	movs	r0, #17
 800a12c:	183b      	adds	r3, r7, r0
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a132:	4ba5      	ldr	r3, [pc, #660]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a136:	2380      	movs	r3, #128	@ 0x80
 800a138:	055b      	lsls	r3, r3, #21
 800a13a:	4013      	ands	r3, r2
 800a13c:	d110      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a13e:	4ba2      	ldr	r3, [pc, #648]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a142:	4ba1      	ldr	r3, [pc, #644]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a144:	2180      	movs	r1, #128	@ 0x80
 800a146:	0549      	lsls	r1, r1, #21
 800a148:	430a      	orrs	r2, r1
 800a14a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a14c:	4b9e      	ldr	r3, [pc, #632]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a14e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a150:	2380      	movs	r3, #128	@ 0x80
 800a152:	055b      	lsls	r3, r3, #21
 800a154:	4013      	ands	r3, r2
 800a156:	60bb      	str	r3, [r7, #8]
 800a158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a15a:	183b      	adds	r3, r7, r0
 800a15c:	2201      	movs	r2, #1
 800a15e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a160:	4b9a      	ldr	r3, [pc, #616]	@ (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	4b99      	ldr	r3, [pc, #612]	@ (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a166:	2180      	movs	r1, #128	@ 0x80
 800a168:	0049      	lsls	r1, r1, #1
 800a16a:	430a      	orrs	r2, r1
 800a16c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a16e:	f7fc fcdb 	bl	8006b28 <HAL_GetTick>
 800a172:	0003      	movs	r3, r0
 800a174:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a176:	e00b      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a178:	f7fc fcd6 	bl	8006b28 <HAL_GetTick>
 800a17c:	0002      	movs	r2, r0
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d904      	bls.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a186:	2313      	movs	r3, #19
 800a188:	18fb      	adds	r3, r7, r3
 800a18a:	2203      	movs	r2, #3
 800a18c:	701a      	strb	r2, [r3, #0]
        break;
 800a18e:	e005      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a190:	4b8e      	ldr	r3, [pc, #568]	@ (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	2380      	movs	r3, #128	@ 0x80
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	4013      	ands	r3, r2
 800a19a:	d0ed      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a19c:	2313      	movs	r3, #19
 800a19e:	18fb      	adds	r3, r7, r3
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d154      	bne.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1a6:	4b88      	ldr	r3, [pc, #544]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1aa:	23c0      	movs	r3, #192	@ 0xc0
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d019      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d014      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1c2:	4b81      	ldr	r3, [pc, #516]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1c6:	4a82      	ldr	r2, [pc, #520]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1cc:	4b7e      	ldr	r3, [pc, #504]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1d0:	4b7d      	ldr	r3, [pc, #500]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1d2:	2180      	movs	r1, #128	@ 0x80
 800a1d4:	0249      	lsls	r1, r1, #9
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1da:	4b7b      	ldr	r3, [pc, #492]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1de:	4b7a      	ldr	r3, [pc, #488]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1e0:	497c      	ldr	r1, [pc, #496]	@ (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a1e2:	400a      	ands	r2, r1
 800a1e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1e6:	4b78      	ldr	r3, [pc, #480]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	d016      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f4:	f7fc fc98 	bl	8006b28 <HAL_GetTick>
 800a1f8:	0003      	movs	r3, r0
 800a1fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1fc:	e00c      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1fe:	f7fc fc93 	bl	8006b28 <HAL_GetTick>
 800a202:	0002      	movs	r2, r0
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	4a73      	ldr	r2, [pc, #460]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d904      	bls.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a20e:	2313      	movs	r3, #19
 800a210:	18fb      	adds	r3, r7, r3
 800a212:	2203      	movs	r2, #3
 800a214:	701a      	strb	r2, [r3, #0]
            break;
 800a216:	e004      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a218:	4b6b      	ldr	r3, [pc, #428]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a21a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a21c:	2202      	movs	r2, #2
 800a21e:	4013      	ands	r3, r2
 800a220:	d0ed      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a222:	2313      	movs	r3, #19
 800a224:	18fb      	adds	r3, r7, r3
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a22c:	4b66      	ldr	r3, [pc, #408]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a22e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a230:	4a67      	ldr	r2, [pc, #412]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a232:	4013      	ands	r3, r2
 800a234:	0019      	movs	r1, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a23a:	4b63      	ldr	r3, [pc, #396]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a23c:	430a      	orrs	r2, r1
 800a23e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a240:	e00c      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a242:	2312      	movs	r3, #18
 800a244:	18fb      	adds	r3, r7, r3
 800a246:	2213      	movs	r2, #19
 800a248:	18ba      	adds	r2, r7, r2
 800a24a:	7812      	ldrb	r2, [r2, #0]
 800a24c:	701a      	strb	r2, [r3, #0]
 800a24e:	e005      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a250:	2312      	movs	r3, #18
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	2213      	movs	r2, #19
 800a256:	18ba      	adds	r2, r7, r2
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a25c:	2311      	movs	r3, #17
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d105      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a266:	4b58      	ldr	r3, [pc, #352]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a26a:	4b57      	ldr	r3, [pc, #348]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a26c:	495b      	ldr	r1, [pc, #364]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a26e:	400a      	ands	r2, r1
 800a270:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2201      	movs	r2, #1
 800a278:	4013      	ands	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a27c:	4b52      	ldr	r3, [pc, #328]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a27e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a280:	2203      	movs	r2, #3
 800a282:	4393      	bics	r3, r2
 800a284:	0019      	movs	r1, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	4b4f      	ldr	r3, [pc, #316]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a28c:	430a      	orrs	r2, r1
 800a28e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2210      	movs	r2, #16
 800a296:	4013      	ands	r3, r2
 800a298:	d009      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a29a:	4b4b      	ldr	r3, [pc, #300]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29e:	4a50      	ldr	r2, [pc, #320]	@ (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	0019      	movs	r1, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	4b47      	ldr	r3, [pc, #284]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	2380      	movs	r3, #128	@ 0x80
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d009      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2ba:	4b43      	ldr	r3, [pc, #268]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2be:	4a49      	ldr	r2, [pc, #292]	@ (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	0019      	movs	r1, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	4b3f      	ldr	r3, [pc, #252]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	2380      	movs	r3, #128	@ 0x80
 800a2d4:	00db      	lsls	r3, r3, #3
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	d009      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2da:	4b3b      	ldr	r3, [pc, #236]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2de:	4a42      	ldr	r2, [pc, #264]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	0019      	movs	r1, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699a      	ldr	r2, [r3, #24]
 800a2e8:	4b37      	ldr	r3, [pc, #220]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	d009      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a2f8:	4b33      	ldr	r3, [pc, #204]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fc:	4a3b      	ldr	r2, [pc, #236]	@ (800a3ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a2fe:	4013      	ands	r3, r2
 800a300:	0019      	movs	r1, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	4b30      	ldr	r3, [pc, #192]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a308:	430a      	orrs	r2, r1
 800a30a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	2380      	movs	r3, #128	@ 0x80
 800a312:	01db      	lsls	r3, r3, #7
 800a314:	4013      	ands	r3, r2
 800a316:	d015      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a318:	4b2b      	ldr	r3, [pc, #172]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a31a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	0899      	lsrs	r1, r3, #2
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	69da      	ldr	r2, [r3, #28]
 800a324:	4b28      	ldr	r3, [pc, #160]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a326:	430a      	orrs	r2, r1
 800a328:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	69da      	ldr	r2, [r3, #28]
 800a32e:	2380      	movs	r3, #128	@ 0x80
 800a330:	05db      	lsls	r3, r3, #23
 800a332:	429a      	cmp	r2, r3
 800a334:	d106      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a336:	4b24      	ldr	r3, [pc, #144]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	4b23      	ldr	r3, [pc, #140]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a33c:	2180      	movs	r1, #128	@ 0x80
 800a33e:	0249      	lsls	r1, r1, #9
 800a340:	430a      	orrs	r2, r1
 800a342:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	2380      	movs	r3, #128	@ 0x80
 800a34a:	039b      	lsls	r3, r3, #14
 800a34c:	4013      	ands	r3, r2
 800a34e:	d016      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a350:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a354:	4a26      	ldr	r2, [pc, #152]	@ (800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a356:	4013      	ands	r3, r2
 800a358:	0019      	movs	r1, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a1a      	ldr	r2, [r3, #32]
 800a35e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a360:	430a      	orrs	r2, r1
 800a362:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a1a      	ldr	r2, [r3, #32]
 800a368:	2380      	movs	r3, #128	@ 0x80
 800a36a:	03db      	lsls	r3, r3, #15
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d106      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a370:	4b15      	ldr	r3, [pc, #84]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a376:	2180      	movs	r1, #128	@ 0x80
 800a378:	0449      	lsls	r1, r1, #17
 800a37a:	430a      	orrs	r2, r1
 800a37c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	2380      	movs	r3, #128	@ 0x80
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	4013      	ands	r3, r2
 800a388:	d016      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a38a:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38e:	4a19      	ldr	r2, [pc, #100]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a390:	4013      	ands	r3, r2
 800a392:	0019      	movs	r1, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691a      	ldr	r2, [r3, #16]
 800a398:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a39a:	430a      	orrs	r2, r1
 800a39c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	691a      	ldr	r2, [r3, #16]
 800a3a2:	2380      	movs	r3, #128	@ 0x80
 800a3a4:	01db      	lsls	r3, r3, #7
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d106      	bne.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a3aa:	4b07      	ldr	r3, [pc, #28]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	4b06      	ldr	r3, [pc, #24]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3b0:	2180      	movs	r1, #128	@ 0x80
 800a3b2:	0249      	lsls	r1, r1, #9
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a3b8:	2312      	movs	r3, #18
 800a3ba:	18fb      	adds	r3, r7, r3
 800a3bc:	781b      	ldrb	r3, [r3, #0]
}
 800a3be:	0018      	movs	r0, r3
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	b006      	add	sp, #24
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	46c0      	nop			@ (mov r8, r8)
 800a3c8:	40021000 	.word	0x40021000
 800a3cc:	40007000 	.word	0x40007000
 800a3d0:	fffffcff 	.word	0xfffffcff
 800a3d4:	fffeffff 	.word	0xfffeffff
 800a3d8:	00001388 	.word	0x00001388
 800a3dc:	efffffff 	.word	0xefffffff
 800a3e0:	fffff3ff 	.word	0xfffff3ff
 800a3e4:	fff3ffff 	.word	0xfff3ffff
 800a3e8:	ffcfffff 	.word	0xffcfffff
 800a3ec:	ffffcfff 	.word	0xffffcfff
 800a3f0:	ffbfffff 	.word	0xffbfffff
 800a3f4:	ffff3fff 	.word	0xffff3fff

0800a3f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e056      	b.n	800a4b8 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	223d      	movs	r2, #61	@ 0x3d
 800a40e:	5c9b      	ldrb	r3, [r3, r2]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d113      	bne.n	800a43e <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	223c      	movs	r2, #60	@ 0x3c
 800a41a:	2100      	movs	r1, #0
 800a41c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	0018      	movs	r0, r3
 800a422:	f002 f8c5 	bl	800c5b0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a23      	ldr	r2, [pc, #140]	@ (800a4c0 <HAL_TIM_Base_Init+0xc8>)
 800a432:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	0010      	movs	r0, r2
 800a43c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	223d      	movs	r2, #61	@ 0x3d
 800a442:	2102      	movs	r1, #2
 800a444:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3304      	adds	r3, #4
 800a44e:	0019      	movs	r1, r3
 800a450:	0010      	movs	r0, r2
 800a452:	f001 fbaf 	bl	800bbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2248      	movs	r2, #72	@ 0x48
 800a45a:	2101      	movs	r1, #1
 800a45c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	223e      	movs	r2, #62	@ 0x3e
 800a462:	2101      	movs	r1, #1
 800a464:	5499      	strb	r1, [r3, r2]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	223f      	movs	r2, #63	@ 0x3f
 800a46a:	2101      	movs	r1, #1
 800a46c:	5499      	strb	r1, [r3, r2]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2240      	movs	r2, #64	@ 0x40
 800a472:	2101      	movs	r1, #1
 800a474:	5499      	strb	r1, [r3, r2]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2241      	movs	r2, #65	@ 0x41
 800a47a:	2101      	movs	r1, #1
 800a47c:	5499      	strb	r1, [r3, r2]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2242      	movs	r2, #66	@ 0x42
 800a482:	2101      	movs	r1, #1
 800a484:	5499      	strb	r1, [r3, r2]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2243      	movs	r2, #67	@ 0x43
 800a48a:	2101      	movs	r1, #1
 800a48c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2244      	movs	r2, #68	@ 0x44
 800a492:	2101      	movs	r1, #1
 800a494:	5499      	strb	r1, [r3, r2]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2245      	movs	r2, #69	@ 0x45
 800a49a:	2101      	movs	r1, #1
 800a49c:	5499      	strb	r1, [r3, r2]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2246      	movs	r2, #70	@ 0x46
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	5499      	strb	r1, [r3, r2]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2247      	movs	r2, #71	@ 0x47
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	223d      	movs	r2, #61	@ 0x3d
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b002      	add	sp, #8
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	08005ad9 	.word	0x08005ad9

0800a4c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	223d      	movs	r2, #61	@ 0x3d
 800a4d0:	5c9b      	ldrb	r3, [r3, r2]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d001      	beq.n	800a4dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e035      	b.n	800a548 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	223d      	movs	r2, #61	@ 0x3d
 800a4e0:	2102      	movs	r1, #2
 800a4e2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a19      	ldr	r2, [pc, #100]	@ (800a550 <HAL_TIM_Base_Start+0x8c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d00a      	beq.n	800a504 <HAL_TIM_Base_Start+0x40>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	2380      	movs	r3, #128	@ 0x80
 800a4f4:	05db      	lsls	r3, r3, #23
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d004      	beq.n	800a504 <HAL_TIM_Base_Start+0x40>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a15      	ldr	r2, [pc, #84]	@ (800a554 <HAL_TIM_Base_Start+0x90>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d116      	bne.n	800a532 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	4a13      	ldr	r2, [pc, #76]	@ (800a558 <HAL_TIM_Base_Start+0x94>)
 800a50c:	4013      	ands	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b06      	cmp	r3, #6
 800a514:	d016      	beq.n	800a544 <HAL_TIM_Base_Start+0x80>
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	2380      	movs	r3, #128	@ 0x80
 800a51a:	025b      	lsls	r3, r3, #9
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d011      	beq.n	800a544 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2101      	movs	r1, #1
 800a52c:	430a      	orrs	r2, r1
 800a52e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a530:	e008      	b.n	800a544 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2101      	movs	r1, #1
 800a53e:	430a      	orrs	r2, r1
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	e000      	b.n	800a546 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a544:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	0018      	movs	r0, r3
 800a54a:	46bd      	mov	sp, r7
 800a54c:	b004      	add	sp, #16
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	40012c00 	.word	0x40012c00
 800a554:	40000400 	.word	0x40000400
 800a558:	00010007 	.word	0x00010007

0800a55c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	223d      	movs	r2, #61	@ 0x3d
 800a568:	5c9b      	ldrb	r3, [r3, r2]
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d001      	beq.n	800a574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e03d      	b.n	800a5f0 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	223d      	movs	r2, #61	@ 0x3d
 800a578:	2102      	movs	r1, #2
 800a57a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68da      	ldr	r2, [r3, #12]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2101      	movs	r1, #1
 800a588:	430a      	orrs	r2, r1
 800a58a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a19      	ldr	r2, [pc, #100]	@ (800a5f8 <HAL_TIM_Base_Start_IT+0x9c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00a      	beq.n	800a5ac <HAL_TIM_Base_Start_IT+0x50>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	2380      	movs	r3, #128	@ 0x80
 800a59c:	05db      	lsls	r3, r3, #23
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d004      	beq.n	800a5ac <HAL_TIM_Base_Start_IT+0x50>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a15      	ldr	r2, [pc, #84]	@ (800a5fc <HAL_TIM_Base_Start_IT+0xa0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d116      	bne.n	800a5da <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	4a13      	ldr	r2, [pc, #76]	@ (800a600 <HAL_TIM_Base_Start_IT+0xa4>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b06      	cmp	r3, #6
 800a5bc:	d016      	beq.n	800a5ec <HAL_TIM_Base_Start_IT+0x90>
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	2380      	movs	r3, #128	@ 0x80
 800a5c2:	025b      	lsls	r3, r3, #9
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d011      	beq.n	800a5ec <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d8:	e008      	b.n	800a5ec <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	e000      	b.n	800a5ee <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	b004      	add	sp, #16
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	40012c00 	.word	0x40012c00
 800a5fc:	40000400 	.word	0x40000400
 800a600:	00010007 	.word	0x00010007

0800a604 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e056      	b.n	800a6c4 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	223d      	movs	r2, #61	@ 0x3d
 800a61a:	5c9b      	ldrb	r3, [r3, r2]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d113      	bne.n	800a64a <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	223c      	movs	r2, #60	@ 0x3c
 800a626:	2100      	movs	r1, #0
 800a628:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	0018      	movs	r0, r3
 800a62e:	f001 ffbf 	bl	800c5b0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d102      	bne.n	800a640 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a23      	ldr	r2, [pc, #140]	@ (800a6cc <HAL_TIM_OC_Init+0xc8>)
 800a63e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	0010      	movs	r0, r2
 800a648:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	223d      	movs	r2, #61	@ 0x3d
 800a64e:	2102      	movs	r1, #2
 800a650:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3304      	adds	r3, #4
 800a65a:	0019      	movs	r1, r3
 800a65c:	0010      	movs	r0, r2
 800a65e:	f001 faa9 	bl	800bbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2248      	movs	r2, #72	@ 0x48
 800a666:	2101      	movs	r1, #1
 800a668:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	223e      	movs	r2, #62	@ 0x3e
 800a66e:	2101      	movs	r1, #1
 800a670:	5499      	strb	r1, [r3, r2]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	223f      	movs	r2, #63	@ 0x3f
 800a676:	2101      	movs	r1, #1
 800a678:	5499      	strb	r1, [r3, r2]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2240      	movs	r2, #64	@ 0x40
 800a67e:	2101      	movs	r1, #1
 800a680:	5499      	strb	r1, [r3, r2]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2241      	movs	r2, #65	@ 0x41
 800a686:	2101      	movs	r1, #1
 800a688:	5499      	strb	r1, [r3, r2]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2242      	movs	r2, #66	@ 0x42
 800a68e:	2101      	movs	r1, #1
 800a690:	5499      	strb	r1, [r3, r2]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2243      	movs	r2, #67	@ 0x43
 800a696:	2101      	movs	r1, #1
 800a698:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2244      	movs	r2, #68	@ 0x44
 800a69e:	2101      	movs	r1, #1
 800a6a0:	5499      	strb	r1, [r3, r2]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2245      	movs	r2, #69	@ 0x45
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	5499      	strb	r1, [r3, r2]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2246      	movs	r2, #70	@ 0x46
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	5499      	strb	r1, [r3, r2]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2247      	movs	r2, #71	@ 0x47
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	223d      	movs	r2, #61	@ 0x3d
 800a6be:	2101      	movs	r1, #1
 800a6c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	b002      	add	sp, #8
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	0800a6d1 	.word	0x0800a6d1

0800a6d0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a6d8:	46c0      	nop			@ (mov r8, r8)
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b002      	add	sp, #8
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ea:	230f      	movs	r3, #15
 800a6ec:	18fb      	adds	r3, r7, r3
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d108      	bne.n	800a70a <HAL_TIM_OC_Start_IT+0x2a>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	223e      	movs	r2, #62	@ 0x3e
 800a6fc:	5c9b      	ldrb	r3, [r3, r2]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	3b01      	subs	r3, #1
 800a702:	1e5a      	subs	r2, r3, #1
 800a704:	4193      	sbcs	r3, r2
 800a706:	b2db      	uxtb	r3, r3
 800a708:	e037      	b.n	800a77a <HAL_TIM_OC_Start_IT+0x9a>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d108      	bne.n	800a722 <HAL_TIM_OC_Start_IT+0x42>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	223f      	movs	r2, #63	@ 0x3f
 800a714:	5c9b      	ldrb	r3, [r3, r2]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	3b01      	subs	r3, #1
 800a71a:	1e5a      	subs	r2, r3, #1
 800a71c:	4193      	sbcs	r3, r2
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	e02b      	b.n	800a77a <HAL_TIM_OC_Start_IT+0x9a>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b08      	cmp	r3, #8
 800a726:	d108      	bne.n	800a73a <HAL_TIM_OC_Start_IT+0x5a>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2240      	movs	r2, #64	@ 0x40
 800a72c:	5c9b      	ldrb	r3, [r3, r2]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	3b01      	subs	r3, #1
 800a732:	1e5a      	subs	r2, r3, #1
 800a734:	4193      	sbcs	r3, r2
 800a736:	b2db      	uxtb	r3, r3
 800a738:	e01f      	b.n	800a77a <HAL_TIM_OC_Start_IT+0x9a>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b0c      	cmp	r3, #12
 800a73e:	d108      	bne.n	800a752 <HAL_TIM_OC_Start_IT+0x72>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2241      	movs	r2, #65	@ 0x41
 800a744:	5c9b      	ldrb	r3, [r3, r2]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	3b01      	subs	r3, #1
 800a74a:	1e5a      	subs	r2, r3, #1
 800a74c:	4193      	sbcs	r3, r2
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	e013      	b.n	800a77a <HAL_TIM_OC_Start_IT+0x9a>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b10      	cmp	r3, #16
 800a756:	d108      	bne.n	800a76a <HAL_TIM_OC_Start_IT+0x8a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2242      	movs	r2, #66	@ 0x42
 800a75c:	5c9b      	ldrb	r3, [r3, r2]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	1e5a      	subs	r2, r3, #1
 800a764:	4193      	sbcs	r3, r2
 800a766:	b2db      	uxtb	r3, r3
 800a768:	e007      	b.n	800a77a <HAL_TIM_OC_Start_IT+0x9a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2243      	movs	r2, #67	@ 0x43
 800a76e:	5c9b      	ldrb	r3, [r3, r2]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	3b01      	subs	r3, #1
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	4193      	sbcs	r3, r2
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e0c4      	b.n	800a90c <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d104      	bne.n	800a792 <HAL_TIM_OC_Start_IT+0xb2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	223e      	movs	r2, #62	@ 0x3e
 800a78c:	2102      	movs	r1, #2
 800a78e:	5499      	strb	r1, [r3, r2]
 800a790:	e023      	b.n	800a7da <HAL_TIM_OC_Start_IT+0xfa>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b04      	cmp	r3, #4
 800a796:	d104      	bne.n	800a7a2 <HAL_TIM_OC_Start_IT+0xc2>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	223f      	movs	r2, #63	@ 0x3f
 800a79c:	2102      	movs	r1, #2
 800a79e:	5499      	strb	r1, [r3, r2]
 800a7a0:	e01b      	b.n	800a7da <HAL_TIM_OC_Start_IT+0xfa>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d104      	bne.n	800a7b2 <HAL_TIM_OC_Start_IT+0xd2>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2240      	movs	r2, #64	@ 0x40
 800a7ac:	2102      	movs	r1, #2
 800a7ae:	5499      	strb	r1, [r3, r2]
 800a7b0:	e013      	b.n	800a7da <HAL_TIM_OC_Start_IT+0xfa>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b0c      	cmp	r3, #12
 800a7b6:	d104      	bne.n	800a7c2 <HAL_TIM_OC_Start_IT+0xe2>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2241      	movs	r2, #65	@ 0x41
 800a7bc:	2102      	movs	r1, #2
 800a7be:	5499      	strb	r1, [r3, r2]
 800a7c0:	e00b      	b.n	800a7da <HAL_TIM_OC_Start_IT+0xfa>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d104      	bne.n	800a7d2 <HAL_TIM_OC_Start_IT+0xf2>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2242      	movs	r2, #66	@ 0x42
 800a7cc:	2102      	movs	r1, #2
 800a7ce:	5499      	strb	r1, [r3, r2]
 800a7d0:	e003      	b.n	800a7da <HAL_TIM_OC_Start_IT+0xfa>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2243      	movs	r2, #67	@ 0x43
 800a7d6:	2102      	movs	r1, #2
 800a7d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b0c      	cmp	r3, #12
 800a7de:	d02a      	beq.n	800a836 <HAL_TIM_OC_Start_IT+0x156>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b0c      	cmp	r3, #12
 800a7e4:	d830      	bhi.n	800a848 <HAL_TIM_OC_Start_IT+0x168>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d01b      	beq.n	800a824 <HAL_TIM_OC_Start_IT+0x144>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	d82a      	bhi.n	800a848 <HAL_TIM_OC_Start_IT+0x168>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_TIM_OC_Start_IT+0x120>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d009      	beq.n	800a812 <HAL_TIM_OC_Start_IT+0x132>
 800a7fe:	e023      	b.n	800a848 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2102      	movs	r1, #2
 800a80c:	430a      	orrs	r2, r1
 800a80e:	60da      	str	r2, [r3, #12]
      break;
 800a810:	e01f      	b.n	800a852 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2104      	movs	r1, #4
 800a81e:	430a      	orrs	r2, r1
 800a820:	60da      	str	r2, [r3, #12]
      break;
 800a822:	e016      	b.n	800a852 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68da      	ldr	r2, [r3, #12]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2108      	movs	r1, #8
 800a830:	430a      	orrs	r2, r1
 800a832:	60da      	str	r2, [r3, #12]
      break;
 800a834:	e00d      	b.n	800a852 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2110      	movs	r1, #16
 800a842:	430a      	orrs	r2, r1
 800a844:	60da      	str	r2, [r3, #12]
      break;
 800a846:	e004      	b.n	800a852 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800a848:	230f      	movs	r3, #15
 800a84a:	18fb      	adds	r3, r7, r3
 800a84c:	2201      	movs	r2, #1
 800a84e:	701a      	strb	r2, [r3, #0]
      break;
 800a850:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a852:	230f      	movs	r3, #15
 800a854:	18fb      	adds	r3, r7, r3
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d154      	bne.n	800a906 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	2201      	movs	r2, #1
 800a864:	0018      	movs	r0, r3
 800a866:	f001 fe7f 	bl	800c568 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a29      	ldr	r2, [pc, #164]	@ (800a914 <HAL_TIM_OC_Start_IT+0x234>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d009      	beq.n	800a888 <HAL_TIM_OC_Start_IT+0x1a8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a27      	ldr	r2, [pc, #156]	@ (800a918 <HAL_TIM_OC_Start_IT+0x238>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_TIM_OC_Start_IT+0x1a8>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a26      	ldr	r2, [pc, #152]	@ (800a91c <HAL_TIM_OC_Start_IT+0x23c>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d101      	bne.n	800a88c <HAL_TIM_OC_Start_IT+0x1ac>
 800a888:	2301      	movs	r3, #1
 800a88a:	e000      	b.n	800a88e <HAL_TIM_OC_Start_IT+0x1ae>
 800a88c:	2300      	movs	r3, #0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d008      	beq.n	800a8a4 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2180      	movs	r1, #128	@ 0x80
 800a89e:	0209      	lsls	r1, r1, #8
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a914 <HAL_TIM_OC_Start_IT+0x234>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00a      	beq.n	800a8c4 <HAL_TIM_OC_Start_IT+0x1e4>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	2380      	movs	r3, #128	@ 0x80
 800a8b4:	05db      	lsls	r3, r3, #23
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d004      	beq.n	800a8c4 <HAL_TIM_OC_Start_IT+0x1e4>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a18      	ldr	r2, [pc, #96]	@ (800a920 <HAL_TIM_OC_Start_IT+0x240>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d116      	bne.n	800a8f2 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	4a16      	ldr	r2, [pc, #88]	@ (800a924 <HAL_TIM_OC_Start_IT+0x244>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b06      	cmp	r3, #6
 800a8d4:	d016      	beq.n	800a904 <HAL_TIM_OC_Start_IT+0x224>
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	2380      	movs	r3, #128	@ 0x80
 800a8da:	025b      	lsls	r3, r3, #9
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d011      	beq.n	800a904 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f0:	e008      	b.n	800a904 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	430a      	orrs	r2, r1
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	e000      	b.n	800a906 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a904:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a906:	230f      	movs	r3, #15
 800a908:	18fb      	adds	r3, r7, r3
 800a90a:	781b      	ldrb	r3, [r3, #0]
}
 800a90c:	0018      	movs	r0, r3
 800a90e:	46bd      	mov	sp, r7
 800a910:	b004      	add	sp, #16
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40012c00 	.word	0x40012c00
 800a918:	40014400 	.word	0x40014400
 800a91c:	40014800 	.word	0x40014800
 800a920:	40000400 	.word	0x40000400
 800a924:	00010007 	.word	0x00010007

0800a928 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a932:	230f      	movs	r3, #15
 800a934:	18fb      	adds	r3, r7, r3
 800a936:	2200      	movs	r2, #0
 800a938:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b0c      	cmp	r3, #12
 800a93e:	d02a      	beq.n	800a996 <HAL_TIM_OC_Stop_IT+0x6e>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b0c      	cmp	r3, #12
 800a944:	d830      	bhi.n	800a9a8 <HAL_TIM_OC_Stop_IT+0x80>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b08      	cmp	r3, #8
 800a94a:	d01b      	beq.n	800a984 <HAL_TIM_OC_Stop_IT+0x5c>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b08      	cmp	r3, #8
 800a950:	d82a      	bhi.n	800a9a8 <HAL_TIM_OC_Stop_IT+0x80>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <HAL_TIM_OC_Stop_IT+0x38>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d009      	beq.n	800a972 <HAL_TIM_OC_Stop_IT+0x4a>
 800a95e:	e023      	b.n	800a9a8 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2102      	movs	r1, #2
 800a96c:	438a      	bics	r2, r1
 800a96e:	60da      	str	r2, [r3, #12]
      break;
 800a970:	e01f      	b.n	800a9b2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68da      	ldr	r2, [r3, #12]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2104      	movs	r1, #4
 800a97e:	438a      	bics	r2, r1
 800a980:	60da      	str	r2, [r3, #12]
      break;
 800a982:	e016      	b.n	800a9b2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68da      	ldr	r2, [r3, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2108      	movs	r1, #8
 800a990:	438a      	bics	r2, r1
 800a992:	60da      	str	r2, [r3, #12]
      break;
 800a994:	e00d      	b.n	800a9b2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2110      	movs	r1, #16
 800a9a2:	438a      	bics	r2, r1
 800a9a4:	60da      	str	r2, [r3, #12]
      break;
 800a9a6:	e004      	b.n	800a9b2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800a9a8:	230f      	movs	r3, #15
 800a9aa:	18fb      	adds	r3, r7, r3
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	701a      	strb	r2, [r3, #0]
      break;
 800a9b0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a9b2:	230f      	movs	r3, #15
 800a9b4:	18fb      	adds	r3, r7, r3
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d000      	beq.n	800a9be <HAL_TIM_OC_Stop_IT+0x96>
 800a9bc:	e06e      	b.n	800aa9c <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f001 fdce 	bl	800c568 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a36      	ldr	r2, [pc, #216]	@ (800aaac <HAL_TIM_OC_Stop_IT+0x184>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d009      	beq.n	800a9ea <HAL_TIM_OC_Stop_IT+0xc2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a35      	ldr	r2, [pc, #212]	@ (800aab0 <HAL_TIM_OC_Stop_IT+0x188>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d004      	beq.n	800a9ea <HAL_TIM_OC_Stop_IT+0xc2>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a33      	ldr	r2, [pc, #204]	@ (800aab4 <HAL_TIM_OC_Stop_IT+0x18c>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d101      	bne.n	800a9ee <HAL_TIM_OC_Stop_IT+0xc6>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <HAL_TIM_OC_Stop_IT+0xc8>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d013      	beq.n	800aa1c <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	4a2f      	ldr	r2, [pc, #188]	@ (800aab8 <HAL_TIM_OC_Stop_IT+0x190>)
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	d10d      	bne.n	800aa1c <HAL_TIM_OC_Stop_IT+0xf4>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	4a2d      	ldr	r2, [pc, #180]	@ (800aabc <HAL_TIM_OC_Stop_IT+0x194>)
 800aa08:	4013      	ands	r3, r2
 800aa0a:	d107      	bne.n	800aa1c <HAL_TIM_OC_Stop_IT+0xf4>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	492a      	ldr	r1, [pc, #168]	@ (800aac0 <HAL_TIM_OC_Stop_IT+0x198>)
 800aa18:	400a      	ands	r2, r1
 800aa1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	4a25      	ldr	r2, [pc, #148]	@ (800aab8 <HAL_TIM_OC_Stop_IT+0x190>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	d10d      	bne.n	800aa44 <HAL_TIM_OC_Stop_IT+0x11c>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	4a23      	ldr	r2, [pc, #140]	@ (800aabc <HAL_TIM_OC_Stop_IT+0x194>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	d107      	bne.n	800aa44 <HAL_TIM_OC_Stop_IT+0x11c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2101      	movs	r1, #1
 800aa40:	438a      	bics	r2, r1
 800aa42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d104      	bne.n	800aa54 <HAL_TIM_OC_Stop_IT+0x12c>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	223e      	movs	r2, #62	@ 0x3e
 800aa4e:	2101      	movs	r1, #1
 800aa50:	5499      	strb	r1, [r3, r2]
 800aa52:	e023      	b.n	800aa9c <HAL_TIM_OC_Stop_IT+0x174>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d104      	bne.n	800aa64 <HAL_TIM_OC_Stop_IT+0x13c>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	223f      	movs	r2, #63	@ 0x3f
 800aa5e:	2101      	movs	r1, #1
 800aa60:	5499      	strb	r1, [r3, r2]
 800aa62:	e01b      	b.n	800aa9c <HAL_TIM_OC_Stop_IT+0x174>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b08      	cmp	r3, #8
 800aa68:	d104      	bne.n	800aa74 <HAL_TIM_OC_Stop_IT+0x14c>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2240      	movs	r2, #64	@ 0x40
 800aa6e:	2101      	movs	r1, #1
 800aa70:	5499      	strb	r1, [r3, r2]
 800aa72:	e013      	b.n	800aa9c <HAL_TIM_OC_Stop_IT+0x174>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b0c      	cmp	r3, #12
 800aa78:	d104      	bne.n	800aa84 <HAL_TIM_OC_Stop_IT+0x15c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2241      	movs	r2, #65	@ 0x41
 800aa7e:	2101      	movs	r1, #1
 800aa80:	5499      	strb	r1, [r3, r2]
 800aa82:	e00b      	b.n	800aa9c <HAL_TIM_OC_Stop_IT+0x174>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b10      	cmp	r3, #16
 800aa88:	d104      	bne.n	800aa94 <HAL_TIM_OC_Stop_IT+0x16c>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2242      	movs	r2, #66	@ 0x42
 800aa8e:	2101      	movs	r1, #1
 800aa90:	5499      	strb	r1, [r3, r2]
 800aa92:	e003      	b.n	800aa9c <HAL_TIM_OC_Stop_IT+0x174>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2243      	movs	r2, #67	@ 0x43
 800aa98:	2101      	movs	r1, #1
 800aa9a:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800aa9c:	230f      	movs	r3, #15
 800aa9e:	18fb      	adds	r3, r7, r3
 800aaa0:	781b      	ldrb	r3, [r3, #0]
}
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	b004      	add	sp, #16
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	46c0      	nop			@ (mov r8, r8)
 800aaac:	40012c00 	.word	0x40012c00
 800aab0:	40014400 	.word	0x40014400
 800aab4:	40014800 	.word	0x40014800
 800aab8:	00001111 	.word	0x00001111
 800aabc:	00000444 	.word	0x00000444
 800aac0:	ffff7fff 	.word	0xffff7fff

0800aac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e056      	b.n	800ab84 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	223d      	movs	r2, #61	@ 0x3d
 800aada:	5c9b      	ldrb	r3, [r3, r2]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d113      	bne.n	800ab0a <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	223c      	movs	r2, #60	@ 0x3c
 800aae6:	2100      	movs	r1, #0
 800aae8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	0018      	movs	r0, r3
 800aaee:	f001 fd5f 	bl	800c5b0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d102      	bne.n	800ab00 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a23      	ldr	r2, [pc, #140]	@ (800ab8c <HAL_TIM_PWM_Init+0xc8>)
 800aafe:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	0010      	movs	r0, r2
 800ab08:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	223d      	movs	r2, #61	@ 0x3d
 800ab0e:	2102      	movs	r1, #2
 800ab10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	0019      	movs	r1, r3
 800ab1c:	0010      	movs	r0, r2
 800ab1e:	f001 f849 	bl	800bbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2248      	movs	r2, #72	@ 0x48
 800ab26:	2101      	movs	r1, #1
 800ab28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	223e      	movs	r2, #62	@ 0x3e
 800ab2e:	2101      	movs	r1, #1
 800ab30:	5499      	strb	r1, [r3, r2]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	223f      	movs	r2, #63	@ 0x3f
 800ab36:	2101      	movs	r1, #1
 800ab38:	5499      	strb	r1, [r3, r2]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2240      	movs	r2, #64	@ 0x40
 800ab3e:	2101      	movs	r1, #1
 800ab40:	5499      	strb	r1, [r3, r2]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2241      	movs	r2, #65	@ 0x41
 800ab46:	2101      	movs	r1, #1
 800ab48:	5499      	strb	r1, [r3, r2]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2242      	movs	r2, #66	@ 0x42
 800ab4e:	2101      	movs	r1, #1
 800ab50:	5499      	strb	r1, [r3, r2]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2243      	movs	r2, #67	@ 0x43
 800ab56:	2101      	movs	r1, #1
 800ab58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2244      	movs	r2, #68	@ 0x44
 800ab5e:	2101      	movs	r1, #1
 800ab60:	5499      	strb	r1, [r3, r2]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2245      	movs	r2, #69	@ 0x45
 800ab66:	2101      	movs	r1, #1
 800ab68:	5499      	strb	r1, [r3, r2]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2246      	movs	r2, #70	@ 0x46
 800ab6e:	2101      	movs	r1, #1
 800ab70:	5499      	strb	r1, [r3, r2]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2247      	movs	r2, #71	@ 0x47
 800ab76:	2101      	movs	r1, #1
 800ab78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	223d      	movs	r2, #61	@ 0x3d
 800ab7e:	2101      	movs	r1, #1
 800ab80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	0018      	movs	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	b002      	add	sp, #8
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	0800ab91 	.word	0x0800ab91

0800ab90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab98:	46c0      	nop			@ (mov r8, r8)
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b002      	add	sp, #8
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d108      	bne.n	800abc2 <HAL_TIM_PWM_Start+0x22>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	223e      	movs	r2, #62	@ 0x3e
 800abb4:	5c9b      	ldrb	r3, [r3, r2]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	1e5a      	subs	r2, r3, #1
 800abbc:	4193      	sbcs	r3, r2
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	e037      	b.n	800ac32 <HAL_TIM_PWM_Start+0x92>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d108      	bne.n	800abda <HAL_TIM_PWM_Start+0x3a>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	223f      	movs	r2, #63	@ 0x3f
 800abcc:	5c9b      	ldrb	r3, [r3, r2]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	3b01      	subs	r3, #1
 800abd2:	1e5a      	subs	r2, r3, #1
 800abd4:	4193      	sbcs	r3, r2
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	e02b      	b.n	800ac32 <HAL_TIM_PWM_Start+0x92>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b08      	cmp	r3, #8
 800abde:	d108      	bne.n	800abf2 <HAL_TIM_PWM_Start+0x52>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2240      	movs	r2, #64	@ 0x40
 800abe4:	5c9b      	ldrb	r3, [r3, r2]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	3b01      	subs	r3, #1
 800abea:	1e5a      	subs	r2, r3, #1
 800abec:	4193      	sbcs	r3, r2
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	e01f      	b.n	800ac32 <HAL_TIM_PWM_Start+0x92>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b0c      	cmp	r3, #12
 800abf6:	d108      	bne.n	800ac0a <HAL_TIM_PWM_Start+0x6a>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2241      	movs	r2, #65	@ 0x41
 800abfc:	5c9b      	ldrb	r3, [r3, r2]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	3b01      	subs	r3, #1
 800ac02:	1e5a      	subs	r2, r3, #1
 800ac04:	4193      	sbcs	r3, r2
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	e013      	b.n	800ac32 <HAL_TIM_PWM_Start+0x92>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d108      	bne.n	800ac22 <HAL_TIM_PWM_Start+0x82>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2242      	movs	r2, #66	@ 0x42
 800ac14:	5c9b      	ldrb	r3, [r3, r2]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	1e5a      	subs	r2, r3, #1
 800ac1c:	4193      	sbcs	r3, r2
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	e007      	b.n	800ac32 <HAL_TIM_PWM_Start+0x92>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2243      	movs	r2, #67	@ 0x43
 800ac26:	5c9b      	ldrb	r3, [r3, r2]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	1e5a      	subs	r2, r3, #1
 800ac2e:	4193      	sbcs	r3, r2
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e081      	b.n	800ad3e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <HAL_TIM_PWM_Start+0xaa>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	223e      	movs	r2, #62	@ 0x3e
 800ac44:	2102      	movs	r1, #2
 800ac46:	5499      	strb	r1, [r3, r2]
 800ac48:	e023      	b.n	800ac92 <HAL_TIM_PWM_Start+0xf2>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d104      	bne.n	800ac5a <HAL_TIM_PWM_Start+0xba>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	223f      	movs	r2, #63	@ 0x3f
 800ac54:	2102      	movs	r1, #2
 800ac56:	5499      	strb	r1, [r3, r2]
 800ac58:	e01b      	b.n	800ac92 <HAL_TIM_PWM_Start+0xf2>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d104      	bne.n	800ac6a <HAL_TIM_PWM_Start+0xca>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2240      	movs	r2, #64	@ 0x40
 800ac64:	2102      	movs	r1, #2
 800ac66:	5499      	strb	r1, [r3, r2]
 800ac68:	e013      	b.n	800ac92 <HAL_TIM_PWM_Start+0xf2>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b0c      	cmp	r3, #12
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIM_PWM_Start+0xda>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2241      	movs	r2, #65	@ 0x41
 800ac74:	2102      	movs	r1, #2
 800ac76:	5499      	strb	r1, [r3, r2]
 800ac78:	e00b      	b.n	800ac92 <HAL_TIM_PWM_Start+0xf2>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIM_PWM_Start+0xea>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2242      	movs	r2, #66	@ 0x42
 800ac84:	2102      	movs	r1, #2
 800ac86:	5499      	strb	r1, [r3, r2]
 800ac88:	e003      	b.n	800ac92 <HAL_TIM_PWM_Start+0xf2>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2243      	movs	r2, #67	@ 0x43
 800ac8e:	2102      	movs	r1, #2
 800ac90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f001 fc64 	bl	800c568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a28      	ldr	r2, [pc, #160]	@ (800ad48 <HAL_TIM_PWM_Start+0x1a8>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d009      	beq.n	800acbe <HAL_TIM_PWM_Start+0x11e>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a27      	ldr	r2, [pc, #156]	@ (800ad4c <HAL_TIM_PWM_Start+0x1ac>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d004      	beq.n	800acbe <HAL_TIM_PWM_Start+0x11e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a25      	ldr	r2, [pc, #148]	@ (800ad50 <HAL_TIM_PWM_Start+0x1b0>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d101      	bne.n	800acc2 <HAL_TIM_PWM_Start+0x122>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e000      	b.n	800acc4 <HAL_TIM_PWM_Start+0x124>
 800acc2:	2300      	movs	r3, #0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d008      	beq.n	800acda <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2180      	movs	r1, #128	@ 0x80
 800acd4:	0209      	lsls	r1, r1, #8
 800acd6:	430a      	orrs	r2, r1
 800acd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a1a      	ldr	r2, [pc, #104]	@ (800ad48 <HAL_TIM_PWM_Start+0x1a8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00a      	beq.n	800acfa <HAL_TIM_PWM_Start+0x15a>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	2380      	movs	r3, #128	@ 0x80
 800acea:	05db      	lsls	r3, r3, #23
 800acec:	429a      	cmp	r2, r3
 800acee:	d004      	beq.n	800acfa <HAL_TIM_PWM_Start+0x15a>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a17      	ldr	r2, [pc, #92]	@ (800ad54 <HAL_TIM_PWM_Start+0x1b4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d116      	bne.n	800ad28 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	4a15      	ldr	r2, [pc, #84]	@ (800ad58 <HAL_TIM_PWM_Start+0x1b8>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b06      	cmp	r3, #6
 800ad0a:	d016      	beq.n	800ad3a <HAL_TIM_PWM_Start+0x19a>
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	2380      	movs	r3, #128	@ 0x80
 800ad10:	025b      	lsls	r3, r3, #9
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d011      	beq.n	800ad3a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2101      	movs	r1, #1
 800ad22:	430a      	orrs	r2, r1
 800ad24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad26:	e008      	b.n	800ad3a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2101      	movs	r1, #1
 800ad34:	430a      	orrs	r2, r1
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e000      	b.n	800ad3c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad3a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	0018      	movs	r0, r3
 800ad40:	46bd      	mov	sp, r7
 800ad42:	b004      	add	sp, #16
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	46c0      	nop			@ (mov r8, r8)
 800ad48:	40012c00 	.word	0x40012c00
 800ad4c:	40014400 	.word	0x40014400
 800ad50:	40014800 	.word	0x40014800
 800ad54:	40000400 	.word	0x40000400
 800ad58:	00010007 	.word	0x00010007

0800ad5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e056      	b.n	800ae1c <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	223d      	movs	r2, #61	@ 0x3d
 800ad72:	5c9b      	ldrb	r3, [r3, r2]
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d113      	bne.n	800ada2 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	223c      	movs	r2, #60	@ 0x3c
 800ad7e:	2100      	movs	r1, #0
 800ad80:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	0018      	movs	r0, r3
 800ad86:	f001 fc13 	bl	800c5b0 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a23      	ldr	r2, [pc, #140]	@ (800ae24 <HAL_TIM_IC_Init+0xc8>)
 800ad96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	0010      	movs	r0, r2
 800ada0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	223d      	movs	r2, #61	@ 0x3d
 800ada6:	2102      	movs	r1, #2
 800ada8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3304      	adds	r3, #4
 800adb2:	0019      	movs	r1, r3
 800adb4:	0010      	movs	r0, r2
 800adb6:	f000 fefd 	bl	800bbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2248      	movs	r2, #72	@ 0x48
 800adbe:	2101      	movs	r1, #1
 800adc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	223e      	movs	r2, #62	@ 0x3e
 800adc6:	2101      	movs	r1, #1
 800adc8:	5499      	strb	r1, [r3, r2]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	223f      	movs	r2, #63	@ 0x3f
 800adce:	2101      	movs	r1, #1
 800add0:	5499      	strb	r1, [r3, r2]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2240      	movs	r2, #64	@ 0x40
 800add6:	2101      	movs	r1, #1
 800add8:	5499      	strb	r1, [r3, r2]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2241      	movs	r2, #65	@ 0x41
 800adde:	2101      	movs	r1, #1
 800ade0:	5499      	strb	r1, [r3, r2]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2242      	movs	r2, #66	@ 0x42
 800ade6:	2101      	movs	r1, #1
 800ade8:	5499      	strb	r1, [r3, r2]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2243      	movs	r2, #67	@ 0x43
 800adee:	2101      	movs	r1, #1
 800adf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2244      	movs	r2, #68	@ 0x44
 800adf6:	2101      	movs	r1, #1
 800adf8:	5499      	strb	r1, [r3, r2]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2245      	movs	r2, #69	@ 0x45
 800adfe:	2101      	movs	r1, #1
 800ae00:	5499      	strb	r1, [r3, r2]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2246      	movs	r2, #70	@ 0x46
 800ae06:	2101      	movs	r1, #1
 800ae08:	5499      	strb	r1, [r3, r2]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2247      	movs	r2, #71	@ 0x47
 800ae0e:	2101      	movs	r1, #1
 800ae10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	223d      	movs	r2, #61	@ 0x3d
 800ae16:	2101      	movs	r1, #1
 800ae18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	b002      	add	sp, #8
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	0800ae29 	.word	0x0800ae29

0800ae28 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ae30:	46c0      	nop			@ (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	b002      	add	sp, #8
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae42:	230f      	movs	r3, #15
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	2200      	movs	r2, #0
 800ae48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <HAL_TIM_IC_Start_IT+0x22>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	223e      	movs	r2, #62	@ 0x3e
 800ae54:	5c9b      	ldrb	r3, [r3, r2]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	e023      	b.n	800aea2 <HAL_TIM_IC_Start_IT+0x6a>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d104      	bne.n	800ae6a <HAL_TIM_IC_Start_IT+0x32>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	223f      	movs	r2, #63	@ 0x3f
 800ae64:	5c9b      	ldrb	r3, [r3, r2]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	e01b      	b.n	800aea2 <HAL_TIM_IC_Start_IT+0x6a>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d104      	bne.n	800ae7a <HAL_TIM_IC_Start_IT+0x42>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2240      	movs	r2, #64	@ 0x40
 800ae74:	5c9b      	ldrb	r3, [r3, r2]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	e013      	b.n	800aea2 <HAL_TIM_IC_Start_IT+0x6a>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b0c      	cmp	r3, #12
 800ae7e:	d104      	bne.n	800ae8a <HAL_TIM_IC_Start_IT+0x52>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2241      	movs	r2, #65	@ 0x41
 800ae84:	5c9b      	ldrb	r3, [r3, r2]
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	e00b      	b.n	800aea2 <HAL_TIM_IC_Start_IT+0x6a>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b10      	cmp	r3, #16
 800ae8e:	d104      	bne.n	800ae9a <HAL_TIM_IC_Start_IT+0x62>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2242      	movs	r2, #66	@ 0x42
 800ae94:	5c9b      	ldrb	r3, [r3, r2]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	e003      	b.n	800aea2 <HAL_TIM_IC_Start_IT+0x6a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2243      	movs	r2, #67	@ 0x43
 800ae9e:	5c9b      	ldrb	r3, [r3, r2]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	220e      	movs	r2, #14
 800aea4:	18ba      	adds	r2, r7, r2
 800aea6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <HAL_TIM_IC_Start_IT+0x80>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2244      	movs	r2, #68	@ 0x44
 800aeb2:	5c9b      	ldrb	r3, [r3, r2]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	e013      	b.n	800aee0 <HAL_TIM_IC_Start_IT+0xa8>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	d104      	bne.n	800aec8 <HAL_TIM_IC_Start_IT+0x90>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2245      	movs	r2, #69	@ 0x45
 800aec2:	5c9b      	ldrb	r3, [r3, r2]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	e00b      	b.n	800aee0 <HAL_TIM_IC_Start_IT+0xa8>
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	d104      	bne.n	800aed8 <HAL_TIM_IC_Start_IT+0xa0>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2246      	movs	r2, #70	@ 0x46
 800aed2:	5c9b      	ldrb	r3, [r3, r2]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	e003      	b.n	800aee0 <HAL_TIM_IC_Start_IT+0xa8>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2247      	movs	r2, #71	@ 0x47
 800aedc:	5c9b      	ldrb	r3, [r3, r2]
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	210d      	movs	r1, #13
 800aee2:	187a      	adds	r2, r7, r1
 800aee4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800aee6:	230e      	movs	r3, #14
 800aee8:	18fb      	adds	r3, r7, r3
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d103      	bne.n	800aef8 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800aef0:	187b      	adds	r3, r7, r1
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d001      	beq.n	800aefc <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e0c3      	b.n	800b084 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <HAL_TIM_IC_Start_IT+0xd4>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	223e      	movs	r2, #62	@ 0x3e
 800af06:	2102      	movs	r1, #2
 800af08:	5499      	strb	r1, [r3, r2]
 800af0a:	e023      	b.n	800af54 <HAL_TIM_IC_Start_IT+0x11c>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d104      	bne.n	800af1c <HAL_TIM_IC_Start_IT+0xe4>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	223f      	movs	r2, #63	@ 0x3f
 800af16:	2102      	movs	r1, #2
 800af18:	5499      	strb	r1, [r3, r2]
 800af1a:	e01b      	b.n	800af54 <HAL_TIM_IC_Start_IT+0x11c>
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b08      	cmp	r3, #8
 800af20:	d104      	bne.n	800af2c <HAL_TIM_IC_Start_IT+0xf4>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2240      	movs	r2, #64	@ 0x40
 800af26:	2102      	movs	r1, #2
 800af28:	5499      	strb	r1, [r3, r2]
 800af2a:	e013      	b.n	800af54 <HAL_TIM_IC_Start_IT+0x11c>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b0c      	cmp	r3, #12
 800af30:	d104      	bne.n	800af3c <HAL_TIM_IC_Start_IT+0x104>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2241      	movs	r2, #65	@ 0x41
 800af36:	2102      	movs	r1, #2
 800af38:	5499      	strb	r1, [r3, r2]
 800af3a:	e00b      	b.n	800af54 <HAL_TIM_IC_Start_IT+0x11c>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d104      	bne.n	800af4c <HAL_TIM_IC_Start_IT+0x114>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2242      	movs	r2, #66	@ 0x42
 800af46:	2102      	movs	r1, #2
 800af48:	5499      	strb	r1, [r3, r2]
 800af4a:	e003      	b.n	800af54 <HAL_TIM_IC_Start_IT+0x11c>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2243      	movs	r2, #67	@ 0x43
 800af50:	2102      	movs	r1, #2
 800af52:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d104      	bne.n	800af64 <HAL_TIM_IC_Start_IT+0x12c>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2244      	movs	r2, #68	@ 0x44
 800af5e:	2102      	movs	r1, #2
 800af60:	5499      	strb	r1, [r3, r2]
 800af62:	e013      	b.n	800af8c <HAL_TIM_IC_Start_IT+0x154>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b04      	cmp	r3, #4
 800af68:	d104      	bne.n	800af74 <HAL_TIM_IC_Start_IT+0x13c>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2245      	movs	r2, #69	@ 0x45
 800af6e:	2102      	movs	r1, #2
 800af70:	5499      	strb	r1, [r3, r2]
 800af72:	e00b      	b.n	800af8c <HAL_TIM_IC_Start_IT+0x154>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b08      	cmp	r3, #8
 800af78:	d104      	bne.n	800af84 <HAL_TIM_IC_Start_IT+0x14c>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2246      	movs	r2, #70	@ 0x46
 800af7e:	2102      	movs	r1, #2
 800af80:	5499      	strb	r1, [r3, r2]
 800af82:	e003      	b.n	800af8c <HAL_TIM_IC_Start_IT+0x154>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2247      	movs	r2, #71	@ 0x47
 800af88:	2102      	movs	r1, #2
 800af8a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b0c      	cmp	r3, #12
 800af90:	d02a      	beq.n	800afe8 <HAL_TIM_IC_Start_IT+0x1b0>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b0c      	cmp	r3, #12
 800af96:	d830      	bhi.n	800affa <HAL_TIM_IC_Start_IT+0x1c2>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d01b      	beq.n	800afd6 <HAL_TIM_IC_Start_IT+0x19e>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d82a      	bhi.n	800affa <HAL_TIM_IC_Start_IT+0x1c2>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <HAL_TIM_IC_Start_IT+0x17a>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b04      	cmp	r3, #4
 800afae:	d009      	beq.n	800afc4 <HAL_TIM_IC_Start_IT+0x18c>
 800afb0:	e023      	b.n	800affa <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2102      	movs	r1, #2
 800afbe:	430a      	orrs	r2, r1
 800afc0:	60da      	str	r2, [r3, #12]
      break;
 800afc2:	e01f      	b.n	800b004 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68da      	ldr	r2, [r3, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2104      	movs	r1, #4
 800afd0:	430a      	orrs	r2, r1
 800afd2:	60da      	str	r2, [r3, #12]
      break;
 800afd4:	e016      	b.n	800b004 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2108      	movs	r1, #8
 800afe2:	430a      	orrs	r2, r1
 800afe4:	60da      	str	r2, [r3, #12]
      break;
 800afe6:	e00d      	b.n	800b004 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2110      	movs	r1, #16
 800aff4:	430a      	orrs	r2, r1
 800aff6:	60da      	str	r2, [r3, #12]
      break;
 800aff8:	e004      	b.n	800b004 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800affa:	230f      	movs	r3, #15
 800affc:	18fb      	adds	r3, r7, r3
 800affe:	2201      	movs	r2, #1
 800b000:	701a      	strb	r2, [r3, #0]
      break;
 800b002:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800b004:	230f      	movs	r3, #15
 800b006:	18fb      	adds	r3, r7, r3
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d137      	bne.n	800b07e <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	2201      	movs	r2, #1
 800b016:	0018      	movs	r0, r3
 800b018:	f001 faa6 	bl	800c568 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1a      	ldr	r2, [pc, #104]	@ (800b08c <HAL_TIM_IC_Start_IT+0x254>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00a      	beq.n	800b03c <HAL_TIM_IC_Start_IT+0x204>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	2380      	movs	r3, #128	@ 0x80
 800b02c:	05db      	lsls	r3, r3, #23
 800b02e:	429a      	cmp	r2, r3
 800b030:	d004      	beq.n	800b03c <HAL_TIM_IC_Start_IT+0x204>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a16      	ldr	r2, [pc, #88]	@ (800b090 <HAL_TIM_IC_Start_IT+0x258>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d116      	bne.n	800b06a <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	4a14      	ldr	r2, [pc, #80]	@ (800b094 <HAL_TIM_IC_Start_IT+0x25c>)
 800b044:	4013      	ands	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b06      	cmp	r3, #6
 800b04c:	d016      	beq.n	800b07c <HAL_TIM_IC_Start_IT+0x244>
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	2380      	movs	r3, #128	@ 0x80
 800b052:	025b      	lsls	r3, r3, #9
 800b054:	429a      	cmp	r2, r3
 800b056:	d011      	beq.n	800b07c <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2101      	movs	r1, #1
 800b064:	430a      	orrs	r2, r1
 800b066:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b068:	e008      	b.n	800b07c <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2101      	movs	r1, #1
 800b076:	430a      	orrs	r2, r1
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	e000      	b.n	800b07e <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800b07e:	230f      	movs	r3, #15
 800b080:	18fb      	adds	r3, r7, r3
 800b082:	781b      	ldrb	r3, [r3, #0]
}
 800b084:	0018      	movs	r0, r3
 800b086:	46bd      	mov	sp, r7
 800b088:	b004      	add	sp, #16
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40000400 	.word	0x40000400
 800b094:	00010007 	.word	0x00010007

0800b098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	d027      	beq.n	800b108 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	4013      	ands	r3, r2
 800b0be:	d023      	beq.n	800b108 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2203      	movs	r2, #3
 800b0c6:	4252      	negs	r2, r2
 800b0c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	2203      	movs	r2, #3
 800b0d8:	4013      	ands	r3, r2
 800b0da:	d006      	beq.n	800b0ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2294      	movs	r2, #148	@ 0x94
 800b0e0:	589b      	ldr	r3, [r3, r2]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	0010      	movs	r0, r2
 800b0e6:	4798      	blx	r3
 800b0e8:	e00b      	b.n	800b102 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	229c      	movs	r2, #156	@ 0x9c
 800b0ee:	589b      	ldr	r3, [r3, r2]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	0010      	movs	r0, r2
 800b0f4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	22a0      	movs	r2, #160	@ 0xa0
 800b0fa:	589b      	ldr	r3, [r3, r2]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	0010      	movs	r0, r2
 800b100:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2204      	movs	r2, #4
 800b10c:	4013      	ands	r3, r2
 800b10e:	d028      	beq.n	800b162 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2204      	movs	r2, #4
 800b114:	4013      	ands	r3, r2
 800b116:	d024      	beq.n	800b162 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2205      	movs	r2, #5
 800b11e:	4252      	negs	r2, r2
 800b120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	23c0      	movs	r3, #192	@ 0xc0
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4013      	ands	r3, r2
 800b134:	d006      	beq.n	800b144 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2294      	movs	r2, #148	@ 0x94
 800b13a:	589b      	ldr	r3, [r3, r2]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	0010      	movs	r0, r2
 800b140:	4798      	blx	r3
 800b142:	e00b      	b.n	800b15c <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	229c      	movs	r2, #156	@ 0x9c
 800b148:	589b      	ldr	r3, [r3, r2]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	0010      	movs	r0, r2
 800b14e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	22a0      	movs	r2, #160	@ 0xa0
 800b154:	589b      	ldr	r3, [r3, r2]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	0010      	movs	r0, r2
 800b15a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2208      	movs	r2, #8
 800b166:	4013      	ands	r3, r2
 800b168:	d027      	beq.n	800b1ba <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2208      	movs	r2, #8
 800b16e:	4013      	ands	r3, r2
 800b170:	d023      	beq.n	800b1ba <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2209      	movs	r2, #9
 800b178:	4252      	negs	r2, r2
 800b17a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2204      	movs	r2, #4
 800b180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	2203      	movs	r2, #3
 800b18a:	4013      	ands	r3, r2
 800b18c:	d006      	beq.n	800b19c <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2294      	movs	r2, #148	@ 0x94
 800b192:	589b      	ldr	r3, [r3, r2]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	0010      	movs	r0, r2
 800b198:	4798      	blx	r3
 800b19a:	e00b      	b.n	800b1b4 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	229c      	movs	r2, #156	@ 0x9c
 800b1a0:	589b      	ldr	r3, [r3, r2]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	0010      	movs	r0, r2
 800b1a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	22a0      	movs	r2, #160	@ 0xa0
 800b1ac:	589b      	ldr	r3, [r3, r2]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	0010      	movs	r0, r2
 800b1b2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2210      	movs	r2, #16
 800b1be:	4013      	ands	r3, r2
 800b1c0:	d028      	beq.n	800b214 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2210      	movs	r2, #16
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	d024      	beq.n	800b214 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2211      	movs	r2, #17
 800b1d0:	4252      	negs	r2, r2
 800b1d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2208      	movs	r2, #8
 800b1d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69da      	ldr	r2, [r3, #28]
 800b1e0:	23c0      	movs	r3, #192	@ 0xc0
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	d006      	beq.n	800b1f6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2294      	movs	r2, #148	@ 0x94
 800b1ec:	589b      	ldr	r3, [r3, r2]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	0010      	movs	r0, r2
 800b1f2:	4798      	blx	r3
 800b1f4:	e00b      	b.n	800b20e <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	229c      	movs	r2, #156	@ 0x9c
 800b1fa:	589b      	ldr	r3, [r3, r2]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	0010      	movs	r0, r2
 800b200:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	22a0      	movs	r2, #160	@ 0xa0
 800b206:	589b      	ldr	r3, [r3, r2]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	0010      	movs	r0, r2
 800b20c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2201      	movs	r2, #1
 800b218:	4013      	ands	r3, r2
 800b21a:	d00e      	beq.n	800b23a <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2201      	movs	r2, #1
 800b220:	4013      	ands	r3, r2
 800b222:	d00a      	beq.n	800b23a <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2202      	movs	r2, #2
 800b22a:	4252      	negs	r2, r2
 800b22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2284      	movs	r2, #132	@ 0x84
 800b232:	589b      	ldr	r3, [r3, r2]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	0010      	movs	r0, r2
 800b238:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2280      	movs	r2, #128	@ 0x80
 800b23e:	4013      	ands	r3, r2
 800b240:	d104      	bne.n	800b24c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	2380      	movs	r3, #128	@ 0x80
 800b246:	019b      	lsls	r3, r3, #6
 800b248:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b24a:	d00d      	beq.n	800b268 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2280      	movs	r2, #128	@ 0x80
 800b250:	4013      	ands	r3, r2
 800b252:	d009      	beq.n	800b268 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a22      	ldr	r2, [pc, #136]	@ (800b2e4 <HAL_TIM_IRQHandler+0x24c>)
 800b25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	22b4      	movs	r2, #180	@ 0xb4
 800b260:	589b      	ldr	r3, [r3, r2]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	0010      	movs	r0, r2
 800b266:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	2380      	movs	r3, #128	@ 0x80
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	4013      	ands	r3, r2
 800b270:	d00d      	beq.n	800b28e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2280      	movs	r2, #128	@ 0x80
 800b276:	4013      	ands	r3, r2
 800b278:	d009      	beq.n	800b28e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2e8 <HAL_TIM_IRQHandler+0x250>)
 800b280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	22b8      	movs	r2, #184	@ 0xb8
 800b286:	589b      	ldr	r3, [r3, r2]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	0010      	movs	r0, r2
 800b28c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2240      	movs	r2, #64	@ 0x40
 800b292:	4013      	ands	r3, r2
 800b294:	d00e      	beq.n	800b2b4 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2240      	movs	r2, #64	@ 0x40
 800b29a:	4013      	ands	r3, r2
 800b29c:	d00a      	beq.n	800b2b4 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2241      	movs	r2, #65	@ 0x41
 800b2a4:	4252      	negs	r2, r2
 800b2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	228c      	movs	r2, #140	@ 0x8c
 800b2ac:	589b      	ldr	r3, [r3, r2]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	0010      	movs	r0, r2
 800b2b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	d00e      	beq.n	800b2da <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	d00a      	beq.n	800b2da <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2221      	movs	r2, #33	@ 0x21
 800b2ca:	4252      	negs	r2, r2
 800b2cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	22ac      	movs	r2, #172	@ 0xac
 800b2d2:	589b      	ldr	r3, [r3, r2]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	0010      	movs	r0, r2
 800b2d8:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2da:	46c0      	nop			@ (mov r8, r8)
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	b004      	add	sp, #16
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	46c0      	nop			@ (mov r8, r8)
 800b2e4:	ffffdf7f 	.word	0xffffdf7f
 800b2e8:	fffffeff 	.word	0xfffffeff

0800b2ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f8:	2317      	movs	r3, #23
 800b2fa:	18fb      	adds	r3, r7, r3
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	223c      	movs	r2, #60	@ 0x3c
 800b304:	5c9b      	ldrb	r3, [r3, r2]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d101      	bne.n	800b30e <HAL_TIM_OC_ConfigChannel+0x22>
 800b30a:	2302      	movs	r3, #2
 800b30c:	e048      	b.n	800b3a0 <HAL_TIM_OC_ConfigChannel+0xb4>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	223c      	movs	r2, #60	@ 0x3c
 800b312:	2101      	movs	r1, #1
 800b314:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b14      	cmp	r3, #20
 800b31a:	d835      	bhi.n	800b388 <HAL_TIM_OC_ConfigChannel+0x9c>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	009a      	lsls	r2, r3, #2
 800b320:	4b21      	ldr	r3, [pc, #132]	@ (800b3a8 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800b322:	18d3      	adds	r3, r2, r3
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	0011      	movs	r1, r2
 800b330:	0018      	movs	r0, r3
 800b332:	f000 fcc3 	bl	800bcbc <TIM_OC1_SetConfig>
      break;
 800b336:	e02c      	b.n	800b392 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	0011      	movs	r1, r2
 800b340:	0018      	movs	r0, r3
 800b342:	f000 fd3b 	bl	800bdbc <TIM_OC2_SetConfig>
      break;
 800b346:	e024      	b.n	800b392 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	0011      	movs	r1, r2
 800b350:	0018      	movs	r0, r3
 800b352:	f000 fdb1 	bl	800beb8 <TIM_OC3_SetConfig>
      break;
 800b356:	e01c      	b.n	800b392 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	0011      	movs	r1, r2
 800b360:	0018      	movs	r0, r3
 800b362:	f000 fe2b 	bl	800bfbc <TIM_OC4_SetConfig>
      break;
 800b366:	e014      	b.n	800b392 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	0011      	movs	r1, r2
 800b370:	0018      	movs	r0, r3
 800b372:	f000 fe87 	bl	800c084 <TIM_OC5_SetConfig>
      break;
 800b376:	e00c      	b.n	800b392 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	0011      	movs	r1, r2
 800b380:	0018      	movs	r0, r3
 800b382:	f000 fed9 	bl	800c138 <TIM_OC6_SetConfig>
      break;
 800b386:	e004      	b.n	800b392 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b388:	2317      	movs	r3, #23
 800b38a:	18fb      	adds	r3, r7, r3
 800b38c:	2201      	movs	r2, #1
 800b38e:	701a      	strb	r2, [r3, #0]
      break;
 800b390:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	223c      	movs	r2, #60	@ 0x3c
 800b396:	2100      	movs	r1, #0
 800b398:	5499      	strb	r1, [r3, r2]

  return status;
 800b39a:	2317      	movs	r3, #23
 800b39c:	18fb      	adds	r3, r7, r3
 800b39e:	781b      	ldrb	r3, [r3, #0]
}
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	b006      	add	sp, #24
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	0800ea9c 	.word	0x0800ea9c

0800b3ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b8:	2317      	movs	r3, #23
 800b3ba:	18fb      	adds	r3, r7, r3
 800b3bc:	2200      	movs	r2, #0
 800b3be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	223c      	movs	r2, #60	@ 0x3c
 800b3c4:	5c9b      	ldrb	r3, [r3, r2]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d101      	bne.n	800b3ce <HAL_TIM_IC_ConfigChannel+0x22>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	e08c      	b.n	800b4e8 <HAL_TIM_IC_ConfigChannel+0x13c>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	223c      	movs	r2, #60	@ 0x3c
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d11b      	bne.n	800b414 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800b3ec:	f000 ff02 	bl	800c1f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	699a      	ldr	r2, [r3, #24]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	210c      	movs	r1, #12
 800b3fc:	438a      	bics	r2, r1
 800b3fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6999      	ldr	r1, [r3, #24]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	619a      	str	r2, [r3, #24]
 800b412:	e062      	b.n	800b4da <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b04      	cmp	r3, #4
 800b418:	d11c      	bne.n	800b454 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800b42a:	f000 ff67 	bl	800c2fc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	699a      	ldr	r2, [r3, #24]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	492d      	ldr	r1, [pc, #180]	@ (800b4f0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b43a:	400a      	ands	r2, r1
 800b43c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6999      	ldr	r1, [r3, #24]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	021a      	lsls	r2, r3, #8
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	430a      	orrs	r2, r1
 800b450:	619a      	str	r2, [r3, #24]
 800b452:	e042      	b.n	800b4da <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b08      	cmp	r3, #8
 800b458:	d11b      	bne.n	800b492 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800b46a:	f000 ffbb 	bl	800c3e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	69da      	ldr	r2, [r3, #28]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	210c      	movs	r1, #12
 800b47a:	438a      	bics	r2, r1
 800b47c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69d9      	ldr	r1, [r3, #28]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	430a      	orrs	r2, r1
 800b48e:	61da      	str	r2, [r3, #28]
 800b490:	e023      	b.n	800b4da <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b0c      	cmp	r3, #12
 800b496:	d11c      	bne.n	800b4d2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800b4a8:	f000 ffdc 	bl	800c464 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	69da      	ldr	r2, [r3, #28]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	490e      	ldr	r1, [pc, #56]	@ (800b4f0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b4b8:	400a      	ands	r2, r1
 800b4ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	69d9      	ldr	r1, [r3, #28]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	021a      	lsls	r2, r3, #8
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	430a      	orrs	r2, r1
 800b4ce:	61da      	str	r2, [r3, #28]
 800b4d0:	e003      	b.n	800b4da <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800b4d2:	2317      	movs	r3, #23
 800b4d4:	18fb      	adds	r3, r7, r3
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	223c      	movs	r2, #60	@ 0x3c
 800b4de:	2100      	movs	r1, #0
 800b4e0:	5499      	strb	r1, [r3, r2]

  return status;
 800b4e2:	2317      	movs	r3, #23
 800b4e4:	18fb      	adds	r3, r7, r3
 800b4e6:	781b      	ldrb	r3, [r3, #0]
}
 800b4e8:	0018      	movs	r0, r3
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	b006      	add	sp, #24
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	fffff3ff 	.word	0xfffff3ff

0800b4f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b500:	2317      	movs	r3, #23
 800b502:	18fb      	adds	r3, r7, r3
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	223c      	movs	r2, #60	@ 0x3c
 800b50c:	5c9b      	ldrb	r3, [r3, r2]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d101      	bne.n	800b516 <HAL_TIM_PWM_ConfigChannel+0x22>
 800b512:	2302      	movs	r3, #2
 800b514:	e0e5      	b.n	800b6e2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	223c      	movs	r2, #60	@ 0x3c
 800b51a:	2101      	movs	r1, #1
 800b51c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b14      	cmp	r3, #20
 800b522:	d900      	bls.n	800b526 <HAL_TIM_PWM_ConfigChannel+0x32>
 800b524:	e0d1      	b.n	800b6ca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	009a      	lsls	r2, r3, #2
 800b52a:	4b70      	ldr	r3, [pc, #448]	@ (800b6ec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800b52c:	18d3      	adds	r3, r2, r3
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	0011      	movs	r1, r2
 800b53a:	0018      	movs	r0, r3
 800b53c:	f000 fbbe 	bl	800bcbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	699a      	ldr	r2, [r3, #24]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2108      	movs	r1, #8
 800b54c:	430a      	orrs	r2, r1
 800b54e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	699a      	ldr	r2, [r3, #24]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2104      	movs	r1, #4
 800b55c:	438a      	bics	r2, r1
 800b55e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6999      	ldr	r1, [r3, #24]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	691a      	ldr	r2, [r3, #16]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	619a      	str	r2, [r3, #24]
      break;
 800b572:	e0af      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	0011      	movs	r1, r2
 800b57c:	0018      	movs	r0, r3
 800b57e:	f000 fc1d 	bl	800bdbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	699a      	ldr	r2, [r3, #24]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2180      	movs	r1, #128	@ 0x80
 800b58e:	0109      	lsls	r1, r1, #4
 800b590:	430a      	orrs	r2, r1
 800b592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	699a      	ldr	r2, [r3, #24]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4954      	ldr	r1, [pc, #336]	@ (800b6f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b5a0:	400a      	ands	r2, r1
 800b5a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6999      	ldr	r1, [r3, #24]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	021a      	lsls	r2, r3, #8
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	619a      	str	r2, [r3, #24]
      break;
 800b5b8:	e08c      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	0011      	movs	r1, r2
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	f000 fc78 	bl	800beb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	69da      	ldr	r2, [r3, #28]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2108      	movs	r1, #8
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	69da      	ldr	r2, [r3, #28]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	438a      	bics	r2, r1
 800b5e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	69d9      	ldr	r1, [r3, #28]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	691a      	ldr	r2, [r3, #16]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	61da      	str	r2, [r3, #28]
      break;
 800b5fa:	e06b      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	0011      	movs	r1, r2
 800b604:	0018      	movs	r0, r3
 800b606:	f000 fcd9 	bl	800bfbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	69da      	ldr	r2, [r3, #28]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2180      	movs	r1, #128	@ 0x80
 800b616:	0109      	lsls	r1, r1, #4
 800b618:	430a      	orrs	r2, r1
 800b61a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	69da      	ldr	r2, [r3, #28]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4932      	ldr	r1, [pc, #200]	@ (800b6f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b628:	400a      	ands	r2, r1
 800b62a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69d9      	ldr	r1, [r3, #28]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	021a      	lsls	r2, r3, #8
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	61da      	str	r2, [r3, #28]
      break;
 800b640:	e048      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	0011      	movs	r1, r2
 800b64a:	0018      	movs	r0, r3
 800b64c:	f000 fd1a 	bl	800c084 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2108      	movs	r1, #8
 800b65c:	430a      	orrs	r2, r1
 800b65e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2104      	movs	r1, #4
 800b66c:	438a      	bics	r2, r1
 800b66e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	691a      	ldr	r2, [r3, #16]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b682:	e027      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	0011      	movs	r1, r2
 800b68c:	0018      	movs	r0, r3
 800b68e:	f000 fd53 	bl	800c138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2180      	movs	r1, #128	@ 0x80
 800b69e:	0109      	lsls	r1, r1, #4
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4910      	ldr	r1, [pc, #64]	@ (800b6f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b6b0:	400a      	ands	r2, r1
 800b6b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	021a      	lsls	r2, r3, #8
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b6c8:	e004      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800b6ca:	2317      	movs	r3, #23
 800b6cc:	18fb      	adds	r3, r7, r3
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	701a      	strb	r2, [r3, #0]
      break;
 800b6d2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	223c      	movs	r2, #60	@ 0x3c
 800b6d8:	2100      	movs	r1, #0
 800b6da:	5499      	strb	r1, [r3, r2]

  return status;
 800b6dc:	2317      	movs	r3, #23
 800b6de:	18fb      	adds	r3, r7, r3
 800b6e0:	781b      	ldrb	r3, [r3, #0]
}
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b006      	add	sp, #24
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			@ (mov r8, r8)
 800b6ec:	0800eaf0 	.word	0x0800eaf0
 800b6f0:	fffffbff 	.word	0xfffffbff

0800b6f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6fe:	230f      	movs	r3, #15
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	2200      	movs	r2, #0
 800b704:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	223c      	movs	r2, #60	@ 0x3c
 800b70a:	5c9b      	ldrb	r3, [r3, r2]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d101      	bne.n	800b714 <HAL_TIM_ConfigClockSource+0x20>
 800b710:	2302      	movs	r3, #2
 800b712:	e0bc      	b.n	800b88e <HAL_TIM_ConfigClockSource+0x19a>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	223c      	movs	r2, #60	@ 0x3c
 800b718:	2101      	movs	r1, #1
 800b71a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	223d      	movs	r2, #61	@ 0x3d
 800b720:	2102      	movs	r1, #2
 800b722:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4a5a      	ldr	r2, [pc, #360]	@ (800b898 <HAL_TIM_ConfigClockSource+0x1a4>)
 800b730:	4013      	ands	r3, r2
 800b732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4a59      	ldr	r2, [pc, #356]	@ (800b89c <HAL_TIM_ConfigClockSource+0x1a8>)
 800b738:	4013      	ands	r3, r2
 800b73a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2280      	movs	r2, #128	@ 0x80
 800b74a:	0192      	lsls	r2, r2, #6
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d040      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0xde>
 800b750:	2280      	movs	r2, #128	@ 0x80
 800b752:	0192      	lsls	r2, r2, #6
 800b754:	4293      	cmp	r3, r2
 800b756:	d900      	bls.n	800b75a <HAL_TIM_ConfigClockSource+0x66>
 800b758:	e088      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b75a:	2280      	movs	r2, #128	@ 0x80
 800b75c:	0152      	lsls	r2, r2, #5
 800b75e:	4293      	cmp	r3, r2
 800b760:	d100      	bne.n	800b764 <HAL_TIM_ConfigClockSource+0x70>
 800b762:	e088      	b.n	800b876 <HAL_TIM_ConfigClockSource+0x182>
 800b764:	2280      	movs	r2, #128	@ 0x80
 800b766:	0152      	lsls	r2, r2, #5
 800b768:	4293      	cmp	r3, r2
 800b76a:	d900      	bls.n	800b76e <HAL_TIM_ConfigClockSource+0x7a>
 800b76c:	e07e      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b76e:	2b70      	cmp	r3, #112	@ 0x70
 800b770:	d018      	beq.n	800b7a4 <HAL_TIM_ConfigClockSource+0xb0>
 800b772:	d900      	bls.n	800b776 <HAL_TIM_ConfigClockSource+0x82>
 800b774:	e07a      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b776:	2b60      	cmp	r3, #96	@ 0x60
 800b778:	d04f      	beq.n	800b81a <HAL_TIM_ConfigClockSource+0x126>
 800b77a:	d900      	bls.n	800b77e <HAL_TIM_ConfigClockSource+0x8a>
 800b77c:	e076      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b77e:	2b50      	cmp	r3, #80	@ 0x50
 800b780:	d03b      	beq.n	800b7fa <HAL_TIM_ConfigClockSource+0x106>
 800b782:	d900      	bls.n	800b786 <HAL_TIM_ConfigClockSource+0x92>
 800b784:	e072      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b786:	2b40      	cmp	r3, #64	@ 0x40
 800b788:	d057      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0x146>
 800b78a:	d900      	bls.n	800b78e <HAL_TIM_ConfigClockSource+0x9a>
 800b78c:	e06e      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b78e:	2b30      	cmp	r3, #48	@ 0x30
 800b790:	d063      	beq.n	800b85a <HAL_TIM_ConfigClockSource+0x166>
 800b792:	d86b      	bhi.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b794:	2b20      	cmp	r3, #32
 800b796:	d060      	beq.n	800b85a <HAL_TIM_ConfigClockSource+0x166>
 800b798:	d868      	bhi.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d05d      	beq.n	800b85a <HAL_TIM_ConfigClockSource+0x166>
 800b79e:	2b10      	cmp	r3, #16
 800b7a0:	d05b      	beq.n	800b85a <HAL_TIM_ConfigClockSource+0x166>
 800b7a2:	e063      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7b4:	f000 feb8 	bl	800c528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2277      	movs	r2, #119	@ 0x77
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	609a      	str	r2, [r3, #8]
      break;
 800b7d0:	e052      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7e2:	f000 fea1 	bl	800c528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2180      	movs	r1, #128	@ 0x80
 800b7f2:	01c9      	lsls	r1, r1, #7
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	609a      	str	r2, [r3, #8]
      break;
 800b7f8:	e03e      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b806:	001a      	movs	r2, r3
 800b808:	f000 fd4a 	bl	800c2a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2150      	movs	r1, #80	@ 0x50
 800b812:	0018      	movs	r0, r3
 800b814:	f000 fe6c 	bl	800c4f0 <TIM_ITRx_SetConfig>
      break;
 800b818:	e02e      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b826:	001a      	movs	r2, r3
 800b828:	f000 fdaa 	bl	800c380 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2160      	movs	r1, #96	@ 0x60
 800b832:	0018      	movs	r0, r3
 800b834:	f000 fe5c 	bl	800c4f0 <TIM_ITRx_SetConfig>
      break;
 800b838:	e01e      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b846:	001a      	movs	r2, r3
 800b848:	f000 fd2a 	bl	800c2a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2140      	movs	r1, #64	@ 0x40
 800b852:	0018      	movs	r0, r3
 800b854:	f000 fe4c 	bl	800c4f0 <TIM_ITRx_SetConfig>
      break;
 800b858:	e00e      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	0019      	movs	r1, r3
 800b864:	0010      	movs	r0, r2
 800b866:	f000 fe43 	bl	800c4f0 <TIM_ITRx_SetConfig>
      break;
 800b86a:	e005      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b86c:	230f      	movs	r3, #15
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	2201      	movs	r2, #1
 800b872:	701a      	strb	r2, [r3, #0]
      break;
 800b874:	e000      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b876:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	223d      	movs	r2, #61	@ 0x3d
 800b87c:	2101      	movs	r1, #1
 800b87e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	223c      	movs	r2, #60	@ 0x3c
 800b884:	2100      	movs	r1, #0
 800b886:	5499      	strb	r1, [r3, r2]

  return status;
 800b888:	230f      	movs	r3, #15
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	781b      	ldrb	r3, [r3, #0]
}
 800b88e:	0018      	movs	r0, r3
 800b890:	46bd      	mov	sp, r7
 800b892:	b004      	add	sp, #16
 800b894:	bd80      	pop	{r7, pc}
 800b896:	46c0      	nop			@ (mov r8, r8)
 800b898:	ffceff88 	.word	0xffceff88
 800b89c:	ffff00ff 	.word	0xffff00ff

0800b8a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b0c      	cmp	r3, #12
 800b8b2:	d01e      	beq.n	800b8f2 <HAL_TIM_ReadCapturedValue+0x52>
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2b0c      	cmp	r3, #12
 800b8b8:	d820      	bhi.n	800b8fc <HAL_TIM_ReadCapturedValue+0x5c>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b08      	cmp	r3, #8
 800b8be:	d013      	beq.n	800b8e8 <HAL_TIM_ReadCapturedValue+0x48>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b08      	cmp	r3, #8
 800b8c4:	d81a      	bhi.n	800b8fc <HAL_TIM_ReadCapturedValue+0x5c>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <HAL_TIM_ReadCapturedValue+0x34>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d005      	beq.n	800b8de <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800b8d2:	e013      	b.n	800b8fc <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8da:	60fb      	str	r3, [r7, #12]
      break;
 800b8dc:	e00f      	b.n	800b8fe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8e4:	60fb      	str	r3, [r7, #12]
      break;
 800b8e6:	e00a      	b.n	800b8fe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8ee:	60fb      	str	r3, [r7, #12]
      break;
 800b8f0:	e005      	b.n	800b8fe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f8:	60fb      	str	r3, [r7, #12]
      break;
 800b8fa:	e000      	b.n	800b8fe <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800b8fc:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
}
 800b900:	0018      	movs	r0, r3
 800b902:	46bd      	mov	sp, r7
 800b904:	b004      	add	sp, #16
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b910:	46c0      	nop			@ (mov r8, r8)
 800b912:	46bd      	mov	sp, r7
 800b914:	b002      	add	sp, #8
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b920:	46c0      	nop			@ (mov r8, r8)
 800b922:	46bd      	mov	sp, r7
 800b924:	b002      	add	sp, #8
 800b926:	bd80      	pop	{r7, pc}

0800b928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b930:	46c0      	nop			@ (mov r8, r8)
 800b932:	46bd      	mov	sp, r7
 800b934:	b002      	add	sp, #8
 800b936:	bd80      	pop	{r7, pc}

0800b938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b940:	46c0      	nop			@ (mov r8, r8)
 800b942:	46bd      	mov	sp, r7
 800b944:	b002      	add	sp, #8
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b950:	46c0      	nop			@ (mov r8, r8)
 800b952:	46bd      	mov	sp, r7
 800b954:	b002      	add	sp, #8
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b960:	46c0      	nop			@ (mov r8, r8)
 800b962:	46bd      	mov	sp, r7
 800b964:	b002      	add	sp, #8
 800b966:	bd80      	pop	{r7, pc}

0800b968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b970:	46c0      	nop			@ (mov r8, r8)
 800b972:	46bd      	mov	sp, r7
 800b974:	b002      	add	sp, #8
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b980:	46c0      	nop			@ (mov r8, r8)
 800b982:	46bd      	mov	sp, r7
 800b984:	b002      	add	sp, #8
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b990:	46c0      	nop			@ (mov r8, r8)
 800b992:	46bd      	mov	sp, r7
 800b994:	b002      	add	sp, #8
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b9a0:	46c0      	nop			@ (mov r8, r8)
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	b002      	add	sp, #8
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	607a      	str	r2, [r7, #4]
 800b9b2:	230b      	movs	r3, #11
 800b9b4:	18fb      	adds	r3, r7, r3
 800b9b6:	1c0a      	adds	r2, r1, #0
 800b9b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9ba:	2317      	movs	r3, #23
 800b9bc:	18fb      	adds	r3, r7, r3
 800b9be:	2200      	movs	r2, #0
 800b9c0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e0ea      	b.n	800bba2 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	223d      	movs	r2, #61	@ 0x3d
 800b9d0:	5c9b      	ldrb	r3, [r3, r2]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d000      	beq.n	800b9da <HAL_TIM_RegisterCallback+0x32>
 800b9d8:	e08e      	b.n	800baf8 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b9da:	230b      	movs	r3, #11
 800b9dc:	18fb      	adds	r3, r7, r3
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b1b      	cmp	r3, #27
 800b9e2:	d900      	bls.n	800b9e6 <HAL_TIM_RegisterCallback+0x3e>
 800b9e4:	e083      	b.n	800baee <HAL_TIM_RegisterCallback+0x146>
 800b9e6:	009a      	lsls	r2, r3, #2
 800b9e8:	4b70      	ldr	r3, [pc, #448]	@ (800bbac <HAL_TIM_RegisterCallback+0x204>)
 800b9ea:	18d3      	adds	r3, r2, r3
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b9f6:	e0d1      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b9fe:	e0cd      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ba06:	e0c9      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ba0e:	e0c5      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ba16:	e0c1      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ba1e:	e0bd      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ba26:	e0b9      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ba2e:	e0b5      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ba36:	e0b1      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ba3e:	e0ad      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ba46:	e0a9      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ba4e:	e0a5      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ba56:	e0a1      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2180      	movs	r1, #128	@ 0x80
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	505a      	str	r2, [r3, r1]
        break;
 800ba60:	e09c      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2184      	movs	r1, #132	@ 0x84
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	505a      	str	r2, [r3, r1]
        break;
 800ba6a:	e097      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2188      	movs	r1, #136	@ 0x88
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	505a      	str	r2, [r3, r1]
        break;
 800ba74:	e092      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	218c      	movs	r1, #140	@ 0x8c
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	505a      	str	r2, [r3, r1]
        break;
 800ba7e:	e08d      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2190      	movs	r1, #144	@ 0x90
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	505a      	str	r2, [r3, r1]
        break;
 800ba88:	e088      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2194      	movs	r1, #148	@ 0x94
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	505a      	str	r2, [r3, r1]
        break;
 800ba92:	e083      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2198      	movs	r1, #152	@ 0x98
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	505a      	str	r2, [r3, r1]
        break;
 800ba9c:	e07e      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	219c      	movs	r1, #156	@ 0x9c
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	505a      	str	r2, [r3, r1]
        break;
 800baa6:	e079      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	21a0      	movs	r1, #160	@ 0xa0
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	505a      	str	r2, [r3, r1]
        break;
 800bab0:	e074      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	21a4      	movs	r1, #164	@ 0xa4
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	505a      	str	r2, [r3, r1]
        break;
 800baba:	e06f      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	21a8      	movs	r1, #168	@ 0xa8
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	505a      	str	r2, [r3, r1]
        break;
 800bac4:	e06a      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	21ac      	movs	r1, #172	@ 0xac
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	505a      	str	r2, [r3, r1]
        break;
 800bace:	e065      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	21b0      	movs	r1, #176	@ 0xb0
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	505a      	str	r2, [r3, r1]
        break;
 800bad8:	e060      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	21b4      	movs	r1, #180	@ 0xb4
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	505a      	str	r2, [r3, r1]
        break;
 800bae2:	e05b      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	21b8      	movs	r1, #184	@ 0xb8
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	505a      	str	r2, [r3, r1]
        break;
 800baec:	e056      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800baee:	2317      	movs	r3, #23
 800baf0:	18fb      	adds	r3, r7, r3
 800baf2:	2201      	movs	r2, #1
 800baf4:	701a      	strb	r2, [r3, #0]
        break;
 800baf6:	e051      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	223d      	movs	r2, #61	@ 0x3d
 800bafc:	5c9b      	ldrb	r3, [r3, r2]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d147      	bne.n	800bb94 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800bb04:	230b      	movs	r3, #11
 800bb06:	18fb      	adds	r3, r7, r3
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b0d      	cmp	r3, #13
 800bb0c:	d83d      	bhi.n	800bb8a <HAL_TIM_RegisterCallback+0x1e2>
 800bb0e:	009a      	lsls	r2, r3, #2
 800bb10:	4b27      	ldr	r3, [pc, #156]	@ (800bbb0 <HAL_TIM_RegisterCallback+0x208>)
 800bb12:	18d3      	adds	r3, r2, r3
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800bb1e:	e03d      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bb26:	e039      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800bb2e:	e035      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bb36:	e031      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bb3e:	e02d      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bb46:	e029      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bb4e:	e025      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bb56:	e021      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bb5e:	e01d      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bb66:	e019      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bb6e:	e015      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bb76:	e011      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bb7e:	e00d      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2180      	movs	r1, #128	@ 0x80
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	505a      	str	r2, [r3, r1]
        break;
 800bb88:	e008      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bb8a:	2317      	movs	r3, #23
 800bb8c:	18fb      	adds	r3, r7, r3
 800bb8e:	2201      	movs	r2, #1
 800bb90:	701a      	strb	r2, [r3, #0]
        break;
 800bb92:	e003      	b.n	800bb9c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800bb94:	2317      	movs	r3, #23
 800bb96:	18fb      	adds	r3, r7, r3
 800bb98:	2201      	movs	r2, #1
 800bb9a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bb9c:	2317      	movs	r3, #23
 800bb9e:	18fb      	adds	r3, r7, r3
 800bba0:	781b      	ldrb	r3, [r3, #0]
}
 800bba2:	0018      	movs	r0, r3
 800bba4:	46bd      	mov	sp, r7
 800bba6:	b006      	add	sp, #24
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	46c0      	nop			@ (mov r8, r8)
 800bbac:	0800eb44 	.word	0x0800eb44
 800bbb0:	0800ebb4 	.word	0x0800ebb4

0800bbb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a37      	ldr	r2, [pc, #220]	@ (800bca4 <TIM_Base_SetConfig+0xf0>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d008      	beq.n	800bbde <TIM_Base_SetConfig+0x2a>
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	2380      	movs	r3, #128	@ 0x80
 800bbd0:	05db      	lsls	r3, r3, #23
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d003      	beq.n	800bbde <TIM_Base_SetConfig+0x2a>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a33      	ldr	r2, [pc, #204]	@ (800bca8 <TIM_Base_SetConfig+0xf4>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d108      	bne.n	800bbf0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2270      	movs	r2, #112	@ 0x70
 800bbe2:	4393      	bics	r3, r2
 800bbe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a2c      	ldr	r2, [pc, #176]	@ (800bca4 <TIM_Base_SetConfig+0xf0>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d014      	beq.n	800bc22 <TIM_Base_SetConfig+0x6e>
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	2380      	movs	r3, #128	@ 0x80
 800bbfc:	05db      	lsls	r3, r3, #23
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d00f      	beq.n	800bc22 <TIM_Base_SetConfig+0x6e>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a28      	ldr	r2, [pc, #160]	@ (800bca8 <TIM_Base_SetConfig+0xf4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d00b      	beq.n	800bc22 <TIM_Base_SetConfig+0x6e>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a27      	ldr	r2, [pc, #156]	@ (800bcac <TIM_Base_SetConfig+0xf8>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d007      	beq.n	800bc22 <TIM_Base_SetConfig+0x6e>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a26      	ldr	r2, [pc, #152]	@ (800bcb0 <TIM_Base_SetConfig+0xfc>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d003      	beq.n	800bc22 <TIM_Base_SetConfig+0x6e>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a25      	ldr	r2, [pc, #148]	@ (800bcb4 <TIM_Base_SetConfig+0x100>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d108      	bne.n	800bc34 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4a24      	ldr	r2, [pc, #144]	@ (800bcb8 <TIM_Base_SetConfig+0x104>)
 800bc26:	4013      	ands	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2280      	movs	r2, #128	@ 0x80
 800bc38:	4393      	bics	r3, r2
 800bc3a:	001a      	movs	r2, r3
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a11      	ldr	r2, [pc, #68]	@ (800bca4 <TIM_Base_SetConfig+0xf0>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d007      	beq.n	800bc72 <TIM_Base_SetConfig+0xbe>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a12      	ldr	r2, [pc, #72]	@ (800bcb0 <TIM_Base_SetConfig+0xfc>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d003      	beq.n	800bc72 <TIM_Base_SetConfig+0xbe>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a11      	ldr	r2, [pc, #68]	@ (800bcb4 <TIM_Base_SetConfig+0x100>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d103      	bne.n	800bc7a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	691a      	ldr	r2, [r3, #16]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	2201      	movs	r2, #1
 800bc86:	4013      	ands	r3, r2
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d106      	bne.n	800bc9a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2201      	movs	r2, #1
 800bc92:	4393      	bics	r3, r2
 800bc94:	001a      	movs	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	611a      	str	r2, [r3, #16]
  }
}
 800bc9a:	46c0      	nop			@ (mov r8, r8)
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	b004      	add	sp, #16
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	46c0      	nop			@ (mov r8, r8)
 800bca4:	40012c00 	.word	0x40012c00
 800bca8:	40000400 	.word	0x40000400
 800bcac:	40002000 	.word	0x40002000
 800bcb0:	40014400 	.word	0x40014400
 800bcb4:	40014800 	.word	0x40014800
 800bcb8:	fffffcff 	.word	0xfffffcff

0800bcbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	4393      	bics	r3, r2
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4a2e      	ldr	r2, [pc, #184]	@ (800bda4 <TIM_OC1_SetConfig+0xe8>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	4393      	bics	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2202      	movs	r2, #2
 800bd04:	4393      	bics	r3, r2
 800bd06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a24      	ldr	r2, [pc, #144]	@ (800bda8 <TIM_OC1_SetConfig+0xec>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d007      	beq.n	800bd2a <TIM_OC1_SetConfig+0x6e>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a23      	ldr	r2, [pc, #140]	@ (800bdac <TIM_OC1_SetConfig+0xf0>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d003      	beq.n	800bd2a <TIM_OC1_SetConfig+0x6e>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a22      	ldr	r2, [pc, #136]	@ (800bdb0 <TIM_OC1_SetConfig+0xf4>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d10c      	bne.n	800bd44 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	4393      	bics	r3, r2
 800bd30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2204      	movs	r2, #4
 800bd40:	4393      	bics	r3, r2
 800bd42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a18      	ldr	r2, [pc, #96]	@ (800bda8 <TIM_OC1_SetConfig+0xec>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d007      	beq.n	800bd5c <TIM_OC1_SetConfig+0xa0>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a17      	ldr	r2, [pc, #92]	@ (800bdac <TIM_OC1_SetConfig+0xf0>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d003      	beq.n	800bd5c <TIM_OC1_SetConfig+0xa0>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a16      	ldr	r2, [pc, #88]	@ (800bdb0 <TIM_OC1_SetConfig+0xf4>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d111      	bne.n	800bd80 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	4a15      	ldr	r2, [pc, #84]	@ (800bdb4 <TIM_OC1_SetConfig+0xf8>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	4a14      	ldr	r2, [pc, #80]	@ (800bdb8 <TIM_OC1_SetConfig+0xfc>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	621a      	str	r2, [r3, #32]
}
 800bd9a:	46c0      	nop			@ (mov r8, r8)
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	b006      	add	sp, #24
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	46c0      	nop			@ (mov r8, r8)
 800bda4:	fffeff8f 	.word	0xfffeff8f
 800bda8:	40012c00 	.word	0x40012c00
 800bdac:	40014400 	.word	0x40014400
 800bdb0:	40014800 	.word	0x40014800
 800bdb4:	fffffeff 	.word	0xfffffeff
 800bdb8:	fffffdff 	.word	0xfffffdff

0800bdbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a1b      	ldr	r3, [r3, #32]
 800bdd0:	2210      	movs	r2, #16
 800bdd2:	4393      	bics	r3, r2
 800bdd4:	001a      	movs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4a2c      	ldr	r2, [pc, #176]	@ (800be9c <TIM_OC2_SetConfig+0xe0>)
 800bdea:	4013      	ands	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	4a2b      	ldr	r2, [pc, #172]	@ (800bea0 <TIM_OC2_SetConfig+0xe4>)
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2220      	movs	r2, #32
 800be06:	4393      	bics	r3, r2
 800be08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	4313      	orrs	r3, r2
 800be14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a22      	ldr	r2, [pc, #136]	@ (800bea4 <TIM_OC2_SetConfig+0xe8>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d10d      	bne.n	800be3a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2280      	movs	r2, #128	@ 0x80
 800be22:	4393      	bics	r3, r2
 800be24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2240      	movs	r2, #64	@ 0x40
 800be36:	4393      	bics	r3, r2
 800be38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a19      	ldr	r2, [pc, #100]	@ (800bea4 <TIM_OC2_SetConfig+0xe8>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d007      	beq.n	800be52 <TIM_OC2_SetConfig+0x96>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a18      	ldr	r2, [pc, #96]	@ (800bea8 <TIM_OC2_SetConfig+0xec>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d003      	beq.n	800be52 <TIM_OC2_SetConfig+0x96>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a17      	ldr	r2, [pc, #92]	@ (800beac <TIM_OC2_SetConfig+0xf0>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d113      	bne.n	800be7a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	4a16      	ldr	r2, [pc, #88]	@ (800beb0 <TIM_OC2_SetConfig+0xf4>)
 800be56:	4013      	ands	r3, r2
 800be58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	4a15      	ldr	r2, [pc, #84]	@ (800beb4 <TIM_OC2_SetConfig+0xf8>)
 800be5e:	4013      	ands	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	4313      	orrs	r3, r2
 800be78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	621a      	str	r2, [r3, #32]
}
 800be94:	46c0      	nop			@ (mov r8, r8)
 800be96:	46bd      	mov	sp, r7
 800be98:	b006      	add	sp, #24
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	feff8fff 	.word	0xfeff8fff
 800bea0:	fffffcff 	.word	0xfffffcff
 800bea4:	40012c00 	.word	0x40012c00
 800bea8:	40014400 	.word	0x40014400
 800beac:	40014800 	.word	0x40014800
 800beb0:	fffffbff 	.word	0xfffffbff
 800beb4:	fffff7ff 	.word	0xfffff7ff

0800beb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	4a31      	ldr	r2, [pc, #196]	@ (800bf94 <TIM_OC3_SetConfig+0xdc>)
 800bece:	401a      	ands	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	69db      	ldr	r3, [r3, #28]
 800bede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4a2d      	ldr	r2, [pc, #180]	@ (800bf98 <TIM_OC3_SetConfig+0xe0>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2203      	movs	r2, #3
 800beec:	4393      	bics	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	4a27      	ldr	r2, [pc, #156]	@ (800bf9c <TIM_OC3_SetConfig+0xe4>)
 800befe:	4013      	ands	r3, r2
 800bf00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	021b      	lsls	r3, r3, #8
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a23      	ldr	r2, [pc, #140]	@ (800bfa0 <TIM_OC3_SetConfig+0xe8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d10d      	bne.n	800bf32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	4a22      	ldr	r2, [pc, #136]	@ (800bfa4 <TIM_OC3_SetConfig+0xec>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	021b      	lsls	r3, r3, #8
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	4a1e      	ldr	r2, [pc, #120]	@ (800bfa8 <TIM_OC3_SetConfig+0xf0>)
 800bf2e:	4013      	ands	r3, r2
 800bf30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a1a      	ldr	r2, [pc, #104]	@ (800bfa0 <TIM_OC3_SetConfig+0xe8>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d007      	beq.n	800bf4a <TIM_OC3_SetConfig+0x92>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a1b      	ldr	r2, [pc, #108]	@ (800bfac <TIM_OC3_SetConfig+0xf4>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d003      	beq.n	800bf4a <TIM_OC3_SetConfig+0x92>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a1a      	ldr	r2, [pc, #104]	@ (800bfb0 <TIM_OC3_SetConfig+0xf8>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d113      	bne.n	800bf72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	4a19      	ldr	r2, [pc, #100]	@ (800bfb4 <TIM_OC3_SetConfig+0xfc>)
 800bf4e:	4013      	ands	r3, r2
 800bf50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	4a18      	ldr	r2, [pc, #96]	@ (800bfb8 <TIM_OC3_SetConfig+0x100>)
 800bf56:	4013      	ands	r3, r2
 800bf58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	011b      	lsls	r3, r3, #4
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	621a      	str	r2, [r3, #32]
}
 800bf8c:	46c0      	nop			@ (mov r8, r8)
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	b006      	add	sp, #24
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	fffffeff 	.word	0xfffffeff
 800bf98:	fffeff8f 	.word	0xfffeff8f
 800bf9c:	fffffdff 	.word	0xfffffdff
 800bfa0:	40012c00 	.word	0x40012c00
 800bfa4:	fffff7ff 	.word	0xfffff7ff
 800bfa8:	fffffbff 	.word	0xfffffbff
 800bfac:	40014400 	.word	0x40014400
 800bfb0:	40014800 	.word	0x40014800
 800bfb4:	ffffefff 	.word	0xffffefff
 800bfb8:	ffffdfff 	.word	0xffffdfff

0800bfbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a1b      	ldr	r3, [r3, #32]
 800bfd0:	4a24      	ldr	r2, [pc, #144]	@ (800c064 <TIM_OC4_SetConfig+0xa8>)
 800bfd2:	401a      	ands	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4a20      	ldr	r2, [pc, #128]	@ (800c068 <TIM_OC4_SetConfig+0xac>)
 800bfe8:	4013      	ands	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	4a1f      	ldr	r2, [pc, #124]	@ (800c06c <TIM_OC4_SetConfig+0xb0>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	021b      	lsls	r3, r3, #8
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	4a1b      	ldr	r2, [pc, #108]	@ (800c070 <TIM_OC4_SetConfig+0xb4>)
 800c004:	4013      	ands	r3, r2
 800c006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	031b      	lsls	r3, r3, #12
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	4313      	orrs	r3, r2
 800c012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a17      	ldr	r2, [pc, #92]	@ (800c074 <TIM_OC4_SetConfig+0xb8>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d007      	beq.n	800c02c <TIM_OC4_SetConfig+0x70>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a16      	ldr	r2, [pc, #88]	@ (800c078 <TIM_OC4_SetConfig+0xbc>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d003      	beq.n	800c02c <TIM_OC4_SetConfig+0x70>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a15      	ldr	r2, [pc, #84]	@ (800c07c <TIM_OC4_SetConfig+0xc0>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d109      	bne.n	800c040 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	4a14      	ldr	r2, [pc, #80]	@ (800c080 <TIM_OC4_SetConfig+0xc4>)
 800c030:	4013      	ands	r3, r2
 800c032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	019b      	lsls	r3, r3, #6
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	621a      	str	r2, [r3, #32]
}
 800c05a:	46c0      	nop			@ (mov r8, r8)
 800c05c:	46bd      	mov	sp, r7
 800c05e:	b006      	add	sp, #24
 800c060:	bd80      	pop	{r7, pc}
 800c062:	46c0      	nop			@ (mov r8, r8)
 800c064:	ffffefff 	.word	0xffffefff
 800c068:	feff8fff 	.word	0xfeff8fff
 800c06c:	fffffcff 	.word	0xfffffcff
 800c070:	ffffdfff 	.word	0xffffdfff
 800c074:	40012c00 	.word	0x40012c00
 800c078:	40014400 	.word	0x40014400
 800c07c:	40014800 	.word	0x40014800
 800c080:	ffffbfff 	.word	0xffffbfff

0800c084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	4a21      	ldr	r2, [pc, #132]	@ (800c120 <TIM_OC5_SetConfig+0x9c>)
 800c09a:	401a      	ands	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4a1d      	ldr	r2, [pc, #116]	@ (800c124 <TIM_OC5_SetConfig+0xa0>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	4a19      	ldr	r2, [pc, #100]	@ (800c128 <TIM_OC5_SetConfig+0xa4>)
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	041b      	lsls	r3, r3, #16
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a15      	ldr	r2, [pc, #84]	@ (800c12c <TIM_OC5_SetConfig+0xa8>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d007      	beq.n	800c0ea <TIM_OC5_SetConfig+0x66>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a14      	ldr	r2, [pc, #80]	@ (800c130 <TIM_OC5_SetConfig+0xac>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d003      	beq.n	800c0ea <TIM_OC5_SetConfig+0x66>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a13      	ldr	r2, [pc, #76]	@ (800c134 <TIM_OC5_SetConfig+0xb0>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d109      	bne.n	800c0fe <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800c120 <TIM_OC5_SetConfig+0x9c>)
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	021b      	lsls	r3, r3, #8
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	621a      	str	r2, [r3, #32]
}
 800c118:	46c0      	nop			@ (mov r8, r8)
 800c11a:	46bd      	mov	sp, r7
 800c11c:	b006      	add	sp, #24
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	fffeffff 	.word	0xfffeffff
 800c124:	fffeff8f 	.word	0xfffeff8f
 800c128:	fffdffff 	.word	0xfffdffff
 800c12c:	40012c00 	.word	0x40012c00
 800c130:	40014400 	.word	0x40014400
 800c134:	40014800 	.word	0x40014800

0800c138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	4a22      	ldr	r2, [pc, #136]	@ (800c1d8 <TIM_OC6_SetConfig+0xa0>)
 800c14e:	401a      	ands	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4a1e      	ldr	r2, [pc, #120]	@ (800c1dc <TIM_OC6_SetConfig+0xa4>)
 800c164:	4013      	ands	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	021b      	lsls	r3, r3, #8
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	4313      	orrs	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	4a1a      	ldr	r2, [pc, #104]	@ (800c1e0 <TIM_OC6_SetConfig+0xa8>)
 800c178:	4013      	ands	r3, r2
 800c17a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	051b      	lsls	r3, r3, #20
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	4313      	orrs	r3, r2
 800c186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a16      	ldr	r2, [pc, #88]	@ (800c1e4 <TIM_OC6_SetConfig+0xac>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d007      	beq.n	800c1a0 <TIM_OC6_SetConfig+0x68>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a15      	ldr	r2, [pc, #84]	@ (800c1e8 <TIM_OC6_SetConfig+0xb0>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d003      	beq.n	800c1a0 <TIM_OC6_SetConfig+0x68>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a14      	ldr	r2, [pc, #80]	@ (800c1ec <TIM_OC6_SetConfig+0xb4>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d109      	bne.n	800c1b4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	4a13      	ldr	r2, [pc, #76]	@ (800c1f0 <TIM_OC6_SetConfig+0xb8>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	029b      	lsls	r3, r3, #10
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	621a      	str	r2, [r3, #32]
}
 800c1ce:	46c0      	nop			@ (mov r8, r8)
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	b006      	add	sp, #24
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	46c0      	nop			@ (mov r8, r8)
 800c1d8:	ffefffff 	.word	0xffefffff
 800c1dc:	feff8fff 	.word	0xfeff8fff
 800c1e0:	ffdfffff 	.word	0xffdfffff
 800c1e4:	40012c00 	.word	0x40012c00
 800c1e8:	40014400 	.word	0x40014400
 800c1ec:	40014800 	.word	0x40014800
 800c1f0:	fffbffff 	.word	0xfffbffff

0800c1f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	2201      	movs	r2, #1
 800c20e:	4393      	bics	r3, r2
 800c210:	001a      	movs	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4a1e      	ldr	r2, [pc, #120]	@ (800c298 <TIM_TI1_SetConfig+0xa4>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d008      	beq.n	800c236 <TIM_TI1_SetConfig+0x42>
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	2380      	movs	r3, #128	@ 0x80
 800c228:	05db      	lsls	r3, r3, #23
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d003      	beq.n	800c236 <TIM_TI1_SetConfig+0x42>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	4a1a      	ldr	r2, [pc, #104]	@ (800c29c <TIM_TI1_SetConfig+0xa8>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d101      	bne.n	800c23a <TIM_TI1_SetConfig+0x46>
 800c236:	2301      	movs	r3, #1
 800c238:	e000      	b.n	800c23c <TIM_TI1_SetConfig+0x48>
 800c23a:	2300      	movs	r3, #0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d008      	beq.n	800c252 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2203      	movs	r2, #3
 800c244:	4393      	bics	r3, r2
 800c246:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	e003      	b.n	800c25a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2201      	movs	r2, #1
 800c256:	4313      	orrs	r3, r2
 800c258:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	22f0      	movs	r2, #240	@ 0xf0
 800c25e:	4393      	bics	r3, r2
 800c260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	011b      	lsls	r3, r3, #4
 800c266:	22ff      	movs	r2, #255	@ 0xff
 800c268:	4013      	ands	r3, r2
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	220a      	movs	r2, #10
 800c274:	4393      	bics	r3, r2
 800c276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	220a      	movs	r2, #10
 800c27c:	4013      	ands	r3, r2
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	4313      	orrs	r3, r2
 800c282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	621a      	str	r2, [r3, #32]
}
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b006      	add	sp, #24
 800c296:	bd80      	pop	{r7, pc}
 800c298:	40012c00 	.word	0x40012c00
 800c29c:	40000400 	.word	0x40000400

0800c2a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6a1b      	ldr	r3, [r3, #32]
 800c2b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	4393      	bics	r3, r2
 800c2ba:	001a      	movs	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	22f0      	movs	r2, #240	@ 0xf0
 800c2ca:	4393      	bics	r3, r2
 800c2cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	011b      	lsls	r3, r3, #4
 800c2d2:	693a      	ldr	r2, [r7, #16]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	220a      	movs	r2, #10
 800c2dc:	4393      	bics	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	621a      	str	r2, [r3, #32]
}
 800c2f4:	46c0      	nop			@ (mov r8, r8)
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	b006      	add	sp, #24
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6a1b      	ldr	r3, [r3, #32]
 800c314:	2210      	movs	r2, #16
 800c316:	4393      	bics	r3, r2
 800c318:	001a      	movs	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	4a14      	ldr	r2, [pc, #80]	@ (800c378 <TIM_TI2_SetConfig+0x7c>)
 800c328:	4013      	ands	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	4313      	orrs	r3, r2
 800c334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4a10      	ldr	r2, [pc, #64]	@ (800c37c <TIM_TI2_SetConfig+0x80>)
 800c33a:	4013      	ands	r3, r2
 800c33c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	031b      	lsls	r3, r3, #12
 800c342:	041b      	lsls	r3, r3, #16
 800c344:	0c1b      	lsrs	r3, r3, #16
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	4313      	orrs	r3, r2
 800c34a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	22a0      	movs	r2, #160	@ 0xa0
 800c350:	4393      	bics	r3, r2
 800c352:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	011b      	lsls	r3, r3, #4
 800c358:	22a0      	movs	r2, #160	@ 0xa0
 800c35a:	4013      	ands	r3, r2
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	4313      	orrs	r3, r2
 800c360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	621a      	str	r2, [r3, #32]
}
 800c36e:	46c0      	nop			@ (mov r8, r8)
 800c370:	46bd      	mov	sp, r7
 800c372:	b006      	add	sp, #24
 800c374:	bd80      	pop	{r7, pc}
 800c376:	46c0      	nop			@ (mov r8, r8)
 800c378:	fffffcff 	.word	0xfffffcff
 800c37c:	ffff0fff 	.word	0xffff0fff

0800c380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6a1b      	ldr	r3, [r3, #32]
 800c390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	2210      	movs	r2, #16
 800c398:	4393      	bics	r3, r2
 800c39a:	001a      	movs	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	4a0d      	ldr	r2, [pc, #52]	@ (800c3e0 <TIM_TI2_ConfigInputStage+0x60>)
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	031b      	lsls	r3, r3, #12
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	22a0      	movs	r2, #160	@ 0xa0
 800c3bc:	4393      	bics	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	011b      	lsls	r3, r3, #4
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	621a      	str	r2, [r3, #32]
}
 800c3d6:	46c0      	nop			@ (mov r8, r8)
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	b006      	add	sp, #24
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	46c0      	nop			@ (mov r8, r8)
 800c3e0:	ffff0fff 	.word	0xffff0fff

0800c3e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6a1b      	ldr	r3, [r3, #32]
 800c3fc:	4a17      	ldr	r2, [pc, #92]	@ (800c45c <TIM_TI3_SetConfig+0x78>)
 800c3fe:	401a      	ands	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	69db      	ldr	r3, [r3, #28]
 800c408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2203      	movs	r2, #3
 800c40e:	4393      	bics	r3, r2
 800c410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4313      	orrs	r3, r2
 800c418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	22f0      	movs	r2, #240	@ 0xf0
 800c41e:	4393      	bics	r3, r2
 800c420:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	22ff      	movs	r2, #255	@ 0xff
 800c428:	4013      	ands	r3, r2
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	4a0b      	ldr	r2, [pc, #44]	@ (800c460 <TIM_TI3_SetConfig+0x7c>)
 800c434:	4013      	ands	r3, r2
 800c436:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	021a      	lsls	r2, r3, #8
 800c43c:	23a0      	movs	r3, #160	@ 0xa0
 800c43e:	011b      	lsls	r3, r3, #4
 800c440:	4013      	ands	r3, r2
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	4313      	orrs	r3, r2
 800c446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	621a      	str	r2, [r3, #32]
}
 800c454:	46c0      	nop			@ (mov r8, r8)
 800c456:	46bd      	mov	sp, r7
 800c458:	b006      	add	sp, #24
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	fffffeff 	.word	0xfffffeff
 800c460:	fffff5ff 	.word	0xfffff5ff

0800c464 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	4a18      	ldr	r2, [pc, #96]	@ (800c4e0 <TIM_TI4_SetConfig+0x7c>)
 800c47e:	401a      	ands	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	4a15      	ldr	r2, [pc, #84]	@ (800c4e4 <TIM_TI4_SetConfig+0x80>)
 800c48e:	4013      	ands	r3, r2
 800c490:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	021b      	lsls	r3, r3, #8
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	4313      	orrs	r3, r2
 800c49a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	4a12      	ldr	r2, [pc, #72]	@ (800c4e8 <TIM_TI4_SetConfig+0x84>)
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	031b      	lsls	r3, r3, #12
 800c4a8:	041b      	lsls	r3, r3, #16
 800c4aa:	0c1b      	lsrs	r3, r3, #16
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c4ec <TIM_TI4_SetConfig+0x88>)
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	031a      	lsls	r2, r3, #12
 800c4be:	23a0      	movs	r3, #160	@ 0xa0
 800c4c0:	021b      	lsls	r3, r3, #8
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	621a      	str	r2, [r3, #32]
}
 800c4d6:	46c0      	nop			@ (mov r8, r8)
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	b006      	add	sp, #24
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	46c0      	nop			@ (mov r8, r8)
 800c4e0:	ffffefff 	.word	0xffffefff
 800c4e4:	fffffcff 	.word	0xfffffcff
 800c4e8:	ffff0fff 	.word	0xffff0fff
 800c4ec:	ffff5fff 	.word	0xffff5fff

0800c4f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	4a08      	ldr	r2, [pc, #32]	@ (800c524 <TIM_ITRx_SetConfig+0x34>)
 800c504:	4013      	ands	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	2207      	movs	r2, #7
 800c510:	4313      	orrs	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	609a      	str	r2, [r3, #8]
}
 800c51a:	46c0      	nop			@ (mov r8, r8)
 800c51c:	46bd      	mov	sp, r7
 800c51e:	b004      	add	sp, #16
 800c520:	bd80      	pop	{r7, pc}
 800c522:	46c0      	nop			@ (mov r8, r8)
 800c524:	ffcfff8f 	.word	0xffcfff8f

0800c528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
 800c534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4a09      	ldr	r2, [pc, #36]	@ (800c564 <TIM_ETR_SetConfig+0x3c>)
 800c540:	4013      	ands	r3, r2
 800c542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	021a      	lsls	r2, r3, #8
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	431a      	orrs	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	4313      	orrs	r3, r2
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	4313      	orrs	r3, r2
 800c554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	609a      	str	r2, [r3, #8]
}
 800c55c:	46c0      	nop			@ (mov r8, r8)
 800c55e:	46bd      	mov	sp, r7
 800c560:	b006      	add	sp, #24
 800c562:	bd80      	pop	{r7, pc}
 800c564:	ffff00ff 	.word	0xffff00ff

0800c568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	221f      	movs	r2, #31
 800c578:	4013      	ands	r3, r2
 800c57a:	2201      	movs	r2, #1
 800c57c:	409a      	lsls	r2, r3
 800c57e:	0013      	movs	r3, r2
 800c580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	43d2      	mvns	r2, r2
 800c58a:	401a      	ands	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6a1a      	ldr	r2, [r3, #32]
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	211f      	movs	r1, #31
 800c598:	400b      	ands	r3, r1
 800c59a:	6879      	ldr	r1, [r7, #4]
 800c59c:	4099      	lsls	r1, r3
 800c59e:	000b      	movs	r3, r1
 800c5a0:	431a      	orrs	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	621a      	str	r2, [r3, #32]
}
 800c5a6:	46c0      	nop			@ (mov r8, r8)
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	b006      	add	sp, #24
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2184      	movs	r1, #132	@ 0x84
 800c5bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c630 <TIM_ResetCallback+0x80>)
 800c5be:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2188      	movs	r1, #136	@ 0x88
 800c5c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c634 <TIM_ResetCallback+0x84>)
 800c5c6:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	218c      	movs	r1, #140	@ 0x8c
 800c5cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c638 <TIM_ResetCallback+0x88>)
 800c5ce:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2190      	movs	r1, #144	@ 0x90
 800c5d4:	4a19      	ldr	r2, [pc, #100]	@ (800c63c <TIM_ResetCallback+0x8c>)
 800c5d6:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2194      	movs	r1, #148	@ 0x94
 800c5dc:	4a18      	ldr	r2, [pc, #96]	@ (800c640 <TIM_ResetCallback+0x90>)
 800c5de:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2198      	movs	r1, #152	@ 0x98
 800c5e4:	4a17      	ldr	r2, [pc, #92]	@ (800c644 <TIM_ResetCallback+0x94>)
 800c5e6:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	219c      	movs	r1, #156	@ 0x9c
 800c5ec:	4a16      	ldr	r2, [pc, #88]	@ (800c648 <TIM_ResetCallback+0x98>)
 800c5ee:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	21a0      	movs	r1, #160	@ 0xa0
 800c5f4:	4a15      	ldr	r2, [pc, #84]	@ (800c64c <TIM_ResetCallback+0x9c>)
 800c5f6:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	21a4      	movs	r1, #164	@ 0xa4
 800c5fc:	4a14      	ldr	r2, [pc, #80]	@ (800c650 <TIM_ResetCallback+0xa0>)
 800c5fe:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	21a8      	movs	r1, #168	@ 0xa8
 800c604:	4a13      	ldr	r2, [pc, #76]	@ (800c654 <TIM_ResetCallback+0xa4>)
 800c606:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	21ac      	movs	r1, #172	@ 0xac
 800c60c:	4a12      	ldr	r2, [pc, #72]	@ (800c658 <TIM_ResetCallback+0xa8>)
 800c60e:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	21b0      	movs	r1, #176	@ 0xb0
 800c614:	4a11      	ldr	r2, [pc, #68]	@ (800c65c <TIM_ResetCallback+0xac>)
 800c616:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	21b4      	movs	r1, #180	@ 0xb4
 800c61c:	4a10      	ldr	r2, [pc, #64]	@ (800c660 <TIM_ResetCallback+0xb0>)
 800c61e:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	21b8      	movs	r1, #184	@ 0xb8
 800c624:	4a0f      	ldr	r2, [pc, #60]	@ (800c664 <TIM_ResetCallback+0xb4>)
 800c626:	505a      	str	r2, [r3, r1]
}
 800c628:	46c0      	nop			@ (mov r8, r8)
 800c62a:	46bd      	mov	sp, r7
 800c62c:	b002      	add	sp, #8
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	0800b909 	.word	0x0800b909
 800c634:	0800b919 	.word	0x0800b919
 800c638:	0800b979 	.word	0x0800b979
 800c63c:	0800b989 	.word	0x0800b989
 800c640:	0800b939 	.word	0x0800b939
 800c644:	0800b949 	.word	0x0800b949
 800c648:	0800b929 	.word	0x0800b929
 800c64c:	0800b959 	.word	0x0800b959
 800c650:	0800b969 	.word	0x0800b969
 800c654:	0800b999 	.word	0x0800b999
 800c658:	0800c871 	.word	0x0800c871
 800c65c:	0800c881 	.word	0x0800c881
 800c660:	0800c891 	.word	0x0800c891
 800c664:	0800c8a1 	.word	0x0800c8a1

0800c668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	223c      	movs	r2, #60	@ 0x3c
 800c676:	5c9b      	ldrb	r3, [r3, r2]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d101      	bne.n	800c680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c67c:	2302      	movs	r3, #2
 800c67e:	e050      	b.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	223c      	movs	r2, #60	@ 0x3c
 800c684:	2101      	movs	r1, #1
 800c686:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	223d      	movs	r2, #61	@ 0x3d
 800c68c:	2102      	movs	r1, #2
 800c68e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a21      	ldr	r2, [pc, #132]	@ (800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d108      	bne.n	800c6bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	4a20      	ldr	r2, [pc, #128]	@ (800c730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2270      	movs	r2, #112	@ 0x70
 800c6c0:	4393      	bics	r3, r2
 800c6c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a14      	ldr	r2, [pc, #80]	@ (800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d00a      	beq.n	800c6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	2380      	movs	r3, #128	@ 0x80
 800c6e6:	05db      	lsls	r3, r3, #23
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d004      	beq.n	800c6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a10      	ldr	r2, [pc, #64]	@ (800c734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d10c      	bne.n	800c710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2280      	movs	r2, #128	@ 0x80
 800c6fa:	4393      	bics	r3, r2
 800c6fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	4313      	orrs	r3, r2
 800c706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	223d      	movs	r2, #61	@ 0x3d
 800c714:	2101      	movs	r1, #1
 800c716:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	223c      	movs	r2, #60	@ 0x3c
 800c71c:	2100      	movs	r1, #0
 800c71e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	0018      	movs	r0, r3
 800c724:	46bd      	mov	sp, r7
 800c726:	b004      	add	sp, #16
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	46c0      	nop			@ (mov r8, r8)
 800c72c:	40012c00 	.word	0x40012c00
 800c730:	ff0fffff 	.word	0xff0fffff
 800c734:	40000400 	.word	0x40000400

0800c738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	223c      	movs	r2, #60	@ 0x3c
 800c74a:	5c9b      	ldrb	r3, [r3, r2]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d101      	bne.n	800c754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c750:	2302      	movs	r3, #2
 800c752:	e06f      	b.n	800c834 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	223c      	movs	r2, #60	@ 0x3c
 800c758:	2101      	movs	r1, #1
 800c75a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	22ff      	movs	r2, #255	@ 0xff
 800c760:	4393      	bics	r3, r2
 800c762:	001a      	movs	r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	4313      	orrs	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4a33      	ldr	r2, [pc, #204]	@ (800c83c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c770:	401a      	ands	r2, r3
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	4a30      	ldr	r2, [pc, #192]	@ (800c840 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c77e:	401a      	ands	r2, r3
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	4313      	orrs	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4a2e      	ldr	r2, [pc, #184]	@ (800c844 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c78c:	401a      	ands	r2, r3
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4313      	orrs	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	4a2b      	ldr	r2, [pc, #172]	@ (800c848 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c79a:	401a      	ands	r2, r3
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4a29      	ldr	r2, [pc, #164]	@ (800c84c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c7a8:	401a      	ands	r2, r3
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	4a26      	ldr	r2, [pc, #152]	@ (800c850 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c7b6:	401a      	ands	r2, r3
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4a24      	ldr	r2, [pc, #144]	@ (800c854 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c7c4:	401a      	ands	r2, r3
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	041b      	lsls	r3, r3, #16
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4a21      	ldr	r2, [pc, #132]	@ (800c858 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c7d4:	401a      	ands	r2, r3
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c85c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d11c      	bne.n	800c822 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c860 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c7ec:	401a      	ands	r2, r3
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f2:	051b      	lsls	r3, r3, #20
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	@ (800c864 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c7fc:	401a      	ands	r2, r3
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	4313      	orrs	r3, r2
 800c804:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	4a17      	ldr	r2, [pc, #92]	@ (800c868 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c80a:	401a      	ands	r2, r3
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c810:	4313      	orrs	r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4a15      	ldr	r2, [pc, #84]	@ (800c86c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c818:	401a      	ands	r2, r3
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	223c      	movs	r2, #60	@ 0x3c
 800c82e:	2100      	movs	r1, #0
 800c830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	0018      	movs	r0, r3
 800c836:	46bd      	mov	sp, r7
 800c838:	b004      	add	sp, #16
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	fffffcff 	.word	0xfffffcff
 800c840:	fffffbff 	.word	0xfffffbff
 800c844:	fffff7ff 	.word	0xfffff7ff
 800c848:	ffffefff 	.word	0xffffefff
 800c84c:	ffffdfff 	.word	0xffffdfff
 800c850:	ffffbfff 	.word	0xffffbfff
 800c854:	fff0ffff 	.word	0xfff0ffff
 800c858:	efffffff 	.word	0xefffffff
 800c85c:	40012c00 	.word	0x40012c00
 800c860:	ff0fffff 	.word	0xff0fffff
 800c864:	feffffff 	.word	0xfeffffff
 800c868:	fdffffff 	.word	0xfdffffff
 800c86c:	dfffffff 	.word	0xdfffffff

0800c870 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c878:	46c0      	nop			@ (mov r8, r8)
 800c87a:	46bd      	mov	sp, r7
 800c87c:	b002      	add	sp, #8
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c888:	46c0      	nop			@ (mov r8, r8)
 800c88a:	46bd      	mov	sp, r7
 800c88c:	b002      	add	sp, #8
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c898:	46c0      	nop			@ (mov r8, r8)
 800c89a:	46bd      	mov	sp, r7
 800c89c:	b002      	add	sp, #8
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8a8:	46c0      	nop			@ (mov r8, r8)
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	b002      	add	sp, #8
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e055      	b.n	800c96e <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2288      	movs	r2, #136	@ 0x88
 800c8c6:	589b      	ldr	r3, [r3, r2]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d116      	bne.n	800c8fa <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2284      	movs	r2, #132	@ 0x84
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f000 fce0 	bl	800d29c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	22c4      	movs	r2, #196	@ 0xc4
 800c8e0:	589b      	ldr	r3, [r3, r2]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	21c4      	movs	r1, #196	@ 0xc4
 800c8ea:	4a23      	ldr	r2, [pc, #140]	@ (800c978 <HAL_UART_Init+0xc8>)
 800c8ec:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	22c4      	movs	r2, #196	@ 0xc4
 800c8f2:	589b      	ldr	r3, [r3, r2]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	0010      	movs	r0, r2
 800c8f8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2288      	movs	r2, #136	@ 0x88
 800c8fe:	2124      	movs	r1, #36	@ 0x24
 800c900:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2101      	movs	r1, #1
 800c90e:	438a      	bics	r2, r1
 800c910:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	0018      	movs	r0, r3
 800c91e:	f000 ff85 	bl	800d82c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	0018      	movs	r0, r3
 800c926:	f000 fd09 	bl	800d33c <UART_SetConfig>
 800c92a:	0003      	movs	r3, r0
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e01c      	b.n	800c96e <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	685a      	ldr	r2, [r3, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	490f      	ldr	r1, [pc, #60]	@ (800c97c <HAL_UART_Init+0xcc>)
 800c940:	400a      	ands	r2, r1
 800c942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689a      	ldr	r2, [r3, #8]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	212a      	movs	r1, #42	@ 0x2a
 800c950:	438a      	bics	r2, r1
 800c952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2101      	movs	r1, #1
 800c960:	430a      	orrs	r2, r1
 800c962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	0018      	movs	r0, r3
 800c968:	f001 f814 	bl	800d994 <UART_CheckIdleState>
 800c96c:	0003      	movs	r3, r0
}
 800c96e:	0018      	movs	r0, r3
 800c970:	46bd      	mov	sp, r7
 800c972:	b002      	add	sp, #8
 800c974:	bd80      	pop	{r7, pc}
 800c976:	46c0      	nop			@ (mov r8, r8)
 800c978:	08005d81 	.word	0x08005d81
 800c97c:	ffffb7ff 	.word	0xffffb7ff

0800c980 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	607a      	str	r2, [r7, #4]
 800c98a:	230b      	movs	r3, #11
 800c98c:	18fb      	adds	r3, r7, r3
 800c98e:	1c0a      	adds	r2, r1, #0
 800c990:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c992:	2317      	movs	r3, #23
 800c994:	18fb      	adds	r3, r7, r3
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d109      	bne.n	800c9b4 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2290      	movs	r2, #144	@ 0x90
 800c9a4:	589b      	ldr	r3, [r3, r2]
 800c9a6:	2240      	movs	r2, #64	@ 0x40
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2190      	movs	r1, #144	@ 0x90
 800c9ae:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e08f      	b.n	800cad4 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2288      	movs	r2, #136	@ 0x88
 800c9b8:	589b      	ldr	r3, [r3, r2]
 800c9ba:	2b20      	cmp	r3, #32
 800c9bc:	d157      	bne.n	800ca6e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800c9be:	230b      	movs	r3, #11
 800c9c0:	18fb      	adds	r3, r7, r3
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b0c      	cmp	r3, #12
 800c9c6:	d845      	bhi.n	800ca54 <HAL_UART_RegisterCallback+0xd4>
 800c9c8:	009a      	lsls	r2, r3, #2
 800c9ca:	4b44      	ldr	r3, [pc, #272]	@ (800cadc <HAL_UART_RegisterCallback+0x15c>)
 800c9cc:	18d3      	adds	r3, r2, r3
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2194      	movs	r1, #148	@ 0x94
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	505a      	str	r2, [r3, r1]
        break;
 800c9da:	e078      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2198      	movs	r1, #152	@ 0x98
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	505a      	str	r2, [r3, r1]
        break;
 800c9e4:	e073      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	219c      	movs	r1, #156	@ 0x9c
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	505a      	str	r2, [r3, r1]
        break;
 800c9ee:	e06e      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	21a0      	movs	r1, #160	@ 0xa0
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	505a      	str	r2, [r3, r1]
        break;
 800c9f8:	e069      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	21a4      	movs	r1, #164	@ 0xa4
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	505a      	str	r2, [r3, r1]
        break;
 800ca02:	e064      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	21a8      	movs	r1, #168	@ 0xa8
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	505a      	str	r2, [r3, r1]
        break;
 800ca0c:	e05f      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	21ac      	movs	r1, #172	@ 0xac
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	505a      	str	r2, [r3, r1]
        break;
 800ca16:	e05a      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	21b0      	movs	r1, #176	@ 0xb0
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	505a      	str	r2, [r3, r1]
        break;
 800ca20:	e055      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	21b4      	movs	r1, #180	@ 0xb4
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	505a      	str	r2, [r3, r1]
        break;
 800ca2a:	e050      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	21b8      	movs	r1, #184	@ 0xb8
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	505a      	str	r2, [r3, r1]
        break;
 800ca34:	e04b      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	21bc      	movs	r1, #188	@ 0xbc
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	505a      	str	r2, [r3, r1]
        break;
 800ca3e:	e046      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	21c4      	movs	r1, #196	@ 0xc4
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	505a      	str	r2, [r3, r1]
        break;
 800ca48:	e041      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	21c8      	movs	r1, #200	@ 0xc8
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	505a      	str	r2, [r3, r1]
        break;
 800ca52:	e03c      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2290      	movs	r2, #144	@ 0x90
 800ca58:	589b      	ldr	r3, [r3, r2]
 800ca5a:	2240      	movs	r2, #64	@ 0x40
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2190      	movs	r1, #144	@ 0x90
 800ca62:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800ca64:	2317      	movs	r3, #23
 800ca66:	18fb      	adds	r3, r7, r3
 800ca68:	2201      	movs	r2, #1
 800ca6a:	701a      	strb	r2, [r3, #0]
        break;
 800ca6c:	e02f      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2288      	movs	r2, #136	@ 0x88
 800ca72:	589b      	ldr	r3, [r3, r2]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d11e      	bne.n	800cab6 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800ca78:	230b      	movs	r3, #11
 800ca7a:	18fb      	adds	r3, r7, r3
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2b0b      	cmp	r3, #11
 800ca80:	d002      	beq.n	800ca88 <HAL_UART_RegisterCallback+0x108>
 800ca82:	2b0c      	cmp	r3, #12
 800ca84:	d005      	beq.n	800ca92 <HAL_UART_RegisterCallback+0x112>
 800ca86:	e009      	b.n	800ca9c <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	21c4      	movs	r1, #196	@ 0xc4
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	505a      	str	r2, [r3, r1]
        break;
 800ca90:	e01d      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	21c8      	movs	r1, #200	@ 0xc8
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	505a      	str	r2, [r3, r1]
        break;
 800ca9a:	e018      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2290      	movs	r2, #144	@ 0x90
 800caa0:	589b      	ldr	r3, [r3, r2]
 800caa2:	2240      	movs	r2, #64	@ 0x40
 800caa4:	431a      	orrs	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2190      	movs	r1, #144	@ 0x90
 800caaa:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800caac:	2317      	movs	r3, #23
 800caae:	18fb      	adds	r3, r7, r3
 800cab0:	2201      	movs	r2, #1
 800cab2:	701a      	strb	r2, [r3, #0]
        break;
 800cab4:	e00b      	b.n	800cace <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2290      	movs	r2, #144	@ 0x90
 800caba:	589b      	ldr	r3, [r3, r2]
 800cabc:	2240      	movs	r2, #64	@ 0x40
 800cabe:	431a      	orrs	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2190      	movs	r1, #144	@ 0x90
 800cac4:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800cac6:	2317      	movs	r3, #23
 800cac8:	18fb      	adds	r3, r7, r3
 800caca:	2201      	movs	r2, #1
 800cacc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800cace:	2317      	movs	r3, #23
 800cad0:	18fb      	adds	r3, r7, r3
 800cad2:	781b      	ldrb	r3, [r3, #0]
}
 800cad4:	0018      	movs	r0, r3
 800cad6:	46bd      	mov	sp, r7
 800cad8:	b006      	add	sp, #24
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	0800ec04 	.word	0x0800ec04

0800cae0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	1dbb      	adds	r3, r7, #6
 800caec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	228c      	movs	r2, #140	@ 0x8c
 800caf2:	589b      	ldr	r3, [r3, r2]
 800caf4:	2b20      	cmp	r3, #32
 800caf6:	d14a      	bne.n	800cb8e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <HAL_UART_Receive_DMA+0x26>
 800cafe:	1dbb      	adds	r3, r7, #6
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e042      	b.n	800cb90 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	689a      	ldr	r2, [r3, #8]
 800cb0e:	2380      	movs	r3, #128	@ 0x80
 800cb10:	015b      	lsls	r3, r3, #5
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d109      	bne.n	800cb2a <HAL_UART_Receive_DMA+0x4a>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d105      	bne.n	800cb2a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2201      	movs	r2, #1
 800cb22:	4013      	ands	r3, r2
 800cb24:	d001      	beq.n	800cb2a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e032      	b.n	800cb90 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a18      	ldr	r2, [pc, #96]	@ (800cb98 <HAL_UART_Receive_DMA+0xb8>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d020      	beq.n	800cb7c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	2380      	movs	r3, #128	@ 0x80
 800cb42:	041b      	lsls	r3, r3, #16
 800cb44:	4013      	ands	r3, r2
 800cb46:	d019      	beq.n	800cb7c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb48:	f3ef 8310 	mrs	r3, PRIMASK
 800cb4c:	613b      	str	r3, [r7, #16]
  return(result);
 800cb4e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb50:	61fb      	str	r3, [r7, #28]
 800cb52:	2301      	movs	r3, #1
 800cb54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f383 8810 	msr	PRIMASK, r3
}
 800cb5c:	46c0      	nop			@ (mov r8, r8)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2180      	movs	r1, #128	@ 0x80
 800cb6a:	04c9      	lsls	r1, r1, #19
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	601a      	str	r2, [r3, #0]
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	f383 8810 	msr	PRIMASK, r3
}
 800cb7a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb7c:	1dbb      	adds	r3, r7, #6
 800cb7e:	881a      	ldrh	r2, [r3, #0]
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	0018      	movs	r0, r3
 800cb86:	f001 f81f 	bl	800dbc8 <UART_Start_Receive_DMA>
 800cb8a:	0003      	movs	r3, r0
 800cb8c:	e000      	b.n	800cb90 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800cb8e:	2302      	movs	r3, #2
  }
}
 800cb90:	0018      	movs	r0, r3
 800cb92:	46bd      	mov	sp, r7
 800cb94:	b008      	add	sp, #32
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	40008000 	.word	0x40008000

0800cb9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb9c:	b5b0      	push	{r4, r5, r7, lr}
 800cb9e:	b0aa      	sub	sp, #168	@ 0xa8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	22a4      	movs	r2, #164	@ 0xa4
 800cbac:	18b9      	adds	r1, r7, r2
 800cbae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	20a0      	movs	r0, #160	@ 0xa0
 800cbb8:	1839      	adds	r1, r7, r0
 800cbba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	249c      	movs	r4, #156	@ 0x9c
 800cbc4:	1939      	adds	r1, r7, r4
 800cbc6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbc8:	0011      	movs	r1, r2
 800cbca:	18bb      	adds	r3, r7, r2
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4aa5      	ldr	r2, [pc, #660]	@ (800ce64 <HAL_UART_IRQHandler+0x2c8>)
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	2298      	movs	r2, #152	@ 0x98
 800cbd4:	18bd      	adds	r5, r7, r2
 800cbd6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800cbd8:	18bb      	adds	r3, r7, r2
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d11a      	bne.n	800cc16 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbe0:	187b      	adds	r3, r7, r1
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2220      	movs	r2, #32
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	d015      	beq.n	800cc16 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbea:	183b      	adds	r3, r7, r0
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2220      	movs	r2, #32
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	d105      	bne.n	800cc00 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbf4:	193b      	adds	r3, r7, r4
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	2380      	movs	r3, #128	@ 0x80
 800cbfa:	055b      	lsls	r3, r3, #21
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	d00a      	beq.n	800cc16 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d100      	bne.n	800cc0a <HAL_UART_IRQHandler+0x6e>
 800cc08:	e2ea      	b.n	800d1e0 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	0010      	movs	r0, r2
 800cc12:	4798      	blx	r3
      }
      return;
 800cc14:	e2e4      	b.n	800d1e0 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc16:	2398      	movs	r3, #152	@ 0x98
 800cc18:	18fb      	adds	r3, r7, r3
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d100      	bne.n	800cc22 <HAL_UART_IRQHandler+0x86>
 800cc20:	e128      	b.n	800ce74 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc22:	239c      	movs	r3, #156	@ 0x9c
 800cc24:	18fb      	adds	r3, r7, r3
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a8f      	ldr	r2, [pc, #572]	@ (800ce68 <HAL_UART_IRQHandler+0x2cc>)
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	d106      	bne.n	800cc3c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc2e:	23a0      	movs	r3, #160	@ 0xa0
 800cc30:	18fb      	adds	r3, r7, r3
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a8d      	ldr	r2, [pc, #564]	@ (800ce6c <HAL_UART_IRQHandler+0x2d0>)
 800cc36:	4013      	ands	r3, r2
 800cc38:	d100      	bne.n	800cc3c <HAL_UART_IRQHandler+0xa0>
 800cc3a:	e11b      	b.n	800ce74 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc3c:	23a4      	movs	r3, #164	@ 0xa4
 800cc3e:	18fb      	adds	r3, r7, r3
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2201      	movs	r2, #1
 800cc44:	4013      	ands	r3, r2
 800cc46:	d012      	beq.n	800cc6e <HAL_UART_IRQHandler+0xd2>
 800cc48:	23a0      	movs	r3, #160	@ 0xa0
 800cc4a:	18fb      	adds	r3, r7, r3
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	2380      	movs	r3, #128	@ 0x80
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	4013      	ands	r3, r2
 800cc54:	d00b      	beq.n	800cc6e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2290      	movs	r2, #144	@ 0x90
 800cc62:	589b      	ldr	r3, [r3, r2]
 800cc64:	2201      	movs	r2, #1
 800cc66:	431a      	orrs	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2190      	movs	r1, #144	@ 0x90
 800cc6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc6e:	23a4      	movs	r3, #164	@ 0xa4
 800cc70:	18fb      	adds	r3, r7, r3
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2202      	movs	r2, #2
 800cc76:	4013      	ands	r3, r2
 800cc78:	d011      	beq.n	800cc9e <HAL_UART_IRQHandler+0x102>
 800cc7a:	239c      	movs	r3, #156	@ 0x9c
 800cc7c:	18fb      	adds	r3, r7, r3
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2201      	movs	r2, #1
 800cc82:	4013      	ands	r3, r2
 800cc84:	d00b      	beq.n	800cc9e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2202      	movs	r2, #2
 800cc8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2290      	movs	r2, #144	@ 0x90
 800cc92:	589b      	ldr	r3, [r3, r2]
 800cc94:	2204      	movs	r2, #4
 800cc96:	431a      	orrs	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2190      	movs	r1, #144	@ 0x90
 800cc9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc9e:	23a4      	movs	r3, #164	@ 0xa4
 800cca0:	18fb      	adds	r3, r7, r3
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2204      	movs	r2, #4
 800cca6:	4013      	ands	r3, r2
 800cca8:	d011      	beq.n	800ccce <HAL_UART_IRQHandler+0x132>
 800ccaa:	239c      	movs	r3, #156	@ 0x9c
 800ccac:	18fb      	adds	r3, r7, r3
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	d00b      	beq.n	800ccce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2204      	movs	r2, #4
 800ccbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2290      	movs	r2, #144	@ 0x90
 800ccc2:	589b      	ldr	r3, [r3, r2]
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2190      	movs	r1, #144	@ 0x90
 800cccc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccce:	23a4      	movs	r3, #164	@ 0xa4
 800ccd0:	18fb      	adds	r3, r7, r3
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2208      	movs	r2, #8
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	d017      	beq.n	800cd0a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccda:	23a0      	movs	r3, #160	@ 0xa0
 800ccdc:	18fb      	adds	r3, r7, r3
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2220      	movs	r2, #32
 800cce2:	4013      	ands	r3, r2
 800cce4:	d105      	bne.n	800ccf2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cce6:	239c      	movs	r3, #156	@ 0x9c
 800cce8:	18fb      	adds	r3, r7, r3
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a5e      	ldr	r2, [pc, #376]	@ (800ce68 <HAL_UART_IRQHandler+0x2cc>)
 800ccee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccf0:	d00b      	beq.n	800cd0a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2208      	movs	r2, #8
 800ccf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2290      	movs	r2, #144	@ 0x90
 800ccfe:	589b      	ldr	r3, [r3, r2]
 800cd00:	2208      	movs	r2, #8
 800cd02:	431a      	orrs	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2190      	movs	r1, #144	@ 0x90
 800cd08:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd0a:	23a4      	movs	r3, #164	@ 0xa4
 800cd0c:	18fb      	adds	r3, r7, r3
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	2380      	movs	r3, #128	@ 0x80
 800cd12:	011b      	lsls	r3, r3, #4
 800cd14:	4013      	ands	r3, r2
 800cd16:	d013      	beq.n	800cd40 <HAL_UART_IRQHandler+0x1a4>
 800cd18:	23a0      	movs	r3, #160	@ 0xa0
 800cd1a:	18fb      	adds	r3, r7, r3
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	2380      	movs	r3, #128	@ 0x80
 800cd20:	04db      	lsls	r3, r3, #19
 800cd22:	4013      	ands	r3, r2
 800cd24:	d00c      	beq.n	800cd40 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2280      	movs	r2, #128	@ 0x80
 800cd2c:	0112      	lsls	r2, r2, #4
 800cd2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2290      	movs	r2, #144	@ 0x90
 800cd34:	589b      	ldr	r3, [r3, r2]
 800cd36:	2220      	movs	r2, #32
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2190      	movs	r1, #144	@ 0x90
 800cd3e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2290      	movs	r2, #144	@ 0x90
 800cd44:	589b      	ldr	r3, [r3, r2]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d100      	bne.n	800cd4c <HAL_UART_IRQHandler+0x1b0>
 800cd4a:	e24b      	b.n	800d1e4 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd4c:	23a4      	movs	r3, #164	@ 0xa4
 800cd4e:	18fb      	adds	r3, r7, r3
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2220      	movs	r2, #32
 800cd54:	4013      	ands	r3, r2
 800cd56:	d015      	beq.n	800cd84 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd58:	23a0      	movs	r3, #160	@ 0xa0
 800cd5a:	18fb      	adds	r3, r7, r3
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2220      	movs	r2, #32
 800cd60:	4013      	ands	r3, r2
 800cd62:	d106      	bne.n	800cd72 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd64:	239c      	movs	r3, #156	@ 0x9c
 800cd66:	18fb      	adds	r3, r7, r3
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	2380      	movs	r3, #128	@ 0x80
 800cd6c:	055b      	lsls	r3, r3, #21
 800cd6e:	4013      	ands	r3, r2
 800cd70:	d008      	beq.n	800cd84 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d004      	beq.n	800cd84 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	0010      	movs	r0, r2
 800cd82:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2290      	movs	r2, #144	@ 0x90
 800cd88:	589b      	ldr	r3, [r3, r2]
 800cd8a:	2194      	movs	r1, #148	@ 0x94
 800cd8c:	187a      	adds	r2, r7, r1
 800cd8e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	2240      	movs	r2, #64	@ 0x40
 800cd98:	4013      	ands	r3, r2
 800cd9a:	2b40      	cmp	r3, #64	@ 0x40
 800cd9c:	d004      	beq.n	800cda8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd9e:	187b      	adds	r3, r7, r1
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2228      	movs	r2, #40	@ 0x28
 800cda4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cda6:	d050      	beq.n	800ce4a <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	0018      	movs	r0, r3
 800cdac:	f000 fff2 	bl	800dd94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	2240      	movs	r2, #64	@ 0x40
 800cdb8:	4013      	ands	r3, r2
 800cdba:	2b40      	cmp	r3, #64	@ 0x40
 800cdbc:	d13e      	bne.n	800ce3c <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdbe:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800cdc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdc6:	2090      	movs	r0, #144	@ 0x90
 800cdc8:	183a      	adds	r2, r7, r0
 800cdca:	6013      	str	r3, [r2, #0]
 800cdcc:	2301      	movs	r3, #1
 800cdce:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdd2:	f383 8810 	msr	PRIMASK, r3
}
 800cdd6:	46c0      	nop			@ (mov r8, r8)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2140      	movs	r1, #64	@ 0x40
 800cde4:	438a      	bics	r2, r1
 800cde6:	609a      	str	r2, [r3, #8]
 800cde8:	183b      	adds	r3, r7, r0
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdf0:	f383 8810 	msr	PRIMASK, r3
}
 800cdf4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2280      	movs	r2, #128	@ 0x80
 800cdfa:	589b      	ldr	r3, [r3, r2]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d016      	beq.n	800ce2e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2280      	movs	r2, #128	@ 0x80
 800ce04:	589b      	ldr	r3, [r3, r2]
 800ce06:	4a1a      	ldr	r2, [pc, #104]	@ (800ce70 <HAL_UART_IRQHandler+0x2d4>)
 800ce08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2280      	movs	r2, #128	@ 0x80
 800ce0e:	589b      	ldr	r3, [r3, r2]
 800ce10:	0018      	movs	r0, r3
 800ce12:	f7fb fb3f 	bl	8008494 <HAL_DMA_Abort_IT>
 800ce16:	1e03      	subs	r3, r0, #0
 800ce18:	d022      	beq.n	800ce60 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2280      	movs	r2, #128	@ 0x80
 800ce1e:	589b      	ldr	r3, [r3, r2]
 800ce20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	2180      	movs	r1, #128	@ 0x80
 800ce26:	5852      	ldr	r2, [r2, r1]
 800ce28:	0010      	movs	r0, r2
 800ce2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce2c:	e018      	b.n	800ce60 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	22a4      	movs	r2, #164	@ 0xa4
 800ce32:	589b      	ldr	r3, [r3, r2]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	0010      	movs	r0, r2
 800ce38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce3a:	e011      	b.n	800ce60 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	22a4      	movs	r2, #164	@ 0xa4
 800ce40:	589b      	ldr	r3, [r3, r2]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	0010      	movs	r0, r2
 800ce46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce48:	e00a      	b.n	800ce60 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	22a4      	movs	r2, #164	@ 0xa4
 800ce4e:	589b      	ldr	r3, [r3, r2]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	0010      	movs	r0, r2
 800ce54:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2290      	movs	r2, #144	@ 0x90
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800ce5e:	e1c1      	b.n	800d1e4 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce60:	46c0      	nop			@ (mov r8, r8)
    return;
 800ce62:	e1bf      	b.n	800d1e4 <HAL_UART_IRQHandler+0x648>
 800ce64:	0000080f 	.word	0x0000080f
 800ce68:	10000001 	.word	0x10000001
 800ce6c:	04000120 	.word	0x04000120
 800ce70:	0800e067 	.word	0x0800e067

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d000      	beq.n	800ce7e <HAL_UART_IRQHandler+0x2e2>
 800ce7c:	e140      	b.n	800d100 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce7e:	23a4      	movs	r3, #164	@ 0xa4
 800ce80:	18fb      	adds	r3, r7, r3
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2210      	movs	r2, #16
 800ce86:	4013      	ands	r3, r2
 800ce88:	d100      	bne.n	800ce8c <HAL_UART_IRQHandler+0x2f0>
 800ce8a:	e139      	b.n	800d100 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce8c:	23a0      	movs	r3, #160	@ 0xa0
 800ce8e:	18fb      	adds	r3, r7, r3
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2210      	movs	r2, #16
 800ce94:	4013      	ands	r3, r2
 800ce96:	d100      	bne.n	800ce9a <HAL_UART_IRQHandler+0x2fe>
 800ce98:	e132      	b.n	800d100 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2210      	movs	r2, #16
 800cea0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	2240      	movs	r2, #64	@ 0x40
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b40      	cmp	r3, #64	@ 0x40
 800ceae:	d000      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x316>
 800ceb0:	e0a5      	b.n	800cffe <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2280      	movs	r2, #128	@ 0x80
 800ceb6:	589b      	ldr	r3, [r3, r2]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	217e      	movs	r1, #126	@ 0x7e
 800cebe:	187b      	adds	r3, r7, r1
 800cec0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cec2:	187b      	adds	r3, r7, r1
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d100      	bne.n	800cecc <HAL_UART_IRQHandler+0x330>
 800ceca:	e18d      	b.n	800d1e8 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	225c      	movs	r2, #92	@ 0x5c
 800ced0:	5a9b      	ldrh	r3, [r3, r2]
 800ced2:	187a      	adds	r2, r7, r1
 800ced4:	8812      	ldrh	r2, [r2, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d300      	bcc.n	800cedc <HAL_UART_IRQHandler+0x340>
 800ceda:	e185      	b.n	800d1e8 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	187a      	adds	r2, r7, r1
 800cee0:	215e      	movs	r1, #94	@ 0x5e
 800cee2:	8812      	ldrh	r2, [r2, #0]
 800cee4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2280      	movs	r2, #128	@ 0x80
 800ceea:	589b      	ldr	r3, [r3, r2]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2220      	movs	r2, #32
 800cef2:	4013      	ands	r3, r2
 800cef4:	d170      	bne.n	800cfd8 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cef6:	f3ef 8310 	mrs	r3, PRIMASK
 800cefa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cefe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf00:	2301      	movs	r3, #1
 800cf02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf06:	f383 8810 	msr	PRIMASK, r3
}
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	49b8      	ldr	r1, [pc, #736]	@ (800d1f8 <HAL_UART_IRQHandler+0x65c>)
 800cf18:	400a      	ands	r2, r1
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf22:	f383 8810 	msr	PRIMASK, r3
}
 800cf26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf28:	f3ef 8310 	mrs	r3, PRIMASK
 800cf2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800cf2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf30:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf32:	2301      	movs	r3, #1
 800cf34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf38:	f383 8810 	msr	PRIMASK, r3
}
 800cf3c:	46c0      	nop			@ (mov r8, r8)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2101      	movs	r1, #1
 800cf4a:	438a      	bics	r2, r1
 800cf4c:	609a      	str	r2, [r3, #8]
 800cf4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf54:	f383 8810 	msr	PRIMASK, r3
}
 800cf58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800cf60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf62:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf64:	2301      	movs	r3, #1
 800cf66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf6a:	f383 8810 	msr	PRIMASK, r3
}
 800cf6e:	46c0      	nop			@ (mov r8, r8)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689a      	ldr	r2, [r3, #8]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2140      	movs	r1, #64	@ 0x40
 800cf7c:	438a      	bics	r2, r1
 800cf7e:	609a      	str	r2, [r3, #8]
 800cf80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf86:	f383 8810 	msr	PRIMASK, r3
}
 800cf8a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	228c      	movs	r2, #140	@ 0x8c
 800cf90:	2120      	movs	r1, #32
 800cf92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf9a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800cfa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfaa:	f383 8810 	msr	PRIMASK, r3
}
 800cfae:	46c0      	nop			@ (mov r8, r8)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2110      	movs	r1, #16
 800cfbc:	438a      	bics	r2, r1
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfc6:	f383 8810 	msr	PRIMASK, r3
}
 800cfca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2280      	movs	r2, #128	@ 0x80
 800cfd0:	589b      	ldr	r3, [r3, r2]
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f7fb f9fc 	bl	80083d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	22c0      	movs	r2, #192	@ 0xc0
 800cfe2:	589b      	ldr	r3, [r3, r2]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	215c      	movs	r1, #92	@ 0x5c
 800cfe8:	5a51      	ldrh	r1, [r2, r1]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	205e      	movs	r0, #94	@ 0x5e
 800cfee:	5a12      	ldrh	r2, [r2, r0]
 800cff0:	b292      	uxth	r2, r2
 800cff2:	1a8a      	subs	r2, r1, r2
 800cff4:	b291      	uxth	r1, r2
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	0010      	movs	r0, r2
 800cffa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cffc:	e0f4      	b.n	800d1e8 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	225c      	movs	r2, #92	@ 0x5c
 800d002:	5a99      	ldrh	r1, [r3, r2]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	225e      	movs	r2, #94	@ 0x5e
 800d008:	5a9b      	ldrh	r3, [r3, r2]
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	208e      	movs	r0, #142	@ 0x8e
 800d00e:	183b      	adds	r3, r7, r0
 800d010:	1a8a      	subs	r2, r1, r2
 800d012:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	225e      	movs	r2, #94	@ 0x5e
 800d018:	5a9b      	ldrh	r3, [r3, r2]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d100      	bne.n	800d022 <HAL_UART_IRQHandler+0x486>
 800d020:	e0e4      	b.n	800d1ec <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800d022:	183b      	adds	r3, r7, r0
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d100      	bne.n	800d02c <HAL_UART_IRQHandler+0x490>
 800d02a:	e0df      	b.n	800d1ec <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d02c:	f3ef 8310 	mrs	r3, PRIMASK
 800d030:	60fb      	str	r3, [r7, #12]
  return(result);
 800d032:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d034:	2488      	movs	r4, #136	@ 0x88
 800d036:	193a      	adds	r2, r7, r4
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	2301      	movs	r3, #1
 800d03c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	f383 8810 	msr	PRIMASK, r3
}
 800d044:	46c0      	nop			@ (mov r8, r8)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	496a      	ldr	r1, [pc, #424]	@ (800d1fc <HAL_UART_IRQHandler+0x660>)
 800d052:	400a      	ands	r2, r1
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	193b      	adds	r3, r7, r4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f383 8810 	msr	PRIMASK, r3
}
 800d062:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d064:	f3ef 8310 	mrs	r3, PRIMASK
 800d068:	61bb      	str	r3, [r7, #24]
  return(result);
 800d06a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d06c:	2484      	movs	r4, #132	@ 0x84
 800d06e:	193a      	adds	r2, r7, r4
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	2301      	movs	r3, #1
 800d074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	f383 8810 	msr	PRIMASK, r3
}
 800d07c:	46c0      	nop			@ (mov r8, r8)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	495d      	ldr	r1, [pc, #372]	@ (800d200 <HAL_UART_IRQHandler+0x664>)
 800d08a:	400a      	ands	r2, r1
 800d08c:	609a      	str	r2, [r3, #8]
 800d08e:	193b      	adds	r3, r7, r4
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	f383 8810 	msr	PRIMASK, r3
}
 800d09a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	228c      	movs	r2, #140	@ 0x8c
 800d0a0:	2120      	movs	r1, #32
 800d0a2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b8:	2480      	movs	r4, #128	@ 0x80
 800d0ba:	193a      	adds	r2, r7, r4
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	2301      	movs	r3, #1
 800d0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c4:	f383 8810 	msr	PRIMASK, r3
}
 800d0c8:	46c0      	nop			@ (mov r8, r8)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2110      	movs	r1, #16
 800d0d6:	438a      	bics	r2, r1
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	193b      	adds	r3, r7, r4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	f383 8810 	msr	PRIMASK, r3
}
 800d0e6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	22c0      	movs	r2, #192	@ 0xc0
 800d0f2:	589b      	ldr	r3, [r3, r2]
 800d0f4:	183a      	adds	r2, r7, r0
 800d0f6:	8811      	ldrh	r1, [r2, #0]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	0010      	movs	r0, r2
 800d0fc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0fe:	e075      	b.n	800d1ec <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d100:	23a4      	movs	r3, #164	@ 0xa4
 800d102:	18fb      	adds	r3, r7, r3
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	2380      	movs	r3, #128	@ 0x80
 800d108:	035b      	lsls	r3, r3, #13
 800d10a:	4013      	ands	r3, r2
 800d10c:	d012      	beq.n	800d134 <HAL_UART_IRQHandler+0x598>
 800d10e:	239c      	movs	r3, #156	@ 0x9c
 800d110:	18fb      	adds	r3, r7, r3
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	2380      	movs	r3, #128	@ 0x80
 800d116:	03db      	lsls	r3, r3, #15
 800d118:	4013      	ands	r3, r2
 800d11a:	d00b      	beq.n	800d134 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2280      	movs	r2, #128	@ 0x80
 800d122:	0352      	lsls	r2, r2, #13
 800d124:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	22b4      	movs	r2, #180	@ 0xb4
 800d12a:	589b      	ldr	r3, [r3, r2]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	0010      	movs	r0, r2
 800d130:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d132:	e05e      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d134:	23a4      	movs	r3, #164	@ 0xa4
 800d136:	18fb      	adds	r3, r7, r3
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2280      	movs	r2, #128	@ 0x80
 800d13c:	4013      	ands	r3, r2
 800d13e:	d016      	beq.n	800d16e <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d140:	23a0      	movs	r3, #160	@ 0xa0
 800d142:	18fb      	adds	r3, r7, r3
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2280      	movs	r2, #128	@ 0x80
 800d148:	4013      	ands	r3, r2
 800d14a:	d106      	bne.n	800d15a <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d14c:	239c      	movs	r3, #156	@ 0x9c
 800d14e:	18fb      	adds	r3, r7, r3
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	2380      	movs	r3, #128	@ 0x80
 800d154:	041b      	lsls	r3, r3, #16
 800d156:	4013      	ands	r3, r2
 800d158:	d009      	beq.n	800d16e <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d046      	beq.n	800d1f0 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	0010      	movs	r0, r2
 800d16a:	4798      	blx	r3
    }
    return;
 800d16c:	e040      	b.n	800d1f0 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d16e:	23a4      	movs	r3, #164	@ 0xa4
 800d170:	18fb      	adds	r3, r7, r3
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2240      	movs	r2, #64	@ 0x40
 800d176:	4013      	ands	r3, r2
 800d178:	d00a      	beq.n	800d190 <HAL_UART_IRQHandler+0x5f4>
 800d17a:	23a0      	movs	r3, #160	@ 0xa0
 800d17c:	18fb      	adds	r3, r7, r3
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2240      	movs	r2, #64	@ 0x40
 800d182:	4013      	ands	r3, r2
 800d184:	d004      	beq.n	800d190 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	0018      	movs	r0, r3
 800d18a:	f000 ff85 	bl	800e098 <UART_EndTransmit_IT>
    return;
 800d18e:	e030      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d190:	23a4      	movs	r3, #164	@ 0xa4
 800d192:	18fb      	adds	r3, r7, r3
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	2380      	movs	r3, #128	@ 0x80
 800d198:	041b      	lsls	r3, r3, #16
 800d19a:	4013      	ands	r3, r2
 800d19c:	d00d      	beq.n	800d1ba <HAL_UART_IRQHandler+0x61e>
 800d19e:	23a0      	movs	r3, #160	@ 0xa0
 800d1a0:	18fb      	adds	r3, r7, r3
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	2380      	movs	r3, #128	@ 0x80
 800d1a6:	05db      	lsls	r3, r3, #23
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	d006      	beq.n	800d1ba <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	22bc      	movs	r2, #188	@ 0xbc
 800d1b0:	589b      	ldr	r3, [r3, r2]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	0010      	movs	r0, r2
 800d1b6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1b8:	e01b      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d1ba:	23a4      	movs	r3, #164	@ 0xa4
 800d1bc:	18fb      	adds	r3, r7, r3
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	2380      	movs	r3, #128	@ 0x80
 800d1c2:	045b      	lsls	r3, r3, #17
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	d014      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x656>
 800d1c8:	23a0      	movs	r3, #160	@ 0xa0
 800d1ca:	18fb      	adds	r3, r7, r3
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	da0f      	bge.n	800d1f2 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	22b8      	movs	r2, #184	@ 0xb8
 800d1d6:	589b      	ldr	r3, [r3, r2]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	0010      	movs	r0, r2
 800d1dc:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1de:	e008      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
      return;
 800d1e0:	46c0      	nop			@ (mov r8, r8)
 800d1e2:	e006      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
    return;
 800d1e4:	46c0      	nop			@ (mov r8, r8)
 800d1e6:	e004      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
      return;
 800d1e8:	46c0      	nop			@ (mov r8, r8)
 800d1ea:	e002      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
      return;
 800d1ec:	46c0      	nop			@ (mov r8, r8)
 800d1ee:	e000      	b.n	800d1f2 <HAL_UART_IRQHandler+0x656>
    return;
 800d1f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	b02a      	add	sp, #168	@ 0xa8
 800d1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800d1f8:	fffffeff 	.word	0xfffffeff
 800d1fc:	fffffedf 	.word	0xfffffedf
 800d200:	effffffe 	.word	0xeffffffe

0800d204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d20c:	46c0      	nop			@ (mov r8, r8)
 800d20e:	46bd      	mov	sp, r7
 800d210:	b002      	add	sp, #8
 800d212:	bd80      	pop	{r7, pc}

0800d214 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d21c:	46c0      	nop			@ (mov r8, r8)
 800d21e:	46bd      	mov	sp, r7
 800d220:	b002      	add	sp, #8
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d22c:	46c0      	nop			@ (mov r8, r8)
 800d22e:	46bd      	mov	sp, r7
 800d230:	b002      	add	sp, #8
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d23c:	46c0      	nop			@ (mov r8, r8)
 800d23e:	46bd      	mov	sp, r7
 800d240:	b002      	add	sp, #8
 800d242:	bd80      	pop	{r7, pc}

0800d244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d24c:	46c0      	nop			@ (mov r8, r8)
 800d24e:	46bd      	mov	sp, r7
 800d250:	b002      	add	sp, #8
 800d252:	bd80      	pop	{r7, pc}

0800d254 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d25c:	46c0      	nop			@ (mov r8, r8)
 800d25e:	46bd      	mov	sp, r7
 800d260:	b002      	add	sp, #8
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d26c:	46c0      	nop			@ (mov r8, r8)
 800d26e:	46bd      	mov	sp, r7
 800d270:	b002      	add	sp, #8
 800d272:	bd80      	pop	{r7, pc}

0800d274 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d27c:	46c0      	nop			@ (mov r8, r8)
 800d27e:	46bd      	mov	sp, r7
 800d280:	b002      	add	sp, #8
 800d282:	bd80      	pop	{r7, pc}

0800d284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	000a      	movs	r2, r1
 800d28e:	1cbb      	adds	r3, r7, #2
 800d290:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d292:	46c0      	nop			@ (mov r8, r8)
 800d294:	46bd      	mov	sp, r7
 800d296:	b002      	add	sp, #8
 800d298:	bd80      	pop	{r7, pc}
	...

0800d29c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2194      	movs	r1, #148	@ 0x94
 800d2a8:	4a18      	ldr	r2, [pc, #96]	@ (800d30c <UART_InitCallbacksToDefault+0x70>)
 800d2aa:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2198      	movs	r1, #152	@ 0x98
 800d2b0:	4a17      	ldr	r2, [pc, #92]	@ (800d310 <UART_InitCallbacksToDefault+0x74>)
 800d2b2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	219c      	movs	r1, #156	@ 0x9c
 800d2b8:	4a16      	ldr	r2, [pc, #88]	@ (800d314 <UART_InitCallbacksToDefault+0x78>)
 800d2ba:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	21a0      	movs	r1, #160	@ 0xa0
 800d2c0:	4a15      	ldr	r2, [pc, #84]	@ (800d318 <UART_InitCallbacksToDefault+0x7c>)
 800d2c2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	21a4      	movs	r1, #164	@ 0xa4
 800d2c8:	4a14      	ldr	r2, [pc, #80]	@ (800d31c <UART_InitCallbacksToDefault+0x80>)
 800d2ca:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	21a8      	movs	r1, #168	@ 0xa8
 800d2d0:	4a13      	ldr	r2, [pc, #76]	@ (800d320 <UART_InitCallbacksToDefault+0x84>)
 800d2d2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	21ac      	movs	r1, #172	@ 0xac
 800d2d8:	4a12      	ldr	r2, [pc, #72]	@ (800d324 <UART_InitCallbacksToDefault+0x88>)
 800d2da:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	21b0      	movs	r1, #176	@ 0xb0
 800d2e0:	4a11      	ldr	r2, [pc, #68]	@ (800d328 <UART_InitCallbacksToDefault+0x8c>)
 800d2e2:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	21b4      	movs	r1, #180	@ 0xb4
 800d2e8:	4a10      	ldr	r2, [pc, #64]	@ (800d32c <UART_InitCallbacksToDefault+0x90>)
 800d2ea:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	21b8      	movs	r1, #184	@ 0xb8
 800d2f0:	4a0f      	ldr	r2, [pc, #60]	@ (800d330 <UART_InitCallbacksToDefault+0x94>)
 800d2f2:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	21bc      	movs	r1, #188	@ 0xbc
 800d2f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d334 <UART_InitCallbacksToDefault+0x98>)
 800d2fa:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	21c0      	movs	r1, #192	@ 0xc0
 800d300:	4a0d      	ldr	r2, [pc, #52]	@ (800d338 <UART_InitCallbacksToDefault+0x9c>)
 800d302:	505a      	str	r2, [r3, r1]

}
 800d304:	46c0      	nop			@ (mov r8, r8)
 800d306:	46bd      	mov	sp, r7
 800d308:	b002      	add	sp, #8
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	0800d215 	.word	0x0800d215
 800d310:	0800d205 	.word	0x0800d205
 800d314:	0800d235 	.word	0x0800d235
 800d318:	0800d225 	.word	0x0800d225
 800d31c:	0800d245 	.word	0x0800d245
 800d320:	0800d255 	.word	0x0800d255
 800d324:	0800d265 	.word	0x0800d265
 800d328:	0800d275 	.word	0x0800d275
 800d32c:	0800e0f5 	.word	0x0800e0f5
 800d330:	0800e105 	.word	0x0800e105
 800d334:	0800e115 	.word	0x0800e115
 800d338:	0800d285 	.word	0x0800d285

0800d33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d33c:	b5b0      	push	{r4, r5, r7, lr}
 800d33e:	b090      	sub	sp, #64	@ 0x40
 800d340:	af00      	add	r7, sp, #0
 800d342:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d344:	231a      	movs	r3, #26
 800d346:	2220      	movs	r2, #32
 800d348:	189b      	adds	r3, r3, r2
 800d34a:	19db      	adds	r3, r3, r7
 800d34c:	2200      	movs	r2, #0
 800d34e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d352:	689a      	ldr	r2, [r3, #8]
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	431a      	orrs	r2, r3
 800d35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	431a      	orrs	r2, r3
 800d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d362:	69db      	ldr	r3, [r3, #28]
 800d364:	4313      	orrs	r3, r2
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4ac4      	ldr	r2, [pc, #784]	@ (800d680 <UART_SetConfig+0x344>)
 800d370:	4013      	ands	r3, r2
 800d372:	0019      	movs	r1, r3
 800d374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d37a:	430b      	orrs	r3, r1
 800d37c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	4abf      	ldr	r2, [pc, #764]	@ (800d684 <UART_SetConfig+0x348>)
 800d386:	4013      	ands	r3, r2
 800d388:	0018      	movs	r0, r3
 800d38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38c:	68d9      	ldr	r1, [r3, #12]
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	0003      	movs	r3, r0
 800d394:	430b      	orrs	r3, r1
 800d396:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4ab9      	ldr	r2, [pc, #740]	@ (800d688 <UART_SetConfig+0x34c>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d004      	beq.n	800d3b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3aa:	6a1b      	ldr	r3, [r3, #32]
 800d3ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	4ab4      	ldr	r2, [pc, #720]	@ (800d68c <UART_SetConfig+0x350>)
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	0019      	movs	r1, r3
 800d3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c4:	430b      	orrs	r3, r1
 800d3c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ce:	220f      	movs	r2, #15
 800d3d0:	4393      	bics	r3, r2
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	0003      	movs	r3, r0
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4aaa      	ldr	r2, [pc, #680]	@ (800d690 <UART_SetConfig+0x354>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d131      	bne.n	800d450 <UART_SetConfig+0x114>
 800d3ec:	4ba9      	ldr	r3, [pc, #676]	@ (800d694 <UART_SetConfig+0x358>)
 800d3ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3f0:	2203      	movs	r2, #3
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d01d      	beq.n	800d434 <UART_SetConfig+0xf8>
 800d3f8:	d823      	bhi.n	800d442 <UART_SetConfig+0x106>
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	d00c      	beq.n	800d418 <UART_SetConfig+0xdc>
 800d3fe:	d820      	bhi.n	800d442 <UART_SetConfig+0x106>
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <UART_SetConfig+0xce>
 800d404:	2b01      	cmp	r3, #1
 800d406:	d00e      	beq.n	800d426 <UART_SetConfig+0xea>
 800d408:	e01b      	b.n	800d442 <UART_SetConfig+0x106>
 800d40a:	231b      	movs	r3, #27
 800d40c:	2220      	movs	r2, #32
 800d40e:	189b      	adds	r3, r3, r2
 800d410:	19db      	adds	r3, r3, r7
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
 800d416:	e071      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d418:	231b      	movs	r3, #27
 800d41a:	2220      	movs	r2, #32
 800d41c:	189b      	adds	r3, r3, r2
 800d41e:	19db      	adds	r3, r3, r7
 800d420:	2202      	movs	r2, #2
 800d422:	701a      	strb	r2, [r3, #0]
 800d424:	e06a      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d426:	231b      	movs	r3, #27
 800d428:	2220      	movs	r2, #32
 800d42a:	189b      	adds	r3, r3, r2
 800d42c:	19db      	adds	r3, r3, r7
 800d42e:	2204      	movs	r2, #4
 800d430:	701a      	strb	r2, [r3, #0]
 800d432:	e063      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d434:	231b      	movs	r3, #27
 800d436:	2220      	movs	r2, #32
 800d438:	189b      	adds	r3, r3, r2
 800d43a:	19db      	adds	r3, r3, r7
 800d43c:	2208      	movs	r2, #8
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	e05c      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d442:	231b      	movs	r3, #27
 800d444:	2220      	movs	r2, #32
 800d446:	189b      	adds	r3, r3, r2
 800d448:	19db      	adds	r3, r3, r7
 800d44a:	2210      	movs	r2, #16
 800d44c:	701a      	strb	r2, [r3, #0]
 800d44e:	e055      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a90      	ldr	r2, [pc, #576]	@ (800d698 <UART_SetConfig+0x35c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d106      	bne.n	800d468 <UART_SetConfig+0x12c>
 800d45a:	231b      	movs	r3, #27
 800d45c:	2220      	movs	r2, #32
 800d45e:	189b      	adds	r3, r3, r2
 800d460:	19db      	adds	r3, r3, r7
 800d462:	2200      	movs	r2, #0
 800d464:	701a      	strb	r2, [r3, #0]
 800d466:	e049      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a86      	ldr	r2, [pc, #536]	@ (800d688 <UART_SetConfig+0x34c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d13e      	bne.n	800d4f0 <UART_SetConfig+0x1b4>
 800d472:	4b88      	ldr	r3, [pc, #544]	@ (800d694 <UART_SetConfig+0x358>)
 800d474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d476:	23c0      	movs	r3, #192	@ 0xc0
 800d478:	011b      	lsls	r3, r3, #4
 800d47a:	4013      	ands	r3, r2
 800d47c:	22c0      	movs	r2, #192	@ 0xc0
 800d47e:	0112      	lsls	r2, r2, #4
 800d480:	4293      	cmp	r3, r2
 800d482:	d027      	beq.n	800d4d4 <UART_SetConfig+0x198>
 800d484:	22c0      	movs	r2, #192	@ 0xc0
 800d486:	0112      	lsls	r2, r2, #4
 800d488:	4293      	cmp	r3, r2
 800d48a:	d82a      	bhi.n	800d4e2 <UART_SetConfig+0x1a6>
 800d48c:	2280      	movs	r2, #128	@ 0x80
 800d48e:	0112      	lsls	r2, r2, #4
 800d490:	4293      	cmp	r3, r2
 800d492:	d011      	beq.n	800d4b8 <UART_SetConfig+0x17c>
 800d494:	2280      	movs	r2, #128	@ 0x80
 800d496:	0112      	lsls	r2, r2, #4
 800d498:	4293      	cmp	r3, r2
 800d49a:	d822      	bhi.n	800d4e2 <UART_SetConfig+0x1a6>
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d004      	beq.n	800d4aa <UART_SetConfig+0x16e>
 800d4a0:	2280      	movs	r2, #128	@ 0x80
 800d4a2:	00d2      	lsls	r2, r2, #3
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d00e      	beq.n	800d4c6 <UART_SetConfig+0x18a>
 800d4a8:	e01b      	b.n	800d4e2 <UART_SetConfig+0x1a6>
 800d4aa:	231b      	movs	r3, #27
 800d4ac:	2220      	movs	r2, #32
 800d4ae:	189b      	adds	r3, r3, r2
 800d4b0:	19db      	adds	r3, r3, r7
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	701a      	strb	r2, [r3, #0]
 800d4b6:	e021      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d4b8:	231b      	movs	r3, #27
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	189b      	adds	r3, r3, r2
 800d4be:	19db      	adds	r3, r3, r7
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	e01a      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d4c6:	231b      	movs	r3, #27
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	189b      	adds	r3, r3, r2
 800d4cc:	19db      	adds	r3, r3, r7
 800d4ce:	2204      	movs	r2, #4
 800d4d0:	701a      	strb	r2, [r3, #0]
 800d4d2:	e013      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d4d4:	231b      	movs	r3, #27
 800d4d6:	2220      	movs	r2, #32
 800d4d8:	189b      	adds	r3, r3, r2
 800d4da:	19db      	adds	r3, r3, r7
 800d4dc:	2208      	movs	r2, #8
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	e00c      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d4e2:	231b      	movs	r3, #27
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	189b      	adds	r3, r3, r2
 800d4e8:	19db      	adds	r3, r3, r7
 800d4ea:	2210      	movs	r2, #16
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	e005      	b.n	800d4fc <UART_SetConfig+0x1c0>
 800d4f0:	231b      	movs	r3, #27
 800d4f2:	2220      	movs	r2, #32
 800d4f4:	189b      	adds	r3, r3, r2
 800d4f6:	19db      	adds	r3, r3, r7
 800d4f8:	2210      	movs	r2, #16
 800d4fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a61      	ldr	r2, [pc, #388]	@ (800d688 <UART_SetConfig+0x34c>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d000      	beq.n	800d508 <UART_SetConfig+0x1cc>
 800d506:	e092      	b.n	800d62e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d508:	231b      	movs	r3, #27
 800d50a:	2220      	movs	r2, #32
 800d50c:	189b      	adds	r3, r3, r2
 800d50e:	19db      	adds	r3, r3, r7
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	2b08      	cmp	r3, #8
 800d514:	d015      	beq.n	800d542 <UART_SetConfig+0x206>
 800d516:	dc18      	bgt.n	800d54a <UART_SetConfig+0x20e>
 800d518:	2b04      	cmp	r3, #4
 800d51a:	d00d      	beq.n	800d538 <UART_SetConfig+0x1fc>
 800d51c:	dc15      	bgt.n	800d54a <UART_SetConfig+0x20e>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <UART_SetConfig+0x1ec>
 800d522:	2b02      	cmp	r3, #2
 800d524:	d005      	beq.n	800d532 <UART_SetConfig+0x1f6>
 800d526:	e010      	b.n	800d54a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d528:	f7fc fdd6 	bl	800a0d8 <HAL_RCC_GetPCLK1Freq>
 800d52c:	0003      	movs	r3, r0
 800d52e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d530:	e014      	b.n	800d55c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d532:	4b5a      	ldr	r3, [pc, #360]	@ (800d69c <UART_SetConfig+0x360>)
 800d534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d536:	e011      	b.n	800d55c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d538:	f7fc fd42 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800d53c:	0003      	movs	r3, r0
 800d53e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d540:	e00c      	b.n	800d55c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d542:	2380      	movs	r3, #128	@ 0x80
 800d544:	021b      	lsls	r3, r3, #8
 800d546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d548:	e008      	b.n	800d55c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800d54a:	2300      	movs	r3, #0
 800d54c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d54e:	231a      	movs	r3, #26
 800d550:	2220      	movs	r2, #32
 800d552:	189b      	adds	r3, r3, r2
 800d554:	19db      	adds	r3, r3, r7
 800d556:	2201      	movs	r2, #1
 800d558:	701a      	strb	r2, [r3, #0]
        break;
 800d55a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d100      	bne.n	800d564 <UART_SetConfig+0x228>
 800d562:	e147      	b.n	800d7f4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d568:	4b4d      	ldr	r3, [pc, #308]	@ (800d6a0 <UART_SetConfig+0x364>)
 800d56a:	0052      	lsls	r2, r2, #1
 800d56c:	5ad3      	ldrh	r3, [r2, r3]
 800d56e:	0019      	movs	r1, r3
 800d570:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d572:	f7f2 fdc9 	bl	8000108 <__udivsi3>
 800d576:	0003      	movs	r3, r0
 800d578:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	0013      	movs	r3, r2
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	189b      	adds	r3, r3, r2
 800d584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d586:	429a      	cmp	r2, r3
 800d588:	d305      	bcc.n	800d596 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d592:	429a      	cmp	r2, r3
 800d594:	d906      	bls.n	800d5a4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800d596:	231a      	movs	r3, #26
 800d598:	2220      	movs	r2, #32
 800d59a:	189b      	adds	r3, r3, r2
 800d59c:	19db      	adds	r3, r3, r7
 800d59e:	2201      	movs	r2, #1
 800d5a0:	701a      	strb	r2, [r3, #0]
 800d5a2:	e127      	b.n	800d7f4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5a6:	61bb      	str	r3, [r7, #24]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800d6a0 <UART_SetConfig+0x364>)
 800d5b2:	0052      	lsls	r2, r2, #1
 800d5b4:	5ad3      	ldrh	r3, [r2, r3]
 800d5b6:	613b      	str	r3, [r7, #16]
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	69b8      	ldr	r0, [r7, #24]
 800d5c2:	69f9      	ldr	r1, [r7, #28]
 800d5c4:	f7f2 fe2c 	bl	8000220 <__aeabi_uldivmod>
 800d5c8:	0002      	movs	r2, r0
 800d5ca:	000b      	movs	r3, r1
 800d5cc:	0e11      	lsrs	r1, r2, #24
 800d5ce:	021d      	lsls	r5, r3, #8
 800d5d0:	430d      	orrs	r5, r1
 800d5d2:	0214      	lsls	r4, r2, #8
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	085b      	lsrs	r3, r3, #1
 800d5da:	60bb      	str	r3, [r7, #8]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	60fb      	str	r3, [r7, #12]
 800d5e0:	68b8      	ldr	r0, [r7, #8]
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	1900      	adds	r0, r0, r4
 800d5e6:	4169      	adcs	r1, r5
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	603b      	str	r3, [r7, #0]
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	607b      	str	r3, [r7, #4]
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f7f2 fe13 	bl	8000220 <__aeabi_uldivmod>
 800d5fa:	0002      	movs	r2, r0
 800d5fc:	000b      	movs	r3, r1
 800d5fe:	0013      	movs	r3, r2
 800d600:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d604:	23c0      	movs	r3, #192	@ 0xc0
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	429a      	cmp	r2, r3
 800d60a:	d309      	bcc.n	800d620 <UART_SetConfig+0x2e4>
 800d60c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d60e:	2380      	movs	r3, #128	@ 0x80
 800d610:	035b      	lsls	r3, r3, #13
 800d612:	429a      	cmp	r2, r3
 800d614:	d204      	bcs.n	800d620 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d61c:	60da      	str	r2, [r3, #12]
 800d61e:	e0e9      	b.n	800d7f4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800d620:	231a      	movs	r3, #26
 800d622:	2220      	movs	r2, #32
 800d624:	189b      	adds	r3, r3, r2
 800d626:	19db      	adds	r3, r3, r7
 800d628:	2201      	movs	r2, #1
 800d62a:	701a      	strb	r2, [r3, #0]
 800d62c:	e0e2      	b.n	800d7f4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d630:	69da      	ldr	r2, [r3, #28]
 800d632:	2380      	movs	r3, #128	@ 0x80
 800d634:	021b      	lsls	r3, r3, #8
 800d636:	429a      	cmp	r2, r3
 800d638:	d000      	beq.n	800d63c <UART_SetConfig+0x300>
 800d63a:	e083      	b.n	800d744 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800d63c:	231b      	movs	r3, #27
 800d63e:	2220      	movs	r2, #32
 800d640:	189b      	adds	r3, r3, r2
 800d642:	19db      	adds	r3, r3, r7
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b08      	cmp	r3, #8
 800d648:	d015      	beq.n	800d676 <UART_SetConfig+0x33a>
 800d64a:	dc2b      	bgt.n	800d6a4 <UART_SetConfig+0x368>
 800d64c:	2b04      	cmp	r3, #4
 800d64e:	d00d      	beq.n	800d66c <UART_SetConfig+0x330>
 800d650:	dc28      	bgt.n	800d6a4 <UART_SetConfig+0x368>
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <UART_SetConfig+0x320>
 800d656:	2b02      	cmp	r3, #2
 800d658:	d005      	beq.n	800d666 <UART_SetConfig+0x32a>
 800d65a:	e023      	b.n	800d6a4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d65c:	f7fc fd3c 	bl	800a0d8 <HAL_RCC_GetPCLK1Freq>
 800d660:	0003      	movs	r3, r0
 800d662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d664:	e027      	b.n	800d6b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d666:	4b0d      	ldr	r3, [pc, #52]	@ (800d69c <UART_SetConfig+0x360>)
 800d668:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d66a:	e024      	b.n	800d6b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d66c:	f7fc fca8 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800d670:	0003      	movs	r3, r0
 800d672:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d674:	e01f      	b.n	800d6b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d676:	2380      	movs	r3, #128	@ 0x80
 800d678:	021b      	lsls	r3, r3, #8
 800d67a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d67c:	e01b      	b.n	800d6b6 <UART_SetConfig+0x37a>
 800d67e:	46c0      	nop			@ (mov r8, r8)
 800d680:	cfff69f3 	.word	0xcfff69f3
 800d684:	ffffcfff 	.word	0xffffcfff
 800d688:	40008000 	.word	0x40008000
 800d68c:	11fff4ff 	.word	0x11fff4ff
 800d690:	40013800 	.word	0x40013800
 800d694:	40021000 	.word	0x40021000
 800d698:	40004400 	.word	0x40004400
 800d69c:	00f42400 	.word	0x00f42400
 800d6a0:	0800ebec 	.word	0x0800ebec
      default:
        pclk = 0U;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d6a8:	231a      	movs	r3, #26
 800d6aa:	2220      	movs	r2, #32
 800d6ac:	189b      	adds	r3, r3, r2
 800d6ae:	19db      	adds	r3, r3, r7
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	701a      	strb	r2, [r3, #0]
        break;
 800d6b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d100      	bne.n	800d6be <UART_SetConfig+0x382>
 800d6bc:	e09a      	b.n	800d7f4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6c2:	4b58      	ldr	r3, [pc, #352]	@ (800d824 <UART_SetConfig+0x4e8>)
 800d6c4:	0052      	lsls	r2, r2, #1
 800d6c6:	5ad3      	ldrh	r3, [r2, r3]
 800d6c8:	0019      	movs	r1, r3
 800d6ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d6cc:	f7f2 fd1c 	bl	8000108 <__udivsi3>
 800d6d0:	0003      	movs	r3, r0
 800d6d2:	005a      	lsls	r2, r3, #1
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	085b      	lsrs	r3, r3, #1
 800d6da:	18d2      	adds	r2, r2, r3
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	0019      	movs	r1, r3
 800d6e2:	0010      	movs	r0, r2
 800d6e4:	f7f2 fd10 	bl	8000108 <__udivsi3>
 800d6e8:	0003      	movs	r3, r0
 800d6ea:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ee:	2b0f      	cmp	r3, #15
 800d6f0:	d921      	bls.n	800d736 <UART_SetConfig+0x3fa>
 800d6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6f4:	2380      	movs	r3, #128	@ 0x80
 800d6f6:	025b      	lsls	r3, r3, #9
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d21c      	bcs.n	800d736 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	200e      	movs	r0, #14
 800d702:	2420      	movs	r4, #32
 800d704:	1903      	adds	r3, r0, r4
 800d706:	19db      	adds	r3, r3, r7
 800d708:	210f      	movs	r1, #15
 800d70a:	438a      	bics	r2, r1
 800d70c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d710:	085b      	lsrs	r3, r3, #1
 800d712:	b29b      	uxth	r3, r3
 800d714:	2207      	movs	r2, #7
 800d716:	4013      	ands	r3, r2
 800d718:	b299      	uxth	r1, r3
 800d71a:	1903      	adds	r3, r0, r4
 800d71c:	19db      	adds	r3, r3, r7
 800d71e:	1902      	adds	r2, r0, r4
 800d720:	19d2      	adds	r2, r2, r7
 800d722:	8812      	ldrh	r2, [r2, #0]
 800d724:	430a      	orrs	r2, r1
 800d726:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	1902      	adds	r2, r0, r4
 800d72e:	19d2      	adds	r2, r2, r7
 800d730:	8812      	ldrh	r2, [r2, #0]
 800d732:	60da      	str	r2, [r3, #12]
 800d734:	e05e      	b.n	800d7f4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800d736:	231a      	movs	r3, #26
 800d738:	2220      	movs	r2, #32
 800d73a:	189b      	adds	r3, r3, r2
 800d73c:	19db      	adds	r3, r3, r7
 800d73e:	2201      	movs	r2, #1
 800d740:	701a      	strb	r2, [r3, #0]
 800d742:	e057      	b.n	800d7f4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d744:	231b      	movs	r3, #27
 800d746:	2220      	movs	r2, #32
 800d748:	189b      	adds	r3, r3, r2
 800d74a:	19db      	adds	r3, r3, r7
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b08      	cmp	r3, #8
 800d750:	d015      	beq.n	800d77e <UART_SetConfig+0x442>
 800d752:	dc18      	bgt.n	800d786 <UART_SetConfig+0x44a>
 800d754:	2b04      	cmp	r3, #4
 800d756:	d00d      	beq.n	800d774 <UART_SetConfig+0x438>
 800d758:	dc15      	bgt.n	800d786 <UART_SetConfig+0x44a>
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <UART_SetConfig+0x428>
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d005      	beq.n	800d76e <UART_SetConfig+0x432>
 800d762:	e010      	b.n	800d786 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d764:	f7fc fcb8 	bl	800a0d8 <HAL_RCC_GetPCLK1Freq>
 800d768:	0003      	movs	r3, r0
 800d76a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d76c:	e014      	b.n	800d798 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d76e:	4b2e      	ldr	r3, [pc, #184]	@ (800d828 <UART_SetConfig+0x4ec>)
 800d770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d772:	e011      	b.n	800d798 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d774:	f7fc fc24 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800d778:	0003      	movs	r3, r0
 800d77a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d77c:	e00c      	b.n	800d798 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d77e:	2380      	movs	r3, #128	@ 0x80
 800d780:	021b      	lsls	r3, r3, #8
 800d782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d784:	e008      	b.n	800d798 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800d786:	2300      	movs	r3, #0
 800d788:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d78a:	231a      	movs	r3, #26
 800d78c:	2220      	movs	r2, #32
 800d78e:	189b      	adds	r3, r3, r2
 800d790:	19db      	adds	r3, r3, r7
 800d792:	2201      	movs	r2, #1
 800d794:	701a      	strb	r2, [r3, #0]
        break;
 800d796:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d02a      	beq.n	800d7f4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7a2:	4b20      	ldr	r3, [pc, #128]	@ (800d824 <UART_SetConfig+0x4e8>)
 800d7a4:	0052      	lsls	r2, r2, #1
 800d7a6:	5ad3      	ldrh	r3, [r2, r3]
 800d7a8:	0019      	movs	r1, r3
 800d7aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d7ac:	f7f2 fcac 	bl	8000108 <__udivsi3>
 800d7b0:	0003      	movs	r3, r0
 800d7b2:	001a      	movs	r2, r3
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	085b      	lsrs	r3, r3, #1
 800d7ba:	18d2      	adds	r2, r2, r3
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	0019      	movs	r1, r3
 800d7c2:	0010      	movs	r0, r2
 800d7c4:	f7f2 fca0 	bl	8000108 <__udivsi3>
 800d7c8:	0003      	movs	r3, r0
 800d7ca:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ce:	2b0f      	cmp	r3, #15
 800d7d0:	d90a      	bls.n	800d7e8 <UART_SetConfig+0x4ac>
 800d7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7d4:	2380      	movs	r3, #128	@ 0x80
 800d7d6:	025b      	lsls	r3, r3, #9
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d205      	bcs.n	800d7e8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60da      	str	r2, [r3, #12]
 800d7e6:	e005      	b.n	800d7f4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800d7e8:	231a      	movs	r3, #26
 800d7ea:	2220      	movs	r2, #32
 800d7ec:	189b      	adds	r3, r3, r2
 800d7ee:	19db      	adds	r3, r3, r7
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f6:	226a      	movs	r2, #106	@ 0x6a
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fe:	2268      	movs	r2, #104	@ 0x68
 800d800:	2101      	movs	r1, #1
 800d802:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d806:	2200      	movs	r2, #0
 800d808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80c:	2200      	movs	r2, #0
 800d80e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d810:	231a      	movs	r3, #26
 800d812:	2220      	movs	r2, #32
 800d814:	189b      	adds	r3, r3, r2
 800d816:	19db      	adds	r3, r3, r7
 800d818:	781b      	ldrb	r3, [r3, #0]
}
 800d81a:	0018      	movs	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	b010      	add	sp, #64	@ 0x40
 800d820:	bdb0      	pop	{r4, r5, r7, pc}
 800d822:	46c0      	nop			@ (mov r8, r8)
 800d824:	0800ebec 	.word	0x0800ebec
 800d828:	00f42400 	.word	0x00f42400

0800d82c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d838:	2208      	movs	r2, #8
 800d83a:	4013      	ands	r3, r2
 800d83c:	d00b      	beq.n	800d856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4a4a      	ldr	r2, [pc, #296]	@ (800d970 <UART_AdvFeatureConfig+0x144>)
 800d846:	4013      	ands	r3, r2
 800d848:	0019      	movs	r1, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d85a:	2201      	movs	r2, #1
 800d85c:	4013      	ands	r3, r2
 800d85e:	d00b      	beq.n	800d878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	4a43      	ldr	r2, [pc, #268]	@ (800d974 <UART_AdvFeatureConfig+0x148>)
 800d868:	4013      	ands	r3, r2
 800d86a:	0019      	movs	r1, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	430a      	orrs	r2, r1
 800d876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d87c:	2202      	movs	r2, #2
 800d87e:	4013      	ands	r3, r2
 800d880:	d00b      	beq.n	800d89a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	4a3b      	ldr	r2, [pc, #236]	@ (800d978 <UART_AdvFeatureConfig+0x14c>)
 800d88a:	4013      	ands	r3, r2
 800d88c:	0019      	movs	r1, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	430a      	orrs	r2, r1
 800d898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d89e:	2204      	movs	r2, #4
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	d00b      	beq.n	800d8bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	4a34      	ldr	r2, [pc, #208]	@ (800d97c <UART_AdvFeatureConfig+0x150>)
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	0019      	movs	r1, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	430a      	orrs	r2, r1
 800d8ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c0:	2210      	movs	r2, #16
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	d00b      	beq.n	800d8de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	4a2c      	ldr	r2, [pc, #176]	@ (800d980 <UART_AdvFeatureConfig+0x154>)
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	0019      	movs	r1, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	430a      	orrs	r2, r1
 800d8dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e2:	2220      	movs	r2, #32
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	d00b      	beq.n	800d900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	4a25      	ldr	r2, [pc, #148]	@ (800d984 <UART_AdvFeatureConfig+0x158>)
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	0019      	movs	r1, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	430a      	orrs	r2, r1
 800d8fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d904:	2240      	movs	r2, #64	@ 0x40
 800d906:	4013      	ands	r3, r2
 800d908:	d01d      	beq.n	800d946 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	4a1d      	ldr	r2, [pc, #116]	@ (800d988 <UART_AdvFeatureConfig+0x15c>)
 800d912:	4013      	ands	r3, r2
 800d914:	0019      	movs	r1, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	430a      	orrs	r2, r1
 800d920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d926:	2380      	movs	r3, #128	@ 0x80
 800d928:	035b      	lsls	r3, r3, #13
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d10b      	bne.n	800d946 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	4a15      	ldr	r2, [pc, #84]	@ (800d98c <UART_AdvFeatureConfig+0x160>)
 800d936:	4013      	ands	r3, r2
 800d938:	0019      	movs	r1, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	430a      	orrs	r2, r1
 800d944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94a:	2280      	movs	r2, #128	@ 0x80
 800d94c:	4013      	ands	r3, r2
 800d94e:	d00b      	beq.n	800d968 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	4a0e      	ldr	r2, [pc, #56]	@ (800d990 <UART_AdvFeatureConfig+0x164>)
 800d958:	4013      	ands	r3, r2
 800d95a:	0019      	movs	r1, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	430a      	orrs	r2, r1
 800d966:	605a      	str	r2, [r3, #4]
  }
}
 800d968:	46c0      	nop			@ (mov r8, r8)
 800d96a:	46bd      	mov	sp, r7
 800d96c:	b002      	add	sp, #8
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	ffff7fff 	.word	0xffff7fff
 800d974:	fffdffff 	.word	0xfffdffff
 800d978:	fffeffff 	.word	0xfffeffff
 800d97c:	fffbffff 	.word	0xfffbffff
 800d980:	ffffefff 	.word	0xffffefff
 800d984:	ffffdfff 	.word	0xffffdfff
 800d988:	ffefffff 	.word	0xffefffff
 800d98c:	ff9fffff 	.word	0xff9fffff
 800d990:	fff7ffff 	.word	0xfff7ffff

0800d994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b092      	sub	sp, #72	@ 0x48
 800d998:	af02      	add	r7, sp, #8
 800d99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2290      	movs	r2, #144	@ 0x90
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9a4:	f7f9 f8c0 	bl	8006b28 <HAL_GetTick>
 800d9a8:	0003      	movs	r3, r0
 800d9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2208      	movs	r2, #8
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	2b08      	cmp	r3, #8
 800d9b8:	d12d      	bne.n	800da16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9bc:	2280      	movs	r2, #128	@ 0x80
 800d9be:	0391      	lsls	r1, r2, #14
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	4a47      	ldr	r2, [pc, #284]	@ (800dae0 <UART_CheckIdleState+0x14c>)
 800d9c4:	9200      	str	r2, [sp, #0]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f000 f88e 	bl	800dae8 <UART_WaitOnFlagUntilTimeout>
 800d9cc:	1e03      	subs	r3, r0, #0
 800d9ce:	d022      	beq.n	800da16 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d9da:	2301      	movs	r3, #1
 800d9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e0:	f383 8810 	msr	PRIMASK, r3
}
 800d9e4:	46c0      	nop			@ (mov r8, r8)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2180      	movs	r1, #128	@ 0x80
 800d9f2:	438a      	bics	r2, r1
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fc:	f383 8810 	msr	PRIMASK, r3
}
 800da00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2288      	movs	r2, #136	@ 0x88
 800da06:	2120      	movs	r1, #32
 800da08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2284      	movs	r2, #132	@ 0x84
 800da0e:	2100      	movs	r1, #0
 800da10:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e060      	b.n	800dad8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2204      	movs	r2, #4
 800da1e:	4013      	ands	r3, r2
 800da20:	2b04      	cmp	r3, #4
 800da22:	d146      	bne.n	800dab2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da26:	2280      	movs	r2, #128	@ 0x80
 800da28:	03d1      	lsls	r1, r2, #15
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	4a2c      	ldr	r2, [pc, #176]	@ (800dae0 <UART_CheckIdleState+0x14c>)
 800da2e:	9200      	str	r2, [sp, #0]
 800da30:	2200      	movs	r2, #0
 800da32:	f000 f859 	bl	800dae8 <UART_WaitOnFlagUntilTimeout>
 800da36:	1e03      	subs	r3, r0, #0
 800da38:	d03b      	beq.n	800dab2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da3a:	f3ef 8310 	mrs	r3, PRIMASK
 800da3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800da40:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da42:	637b      	str	r3, [r7, #52]	@ 0x34
 800da44:	2301      	movs	r3, #1
 800da46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	f383 8810 	msr	PRIMASK, r3
}
 800da4e:	46c0      	nop			@ (mov r8, r8)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4922      	ldr	r1, [pc, #136]	@ (800dae4 <UART_CheckIdleState+0x150>)
 800da5c:	400a      	ands	r2, r1
 800da5e:	601a      	str	r2, [r3, #0]
 800da60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	f383 8810 	msr	PRIMASK, r3
}
 800da6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da6c:	f3ef 8310 	mrs	r3, PRIMASK
 800da70:	61bb      	str	r3, [r7, #24]
  return(result);
 800da72:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da74:	633b      	str	r3, [r7, #48]	@ 0x30
 800da76:	2301      	movs	r3, #1
 800da78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	f383 8810 	msr	PRIMASK, r3
}
 800da80:	46c0      	nop			@ (mov r8, r8)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689a      	ldr	r2, [r3, #8]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2101      	movs	r1, #1
 800da8e:	438a      	bics	r2, r1
 800da90:	609a      	str	r2, [r3, #8]
 800da92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	f383 8810 	msr	PRIMASK, r3
}
 800da9c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	228c      	movs	r2, #140	@ 0x8c
 800daa2:	2120      	movs	r1, #32
 800daa4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2284      	movs	r2, #132	@ 0x84
 800daaa:	2100      	movs	r1, #0
 800daac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800daae:	2303      	movs	r3, #3
 800dab0:	e012      	b.n	800dad8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2288      	movs	r2, #136	@ 0x88
 800dab6:	2120      	movs	r1, #32
 800dab8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	228c      	movs	r2, #140	@ 0x8c
 800dabe:	2120      	movs	r1, #32
 800dac0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2284      	movs	r2, #132	@ 0x84
 800dad2:	2100      	movs	r1, #0
 800dad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	0018      	movs	r0, r3
 800dada:	46bd      	mov	sp, r7
 800dadc:	b010      	add	sp, #64	@ 0x40
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	01ffffff 	.word	0x01ffffff
 800dae4:	fffffedf 	.word	0xfffffedf

0800dae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	603b      	str	r3, [r7, #0]
 800daf4:	1dfb      	adds	r3, r7, #7
 800daf6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daf8:	e051      	b.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	3301      	adds	r3, #1
 800dafe:	d04e      	beq.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db00:	f7f9 f812 	bl	8006b28 <HAL_GetTick>
 800db04:	0002      	movs	r2, r0
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	69ba      	ldr	r2, [r7, #24]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d302      	bcc.n	800db16 <UART_WaitOnFlagUntilTimeout+0x2e>
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d101      	bne.n	800db1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e051      	b.n	800dbbe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2204      	movs	r2, #4
 800db22:	4013      	ands	r3, r2
 800db24:	d03b      	beq.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb6>
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	2b80      	cmp	r3, #128	@ 0x80
 800db2a:	d038      	beq.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb6>
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b40      	cmp	r3, #64	@ 0x40
 800db30:	d035      	beq.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	2208      	movs	r2, #8
 800db3a:	4013      	ands	r3, r2
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d111      	bne.n	800db64 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2208      	movs	r2, #8
 800db46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	0018      	movs	r0, r3
 800db4c:	f000 f922 	bl	800dd94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2290      	movs	r2, #144	@ 0x90
 800db54:	2108      	movs	r1, #8
 800db56:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2284      	movs	r2, #132	@ 0x84
 800db5c:	2100      	movs	r1, #0
 800db5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e02c      	b.n	800dbbe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	69da      	ldr	r2, [r3, #28]
 800db6a:	2380      	movs	r3, #128	@ 0x80
 800db6c:	011b      	lsls	r3, r3, #4
 800db6e:	401a      	ands	r2, r3
 800db70:	2380      	movs	r3, #128	@ 0x80
 800db72:	011b      	lsls	r3, r3, #4
 800db74:	429a      	cmp	r2, r3
 800db76:	d112      	bne.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2280      	movs	r2, #128	@ 0x80
 800db7e:	0112      	lsls	r2, r2, #4
 800db80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	0018      	movs	r0, r3
 800db86:	f000 f905 	bl	800dd94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2290      	movs	r2, #144	@ 0x90
 800db8e:	2120      	movs	r1, #32
 800db90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2284      	movs	r2, #132	@ 0x84
 800db96:	2100      	movs	r1, #0
 800db98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e00f      	b.n	800dbbe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69db      	ldr	r3, [r3, #28]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	4013      	ands	r3, r2
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	1ad3      	subs	r3, r2, r3
 800dbac:	425a      	negs	r2, r3
 800dbae:	4153      	adcs	r3, r2
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	001a      	movs	r2, r3
 800dbb4:	1dfb      	adds	r3, r7, #7
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d09e      	beq.n	800dafa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	0018      	movs	r0, r3
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	b004      	add	sp, #16
 800dbc4:	bd80      	pop	{r7, pc}
	...

0800dbc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b090      	sub	sp, #64	@ 0x40
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	1dbb      	adds	r3, r7, #6
 800dbd4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	1dba      	adds	r2, r7, #6
 800dbe0:	215c      	movs	r1, #92	@ 0x5c
 800dbe2:	8812      	ldrh	r2, [r2, #0]
 800dbe4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2290      	movs	r2, #144	@ 0x90
 800dbea:	2100      	movs	r1, #0
 800dbec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	228c      	movs	r2, #140	@ 0x8c
 800dbf2:	2122      	movs	r1, #34	@ 0x22
 800dbf4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2280      	movs	r2, #128	@ 0x80
 800dbfa:	589b      	ldr	r3, [r3, r2]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d02d      	beq.n	800dc5c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2280      	movs	r2, #128	@ 0x80
 800dc04:	589b      	ldr	r3, [r3, r2]
 800dc06:	4a40      	ldr	r2, [pc, #256]	@ (800dd08 <UART_Start_Receive_DMA+0x140>)
 800dc08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2280      	movs	r2, #128	@ 0x80
 800dc0e:	589b      	ldr	r3, [r3, r2]
 800dc10:	4a3e      	ldr	r2, [pc, #248]	@ (800dd0c <UART_Start_Receive_DMA+0x144>)
 800dc12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2280      	movs	r2, #128	@ 0x80
 800dc18:	589b      	ldr	r3, [r3, r2]
 800dc1a:	4a3d      	ldr	r2, [pc, #244]	@ (800dd10 <UART_Start_Receive_DMA+0x148>)
 800dc1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2280      	movs	r2, #128	@ 0x80
 800dc22:	589b      	ldr	r3, [r3, r2]
 800dc24:	2200      	movs	r2, #0
 800dc26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2280      	movs	r2, #128	@ 0x80
 800dc2c:	5898      	ldr	r0, [r3, r2]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3324      	adds	r3, #36	@ 0x24
 800dc34:	0019      	movs	r1, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc3a:	001a      	movs	r2, r3
 800dc3c:	1dbb      	adds	r3, r7, #6
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	f7fa fb40 	bl	80082c4 <HAL_DMA_Start_IT>
 800dc44:	1e03      	subs	r3, r0, #0
 800dc46:	d009      	beq.n	800dc5c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2290      	movs	r2, #144	@ 0x90
 800dc4c:	2110      	movs	r1, #16
 800dc4e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	228c      	movs	r2, #140	@ 0x8c
 800dc54:	2120      	movs	r1, #32
 800dc56:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e050      	b.n	800dcfe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d019      	beq.n	800dc98 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc64:	f3ef 8310 	mrs	r3, PRIMASK
 800dc68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800dc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc6e:	2301      	movs	r3, #1
 800dc70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc74:	f383 8810 	msr	PRIMASK, r3
}
 800dc78:	46c0      	nop			@ (mov r8, r8)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2180      	movs	r1, #128	@ 0x80
 800dc86:	0049      	lsls	r1, r1, #1
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc92:	f383 8810 	msr	PRIMASK, r3
}
 800dc96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc98:	f3ef 8310 	mrs	r3, PRIMASK
 800dc9c:	613b      	str	r3, [r7, #16]
  return(result);
 800dc9e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dca2:	2301      	movs	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	f383 8810 	msr	PRIMASK, r3
}
 800dcac:	46c0      	nop			@ (mov r8, r8)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689a      	ldr	r2, [r3, #8]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2101      	movs	r1, #1
 800dcba:	430a      	orrs	r2, r1
 800dcbc:	609a      	str	r2, [r3, #8]
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	f383 8810 	msr	PRIMASK, r3
}
 800dcc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcca:	f3ef 8310 	mrs	r3, PRIMASK
 800dcce:	61fb      	str	r3, [r7, #28]
  return(result);
 800dcd0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	f383 8810 	msr	PRIMASK, r3
}
 800dcde:	46c0      	nop			@ (mov r8, r8)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	689a      	ldr	r2, [r3, #8]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2140      	movs	r1, #64	@ 0x40
 800dcec:	430a      	orrs	r2, r1
 800dcee:	609a      	str	r2, [r3, #8]
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf6:	f383 8810 	msr	PRIMASK, r3
}
 800dcfa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	0018      	movs	r0, r3
 800dd00:	46bd      	mov	sp, r7
 800dd02:	b010      	add	sp, #64	@ 0x40
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	46c0      	nop			@ (mov r8, r8)
 800dd08:	0800de61 	.word	0x0800de61
 800dd0c:	0800df95 	.word	0x0800df95
 800dd10:	0800dfdd 	.word	0x0800dfdd

0800dd14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08a      	sub	sp, #40	@ 0x28
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd1c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd20:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd22:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dd24:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd26:	2301      	movs	r3, #1
 800dd28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f383 8810 	msr	PRIMASK, r3
}
 800dd30:	46c0      	nop			@ (mov r8, r8)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	21c0      	movs	r1, #192	@ 0xc0
 800dd3e:	438a      	bics	r2, r1
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	f383 8810 	msr	PRIMASK, r3
}
 800dd4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd4e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd52:	617b      	str	r3, [r7, #20]
  return(result);
 800dd54:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dd56:	623b      	str	r3, [r7, #32]
 800dd58:	2301      	movs	r3, #1
 800dd5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	f383 8810 	msr	PRIMASK, r3
}
 800dd62:	46c0      	nop			@ (mov r8, r8)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	689a      	ldr	r2, [r3, #8]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4908      	ldr	r1, [pc, #32]	@ (800dd90 <UART_EndTxTransfer+0x7c>)
 800dd70:	400a      	ands	r2, r1
 800dd72:	609a      	str	r2, [r3, #8]
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	f383 8810 	msr	PRIMASK, r3
}
 800dd7e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2288      	movs	r2, #136	@ 0x88
 800dd84:	2120      	movs	r1, #32
 800dd86:	5099      	str	r1, [r3, r2]
}
 800dd88:	46c0      	nop			@ (mov r8, r8)
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	b00a      	add	sp, #40	@ 0x28
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	ff7fffff 	.word	0xff7fffff

0800dd94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08e      	sub	sp, #56	@ 0x38
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd9c:	f3ef 8310 	mrs	r3, PRIMASK
 800dda0:	617b      	str	r3, [r7, #20]
  return(result);
 800dda2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dda4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dda6:	2301      	movs	r3, #1
 800dda8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	f383 8810 	msr	PRIMASK, r3
}
 800ddb0:	46c0      	nop			@ (mov r8, r8)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4926      	ldr	r1, [pc, #152]	@ (800de58 <UART_EndRxTransfer+0xc4>)
 800ddbe:	400a      	ands	r2, r1
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	f383 8810 	msr	PRIMASK, r3
}
 800ddcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddce:	f3ef 8310 	mrs	r3, PRIMASK
 800ddd2:	623b      	str	r3, [r7, #32]
  return(result);
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddd8:	2301      	movs	r3, #1
 800ddda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddde:	f383 8810 	msr	PRIMASK, r3
}
 800dde2:	46c0      	nop			@ (mov r8, r8)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	689a      	ldr	r2, [r3, #8]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	491b      	ldr	r1, [pc, #108]	@ (800de5c <UART_EndRxTransfer+0xc8>)
 800ddf0:	400a      	ands	r2, r1
 800ddf2:	609a      	str	r2, [r3, #8]
 800ddf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfa:	f383 8810 	msr	PRIMASK, r3
}
 800ddfe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de04:	2b01      	cmp	r3, #1
 800de06:	d118      	bne.n	800de3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de08:	f3ef 8310 	mrs	r3, PRIMASK
 800de0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800de0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de12:	2301      	movs	r3, #1
 800de14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f383 8810 	msr	PRIMASK, r3
}
 800de1c:	46c0      	nop			@ (mov r8, r8)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2110      	movs	r1, #16
 800de2a:	438a      	bics	r2, r1
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	f383 8810 	msr	PRIMASK, r3
}
 800de38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	228c      	movs	r2, #140	@ 0x8c
 800de3e:	2120      	movs	r1, #32
 800de40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800de4e:	46c0      	nop			@ (mov r8, r8)
 800de50:	46bd      	mov	sp, r7
 800de52:	b00e      	add	sp, #56	@ 0x38
 800de54:	bd80      	pop	{r7, pc}
 800de56:	46c0      	nop			@ (mov r8, r8)
 800de58:	fffffedf 	.word	0xfffffedf
 800de5c:	effffffe 	.word	0xeffffffe

0800de60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b094      	sub	sp, #80	@ 0x50
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2220      	movs	r2, #32
 800de76:	4013      	ands	r3, r2
 800de78:	d16f      	bne.n	800df5a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800de7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de7c:	225e      	movs	r2, #94	@ 0x5e
 800de7e:	2100      	movs	r1, #0
 800de80:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de82:	f3ef 8310 	mrs	r3, PRIMASK
 800de86:	61bb      	str	r3, [r7, #24]
  return(result);
 800de88:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de8c:	2301      	movs	r3, #1
 800de8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	f383 8810 	msr	PRIMASK, r3
}
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	493b      	ldr	r1, [pc, #236]	@ (800df90 <UART_DMAReceiveCplt+0x130>)
 800dea4:	400a      	ands	r2, r1
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800deaa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	f383 8810 	msr	PRIMASK, r3
}
 800deb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deb4:	f3ef 8310 	mrs	r3, PRIMASK
 800deb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800debc:	647b      	str	r3, [r7, #68]	@ 0x44
 800debe:	2301      	movs	r3, #1
 800dec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec4:	f383 8810 	msr	PRIMASK, r3
}
 800dec8:	46c0      	nop			@ (mov r8, r8)
 800deca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689a      	ldr	r2, [r3, #8]
 800ded0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2101      	movs	r1, #1
 800ded6:	438a      	bics	r2, r1
 800ded8:	609a      	str	r2, [r3, #8]
 800deda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee0:	f383 8810 	msr	PRIMASK, r3
}
 800dee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dee6:	f3ef 8310 	mrs	r3, PRIMASK
 800deea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deee:	643b      	str	r3, [r7, #64]	@ 0x40
 800def0:	2301      	movs	r3, #1
 800def2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800def4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800def6:	f383 8810 	msr	PRIMASK, r3
}
 800defa:	46c0      	nop			@ (mov r8, r8)
 800defc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	689a      	ldr	r2, [r3, #8]
 800df02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2140      	movs	r1, #64	@ 0x40
 800df08:	438a      	bics	r2, r1
 800df0a:	609a      	str	r2, [r3, #8]
 800df0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df12:	f383 8810 	msr	PRIMASK, r3
}
 800df16:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df1a:	228c      	movs	r2, #140	@ 0x8c
 800df1c:	2120      	movs	r1, #32
 800df1e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df24:	2b01      	cmp	r3, #1
 800df26:	d118      	bne.n	800df5a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df28:	f3ef 8310 	mrs	r3, PRIMASK
 800df2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800df2e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df32:	2301      	movs	r3, #1
 800df34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	f383 8810 	msr	PRIMASK, r3
}
 800df3c:	46c0      	nop			@ (mov r8, r8)
 800df3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2110      	movs	r1, #16
 800df4a:	438a      	bics	r2, r1
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f383 8810 	msr	PRIMASK, r3
}
 800df58:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df5c:	2200      	movs	r2, #0
 800df5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df64:	2b01      	cmp	r3, #1
 800df66:	d109      	bne.n	800df7c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800df68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df6a:	22c0      	movs	r2, #192	@ 0xc0
 800df6c:	589b      	ldr	r3, [r3, r2]
 800df6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df70:	215c      	movs	r1, #92	@ 0x5c
 800df72:	5a51      	ldrh	r1, [r2, r1]
 800df74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df76:	0010      	movs	r0, r2
 800df78:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df7a:	e005      	b.n	800df88 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800df7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df7e:	22a0      	movs	r2, #160	@ 0xa0
 800df80:	589b      	ldr	r3, [r3, r2]
 800df82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df84:	0010      	movs	r0, r2
 800df86:	4798      	blx	r3
}
 800df88:	46c0      	nop			@ (mov r8, r8)
 800df8a:	46bd      	mov	sp, r7
 800df8c:	b014      	add	sp, #80	@ 0x50
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	fffffeff 	.word	0xfffffeff

0800df94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d10b      	bne.n	800dfc8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	22c0      	movs	r2, #192	@ 0xc0
 800dfb4:	589b      	ldr	r3, [r3, r2]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	215c      	movs	r1, #92	@ 0x5c
 800dfba:	5a52      	ldrh	r2, [r2, r1]
 800dfbc:	0852      	lsrs	r2, r2, #1
 800dfbe:	b291      	uxth	r1, r2
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	0010      	movs	r0, r2
 800dfc4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dfc6:	e005      	b.n	800dfd4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	229c      	movs	r2, #156	@ 0x9c
 800dfcc:	589b      	ldr	r3, [r3, r2]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	0010      	movs	r0, r2
 800dfd2:	4798      	blx	r3
}
 800dfd4:	46c0      	nop			@ (mov r8, r8)
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	b004      	add	sp, #16
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfe8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	2288      	movs	r2, #136	@ 0x88
 800dfee:	589b      	ldr	r3, [r3, r2]
 800dff0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	228c      	movs	r2, #140	@ 0x8c
 800dff6:	589b      	ldr	r3, [r3, r2]
 800dff8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	2280      	movs	r2, #128	@ 0x80
 800e002:	4013      	ands	r3, r2
 800e004:	2b80      	cmp	r3, #128	@ 0x80
 800e006:	d10a      	bne.n	800e01e <UART_DMAError+0x42>
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	2b21      	cmp	r3, #33	@ 0x21
 800e00c:	d107      	bne.n	800e01e <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	2256      	movs	r2, #86	@ 0x56
 800e012:	2100      	movs	r1, #0
 800e014:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	0018      	movs	r0, r3
 800e01a:	f7ff fe7b 	bl	800dd14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	2240      	movs	r2, #64	@ 0x40
 800e026:	4013      	ands	r3, r2
 800e028:	2b40      	cmp	r3, #64	@ 0x40
 800e02a:	d10a      	bne.n	800e042 <UART_DMAError+0x66>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2b22      	cmp	r3, #34	@ 0x22
 800e030:	d107      	bne.n	800e042 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	225e      	movs	r2, #94	@ 0x5e
 800e036:	2100      	movs	r1, #0
 800e038:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	0018      	movs	r0, r3
 800e03e:	f7ff fea9 	bl	800dd94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2290      	movs	r2, #144	@ 0x90
 800e046:	589b      	ldr	r3, [r3, r2]
 800e048:	2210      	movs	r2, #16
 800e04a:	431a      	orrs	r2, r3
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2190      	movs	r1, #144	@ 0x90
 800e050:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	22a4      	movs	r2, #164	@ 0xa4
 800e056:	589b      	ldr	r3, [r3, r2]
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	0010      	movs	r0, r2
 800e05c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e05e:	46c0      	nop			@ (mov r8, r8)
 800e060:	46bd      	mov	sp, r7
 800e062:	b006      	add	sp, #24
 800e064:	bd80      	pop	{r7, pc}

0800e066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	225e      	movs	r2, #94	@ 0x5e
 800e078:	2100      	movs	r1, #0
 800e07a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2256      	movs	r2, #86	@ 0x56
 800e080:	2100      	movs	r1, #0
 800e082:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	22a4      	movs	r2, #164	@ 0xa4
 800e088:	589b      	ldr	r3, [r3, r2]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	0010      	movs	r0, r2
 800e08e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e090:	46c0      	nop			@ (mov r8, r8)
 800e092:	46bd      	mov	sp, r7
 800e094:	b004      	add	sp, #16
 800e096:	bd80      	pop	{r7, pc}

0800e098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0a0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0a8:	617b      	str	r3, [r7, #20]
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f383 8810 	msr	PRIMASK, r3
}
 800e0b4:	46c0      	nop			@ (mov r8, r8)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2140      	movs	r1, #64	@ 0x40
 800e0c2:	438a      	bics	r2, r1
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	f383 8810 	msr	PRIMASK, r3
}
 800e0d0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2288      	movs	r2, #136	@ 0x88
 800e0d6:	2120      	movs	r1, #32
 800e0d8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2298      	movs	r2, #152	@ 0x98
 800e0e4:	589b      	ldr	r3, [r3, r2]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	0010      	movs	r0, r2
 800e0ea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ec:	46c0      	nop			@ (mov r8, r8)
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	b006      	add	sp, #24
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	46bd      	mov	sp, r7
 800e100:	b002      	add	sp, #8
 800e102:	bd80      	pop	{r7, pc}

0800e104 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e10c:	46c0      	nop			@ (mov r8, r8)
 800e10e:	46bd      	mov	sp, r7
 800e110:	b002      	add	sp, #8
 800e112:	bd80      	pop	{r7, pc}

0800e114 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e11c:	46c0      	nop			@ (mov r8, r8)
 800e11e:	46bd      	mov	sp, r7
 800e120:	b002      	add	sp, #8
 800e122:	bd80      	pop	{r7, pc}

0800e124 <memset>:
 800e124:	0003      	movs	r3, r0
 800e126:	1882      	adds	r2, r0, r2
 800e128:	4293      	cmp	r3, r2
 800e12a:	d100      	bne.n	800e12e <memset+0xa>
 800e12c:	4770      	bx	lr
 800e12e:	7019      	strb	r1, [r3, #0]
 800e130:	3301      	adds	r3, #1
 800e132:	e7f9      	b.n	800e128 <memset+0x4>

0800e134 <__libc_init_array>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	2600      	movs	r6, #0
 800e138:	4c0c      	ldr	r4, [pc, #48]	@ (800e16c <__libc_init_array+0x38>)
 800e13a:	4d0d      	ldr	r5, [pc, #52]	@ (800e170 <__libc_init_array+0x3c>)
 800e13c:	1b64      	subs	r4, r4, r5
 800e13e:	10a4      	asrs	r4, r4, #2
 800e140:	42a6      	cmp	r6, r4
 800e142:	d109      	bne.n	800e158 <__libc_init_array+0x24>
 800e144:	2600      	movs	r6, #0
 800e146:	f000 f823 	bl	800e190 <_init>
 800e14a:	4c0a      	ldr	r4, [pc, #40]	@ (800e174 <__libc_init_array+0x40>)
 800e14c:	4d0a      	ldr	r5, [pc, #40]	@ (800e178 <__libc_init_array+0x44>)
 800e14e:	1b64      	subs	r4, r4, r5
 800e150:	10a4      	asrs	r4, r4, #2
 800e152:	42a6      	cmp	r6, r4
 800e154:	d105      	bne.n	800e162 <__libc_init_array+0x2e>
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	00b3      	lsls	r3, r6, #2
 800e15a:	58eb      	ldr	r3, [r5, r3]
 800e15c:	4798      	blx	r3
 800e15e:	3601      	adds	r6, #1
 800e160:	e7ee      	b.n	800e140 <__libc_init_array+0xc>
 800e162:	00b3      	lsls	r3, r6, #2
 800e164:	58eb      	ldr	r3, [r5, r3]
 800e166:	4798      	blx	r3
 800e168:	3601      	adds	r6, #1
 800e16a:	e7f2      	b.n	800e152 <__libc_init_array+0x1e>
 800e16c:	0800ec40 	.word	0x0800ec40
 800e170:	0800ec40 	.word	0x0800ec40
 800e174:	0800ec44 	.word	0x0800ec44
 800e178:	0800ec40 	.word	0x0800ec40

0800e17c <memcpy>:
 800e17c:	2300      	movs	r3, #0
 800e17e:	b510      	push	{r4, lr}
 800e180:	429a      	cmp	r2, r3
 800e182:	d100      	bne.n	800e186 <memcpy+0xa>
 800e184:	bd10      	pop	{r4, pc}
 800e186:	5ccc      	ldrb	r4, [r1, r3]
 800e188:	54c4      	strb	r4, [r0, r3]
 800e18a:	3301      	adds	r3, #1
 800e18c:	e7f8      	b.n	800e180 <memcpy+0x4>
	...

0800e190 <_init>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	46c0      	nop			@ (mov r8, r8)
 800e194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e196:	bc08      	pop	{r3}
 800e198:	469e      	mov	lr, r3
 800e19a:	4770      	bx	lr

0800e19c <_fini>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	46c0      	nop			@ (mov r8, r8)
 800e1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a2:	bc08      	pop	{r3}
 800e1a4:	469e      	mov	lr, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <__FLASH_Program_Fast_veneer>:
 800e1a8:	b401      	push	{r0}
 800e1aa:	4802      	ldr	r0, [pc, #8]	@ (800e1b4 <__FLASH_Program_Fast_veneer+0xc>)
 800e1ac:	4684      	mov	ip, r0
 800e1ae:	bc01      	pop	{r0}
 800e1b0:	4760      	bx	ip
 800e1b2:	bf00      	nop
 800e1b4:	20000459 	.word	0x20000459

Disassembly of section .data:

20000000 <user_preset_0>:
20000000:	407f6e7f 00000000                       .n.@....

20000008 <user_preset_1>:
20000008:	40402840 00000040                       @(@@@...

20000010 <user_preset_2>:
20000010:	007f4000 00000020                       .@.. ...

20000018 <user_preset_3>:
20000018:	7f7f4040 00000064                       @@..d...

20000020 <led_blink_period>:
20000020:	0000012c                                ,...

20000024 <tap_tempo_switch_state_counter.1>:
20000024:	                                         .

20000025 <preset.0>:
20000025:	                                         ...

20000028 <delay_line>:
	...
20000428:	00010000 00000200                       ........

20000430 <speed_fsm>:
20000430:	00000001                                ....

20000434 <depth_fsm>:
20000434:	00000001                                ....

20000438 <waveshape_fsm>:
20000438:	00000001                                ....

2000043c <symmetry_fsm>:
2000043c:	00000001                                ....

20000440 <phase_fsm>:
20000440:	00000001                                ....

20000444 <IP_CAP_fsm>:
20000444:	00000400                                ....

20000448 <LED_fsm>:
20000448:	00000001                                ....

2000044c <SystemCoreClock>:
2000044c:	00f42400                                .$..

20000450 <uwTickPrio>:
20000450:	00000004                                ....

20000454 <uwTickFreq>:
20000454:	00000001                                ....

20000458 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000458:	b580      	push	{r7, lr}
2000045a:	b088      	sub	sp, #32
2000045c:	af00      	add	r7, sp, #0
2000045e:	6078      	str	r0, [r7, #4]
20000460:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000462:	231f      	movs	r3, #31
20000464:	18fb      	adds	r3, r7, r3
20000466:	2200      	movs	r2, #0
20000468:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000046e:	683b      	ldr	r3, [r7, #0]
20000470:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000472:	4b1a      	ldr	r3, [pc, #104]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000474:	695a      	ldr	r2, [r3, #20]
20000476:	4b19      	ldr	r3, [pc, #100]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000478:	2180      	movs	r1, #128	@ 0x80
2000047a:	02c9      	lsls	r1, r1, #11
2000047c:	430a      	orrs	r2, r1
2000047e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000480:	f3ef 8310 	mrs	r3, PRIMASK
20000484:	60fb      	str	r3, [r7, #12]
  return(result);
20000486:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000048a:	b672      	cpsid	i
}
2000048c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000048e:	e00f      	b.n	200004b0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000490:	697a      	ldr	r2, [r7, #20]
20000492:	69bb      	ldr	r3, [r7, #24]
20000494:	6812      	ldr	r2, [r2, #0]
20000496:	601a      	str	r2, [r3, #0]
    src += 4U;
20000498:	697b      	ldr	r3, [r7, #20]
2000049a:	3304      	adds	r3, #4
2000049c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000049e:	69bb      	ldr	r3, [r7, #24]
200004a0:	3304      	adds	r3, #4
200004a2:	61bb      	str	r3, [r7, #24]
    index++;
200004a4:	211f      	movs	r1, #31
200004a6:	187b      	adds	r3, r7, r1
200004a8:	781a      	ldrb	r2, [r3, #0]
200004aa:	187b      	adds	r3, r7, r1
200004ac:	3201      	adds	r2, #1
200004ae:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004b0:	231f      	movs	r3, #31
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	781b      	ldrb	r3, [r3, #0]
200004b6:	2b3f      	cmp	r3, #63	@ 0x3f
200004b8:	d9ea      	bls.n	20000490 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ba:	46c0      	nop			@ (mov r8, r8)
200004bc:	4b07      	ldr	r3, [pc, #28]	@ (200004dc <FLASH_Program_Fast+0x84>)
200004be:	691a      	ldr	r2, [r3, #16]
200004c0:	2380      	movs	r3, #128	@ 0x80
200004c2:	025b      	lsls	r3, r3, #9
200004c4:	4013      	ands	r3, r2
200004c6:	d1f9      	bne.n	200004bc <FLASH_Program_Fast+0x64>
200004c8:	693b      	ldr	r3, [r7, #16]
200004ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004cc:	68bb      	ldr	r3, [r7, #8]
200004ce:	f383 8810 	msr	PRIMASK, r3
}
200004d2:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004d4:	46c0      	nop			@ (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	b008      	add	sp, #32
200004da:	bd80      	pop	{r7, pc}
200004dc:	40022000 	.word	0x40022000
