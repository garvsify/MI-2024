// Online C compiler to run C program online
#include <stdio.h>
#include <stdint.h>

#define ADC_HALF_SCALE 128
#define ADC_FULL_SCALE 255
#define ADC_NO_BITS 8

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent);

int main(){
    
//uint32_t mod = unsigned_bitwise_modulo(200,8);
//printf("modulus is:%d\n",mod);
    
char test0[] = "test0";
char test1[] = "test1";
char test2[] = "test2";
char test3[] = "test3";
char test4[] = "test4";
char test5[] = "test5";
char test6[] = "test6";
char test7[] = "test7";
char test8[] = "test8";
char test9[] = "test9";
char test10[] = "test10";
char test11[] = "test11";
char test12[] = "test12";
char test13[] = "test13";
char test14[] = "test14";
char test15[] = "test15";
    
uint8_t pot_rotation_corrected = 0;

uint8_t current_symmetry = 0;

uint8_t symmetry_status = 0;

//change per build
uint16_t TIM16_raw_start_value = 127;
//change per build

if(symmetry_status == 0){
	pot_rotation_corrected = ADC_HALF_SCALE - 1 - current_symmetry;
}
else{
	pot_rotation_corrected = ADC_HALF_SCALE - 1 - (ADC_FULL_SCALE - current_symmetry);
}
printf("pot rotation corrected is: %d\n",pot_rotation_corrected);

//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
printf("two_fifty_six_minus_TIM16_raw_start_value is: %d\n",two_fifty_six_minus_TIM16_raw_start_value);

uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
printf("two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC is: %d\n",two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC);

uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> ADC_NO_BITS);
printf("two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits is: %d\n",two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits);


//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
printf("manipulated_period_shorten is: %d\n",manipulated_period_shorten);

uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
printf("manipulated_period_lengthen is: %d\n",manipulated_period_lengthen);



if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){

	if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
	    
	    printf("%s\n",test1);
	    
	    //remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5
		
		//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
		//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE
	}
	else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
	    
	    printf("%s\n",test2);
	    
	    //remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder
	
	    manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
		manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
	}
	else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
	    
	    printf("%s\n",test3);
	    
	    //remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5
		
		manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
		manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
	}
	else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
	    
	    printf("%s\n",test4);
	    
	    //remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5
		
		manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
		manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
	}
}

else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){

	if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
	    
	    printf("%s\n",test5);
	
		manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
		//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
		manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE

		if(unsigned_bitwise_modulo(manipulated_period_lengthen, 2) == 0){
		    
		    printf("%s\n",test6);

			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//DO NOT OSCILLATE BETWEEN VALUES //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
		}
		else{
		    
		    printf("%s\n",test7);

			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
			//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
		}		
	}
	else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
	    
	    manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
	    if(manipulated_period_lengthen % 2 == 0){
	        
            printf("%s\n",test8);
			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//DO NOT OSCILLATE BETWEEN VALUES //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
		}
		else{
		    
            printf("%s\n",test9);
			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
			//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
	    }
	}
	else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
	    
	    printf("%s\n",test10);
		
		manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
		//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
		manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE

		if(unsigned_bitwise_modulo(manipulated_period_lengthen, 2) == 0){
		    
		    printf("%s\n",test11);

			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//DO NOT OSCILLATE BETWEEN VALUES //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
		}
		else{
		    
		    printf("%s\n",test12);

			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
			//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
		}		
	}
	else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
	    
	    printf("%s\n",test13);
	
		manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
		//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
		manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE

		if(unsigned_bitwise_modulo(manipulated_period_lengthen, 2) == 0){
		    
		    printf("%s\n",test14);

			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//DO NOT OSCILLATE BETWEEN VALUES //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
		}
		else{
		    
		    printf("%s\n",test15);

			manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
			//prescaler during lengthened halfperiod should be set to half //DONE
			//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
	    }
    }
}

printf("lengthened period is: %d\n",manipulated_period_lengthen);

printf("shortened period is: %d\n",manipulated_period_shorten);









    return 0;
}


uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
    
    return dividend & ((1 << base_2_exponent) - 1);
}