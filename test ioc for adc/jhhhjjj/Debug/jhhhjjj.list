
jhhhjjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055bc  080055bc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080055bc  080055bc  000065bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c4  080055c4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c4  080055c4  000065c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080055cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  080055d8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080055d8  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a0d  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d9  00000000  00000000  00018a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001ad20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb3  00000000  00000000  0001bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ac  00000000  00000000  0001c9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a93  00000000  00000000  00033a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000995e4  00000000  00000000  0004652a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfb0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  000dfb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e364c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005484 	.word	0x08005484

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005484 	.word	0x08005484

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 ffbc 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f816 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fc72 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000458:	f000 fc52 	bl	8000d00 <MX_DMA_Init>
  MX_ADC1_Init();
 800045c:	f000 f858 	bl	8000510 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000460:	f000 fc1a 	bl	8000c98 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000464:	f000 f9b0 	bl	80007c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000468:	f000 fa2a 	bl	80008c0 <MX_TIM3_Init>
  MX_TIM17_Init();
 800046c:	f000 fb86 	bl	8000b7c <MX_TIM17_Init>
  MX_TIM1_Init();
 8000470:	f000 f8e0 	bl	8000634 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000474:	f000 faa4 	bl	80009c0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000478:	f000 faf4 	bl	8000a64 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	e7fd      	b.n	800047c <main+0x34>

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b093      	sub	sp, #76	@ 0x4c
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	2410      	movs	r4, #16
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2338      	movs	r3, #56	@ 0x38
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f004 ffcb 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000496:	003b      	movs	r3, r7
 8000498:	0018      	movs	r0, r3
 800049a:	2310      	movs	r3, #16
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f004 ffc4 	bl	800542c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f002 f8bb 	bl	8002624 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2280      	movs	r2, #128	@ 0x80
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2240      	movs	r2, #64	@ 0x40
 80004c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 f8f3 	bl	80026bc <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004da:	f000 fcab 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	003b      	movs	r3, r7
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f6:	003b      	movs	r3, r7
 80004f8:	2100      	movs	r1, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fbf8 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000504:	f000 fc96 	bl	8000e34 <Error_Handler>
  }
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b013      	add	sp, #76	@ 0x4c
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	0018      	movs	r0, r3
 800051a:	230c      	movs	r3, #12
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f004 ff84 	bl	800542c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000524:	4b41      	ldr	r3, [pc, #260]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000526:	4a42      	ldr	r2, [pc, #264]	@ (8000630 <MX_ADC1_Init+0x120>)
 8000528:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800052a:	4b40      	ldr	r3, [pc, #256]	@ (800062c <MX_ADC1_Init+0x11c>)
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	05d2      	lsls	r2, r2, #23
 8000530:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000532:	4b3e      	ldr	r3, [pc, #248]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000538:	4b3c      	ldr	r3, [pc, #240]	@ (800062c <MX_ADC1_Init+0x11c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800053e:	4b3b      	ldr	r3, [pc, #236]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000540:	2280      	movs	r2, #128	@ 0x80
 8000542:	0392      	lsls	r2, r2, #14
 8000544:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000546:	4b39      	ldr	r3, [pc, #228]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000548:	2208      	movs	r2, #8
 800054a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800054c:	4b37      	ldr	r3, [pc, #220]	@ (800062c <MX_ADC1_Init+0x11c>)
 800054e:	2200      	movs	r2, #0
 8000550:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000552:	4b36      	ldr	r3, [pc, #216]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000554:	2200      	movs	r2, #0
 8000556:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000558:	4b34      	ldr	r3, [pc, #208]	@ (800062c <MX_ADC1_Init+0x11c>)
 800055a:	2200      	movs	r2, #0
 800055c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800055e:	4b33      	ldr	r3, [pc, #204]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000560:	2204      	movs	r2, #4
 8000562:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000564:	4b31      	ldr	r3, [pc, #196]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000566:	2220      	movs	r2, #32
 8000568:	2100      	movs	r1, #0
 800056a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056c:	4b2f      	ldr	r3, [pc, #188]	@ (800062c <MX_ADC1_Init+0x11c>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000572:	4b2e      	ldr	r3, [pc, #184]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000574:	2200      	movs	r2, #0
 8000576:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000578:	4b2c      	ldr	r3, [pc, #176]	@ (800062c <MX_ADC1_Init+0x11c>)
 800057a:	222c      	movs	r2, #44	@ 0x2c
 800057c:	2100      	movs	r1, #0
 800057e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000580:	4b2a      	ldr	r3, [pc, #168]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000586:	4b29      	ldr	r3, [pc, #164]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <MX_ADC1_Init+0x11c>)
 800058e:	2200      	movs	r2, #0
 8000590:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000592:	4b26      	ldr	r3, [pc, #152]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000594:	223c      	movs	r2, #60	@ 0x3c
 8000596:	2100      	movs	r1, #0
 8000598:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800059a:	4b24      	ldr	r3, [pc, #144]	@ (800062c <MX_ADC1_Init+0x11c>)
 800059c:	2200      	movs	r2, #0
 800059e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a0:	4b22      	ldr	r3, [pc, #136]	@ (800062c <MX_ADC1_Init+0x11c>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 f894 	bl	80016d0 <HAL_ADC_Init>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005ac:	f000 fc42 	bl	8000e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <MX_ADC1_Init+0x11c>)
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fa29 	bl	8001a20 <HAL_ADC_ConfigChannel>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005d2:	f000 fc2f 	bl	8000e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2204      	movs	r2, #4
 80005da:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_ADC1_Init+0x11c>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fa1c 	bl	8001a20 <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80005ec:	f000 fc22 	bl	8000e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2208      	movs	r2, #8
 80005f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3a      	adds	r2, r7, #4
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_ADC1_Init+0x11c>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fa0f 	bl	8001a20 <HAL_ADC_ConfigChannel>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000606:	f000 fc15 	bl	8000e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	220c      	movs	r2, #12
 800060e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_ADC1_Init+0x11c>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fa02 	bl	8001a20 <HAL_ADC_ConfigChannel>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000620:	f000 fc08 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b004      	add	sp, #16
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000028 	.word	0x20000028
 8000630:	40012400 	.word	0x40012400

08000634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2360      	movs	r3, #96	@ 0x60
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f004 fef1 	bl	800542c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	2354      	movs	r3, #84	@ 0x54
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	230c      	movs	r3, #12
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f004 fee9 	bl	800542c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	2338      	movs	r3, #56	@ 0x38
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	231c      	movs	r3, #28
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f004 fee1 	bl	800542c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	2334      	movs	r3, #52	@ 0x34
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f004 feda 	bl	800542c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b50      	ldr	r3, [pc, #320]	@ (80007bc <MX_TIM1_Init+0x188>)
 800067a:	4a51      	ldr	r2, [pc, #324]	@ (80007c0 <MX_TIM1_Init+0x18c>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800067e:	4b4f      	ldr	r3, [pc, #316]	@ (80007bc <MX_TIM1_Init+0x188>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b4d      	ldr	r3, [pc, #308]	@ (80007bc <MX_TIM1_Init+0x188>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 800068a:	4b4c      	ldr	r3, [pc, #304]	@ (80007bc <MX_TIM1_Init+0x188>)
 800068c:	4a4d      	ldr	r2, [pc, #308]	@ (80007c4 <MX_TIM1_Init+0x190>)
 800068e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000690:	4b4a      	ldr	r3, [pc, #296]	@ (80007bc <MX_TIM1_Init+0x188>)
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	0052      	lsls	r2, r2, #1
 8000696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000698:	4b48      	ldr	r3, [pc, #288]	@ (80007bc <MX_TIM1_Init+0x188>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069e:	4b47      	ldr	r3, [pc, #284]	@ (80007bc <MX_TIM1_Init+0x188>)
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a4:	4b45      	ldr	r3, [pc, #276]	@ (80007bc <MX_TIM1_Init+0x188>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 fe46 	bl	8003338 <HAL_TIM_Base_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006b0:	f000 fbc0 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	2160      	movs	r1, #96	@ 0x60
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	0152      	lsls	r2, r2, #5
 80006bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006be:	187a      	adds	r2, r7, r1
 80006c0:	4b3e      	ldr	r3, [pc, #248]	@ (80007bc <MX_TIM1_Init+0x188>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 fabb 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80006ce:	f000 fbb1 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d2:	4b3a      	ldr	r3, [pc, #232]	@ (80007bc <MX_TIM1_Init+0x188>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fee7 	bl	80034a8 <HAL_TIM_PWM_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80006de:	f000 fba9 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e2:	2154      	movs	r1, #84	@ 0x54
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <MX_TIM1_Init+0x188>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f004 f877 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000706:	f000 fb95 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2138      	movs	r1, #56	@ 0x38
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2260      	movs	r2, #96	@ 0x60
 8000710:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 45;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	222d      	movs	r2, #45	@ 0x2d
 8000716:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000730:	1879      	adds	r1, r7, r1
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_TIM1_Init+0x188>)
 8000734:	220c      	movs	r2, #12
 8000736:	0018      	movs	r0, r3
 8000738:	f003 f982 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000740:	f000 fb78 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	0192      	lsls	r2, r2, #6
 8000768:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	0492      	lsls	r2, r2, #18
 8000782:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_TIM1_Init+0x188>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f004 f88f 	bl	80048c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 80007a6:	f000 fb45 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <MX_TIM1_Init+0x188>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fcc9 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b01c      	add	sp, #112	@ 0x70
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	200000e8 	.word	0x200000e8
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	000003ff 	.word	0x000003ff

080007c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	2320      	movs	r3, #32
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	0018      	movs	r0, r3
 80007d4:	2310      	movs	r3, #16
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f004 fe27 	bl	800542c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	2314      	movs	r3, #20
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	0018      	movs	r0, r3
 80007e4:	230c      	movs	r3, #12
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f004 fe1f 	bl	800542c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2310      	movs	r3, #16
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f004 fe18 	bl	800542c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	05d2      	lsls	r2, r2, #23
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000804:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000806:	223f      	movs	r2, #63	@ 0x3f
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8000810:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <MX_TIM2_Init+0xf4>)
 8000814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000824:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fd86 	bl	8003338 <HAL_TIM_Base_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000830:	f000 fb00 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	2120      	movs	r1, #32
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	0152      	lsls	r2, r2, #5
 800083c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083e:	187a      	adds	r2, r7, r1
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f003 f9fb 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 faf1 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fe87 	bl	8003568 <HAL_TIM_IC_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800085e:	f000 fae9 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2114      	movs	r1, #20
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000870:	187a      	adds	r2, r7, r1
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f003 ffba 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000880:	f000 fad8 	bl	8000e34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2202      	movs	r2, #2
 8000888:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2201      	movs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	220f      	movs	r2, #15
 800089a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800089c:	1d39      	adds	r1, r7, #4
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_TIM2_Init+0xf0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 f828 	bl	80038f8 <HAL_TIM_IC_ConfigChannel>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80008ac:	f000 fac2 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00c      	add	sp, #48	@ 0x30
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000134 	.word	0x20000134
 80008bc:	001fffff 	.word	0x001fffff

080008c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	@ 0x38
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	2328      	movs	r3, #40	@ 0x28
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	0018      	movs	r0, r3
 80008cc:	2310      	movs	r3, #16
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f004 fdab 	bl	800542c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d6:	231c      	movs	r3, #28
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	230c      	movs	r3, #12
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f004 fda3 	bl	800542c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	231c      	movs	r3, #28
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f004 fd9c 	bl	800542c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 80008f6:	4a2f      	ldr	r2, [pc, #188]	@ (80009b4 <MX_TIM3_Init+0xf4>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 80008fc:	4a2e      	ldr	r2, [pc, #184]	@ (80009b8 <MX_TIM3_Init+0xf8>)
 80008fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8000906:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 8000908:	4a2c      	ldr	r2, [pc, #176]	@ (80009bc <MX_TIM3_Init+0xfc>)
 800090a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800090c:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 800091c:	0018      	movs	r0, r3
 800091e:	f002 fd0b 	bl	8003338 <HAL_TIM_Base_Init>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 fa85 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	2128      	movs	r1, #40	@ 0x28
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	0152      	lsls	r2, r2, #5
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000934:	187a      	adds	r2, r7, r1
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f003 f980 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000944:	f000 fa76 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fd4c 	bl	80033e8 <HAL_TIM_OC_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000954:	f000 fa6e 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	211c      	movs	r1, #28
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000966:	187a      	adds	r2, r7, r1
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f003 ff3f 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000976:	f000 fa5d 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800097a:	003b      	movs	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000980:	003b      	movs	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	0039      	movs	r1, r7
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_TIM3_Init+0xf0>)
 8000996:	2200      	movs	r2, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f002 ff4d 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80009a2:	f000 fa47 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b00e      	add	sp, #56	@ 0x38
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	20000180 	.word	0x20000180
 80009b4:	40000400 	.word	0x40000400
 80009b8:	00007fff 	.word	0x00007fff
 80009bc:	00000fff 	.word	0x00000fff

080009c0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	0018      	movs	r0, r3
 80009ca:	231c      	movs	r3, #28
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f004 fd2c 	bl	800542c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009d6:	4a21      	ldr	r2, [pc, #132]	@ (8000a5c <MX_TIM14_Init+0x9c>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024 - 1;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <MX_TIM14_Init+0xa0>)
 80009ea:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	0052      	lsls	r2, r2, #1
 80009f2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009f6:	2280      	movs	r2, #128	@ 0x80
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_TIM14_Init+0x98>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 fc9b 	bl	8003338 <HAL_TIM_Base_Init>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fa15 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_TIM14_Init+0x98>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fd4b 	bl	80034a8 <HAL_TIM_PWM_Init>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000a16:	f000 fa0d 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2260      	movs	r2, #96	@ 0x60
 8000a1e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 45;
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	222d      	movs	r2, #45	@ 0x2d
 8000a24:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1d39      	adds	r1, r7, #4
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_TIM14_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f003 f801 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000a42:	f000 f9f7 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000a46:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <MX_TIM14_Init+0x98>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fb7b 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b008      	add	sp, #32
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	200001cc 	.word	0x200001cc
 8000a5c:	40002000 	.word	0x40002000
 8000a60:	000003ff 	.word	0x000003ff

08000a64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	@ 0x50
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	2334      	movs	r3, #52	@ 0x34
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	231c      	movs	r3, #28
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f004 fcd9 	bl	800542c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2334      	movs	r3, #52	@ 0x34
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f004 fcd2 	bl	800542c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a88:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b78 <MX_TIM16_Init+0x114>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000a8e:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256 - 1;
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000a9c:	22ff      	movs	r2, #255	@ 0xff
 8000a9e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000aa0:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000aa2:	2280      	movs	r2, #128	@ 0x80
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aa8:	4b32      	ldr	r3, [pc, #200]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 fc3e 	bl	8003338 <HAL_TIM_Base_Init>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000ac0:	f000 f9b8 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 fc8e 	bl	80033e8 <HAL_TIM_OC_Init>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 f9b0 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ad4:	2134      	movs	r1, #52	@ 0x34
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 256 - 1;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	22ff      	movs	r2, #255	@ 0xff
 8000ae0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	1879      	adds	r1, r7, r1
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 fe96 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000b10:	f000 f990 	bl	8000e34 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	699a      	ldr	r2, [r3, #24]
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2108      	movs	r1, #8
 8000b20:	430a      	orrs	r2, r1
 8000b22:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	0192      	lsls	r2, r2, #6
 8000b48:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b56:	003a      	movs	r2, r7
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_TIM16_Init+0x110>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f003 feaf 	bl	80048c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8000b66:	f000 f965 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b014      	add	sp, #80	@ 0x50
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	20000218 	.word	0x20000218
 8000b78:	40014400 	.word	0x40014400

08000b7c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	@ 0x50
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	2334      	movs	r3, #52	@ 0x34
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	0018      	movs	r0, r3
 8000b88:	231c      	movs	r3, #28
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f004 fc4d 	bl	800542c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b92:	003b      	movs	r3, r7
 8000b94:	0018      	movs	r0, r3
 8000b96:	2334      	movs	r3, #52	@ 0x34
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f004 fc46 	bl	800542c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8000c90 <MX_TIM17_Init+0x114>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8000c94 <MX_TIM17_Init+0x118>)
 8000baa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10 - 1;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000bb8:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 fbb2 	bl	8003338 <HAL_TIM_Base_Init>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f000 f92c 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f002 fc02 	bl	80033e8 <HAL_TIM_OC_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 f924 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bec:	2134      	movs	r1, #52	@ 0x34
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10 - 1;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2209      	movs	r2, #9
 8000bf8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c18:	1879      	adds	r1, r7, r1
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 fe0a 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000c28:	f000 f904 	bl	8000e34 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2108      	movs	r1, #8
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3c:	003b      	movs	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c42:	003b      	movs	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c48:	003b      	movs	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c4e:	003b      	movs	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c54:	003b      	movs	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	0192      	lsls	r2, r2, #6
 8000c60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c62:	003b      	movs	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c68:	003b      	movs	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c6e:	003a      	movs	r2, r7
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_TIM17_Init+0x110>)
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 fe23 	bl	80048c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000c7e:	f000 f8d9 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b014      	add	sp, #80	@ 0x50
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000264 	.word	0x20000264
 8000c90:	40014800 	.word	0x40014800
 8000c94:	00007fff 	.word	0x00007fff

08000c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000c9e:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <MX_USART2_UART_Init+0x64>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000ca4:	22e1      	movs	r2, #225	@ 0xe1
 8000ca6:	0252      	lsls	r2, r2, #9
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	0552      	lsls	r2, r2, #21
 8000cb0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f003 fe9f 	bl	8004a28 <HAL_UART_Init>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cee:	f000 f8a1 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200002b0 	.word	0x200002b0
 8000cfc:	40004400 	.word	0x40004400

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_DMA_Init+0x38>)
 8000d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_DMA_Init+0x38>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_DMA_Init+0x38>)
 8000d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d16:	2201      	movs	r2, #1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2009      	movs	r0, #9
 8000d24:	f001 f900 	bl	8001f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d28:	2009      	movs	r0, #9
 8000d2a:	f001 f912 	bl	8001f52 <HAL_NVIC_EnableIRQ>

}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	40021000 	.word	0x40021000

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	240c      	movs	r4, #12
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	0018      	movs	r0, r3
 8000d48:	2314      	movs	r3, #20
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f004 fb6d 	bl	800542c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d56:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d58:	2104      	movs	r1, #4
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d62:	2204      	movs	r2, #4
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d70:	2120      	movs	r1, #32
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0xec>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d9a:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <MX_GPIO_Init+0xf0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	@ 0x40
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 fbe3 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2204      	movs	r2, #4
 8000daa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2288      	movs	r2, #136	@ 0x88
 8000db0:	0352      	lsls	r2, r2, #13
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <MX_GPIO_Init+0xf4>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f001 fa6f 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2240      	movs	r2, #64	@ 0x40
 8000dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2201      	movs	r2, #1
 8000dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <MX_GPIO_Init+0xf0>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f001 fa5d 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dea:	0021      	movs	r1, r4
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2280      	movs	r2, #128	@ 0x80
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2284      	movs	r2, #132	@ 0x84
 8000df8:	0392      	lsls	r2, r2, #14
 8000dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2201      	movs	r2, #1
 8000e00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	187a      	adds	r2, r7, r1
 8000e04:	23a0      	movs	r3, #160	@ 0xa0
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f001 fa4a 	bl	80022a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2007      	movs	r0, #7
 8000e16:	f001 f887 	bl	8001f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	f001 f899 	bl	8001f52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b009      	add	sp, #36	@ 0x24
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	50000800 	.word	0x50000800
 8000e30:	50001400 	.word	0x50001400

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	0549      	lsls	r1, r1, #21
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	055b      	lsls	r3, r3, #21
 8000e74:	4013      	ands	r3, r2
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	@ 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	2414      	movs	r4, #20
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	2314      	movs	r3, #20
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f004 fac6 	bl	800542c <memset>
  if(hadc->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <HAL_ADC_MspInit+0xd4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d154      	bne.n	8000f54 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <HAL_ADC_MspInit+0xd8>)
 8000eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eae:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <HAL_ADC_MspInit+0xd8>)
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0349      	lsls	r1, r1, #13
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eb8:	4b29      	ldr	r3, [pc, #164]	@ (8000f60 <HAL_ADC_MspInit+0xd8>)
 8000eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	035b      	lsls	r3, r3, #13
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <HAL_ADC_MspInit+0xd8>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eca:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <HAL_ADC_MspInit+0xd8>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <HAL_ADC_MspInit+0xd8>)
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2233      	movs	r2, #51	@ 0x33
 8000ee2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	193a      	adds	r2, r7, r4
 8000ef2:	23a0      	movs	r3, #160	@ 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 f9d3 	bl	80022a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f00:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f06:	2205      	movs	r2, #5
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f1e:	2280      	movs	r2, #128	@ 0x80
 8000f20:	0052      	lsls	r2, r2, #1
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	00d2      	lsls	r2, r2, #3
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f001 f826 	bl	8001f8c <HAL_DMA_Init>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000f44:	f7ff ff76 	bl	8000e34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8000f4e:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b00b      	add	sp, #44	@ 0x2c
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40012400 	.word	0x40012400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	2000008c 	.word	0x2000008c
 8000f68:	40020008 	.word	0x40020008

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b099      	sub	sp, #100	@ 0x64
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	234c      	movs	r3, #76	@ 0x4c
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f004 fa54 	bl	800542c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	2424      	movs	r4, #36	@ 0x24
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2328      	movs	r3, #40	@ 0x28
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f004 fa4c 	bl	800542c <memset>
  if(htim_base->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a64      	ldr	r2, [pc, #400]	@ (800112c <HAL_TIM_Base_MspInit+0x1c0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d11d      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	0392      	lsls	r2, r2, #14
 8000fa4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f002 f848 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8000fb8:	f7ff ff3c 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8000fc2:	2180      	movs	r1, #128	@ 0x80
 8000fc4:	0109      	lsls	r1, r1, #4
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fca:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8000fcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000fd8:	e0a3      	b.n	8001122 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d138      	bne.n	8001058 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8000fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fea:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8000ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001002:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001004:	2101      	movs	r1, #1
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
 800100a:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100e:	2201      	movs	r2, #1
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001016:	214c      	movs	r1, #76	@ 0x4c
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2280      	movs	r2, #128	@ 0x80
 800101c:	0212      	lsls	r2, r2, #8
 800101e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2202      	movs	r2, #2
 8001024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2202      	movs	r2, #2
 8001036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	187a      	adds	r2, r7, r1
 800103a:	23a0      	movs	r3, #160	@ 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f001 f92f 	bl	80022a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	200f      	movs	r0, #15
 800104c:	f000 ff6c 	bl	8001f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001050:	200f      	movs	r0, #15
 8001052:	f000 ff7e 	bl	8001f52 <HAL_NVIC_EnableIRQ>
}
 8001056:	e064      	b.n	8001122 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a35      	ldr	r2, [pc, #212]	@ (8001134 <HAL_TIM_Base_MspInit+0x1c8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d114      	bne.n	800108c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001062:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001068:	2102      	movs	r1, #2
 800106a:	430a      	orrs	r2, r1
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800106e:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2010      	movs	r0, #16
 8001080:	f000 ff52 	bl	8001f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001084:	2010      	movs	r0, #16
 8001086:	f000 ff64 	bl	8001f52 <HAL_NVIC_EnableIRQ>
}
 800108a:	e04a      	b.n	8001122 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM14)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_TIM_Base_MspInit+0x1cc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10e      	bne.n	80010b4 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800109a:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 800109c:	2180      	movs	r1, #128	@ 0x80
 800109e:	0209      	lsls	r1, r1, #8
 80010a0:	430a      	orrs	r2, r1
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 80010a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
}
 80010b2:	e036      	b.n	8001122 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM16)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a20      	ldr	r2, [pc, #128]	@ (800113c <HAL_TIM_Base_MspInit+0x1d0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d116      	bne.n	80010ec <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 80010c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	0289      	lsls	r1, r1, #10
 80010c8:	430a      	orrs	r2, r1
 80010ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 80010ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	029b      	lsls	r3, r3, #10
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2015      	movs	r0, #21
 80010e0:	f000 ff22 	bl	8001f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80010e4:	2015      	movs	r0, #21
 80010e6:	f000 ff34 	bl	8001f52 <HAL_NVIC_EnableIRQ>
}
 80010ea:	e01a      	b.n	8001122 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM17)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <HAL_TIM_Base_MspInit+0x1d4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d115      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 80010f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	02c9      	lsls	r1, r1, #11
 8001100:	430a      	orrs	r2, r1
 8001102:	641a      	str	r2, [r3, #64]	@ 0x40
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_TIM_Base_MspInit+0x1c4>)
 8001106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	02db      	lsls	r3, r3, #11
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2016      	movs	r0, #22
 8001118:	f000 ff06 	bl	8001f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800111c:	2016      	movs	r0, #22
 800111e:	f000 ff18 	bl	8001f52 <HAL_NVIC_EnableIRQ>
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b019      	add	sp, #100	@ 0x64
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	40012c00 	.word	0x40012c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40000400 	.word	0x40000400
 8001138:	40002000 	.word	0x40002000
 800113c:	40014400 	.word	0x40014400
 8001140:	40014800 	.word	0x40014800

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08b      	sub	sp, #44	@ 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	2414      	movs	r4, #20
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	2314      	movs	r3, #20
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f004 f968 	bl	800542c <memset>
  if(htim->Instance==TIM1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <HAL_TIM_MspPostInit+0xc4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d124      	bne.n	80011b0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b29      	ldr	r3, [pc, #164]	@ (800120c <HAL_TIM_MspPostInit+0xc8>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <HAL_TIM_MspPostInit+0xc8>)
 800116c:	2101      	movs	r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <HAL_TIM_MspPostInit+0xc8>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001176:	2201      	movs	r2, #1
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	2280      	movs	r2, #128	@ 0x80
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	0021      	movs	r1, r4
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2202      	movs	r2, #2
 800118c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2202      	movs	r2, #2
 800119e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	187a      	adds	r2, r7, r1
 80011a2:	23a0      	movs	r3, #160	@ 0xa0
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 f87b 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80011ae:	e027      	b.n	8001200 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM14)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a16      	ldr	r2, [pc, #88]	@ (8001210 <HAL_TIM_MspPostInit+0xcc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d122      	bne.n	8001200 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_TIM_MspPostInit+0xc8>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <HAL_TIM_MspPostInit+0xc8>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_TIM_MspPostInit+0xc8>)
 80011c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011d2:	2114      	movs	r1, #20
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2202      	movs	r2, #2
 80011de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2204      	movs	r2, #4
 80011f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	187a      	adds	r2, r7, r1
 80011f4:	23a0      	movs	r3, #160	@ 0xa0
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	0011      	movs	r1, r2
 80011fa:	0018      	movs	r0, r3
 80011fc:	f001 f852 	bl	80022a4 <HAL_GPIO_Init>
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b00b      	add	sp, #44	@ 0x2c
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40002000 	.word	0x40002000

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b08b      	sub	sp, #44	@ 0x2c
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	2414      	movs	r4, #20
 800121e:	193b      	adds	r3, r7, r4
 8001220:	0018      	movs	r0, r3
 8001222:	2314      	movs	r3, #20
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f004 f900 	bl	800542c <memset>
  if(huart->Instance==USART2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <HAL_UART_MspInit+0x8c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d130      	bne.n	8001298 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	0289      	lsls	r1, r1, #10
 8001240:	430a      	orrs	r2, r1
 8001242:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001258:	2101      	movs	r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	635a      	str	r2, [r3, #52]	@ 0x34
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_UART_MspInit+0x90>)
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	2201      	movs	r2, #1
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800126a:	0021      	movs	r1, r4
 800126c:	187b      	adds	r3, r7, r1
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2202      	movs	r2, #2
 8001276:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2201      	movs	r2, #1
 800127c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2201      	movs	r2, #1
 8001288:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	187a      	adds	r2, r7, r1
 800128c:	23a0      	movs	r3, #160	@ 0xa0
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f001 f806 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b00b      	add	sp, #44	@ 0x2c
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012bc:	46c0      	nop			@ (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d0:	f000 f8e4 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 f960 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <DMA1_Channel1_IRQHandler+0x14>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fed2 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	2000008c 	.word	0x2000008c

08001308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <TIM2_IRQHandler+0x14>)
 800130e:	0018      	movs	r0, r3
 8001310:	f002 f98a 	bl	8003628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	20000134 	.word	0x20000134

08001320 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <TIM3_IRQHandler+0x14>)
 8001326:	0018      	movs	r0, r3
 8001328:	f002 f97e 	bl	8003628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	20000180 	.word	0x20000180

08001338 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <TIM16_IRQHandler+0x14>)
 800133e:	0018      	movs	r0, r3
 8001340:	f002 f972 	bl	8003628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	20000218 	.word	0x20000218

08001350 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <TIM17_IRQHandler+0x14>)
 8001356:	0018      	movs	r0, r3
 8001358:	f002 f966 	bl	8003628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	20000264 	.word	0x20000264

08001368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001376:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001378:	f7ff fff6 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013a2:	f004 f84b 	bl	800543c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013a6:	f7ff f84f 	bl	8000448 <main>

080013aa <LoopForever>:

LoopForever:
  b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   r0, =_estack
 80013ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b8:	080055cc 	.word	0x080055cc
  ldr r2, =_sbss
 80013bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c0:	20000348 	.word	0x20000348

080013c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_Init+0x3c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_Init+0x3c>)
 80013da:	2180      	movs	r1, #128	@ 0x80
 80013dc:	0049      	lsls	r1, r1, #1
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f810 	bl	8001408 <HAL_InitTick>
 80013e8:	1e03      	subs	r3, r0, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e001      	b.n	80013f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fd24 	bl	8000e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	230f      	movs	r3, #15
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <HAL_InitTick+0x88>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d02b      	beq.n	8001478 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_InitTick+0x8c>)
 8001422:	681c      	ldr	r4, [r3, #0]
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_InitTick+0x88>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	0019      	movs	r1, r3
 800142a:	23fa      	movs	r3, #250	@ 0xfa
 800142c:	0098      	lsls	r0, r3, #2
 800142e:	f7fe fe69 	bl	8000104 <__udivsi3>
 8001432:	0003      	movs	r3, r0
 8001434:	0019      	movs	r1, r3
 8001436:	0020      	movs	r0, r4
 8001438:	f7fe fe64 	bl	8000104 <__udivsi3>
 800143c:	0003      	movs	r3, r0
 800143e:	0018      	movs	r0, r3
 8001440:	f000 fd97 	bl	8001f72 <HAL_SYSTICK_Config>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d112      	bne.n	800146e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d80a      	bhi.n	8001464 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2301      	movs	r3, #1
 8001452:	425b      	negs	r3, r3
 8001454:	2200      	movs	r2, #0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fd66 	bl	8001f28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_InitTick+0x90>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00d      	b.n	8001480 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e008      	b.n	8001480 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800146e:	230f      	movs	r3, #15
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e003      	b.n	8001480 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001480:	230f      	movs	r3, #15
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b005      	add	sp, #20
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	20000008 	.word	0x20000008
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	001a      	movs	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x20>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	18d2      	adds	r2, r2, r3
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <HAL_IncTick+0x20>)
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000344 	.word	0x20000344

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b02      	ldr	r3, [pc, #8]	@ (80014d0 <HAL_GetTick+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	20000344 	.word	0x20000344

080014d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80014e4:	401a      	ands	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	fe3fffff 	.word	0xfe3fffff

080014fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	23e0      	movs	r3, #224	@ 0xe0
 800150a:	045b      	lsls	r3, r3, #17
 800150c:	4013      	ands	r3, r2
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}

08001516 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	2104      	movs	r1, #4
 800152a:	400a      	ands	r2, r1
 800152c:	2107      	movs	r1, #7
 800152e:	4091      	lsls	r1, r2
 8001530:	000a      	movs	r2, r1
 8001532:	43d2      	mvns	r2, r2
 8001534:	401a      	ands	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2104      	movs	r1, #4
 800153a:	400b      	ands	r3, r1
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4099      	lsls	r1, r3
 8001540:	000b      	movs	r3, r1
 8001542:	431a      	orrs	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}

08001550 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	2104      	movs	r1, #4
 8001562:	400a      	ands	r2, r1
 8001564:	2107      	movs	r1, #7
 8001566:	4091      	lsls	r1, r2
 8001568:	000a      	movs	r2, r1
 800156a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2104      	movs	r1, #4
 8001570:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001572:	40da      	lsrs	r2, r3
 8001574:	0013      	movs	r3, r2
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}

0800157e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	211f      	movs	r1, #31
 8001592:	400a      	ands	r2, r1
 8001594:	210f      	movs	r1, #15
 8001596:	4091      	lsls	r1, r2
 8001598:	000a      	movs	r2, r1
 800159a:	43d2      	mvns	r2, r2
 800159c:	401a      	ands	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0e9b      	lsrs	r3, r3, #26
 80015a2:	210f      	movs	r1, #15
 80015a4:	4019      	ands	r1, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	201f      	movs	r0, #31
 80015aa:	4003      	ands	r3, r0
 80015ac:	4099      	lsls	r1, r3
 80015ae:	000b      	movs	r3, r1
 80015b0:	431a      	orrs	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}

080015be <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	035b      	lsls	r3, r3, #13
 80015d0:	0b5b      	lsrs	r3, r3, #13
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	0352      	lsls	r2, r2, #13
 80015f2:	0b52      	lsrs	r2, r2, #13
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	0212      	lsls	r2, r2, #8
 8001618:	43d2      	mvns	r2, r2
 800161a:	401a      	ands	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	400b      	ands	r3, r1
 8001624:	4904      	ldr	r1, [pc, #16]	@ (8001638 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001626:	400b      	ands	r3, r1
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	07ffff00 	.word	0x07ffff00

0800163c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <LL_ADC_EnableInternalRegulator+0x24>)
 800164a:	4013      	ands	r3, r2
 800164c:	2280      	movs	r2, #128	@ 0x80
 800164e:	0552      	lsls	r2, r2, #21
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	6fffffe8 	.word	0x6fffffe8

08001664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	055b      	lsls	r3, r3, #21
 8001674:	401a      	ands	r2, r3
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	055b      	lsls	r3, r3, #21
 800167a:	429a      	cmp	r2, r3
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <LL_ADC_IsEnabled+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_IsEnabled+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}

080016ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d101      	bne.n	80016c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d8:	231f      	movs	r3, #31
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e17f      	b.n	80019f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fbc1 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2254      	movs	r2, #84	@ 0x54
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff ffa3 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d115      	bne.n	800174e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff ff88 	bl	800163c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800172c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a00 <HAL_ADC_Init+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	49b4      	ldr	r1, [pc, #720]	@ (8001a04 <HAL_ADC_Init+0x334>)
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe fce6 	bl	8000104 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	3301      	adds	r3, #1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001740:	e002      	b.n	8001748 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3b01      	subs	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff ff86 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d10f      	bne.n	800177c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	2210      	movs	r2, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176c:	2201      	movs	r2, #1
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001774:	231f      	movs	r3, #31
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff94 	bl	80016ae <LL_ADC_REG_IsConversionOngoing>
 8001786:	0003      	movs	r3, r0
 8001788:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	2210      	movs	r2, #16
 8001790:	4013      	ands	r3, r2
 8001792:	d000      	beq.n	8001796 <HAL_ADC_Init+0xc6>
 8001794:	e122      	b.n	80019dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d000      	beq.n	800179e <HAL_ADC_Init+0xce>
 800179c:	e11e      	b.n	80019dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a99      	ldr	r2, [pc, #612]	@ (8001a08 <HAL_ADC_Init+0x338>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	2202      	movs	r2, #2
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff ff6a 	bl	800168c <LL_ADC_IsEnabled>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d000      	beq.n	80017be <HAL_ADC_Init+0xee>
 80017bc:	e0ad      	b.n	800191a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7e1b      	ldrb	r3, [r3, #24]
 80017c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80017c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e5b      	ldrb	r3, [r3, #25]
 80017ce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7e9b      	ldrb	r3, [r3, #26]
 80017d6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_ADC_Init+0x118>
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	e000      	b.n	80017ea <HAL_ADC_Init+0x11a>
 80017e8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017ea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017f0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da04      	bge.n	8001804 <HAL_ADC_Init+0x134>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	e001      	b.n	8001808 <HAL_ADC_Init+0x138>
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001808:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	212c      	movs	r1, #44	@ 0x2c
 800180e:	5c5b      	ldrb	r3, [r3, r1]
 8001810:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001812:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2220      	movs	r2, #32
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d115      	bne.n	8001850 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7e9b      	ldrb	r3, [r3, #26]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2280      	movs	r2, #128	@ 0x80
 8001830:	0252      	lsls	r2, r2, #9
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	e00b      	b.n	8001850 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183c:	2220      	movs	r2, #32
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001848:	2201      	movs	r2, #1
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00a      	beq.n	800186e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800185c:	23e0      	movs	r3, #224	@ 0xe0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001866:	4313      	orrs	r3, r2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a65      	ldr	r2, [pc, #404]	@ (8001a0c <HAL_ADC_Init+0x33c>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0f9b      	lsrs	r3, r3, #30
 800188a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001890:	4313      	orrs	r3, r2
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	223c      	movs	r2, #60	@ 0x3c
 800189c:	5c9b      	ldrb	r3, [r3, r2]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d111      	bne.n	80018c6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0f9b      	lsrs	r3, r3, #30
 80018a8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018ae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80018b4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80018ba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	2201      	movs	r2, #1
 80018c2:	4313      	orrs	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	4a50      	ldr	r2, [pc, #320]	@ (8001a10 <HAL_ADC_Init+0x340>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	430a      	orrs	r2, r1
 80018da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	23c0      	movs	r3, #192	@ 0xc0
 80018e2:	061b      	lsls	r3, r3, #24
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d018      	beq.n	800191a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d012      	beq.n	800191a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	061b      	lsls	r3, r3, #24
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d00c      	beq.n	800191a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001900:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <HAL_ADC_Init+0x344>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a44      	ldr	r2, [pc, #272]	@ (8001a18 <HAL_ADC_Init+0x348>)
 8001906:	4013      	ands	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	23f0      	movs	r3, #240	@ 0xf0
 8001910:	039b      	lsls	r3, r3, #14
 8001912:	401a      	ands	r2, r3
 8001914:	4b3f      	ldr	r3, [pc, #252]	@ (8001a14 <HAL_ADC_Init+0x344>)
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001922:	001a      	movs	r2, r3
 8001924:	2100      	movs	r1, #0
 8001926:	f7ff fdf6 	bl	8001516 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001932:	493a      	ldr	r1, [pc, #232]	@ (8001a1c <HAL_ADC_Init+0x34c>)
 8001934:	001a      	movs	r2, r3
 8001936:	f7ff fdee 	bl	8001516 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2110      	movs	r1, #16
 800194e:	4249      	negs	r1, r1
 8001950:	430a      	orrs	r2, r1
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
 8001954:	e018      	b.n	8001988 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	039b      	lsls	r3, r3, #14
 800195e:	429a      	cmp	r2, r3
 8001960:	d112      	bne.n	8001988 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	3b01      	subs	r3, #1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	221c      	movs	r2, #28
 8001972:	4013      	ands	r3, r2
 8001974:	2210      	movs	r2, #16
 8001976:	4252      	negs	r2, r2
 8001978:	409a      	lsls	r2, r3
 800197a:	0011      	movs	r1, r2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2100      	movs	r1, #0
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff fdde 	bl	8001550 <LL_ADC_GetSamplingTimeCommonChannels>
 8001994:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800199a:	429a      	cmp	r2, r3
 800199c:	d10b      	bne.n	80019b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	2203      	movs	r2, #3
 80019aa:	4393      	bics	r3, r2
 80019ac:	2201      	movs	r2, #1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019b4:	e01c      	b.n	80019f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ba:	2212      	movs	r2, #18
 80019bc:	4393      	bics	r3, r2
 80019be:	2210      	movs	r2, #16
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ca:	2201      	movs	r2, #1
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80019d2:	231f      	movs	r3, #31
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019da:	e009      	b.n	80019f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	2210      	movs	r2, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019e8:	231f      	movs	r3, #31
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019f0:	231f      	movs	r3, #31
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b008      	add	sp, #32
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	20000000 	.word	0x20000000
 8001a04:	00030d40 	.word	0x00030d40
 8001a08:	fffffefd 	.word	0xfffffefd
 8001a0c:	ffde0201 	.word	0xffde0201
 8001a10:	1ffffc02 	.word	0x1ffffc02
 8001a14:	40012708 	.word	0x40012708
 8001a18:	ffc3ffff 	.word	0xffc3ffff
 8001a1c:	07ffff04 	.word	0x07ffff04

08001a20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2a:	2317      	movs	r3, #23
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2254      	movs	r2, #84	@ 0x54
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x24>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e1c0      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x3a6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2254      	movs	r2, #84	@ 0x54
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fe2c 	bl	80016ae <LL_ADC_REG_IsConversionOngoing>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d000      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x3c>
 8001a5a:	e1a3      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d100      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x46>
 8001a64:	e143      	b.n	8001cee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d004      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a76:	4ac1      	ldr	r2, [pc, #772]	@ (8001d7c <HAL_ADC_ConfigChannel+0x35c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d108      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0019      	movs	r1, r3
 8001a86:	0010      	movs	r0, r2
 8001a88:	f7ff fd99 	bl	80015be <LL_ADC_REG_SetSequencerChAdd>
 8001a8c:	e0c9      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	211f      	movs	r1, #31
 8001a98:	400b      	ands	r3, r1
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	4099      	lsls	r1, r3
 8001a9e:	000b      	movs	r3, r1
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	035b      	lsls	r3, r3, #13
 8001aac:	0b5b      	lsrs	r3, r3, #13
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x9c>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	221f      	movs	r2, #31
 8001ab8:	4013      	ands	r3, r2
 8001aba:	e098      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d000      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0xa8>
 8001ac6:	e091      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1cc>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d000      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0xb4>
 8001ad2:	e089      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1c8>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	4013      	ands	r3, r2
 8001adc:	d000      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0xc0>
 8001ade:	e081      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1c4>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d000      	beq.n	8001aec <HAL_ADC_ConfigChannel+0xcc>
 8001aea:	e079      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1c0>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2210      	movs	r2, #16
 8001af2:	4013      	ands	r3, r2
 8001af4:	d000      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0xd8>
 8001af6:	e071      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1bc>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2220      	movs	r2, #32
 8001afe:	4013      	ands	r3, r2
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0xe4>
 8001b02:	e069      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1b8>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2240      	movs	r2, #64	@ 0x40
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0xf0>
 8001b0e:	e061      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1b4>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2280      	movs	r2, #128	@ 0x80
 8001b16:	4013      	ands	r3, r2
 8001b18:	d000      	beq.n	8001b1c <HAL_ADC_ConfigChannel+0xfc>
 8001b1a:	e059      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1b0>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d151      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1ac>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d149      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1a8>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d141      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1a4>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d139      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1a0>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	015b      	lsls	r3, r3, #5
 8001b54:	4013      	ands	r3, r2
 8001b56:	d131      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x19c>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	019b      	lsls	r3, r3, #6
 8001b60:	4013      	ands	r3, r2
 8001b62:	d129      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x198>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	01db      	lsls	r3, r3, #7
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d121      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x194>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d119      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x190>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	025b      	lsls	r3, r3, #9
 8001b84:	4013      	ands	r3, r2
 8001b86:	d111      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x18c>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	029b      	lsls	r3, r3, #10
 8001b90:	4013      	ands	r3, r2
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x188>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	02db      	lsls	r3, r3, #11
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d001      	beq.n	8001ba4 <HAL_ADC_ConfigChannel+0x184>
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	e024      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e022      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	2311      	movs	r3, #17
 8001baa:	e020      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	2310      	movs	r3, #16
 8001bae:	e01e      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	e01c      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	230e      	movs	r3, #14
 8001bb6:	e01a      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	230d      	movs	r3, #13
 8001bba:	e018      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	e016      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	230b      	movs	r3, #11
 8001bc2:	e014      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	e012      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2309      	movs	r3, #9
 8001bca:	e010      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2308      	movs	r3, #8
 8001bce:	e00e      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	e00c      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bd4:	2306      	movs	r3, #6
 8001bd6:	e00a      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bd8:	2305      	movs	r3, #5
 8001bda:	e008      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e006      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2303      	movs	r3, #3
 8001be2:	e004      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1ce>
 8001bec:	2300      	movs	r3, #0
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	6852      	ldr	r2, [r2, #4]
 8001bf2:	201f      	movs	r0, #31
 8001bf4:	4002      	ands	r2, r0
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d808      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	f7ff fcae 	bl	800157e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	001a      	movs	r2, r3
 8001c30:	f7ff fce8 	bl	8001604 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db00      	blt.n	8001c3e <HAL_ADC_ConfigChannel+0x21e>
 8001c3c:	e0bc      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c3e:	4b50      	ldr	r3, [pc, #320]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fc5b 	bl	80014fc <LL_ADC_GetCommonPathInternalCh>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <HAL_ADC_ConfigChannel+0x364>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d122      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	2380      	movs	r3, #128	@ 0x80
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c5c:	d11d      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	4a46      	ldr	r2, [pc, #280]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001c68:	0019      	movs	r1, r3
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	f7ff fc32 	bl	80014d4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c70:	4b45      	ldr	r3, [pc, #276]	@ (8001d88 <HAL_ADC_ConfigChannel+0x368>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4945      	ldr	r1, [pc, #276]	@ (8001d8c <HAL_ADC_ConfigChannel+0x36c>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7fe fa44 	bl	8000104 <__udivsi3>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	0013      	movs	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	189b      	adds	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8a:	e002      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c98:	e08e      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d90 <HAL_ADC_ConfigChannel+0x370>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	045b      	lsls	r3, r3, #17
 8001caa:	4013      	ands	r3, r2
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	0452      	lsls	r2, r2, #17
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	4a32      	ldr	r2, [pc, #200]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001cb8:	0019      	movs	r1, r3
 8001cba:	0010      	movs	r0, r2
 8001cbc:	f7ff fc0a 	bl	80014d4 <LL_ADC_SetCommonPathInternalCh>
 8001cc0:	e07a      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a33      	ldr	r2, [pc, #204]	@ (8001d94 <HAL_ADC_ConfigChannel+0x374>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d000      	beq.n	8001cce <HAL_ADC_ConfigChannel+0x2ae>
 8001ccc:	e074      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	03db      	lsls	r3, r3, #15
 8001cd4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cd6:	d000      	beq.n	8001cda <HAL_ADC_ConfigChannel+0x2ba>
 8001cd8:	e06e      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	03d2      	lsls	r2, r2, #15
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	0010      	movs	r0, r2
 8001ce8:	f7ff fbf4 	bl	80014d4 <LL_ADC_SetCommonPathInternalCh>
 8001cec:	e064      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001d7c <HAL_ADC_ConfigChannel+0x35c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d107      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	0010      	movs	r0, r2
 8001d10:	f7ff fc66 	bl	80015e0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da4d      	bge.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fbec 	bl	80014fc <LL_ADC_GetCommonPathInternalCh>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_ADC_ConfigChannel+0x364>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4a18      	ldr	r2, [pc, #96]	@ (8001d98 <HAL_ADC_ConfigChannel+0x378>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	f7ff fbc9 	bl	80014d4 <LL_ADC_SetCommonPathInternalCh>
 8001d42:	e039      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <HAL_ADC_ConfigChannel+0x370>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d108      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <HAL_ADC_ConfigChannel+0x37c>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f7ff fbbb 	bl	80014d4 <LL_ADC_SetCommonPathInternalCh>
 8001d5e:	e02b      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_ADC_ConfigChannel+0x374>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d126      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <HAL_ADC_ConfigChannel+0x380>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	4a03      	ldr	r2, [pc, #12]	@ (8001d80 <HAL_ADC_ConfigChannel+0x360>)
 8001d72:	0019      	movs	r1, r3
 8001d74:	0010      	movs	r0, r2
 8001d76:	f7ff fbad 	bl	80014d4 <LL_ADC_SetCommonPathInternalCh>
 8001d7a:	e01d      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x398>
 8001d7c:	80000004 	.word	0x80000004
 8001d80:	40012708 	.word	0x40012708
 8001d84:	b0001000 	.word	0xb0001000
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	00030d40 	.word	0x00030d40
 8001d90:	b8004000 	.word	0xb8004000
 8001d94:	b4002000 	.word	0xb4002000
 8001d98:	ff7fffff 	.word	0xff7fffff
 8001d9c:	feffffff 	.word	0xfeffffff
 8001da0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	2220      	movs	r2, #32
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001db0:	2317      	movs	r3, #23
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2254      	movs	r2, #84	@ 0x54
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dc0:	2317      	movs	r3, #23
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001de2:	d809      	bhi.n	8001df8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	001a      	movs	r2, r3
 8001dea:	231f      	movs	r3, #31
 8001dec:	401a      	ands	r2, r3
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_EnableIRQ+0x30>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	4091      	lsls	r1, r2
 8001df4:	000a      	movs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001df8:	46c0      	nop			@ (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e18:	d828      	bhi.n	8001e6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed8 <__NVIC_SetPriority+0xd4>)
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	33c0      	adds	r3, #192	@ 0xc0
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	589b      	ldr	r3, [r3, r2]
 8001e2a:	1dfa      	adds	r2, r7, #7
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	0011      	movs	r1, r2
 8001e30:	2203      	movs	r2, #3
 8001e32:	400a      	ands	r2, r1
 8001e34:	00d2      	lsls	r2, r2, #3
 8001e36:	21ff      	movs	r1, #255	@ 0xff
 8001e38:	4091      	lsls	r1, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	43d2      	mvns	r2, r2
 8001e3e:	401a      	ands	r2, r3
 8001e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	22ff      	movs	r2, #255	@ 0xff
 8001e48:	401a      	ands	r2, r3
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	2303      	movs	r3, #3
 8001e52:	4003      	ands	r3, r0
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e58:	481f      	ldr	r0, [pc, #124]	@ (8001ed8 <__NVIC_SetPriority+0xd4>)
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	430a      	orrs	r2, r1
 8001e64:	33c0      	adds	r3, #192	@ 0xc0
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e6a:	e031      	b.n	8001ed0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <__NVIC_SetPriority+0xd8>)
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	0019      	movs	r1, r3
 8001e74:	230f      	movs	r3, #15
 8001e76:	400b      	ands	r3, r1
 8001e78:	3b08      	subs	r3, #8
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	18d3      	adds	r3, r2, r3
 8001e82:	3304      	adds	r3, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	1dfa      	adds	r2, r7, #7
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	400a      	ands	r2, r1
 8001e90:	00d2      	lsls	r2, r2, #3
 8001e92:	21ff      	movs	r1, #255	@ 0xff
 8001e94:	4091      	lsls	r1, r2
 8001e96:	000a      	movs	r2, r1
 8001e98:	43d2      	mvns	r2, r2
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	22ff      	movs	r2, #255	@ 0xff
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	2303      	movs	r3, #3
 8001eae:	4003      	ands	r3, r0
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eb4:	4809      	ldr	r0, [pc, #36]	@ (8001edc <__NVIC_SetPriority+0xd8>)
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	001c      	movs	r4, r3
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	4023      	ands	r3, r4
 8001ec0:	3b08      	subs	r3, #8
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	3306      	adds	r3, #6
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	18c3      	adds	r3, r0, r3
 8001ecc:	3304      	adds	r3, #4
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b003      	add	sp, #12
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	045b      	lsls	r3, r3, #17
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d301      	bcc.n	8001ef8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e010      	b.n	8001f1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <SysTick_Config+0x44>)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	3a01      	subs	r2, #1
 8001efe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f00:	2301      	movs	r3, #1
 8001f02:	425b      	negs	r3, r3
 8001f04:	2103      	movs	r1, #3
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff ff7c 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <SysTick_Config+0x44>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <SysTick_Config+0x44>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	210f      	movs	r1, #15
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	1c02      	adds	r2, r0, #0
 8001f38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	0011      	movs	r1, r2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	0002      	movs	r2, r0
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff ff33 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff ffaf 	bl	8001ee0 <SysTick_Config>
 8001f82:	0003      	movs	r3, r0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e077      	b.n	800208e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8002098 <HAL_DMA_Init+0x10c>)
 8001fa4:	4694      	mov	ip, r2
 8001fa6:	4463      	add	r3, ip
 8001fa8:	2114      	movs	r1, #20
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7fe f8aa 	bl	8000104 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	009a      	lsls	r2, r3, #2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2225      	movs	r2, #37	@ 0x25
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4934      	ldr	r1, [pc, #208]	@ (800209c <HAL_DMA_Init+0x110>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f8fb 	bl	8002204 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	01db      	lsls	r3, r3, #7
 8002016:	429a      	cmp	r2, r3
 8002018:	d102      	bne.n	8002020 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002028:	213f      	movs	r1, #63	@ 0x3f
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002036:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d011      	beq.n	8002064 <HAL_DMA_Init+0xd8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d80d      	bhi.n	8002064 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0018      	movs	r0, r3
 800204c:	f000 f906 	bl	800225c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e008      	b.n	8002076 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2225      	movs	r2, #37	@ 0x25
 8002080:	2101      	movs	r1, #1
 8002082:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b002      	add	sp, #8
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	bffdfff8 	.word	0xbffdfff8
 800209c:	ffff800f 	.word	0xffff800f

080020a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80020a8:	4b55      	ldr	r3, [pc, #340]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	221c      	movs	r2, #28
 80020bc:	4013      	ands	r3, r2
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	d027      	beq.n	800211a <HAL_DMA_IRQHandler+0x7a>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2204      	movs	r2, #4
 80020ce:	4013      	ands	r3, r2
 80020d0:	d023      	beq.n	800211a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	d107      	bne.n	80020ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2104      	movs	r1, #4
 80020ea:	438a      	bics	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80020ee:	4b44      	ldr	r3, [pc, #272]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	221c      	movs	r2, #28
 80020f8:	4013      	ands	r3, r2
 80020fa:	2204      	movs	r2, #4
 80020fc:	409a      	lsls	r2, r3
 80020fe:	4b40      	ldr	r3, [pc, #256]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	2b00      	cmp	r3, #0
 800210a:	d100      	bne.n	800210e <HAL_DMA_IRQHandler+0x6e>
 800210c:	e073      	b.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	0010      	movs	r0, r2
 8002116:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002118:	e06d      	b.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	221c      	movs	r2, #28
 8002120:	4013      	ands	r3, r2
 8002122:	2202      	movs	r2, #2
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	d02e      	beq.n	800218c <HAL_DMA_IRQHandler+0xec>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2202      	movs	r2, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d02a      	beq.n	800218c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d10b      	bne.n	800215a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	210a      	movs	r1, #10
 800214e:	438a      	bics	r2, r1
 8002150:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2225      	movs	r2, #37	@ 0x25
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800215a:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	221c      	movs	r2, #28
 8002164:	4013      	ands	r3, r2
 8002166:	2202      	movs	r2, #2
 8002168:	409a      	lsls	r2, r3
 800216a:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03a      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	0010      	movs	r0, r2
 8002188:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800218a:	e034      	b.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	221c      	movs	r2, #28
 8002192:	4013      	ands	r3, r2
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	d02b      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x158>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2208      	movs	r2, #8
 80021a4:	4013      	ands	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	210e      	movs	r1, #14
 80021b4:	438a      	bics	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	221c      	movs	r2, #28
 80021c2:	4013      	ands	r3, r2
 80021c4:	2201      	movs	r2, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_DMA_IRQHandler+0x160>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2225      	movs	r2, #37	@ 0x25
 80021d8:	2101      	movs	r1, #1
 80021da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	@ 0x24
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	0010      	movs	r0, r2
 80021f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46c0      	nop			@ (mov r8, r8)
}
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020000 	.word	0x40020000

08002204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	4a10      	ldr	r2, [pc, #64]	@ (8002254 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002214:	4694      	mov	ip, r2
 8002216:	4463      	add	r3, ip
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	001a      	movs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	001a      	movs	r2, r3
 8002226:	23ff      	movs	r3, #255	@ 0xff
 8002228:	4013      	ands	r3, r2
 800222a:	3b08      	subs	r3, #8
 800222c:	2114      	movs	r1, #20
 800222e:	0018      	movs	r0, r3
 8002230:	f7fd ff68 	bl	8000104 <__udivsi3>
 8002234:	0003      	movs	r3, r0
 8002236:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800223c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	221f      	movs	r2, #31
 8002242:	4013      	ands	r3, r2
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}
 8002254:	10008200 	.word	0x10008200
 8002258:	40020880 	.word	0x40020880

0800225c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	223f      	movs	r2, #63	@ 0x3f
 800226a:	4013      	ands	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002272:	4694      	mov	ip, r2
 8002274:	4463      	add	r3, ip
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	001a      	movs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3b01      	subs	r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	2201      	movs	r2, #1
 800228e:	409a      	lsls	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}
 800229c:	1000823f 	.word	0x1000823f
 80022a0:	40020940 	.word	0x40020940

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e147      	b.n	8002544 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4091      	lsls	r1, r2
 80022be:	000a      	movs	r2, r1
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d100      	bne.n	80022cc <HAL_GPIO_Init+0x28>
 80022ca:	e138      	b.n	800253e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2203      	movs	r2, #3
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x40>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	4013      	ands	r3, r2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	409a      	lsls	r2, r3
 8002306:	0013      	movs	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	43da      	mvns	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	2201      	movs	r2, #1
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	4013      	ands	r3, r2
 800234e:	2b03      	cmp	r3, #3
 8002350:	d017      	beq.n	8002382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	409a      	lsls	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2203      	movs	r2, #3
 8002388:	4013      	ands	r3, r2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d123      	bne.n	80023d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	58d3      	ldr	r3, [r2, r3]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2207      	movs	r2, #7
 80023a0:	4013      	ands	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2107      	movs	r1, #7
 80023ba:	400b      	ands	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	6939      	ldr	r1, [r7, #16]
 80023d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	401a      	ands	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	23c0      	movs	r3, #192	@ 0xc0
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	4013      	ands	r3, r2
 8002414:	d100      	bne.n	8002418 <HAL_GPIO_Init+0x174>
 8002416:	e092      	b.n	800253e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002418:	4a50      	ldr	r2, [pc, #320]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3318      	adds	r3, #24
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	589b      	ldr	r3, [r3, r2]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2203      	movs	r2, #3
 800242a:	4013      	ands	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	220f      	movs	r2, #15
 8002430:	409a      	lsls	r2, r3
 8002432:	0013      	movs	r3, r2
 8002434:	43da      	mvns	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	23a0      	movs	r3, #160	@ 0xa0
 8002440:	05db      	lsls	r3, r3, #23
 8002442:	429a      	cmp	r2, r3
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0x1ca>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a45      	ldr	r2, [pc, #276]	@ (8002560 <HAL_GPIO_Init+0x2bc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00d      	beq.n	800246a <HAL_GPIO_Init+0x1c6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a44      	ldr	r2, [pc, #272]	@ (8002564 <HAL_GPIO_Init+0x2c0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <HAL_GPIO_Init+0x1c2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a43      	ldr	r2, [pc, #268]	@ (8002568 <HAL_GPIO_Init+0x2c4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_GPIO_Init+0x1be>
 800245e:	2303      	movs	r3, #3
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x1cc>
 8002462:	2305      	movs	r3, #5
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x1cc>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x1cc>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x1cc>
 800246e:	2300      	movs	r3, #0
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	2103      	movs	r1, #3
 8002474:	400a      	ands	r2, r1
 8002476:	00d2      	lsls	r2, r2, #3
 8002478:	4093      	lsls	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002480:	4936      	ldr	r1, [pc, #216]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3318      	adds	r3, #24
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248e:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43da      	mvns	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	035b      	lsls	r3, r3, #13
 80024a6:	4013      	ands	r3, r2
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024b8:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	039b      	lsls	r3, r3, #14
 80024d0:	4013      	ands	r3, r2
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024e2:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 80024e4:	2384      	movs	r3, #132	@ 0x84
 80024e6:	58d3      	ldr	r3, [r2, r3]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	4013      	ands	r3, r2
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002508:	4914      	ldr	r1, [pc, #80]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 800250a:	2284      	movs	r2, #132	@ 0x84
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002510:	4a12      	ldr	r2, [pc, #72]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	58d3      	ldr	r3, [r2, r3]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	4013      	ands	r3, r2
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002536:	4909      	ldr	r1, [pc, #36]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002538:	2280      	movs	r2, #128	@ 0x80
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	40da      	lsrs	r2, r3
 800254c:	1e13      	subs	r3, r2, #0
 800254e:	d000      	beq.n	8002552 <HAL_GPIO_Init+0x2ae>
 8002550:	e6b0      	b.n	80022b4 <HAL_GPIO_Init+0x10>
  }
}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b006      	add	sp, #24
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021800 	.word	0x40021800
 8002560:	50000400 	.word	0x50000400
 8002564:	50000800 	.word	0x50000800
 8002568:	50000c00 	.word	0x50000c00

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	0008      	movs	r0, r1
 8002576:	0011      	movs	r1, r2
 8002578:	1cbb      	adds	r3, r7, #2
 800257a:	1c02      	adds	r2, r0, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	1c7b      	adds	r3, r7, #1
 8002580:	1c0a      	adds	r2, r1, #0
 8002582:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002584:	1c7b      	adds	r3, r7, #1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800258c:	1cbb      	adds	r3, r7, #2
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002596:	1cbb      	adds	r3, r7, #2
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	0002      	movs	r2, r0
 80025b0:	1dbb      	adds	r3, r7, #6
 80025b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80025b4:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	1dba      	adds	r2, r7, #6
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	4013      	ands	r3, r2
 80025be:	d008      	beq.n	80025d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80025c0:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025c2:	1dba      	adds	r2, r7, #6
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025c8:	1dbb      	adds	r3, r7, #6
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f815 	bl	80025fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	1dba      	adds	r2, r7, #6
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	4013      	ands	r3, r2
 80025dc:	d008      	beq.n	80025f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025e0:	1dba      	adds	r2, r7, #6
 80025e2:	8812      	ldrh	r2, [r2, #0]
 80025e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 f810 	bl	8002610 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80025f0:	46c0      	nop			@ (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021800 	.word	0x40021800

080025fc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	0002      	movs	r2, r0
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	0002      	movs	r2, r0
 8002618:	1dbb      	adds	r3, r7, #6
 800261a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d11f      	bne.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	0013      	movs	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	189b      	adds	r3, r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4912      	ldr	r1, [pc, #72]	@ (80026a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002656:	0018      	movs	r0, r3
 8002658:	f7fd fd54 	bl	8000104 <__udivsi3>
 800265c:	0003      	movs	r3, r0
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002662:	e008      	b.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b01      	subs	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e001      	b.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e009      	b.n	800268a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	401a      	ands	r2, r3
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	429a      	cmp	r2, r3
 8002686:	d0ed      	beq.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40007000 	.word	0x40007000
 8002698:	fffff9ff 	.word	0xfffff9ff
 800269c:	20000000 	.word	0x20000000
 80026a0:	000f4240 	.word	0x000f4240

080026a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	23e0      	movs	r3, #224	@ 0xe0
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4013      	ands	r3, r2
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e2fe      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	4013      	ands	r3, r2
 80026d6:	d100      	bne.n	80026da <HAL_RCC_OscConfig+0x1e>
 80026d8:	e07c      	b.n	80027d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026da:	4bc3      	ldr	r3, [pc, #780]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2238      	movs	r2, #56	@ 0x38
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e4:	4bc0      	ldr	r3, [pc, #768]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2203      	movs	r2, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0x3e>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d10b      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	4bb9      	ldr	r3, [pc, #740]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	029b      	lsls	r3, r3, #10
 8002708:	4013      	ands	r3, r2
 800270a:	d062      	beq.n	80027d2 <HAL_RCC_OscConfig+0x116>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d15e      	bne.n	80027d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e2d9      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x78>
 8002724:	4bb0      	ldr	r3, [pc, #704]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4baf      	ldr	r3, [pc, #700]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800272a:	2180      	movs	r1, #128	@ 0x80
 800272c:	0249      	lsls	r1, r1, #9
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e020      	b.n	8002776 <HAL_RCC_OscConfig+0xba>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	23a0      	movs	r3, #160	@ 0xa0
 800273a:	02db      	lsls	r3, r3, #11
 800273c:	429a      	cmp	r2, r3
 800273e:	d10e      	bne.n	800275e <HAL_RCC_OscConfig+0xa2>
 8002740:	4ba9      	ldr	r3, [pc, #676]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4ba8      	ldr	r3, [pc, #672]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002746:	2180      	movs	r1, #128	@ 0x80
 8002748:	02c9      	lsls	r1, r1, #11
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	4ba6      	ldr	r3, [pc, #664]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4ba5      	ldr	r3, [pc, #660]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002754:	2180      	movs	r1, #128	@ 0x80
 8002756:	0249      	lsls	r1, r1, #9
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e00b      	b.n	8002776 <HAL_RCC_OscConfig+0xba>
 800275e:	4ba2      	ldr	r3, [pc, #648]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4ba1      	ldr	r3, [pc, #644]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002764:	49a1      	ldr	r1, [pc, #644]	@ (80029ec <HAL_RCC_OscConfig+0x330>)
 8002766:	400a      	ands	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	4b9f      	ldr	r3, [pc, #636]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b9e      	ldr	r3, [pc, #632]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002770:	499f      	ldr	r1, [pc, #636]	@ (80029f0 <HAL_RCC_OscConfig+0x334>)
 8002772:	400a      	ands	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d014      	beq.n	80027a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fe9f 	bl	80014c0 <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fe9a 	bl	80014c0 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	@ 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e298      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	4b93      	ldr	r3, [pc, #588]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	4013      	ands	r3, r2
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xcc>
 80027a6:	e015      	b.n	80027d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fe8a 	bl	80014c0 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b2:	f7fe fe85 	bl	80014c0 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	@ 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e283      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c4:	4b88      	ldr	r3, [pc, #544]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	4013      	ands	r3, r2
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0xf6>
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2202      	movs	r2, #2
 80027da:	4013      	ands	r3, r2
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0x124>
 80027de:	e099      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e0:	4b81      	ldr	r3, [pc, #516]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2238      	movs	r2, #56	@ 0x38
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ea:	4b7f      	ldr	r3, [pc, #508]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2203      	movs	r2, #3
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x144>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d002      	beq.n	8002806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d135      	bne.n	8002872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002806:	4b78      	ldr	r3, [pc, #480]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4013      	ands	r3, r2
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x162>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e256      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a74      	ldr	r2, [pc, #464]	@ (80029f4 <HAL_RCC_OscConfig+0x338>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	021a      	lsls	r2, r3, #8
 800282e:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d112      	bne.n	8002860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800283a:	4b6b      	ldr	r3, [pc, #428]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6e      	ldr	r2, [pc, #440]	@ (80029f8 <HAL_RCC_OscConfig+0x33c>)
 8002840:	4013      	ands	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	4b67      	ldr	r3, [pc, #412]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800284e:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0adb      	lsrs	r3, r3, #11
 8002854:	2207      	movs	r2, #7
 8002856:	4013      	ands	r3, r2
 8002858:	4a68      	ldr	r2, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x340>)
 800285a:	40da      	lsrs	r2, r3
 800285c:	4b68      	ldr	r3, [pc, #416]	@ (8002a00 <HAL_RCC_OscConfig+0x344>)
 800285e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002860:	4b68      	ldr	r3, [pc, #416]	@ (8002a04 <HAL_RCC_OscConfig+0x348>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0018      	movs	r0, r3
 8002866:	f7fe fdcf 	bl	8001408 <HAL_InitTick>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d051      	beq.n	8002912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e22c      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d030      	beq.n	80028dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800287a:	4b5b      	ldr	r3, [pc, #364]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5e      	ldr	r2, [pc, #376]	@ (80029f8 <HAL_RCC_OscConfig+0x33c>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800288e:	4b56      	ldr	r3, [pc, #344]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b55      	ldr	r3, [pc, #340]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002894:	2180      	movs	r1, #128	@ 0x80
 8002896:	0049      	lsls	r1, r1, #1
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fe10 	bl	80014c0 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe fe0b 	bl	80014c0 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e209      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b8:	4b4b      	ldr	r3, [pc, #300]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4013      	ands	r3, r2
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b48      	ldr	r3, [pc, #288]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a4a      	ldr	r2, [pc, #296]	@ (80029f4 <HAL_RCC_OscConfig+0x338>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	021a      	lsls	r2, r3, #8
 80028d4:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	e01b      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028dc:	4b42      	ldr	r3, [pc, #264]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b41      	ldr	r3, [pc, #260]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	4949      	ldr	r1, [pc, #292]	@ (8002a08 <HAL_RCC_OscConfig+0x34c>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fdea 	bl	80014c0 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fde5 	bl	80014c0 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1e3      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002904:	4b38      	ldr	r3, [pc, #224]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4013      	ands	r3, r2
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x236>
 8002910:	e000      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002912:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2208      	movs	r2, #8
 800291a:	4013      	ands	r3, r2
 800291c:	d047      	beq.n	80029ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800291e:	4b32      	ldr	r3, [pc, #200]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2238      	movs	r2, #56	@ 0x38
 8002924:	4013      	ands	r3, r2
 8002926:	2b18      	cmp	r3, #24
 8002928:	d10a      	bne.n	8002940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800292a:	4b2f      	ldr	r3, [pc, #188]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d03c      	beq.n	80029ae <HAL_RCC_OscConfig+0x2f2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d138      	bne.n	80029ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e1c5      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002948:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800294a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800294c:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800294e:	2101      	movs	r1, #1
 8002950:	430a      	orrs	r2, r1
 8002952:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fdb4 	bl	80014c0 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295e:	f7fe fdaf 	bl	80014c0 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1ad      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	2202      	movs	r2, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d0f1      	beq.n	800295e <HAL_RCC_OscConfig+0x2a2>
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800297c:	4b1a      	ldr	r3, [pc, #104]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 800297e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002980:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 8002982:	2101      	movs	r1, #1
 8002984:	438a      	bics	r2, r1
 8002986:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fd9a 	bl	80014c0 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe fd95 	bl	80014c0 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e193      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a4:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a8:	2202      	movs	r2, #2
 80029aa:	4013      	ands	r3, r2
 80029ac:	d1f1      	bne.n	8002992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x2fe>
 80029b8:	e0c6      	b.n	8002b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	231f      	movs	r3, #31
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2238      	movs	r2, #56	@ 0x38
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d11e      	bne.n	8002a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCC_OscConfig+0x32c>)
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	2202      	movs	r2, #2
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x31e>
 80029d8:	e0b6      	b.n	8002b48 <HAL_RCC_OscConfig+0x48c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d000      	beq.n	80029e4 <HAL_RCC_OscConfig+0x328>
 80029e2:	e0b1      	b.n	8002b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e171      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	fffeffff 	.word	0xfffeffff
 80029f0:	fffbffff 	.word	0xfffbffff
 80029f4:	ffff80ff 	.word	0xffff80ff
 80029f8:	ffffc7ff 	.word	0xffffc7ff
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004
 8002a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a0c:	4bb1      	ldr	r3, [pc, #708]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	055b      	lsls	r3, r3, #21
 8002a14:	4013      	ands	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x360>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x362>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d011      	beq.n	8002a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4bac      	ldr	r3, [pc, #688]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a26:	4bab      	ldr	r3, [pc, #684]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002a28:	2180      	movs	r1, #128	@ 0x80
 8002a2a:	0549      	lsls	r1, r1, #21
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a30:	4ba8      	ldr	r3, [pc, #672]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	055b      	lsls	r3, r3, #21
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a3e:	231f      	movs	r3, #31
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a46:	4ba4      	ldr	r3, [pc, #656]	@ (8002cd8 <HAL_RCC_OscConfig+0x61c>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d11a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a52:	4ba1      	ldr	r3, [pc, #644]	@ (8002cd8 <HAL_RCC_OscConfig+0x61c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4ba0      	ldr	r3, [pc, #640]	@ (8002cd8 <HAL_RCC_OscConfig+0x61c>)
 8002a58:	2180      	movs	r1, #128	@ 0x80
 8002a5a:	0049      	lsls	r1, r1, #1
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fd2e 	bl	80014c0 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7fe fd29 	bl	80014c0 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e127      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b96      	ldr	r3, [pc, #600]	@ (8002cd8 <HAL_RCC_OscConfig+0x61c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3e2>
 8002a90:	4b90      	ldr	r3, [pc, #576]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a94:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x404>
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002aac:	2104      	movs	r1, #4
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab2:	4b88      	ldr	r3, [pc, #544]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ab6:	4b87      	ldr	r3, [pc, #540]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	430a      	orrs	r2, r1
 8002abc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
 8002ac0:	4b84      	ldr	r3, [pc, #528]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002ac2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ac4:	4b83      	ldr	r3, [pc, #524]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	438a      	bics	r2, r1
 8002aca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002acc:	4b81      	ldr	r3, [pc, #516]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ad0:	4b80      	ldr	r3, [pc, #512]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d014      	beq.n	8002b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fcee 	bl	80014c0 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae8:	e009      	b.n	8002afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe fce9 	bl	80014c0 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	4a79      	ldr	r2, [pc, #484]	@ (8002cdc <HAL_RCC_OscConfig+0x620>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0e6      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afe:	4b75      	ldr	r3, [pc, #468]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x42e>
 8002b08:	e013      	b.n	8002b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fcd9 	bl	80014c0 <HAL_GetTick>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b12:	e009      	b.n	8002b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fcd4 	bl	80014c0 <HAL_GetTick>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x620>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0d1      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b28:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b65      	ldr	r3, [pc, #404]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b40:	4b64      	ldr	r3, [pc, #400]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b42:	4967      	ldr	r1, [pc, #412]	@ (8002ce0 <HAL_RCC_OscConfig+0x624>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d100      	bne.n	8002b52 <HAL_RCC_OscConfig+0x496>
 8002b50:	e0bb      	b.n	8002cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b52:	4b60      	ldr	r3, [pc, #384]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2238      	movs	r2, #56	@ 0x38
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d100      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4a4>
 8002b5e:	e07b      	b.n	8002c58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d156      	bne.n	8002c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b59      	ldr	r3, [pc, #356]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	495d      	ldr	r1, [pc, #372]	@ (8002ce4 <HAL_RCC_OscConfig+0x628>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fca4 	bl	80014c0 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fc9f 	bl	80014c0 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e09d      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	4b50      	ldr	r3, [pc, #320]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	049b      	lsls	r3, r3, #18
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a51      	ldr	r2, [pc, #324]	@ (8002ce8 <HAL_RCC_OscConfig+0x62c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	4b42      	ldr	r3, [pc, #264]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b40      	ldr	r3, [pc, #256]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	0449      	lsls	r1, r1, #17
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bde:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	0549      	lsls	r1, r1, #21
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fc68 	bl	80014c0 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fc63 	bl	80014c0 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e061      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c08:	4b32      	ldr	r3, [pc, #200]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	049b      	lsls	r3, r3, #18
 8002c10:	4013      	ands	r3, r2
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x53a>
 8002c14:	e059      	b.n	8002cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c1c:	4931      	ldr	r1, [pc, #196]	@ (8002ce4 <HAL_RCC_OscConfig+0x628>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fc4d 	bl	80014c0 <HAL_GetTick>
 8002c26:	0003      	movs	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fc48 	bl	80014c0 <HAL_GetTick>
 8002c30:	0002      	movs	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e046      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	049b      	lsls	r3, r3, #18
 8002c46:	4013      	ands	r3, r2
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c50:	4926      	ldr	r1, [pc, #152]	@ (8002cec <HAL_RCC_OscConfig+0x630>)
 8002c52:	400a      	ands	r2, r1
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	e038      	b.n	8002cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e033      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d126      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2270      	movs	r2, #112	@ 0x70
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d11f      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	23fe      	movs	r3, #254	@ 0xfe
 8002c8a:	01db      	lsls	r3, r3, #7
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d116      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	23f8      	movs	r3, #248	@ 0xf8
 8002c9c:	039b      	lsls	r3, r3, #14
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	23e0      	movs	r3, #224	@ 0xe0
 8002cac:	051b      	lsls	r3, r3, #20
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	0f5b      	lsrs	r3, r3, #29
 8002cbc:	075a      	lsls	r2, r3, #29
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b008      	add	sp, #32
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	00001388 	.word	0x00001388
 8002ce0:	efffffff 	.word	0xefffffff
 8002ce4:	feffffff 	.word	0xfeffffff
 8002ce8:	11c1808c 	.word	0x11c1808c
 8002cec:	eefefffc 	.word	0xeefefffc

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0e9      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b76      	ldr	r3, [pc, #472]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2207      	movs	r2, #7
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d91e      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2207      	movs	r2, #7
 8002d18:	4393      	bics	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	4b70      	ldr	r3, [pc, #448]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fbcc 	bl	80014c0 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d2c:	e009      	b.n	8002d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2e:	f7fe fbc7 	bl	80014c0 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0ca      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d42:	4b67      	ldr	r3, [pc, #412]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2207      	movs	r2, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2202      	movs	r2, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d015      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4013      	ands	r3, r2
 8002d62:	d006      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d64:	4b60      	ldr	r3, [pc, #384]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	21e0      	movs	r1, #224	@ 0xe0
 8002d6c:	01c9      	lsls	r1, r1, #7
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4a5d      	ldr	r2, [pc, #372]	@ (8002eec <HAL_RCC_ClockConfig+0x1fc>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d057      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	4013      	ands	r3, r2
 8002da2:	d12b      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e097      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	049b      	lsls	r3, r3, #18
 8002db8:	4013      	ands	r3, r2
 8002dba:	d11f      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e08b      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d113      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07f      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de0:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de4:	2202      	movs	r2, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e074      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e06d      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2207      	movs	r2, #7
 8002e02:	4393      	bics	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe fb56 	bl	80014c0 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e18:	e009      	b.n	8002e2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1a:	f7fe fb51 	bl	80014c0 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e054      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2238      	movs	r2, #56	@ 0x38
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1ec      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2207      	movs	r2, #7
 8002e46:	4013      	ands	r3, r2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d21e      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2207      	movs	r2, #7
 8002e54:	4393      	bics	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e60:	f7fe fb2e 	bl	80014c0 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fe fb29 	bl	80014c0 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e02c      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2207      	movs	r2, #7
 8002e84:	4013      	ands	r3, r2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2204      	movs	r2, #4
 8002e92:	4013      	ands	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <HAL_RCC_ClockConfig+0x200>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eaa:	f000 f829 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002eae:	0001      	movs	r1, r0
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	401a      	ands	r2, r3
 8002eba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x204>)
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	58d3      	ldr	r3, [r2, r3]
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	000a      	movs	r2, r1
 8002ec6:	40da      	lsrs	r2, r3
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_ClockConfig+0x208>)
 8002eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_ClockConfig+0x20c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fe fa99 	bl	8001408 <HAL_InitTick>
 8002ed6:	0003      	movs	r3, r0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	00001388 	.word	0x00001388
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	fffff0ff 	.word	0xfffff0ff
 8002ef0:	ffff8fff 	.word	0xffff8fff
 8002ef4:	0800549c 	.word	0x0800549c
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2238      	movs	r2, #56	@ 0x38
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d10f      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f10:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0adb      	lsrs	r3, r3, #11
 8002f16:	2207      	movs	r2, #7
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	4835      	ldr	r0, [pc, #212]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f26:	f7fd f8ed 	bl	8000104 <__udivsi3>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e05d      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f30:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2238      	movs	r2, #56	@ 0x38
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f3c:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	e054      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2238      	movs	r2, #56	@ 0x38
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d138      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2203      	movs	r2, #3
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f58:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	2207      	movs	r2, #7
 8002f60:	4013      	ands	r3, r2
 8002f62:	3301      	adds	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d10d      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	4824      	ldr	r0, [pc, #144]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f70:	f7fd f8c8 	bl	8000104 <__udivsi3>
 8002f74:	0003      	movs	r3, r0
 8002f76:	0019      	movs	r1, r3
 8002f78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	227f      	movs	r2, #127	@ 0x7f
 8002f80:	4013      	ands	r3, r2
 8002f82:	434b      	muls	r3, r1
 8002f84:	617b      	str	r3, [r7, #20]
        break;
 8002f86:	e00d      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	481c      	ldr	r0, [pc, #112]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f8c:	f7fd f8ba 	bl	8000104 <__udivsi3>
 8002f90:	0003      	movs	r3, r0
 8002f92:	0019      	movs	r1, r3
 8002f94:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	227f      	movs	r2, #127	@ 0x7f
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	434b      	muls	r3, r1
 8002fa0:	617b      	str	r3, [r7, #20]
        break;
 8002fa2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fa4:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0f5b      	lsrs	r3, r3, #29
 8002faa:	2207      	movs	r2, #7
 8002fac:	4013      	ands	r3, r2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	6978      	ldr	r0, [r7, #20]
 8002fb6:	f7fd f8a5 	bl	8000104 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e015      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2238      	movs	r2, #56	@ 0x38
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d103      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fd4:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2238      	movs	r2, #56	@ 0x38
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b18      	cmp	r3, #24
 8002fde:	d103      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fe0:	23fa      	movs	r3, #250	@ 0xfa
 8002fe2:	01db      	lsls	r3, r3, #7
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e001      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fec:	693b      	ldr	r3, [r7, #16]
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	00f42400 	.word	0x00f42400
 8003000:	007a1200 	.word	0x007a1200

08003004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b02      	ldr	r3, [pc, #8]	@ (8003014 <HAL_RCC_GetHCLKFreq+0x10>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800301c:	f7ff fff2 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003020:	0004      	movs	r4, r0
 8003022:	f7ff fb3f 	bl	80026a4 <LL_RCC_GetAPB1Prescaler>
 8003026:	0003      	movs	r3, r0
 8003028:	0b1a      	lsrs	r2, r3, #12
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	58d3      	ldr	r3, [r2, r3]
 8003030:	221f      	movs	r2, #31
 8003032:	4013      	ands	r3, r2
 8003034:	40dc      	lsrs	r4, r3
 8003036:	0023      	movs	r3, r4
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bdb0      	pop	{r4, r5, r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	080054dc 	.word	0x080054dc

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800304c:	2313      	movs	r3, #19
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003054:	2312      	movs	r3, #18
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	029b      	lsls	r3, r3, #10
 8003064:	4013      	ands	r3, r2
 8003066:	d100      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003068:	e0a3      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2011      	movs	r0, #17
 800306c:	183b      	adds	r3, r7, r0
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4ba5      	ldr	r3, [pc, #660]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	055b      	lsls	r3, r3, #21
 800307a:	4013      	ands	r3, r2
 800307c:	d110      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	4ba2      	ldr	r3, [pc, #648]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003082:	4ba1      	ldr	r3, [pc, #644]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	0549      	lsls	r1, r1, #21
 8003088:	430a      	orrs	r2, r1
 800308a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800308c:	4b9e      	ldr	r3, [pc, #632]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800308e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	055b      	lsls	r3, r3, #21
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309a:	183b      	adds	r3, r7, r0
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a0:	4b9a      	ldr	r3, [pc, #616]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b99      	ldr	r3, [pc, #612]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	0049      	lsls	r1, r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ae:	f7fe fa07 	bl	80014c0 <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b6:	e00b      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe fa02 	bl	80014c0 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d904      	bls.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2313      	movs	r3, #19
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2203      	movs	r2, #3
 80030cc:	701a      	strb	r2, [r3, #0]
        break;
 80030ce:	e005      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d0:	4b8e      	ldr	r3, [pc, #568]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4013      	ands	r3, r2
 80030da:	d0ed      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030dc:	2313      	movs	r3, #19
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d154      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030e6:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030ea:	23c0      	movs	r3, #192	@ 0xc0
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d019      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d014      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003102:	4b81      	ldr	r3, [pc, #516]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	4a82      	ldr	r2, [pc, #520]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003108:	4013      	ands	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800310c:	4b7e      	ldr	r3, [pc, #504]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800310e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003110:	4b7d      	ldr	r3, [pc, #500]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003112:	2180      	movs	r1, #128	@ 0x80
 8003114:	0249      	lsls	r1, r1, #9
 8003116:	430a      	orrs	r2, r1
 8003118:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800311a:	4b7b      	ldr	r3, [pc, #492]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800311c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800311e:	4b7a      	ldr	r3, [pc, #488]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003120:	497c      	ldr	r1, [pc, #496]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003122:	400a      	ands	r2, r1
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003126:	4b78      	ldr	r3, [pc, #480]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	d016      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe f9c4 	bl	80014c0 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e00c      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe f9bf 	bl	80014c0 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	4a73      	ldr	r2, [pc, #460]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d904      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800314e:	2313      	movs	r3, #19
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2203      	movs	r2, #3
 8003154:	701a      	strb	r2, [r3, #0]
            break;
 8003156:	e004      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003158:	4b6b      	ldr	r3, [pc, #428]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	2202      	movs	r2, #2
 800315e:	4013      	ands	r3, r2
 8003160:	d0ed      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003162:	2313      	movs	r3, #19
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316c:	4b66      	ldr	r3, [pc, #408]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	4a67      	ldr	r2, [pc, #412]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003172:	4013      	ands	r3, r2
 8003174:	0019      	movs	r1, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800317a:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800317c:	430a      	orrs	r2, r1
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003180:	e00c      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003182:	2312      	movs	r3, #18
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2213      	movs	r2, #19
 8003188:	18ba      	adds	r2, r7, r2
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e005      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	2312      	movs	r3, #18
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2213      	movs	r2, #19
 8003196:	18ba      	adds	r2, r7, r2
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800319c:	2311      	movs	r3, #17
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b58      	ldr	r3, [pc, #352]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031aa:	4b57      	ldr	r3, [pc, #348]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ac:	495b      	ldr	r1, [pc, #364]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031bc:	4b52      	ldr	r3, [pc, #328]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	2203      	movs	r2, #3
 80031c2:	4393      	bics	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2210      	movs	r2, #16
 80031d6:	4013      	ands	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031da:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	4a50      	ldr	r2, [pc, #320]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4013      	ands	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fe:	4a49      	ldr	r2, [pc, #292]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800320a:	430a      	orrs	r2, r1
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4013      	ands	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800321a:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	4a42      	ldr	r2, [pc, #264]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800322a:	430a      	orrs	r2, r1
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2220      	movs	r2, #32
 8003234:	4013      	ands	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003238:	4b33      	ldr	r3, [pc, #204]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	4a3b      	ldr	r2, [pc, #236]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003248:	430a      	orrs	r2, r1
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	01db      	lsls	r3, r3, #7
 8003254:	4013      	ands	r3, r2
 8003256:	d015      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003258:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	0899      	lsrs	r1, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003266:	430a      	orrs	r2, r1
 8003268:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	429a      	cmp	r2, r3
 8003274:	d106      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800327c:	2180      	movs	r1, #128	@ 0x80
 800327e:	0249      	lsls	r1, r1, #9
 8003280:	430a      	orrs	r2, r1
 8003282:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	039b      	lsls	r3, r3, #14
 800328c:	4013      	ands	r3, r2
 800328e:	d016      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	4a26      	ldr	r2, [pc, #152]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003296:	4013      	ands	r3, r2
 8003298:	0019      	movs	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a0:	430a      	orrs	r2, r1
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	03db      	lsls	r3, r3, #15
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d106      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032b0:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032b6:	2180      	movs	r1, #128	@ 0x80
 80032b8:	0449      	lsls	r1, r1, #17
 80032ba:	430a      	orrs	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	2380      	movs	r3, #128	@ 0x80
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4013      	ands	r3, r2
 80032c8:	d016      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	4a19      	ldr	r2, [pc, #100]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	01db      	lsls	r3, r3, #7
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d106      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032f0:	2180      	movs	r1, #128	@ 0x80
 80032f2:	0249      	lsls	r1, r1, #9
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032f8:	2312      	movs	r3, #18
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
 8003310:	fffffcff 	.word	0xfffffcff
 8003314:	fffeffff 	.word	0xfffeffff
 8003318:	00001388 	.word	0x00001388
 800331c:	efffffff 	.word	0xefffffff
 8003320:	fffff3ff 	.word	0xfffff3ff
 8003324:	fff3ffff 	.word	0xfff3ffff
 8003328:	ffcfffff 	.word	0xffcfffff
 800332c:	ffffcfff 	.word	0xffffcfff
 8003330:	ffbfffff 	.word	0xffbfffff
 8003334:	ffff3fff 	.word	0xffff3fff

08003338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e04a      	b.n	80033e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223d      	movs	r2, #61	@ 0x3d
 800334e:	5c9b      	ldrb	r3, [r3, r2]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223c      	movs	r2, #60	@ 0x3c
 800335a:	2100      	movs	r1, #0
 800335c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f7fd fe03 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	223d      	movs	r2, #61	@ 0x3d
 800336a:	2102      	movs	r1, #2
 800336c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	0019      	movs	r1, r3
 8003378:	0010      	movs	r0, r2
 800337a:	f000 fd5f 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2248      	movs	r2, #72	@ 0x48
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	223e      	movs	r2, #62	@ 0x3e
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223f      	movs	r2, #63	@ 0x3f
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2241      	movs	r2, #65	@ 0x41
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2242      	movs	r2, #66	@ 0x42
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2243      	movs	r2, #67	@ 0x43
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2244      	movs	r2, #68	@ 0x44
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2245      	movs	r2, #69	@ 0x45
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2246      	movs	r2, #70	@ 0x46
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2247      	movs	r2, #71	@ 0x47
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	223d      	movs	r2, #61	@ 0x3d
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e04a      	b.n	8003490 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223d      	movs	r2, #61	@ 0x3d
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	223c      	movs	r2, #60	@ 0x3c
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f841 	bl	8003498 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223d      	movs	r2, #61	@ 0x3d
 800341a:	2102      	movs	r1, #2
 800341c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	0019      	movs	r1, r3
 8003428:	0010      	movs	r0, r2
 800342a:	f000 fd07 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2248      	movs	r2, #72	@ 0x48
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223e      	movs	r2, #62	@ 0x3e
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	223f      	movs	r2, #63	@ 0x3f
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2240      	movs	r2, #64	@ 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2241      	movs	r2, #65	@ 0x41
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2242      	movs	r2, #66	@ 0x42
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2243      	movs	r2, #67	@ 0x43
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2244      	movs	r2, #68	@ 0x44
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2245      	movs	r2, #69	@ 0x45
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2246      	movs	r2, #70	@ 0x46
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2247      	movs	r2, #71	@ 0x47
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223d      	movs	r2, #61	@ 0x3d
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e04a      	b.n	8003550 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	223d      	movs	r2, #61	@ 0x3d
 80034be:	5c9b      	ldrb	r3, [r3, r2]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223c      	movs	r2, #60	@ 0x3c
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f841 	bl	8003558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223d      	movs	r2, #61	@ 0x3d
 80034da:	2102      	movs	r1, #2
 80034dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	0019      	movs	r1, r3
 80034e8:	0010      	movs	r0, r2
 80034ea:	f000 fca7 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2248      	movs	r2, #72	@ 0x48
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	223e      	movs	r2, #62	@ 0x3e
 80034fa:	2101      	movs	r1, #1
 80034fc:	5499      	strb	r1, [r3, r2]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223f      	movs	r2, #63	@ 0x3f
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2240      	movs	r2, #64	@ 0x40
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2241      	movs	r2, #65	@ 0x41
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2242      	movs	r2, #66	@ 0x42
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2243      	movs	r2, #67	@ 0x43
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2244      	movs	r2, #68	@ 0x44
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2245      	movs	r2, #69	@ 0x45
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2246      	movs	r2, #70	@ 0x46
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2247      	movs	r2, #71	@ 0x47
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	223d      	movs	r2, #61	@ 0x3d
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e04a      	b.n	8003610 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223d      	movs	r2, #61	@ 0x3d
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223c      	movs	r2, #60	@ 0x3c
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 f841 	bl	8003618 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	223d      	movs	r2, #61	@ 0x3d
 800359a:	2102      	movs	r1, #2
 800359c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	0019      	movs	r1, r3
 80035a8:	0010      	movs	r0, r2
 80035aa:	f000 fc47 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2248      	movs	r2, #72	@ 0x48
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	223e      	movs	r2, #62	@ 0x3e
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223f      	movs	r2, #63	@ 0x3f
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2240      	movs	r2, #64	@ 0x40
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	@ 0x41
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2242      	movs	r2, #66	@ 0x42
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2243      	movs	r2, #67	@ 0x43
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2244      	movs	r2, #68	@ 0x44
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2245      	movs	r2, #69	@ 0x45
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2246      	movs	r2, #70	@ 0x46
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2247      	movs	r2, #71	@ 0x47
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	223d      	movs	r2, #61	@ 0x3d
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	d021      	beq.n	800368c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2203      	movs	r2, #3
 8003656:	4252      	negs	r2, r2
 8003658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2203      	movs	r2, #3
 8003668:	4013      	ands	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 fbcc 	bl	8003e0c <HAL_TIM_IC_CaptureCallback>
 8003674:	e007      	b.n	8003686 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 fbbf 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fbcb 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2204      	movs	r2, #4
 8003698:	4013      	ands	r3, r2
 800369a:	d01e      	beq.n	80036da <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2205      	movs	r2, #5
 80036a2:	4252      	negs	r2, r2
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	23c0      	movs	r3, #192	@ 0xc0
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 fba5 	bl	8003e0c <HAL_TIM_IC_CaptureCallback>
 80036c2:	e007      	b.n	80036d4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 fb98 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 fba4 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2208      	movs	r2, #8
 80036de:	4013      	ands	r3, r2
 80036e0:	d021      	beq.n	8003726 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2208      	movs	r2, #8
 80036e6:	4013      	ands	r3, r2
 80036e8:	d01d      	beq.n	8003726 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2209      	movs	r2, #9
 80036f0:	4252      	negs	r2, r2
 80036f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2204      	movs	r2, #4
 80036f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2203      	movs	r2, #3
 8003702:	4013      	ands	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	f000 fb7f 	bl	8003e0c <HAL_TIM_IC_CaptureCallback>
 800370e:	e007      	b.n	8003720 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 fb72 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fb7e 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2210      	movs	r2, #16
 800372a:	4013      	ands	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2210      	movs	r2, #16
 8003732:	4013      	ands	r3, r2
 8003734:	d01e      	beq.n	8003774 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2211      	movs	r2, #17
 800373c:	4252      	negs	r2, r2
 800373e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2208      	movs	r2, #8
 8003744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	23c0      	movs	r3, #192	@ 0xc0
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4013      	ands	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f000 fb58 	bl	8003e0c <HAL_TIM_IC_CaptureCallback>
 800375c:	e007      	b.n	800376e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 fb4b 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fb57 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	d00c      	beq.n	8003796 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	4013      	ands	r3, r2
 8003782:	d008      	beq.n	8003796 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	4252      	negs	r2, r2
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 fb2b 	bl	8003dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2280      	movs	r2, #128	@ 0x80
 800379a:	4013      	ands	r3, r2
 800379c:	d104      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	019b      	lsls	r3, r3, #6
 80037a4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037a6:	d00b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2280      	movs	r2, #128	@ 0x80
 80037ac:	4013      	ands	r3, r2
 80037ae:	d007      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <HAL_TIM_IRQHandler+0x208>)
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f001 f924 	bl	8004a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	2380      	movs	r3, #128	@ 0x80
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	4013      	ands	r3, r2
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <HAL_TIM_IRQHandler+0x20c>)
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f001 f91b 	bl	8004a18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2240      	movs	r2, #64	@ 0x40
 80037e6:	4013      	ands	r3, r2
 80037e8:	d00c      	beq.n	8003804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2240      	movs	r2, #64	@ 0x40
 80037ee:	4013      	ands	r3, r2
 80037f0:	d008      	beq.n	8003804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2241      	movs	r2, #65	@ 0x41
 80037f8:	4252      	negs	r2, r2
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 fb14 	bl	8003e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2220      	movs	r2, #32
 8003808:	4013      	ands	r3, r2
 800380a:	d00c      	beq.n	8003826 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	4013      	ands	r3, r2
 8003812:	d008      	beq.n	8003826 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2221      	movs	r2, #33	@ 0x21
 800381a:	4252      	negs	r2, r2
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	0018      	movs	r0, r3
 8003822:	f001 f8e9 	bl	80049f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	ffffdf7f 	.word	0xffffdf7f
 8003834:	fffffeff 	.word	0xfffffeff

08003838 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2317      	movs	r3, #23
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	223c      	movs	r2, #60	@ 0x3c
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_TIM_OC_ConfigChannel+0x22>
 8003856:	2302      	movs	r3, #2
 8003858:	e048      	b.n	80038ec <HAL_TIM_OC_ConfigChannel+0xb4>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	223c      	movs	r2, #60	@ 0x3c
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b14      	cmp	r3, #20
 8003866:	d835      	bhi.n	80038d4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	009a      	lsls	r2, r3, #2
 800386c:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800386e:	18d3      	adds	r3, r2, r3
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f000 fb61 	bl	8003f44 <TIM_OC1_SetConfig>
      break;
 8003882:	e02c      	b.n	80038de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	0011      	movs	r1, r2
 800388c:	0018      	movs	r0, r3
 800388e:	f000 fbd9 	bl	8004044 <TIM_OC2_SetConfig>
      break;
 8003892:	e024      	b.n	80038de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	0011      	movs	r1, r2
 800389c:	0018      	movs	r0, r3
 800389e:	f000 fc4f 	bl	8004140 <TIM_OC3_SetConfig>
      break;
 80038a2:	e01c      	b.n	80038de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fcc9 	bl	8004244 <TIM_OC4_SetConfig>
      break;
 80038b2:	e014      	b.n	80038de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	0011      	movs	r1, r2
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 fd25 	bl	800430c <TIM_OC5_SetConfig>
      break;
 80038c2:	e00c      	b.n	80038de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 fd77 	bl	80043c0 <TIM_OC6_SetConfig>
      break;
 80038d2:	e004      	b.n	80038de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80038d4:	2317      	movs	r3, #23
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
      break;
 80038dc:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	223c      	movs	r2, #60	@ 0x3c
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]

  return status;
 80038e6:	2317      	movs	r3, #23
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	781b      	ldrb	r3, [r3, #0]
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b006      	add	sp, #24
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	080054fc 	.word	0x080054fc

080038f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2317      	movs	r3, #23
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	223c      	movs	r2, #60	@ 0x3c
 8003910:	5c9b      	ldrb	r3, [r3, r2]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_TIM_IC_ConfigChannel+0x22>
 8003916:	2302      	movs	r3, #2
 8003918:	e08c      	b.n	8003a34 <HAL_TIM_IC_ConfigChannel+0x13c>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	223c      	movs	r2, #60	@ 0x3c
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003938:	f000 fda0 	bl	800447c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	210c      	movs	r1, #12
 8003948:	438a      	bics	r2, r1
 800394a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6999      	ldr	r1, [r3, #24]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	619a      	str	r2, [r3, #24]
 800395e:	e062      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d11c      	bne.n	80039a0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003976:	f000 fe05 	bl	8004584 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	492d      	ldr	r1, [pc, #180]	@ (8003a3c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003986:	400a      	ands	r2, r1
 8003988:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6999      	ldr	r1, [r3, #24]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	021a      	lsls	r2, r3, #8
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	619a      	str	r2, [r3, #24]
 800399e:	e042      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11b      	bne.n	80039de <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039b6:	f000 fe59 	bl	800466c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	210c      	movs	r1, #12
 80039c6:	438a      	bics	r2, r1
 80039c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	61da      	str	r2, [r3, #28]
 80039dc:	e023      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d11c      	bne.n	8003a1e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039f4:	f000 fe7a 	bl	80046ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	490e      	ldr	r1, [pc, #56]	@ (8003a3c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69d9      	ldr	r1, [r3, #28]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	021a      	lsls	r2, r3, #8
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	61da      	str	r2, [r3, #28]
 8003a1c:	e003      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003a1e:	2317      	movs	r3, #23
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	223c      	movs	r2, #60	@ 0x3c
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]

  return status;
 8003a2e:	2317      	movs	r3, #23
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	781b      	ldrb	r3, [r3, #0]
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b006      	add	sp, #24
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	fffff3ff 	.word	0xfffff3ff

08003a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2317      	movs	r3, #23
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	223c      	movs	r2, #60	@ 0x3c
 8003a58:	5c9b      	ldrb	r3, [r3, r2]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0e5      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	223c      	movs	r2, #60	@ 0x3c
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b14      	cmp	r3, #20
 8003a6e:	d900      	bls.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a70:	e0d1      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	009a      	lsls	r2, r3, #2
 8003a76:	4b70      	ldr	r3, [pc, #448]	@ (8003c38 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 fa5c 	bl	8003f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2108      	movs	r1, #8
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2104      	movs	r1, #4
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6999      	ldr	r1, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	619a      	str	r2, [r3, #24]
      break;
 8003abe:	e0af      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fabb 	bl	8004044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2180      	movs	r1, #128	@ 0x80
 8003ada:	0109      	lsls	r1, r1, #4
 8003adc:	430a      	orrs	r2, r1
 8003ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4954      	ldr	r1, [pc, #336]	@ (8003c3c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6999      	ldr	r1, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]
      break;
 8003b04:	e08c      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	0011      	movs	r1, r2
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 fb16 	bl	8004140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2108      	movs	r1, #8
 8003b20:	430a      	orrs	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2104      	movs	r1, #4
 8003b30:	438a      	bics	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69d9      	ldr	r1, [r3, #28]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e06b      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	0011      	movs	r1, r2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 fb77 	bl	8004244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2180      	movs	r1, #128	@ 0x80
 8003b62:	0109      	lsls	r1, r1, #4
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4932      	ldr	r1, [pc, #200]	@ (8003c3c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69d9      	ldr	r1, [r3, #28]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	61da      	str	r2, [r3, #28]
      break;
 8003b8c:	e048      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	0011      	movs	r1, r2
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 fbb8 	bl	800430c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2108      	movs	r1, #8
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2104      	movs	r1, #4
 8003bb8:	438a      	bics	r2, r1
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bce:	e027      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fbf1 	bl	80043c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2180      	movs	r1, #128	@ 0x80
 8003bea:	0109      	lsls	r1, r1, #4
 8003bec:	430a      	orrs	r2, r1
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4910      	ldr	r1, [pc, #64]	@ (8003c3c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	021a      	lsls	r2, r3, #8
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c14:	e004      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003c16:	2317      	movs	r3, #23
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
      break;
 8003c1e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	223c      	movs	r2, #60	@ 0x3c
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

  return status;
 8003c28:	2317      	movs	r3, #23
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b006      	add	sp, #24
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	08005550 	.word	0x08005550
 8003c3c:	fffffbff 	.word	0xfffffbff

08003c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	230f      	movs	r3, #15
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	223c      	movs	r2, #60	@ 0x3c
 8003c56:	5c9b      	ldrb	r3, [r3, r2]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_ConfigClockSource+0x20>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0bc      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x19a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	223c      	movs	r2, #60	@ 0x3c
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	223d      	movs	r2, #61	@ 0x3d
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003de4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4a59      	ldr	r2, [pc, #356]	@ (8003de8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2280      	movs	r2, #128	@ 0x80
 8003c96:	0192      	lsls	r2, r2, #6
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xde>
 8003c9c:	2280      	movs	r2, #128	@ 0x80
 8003c9e:	0192      	lsls	r2, r2, #6
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d900      	bls.n	8003ca6 <HAL_TIM_ConfigClockSource+0x66>
 8003ca4:	e088      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	0152      	lsls	r2, r2, #5
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d100      	bne.n	8003cb0 <HAL_TIM_ConfigClockSource+0x70>
 8003cae:	e088      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x182>
 8003cb0:	2280      	movs	r2, #128	@ 0x80
 8003cb2:	0152      	lsls	r2, r2, #5
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d900      	bls.n	8003cba <HAL_TIM_ConfigClockSource+0x7a>
 8003cb8:	e07e      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003cba:	2b70      	cmp	r3, #112	@ 0x70
 8003cbc:	d018      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xb0>
 8003cbe:	d900      	bls.n	8003cc2 <HAL_TIM_ConfigClockSource+0x82>
 8003cc0:	e07a      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003cc2:	2b60      	cmp	r3, #96	@ 0x60
 8003cc4:	d04f      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x126>
 8003cc6:	d900      	bls.n	8003cca <HAL_TIM_ConfigClockSource+0x8a>
 8003cc8:	e076      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003cca:	2b50      	cmp	r3, #80	@ 0x50
 8003ccc:	d03b      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x106>
 8003cce:	d900      	bls.n	8003cd2 <HAL_TIM_ConfigClockSource+0x92>
 8003cd0:	e072      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d057      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x146>
 8003cd6:	d900      	bls.n	8003cda <HAL_TIM_ConfigClockSource+0x9a>
 8003cd8:	e06e      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003cda:	2b30      	cmp	r3, #48	@ 0x30
 8003cdc:	d063      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x166>
 8003cde:	d86b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d060      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x166>
 8003ce4:	d868      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d05d      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x166>
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d05b      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x166>
 8003cee:	e063      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d00:	f000 fd56 	bl	80047b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2277      	movs	r2, #119	@ 0x77
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
      break;
 8003d1c:	e052      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	f000 fd3f 	bl	80047b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2180      	movs	r1, #128	@ 0x80
 8003d3e:	01c9      	lsls	r1, r1, #7
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
      break;
 8003d44:	e03e      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	001a      	movs	r2, r3
 8003d54:	f000 fbe8 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2150      	movs	r1, #80	@ 0x50
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 fd0a 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 8003d64:	e02e      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d72:	001a      	movs	r2, r3
 8003d74:	f000 fc48 	bl	8004608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2160      	movs	r1, #96	@ 0x60
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 fcfa 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 8003d84:	e01e      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	001a      	movs	r2, r3
 8003d94:	f000 fbc8 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2140      	movs	r1, #64	@ 0x40
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 fcea 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 8003da4:	e00e      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0019      	movs	r1, r3
 8003db0:	0010      	movs	r0, r2
 8003db2:	f000 fce1 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 8003db6:	e005      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003db8:	230f      	movs	r3, #15
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003dc2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	223d      	movs	r2, #61	@ 0x3d
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	223c      	movs	r2, #60	@ 0x3c
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]

  return status;
 8003dd4:	230f      	movs	r3, #15
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	781b      	ldrb	r3, [r3, #0]
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	ffceff88 	.word	0xffceff88
 8003de8:	ffff00ff 	.word	0xffff00ff

08003dec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e14:	46c0      	nop			@ (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a37      	ldr	r2, [pc, #220]	@ (8003f2c <TIM_Base_SetConfig+0xf0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d008      	beq.n	8003e66 <TIM_Base_SetConfig+0x2a>
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d003      	beq.n	8003e66 <TIM_Base_SetConfig+0x2a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a33      	ldr	r2, [pc, #204]	@ (8003f30 <TIM_Base_SetConfig+0xf4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2270      	movs	r2, #112	@ 0x70
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <TIM_Base_SetConfig+0xf0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d014      	beq.n	8003eaa <TIM_Base_SetConfig+0x6e>
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	05db      	lsls	r3, r3, #23
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d00f      	beq.n	8003eaa <TIM_Base_SetConfig+0x6e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <TIM_Base_SetConfig+0xf4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_Base_SetConfig+0x6e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a27      	ldr	r2, [pc, #156]	@ (8003f34 <TIM_Base_SetConfig+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_Base_SetConfig+0x6e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	@ (8003f38 <TIM_Base_SetConfig+0xfc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_Base_SetConfig+0x6e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <TIM_Base_SetConfig+0x100>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d108      	bne.n	8003ebc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <TIM_Base_SetConfig+0x104>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2280      	movs	r2, #128	@ 0x80
 8003ec0:	4393      	bics	r3, r2
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <TIM_Base_SetConfig+0xf0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0xbe>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <TIM_Base_SetConfig+0xfc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0xbe>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a11      	ldr	r2, [pc, #68]	@ (8003f3c <TIM_Base_SetConfig+0x100>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d103      	bne.n	8003f02 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d106      	bne.n	8003f22 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4393      	bics	r3, r2
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	611a      	str	r2, [r3, #16]
  }
}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40002000 	.word	0x40002000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	fffffcff 	.word	0xfffffcff

08003f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a2e      	ldr	r2, [pc, #184]	@ (800402c <TIM_OC1_SetConfig+0xe8>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a24      	ldr	r2, [pc, #144]	@ (8004030 <TIM_OC1_SetConfig+0xec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_OC1_SetConfig+0x6e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	@ (8004034 <TIM_OC1_SetConfig+0xf0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_OC1_SetConfig+0x6e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a22      	ldr	r2, [pc, #136]	@ (8004038 <TIM_OC1_SetConfig+0xf4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10c      	bne.n	8003fcc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4393      	bics	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	4393      	bics	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <TIM_OC1_SetConfig+0xec>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_OC1_SetConfig+0xa0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <TIM_OC1_SetConfig+0xf0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_OC1_SetConfig+0xa0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <TIM_OC1_SetConfig+0xf4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d111      	bne.n	8004008 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4a15      	ldr	r2, [pc, #84]	@ (800403c <TIM_OC1_SetConfig+0xf8>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <TIM_OC1_SetConfig+0xfc>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b006      	add	sp, #24
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	fffeff8f 	.word	0xfffeff8f
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	fffffeff 	.word	0xfffffeff
 8004040:	fffffdff 	.word	0xfffffdff

08004044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	2210      	movs	r2, #16
 800405a:	4393      	bics	r3, r2
 800405c:	001a      	movs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <TIM_OC2_SetConfig+0xe0>)
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a2b      	ldr	r2, [pc, #172]	@ (8004128 <TIM_OC2_SetConfig+0xe4>)
 800407a:	4013      	ands	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2220      	movs	r2, #32
 800408e:	4393      	bics	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a22      	ldr	r2, [pc, #136]	@ (800412c <TIM_OC2_SetConfig+0xe8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10d      	bne.n	80040c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2280      	movs	r2, #128	@ 0x80
 80040aa:	4393      	bics	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2240      	movs	r2, #64	@ 0x40
 80040be:	4393      	bics	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <TIM_OC2_SetConfig+0xe8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <TIM_OC2_SetConfig+0x96>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a18      	ldr	r2, [pc, #96]	@ (8004130 <TIM_OC2_SetConfig+0xec>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_OC2_SetConfig+0x96>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <TIM_OC2_SetConfig+0xf0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d113      	bne.n	8004102 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4a16      	ldr	r2, [pc, #88]	@ (8004138 <TIM_OC2_SetConfig+0xf4>)
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4a15      	ldr	r2, [pc, #84]	@ (800413c <TIM_OC2_SetConfig+0xf8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b006      	add	sp, #24
 8004122:	bd80      	pop	{r7, pc}
 8004124:	feff8fff 	.word	0xfeff8fff
 8004128:	fffffcff 	.word	0xfffffcff
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40014400 	.word	0x40014400
 8004134:	40014800 	.word	0x40014800
 8004138:	fffffbff 	.word	0xfffffbff
 800413c:	fffff7ff 	.word	0xfffff7ff

08004140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4a31      	ldr	r2, [pc, #196]	@ (800421c <TIM_OC3_SetConfig+0xdc>)
 8004156:	401a      	ands	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a2d      	ldr	r2, [pc, #180]	@ (8004220 <TIM_OC3_SetConfig+0xe0>)
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2203      	movs	r2, #3
 8004174:	4393      	bics	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4a27      	ldr	r2, [pc, #156]	@ (8004224 <TIM_OC3_SetConfig+0xe4>)
 8004186:	4013      	ands	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a23      	ldr	r2, [pc, #140]	@ (8004228 <TIM_OC3_SetConfig+0xe8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10d      	bne.n	80041ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <TIM_OC3_SetConfig+0xec>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <TIM_OC3_SetConfig+0xf0>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004228 <TIM_OC3_SetConfig+0xe8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_OC3_SetConfig+0x92>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <TIM_OC3_SetConfig+0xf4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x92>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <TIM_OC3_SetConfig+0xf8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d113      	bne.n	80041fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4a19      	ldr	r2, [pc, #100]	@ (800423c <TIM_OC3_SetConfig+0xfc>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4a18      	ldr	r2, [pc, #96]	@ (8004240 <TIM_OC3_SetConfig+0x100>)
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b006      	add	sp, #24
 800421a:	bd80      	pop	{r7, pc}
 800421c:	fffffeff 	.word	0xfffffeff
 8004220:	fffeff8f 	.word	0xfffeff8f
 8004224:	fffffdff 	.word	0xfffffdff
 8004228:	40012c00 	.word	0x40012c00
 800422c:	fffff7ff 	.word	0xfffff7ff
 8004230:	fffffbff 	.word	0xfffffbff
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	ffffefff 	.word	0xffffefff
 8004240:	ffffdfff 	.word	0xffffdfff

08004244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4a24      	ldr	r2, [pc, #144]	@ (80042ec <TIM_OC4_SetConfig+0xa8>)
 800425a:	401a      	ands	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a20      	ldr	r2, [pc, #128]	@ (80042f0 <TIM_OC4_SetConfig+0xac>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <TIM_OC4_SetConfig+0xb0>)
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <TIM_OC4_SetConfig+0xb4>)
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	031b      	lsls	r3, r3, #12
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <TIM_OC4_SetConfig+0xb8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_OC4_SetConfig+0x70>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a16      	ldr	r2, [pc, #88]	@ (8004300 <TIM_OC4_SetConfig+0xbc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC4_SetConfig+0x70>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <TIM_OC4_SetConfig+0xc0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d109      	bne.n	80042c8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <TIM_OC4_SetConfig+0xc4>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	019b      	lsls	r3, r3, #6
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b006      	add	sp, #24
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	ffffefff 	.word	0xffffefff
 80042f0:	feff8fff 	.word	0xfeff8fff
 80042f4:	fffffcff 	.word	0xfffffcff
 80042f8:	ffffdfff 	.word	0xffffdfff
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40014400 	.word	0x40014400
 8004304:	40014800 	.word	0x40014800
 8004308:	ffffbfff 	.word	0xffffbfff

0800430c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4a21      	ldr	r2, [pc, #132]	@ (80043a8 <TIM_OC5_SetConfig+0x9c>)
 8004322:	401a      	ands	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <TIM_OC5_SetConfig+0xa0>)
 8004338:	4013      	ands	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4a19      	ldr	r2, [pc, #100]	@ (80043b0 <TIM_OC5_SetConfig+0xa4>)
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <TIM_OC5_SetConfig+0xa8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_OC5_SetConfig+0x66>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <TIM_OC5_SetConfig+0xac>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC5_SetConfig+0x66>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <TIM_OC5_SetConfig+0xb0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d109      	bne.n	8004386 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4a0c      	ldr	r2, [pc, #48]	@ (80043a8 <TIM_OC5_SetConfig+0x9c>)
 8004376:	4013      	ands	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	46c0      	nop			@ (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b006      	add	sp, #24
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	fffeffff 	.word	0xfffeffff
 80043ac:	fffeff8f 	.word	0xfffeff8f
 80043b0:	fffdffff 	.word	0xfffdffff
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800

080043c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4a22      	ldr	r2, [pc, #136]	@ (8004460 <TIM_OC6_SetConfig+0xa0>)
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <TIM_OC6_SetConfig+0xa4>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <TIM_OC6_SetConfig+0xa8>)
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	051b      	lsls	r3, r3, #20
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <TIM_OC6_SetConfig+0xac>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC6_SetConfig+0x68>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <TIM_OC6_SetConfig+0xb0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC6_SetConfig+0x68>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a14      	ldr	r2, [pc, #80]	@ (8004474 <TIM_OC6_SetConfig+0xb4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4a13      	ldr	r2, [pc, #76]	@ (8004478 <TIM_OC6_SetConfig+0xb8>)
 800442c:	4013      	ands	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	029b      	lsls	r3, r3, #10
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b006      	add	sp, #24
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	ffefffff 	.word	0xffefffff
 8004464:	feff8fff 	.word	0xfeff8fff
 8004468:	ffdfffff 	.word	0xffdfffff
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800
 8004478:	fffbffff 	.word	0xfffbffff

0800447c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	2201      	movs	r2, #1
 8004496:	4393      	bics	r3, r2
 8004498:	001a      	movs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004520 <TIM_TI1_SetConfig+0xa4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d008      	beq.n	80044be <TIM_TI1_SetConfig+0x42>
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	2380      	movs	r3, #128	@ 0x80
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d003      	beq.n	80044be <TIM_TI1_SetConfig+0x42>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <TIM_TI1_SetConfig+0xa8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <TIM_TI1_SetConfig+0x46>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <TIM_TI1_SetConfig+0x48>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2203      	movs	r2, #3
 80044cc:	4393      	bics	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e003      	b.n	80044e2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2201      	movs	r2, #1
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	22f0      	movs	r2, #240	@ 0xf0
 80044e6:	4393      	bics	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	22ff      	movs	r2, #255	@ 0xff
 80044f0:	4013      	ands	r3, r2
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	220a      	movs	r2, #10
 80044fc:	4393      	bics	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	220a      	movs	r2, #10
 8004504:	4013      	ands	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	46c0      	nop			@ (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b006      	add	sp, #24
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400

08004528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	2201      	movs	r2, #1
 8004540:	4393      	bics	r3, r2
 8004542:	001a      	movs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	22f0      	movs	r2, #240	@ 0xf0
 8004552:	4393      	bics	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	220a      	movs	r2, #10
 8004564:	4393      	bics	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b006      	add	sp, #24
 8004582:	bd80      	pop	{r7, pc}

08004584 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	2210      	movs	r2, #16
 800459e:	4393      	bics	r3, r2
 80045a0:	001a      	movs	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <TIM_TI2_SetConfig+0x7c>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4a10      	ldr	r2, [pc, #64]	@ (8004604 <TIM_TI2_SetConfig+0x80>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	031b      	lsls	r3, r3, #12
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	22a0      	movs	r2, #160	@ 0xa0
 80045d8:	4393      	bics	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	22a0      	movs	r2, #160	@ 0xa0
 80045e2:	4013      	ands	r3, r2
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b006      	add	sp, #24
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	fffffcff 	.word	0xfffffcff
 8004604:	ffff0fff 	.word	0xffff0fff

08004608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	2210      	movs	r2, #16
 8004620:	4393      	bics	r3, r2
 8004622:	001a      	movs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4a0d      	ldr	r2, [pc, #52]	@ (8004668 <TIM_TI2_ConfigInputStage+0x60>)
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	22a0      	movs	r2, #160	@ 0xa0
 8004644:	4393      	bics	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b006      	add	sp, #24
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	ffff0fff 	.word	0xffff0fff

0800466c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4a17      	ldr	r2, [pc, #92]	@ (80046e4 <TIM_TI3_SetConfig+0x78>)
 8004686:	401a      	ands	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2203      	movs	r2, #3
 8004696:	4393      	bics	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	22f0      	movs	r2, #240	@ 0xf0
 80046a6:	4393      	bics	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	22ff      	movs	r2, #255	@ 0xff
 80046b0:	4013      	ands	r3, r2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4a0b      	ldr	r2, [pc, #44]	@ (80046e8 <TIM_TI3_SetConfig+0x7c>)
 80046bc:	4013      	ands	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	23a0      	movs	r3, #160	@ 0xa0
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	4013      	ands	r3, r2
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b006      	add	sp, #24
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	fffffeff 	.word	0xfffffeff
 80046e8:	fffff5ff 	.word	0xfffff5ff

080046ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <TIM_TI4_SetConfig+0x7c>)
 8004706:	401a      	ands	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4a15      	ldr	r2, [pc, #84]	@ (800476c <TIM_TI4_SetConfig+0x80>)
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4a12      	ldr	r2, [pc, #72]	@ (8004770 <TIM_TI4_SetConfig+0x84>)
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	031b      	lsls	r3, r3, #12
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	0c1b      	lsrs	r3, r3, #16
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	4a0d      	ldr	r2, [pc, #52]	@ (8004774 <TIM_TI4_SetConfig+0x88>)
 800473e:	4013      	ands	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	031a      	lsls	r2, r3, #12
 8004746:	23a0      	movs	r3, #160	@ 0xa0
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	4013      	ands	r3, r2
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b006      	add	sp, #24
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	ffffefff 	.word	0xffffefff
 800476c:	fffffcff 	.word	0xfffffcff
 8004770:	ffff0fff 	.word	0xffff0fff
 8004774:	ffff5fff 	.word	0xffff5fff

08004778 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a08      	ldr	r2, [pc, #32]	@ (80047ac <TIM_ITRx_SetConfig+0x34>)
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	2207      	movs	r2, #7
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b004      	add	sp, #16
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	ffcfff8f 	.word	0xffcfff8f

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	4a09      	ldr	r2, [pc, #36]	@ (80047ec <TIM_ETR_SetConfig+0x3c>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	46c0      	nop			@ (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b006      	add	sp, #24
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	ffff00ff 	.word	0xffff00ff

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	223c      	movs	r2, #60	@ 0x3c
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e050      	b.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	223c      	movs	r2, #60	@ 0x3c
 800480c:	2101      	movs	r1, #1
 800480e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	223d      	movs	r2, #61	@ 0x3d
 8004814:	2102      	movs	r1, #2
 8004816:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a21      	ldr	r2, [pc, #132]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004836:	4013      	ands	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2270      	movs	r2, #112	@ 0x70
 8004848:	4393      	bics	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00a      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	05db      	lsls	r3, r3, #23
 8004870:	429a      	cmp	r2, r3
 8004872:	d004      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a10      	ldr	r2, [pc, #64]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10c      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2280      	movs	r2, #128	@ 0x80
 8004882:	4393      	bics	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	223d      	movs	r2, #61	@ 0x3d
 800489c:	2101      	movs	r1, #1
 800489e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	223c      	movs	r2, #60	@ 0x3c
 80048a4:	2100      	movs	r1, #0
 80048a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b004      	add	sp, #16
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	ff0fffff 	.word	0xff0fffff
 80048bc:	40000400 	.word	0x40000400

080048c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	223c      	movs	r2, #60	@ 0x3c
 80048d2:	5c9b      	ldrb	r3, [r3, r2]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e06f      	b.n	80049bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	223c      	movs	r2, #60	@ 0x3c
 80048e0:	2101      	movs	r1, #1
 80048e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	22ff      	movs	r2, #255	@ 0xff
 80048e8:	4393      	bics	r3, r2
 80048ea:	001a      	movs	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a33      	ldr	r2, [pc, #204]	@ (80049c4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80048f8:	401a      	ands	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4a30      	ldr	r2, [pc, #192]	@ (80049c8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004906:	401a      	ands	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a2e      	ldr	r2, [pc, #184]	@ (80049cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004914:	401a      	ands	r2, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a2b      	ldr	r2, [pc, #172]	@ (80049d0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004922:	401a      	ands	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a29      	ldr	r2, [pc, #164]	@ (80049d4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004930:	401a      	ands	r2, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a26      	ldr	r2, [pc, #152]	@ (80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800493e:	401a      	ands	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a24      	ldr	r2, [pc, #144]	@ (80049dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800494c:	401a      	ands	r2, r3
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a21      	ldr	r2, [pc, #132]	@ (80049e0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800495c:	401a      	ands	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1e      	ldr	r2, [pc, #120]	@ (80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d11c      	bne.n	80049aa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004974:	401a      	ands	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	051b      	lsls	r3, r3, #20
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004984:	401a      	ands	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a17      	ldr	r2, [pc, #92]	@ (80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004992:	401a      	ands	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a15      	ldr	r2, [pc, #84]	@ (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80049a0:	401a      	ands	r2, r3
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	223c      	movs	r2, #60	@ 0x3c
 80049b6:	2100      	movs	r1, #0
 80049b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b004      	add	sp, #16
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	fffffcff 	.word	0xfffffcff
 80049c8:	fffffbff 	.word	0xfffffbff
 80049cc:	fffff7ff 	.word	0xfffff7ff
 80049d0:	ffffefff 	.word	0xffffefff
 80049d4:	ffffdfff 	.word	0xffffdfff
 80049d8:	ffffbfff 	.word	0xffffbfff
 80049dc:	fff0ffff 	.word	0xfff0ffff
 80049e0:	efffffff 	.word	0xefffffff
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	ff0fffff 	.word	0xff0fffff
 80049ec:	feffffff 	.word	0xfeffffff
 80049f0:	fdffffff 	.word	0xfdffffff
 80049f4:	dfffffff 	.word	0xdfffffff

080049f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a00:	46c0      	nop			@ (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a10:	46c0      	nop			@ (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e046      	b.n	8004ac8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2288      	movs	r2, #136	@ 0x88
 8004a3e:	589b      	ldr	r3, [r3, r2]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d107      	bne.n	8004a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2284      	movs	r2, #132	@ 0x84
 8004a48:	2100      	movs	r1, #0
 8004a4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fc fbe0 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2288      	movs	r2, #136	@ 0x88
 8004a58:	2124      	movs	r1, #36	@ 0x24
 8004a5a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2101      	movs	r1, #1
 8004a68:	438a      	bics	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 faa4 	bl	8004fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 f828 	bl	8004ad4 <UART_SetConfig>
 8004a84:	0003      	movs	r3, r0
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e01c      	b.n	8004ac8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	490d      	ldr	r1, [pc, #52]	@ (8004ad0 <HAL_UART_Init+0xa8>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	212a      	movs	r1, #42	@ 0x2a
 8004aaa:	438a      	bics	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fb33 	bl	800512c <UART_CheckIdleState>
 8004ac6:	0003      	movs	r3, r0
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	ffffb7ff 	.word	0xffffb7ff

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b5b0      	push	{r4, r5, r7, lr}
 8004ad6:	b090      	sub	sp, #64	@ 0x40
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004adc:	231a      	movs	r3, #26
 8004ade:	2220      	movs	r2, #32
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4ac4      	ldr	r2, [pc, #784]	@ (8004e18 <UART_SetConfig+0x344>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b12:	430b      	orrs	r3, r1
 8004b14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4abf      	ldr	r2, [pc, #764]	@ (8004e1c <UART_SetConfig+0x348>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	0018      	movs	r0, r3
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4ab9      	ldr	r2, [pc, #740]	@ (8004e20 <UART_SetConfig+0x34c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b46:	4313      	orrs	r3, r2
 8004b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4ab4      	ldr	r2, [pc, #720]	@ (8004e24 <UART_SetConfig+0x350>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	220f      	movs	r2, #15
 8004b68:	4393      	bics	r3, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	0003      	movs	r3, r0
 8004b76:	430b      	orrs	r3, r1
 8004b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4aaa      	ldr	r2, [pc, #680]	@ (8004e28 <UART_SetConfig+0x354>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d131      	bne.n	8004be8 <UART_SetConfig+0x114>
 8004b84:	4ba9      	ldr	r3, [pc, #676]	@ (8004e2c <UART_SetConfig+0x358>)
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d01d      	beq.n	8004bcc <UART_SetConfig+0xf8>
 8004b90:	d823      	bhi.n	8004bda <UART_SetConfig+0x106>
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d00c      	beq.n	8004bb0 <UART_SetConfig+0xdc>
 8004b96:	d820      	bhi.n	8004bda <UART_SetConfig+0x106>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <UART_SetConfig+0xce>
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d00e      	beq.n	8004bbe <UART_SetConfig+0xea>
 8004ba0:	e01b      	b.n	8004bda <UART_SetConfig+0x106>
 8004ba2:	231b      	movs	r3, #27
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	19db      	adds	r3, r3, r7
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e071      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004bb0:	231b      	movs	r3, #27
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	19db      	adds	r3, r3, r7
 8004bb8:	2202      	movs	r2, #2
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e06a      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004bbe:	231b      	movs	r3, #27
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	19db      	adds	r3, r3, r7
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e063      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004bcc:	231b      	movs	r3, #27
 8004bce:	2220      	movs	r2, #32
 8004bd0:	189b      	adds	r3, r3, r2
 8004bd2:	19db      	adds	r3, r3, r7
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e05c      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004bda:	231b      	movs	r3, #27
 8004bdc:	2220      	movs	r2, #32
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	19db      	adds	r3, r3, r7
 8004be2:	2210      	movs	r2, #16
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	e055      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a90      	ldr	r2, [pc, #576]	@ (8004e30 <UART_SetConfig+0x35c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d106      	bne.n	8004c00 <UART_SetConfig+0x12c>
 8004bf2:	231b      	movs	r3, #27
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	19db      	adds	r3, r3, r7
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e049      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a86      	ldr	r2, [pc, #536]	@ (8004e20 <UART_SetConfig+0x34c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d13e      	bne.n	8004c88 <UART_SetConfig+0x1b4>
 8004c0a:	4b88      	ldr	r3, [pc, #544]	@ (8004e2c <UART_SetConfig+0x358>)
 8004c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0e:	23c0      	movs	r3, #192	@ 0xc0
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4013      	ands	r3, r2
 8004c14:	22c0      	movs	r2, #192	@ 0xc0
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d027      	beq.n	8004c6c <UART_SetConfig+0x198>
 8004c1c:	22c0      	movs	r2, #192	@ 0xc0
 8004c1e:	0112      	lsls	r2, r2, #4
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d82a      	bhi.n	8004c7a <UART_SetConfig+0x1a6>
 8004c24:	2280      	movs	r2, #128	@ 0x80
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d011      	beq.n	8004c50 <UART_SetConfig+0x17c>
 8004c2c:	2280      	movs	r2, #128	@ 0x80
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d822      	bhi.n	8004c7a <UART_SetConfig+0x1a6>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <UART_SetConfig+0x16e>
 8004c38:	2280      	movs	r2, #128	@ 0x80
 8004c3a:	00d2      	lsls	r2, r2, #3
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <UART_SetConfig+0x18a>
 8004c40:	e01b      	b.n	8004c7a <UART_SetConfig+0x1a6>
 8004c42:	231b      	movs	r3, #27
 8004c44:	2220      	movs	r2, #32
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	19db      	adds	r3, r3, r7
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e021      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004c50:	231b      	movs	r3, #27
 8004c52:	2220      	movs	r2, #32
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	19db      	adds	r3, r3, r7
 8004c58:	2202      	movs	r2, #2
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e01a      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004c5e:	231b      	movs	r3, #27
 8004c60:	2220      	movs	r2, #32
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	19db      	adds	r3, r3, r7
 8004c66:	2204      	movs	r2, #4
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e013      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004c6c:	231b      	movs	r3, #27
 8004c6e:	2220      	movs	r2, #32
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	19db      	adds	r3, r3, r7
 8004c74:	2208      	movs	r2, #8
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e00c      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004c7a:	231b      	movs	r3, #27
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	19db      	adds	r3, r3, r7
 8004c82:	2210      	movs	r2, #16
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e005      	b.n	8004c94 <UART_SetConfig+0x1c0>
 8004c88:	231b      	movs	r3, #27
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	19db      	adds	r3, r3, r7
 8004c90:	2210      	movs	r2, #16
 8004c92:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a61      	ldr	r2, [pc, #388]	@ (8004e20 <UART_SetConfig+0x34c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d000      	beq.n	8004ca0 <UART_SetConfig+0x1cc>
 8004c9e:	e092      	b.n	8004dc6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca0:	231b      	movs	r3, #27
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	19db      	adds	r3, r3, r7
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d015      	beq.n	8004cda <UART_SetConfig+0x206>
 8004cae:	dc18      	bgt.n	8004ce2 <UART_SetConfig+0x20e>
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d00d      	beq.n	8004cd0 <UART_SetConfig+0x1fc>
 8004cb4:	dc15      	bgt.n	8004ce2 <UART_SetConfig+0x20e>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <UART_SetConfig+0x1ec>
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d005      	beq.n	8004cca <UART_SetConfig+0x1f6>
 8004cbe:	e010      	b.n	8004ce2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe f9aa 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cc8:	e014      	b.n	8004cf4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cca:	4b5a      	ldr	r3, [pc, #360]	@ (8004e34 <UART_SetConfig+0x360>)
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cce:	e011      	b.n	8004cf4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd0:	f7fe f916 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cd8:	e00c      	b.n	8004cf4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cda:	2380      	movs	r3, #128	@ 0x80
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ce0:	e008      	b.n	8004cf4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004ce6:	231a      	movs	r3, #26
 8004ce8:	2220      	movs	r2, #32
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	19db      	adds	r3, r3, r7
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
        break;
 8004cf2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d100      	bne.n	8004cfc <UART_SetConfig+0x228>
 8004cfa:	e147      	b.n	8004f8c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d00:	4b4d      	ldr	r3, [pc, #308]	@ (8004e38 <UART_SetConfig+0x364>)
 8004d02:	0052      	lsls	r2, r2, #1
 8004d04:	5ad3      	ldrh	r3, [r2, r3]
 8004d06:	0019      	movs	r1, r3
 8004d08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d0a:	f7fb f9fb 	bl	8000104 <__udivsi3>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	0013      	movs	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d305      	bcc.n	8004d2e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d906      	bls.n	8004d3c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004d2e:	231a      	movs	r3, #26
 8004d30:	2220      	movs	r2, #32
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	19db      	adds	r3, r3, r7
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e127      	b.n	8004f8c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d48:	4b3b      	ldr	r3, [pc, #236]	@ (8004e38 <UART_SetConfig+0x364>)
 8004d4a:	0052      	lsls	r2, r2, #1
 8004d4c:	5ad3      	ldrh	r3, [r2, r3]
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	69b8      	ldr	r0, [r7, #24]
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	f7fb fa5e 	bl	800021c <__aeabi_uldivmod>
 8004d60:	0002      	movs	r2, r0
 8004d62:	000b      	movs	r3, r1
 8004d64:	0e11      	lsrs	r1, r2, #24
 8004d66:	021d      	lsls	r5, r3, #8
 8004d68:	430d      	orrs	r5, r1
 8004d6a:	0214      	lsls	r4, r2, #8
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	1900      	adds	r0, r0, r4
 8004d7e:	4169      	adcs	r1, r5
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f7fb fa45 	bl	800021c <__aeabi_uldivmod>
 8004d92:	0002      	movs	r2, r0
 8004d94:	000b      	movs	r3, r1
 8004d96:	0013      	movs	r3, r2
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d9c:	23c0      	movs	r3, #192	@ 0xc0
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d309      	bcc.n	8004db8 <UART_SetConfig+0x2e4>
 8004da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	035b      	lsls	r3, r3, #13
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d204      	bcs.n	8004db8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db4:	60da      	str	r2, [r3, #12]
 8004db6:	e0e9      	b.n	8004f8c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004db8:	231a      	movs	r3, #26
 8004dba:	2220      	movs	r2, #32
 8004dbc:	189b      	adds	r3, r3, r2
 8004dbe:	19db      	adds	r3, r3, r7
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
 8004dc4:	e0e2      	b.n	8004f8c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d000      	beq.n	8004dd4 <UART_SetConfig+0x300>
 8004dd2:	e083      	b.n	8004edc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004dd4:	231b      	movs	r3, #27
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	189b      	adds	r3, r3, r2
 8004dda:	19db      	adds	r3, r3, r7
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d015      	beq.n	8004e0e <UART_SetConfig+0x33a>
 8004de2:	dc2b      	bgt.n	8004e3c <UART_SetConfig+0x368>
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d00d      	beq.n	8004e04 <UART_SetConfig+0x330>
 8004de8:	dc28      	bgt.n	8004e3c <UART_SetConfig+0x368>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <UART_SetConfig+0x320>
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d005      	beq.n	8004dfe <UART_SetConfig+0x32a>
 8004df2:	e023      	b.n	8004e3c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fe f910 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dfc:	e027      	b.n	8004e4e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <UART_SetConfig+0x360>)
 8004e00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e02:	e024      	b.n	8004e4e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e04:	f7fe f87c 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e0c:	e01f      	b.n	8004e4e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0e:	2380      	movs	r3, #128	@ 0x80
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e14:	e01b      	b.n	8004e4e <UART_SetConfig+0x37a>
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	cfff69f3 	.word	0xcfff69f3
 8004e1c:	ffffcfff 	.word	0xffffcfff
 8004e20:	40008000 	.word	0x40008000
 8004e24:	11fff4ff 	.word	0x11fff4ff
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40004400 	.word	0x40004400
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	080055a4 	.word	0x080055a4
      default:
        pclk = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e40:	231a      	movs	r3, #26
 8004e42:	2220      	movs	r2, #32
 8004e44:	189b      	adds	r3, r3, r2
 8004e46:	19db      	adds	r3, r3, r7
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
        break;
 8004e4c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d100      	bne.n	8004e56 <UART_SetConfig+0x382>
 8004e54:	e09a      	b.n	8004f8c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e5a:	4b58      	ldr	r3, [pc, #352]	@ (8004fbc <UART_SetConfig+0x4e8>)
 8004e5c:	0052      	lsls	r2, r2, #1
 8004e5e:	5ad3      	ldrh	r3, [r2, r3]
 8004e60:	0019      	movs	r1, r3
 8004e62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e64:	f7fb f94e 	bl	8000104 <__udivsi3>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	005a      	lsls	r2, r3, #1
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	18d2      	adds	r2, r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	0019      	movs	r1, r3
 8004e7a:	0010      	movs	r0, r2
 8004e7c:	f7fb f942 	bl	8000104 <__udivsi3>
 8004e80:	0003      	movs	r3, r0
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d921      	bls.n	8004ece <UART_SetConfig+0x3fa>
 8004e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	025b      	lsls	r3, r3, #9
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d21c      	bcs.n	8004ece <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	200e      	movs	r0, #14
 8004e9a:	2420      	movs	r4, #32
 8004e9c:	1903      	adds	r3, r0, r4
 8004e9e:	19db      	adds	r3, r3, r7
 8004ea0:	210f      	movs	r1, #15
 8004ea2:	438a      	bics	r2, r1
 8004ea4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2207      	movs	r2, #7
 8004eae:	4013      	ands	r3, r2
 8004eb0:	b299      	uxth	r1, r3
 8004eb2:	1903      	adds	r3, r0, r4
 8004eb4:	19db      	adds	r3, r3, r7
 8004eb6:	1902      	adds	r2, r0, r4
 8004eb8:	19d2      	adds	r2, r2, r7
 8004eba:	8812      	ldrh	r2, [r2, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	1902      	adds	r2, r0, r4
 8004ec6:	19d2      	adds	r2, r2, r7
 8004ec8:	8812      	ldrh	r2, [r2, #0]
 8004eca:	60da      	str	r2, [r3, #12]
 8004ecc:	e05e      	b.n	8004f8c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ece:	231a      	movs	r3, #26
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	19db      	adds	r3, r3, r7
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e057      	b.n	8004f8c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004edc:	231b      	movs	r3, #27
 8004ede:	2220      	movs	r2, #32
 8004ee0:	189b      	adds	r3, r3, r2
 8004ee2:	19db      	adds	r3, r3, r7
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d015      	beq.n	8004f16 <UART_SetConfig+0x442>
 8004eea:	dc18      	bgt.n	8004f1e <UART_SetConfig+0x44a>
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d00d      	beq.n	8004f0c <UART_SetConfig+0x438>
 8004ef0:	dc15      	bgt.n	8004f1e <UART_SetConfig+0x44a>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <UART_SetConfig+0x428>
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d005      	beq.n	8004f06 <UART_SetConfig+0x432>
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fe f88c 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004f00:	0003      	movs	r3, r0
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f04:	e014      	b.n	8004f30 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f06:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <UART_SetConfig+0x4ec>)
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f0a:	e011      	b.n	8004f30 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0c:	f7fd fff8 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004f10:	0003      	movs	r3, r0
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f14:	e00c      	b.n	8004f30 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f1c:	e008      	b.n	8004f30 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f22:	231a      	movs	r3, #26
 8004f24:	2220      	movs	r2, #32
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	19db      	adds	r3, r3, r7
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
        break;
 8004f2e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02a      	beq.n	8004f8c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f3a:	4b20      	ldr	r3, [pc, #128]	@ (8004fbc <UART_SetConfig+0x4e8>)
 8004f3c:	0052      	lsls	r2, r2, #1
 8004f3e:	5ad3      	ldrh	r3, [r2, r3]
 8004f40:	0019      	movs	r1, r3
 8004f42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f44:	f7fb f8de 	bl	8000104 <__udivsi3>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	18d2      	adds	r2, r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	0019      	movs	r1, r3
 8004f5a:	0010      	movs	r0, r2
 8004f5c:	f7fb f8d2 	bl	8000104 <__udivsi3>
 8004f60:	0003      	movs	r3, r0
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d90a      	bls.n	8004f80 <UART_SetConfig+0x4ac>
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	025b      	lsls	r3, r3, #9
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d205      	bcs.n	8004f80 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	e005      	b.n	8004f8c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f80:	231a      	movs	r3, #26
 8004f82:	2220      	movs	r2, #32
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	226a      	movs	r2, #106	@ 0x6a
 8004f90:	2101      	movs	r1, #1
 8004f92:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	2268      	movs	r2, #104	@ 0x68
 8004f98:	2101      	movs	r1, #1
 8004f9a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fa8:	231a      	movs	r3, #26
 8004faa:	2220      	movs	r2, #32
 8004fac:	189b      	adds	r3, r3, r2
 8004fae:	19db      	adds	r3, r3, r7
 8004fb0:	781b      	ldrb	r3, [r3, #0]
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b010      	add	sp, #64	@ 0x40
 8004fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	080055a4 	.word	0x080055a4
 8004fc0:	00f42400 	.word	0x00f42400

08004fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8005108 <UART_AdvFeatureConfig+0x144>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a43      	ldr	r2, [pc, #268]	@ (800510c <UART_AdvFeatureConfig+0x148>)
 8005000:	4013      	ands	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	2202      	movs	r2, #2
 8005016:	4013      	ands	r3, r2
 8005018:	d00b      	beq.n	8005032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a3b      	ldr	r2, [pc, #236]	@ (8005110 <UART_AdvFeatureConfig+0x14c>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	2204      	movs	r2, #4
 8005038:	4013      	ands	r3, r2
 800503a:	d00b      	beq.n	8005054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4a34      	ldr	r2, [pc, #208]	@ (8005114 <UART_AdvFeatureConfig+0x150>)
 8005044:	4013      	ands	r3, r2
 8005046:	0019      	movs	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	2210      	movs	r2, #16
 800505a:	4013      	ands	r3, r2
 800505c:	d00b      	beq.n	8005076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <UART_AdvFeatureConfig+0x154>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	2220      	movs	r2, #32
 800507c:	4013      	ands	r3, r2
 800507e:	d00b      	beq.n	8005098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4a25      	ldr	r2, [pc, #148]	@ (800511c <UART_AdvFeatureConfig+0x158>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	2240      	movs	r2, #64	@ 0x40
 800509e:	4013      	ands	r3, r2
 80050a0:	d01d      	beq.n	80050de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <UART_AdvFeatureConfig+0x15c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	035b      	lsls	r3, r3, #13
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10b      	bne.n	80050de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <UART_AdvFeatureConfig+0x160>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	2280      	movs	r2, #128	@ 0x80
 80050e4:	4013      	ands	r3, r2
 80050e6:	d00b      	beq.n	8005100 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005128 <UART_AdvFeatureConfig+0x164>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }
}
 8005100:	46c0      	nop			@ (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b002      	add	sp, #8
 8005106:	bd80      	pop	{r7, pc}
 8005108:	ffff7fff 	.word	0xffff7fff
 800510c:	fffdffff 	.word	0xfffdffff
 8005110:	fffeffff 	.word	0xfffeffff
 8005114:	fffbffff 	.word	0xfffbffff
 8005118:	ffffefff 	.word	0xffffefff
 800511c:	ffffdfff 	.word	0xffffdfff
 8005120:	ffefffff 	.word	0xffefffff
 8005124:	ff9fffff 	.word	0xff9fffff
 8005128:	fff7ffff 	.word	0xfff7ffff

0800512c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b092      	sub	sp, #72	@ 0x48
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2290      	movs	r2, #144	@ 0x90
 8005138:	2100      	movs	r1, #0
 800513a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800513c:	f7fc f9c0 	bl	80014c0 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2208      	movs	r2, #8
 800514c:	4013      	ands	r3, r2
 800514e:	2b08      	cmp	r3, #8
 8005150:	d12d      	bne.n	80051ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005154:	2280      	movs	r2, #128	@ 0x80
 8005156:	0391      	lsls	r1, r2, #14
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4a47      	ldr	r2, [pc, #284]	@ (8005278 <UART_CheckIdleState+0x14c>)
 800515c:	9200      	str	r2, [sp, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	f000 f88e 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 8005164:	1e03      	subs	r3, r0, #0
 8005166:	d022      	beq.n	80051ae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005168:	f3ef 8310 	mrs	r3, PRIMASK
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005172:	2301      	movs	r3, #1
 8005174:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	f383 8810 	msr	PRIMASK, r3
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2180      	movs	r1, #128	@ 0x80
 800518a:	438a      	bics	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2288      	movs	r2, #136	@ 0x88
 800519e:	2120      	movs	r1, #32
 80051a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2284      	movs	r2, #132	@ 0x84
 80051a6:	2100      	movs	r1, #0
 80051a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e060      	b.n	8005270 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2204      	movs	r2, #4
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d146      	bne.n	800524a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051be:	2280      	movs	r2, #128	@ 0x80
 80051c0:	03d1      	lsls	r1, r2, #15
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005278 <UART_CheckIdleState+0x14c>)
 80051c6:	9200      	str	r2, [sp, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f000 f859 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 80051ce:	1e03      	subs	r3, r0, #0
 80051d0:	d03b      	beq.n	800524a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80051d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
 80051dc:	2301      	movs	r3, #1
 80051de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			@ (mov r8, r8)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4922      	ldr	r1, [pc, #136]	@ (800527c <UART_CheckIdleState+0x150>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005204:	f3ef 8310 	mrs	r3, PRIMASK
 8005208:	61bb      	str	r3, [r7, #24]
  return(result);
 800520a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30
 800520e:	2301      	movs	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f383 8810 	msr	PRIMASK, r3
}
 8005218:	46c0      	nop			@ (mov r8, r8)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2101      	movs	r1, #1
 8005226:	438a      	bics	r2, r1
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	228c      	movs	r2, #140	@ 0x8c
 800523a:	2120      	movs	r1, #32
 800523c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2284      	movs	r2, #132	@ 0x84
 8005242:	2100      	movs	r1, #0
 8005244:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e012      	b.n	8005270 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2288      	movs	r2, #136	@ 0x88
 800524e:	2120      	movs	r1, #32
 8005250:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	228c      	movs	r2, #140	@ 0x8c
 8005256:	2120      	movs	r1, #32
 8005258:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2284      	movs	r2, #132	@ 0x84
 800526a:	2100      	movs	r1, #0
 800526c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b010      	add	sp, #64	@ 0x40
 8005276:	bd80      	pop	{r7, pc}
 8005278:	01ffffff 	.word	0x01ffffff
 800527c:	fffffedf 	.word	0xfffffedf

08005280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	1dfb      	adds	r3, r7, #7
 800528e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	e051      	b.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	3301      	adds	r3, #1
 8005296:	d04e      	beq.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005298:	f7fc f912 	bl	80014c0 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e051      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2204      	movs	r2, #4
 80052ba:	4013      	ands	r3, r2
 80052bc:	d03b      	beq.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb6>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	d038      	beq.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb6>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b40      	cmp	r3, #64	@ 0x40
 80052c8:	d035      	beq.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2208      	movs	r2, #8
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d111      	bne.n	80052fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f000 f83c 	bl	8005360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2290      	movs	r2, #144	@ 0x90
 80052ec:	2108      	movs	r1, #8
 80052ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2284      	movs	r2, #132	@ 0x84
 80052f4:	2100      	movs	r1, #0
 80052f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e02c      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	401a      	ands	r2, r3
 8005308:	2380      	movs	r3, #128	@ 0x80
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	429a      	cmp	r2, r3
 800530e:	d112      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2280      	movs	r2, #128	@ 0x80
 8005316:	0112      	lsls	r2, r2, #4
 8005318:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	0018      	movs	r0, r3
 800531e:	f000 f81f 	bl	8005360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2290      	movs	r2, #144	@ 0x90
 8005326:	2120      	movs	r1, #32
 8005328:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2284      	movs	r2, #132	@ 0x84
 800532e:	2100      	movs	r1, #0
 8005330:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e00f      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	425a      	negs	r2, r3
 8005346:	4153      	adcs	r3, r2
 8005348:	b2db      	uxtb	r3, r3
 800534a:	001a      	movs	r2, r3
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d09e      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	@ 0x38
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005368:	f3ef 8310 	mrs	r3, PRIMASK
 800536c:	617b      	str	r3, [r7, #20]
  return(result);
 800536e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
 8005372:	2301      	movs	r3, #1
 8005374:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f383 8810 	msr	PRIMASK, r3
}
 800537c:	46c0      	nop			@ (mov r8, r8)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4926      	ldr	r1, [pc, #152]	@ (8005424 <UART_EndRxTransfer+0xc4>)
 800538a:	400a      	ands	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f383 8810 	msr	PRIMASK, r3
}
 8005398:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539a:	f3ef 8310 	mrs	r3, PRIMASK
 800539e:	623b      	str	r3, [r7, #32]
  return(result);
 80053a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053a4:	2301      	movs	r3, #1
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	f383 8810 	msr	PRIMASK, r3
}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	491b      	ldr	r1, [pc, #108]	@ (8005428 <UART_EndRxTransfer+0xc8>)
 80053bc:	400a      	ands	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	f383 8810 	msr	PRIMASK, r3
}
 80053ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d118      	bne.n	8005406 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d4:	f3ef 8310 	mrs	r3, PRIMASK
 80053d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053de:	2301      	movs	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2110      	movs	r1, #16
 80053f6:	438a      	bics	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f383 8810 	msr	PRIMASK, r3
}
 8005404:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	228c      	movs	r2, #140	@ 0x8c
 800540a:	2120      	movs	r1, #32
 800540c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b00e      	add	sp, #56	@ 0x38
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	fffffedf 	.word	0xfffffedf
 8005428:	effffffe 	.word	0xeffffffe

0800542c <memset>:
 800542c:	0003      	movs	r3, r0
 800542e:	1882      	adds	r2, r0, r2
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	7019      	strb	r1, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <__libc_init_array>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	2600      	movs	r6, #0
 8005440:	4c0c      	ldr	r4, [pc, #48]	@ (8005474 <__libc_init_array+0x38>)
 8005442:	4d0d      	ldr	r5, [pc, #52]	@ (8005478 <__libc_init_array+0x3c>)
 8005444:	1b64      	subs	r4, r4, r5
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	42a6      	cmp	r6, r4
 800544a:	d109      	bne.n	8005460 <__libc_init_array+0x24>
 800544c:	2600      	movs	r6, #0
 800544e:	f000 f819 	bl	8005484 <_init>
 8005452:	4c0a      	ldr	r4, [pc, #40]	@ (800547c <__libc_init_array+0x40>)
 8005454:	4d0a      	ldr	r5, [pc, #40]	@ (8005480 <__libc_init_array+0x44>)
 8005456:	1b64      	subs	r4, r4, r5
 8005458:	10a4      	asrs	r4, r4, #2
 800545a:	42a6      	cmp	r6, r4
 800545c:	d105      	bne.n	800546a <__libc_init_array+0x2e>
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	00b3      	lsls	r3, r6, #2
 8005462:	58eb      	ldr	r3, [r5, r3]
 8005464:	4798      	blx	r3
 8005466:	3601      	adds	r6, #1
 8005468:	e7ee      	b.n	8005448 <__libc_init_array+0xc>
 800546a:	00b3      	lsls	r3, r6, #2
 800546c:	58eb      	ldr	r3, [r5, r3]
 800546e:	4798      	blx	r3
 8005470:	3601      	adds	r6, #1
 8005472:	e7f2      	b.n	800545a <__libc_init_array+0x1e>
 8005474:	080055c4 	.word	0x080055c4
 8005478:	080055c4 	.word	0x080055c4
 800547c:	080055c8 	.word	0x080055c8
 8005480:	080055c4 	.word	0x080055c4

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
