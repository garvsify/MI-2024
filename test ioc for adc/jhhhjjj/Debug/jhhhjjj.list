
jhhhjjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080044f8  080044f8  000054f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  080045e0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080045e0  00006208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001054b  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e75  00000000  00000000  0001657f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000183f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdd  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c86  00000000  00000000  00019edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c9b  00000000  00000000  00030b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099044  00000000  00000000  000417fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  000da888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ddfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080044e0 	.word	0x080044e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080044e0 	.word	0x080044e0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fc8e 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f80e 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fa78 	bl	8000948 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000458:	f000 f852 	bl	8000500 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800045c:	f000 fa40 	bl	80008e0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000460:	f000 f8ba 	bl	80005d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000464:	f000 f934 	bl	80006d0 <MX_TIM3_Init>
  MX_TIM17_Init();
 8000468:	f000 f9b2 	bl	80007d0 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	e7fd      	b.n	800046c <main+0x24>

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b093      	sub	sp, #76	@ 0x4c
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	2410      	movs	r4, #16
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2338      	movs	r3, #56	@ 0x38
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f004 f801 	bl	8004488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	2310      	movs	r3, #16
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f003 fffa 	bl	8004488 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fbcb 	bl	8001c34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2202      	movs	r2, #2
 80004a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2280      	movs	r2, #128	@ 0x80
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2240      	movs	r2, #64	@ 0x40
 80004b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fc03 	bl	8001ccc <HAL_RCC_OscConfig>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ca:	f000 fa9f 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ce:	003b      	movs	r3, r7
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	003b      	movs	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e6:	003b      	movs	r3, r7
 80004e8:	2100      	movs	r1, #0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 ff08 	bl	8002300 <HAL_RCC_ClockConfig>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f4:	f000 fa8a 	bl	8000a0c <Error_Handler>
  }
}
 80004f8:	46c0      	nop			@ (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b013      	add	sp, #76	@ 0x4c
 80004fe:	bd90      	pop	{r4, r7, pc}

08000500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	0018      	movs	r0, r3
 800050a:	230c      	movs	r3, #12
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f003 ffba 	bl	8004488 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000514:	4b2e      	ldr	r3, [pc, #184]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000516:	4a2f      	ldr	r2, [pc, #188]	@ (80005d4 <MX_ADC1_Init+0xd4>)
 8000518:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	05d2      	lsls	r2, r2, #23
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000522:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000536:	2204      	movs	r2, #4
 8000538:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053a:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800053c:	2200      	movs	r2, #0
 800053e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000540:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000542:	2200      	movs	r2, #0
 8000544:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000546:	4b22      	ldr	r3, [pc, #136]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000548:	2200      	movs	r2, #0
 800054a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800054c:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000554:	2220      	movs	r2, #32
 8000556:	2100      	movs	r1, #0
 8000558:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000562:	2200      	movs	r2, #0
 8000564:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000566:	4b1a      	ldr	r3, [pc, #104]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000568:	222c      	movs	r2, #44	@ 0x2c
 800056a:	2100      	movs	r1, #0
 800056c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	0152      	lsls	r2, r2, #5
 8000574:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000584:	223c      	movs	r2, #60	@ 0x3c
 8000586:	2100      	movs	r1, #0
 8000588:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 800058c:	2200      	movs	r2, #0
 800058e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fd6e 	bl	8001074 <HAL_ADC_Init>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800059c:	f000 fa36 	bl	8000a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_ADC1_Init+0xd0>)
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 ff03 	bl	80013c4 <HAL_ADC_ConfigChannel>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c2:	f000 fa23 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	20000028 	.word	0x20000028
 80005d4:	40012400 	.word	0x40012400

080005d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	@ 0x30
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	2320      	movs	r3, #32
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	0018      	movs	r0, r3
 80005e4:	2310      	movs	r3, #16
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f003 ff4d 	bl	8004488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ee:	2314      	movs	r3, #20
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	230c      	movs	r3, #12
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f003 ff45 	bl	8004488 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	0018      	movs	r0, r3
 8000602:	2310      	movs	r3, #16
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f003 ff3e 	bl	8004488 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 800060e:	2280      	movs	r2, #128	@ 0x80
 8000610:	05d2      	lsls	r2, r2, #23
 8000612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000616:	223f      	movs	r2, #63	@ 0x3f
 8000618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000622:	4a2a      	ldr	r2, [pc, #168]	@ (80006cc <MX_TIM2_Init+0xf4>)
 8000624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000636:	0018      	movs	r0, r3
 8000638:	f002 f80c 	bl	8002654 <HAL_TIM_Base_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000640:	f000 f9e4 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000644:	2120      	movs	r1, #32
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	0152      	lsls	r2, r2, #5
 800064c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800064e:	187a      	adds	r2, r7, r1
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f002 fb21 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800065e:	f000 f9d5 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000664:	0018      	movs	r0, r3
 8000666:	f002 f8ad 	bl	80027c4 <HAL_TIM_IC_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800066e:	f000 f9cd 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000672:	2114      	movs	r1, #20
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000680:	187a      	adds	r2, r7, r1
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 8000684:	0011      	movs	r1, r2
 8000686:	0018      	movs	r0, r3
 8000688:	f003 f8e0 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000690:	f000 f9bc 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2202      	movs	r2, #2
 8000698:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	220f      	movs	r2, #15
 80006aa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006ac:	1d39      	adds	r1, r7, #4
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_TIM2_Init+0xf0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 fa4e 	bl	8002b54 <HAL_TIM_IC_ConfigChannel>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80006bc:	f000 f9a6 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b00c      	add	sp, #48	@ 0x30
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	001fffff 	.word	0x001fffff

080006d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	@ 0x38
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	2328      	movs	r3, #40	@ 0x28
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	0018      	movs	r0, r3
 80006dc:	2310      	movs	r3, #16
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f003 fed1 	bl	8004488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	231c      	movs	r3, #28
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	230c      	movs	r3, #12
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f003 fec9 	bl	8004488 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	003b      	movs	r3, r7
 80006f8:	0018      	movs	r0, r3
 80006fa:	231c      	movs	r3, #28
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f003 fec2 	bl	8004488 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 8000706:	4a2f      	ldr	r2, [pc, #188]	@ (80007c4 <MX_TIM3_Init+0xf4>)
 8000708:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 800070c:	4a2e      	ldr	r2, [pc, #184]	@ (80007c8 <MX_TIM3_Init+0xf8>)
 800070e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b2b      	ldr	r3, [pc, #172]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 8000718:	4a2c      	ldr	r2, [pc, #176]	@ (80007cc <MX_TIM3_Init+0xfc>)
 800071a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800071c:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000724:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 800072c:	0018      	movs	r0, r3
 800072e:	f001 ff91 	bl	8002654 <HAL_TIM_Base_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000736:	f000 f969 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	2128      	movs	r1, #40	@ 0x28
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	0152      	lsls	r2, r2, #5
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000744:	187a      	adds	r2, r7, r1
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f002 faa6 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000754:	f000 f95a 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 800075a:	0018      	movs	r0, r3
 800075c:	f001 ffd2 	bl	8002704 <HAL_TIM_OC_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000764:	f000 f952 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	211c      	movs	r1, #28
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000776:	187a      	adds	r2, r7, r1
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f003 f865 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000786:	f000 f941 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a2:	0039      	movs	r1, r7
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_TIM3_Init+0xf0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f973 	bl	8002a94 <HAL_TIM_OC_ConfigChannel>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80007b2:	f000 f92b 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b00e      	add	sp, #56	@ 0x38
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	200000d8 	.word	0x200000d8
 80007c4:	40000400 	.word	0x40000400
 80007c8:	00007fff 	.word	0x00007fff
 80007cc:	00000fff 	.word	0x00000fff

080007d0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d6:	2334      	movs	r3, #52	@ 0x34
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	231c      	movs	r3, #28
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f003 fe51 	bl	8004488 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e6:	003b      	movs	r3, r7
 80007e8:	0018      	movs	r0, r3
 80007ea:	2334      	movs	r3, #52	@ 0x34
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f003 fe4a 	bl	8004488 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80007f4:	4b36      	ldr	r3, [pc, #216]	@ (80008d0 <MX_TIM17_Init+0x100>)
 80007f6:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <MX_TIM17_Init+0x104>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 80007fa:	4b35      	ldr	r3, [pc, #212]	@ (80008d0 <MX_TIM17_Init+0x100>)
 80007fc:	4a36      	ldr	r2, [pc, #216]	@ (80008d8 <MX_TIM17_Init+0x108>)
 80007fe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <MX_TIM17_Init+0x100>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4096 - 1;
 8000806:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <MX_TIM17_Init+0x100>)
 8000808:	4a34      	ldr	r2, [pc, #208]	@ (80008dc <MX_TIM17_Init+0x10c>)
 800080a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <MX_TIM17_Init+0x100>)
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000814:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <MX_TIM17_Init+0x100>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_TIM17_Init+0x100>)
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000820:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_TIM17_Init+0x100>)
 8000822:	0018      	movs	r0, r3
 8000824:	f001 ff16 	bl	8002654 <HAL_TIM_Base_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 f8ee 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <MX_TIM17_Init+0x100>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 ff66 	bl	8002704 <HAL_TIM_OC_Init>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 800083c:	f000 f8e6 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000840:	2134      	movs	r1, #52	@ 0x34
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086c:	1879      	adds	r1, r7, r1
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_TIM17_Init+0x100>)
 8000870:	2200      	movs	r2, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f002 f90e 	bl	8002a94 <HAL_TIM_OC_ConfigChannel>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 800087c:	f000 f8c6 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000886:	003b      	movs	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088c:	003b      	movs	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000892:	003b      	movs	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089e:	003b      	movs	r3, r7
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	0192      	lsls	r2, r2, #6
 80008a4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008b2:	003a      	movs	r2, r7
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_TIM17_Init+0x100>)
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f003 f82f 	bl	800391c <HAL_TIMEx_ConfigBreakDeadTime>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM17_Init+0xf6>
  {
    Error_Handler();
 80008c2:	f000 f8a3 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b014      	add	sp, #80	@ 0x50
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	20000124 	.word	0x20000124
 80008d4:	40014800 	.word	0x40014800
 80008d8:	00007fff 	.word	0x00007fff
 80008dc:	00000fff 	.word	0x00000fff

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <MX_USART2_UART_Init+0x64>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 80008ec:	22e1      	movs	r2, #225	@ 0xe1
 80008ee:	0252      	lsls	r2, r2, #9
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0552      	lsls	r2, r2, #21
 80008f8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 8000908:	220c      	movs	r2, #12
 800090a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <MX_USART2_UART_Init+0x60>)
 800092c:	0018      	movs	r0, r3
 800092e:	f003 f8a9 	bl	8003a84 <HAL_UART_Init>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000936:	f000 f869 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000170 	.word	0x20000170
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	240c      	movs	r4, #12
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 fd95 	bl	8004488 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000962:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 8000964:	2104      	movs	r1, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	@ 0x34
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800096e:	2204      	movs	r2, #4
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 800097c:	2120      	movs	r1, #32
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
 8000982:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000986:	2220      	movs	r2, #32
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	@ 0x34
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0xb8>)
 800099c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2140      	movs	r1, #64	@ 0x40
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 f923 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2204      	movs	r2, #4
 80009b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2288      	movs	r2, #136	@ 0x88
 80009bc:	0352      	lsls	r2, r2, #13
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0xc0>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f000 ffaf 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2240      	movs	r2, #64	@ 0x40
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f000 ff9c 	bl	8001930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b009      	add	sp, #36	@ 0x24
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	50000800 	.word	0x50000800
 8000a08:	50001400 	.word	0x50001400

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0549      	lsls	r1, r1, #21
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	055b      	lsls	r3, r3, #21
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b08b      	sub	sp, #44	@ 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	2414      	movs	r4, #20
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2314      	movs	r3, #20
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f003 fd08 	bl	8004488 <memset>
  if(hadc->Instance==ADC1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ae0 <HAL_ADC_MspInit+0x80>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d129      	bne.n	8000ad6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_ADC_MspInit+0x84>)
 8000a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_ADC_MspInit+0x84>)
 8000a88:	2180      	movs	r1, #128	@ 0x80
 8000a8a:	0349      	lsls	r1, r1, #13
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_ADC_MspInit+0x84>)
 8000a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	035b      	lsls	r3, r3, #13
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_ADC_MspInit+0x84>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_ADC_MspInit+0x84>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_ADC_MspInit+0x84>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2233      	movs	r2, #51	@ 0x33
 8000aba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2203      	movs	r2, #3
 8000ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	193a      	adds	r2, r7, r4
 8000aca:	23a0      	movs	r3, #160	@ 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 ff2d 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b00b      	add	sp, #44	@ 0x2c
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	40012400 	.word	0x40012400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08d      	sub	sp, #52	@ 0x34
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	241c      	movs	r4, #28
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	0018      	movs	r0, r3
 8000af6:	2314      	movs	r3, #20
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f003 fcc4 	bl	8004488 <memset>
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d138      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0c:	4b38      	ldr	r3, [pc, #224]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b10:	4b37      	ldr	r3, [pc, #220]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b28:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b30:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b34:	2201      	movs	r2, #1
 8000b36:	4013      	ands	r3, r2
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	0212      	lsls	r2, r2, #8
 8000b42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	0021      	movs	r1, r4
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	187a      	adds	r2, r7, r1
 8000b60:	23a0      	movs	r3, #160	@ 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fee2 	bl	8001930 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	200f      	movs	r0, #15
 8000b72:	f000 feab 	bl	80018cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 febd 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b7c:	e034      	b.n	8000be8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x10c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d114      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b8e:	2102      	movs	r1, #2
 8000b90:	430a      	orrs	r2, r1
 8000b92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b98:	2202      	movs	r2, #2
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2010      	movs	r0, #16
 8000ba6:	f000 fe91 	bl	80018cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000baa:	2010      	movs	r0, #16
 8000bac:	f000 fea3 	bl	80018f6 <HAL_NVIC_EnableIRQ>
}
 8000bb0:	e01a      	b.n	8000be8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM17)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x110>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d115      	bne.n	8000be8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000bc2:	2180      	movs	r1, #128	@ 0x80
 8000bc4:	02c9      	lsls	r1, r1, #11
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x108>)
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	02db      	lsls	r3, r3, #11
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2016      	movs	r0, #22
 8000bde:	f000 fe75 	bl	80018cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000be2:	2016      	movs	r0, #22
 8000be4:	f000 fe87 	bl	80018f6 <HAL_NVIC_EnableIRQ>
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b00d      	add	sp, #52	@ 0x34
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40000400 	.word	0x40000400
 8000bf8:	40014800 	.word	0x40014800

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b08b      	sub	sp, #44	@ 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	2414      	movs	r4, #20
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f003 fc3a 	bl	8004488 <memset>
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <HAL_UART_MspInit+0x8c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d130      	bne.n	8000c80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <HAL_UART_MspInit+0x90>)
 8000c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <HAL_UART_MspInit+0x90>)
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	0289      	lsls	r1, r1, #10
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <HAL_UART_MspInit+0x90>)
 8000c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	029b      	lsls	r3, r3, #10
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_UART_MspInit+0x90>)
 8000c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <HAL_UART_MspInit+0x90>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_UART_MspInit+0x90>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000c52:	0021      	movs	r1, r4
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2201      	movs	r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	187a      	adds	r2, r7, r1
 8000c74:	23a0      	movs	r3, #160	@ 0xa0
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fe58 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00b      	add	sp, #44	@ 0x2c
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	e7fd      	b.n	8000c94 <NMI_Handler+0x4>

08000c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	e7fd      	b.n	8000c9c <HardFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f8c2 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <TIM2_IRQHandler+0x14>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 fdda 	bl	8002884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	2000008c 	.word	0x2000008c

08000cdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <TIM3_IRQHandler+0x14>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fdce 	bl	8002884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	200000d8 	.word	0x200000d8

08000cf4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <TIM17_IRQHandler+0x14>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fdc2 	bl	8002884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000124 	.word	0x20000124

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d1c:	f7ff fff6 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	@ (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d46:	f003 fba7 	bl	8004498 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d4a:	f7ff fb7d 	bl	8000448 <main>

08000d4e <LoopForever>:

LoopForever:
  b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   r0, =_estack
 8000d50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d5c:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 8000d60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d64:	20000208 	.word	0x20000208

08000d68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_Init+0x3c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_Init+0x3c>)
 8000d7e:	2180      	movs	r1, #128	@ 0x80
 8000d80:	0049      	lsls	r1, r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f810 	bl	8000dac <HAL_InitTick>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e001      	b.n	8000d9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe3e 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <HAL_InitTick+0x88>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d02b      	beq.n	8000e1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <HAL_InitTick+0x8c>)
 8000dc6:	681c      	ldr	r4, [r3, #0]
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <HAL_InitTick+0x88>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	0019      	movs	r1, r3
 8000dce:	23fa      	movs	r3, #250	@ 0xfa
 8000dd0:	0098      	lsls	r0, r3, #2
 8000dd2:	f7ff f997 	bl	8000104 <__udivsi3>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0020      	movs	r0, r4
 8000ddc:	f7ff f992 	bl	8000104 <__udivsi3>
 8000de0:	0003      	movs	r3, r0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 fd97 	bl	8001916 <HAL_SYSTICK_Config>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d112      	bne.n	8000e12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d80a      	bhi.n	8000e08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	2301      	movs	r3, #1
 8000df6:	425b      	negs	r3, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fd66 	bl	80018cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_InitTick+0x90>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e00d      	b.n	8000e24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e008      	b.n	8000e24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e12:	230f      	movs	r3, #15
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e003      	b.n	8000e24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	781b      	ldrb	r3, [r3, #0]
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b005      	add	sp, #20
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	18d2      	adds	r2, r2, r3
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000204 	.word	0x20000204

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	20000204 	.word	0x20000204

08000e78 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e88:	401a      	ands	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	fe3fffff 	.word	0xfe3fffff

08000ea0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	23e0      	movs	r3, #224	@ 0xe0
 8000eae:	045b      	lsls	r3, r3, #17
 8000eb0:	4013      	ands	r3, r2
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	2104      	movs	r1, #4
 8000ece:	400a      	ands	r2, r1
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	4091      	lsls	r1, r2
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	43d2      	mvns	r2, r2
 8000ed8:	401a      	ands	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2104      	movs	r1, #4
 8000ede:	400b      	ands	r3, r1
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4099      	lsls	r1, r3
 8000ee4:	000b      	movs	r3, r1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	2104      	movs	r1, #4
 8000f06:	400a      	ands	r2, r1
 8000f08:	2107      	movs	r1, #7
 8000f0a:	4091      	lsls	r1, r2
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2104      	movs	r1, #4
 8000f14:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f16:	40da      	lsrs	r2, r3
 8000f18:	0013      	movs	r3, r2
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	211f      	movs	r1, #31
 8000f36:	400a      	ands	r2, r1
 8000f38:	210f      	movs	r1, #15
 8000f3a:	4091      	lsls	r1, r2
 8000f3c:	000a      	movs	r2, r1
 8000f3e:	43d2      	mvns	r2, r2
 8000f40:	401a      	ands	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0e9b      	lsrs	r3, r3, #26
 8000f46:	210f      	movs	r1, #15
 8000f48:	4019      	ands	r1, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	201f      	movs	r0, #31
 8000f4e:	4003      	ands	r3, r0
 8000f50:	4099      	lsls	r1, r3
 8000f52:	000b      	movs	r3, r1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	035b      	lsls	r3, r3, #13
 8000f74:	0b5b      	lsrs	r3, r3, #13
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	0352      	lsls	r2, r2, #13
 8000f96:	0b52      	lsrs	r2, r2, #13
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	0212      	lsls	r2, r2, #8
 8000fbc:	43d2      	mvns	r2, r2
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	4904      	ldr	r1, [pc, #16]	@ (8000fdc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fca:	400b      	ands	r3, r1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	07ffff00 	.word	0x07ffff00

08000fe0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	0552      	lsls	r2, r2, #21
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	6fffffe8 	.word	0x6fffffe8

08001008 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	055b      	lsls	r3, r3, #21
 8001018:	401a      	ands	r2, r3
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	055b      	lsls	r3, r3, #21
 800101e:	429a      	cmp	r2, r3
 8001020:	d101      	bne.n	8001026 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001026:	2300      	movs	r3, #0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2201      	movs	r2, #1
 800103e:	4013      	ands	r3, r2
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <LL_ADC_IsEnabled+0x18>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <LL_ADC_IsEnabled+0x1a>
 8001048:	2300      	movs	r3, #0
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}

08001052 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	2b04      	cmp	r3, #4
 8001064:	d101      	bne.n	800106a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	231f      	movs	r3, #31
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e17f      	b.n	800139a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10a      	bne.n	80010b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff fcdb 	bl	8000a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2254      	movs	r2, #84	@ 0x54
 80010b4:	2100      	movs	r1, #0
 80010b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff ffa3 	bl	8001008 <LL_ADC_IsInternalRegulatorEnabled>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d115      	bne.n	80010f2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff ff88 	bl	8000fe0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010d0:	4bb4      	ldr	r3, [pc, #720]	@ (80013a4 <HAL_ADC_Init+0x330>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	49b4      	ldr	r1, [pc, #720]	@ (80013a8 <HAL_ADC_Init+0x334>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff f814 	bl	8000104 <__udivsi3>
 80010dc:	0003      	movs	r3, r0
 80010de:	3301      	adds	r3, #1
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010e4:	e002      	b.n	80010ec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f9      	bne.n	80010e6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff ff86 	bl	8001008 <LL_ADC_IsInternalRegulatorEnabled>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d10f      	bne.n	8001120 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	2210      	movs	r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001110:	2201      	movs	r2, #1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001118:	231f      	movs	r3, #31
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff ff94 	bl	8001052 <LL_ADC_REG_IsConversionOngoing>
 800112a:	0003      	movs	r3, r0
 800112c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	2210      	movs	r2, #16
 8001134:	4013      	ands	r3, r2
 8001136:	d000      	beq.n	800113a <HAL_ADC_Init+0xc6>
 8001138:	e122      	b.n	8001380 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d000      	beq.n	8001142 <HAL_ADC_Init+0xce>
 8001140:	e11e      	b.n	8001380 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	4a99      	ldr	r2, [pc, #612]	@ (80013ac <HAL_ADC_Init+0x338>)
 8001148:	4013      	ands	r3, r2
 800114a:	2202      	movs	r2, #2
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff6a 	bl	8001030 <LL_ADC_IsEnabled>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d000      	beq.n	8001162 <HAL_ADC_Init+0xee>
 8001160:	e0ad      	b.n	80012be <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7e1b      	ldrb	r3, [r3, #24]
 800116a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800116c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7e5b      	ldrb	r3, [r3, #25]
 8001172:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001174:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e9b      	ldrb	r3, [r3, #26]
 800117a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800117c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_ADC_Init+0x118>
 8001186:	2380      	movs	r3, #128	@ 0x80
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	e000      	b.n	800118e <HAL_ADC_Init+0x11a>
 800118c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800118e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001194:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da04      	bge.n	80011a8 <HAL_ADC_Init+0x134>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	e001      	b.n	80011ac <HAL_ADC_Init+0x138>
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80011ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	212c      	movs	r1, #44	@ 0x2c
 80011b2:	5c5b      	ldrb	r3, [r3, r1]
 80011b4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011b6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d115      	bne.n	80011f4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7e9b      	ldrb	r3, [r3, #26]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2280      	movs	r2, #128	@ 0x80
 80011d4:	0252      	lsls	r2, r2, #9
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	e00b      	b.n	80011f4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e0:	2220      	movs	r2, #32
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ec:	2201      	movs	r2, #1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00a      	beq.n	8001212 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001200:	23e0      	movs	r3, #224	@ 0xe0
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800120a:	4313      	orrs	r3, r2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_ADC_Init+0x33c>)
 800121a:	4013      	ands	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	430a      	orrs	r2, r1
 8001226:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	0f9b      	lsrs	r3, r3, #30
 800122e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001234:	4313      	orrs	r3, r2
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	223c      	movs	r2, #60	@ 0x3c
 8001240:	5c9b      	ldrb	r3, [r3, r2]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d111      	bne.n	800126a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	0f9b      	lsrs	r3, r3, #30
 800124c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001252:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001258:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800125e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4313      	orrs	r3, r2
 8001264:	2201      	movs	r2, #1
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4a50      	ldr	r2, [pc, #320]	@ (80013b4 <HAL_ADC_Init+0x340>)
 8001272:	4013      	ands	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	430a      	orrs	r2, r1
 800127e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	23c0      	movs	r3, #192	@ 0xc0
 8001286:	061b      	lsls	r3, r3, #24
 8001288:	429a      	cmp	r2, r3
 800128a:	d018      	beq.n	80012be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	429a      	cmp	r2, r3
 8001296:	d012      	beq.n	80012be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	061b      	lsls	r3, r3, #24
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d00c      	beq.n	80012be <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012a4:	4b44      	ldr	r3, [pc, #272]	@ (80013b8 <HAL_ADC_Init+0x344>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a44      	ldr	r2, [pc, #272]	@ (80013bc <HAL_ADC_Init+0x348>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	0019      	movs	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	23f0      	movs	r3, #240	@ 0xf0
 80012b4:	039b      	lsls	r3, r3, #14
 80012b6:	401a      	ands	r2, r3
 80012b8:	4b3f      	ldr	r3, [pc, #252]	@ (80013b8 <HAL_ADC_Init+0x344>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f7ff fdf6 	bl	8000eba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d6:	493a      	ldr	r1, [pc, #232]	@ (80013c0 <HAL_ADC_Init+0x34c>)
 80012d8:	001a      	movs	r2, r3
 80012da:	f7ff fdee 	bl	8000eba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2110      	movs	r1, #16
 80012f2:	4249      	negs	r1, r1
 80012f4:	430a      	orrs	r2, r1
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80012f8:	e018      	b.n	800132c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	039b      	lsls	r3, r3, #14
 8001302:	429a      	cmp	r2, r3
 8001304:	d112      	bne.n	800132c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	3b01      	subs	r3, #1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	221c      	movs	r2, #28
 8001316:	4013      	ands	r3, r2
 8001318:	2210      	movs	r2, #16
 800131a:	4252      	negs	r2, r2
 800131c:	409a      	lsls	r2, r3
 800131e:	0011      	movs	r1, r2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2100      	movs	r1, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fdde 	bl	8000ef4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001338:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800133e:	429a      	cmp	r2, r3
 8001340:	d10b      	bne.n	800135a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	2203      	movs	r2, #3
 800134e:	4393      	bics	r3, r2
 8001350:	2201      	movs	r2, #1
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001358:	e01c      	b.n	8001394 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135e:	2212      	movs	r2, #18
 8001360:	4393      	bics	r3, r2
 8001362:	2210      	movs	r2, #16
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136e:	2201      	movs	r2, #1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001376:	231f      	movs	r3, #31
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800137e:	e009      	b.n	8001394 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	2210      	movs	r2, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800138c:	231f      	movs	r3, #31
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001394:	231f      	movs	r3, #31
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b008      	add	sp, #32
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	20000000 	.word	0x20000000
 80013a8:	00030d40 	.word	0x00030d40
 80013ac:	fffffefd 	.word	0xfffffefd
 80013b0:	ffde0201 	.word	0xffde0201
 80013b4:	1ffffc02 	.word	0x1ffffc02
 80013b8:	40012708 	.word	0x40012708
 80013bc:	ffc3ffff 	.word	0xffc3ffff
 80013c0:	07ffff04 	.word	0x07ffff04

080013c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ce:	2317      	movs	r3, #23
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2254      	movs	r2, #84	@ 0x54
 80013de:	5c9b      	ldrb	r3, [r3, r2]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x24>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e1c0      	b.n	800176a <HAL_ADC_ConfigChannel+0x3a6>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2254      	movs	r2, #84	@ 0x54
 80013ec:	2101      	movs	r1, #1
 80013ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fe2c 	bl	8001052 <LL_ADC_REG_IsConversionOngoing>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d000      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x3c>
 80013fe:	e1a3      	b.n	8001748 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d100      	bne.n	800140a <HAL_ADC_ConfigChannel+0x46>
 8001408:	e143      	b.n	8001692 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	429a      	cmp	r2, r3
 8001414:	d004      	beq.n	8001420 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800141a:	4ac1      	ldr	r2, [pc, #772]	@ (8001720 <HAL_ADC_ConfigChannel+0x35c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d108      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0019      	movs	r1, r3
 800142a:	0010      	movs	r0, r2
 800142c:	f7ff fd99 	bl	8000f62 <LL_ADC_REG_SetSequencerChAdd>
 8001430:	e0c9      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	211f      	movs	r1, #31
 800143c:	400b      	ands	r3, r1
 800143e:	210f      	movs	r1, #15
 8001440:	4099      	lsls	r1, r3
 8001442:	000b      	movs	r3, r1
 8001444:	43db      	mvns	r3, r3
 8001446:	4013      	ands	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	035b      	lsls	r3, r3, #13
 8001450:	0b5b      	lsrs	r3, r3, #13
 8001452:	d105      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x9c>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0e9b      	lsrs	r3, r3, #26
 800145a:	221f      	movs	r2, #31
 800145c:	4013      	ands	r3, r2
 800145e:	e098      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	d000      	beq.n	800146c <HAL_ADC_ConfigChannel+0xa8>
 800146a:	e091      	b.n	8001590 <HAL_ADC_ConfigChannel+0x1cc>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d000      	beq.n	8001478 <HAL_ADC_ConfigChannel+0xb4>
 8001476:	e089      	b.n	800158c <HAL_ADC_ConfigChannel+0x1c8>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2204      	movs	r2, #4
 800147e:	4013      	ands	r3, r2
 8001480:	d000      	beq.n	8001484 <HAL_ADC_ConfigChannel+0xc0>
 8001482:	e081      	b.n	8001588 <HAL_ADC_ConfigChannel+0x1c4>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2208      	movs	r2, #8
 800148a:	4013      	ands	r3, r2
 800148c:	d000      	beq.n	8001490 <HAL_ADC_ConfigChannel+0xcc>
 800148e:	e079      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1c0>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2210      	movs	r2, #16
 8001496:	4013      	ands	r3, r2
 8001498:	d000      	beq.n	800149c <HAL_ADC_ConfigChannel+0xd8>
 800149a:	e071      	b.n	8001580 <HAL_ADC_ConfigChannel+0x1bc>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2220      	movs	r2, #32
 80014a2:	4013      	ands	r3, r2
 80014a4:	d000      	beq.n	80014a8 <HAL_ADC_ConfigChannel+0xe4>
 80014a6:	e069      	b.n	800157c <HAL_ADC_ConfigChannel+0x1b8>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2240      	movs	r2, #64	@ 0x40
 80014ae:	4013      	ands	r3, r2
 80014b0:	d000      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0xf0>
 80014b2:	e061      	b.n	8001578 <HAL_ADC_ConfigChannel+0x1b4>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	4013      	ands	r3, r2
 80014bc:	d000      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0xfc>
 80014be:	e059      	b.n	8001574 <HAL_ADC_ConfigChannel+0x1b0>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	d151      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1ac>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d149      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1a8>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	@ 0x80
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4013      	ands	r3, r2
 80014e2:	d141      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1a4>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4013      	ands	r3, r2
 80014ee:	d139      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1a0>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	015b      	lsls	r3, r3, #5
 80014f8:	4013      	ands	r3, r2
 80014fa:	d131      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x19c>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	019b      	lsls	r3, r3, #6
 8001504:	4013      	ands	r3, r2
 8001506:	d129      	bne.n	800155c <HAL_ADC_ConfigChannel+0x198>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	01db      	lsls	r3, r3, #7
 8001510:	4013      	ands	r3, r2
 8001512:	d121      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x194>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	4013      	ands	r3, r2
 800151e:	d119      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x190>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	025b      	lsls	r3, r3, #9
 8001528:	4013      	ands	r3, r2
 800152a:	d111      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x18c>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	d109      	bne.n	800154c <HAL_ADC_ConfigChannel+0x188>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	02db      	lsls	r3, r3, #11
 8001540:	4013      	ands	r3, r2
 8001542:	d001      	beq.n	8001548 <HAL_ADC_ConfigChannel+0x184>
 8001544:	2312      	movs	r3, #18
 8001546:	e024      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001548:	2300      	movs	r3, #0
 800154a:	e022      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 800154c:	2311      	movs	r3, #17
 800154e:	e020      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001550:	2310      	movs	r3, #16
 8001552:	e01e      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001554:	230f      	movs	r3, #15
 8001556:	e01c      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001558:	230e      	movs	r3, #14
 800155a:	e01a      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 800155c:	230d      	movs	r3, #13
 800155e:	e018      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001560:	230c      	movs	r3, #12
 8001562:	e016      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001564:	230b      	movs	r3, #11
 8001566:	e014      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001568:	230a      	movs	r3, #10
 800156a:	e012      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 800156c:	2309      	movs	r3, #9
 800156e:	e010      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001570:	2308      	movs	r3, #8
 8001572:	e00e      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001574:	2307      	movs	r3, #7
 8001576:	e00c      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001578:	2306      	movs	r3, #6
 800157a:	e00a      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 800157c:	2305      	movs	r3, #5
 800157e:	e008      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001580:	2304      	movs	r3, #4
 8001582:	e006      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001584:	2303      	movs	r3, #3
 8001586:	e004      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1ce>
 8001590:	2300      	movs	r3, #0
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	6852      	ldr	r2, [r2, #4]
 8001596:	201f      	movs	r0, #31
 8001598:	4002      	ands	r2, r0
 800159a:	4093      	lsls	r3, r2
 800159c:	000a      	movs	r2, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d808      	bhi.n	80015c6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	001a      	movs	r2, r3
 80015c2:	f7ff fcae 	bl	8000f22 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	001a      	movs	r2, r3
 80015d4:	f7ff fce8 	bl	8000fa8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db00      	blt.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
 80015e0:	e0bc      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015e2:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fc5b 	bl	8000ea0 <LL_ADC_GetCommonPathInternalCh>
 80015ea:	0003      	movs	r3, r0
 80015ec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001728 <HAL_ADC_ConfigChannel+0x364>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d122      	bne.n	800163e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001600:	d11d      	bne.n	800163e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	4313      	orrs	r3, r2
 800160a:	4a46      	ldr	r2, [pc, #280]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 800160c:	0019      	movs	r1, r3
 800160e:	0010      	movs	r0, r2
 8001610:	f7ff fc32 	bl	8000e78 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001614:	4b45      	ldr	r3, [pc, #276]	@ (800172c <HAL_ADC_ConfigChannel+0x368>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4945      	ldr	r1, [pc, #276]	@ (8001730 <HAL_ADC_ConfigChannel+0x36c>)
 800161a:	0018      	movs	r0, r3
 800161c:	f7fe fd72 	bl	8000104 <__udivsi3>
 8001620:	0003      	movs	r3, r0
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	0013      	movs	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	189b      	adds	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800162e:	e002      	b.n	8001636 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3b01      	subs	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f9      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800163c:	e08e      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a3c      	ldr	r2, [pc, #240]	@ (8001734 <HAL_ADC_ConfigChannel+0x370>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10e      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	045b      	lsls	r3, r3, #17
 800164e:	4013      	ands	r3, r2
 8001650:	d109      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2280      	movs	r2, #128	@ 0x80
 8001656:	0452      	lsls	r2, r2, #17
 8001658:	4313      	orrs	r3, r2
 800165a:	4a32      	ldr	r2, [pc, #200]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	f7ff fc0a 	bl	8000e78 <LL_ADC_SetCommonPathInternalCh>
 8001664:	e07a      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a33      	ldr	r2, [pc, #204]	@ (8001738 <HAL_ADC_ConfigChannel+0x374>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d000      	beq.n	8001672 <HAL_ADC_ConfigChannel+0x2ae>
 8001670:	e074      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	03db      	lsls	r3, r3, #15
 8001678:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800167a:	d000      	beq.n	800167e <HAL_ADC_ConfigChannel+0x2ba>
 800167c:	e06e      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	03d2      	lsls	r2, r2, #15
 8001684:	4313      	orrs	r3, r2
 8001686:	4a27      	ldr	r2, [pc, #156]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 8001688:	0019      	movs	r1, r3
 800168a:	0010      	movs	r0, r2
 800168c:	f7ff fbf4 	bl	8000e78 <LL_ADC_SetCommonPathInternalCh>
 8001690:	e064      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	429a      	cmp	r2, r3
 800169c:	d004      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001720 <HAL_ADC_ConfigChannel+0x35c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d107      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0019      	movs	r1, r3
 80016b2:	0010      	movs	r0, r2
 80016b4:	f7ff fc66 	bl	8000f84 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da4d      	bge.n	800175c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016c0:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff fbec 	bl	8000ea0 <LL_ADC_GetCommonPathInternalCh>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <HAL_ADC_ConfigChannel+0x364>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d108      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4a18      	ldr	r2, [pc, #96]	@ (800173c <HAL_ADC_ConfigChannel+0x378>)
 80016da:	4013      	ands	r3, r2
 80016dc:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 80016de:	0019      	movs	r1, r3
 80016e0:	0010      	movs	r0, r2
 80016e2:	f7ff fbc9 	bl	8000e78 <LL_ADC_SetCommonPathInternalCh>
 80016e6:	e039      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <HAL_ADC_ConfigChannel+0x370>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d108      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <HAL_ADC_ConfigChannel+0x37c>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 80016fa:	0019      	movs	r1, r3
 80016fc:	0010      	movs	r0, r2
 80016fe:	f7ff fbbb 	bl	8000e78 <LL_ADC_SetCommonPathInternalCh>
 8001702:	e02b      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <HAL_ADC_ConfigChannel+0x374>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d126      	bne.n	800175c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <HAL_ADC_ConfigChannel+0x380>)
 8001712:	4013      	ands	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <HAL_ADC_ConfigChannel+0x360>)
 8001716:	0019      	movs	r1, r3
 8001718:	0010      	movs	r0, r2
 800171a:	f7ff fbad 	bl	8000e78 <LL_ADC_SetCommonPathInternalCh>
 800171e:	e01d      	b.n	800175c <HAL_ADC_ConfigChannel+0x398>
 8001720:	80000004 	.word	0x80000004
 8001724:	40012708 	.word	0x40012708
 8001728:	b0001000 	.word	0xb0001000
 800172c:	20000000 	.word	0x20000000
 8001730:	00030d40 	.word	0x00030d40
 8001734:	b8004000 	.word	0xb8004000
 8001738:	b4002000 	.word	0xb4002000
 800173c:	ff7fffff 	.word	0xff7fffff
 8001740:	feffffff 	.word	0xfeffffff
 8001744:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	2220      	movs	r2, #32
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001754:	2317      	movs	r3, #23
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2254      	movs	r2, #84	@ 0x54
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001764:	2317      	movs	r3, #23
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	781b      	ldrb	r3, [r3, #0]
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b006      	add	sp, #24
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b7f      	cmp	r3, #127	@ 0x7f
 8001786:	d809      	bhi.n	800179c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	001a      	movs	r2, r3
 800178e:	231f      	movs	r3, #31
 8001790:	401a      	ands	r2, r3
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_EnableIRQ+0x30>)
 8001794:	2101      	movs	r1, #1
 8001796:	4091      	lsls	r1, r2
 8001798:	000a      	movs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	0002      	movs	r2, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80017bc:	d828      	bhi.n	8001810 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017be:	4a2f      	ldr	r2, [pc, #188]	@ (800187c <__NVIC_SetPriority+0xd4>)
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	33c0      	adds	r3, #192	@ 0xc0
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	589b      	ldr	r3, [r3, r2]
 80017ce:	1dfa      	adds	r2, r7, #7
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	0011      	movs	r1, r2
 80017d4:	2203      	movs	r2, #3
 80017d6:	400a      	ands	r2, r1
 80017d8:	00d2      	lsls	r2, r2, #3
 80017da:	21ff      	movs	r1, #255	@ 0xff
 80017dc:	4091      	lsls	r1, r2
 80017de:	000a      	movs	r2, r1
 80017e0:	43d2      	mvns	r2, r2
 80017e2:	401a      	ands	r2, r3
 80017e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	22ff      	movs	r2, #255	@ 0xff
 80017ec:	401a      	ands	r2, r3
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	0018      	movs	r0, r3
 80017f4:	2303      	movs	r3, #3
 80017f6:	4003      	ands	r3, r0
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fc:	481f      	ldr	r0, [pc, #124]	@ (800187c <__NVIC_SetPriority+0xd4>)
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b25b      	sxtb	r3, r3
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	430a      	orrs	r2, r1
 8001808:	33c0      	adds	r3, #192	@ 0xc0
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800180e:	e031      	b.n	8001874 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001810:	4a1b      	ldr	r2, [pc, #108]	@ (8001880 <__NVIC_SetPriority+0xd8>)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	0019      	movs	r1, r3
 8001818:	230f      	movs	r3, #15
 800181a:	400b      	ands	r3, r1
 800181c:	3b08      	subs	r3, #8
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3306      	adds	r3, #6
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	18d3      	adds	r3, r2, r3
 8001826:	3304      	adds	r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1dfa      	adds	r2, r7, #7
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	0011      	movs	r1, r2
 8001830:	2203      	movs	r2, #3
 8001832:	400a      	ands	r2, r1
 8001834:	00d2      	lsls	r2, r2, #3
 8001836:	21ff      	movs	r1, #255	@ 0xff
 8001838:	4091      	lsls	r1, r2
 800183a:	000a      	movs	r2, r1
 800183c:	43d2      	mvns	r2, r2
 800183e:	401a      	ands	r2, r3
 8001840:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	019b      	lsls	r3, r3, #6
 8001846:	22ff      	movs	r2, #255	@ 0xff
 8001848:	401a      	ands	r2, r3
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	0018      	movs	r0, r3
 8001850:	2303      	movs	r3, #3
 8001852:	4003      	ands	r3, r0
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001858:	4809      	ldr	r0, [pc, #36]	@ (8001880 <__NVIC_SetPriority+0xd8>)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	001c      	movs	r4, r3
 8001860:	230f      	movs	r3, #15
 8001862:	4023      	ands	r3, r4
 8001864:	3b08      	subs	r3, #8
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	430a      	orrs	r2, r1
 800186a:	3306      	adds	r3, #6
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	18c3      	adds	r3, r0, r3
 8001870:	3304      	adds	r3, #4
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b003      	add	sp, #12
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1e5a      	subs	r2, r3, #1
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	045b      	lsls	r3, r3, #17
 8001894:	429a      	cmp	r2, r3
 8001896:	d301      	bcc.n	800189c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001898:	2301      	movs	r3, #1
 800189a:	e010      	b.n	80018be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <SysTick_Config+0x44>)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	3a01      	subs	r2, #1
 80018a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a4:	2301      	movs	r3, #1
 80018a6:	425b      	negs	r3, r3
 80018a8:	2103      	movs	r1, #3
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff ff7c 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <SysTick_Config+0x44>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SysTick_Config+0x44>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	210f      	movs	r1, #15
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	1c02      	adds	r2, r0, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	0002      	movs	r2, r0
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff ff33 	bl	8001774 <__NVIC_EnableIRQ>
}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ffaf 	bl	8001884 <SysTick_Config>
 8001926:	0003      	movs	r3, r0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e147      	b.n	8001bd0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4091      	lsls	r1, r2
 800194a:	000a      	movs	r2, r1
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d100      	bne.n	8001958 <HAL_GPIO_Init+0x28>
 8001956:	e138      	b.n	8001bca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	4013      	ands	r3, r2
 8001960:	2b01      	cmp	r3, #1
 8001962:	d005      	beq.n	8001970 <HAL_GPIO_Init+0x40>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	4013      	ands	r3, r2
 800196c:	2b02      	cmp	r3, #2
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	409a      	lsls	r2, r3
 800197e:	0013      	movs	r3, r2
 8001980:	43da      	mvns	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	2201      	movs	r2, #1
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d017      	beq.n	8001a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d123      	bne.n	8001a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	58d3      	ldr	r3, [r2, r3]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	409a      	lsls	r2, r3
 8001a34:	0013      	movs	r3, r2
 8001a36:	43da      	mvns	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2107      	movs	r1, #7
 8001a46:	400b      	ands	r3, r1
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	6939      	ldr	r1, [r7, #16]
 8001a60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	401a      	ands	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	23c0      	movs	r3, #192	@ 0xc0
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d100      	bne.n	8001aa4 <HAL_GPIO_Init+0x174>
 8001aa2:	e092      	b.n	8001bca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001aa4:	4a50      	ldr	r2, [pc, #320]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3318      	adds	r3, #24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	589b      	ldr	r3, [r3, r2]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	220f      	movs	r2, #15
 8001abc:	409a      	lsls	r2, r3
 8001abe:	0013      	movs	r3, r2
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	23a0      	movs	r3, #160	@ 0xa0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x1ca>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_GPIO_Init+0x2bc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x1c6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a44      	ldr	r2, [pc, #272]	@ (8001bf0 <HAL_GPIO_Init+0x2c0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x1c2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a43      	ldr	r2, [pc, #268]	@ (8001bf4 <HAL_GPIO_Init+0x2c4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x1be>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x1cc>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e004      	b.n	8001afc <HAL_GPIO_Init+0x1cc>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_Init+0x1cc>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x1cc>
 8001afa:	2300      	movs	r3, #0
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	2103      	movs	r1, #3
 8001b00:	400a      	ands	r2, r1
 8001b02:	00d2      	lsls	r2, r2, #3
 8001b04:	4093      	lsls	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b0c:	4936      	ldr	r1, [pc, #216]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3318      	adds	r3, #24
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b1a:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43da      	mvns	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	035b      	lsls	r3, r3, #13
 8001b32:	4013      	ands	r3, r2
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b44:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	039b      	lsls	r3, r3, #14
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b70:	2384      	movs	r3, #132	@ 0x84
 8001b72:	58d3      	ldr	r3, [r2, r3]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b94:	4914      	ldr	r1, [pc, #80]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b96:	2284      	movs	r2, #132	@ 0x84
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b9c:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	58d3      	ldr	r3, [r2, r3]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc2:	4909      	ldr	r1, [pc, #36]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	1e13      	subs	r3, r2, #0
 8001bda:	d000      	beq.n	8001bde <HAL_GPIO_Init+0x2ae>
 8001bdc:	e6b0      	b.n	8001940 <HAL_GPIO_Init+0x10>
  }
}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b006      	add	sp, #24
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021800 	.word	0x40021800
 8001bec:	50000400 	.word	0x50000400
 8001bf0:	50000800 	.word	0x50000800
 8001bf4:	50000c00 	.word	0x50000c00

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	0008      	movs	r0, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	1cbb      	adds	r3, r7, #2
 8001c06:	1c02      	adds	r2, r0, #0
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	1c7b      	adds	r3, r7, #1
 8001c0c:	1c0a      	adds	r2, r1, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c10:	1c7b      	adds	r3, r7, #1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c18:	1cbb      	adds	r3, r7, #2
 8001c1a:	881a      	ldrh	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d11f      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	189b      	adds	r3, r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4912      	ldr	r1, [pc, #72]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fa4c 	bl	8000104 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c72:	e008      	b.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e001      	b.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e009      	b.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	401a      	ands	r2, r3
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d0ed      	beq.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b004      	add	sp, #16
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	fffff9ff 	.word	0xfffff9ff
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	000f4240 	.word	0x000f4240

08001cb4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	23e0      	movs	r3, #224	@ 0xe0
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	4013      	ands	r3, r2
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e2fe      	b.n	80022dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x1e>
 8001ce8:	e07c      	b.n	8001de4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4bc3      	ldr	r3, [pc, #780]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2238      	movs	r2, #56	@ 0x38
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4bc0      	ldr	r3, [pc, #768]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3e>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d10b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	4bb9      	ldr	r3, [pc, #740]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d062      	beq.n	8001de2 <HAL_RCC_OscConfig+0x116>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d15e      	bne.n	8001de2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e2d9      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x78>
 8001d34:	4bb0      	ldr	r3, [pc, #704]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4baf      	ldr	r3, [pc, #700]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2180      	movs	r1, #128	@ 0x80
 8001d3c:	0249      	lsls	r1, r1, #9
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e020      	b.n	8001d86 <HAL_RCC_OscConfig+0xba>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	23a0      	movs	r3, #160	@ 0xa0
 8001d4a:	02db      	lsls	r3, r3, #11
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10e      	bne.n	8001d6e <HAL_RCC_OscConfig+0xa2>
 8001d50:	4ba9      	ldr	r3, [pc, #676]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4ba8      	ldr	r3, [pc, #672]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	02c9      	lsls	r1, r1, #11
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4ba5      	ldr	r3, [pc, #660]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	0249      	lsls	r1, r1, #9
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0xba>
 8001d6e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4ba1      	ldr	r3, [pc, #644]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d74:	49a1      	ldr	r1, [pc, #644]	@ (8001ffc <HAL_RCC_OscConfig+0x330>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d80:	499f      	ldr	r1, [pc, #636]	@ (8002000 <HAL_RCC_OscConfig+0x334>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d014      	beq.n	8001db8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f869 	bl	8000e64 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff f864 	bl	8000e64 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e298      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	4b93      	ldr	r3, [pc, #588]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xcc>
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f854 	bl	8000e64 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f84f 	bl	8000e64 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	@ 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e283      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d100      	bne.n	8001df0 <HAL_RCC_OscConfig+0x124>
 8001dee:	e099      	b.n	8001f24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df0:	4b81      	ldr	r3, [pc, #516]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2238      	movs	r2, #56	@ 0x38
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	4013      	ands	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x144>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d002      	beq.n	8001e16 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d135      	bne.n	8001e82 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e16:	4b78      	ldr	r3, [pc, #480]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x162>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e256      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a74      	ldr	r2, [pc, #464]	@ (8002004 <HAL_RCC_OscConfig+0x338>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	021a      	lsls	r2, r3, #8
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d112      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x33c>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b67      	ldr	r3, [pc, #412]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e5e:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	2207      	movs	r2, #7
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a68      	ldr	r2, [pc, #416]	@ (800200c <HAL_RCC_OscConfig+0x340>)
 8001e6a:	40da      	lsrs	r2, r3
 8001e6c:	4b68      	ldr	r3, [pc, #416]	@ (8002010 <HAL_RCC_OscConfig+0x344>)
 8001e6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <HAL_RCC_OscConfig+0x348>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe ff99 	bl	8000dac <HAL_InitTick>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d051      	beq.n	8001f22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e22c      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d030      	beq.n	8001eec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002008 <HAL_RCC_OscConfig+0x33c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e9e:	4b56      	ldr	r3, [pc, #344]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b55      	ldr	r3, [pc, #340]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	0049      	lsls	r1, r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ffda 	bl	8000e64 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7fe ffd5 	bl	8000e64 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e209      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b48      	ldr	r3, [pc, #288]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a4a      	ldr	r2, [pc, #296]	@ (8002004 <HAL_RCC_OscConfig+0x338>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e01b      	b.n	8001f24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b42      	ldr	r3, [pc, #264]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	4949      	ldr	r1, [pc, #292]	@ (8002018 <HAL_RCC_OscConfig+0x34c>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ffb4 	bl	8000e64 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f02:	f7fe ffaf 	bl	8000e64 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1e3      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x236>
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2208      	movs	r2, #8
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d047      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f2e:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	@ 0x38
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b18      	cmp	r3, #24
 8001f38:	d10a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d03c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d138      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e1c5      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d019      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	430a      	orrs	r2, r1
 8001f62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe ff7e 	bl	8000e64 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ff79 	bl	8000e64 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1ad      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f1      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2a2>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	438a      	bics	r2, r1
 8001f96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe ff64 	bl	8000e64 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7fe ff5f 	bl	8000e64 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e193      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f1      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d100      	bne.n	8001fca <HAL_RCC_OscConfig+0x2fe>
 8001fc8:	e0c6      	b.n	8002158 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	231f      	movs	r3, #31
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2238      	movs	r2, #56	@ 0x38
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d11e      	bne.n	800201c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_RCC_OscConfig+0x31e>
 8001fe8:	e0b6      	b.n	8002158 <HAL_RCC_OscConfig+0x48c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d000      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 8001ff2:	e0b1      	b.n	8002158 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e171      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	fffeffff 	.word	0xfffeffff
 8002000:	fffbffff 	.word	0xfffbffff
 8002004:	ffff80ff 	.word	0xffff80ff
 8002008:	ffffc7ff 	.word	0xffffc7ff
 800200c:	00f42400 	.word	0x00f42400
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004
 8002018:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201c:	4bb1      	ldr	r3, [pc, #708]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800201e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	4013      	ands	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x360>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x362>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d011      	beq.n	8002056 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4bac      	ldr	r3, [pc, #688]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002036:	4bab      	ldr	r3, [pc, #684]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	430a      	orrs	r2, r1
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002040:	4ba8      	ldr	r3, [pc, #672]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800204e:	231f      	movs	r3, #31
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4ba4      	ldr	r3, [pc, #656]	@ (80022e8 <HAL_RCC_OscConfig+0x61c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d11a      	bne.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002062:	4ba1      	ldr	r3, [pc, #644]	@ (80022e8 <HAL_RCC_OscConfig+0x61c>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4ba0      	ldr	r3, [pc, #640]	@ (80022e8 <HAL_RCC_OscConfig+0x61c>)
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0049      	lsls	r1, r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002070:	f7fe fef8 	bl	8000e64 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe fef3 	bl	8000e64 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e127      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	4b96      	ldr	r3, [pc, #600]	@ (80022e8 <HAL_RCC_OscConfig+0x61c>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x3e2>
 80020a0:	4b90      	ldr	r3, [pc, #576]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020a4:	4b8f      	ldr	r3, [pc, #572]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	430a      	orrs	r2, r1
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x404>
 80020b6:	4b8b      	ldr	r3, [pc, #556]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ba:	4b8a      	ldr	r3, [pc, #552]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020bc:	2104      	movs	r1, #4
 80020be:	430a      	orrs	r2, r1
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020c2:	4b88      	ldr	r3, [pc, #544]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020c6:	4b87      	ldr	r3, [pc, #540]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
 80020d0:	4b84      	ldr	r3, [pc, #528]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020d4:	4b83      	ldr	r3, [pc, #524]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020dc:	4b81      	ldr	r3, [pc, #516]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020e0:	4b80      	ldr	r3, [pc, #512]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80020e2:	2104      	movs	r1, #4
 80020e4:	438a      	bics	r2, r1
 80020e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d014      	beq.n	800211a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe feb8 	bl	8000e64 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e009      	b.n	800210e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe feb3 	bl	8000e64 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a79      	ldr	r2, [pc, #484]	@ (80022ec <HAL_RCC_OscConfig+0x620>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0e6      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210e:	4b75      	ldr	r3, [pc, #468]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x42e>
 8002118:	e013      	b.n	8002142 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fea3 	bl	8000e64 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002122:	e009      	b.n	8002138 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fe9e 	bl	8000e64 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	4a6f      	ldr	r2, [pc, #444]	@ (80022ec <HAL_RCC_OscConfig+0x620>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0d1      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002138:	4b6a      	ldr	r3, [pc, #424]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800213a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002142:	231f      	movs	r3, #31
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b65      	ldr	r3, [pc, #404]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800214e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002150:	4b64      	ldr	r3, [pc, #400]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002152:	4967      	ldr	r1, [pc, #412]	@ (80022f0 <HAL_RCC_OscConfig+0x624>)
 8002154:	400a      	ands	r2, r1
 8002156:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x496>
 8002160:	e0bb      	b.n	80022da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002162:	4b60      	ldr	r3, [pc, #384]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2238      	movs	r2, #56	@ 0x38
 8002168:	4013      	ands	r3, r2
 800216a:	2b10      	cmp	r3, #16
 800216c:	d100      	bne.n	8002170 <HAL_RCC_OscConfig+0x4a4>
 800216e:	e07b      	b.n	8002268 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d156      	bne.n	8002226 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b5a      	ldr	r3, [pc, #360]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b59      	ldr	r3, [pc, #356]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800217e:	495d      	ldr	r1, [pc, #372]	@ (80022f4 <HAL_RCC_OscConfig+0x628>)
 8002180:	400a      	ands	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fe6e 	bl	8000e64 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fe69 	bl	8000e64 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e09d      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	049b      	lsls	r3, r3, #18
 80021a8:	4013      	ands	r3, r2
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a51      	ldr	r2, [pc, #324]	@ (80022f8 <HAL_RCC_OscConfig+0x62c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	431a      	orrs	r2, r3
 80021da:	4b42      	ldr	r3, [pc, #264]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b40      	ldr	r3, [pc, #256]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b3f      	ldr	r3, [pc, #252]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021e6:	2180      	movs	r1, #128	@ 0x80
 80021e8:	0449      	lsls	r1, r1, #17
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021ee:	4b3d      	ldr	r3, [pc, #244]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b3c      	ldr	r3, [pc, #240]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	0549      	lsls	r1, r1, #21
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe32 	bl	8000e64 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fe2d 	bl	8000e64 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e061      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002218:	4b32      	ldr	r3, [pc, #200]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	049b      	lsls	r3, r3, #18
 8002220:	4013      	ands	r3, r2
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x53a>
 8002224:	e059      	b.n	80022da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b2f      	ldr	r3, [pc, #188]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b2e      	ldr	r3, [pc, #184]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800222c:	4931      	ldr	r1, [pc, #196]	@ (80022f4 <HAL_RCC_OscConfig+0x628>)
 800222e:	400a      	ands	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fe17 	bl	8000e64 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fe12 	bl	8000e64 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	049b      	lsls	r3, r3, #18
 8002256:	4013      	ands	r3, r2
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800225a:	4b22      	ldr	r3, [pc, #136]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002260:	4926      	ldr	r1, [pc, #152]	@ (80022fc <HAL_RCC_OscConfig+0x630>)
 8002262:	400a      	ands	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	e038      	b.n	80022da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e033      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2203      	movs	r2, #3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	429a      	cmp	r2, r3
 8002286:	d126      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2270      	movs	r2, #112	@ 0x70
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d11f      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	23fe      	movs	r3, #254	@ 0xfe
 800229a:	01db      	lsls	r3, r3, #7
 800229c:	401a      	ands	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d116      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	23f8      	movs	r3, #248	@ 0xf8
 80022ac:	039b      	lsls	r3, r3, #14
 80022ae:	401a      	ands	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10e      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	23e0      	movs	r3, #224	@ 0xe0
 80022bc:	051b      	lsls	r3, r3, #20
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	0f5b      	lsrs	r3, r3, #29
 80022cc:	075a      	lsls	r2, r3, #29
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b008      	add	sp, #32
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	00001388 	.word	0x00001388
 80022f0:	efffffff 	.word	0xefffffff
 80022f4:	feffffff 	.word	0xfeffffff
 80022f8:	11c1808c 	.word	0x11c1808c
 80022fc:	eefefffc 	.word	0xeefefffc

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0e9      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2207      	movs	r2, #7
 800231a:	4013      	ands	r3, r2
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d91e      	bls.n	8002360 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b73      	ldr	r3, [pc, #460]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2207      	movs	r2, #7
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	4b70      	ldr	r3, [pc, #448]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002334:	f7fe fd96 	bl	8000e64 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800233c:	e009      	b.n	8002352 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233e:	f7fe fd91 	bl	8000e64 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	4a6a      	ldr	r2, [pc, #424]	@ (80024f4 <HAL_RCC_ClockConfig+0x1f4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0ca      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002352:	4b67      	ldr	r3, [pc, #412]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2207      	movs	r2, #7
 8002358:	4013      	ands	r3, r2
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2202      	movs	r2, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d015      	beq.n	8002396 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2204      	movs	r2, #4
 8002370:	4013      	ands	r3, r2
 8002372:	d006      	beq.n	8002382 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002374:	4b60      	ldr	r3, [pc, #384]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	4b5f      	ldr	r3, [pc, #380]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	21e0      	movs	r1, #224	@ 0xe0
 800237c:	01c9      	lsls	r1, r1, #7
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	4b5d      	ldr	r3, [pc, #372]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a5d      	ldr	r2, [pc, #372]	@ (80024fc <HAL_RCC_ClockConfig+0x1fc>)
 8002388:	4013      	ands	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d057      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a8:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	4013      	ands	r3, r2
 80023b2:	d12b      	bne.n	800240c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e097      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c0:	4b4d      	ldr	r3, [pc, #308]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	049b      	lsls	r3, r3, #18
 80023c8:	4013      	ands	r3, r2
 80023ca:	d11f      	bne.n	800240c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e08b      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4013      	ands	r3, r2
 80023e2:	d113      	bne.n	800240c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e07f      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f0:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d108      	bne.n	800240c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e074      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fe:	4b3e      	ldr	r3, [pc, #248]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	2202      	movs	r2, #2
 8002404:	4013      	ands	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e06d      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240c:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2207      	movs	r2, #7
 8002412:	4393      	bics	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002420:	f7fe fd20 	bl	8000e64 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	e009      	b.n	800243e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f7fe fd1b 	bl	8000e64 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a2f      	ldr	r2, [pc, #188]	@ (80024f4 <HAL_RCC_ClockConfig+0x1f4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e054      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2e      	ldr	r3, [pc, #184]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2238      	movs	r2, #56	@ 0x38
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	429a      	cmp	r2, r3
 800244e:	d1ec      	bne.n	800242a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2207      	movs	r2, #7
 8002456:	4013      	ands	r3, r2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d21e      	bcs.n	800249c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2207      	movs	r2, #7
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002470:	f7fe fcf8 	bl	8000e64 <HAL_GetTick>
 8002474:	0003      	movs	r3, r0
 8002476:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002478:	e009      	b.n	800248e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7fe fcf3 	bl	8000e64 <HAL_GetTick>
 800247e:	0002      	movs	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4a1b      	ldr	r2, [pc, #108]	@ (80024f4 <HAL_RCC_ClockConfig+0x1f4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e02c      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2207      	movs	r2, #7
 8002494:	4013      	ands	r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024a6:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4a15      	ldr	r2, [pc, #84]	@ (8002500 <HAL_RCC_ClockConfig+0x200>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024ba:	f000 f829 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024be:	0001      	movs	r1, r0
 80024c0:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	220f      	movs	r2, #15
 80024c8:	401a      	ands	r2, r3
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x204>)
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	58d3      	ldr	r3, [r2, r3]
 80024d0:	221f      	movs	r2, #31
 80024d2:	4013      	ands	r3, r2
 80024d4:	000a      	movs	r2, r1
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_ClockConfig+0x208>)
 80024da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HAL_RCC_ClockConfig+0x20c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe fc63 	bl	8000dac <HAL_InitTick>
 80024e6:	0003      	movs	r3, r0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40022000 	.word	0x40022000
 80024f4:	00001388 	.word	0x00001388
 80024f8:	40021000 	.word	0x40021000
 80024fc:	fffff0ff 	.word	0xfffff0ff
 8002500:	ffff8fff 	.word	0xffff8fff
 8002504:	080044f8 	.word	0x080044f8
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002516:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2238      	movs	r2, #56	@ 0x38
 800251c:	4013      	ands	r3, r2
 800251e:	d10f      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002520:	4b39      	ldr	r3, [pc, #228]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0adb      	lsrs	r3, r3, #11
 8002526:	2207      	movs	r2, #7
 8002528:	4013      	ands	r3, r2
 800252a:	2201      	movs	r2, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	0013      	movs	r3, r2
 8002530:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	4835      	ldr	r0, [pc, #212]	@ (800260c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002536:	f7fd fde5 	bl	8000104 <__udivsi3>
 800253a:	0003      	movs	r3, r0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	e05d      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2238      	movs	r2, #56	@ 0x38
 8002546:	4013      	ands	r3, r2
 8002548:	2b08      	cmp	r3, #8
 800254a:	d102      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800254c:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x100>)
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e054      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002552:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2238      	movs	r2, #56	@ 0x38
 8002558:	4013      	ands	r3, r2
 800255a:	2b10      	cmp	r3, #16
 800255c:	d138      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2203      	movs	r2, #3
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002568:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	2207      	movs	r2, #7
 8002570:	4013      	ands	r3, r2
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d10d      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4824      	ldr	r0, [pc, #144]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x100>)
 8002580:	f7fd fdc0 	bl	8000104 <__udivsi3>
 8002584:	0003      	movs	r3, r0
 8002586:	0019      	movs	r1, r3
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	227f      	movs	r2, #127	@ 0x7f
 8002590:	4013      	ands	r3, r2
 8002592:	434b      	muls	r3, r1
 8002594:	617b      	str	r3, [r7, #20]
        break;
 8002596:	e00d      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	481c      	ldr	r0, [pc, #112]	@ (800260c <HAL_RCC_GetSysClockFreq+0xfc>)
 800259c:	f7fd fdb2 	bl	8000104 <__udivsi3>
 80025a0:	0003      	movs	r3, r0
 80025a2:	0019      	movs	r1, r3
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	227f      	movs	r2, #127	@ 0x7f
 80025ac:	4013      	ands	r3, r2
 80025ae:	434b      	muls	r3, r1
 80025b0:	617b      	str	r3, [r7, #20]
        break;
 80025b2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0f5b      	lsrs	r3, r3, #29
 80025ba:	2207      	movs	r2, #7
 80025bc:	4013      	ands	r3, r2
 80025be:	3301      	adds	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	6978      	ldr	r0, [r7, #20]
 80025c6:	f7fd fd9d 	bl	8000104 <__udivsi3>
 80025ca:	0003      	movs	r3, r0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e015      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2238      	movs	r2, #56	@ 0x38
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d103      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2238      	movs	r2, #56	@ 0x38
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b18      	cmp	r3, #24
 80025ee:	d103      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025f0:	23fa      	movs	r3, #250	@ 0xfa
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e001      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025fc:	693b      	ldr	r3, [r7, #16]
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b006      	add	sp, #24
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	40021000 	.word	0x40021000
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b02      	ldr	r3, [pc, #8]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800262c:	f7ff fff2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002630:	0004      	movs	r4, r0
 8002632:	f7ff fb3f 	bl	8001cb4 <LL_RCC_GetAPB1Prescaler>
 8002636:	0003      	movs	r3, r0
 8002638:	0b1a      	lsrs	r2, r3, #12
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	58d3      	ldr	r3, [r2, r3]
 8002640:	221f      	movs	r2, #31
 8002642:	4013      	ands	r3, r2
 8002644:	40dc      	lsrs	r4, r3
 8002646:	0023      	movs	r3, r4
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	08004538 	.word	0x08004538

08002654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e04a      	b.n	80026fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223d      	movs	r2, #61	@ 0x3d
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223c      	movs	r2, #60	@ 0x3c
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f7fe fa33 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	223d      	movs	r2, #61	@ 0x3d
 8002686:	2102      	movs	r1, #2
 8002688:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	0019      	movs	r1, r3
 8002694:	0010      	movs	r0, r2
 8002696:	f000 fbff 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2248      	movs	r2, #72	@ 0x48
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	223e      	movs	r2, #62	@ 0x3e
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	223f      	movs	r2, #63	@ 0x3f
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2240      	movs	r2, #64	@ 0x40
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2241      	movs	r2, #65	@ 0x41
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2242      	movs	r2, #66	@ 0x42
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2243      	movs	r2, #67	@ 0x43
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2244      	movs	r2, #68	@ 0x44
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2245      	movs	r2, #69	@ 0x45
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2246      	movs	r2, #70	@ 0x46
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2247      	movs	r2, #71	@ 0x47
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223d      	movs	r2, #61	@ 0x3d
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e04a      	b.n	80027ac <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	223d      	movs	r2, #61	@ 0x3d
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	223c      	movs	r2, #60	@ 0x3c
 8002726:	2100      	movs	r1, #0
 8002728:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f841 	bl	80027b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	223d      	movs	r2, #61	@ 0x3d
 8002736:	2102      	movs	r1, #2
 8002738:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	0019      	movs	r1, r3
 8002744:	0010      	movs	r0, r2
 8002746:	f000 fba7 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2248      	movs	r2, #72	@ 0x48
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223e      	movs	r2, #62	@ 0x3e
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	223f      	movs	r2, #63	@ 0x3f
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2240      	movs	r2, #64	@ 0x40
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2241      	movs	r2, #65	@ 0x41
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2242      	movs	r2, #66	@ 0x42
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2243      	movs	r2, #67	@ 0x43
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2244      	movs	r2, #68	@ 0x44
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2245      	movs	r2, #69	@ 0x45
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2246      	movs	r2, #70	@ 0x46
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2247      	movs	r2, #71	@ 0x47
 800279e:	2101      	movs	r1, #1
 80027a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	223d      	movs	r2, #61	@ 0x3d
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e04a      	b.n	800286c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	@ 0x3d
 80027da:	5c9b      	ldrb	r3, [r3, r2]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	223c      	movs	r2, #60	@ 0x3c
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f841 	bl	8002874 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	223d      	movs	r2, #61	@ 0x3d
 80027f6:	2102      	movs	r1, #2
 80027f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f000 fb47 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2248      	movs	r2, #72	@ 0x48
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223e      	movs	r2, #62	@ 0x3e
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223f      	movs	r2, #63	@ 0x3f
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2240      	movs	r2, #64	@ 0x40
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2241      	movs	r2, #65	@ 0x41
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2242      	movs	r2, #66	@ 0x42
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2243      	movs	r2, #67	@ 0x43
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2244      	movs	r2, #68	@ 0x44
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2245      	movs	r2, #69	@ 0x45
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2246      	movs	r2, #70	@ 0x46
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2247      	movs	r2, #71	@ 0x47
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223d      	movs	r2, #61	@ 0x3d
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2202      	movs	r2, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d021      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2202      	movs	r2, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d01d      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2203      	movs	r2, #3
 80028b2:	4252      	negs	r2, r2
 80028b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2203      	movs	r2, #3
 80028c4:	4013      	ands	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 facc 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e007      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 fabf 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 facb 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2204      	movs	r2, #4
 80028ec:	4013      	ands	r3, r2
 80028ee:	d022      	beq.n	8002936 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2204      	movs	r2, #4
 80028f4:	4013      	ands	r3, r2
 80028f6:	d01e      	beq.n	8002936 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2205      	movs	r2, #5
 80028fe:	4252      	negs	r2, r2
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	23c0      	movs	r3, #192	@ 0xc0
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 faa5 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 800291e:	e007      	b.n	8002930 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 fa98 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 faa4 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2208      	movs	r2, #8
 800293a:	4013      	ands	r3, r2
 800293c:	d021      	beq.n	8002982 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2208      	movs	r2, #8
 8002942:	4013      	ands	r3, r2
 8002944:	d01d      	beq.n	8002982 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2209      	movs	r2, #9
 800294c:	4252      	negs	r2, r2
 800294e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2203      	movs	r2, #3
 800295e:	4013      	ands	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 fa7f 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 800296a:	e007      	b.n	800297c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 fa72 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fa7e 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2210      	movs	r2, #16
 8002986:	4013      	ands	r3, r2
 8002988:	d022      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2210      	movs	r2, #16
 800298e:	4013      	ands	r3, r2
 8002990:	d01e      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2211      	movs	r2, #17
 8002998:	4252      	negs	r2, r2
 800299a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2208      	movs	r2, #8
 80029a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	23c0      	movs	r3, #192	@ 0xc0
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fa58 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e007      	b.n	80029ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 fa4b 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 fa57 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	d00c      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	d008      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2202      	movs	r2, #2
 80029e6:	4252      	negs	r2, r2
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fa2b 	bl	8002e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2280      	movs	r2, #128	@ 0x80
 80029f6:	4013      	ands	r3, r2
 80029f8:	d104      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	019b      	lsls	r3, r3, #6
 8002a00:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a02:	d00b      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2280      	movs	r2, #128	@ 0x80
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1e      	ldr	r2, [pc, #120]	@ (8002a8c <HAL_TIM_IRQHandler+0x208>)
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f001 f824 	bl	8003a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a17      	ldr	r2, [pc, #92]	@ (8002a90 <HAL_TIM_IRQHandler+0x20c>)
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 f81b 	bl	8003a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2240      	movs	r2, #64	@ 0x40
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2240      	movs	r2, #64	@ 0x40
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d008      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2241      	movs	r2, #65	@ 0x41
 8002a54:	4252      	negs	r2, r2
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fa14 	bl	8002e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2220      	movs	r2, #32
 8002a64:	4013      	ands	r3, r2
 8002a66:	d00c      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d008      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2221      	movs	r2, #33	@ 0x21
 8002a76:	4252      	negs	r2, r2
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 ffe9 	bl	8003a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	ffffdf7f 	.word	0xffffdf7f
 8002a90:	fffffeff 	.word	0xfffffeff

08002a94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2317      	movs	r3, #23
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	223c      	movs	r2, #60	@ 0x3c
 8002aac:	5c9b      	ldrb	r3, [r3, r2]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_OC_ConfigChannel+0x22>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e048      	b.n	8002b48 <HAL_TIM_OC_ConfigChannel+0xb4>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	223c      	movs	r2, #60	@ 0x3c
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b14      	cmp	r3, #20
 8002ac2:	d835      	bhi.n	8002b30 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002aca:	18d3      	adds	r3, r2, r3
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fa61 	bl	8002fa0 <TIM_OC1_SetConfig>
      break;
 8002ade:	e02c      	b.n	8002b3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fad9 	bl	80030a0 <TIM_OC2_SetConfig>
      break;
 8002aee:	e024      	b.n	8002b3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 fb4f 	bl	800319c <TIM_OC3_SetConfig>
      break;
 8002afe:	e01c      	b.n	8002b3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	0011      	movs	r1, r2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 fbc9 	bl	80032a0 <TIM_OC4_SetConfig>
      break;
 8002b0e:	e014      	b.n	8002b3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	0011      	movs	r1, r2
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fc25 	bl	8003368 <TIM_OC5_SetConfig>
      break;
 8002b1e:	e00c      	b.n	8002b3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fc77 	bl	800341c <TIM_OC6_SetConfig>
      break;
 8002b2e:	e004      	b.n	8002b3a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002b30:	2317      	movs	r3, #23
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
      break;
 8002b38:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	223c      	movs	r2, #60	@ 0x3c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

  return status;
 8002b42:	2317      	movs	r3, #23
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08004558 	.word	0x08004558

08002b54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2317      	movs	r3, #23
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	223c      	movs	r2, #60	@ 0x3c
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_IC_ConfigChannel+0x22>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e08c      	b.n	8002c90 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	223c      	movs	r2, #60	@ 0x3c
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002b94:	f000 fca0 	bl	80034d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	210c      	movs	r1, #12
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	619a      	str	r2, [r3, #24]
 8002bba:	e062      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d11c      	bne.n	8002bfc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002bd2:	f000 fd05 	bl	80035e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	492d      	ldr	r1, [pc, #180]	@ (8002c98 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6999      	ldr	r1, [r3, #24]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e042      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11b      	bne.n	8002c3a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c12:	f000 fd59 	bl	80036c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	210c      	movs	r1, #12
 8002c22:	438a      	bics	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
 8002c38:	e023      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d11c      	bne.n	8002c7a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002c50:	f000 fd7a 	bl	8003748 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	490e      	ldr	r1, [pc, #56]	@ (8002c98 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69d9      	ldr	r1, [r3, #28]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	61da      	str	r2, [r3, #28]
 8002c78:	e003      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002c7a:	2317      	movs	r3, #23
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	223c      	movs	r2, #60	@ 0x3c
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

  return status;
 8002c8a:	2317      	movs	r3, #23
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b006      	add	sp, #24
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffff3ff 	.word	0xfffff3ff

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	230f      	movs	r3, #15
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223c      	movs	r2, #60	@ 0x3c
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_ConfigClockSource+0x20>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e0bc      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x19a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223c      	movs	r2, #60	@ 0x3c
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	223d      	movs	r2, #61	@ 0x3d
 8002cc8:	2102      	movs	r1, #2
 8002cca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4a59      	ldr	r2, [pc, #356]	@ (8002e44 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2280      	movs	r2, #128	@ 0x80
 8002cf2:	0192      	lsls	r2, r2, #6
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d040      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0xde>
 8002cf8:	2280      	movs	r2, #128	@ 0x80
 8002cfa:	0192      	lsls	r2, r2, #6
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d900      	bls.n	8002d02 <HAL_TIM_ConfigClockSource+0x66>
 8002d00:	e088      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	0152      	lsls	r2, r2, #5
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d100      	bne.n	8002d0c <HAL_TIM_ConfigClockSource+0x70>
 8002d0a:	e088      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x182>
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	0152      	lsls	r2, r2, #5
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d900      	bls.n	8002d16 <HAL_TIM_ConfigClockSource+0x7a>
 8002d14:	e07e      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d16:	2b70      	cmp	r3, #112	@ 0x70
 8002d18:	d018      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0xb0>
 8002d1a:	d900      	bls.n	8002d1e <HAL_TIM_ConfigClockSource+0x82>
 8002d1c:	e07a      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d1e:	2b60      	cmp	r3, #96	@ 0x60
 8002d20:	d04f      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x126>
 8002d22:	d900      	bls.n	8002d26 <HAL_TIM_ConfigClockSource+0x8a>
 8002d24:	e076      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d26:	2b50      	cmp	r3, #80	@ 0x50
 8002d28:	d03b      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x106>
 8002d2a:	d900      	bls.n	8002d2e <HAL_TIM_ConfigClockSource+0x92>
 8002d2c:	e072      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d2e:	2b40      	cmp	r3, #64	@ 0x40
 8002d30:	d057      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x146>
 8002d32:	d900      	bls.n	8002d36 <HAL_TIM_ConfigClockSource+0x9a>
 8002d34:	e06e      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d36:	2b30      	cmp	r3, #48	@ 0x30
 8002d38:	d063      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x166>
 8002d3a:	d86b      	bhi.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d060      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x166>
 8002d40:	d868      	bhi.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05d      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x166>
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d05b      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x166>
 8002d4a:	e063      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	f000 fd56 	bl	800380c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2277      	movs	r2, #119	@ 0x77
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
      break;
 8002d78:	e052      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	f000 fd3f 	bl	800380c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2180      	movs	r1, #128	@ 0x80
 8002d9a:	01c9      	lsls	r1, r1, #7
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
      break;
 8002da0:	e03e      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dae:	001a      	movs	r2, r3
 8002db0:	f000 fbe8 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2150      	movs	r1, #80	@ 0x50
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fd0a 	bl	80037d4 <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e02e      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dce:	001a      	movs	r2, r3
 8002dd0:	f000 fc48 	bl	8003664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2160      	movs	r1, #96	@ 0x60
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 fcfa 	bl	80037d4 <TIM_ITRx_SetConfig>
      break;
 8002de0:	e01e      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	001a      	movs	r2, r3
 8002df0:	f000 fbc8 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2140      	movs	r1, #64	@ 0x40
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fcea 	bl	80037d4 <TIM_ITRx_SetConfig>
      break;
 8002e00:	e00e      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	f000 fce1 	bl	80037d4 <TIM_ITRx_SetConfig>
      break;
 8002e12:	e005      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e14:	230f      	movs	r3, #15
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
      break;
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	223d      	movs	r2, #61	@ 0x3d
 8002e24:	2101      	movs	r1, #1
 8002e26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	223c      	movs	r2, #60	@ 0x3c
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

  return status;
 8002e30:	230f      	movs	r3, #15
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	781b      	ldrb	r3, [r3, #0]
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b004      	add	sp, #16
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	ffceff88 	.word	0xffceff88
 8002e44:	ffff00ff 	.word	0xffff00ff

08002e48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e90:	46c0      	nop			@ (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a37      	ldr	r2, [pc, #220]	@ (8002f88 <TIM_Base_SetConfig+0xf0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d008      	beq.n	8002ec2 <TIM_Base_SetConfig+0x2a>
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	05db      	lsls	r3, r3, #23
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d003      	beq.n	8002ec2 <TIM_Base_SetConfig+0x2a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a33      	ldr	r2, [pc, #204]	@ (8002f8c <TIM_Base_SetConfig+0xf4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2270      	movs	r2, #112	@ 0x70
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f88 <TIM_Base_SetConfig+0xf0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d014      	beq.n	8002f06 <TIM_Base_SetConfig+0x6e>
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x6e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <TIM_Base_SetConfig+0xf4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x6e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <TIM_Base_SetConfig+0xf8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x6e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	@ (8002f94 <TIM_Base_SetConfig+0xfc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x6e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a25      	ldr	r2, [pc, #148]	@ (8002f98 <TIM_Base_SetConfig+0x100>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a24      	ldr	r2, [pc, #144]	@ (8002f9c <TIM_Base_SetConfig+0x104>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	001a      	movs	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <TIM_Base_SetConfig+0xf0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0xbe>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <TIM_Base_SetConfig+0xfc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0xbe>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <TIM_Base_SetConfig+0x100>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d103      	bne.n	8002f5e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4393      	bics	r3, r2
 8002f78:	001a      	movs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	611a      	str	r2, [r3, #16]
  }
}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40002000 	.word	0x40002000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800
 8002f9c:	fffffcff 	.word	0xfffffcff

08002fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4393      	bics	r3, r2
 8002fb8:	001a      	movs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8003088 <TIM_OC1_SetConfig+0xe8>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	4393      	bics	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	@ (800308c <TIM_OC1_SetConfig+0xec>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_OC1_SetConfig+0x6e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <TIM_OC1_SetConfig+0xf0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_OC1_SetConfig+0x6e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <TIM_OC1_SetConfig+0xf4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10c      	bne.n	8003028 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2208      	movs	r2, #8
 8003012:	4393      	bics	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2204      	movs	r2, #4
 8003024:	4393      	bics	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a18      	ldr	r2, [pc, #96]	@ (800308c <TIM_OC1_SetConfig+0xec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <TIM_OC1_SetConfig+0xa0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <TIM_OC1_SetConfig+0xf0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <TIM_OC1_SetConfig+0xa0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <TIM_OC1_SetConfig+0xf4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d111      	bne.n	8003064 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <TIM_OC1_SetConfig+0xf8>)
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4a14      	ldr	r2, [pc, #80]	@ (800309c <TIM_OC1_SetConfig+0xfc>)
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b006      	add	sp, #24
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	fffeff8f 	.word	0xfffeff8f
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014400 	.word	0x40014400
 8003094:	40014800 	.word	0x40014800
 8003098:	fffffeff 	.word	0xfffffeff
 800309c:	fffffdff 	.word	0xfffffdff

080030a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	2210      	movs	r2, #16
 80030b6:	4393      	bics	r3, r2
 80030b8:	001a      	movs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003180 <TIM_OC2_SetConfig+0xe0>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <TIM_OC2_SetConfig+0xe4>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2220      	movs	r2, #32
 80030ea:	4393      	bics	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <TIM_OC2_SetConfig+0xe8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	4393      	bics	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2240      	movs	r2, #64	@ 0x40
 800311a:	4393      	bics	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a19      	ldr	r2, [pc, #100]	@ (8003188 <TIM_OC2_SetConfig+0xe8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_OC2_SetConfig+0x96>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a18      	ldr	r2, [pc, #96]	@ (800318c <TIM_OC2_SetConfig+0xec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC2_SetConfig+0x96>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <TIM_OC2_SetConfig+0xf0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4a16      	ldr	r2, [pc, #88]	@ (8003194 <TIM_OC2_SetConfig+0xf4>)
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <TIM_OC2_SetConfig+0xf8>)
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	46c0      	nop			@ (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b006      	add	sp, #24
 800317e:	bd80      	pop	{r7, pc}
 8003180:	feff8fff 	.word	0xfeff8fff
 8003184:	fffffcff 	.word	0xfffffcff
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800
 8003194:	fffffbff 	.word	0xfffffbff
 8003198:	fffff7ff 	.word	0xfffff7ff

0800319c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a31      	ldr	r2, [pc, #196]	@ (8003278 <TIM_OC3_SetConfig+0xdc>)
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a2d      	ldr	r2, [pc, #180]	@ (800327c <TIM_OC3_SetConfig+0xe0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2203      	movs	r2, #3
 80031d0:	4393      	bics	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <TIM_OC3_SetConfig+0xe4>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a23      	ldr	r2, [pc, #140]	@ (8003284 <TIM_OC3_SetConfig+0xe8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <TIM_OC3_SetConfig+0xec>)
 80031fe:	4013      	ands	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <TIM_OC3_SetConfig+0xf0>)
 8003212:	4013      	ands	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <TIM_OC3_SetConfig+0xe8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC3_SetConfig+0x92>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <TIM_OC3_SetConfig+0xf4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC3_SetConfig+0x92>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1a      	ldr	r2, [pc, #104]	@ (8003294 <TIM_OC3_SetConfig+0xf8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d113      	bne.n	8003256 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <TIM_OC3_SetConfig+0xfc>)
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4a18      	ldr	r2, [pc, #96]	@ (800329c <TIM_OC3_SetConfig+0x100>)
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b006      	add	sp, #24
 8003276:	bd80      	pop	{r7, pc}
 8003278:	fffffeff 	.word	0xfffffeff
 800327c:	fffeff8f 	.word	0xfffeff8f
 8003280:	fffffdff 	.word	0xfffffdff
 8003284:	40012c00 	.word	0x40012c00
 8003288:	fffff7ff 	.word	0xfffff7ff
 800328c:	fffffbff 	.word	0xfffffbff
 8003290:	40014400 	.word	0x40014400
 8003294:	40014800 	.word	0x40014800
 8003298:	ffffefff 	.word	0xffffefff
 800329c:	ffffdfff 	.word	0xffffdfff

080032a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a24      	ldr	r2, [pc, #144]	@ (8003348 <TIM_OC4_SetConfig+0xa8>)
 80032b6:	401a      	ands	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a20      	ldr	r2, [pc, #128]	@ (800334c <TIM_OC4_SetConfig+0xac>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <TIM_OC4_SetConfig+0xb0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003354 <TIM_OC4_SetConfig+0xb4>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	031b      	lsls	r3, r3, #12
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <TIM_OC4_SetConfig+0xb8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_OC4_SetConfig+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <TIM_OC4_SetConfig+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_OC4_SetConfig+0x70>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <TIM_OC4_SetConfig+0xc0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d109      	bne.n	8003324 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <TIM_OC4_SetConfig+0xc4>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b006      	add	sp, #24
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	ffffefff 	.word	0xffffefff
 800334c:	feff8fff 	.word	0xfeff8fff
 8003350:	fffffcff 	.word	0xfffffcff
 8003354:	ffffdfff 	.word	0xffffdfff
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800
 8003364:	ffffbfff 	.word	0xffffbfff

08003368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a21      	ldr	r2, [pc, #132]	@ (8003404 <TIM_OC5_SetConfig+0x9c>)
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <TIM_OC5_SetConfig+0xa0>)
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4a19      	ldr	r2, [pc, #100]	@ (800340c <TIM_OC5_SetConfig+0xa4>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a15      	ldr	r2, [pc, #84]	@ (8003410 <TIM_OC5_SetConfig+0xa8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_OC5_SetConfig+0x66>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a14      	ldr	r2, [pc, #80]	@ (8003414 <TIM_OC5_SetConfig+0xac>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_OC5_SetConfig+0x66>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a13      	ldr	r2, [pc, #76]	@ (8003418 <TIM_OC5_SetConfig+0xb0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d109      	bne.n	80033e2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003404 <TIM_OC5_SetConfig+0x9c>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	621a      	str	r2, [r3, #32]
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b006      	add	sp, #24
 8003402:	bd80      	pop	{r7, pc}
 8003404:	fffeffff 	.word	0xfffeffff
 8003408:	fffeff8f 	.word	0xfffeff8f
 800340c:	fffdffff 	.word	0xfffdffff
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800

0800341c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a22      	ldr	r2, [pc, #136]	@ (80034bc <TIM_OC6_SetConfig+0xa0>)
 8003432:	401a      	ands	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <TIM_OC6_SetConfig+0xa4>)
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <TIM_OC6_SetConfig+0xa8>)
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	051b      	lsls	r3, r3, #20
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a16      	ldr	r2, [pc, #88]	@ (80034c8 <TIM_OC6_SetConfig+0xac>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_OC6_SetConfig+0x68>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <TIM_OC6_SetConfig+0xb0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC6_SetConfig+0x68>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <TIM_OC6_SetConfig+0xb4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <TIM_OC6_SetConfig+0xb8>)
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b006      	add	sp, #24
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	ffefffff 	.word	0xffefffff
 80034c0:	feff8fff 	.word	0xfeff8fff
 80034c4:	ffdfffff 	.word	0xffdfffff
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800
 80034d4:	fffbffff 	.word	0xfffbffff

080034d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4393      	bics	r3, r2
 80034f4:	001a      	movs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a1e      	ldr	r2, [pc, #120]	@ (800357c <TIM_TI1_SetConfig+0xa4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d008      	beq.n	800351a <TIM_TI1_SetConfig+0x42>
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	05db      	lsls	r3, r3, #23
 800350e:	429a      	cmp	r2, r3
 8003510:	d003      	beq.n	800351a <TIM_TI1_SetConfig+0x42>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <TIM_TI1_SetConfig+0xa8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <TIM_TI1_SetConfig+0x46>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <TIM_TI1_SetConfig+0x48>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2203      	movs	r2, #3
 8003528:	4393      	bics	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e003      	b.n	800353e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2201      	movs	r2, #1
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	22f0      	movs	r2, #240	@ 0xf0
 8003542:	4393      	bics	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	22ff      	movs	r2, #255	@ 0xff
 800354c:	4013      	ands	r3, r2
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	220a      	movs	r2, #10
 8003558:	4393      	bics	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	220a      	movs	r2, #10
 8003560:	4013      	ands	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	621a      	str	r2, [r3, #32]
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b006      	add	sp, #24
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	2201      	movs	r2, #1
 800359c:	4393      	bics	r3, r2
 800359e:	001a      	movs	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	22f0      	movs	r2, #240	@ 0xf0
 80035ae:	4393      	bics	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	220a      	movs	r2, #10
 80035c0:	4393      	bics	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}

080035e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	2210      	movs	r2, #16
 80035fa:	4393      	bics	r3, r2
 80035fc:	001a      	movs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4a14      	ldr	r2, [pc, #80]	@ (800365c <TIM_TI2_SetConfig+0x7c>)
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <TIM_TI2_SetConfig+0x80>)
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	22a0      	movs	r2, #160	@ 0xa0
 8003634:	4393      	bics	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	22a0      	movs	r2, #160	@ 0xa0
 800363e:	4013      	ands	r3, r2
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b006      	add	sp, #24
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	fffffcff 	.word	0xfffffcff
 8003660:	ffff0fff 	.word	0xffff0fff

08003664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	2210      	movs	r2, #16
 800367c:	4393      	bics	r3, r2
 800367e:	001a      	movs	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <TIM_TI2_ConfigInputStage+0x60>)
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	031b      	lsls	r3, r3, #12
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	22a0      	movs	r2, #160	@ 0xa0
 80036a0:	4393      	bics	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b006      	add	sp, #24
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	ffff0fff 	.word	0xffff0fff

080036c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <TIM_TI3_SetConfig+0x78>)
 80036e2:	401a      	ands	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2203      	movs	r2, #3
 80036f2:	4393      	bics	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	22f0      	movs	r2, #240	@ 0xf0
 8003702:	4393      	bics	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	22ff      	movs	r2, #255	@ 0xff
 800370c:	4013      	ands	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4a0b      	ldr	r2, [pc, #44]	@ (8003744 <TIM_TI3_SetConfig+0x7c>)
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	021a      	lsls	r2, r3, #8
 8003720:	23a0      	movs	r3, #160	@ 0xa0
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4013      	ands	r3, r2
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b006      	add	sp, #24
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fffffeff 	.word	0xfffffeff
 8003744:	fffff5ff 	.word	0xfffff5ff

08003748 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4a18      	ldr	r2, [pc, #96]	@ (80037c4 <TIM_TI4_SetConfig+0x7c>)
 8003762:	401a      	ands	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <TIM_TI4_SetConfig+0x80>)
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <TIM_TI4_SetConfig+0x84>)
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	031b      	lsls	r3, r3, #12
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4a0d      	ldr	r2, [pc, #52]	@ (80037d0 <TIM_TI4_SetConfig+0x88>)
 800379a:	4013      	ands	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	031a      	lsls	r2, r3, #12
 80037a2:	23a0      	movs	r3, #160	@ 0xa0
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4013      	ands	r3, r2
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b006      	add	sp, #24
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	ffffefff 	.word	0xffffefff
 80037c8:	fffffcff 	.word	0xfffffcff
 80037cc:	ffff0fff 	.word	0xffff0fff
 80037d0:	ffff5fff 	.word	0xffff5fff

080037d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a08      	ldr	r2, [pc, #32]	@ (8003808 <TIM_ITRx_SetConfig+0x34>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	2207      	movs	r2, #7
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	ffcfff8f 	.word	0xffcfff8f

0800380c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <TIM_ETR_SetConfig+0x3c>)
 8003824:	4013      	ands	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	431a      	orrs	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b006      	add	sp, #24
 8003846:	bd80      	pop	{r7, pc}
 8003848:	ffff00ff 	.word	0xffff00ff

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223c      	movs	r2, #60	@ 0x3c
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e050      	b.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	223c      	movs	r2, #60	@ 0x3c
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	223d      	movs	r2, #61	@ 0x3d
 8003870:	2102      	movs	r1, #2
 8003872:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a21      	ldr	r2, [pc, #132]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a20      	ldr	r2, [pc, #128]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003892:	4013      	ands	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2270      	movs	r2, #112	@ 0x70
 80038a4:	4393      	bics	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00a      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	05db      	lsls	r3, r3, #23
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d004      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10c      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2280      	movs	r2, #128	@ 0x80
 80038de:	4393      	bics	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223d      	movs	r2, #61	@ 0x3d
 80038f8:	2101      	movs	r1, #1
 80038fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	223c      	movs	r2, #60	@ 0x3c
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	40012c00 	.word	0x40012c00
 8003914:	ff0fffff 	.word	0xff0fffff
 8003918:	40000400 	.word	0x40000400

0800391c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	223c      	movs	r2, #60	@ 0x3c
 800392e:	5c9b      	ldrb	r3, [r3, r2]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003934:	2302      	movs	r3, #2
 8003936:	e06f      	b.n	8003a18 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	223c      	movs	r2, #60	@ 0x3c
 800393c:	2101      	movs	r1, #1
 800393e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	22ff      	movs	r2, #255	@ 0xff
 8003944:	4393      	bics	r3, r2
 8003946:	001a      	movs	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003954:	401a      	ands	r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a30      	ldr	r2, [pc, #192]	@ (8003a24 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003962:	401a      	ands	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a28 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003970:	401a      	ands	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a2c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800397e:	401a      	ands	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a29      	ldr	r2, [pc, #164]	@ (8003a30 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800398c:	401a      	ands	r2, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a26      	ldr	r2, [pc, #152]	@ (8003a34 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800399a:	401a      	ands	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a24      	ldr	r2, [pc, #144]	@ (8003a38 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80039a8:	401a      	ands	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80039b8:	401a      	ands	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d11c      	bne.n	8003a06 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80039d0:	401a      	ands	r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	051b      	lsls	r3, r3, #20
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a1a      	ldr	r2, [pc, #104]	@ (8003a48 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80039e0:	401a      	ands	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a17      	ldr	r2, [pc, #92]	@ (8003a4c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80039ee:	401a      	ands	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80039fc:	401a      	ands	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	223c      	movs	r2, #60	@ 0x3c
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fffffcff 	.word	0xfffffcff
 8003a24:	fffffbff 	.word	0xfffffbff
 8003a28:	fffff7ff 	.word	0xfffff7ff
 8003a2c:	ffffefff 	.word	0xffffefff
 8003a30:	ffffdfff 	.word	0xffffdfff
 8003a34:	ffffbfff 	.word	0xffffbfff
 8003a38:	fff0ffff 	.word	0xfff0ffff
 8003a3c:	efffffff 	.word	0xefffffff
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	ff0fffff 	.word	0xff0fffff
 8003a48:	feffffff 	.word	0xfeffffff
 8003a4c:	fdffffff 	.word	0xfdffffff
 8003a50:	dfffffff 	.word	0xdfffffff

08003a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e046      	b.n	8003b24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2288      	movs	r2, #136	@ 0x88
 8003a9a:	589b      	ldr	r3, [r3, r2]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d107      	bne.n	8003ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2284      	movs	r2, #132	@ 0x84
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fd f8a6 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2288      	movs	r2, #136	@ 0x88
 8003ab4:	2124      	movs	r1, #36	@ 0x24
 8003ab6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 faa4 	bl	8004020 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f828 	bl	8003b30 <UART_SetConfig>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e01c      	b.n	8003b24 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	490d      	ldr	r1, [pc, #52]	@ (8003b2c <HAL_UART_Init+0xa8>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	212a      	movs	r1, #42	@ 0x2a
 8003b06:	438a      	bics	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fb33 	bl	8004188 <UART_CheckIdleState>
 8003b22:	0003      	movs	r3, r0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	ffffb7ff 	.word	0xffffb7ff

08003b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b5b0      	push	{r4, r5, r7, lr}
 8003b32:	b090      	sub	sp, #64	@ 0x40
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b38:	231a      	movs	r3, #26
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4ac4      	ldr	r2, [pc, #784]	@ (8003e74 <UART_SetConfig+0x344>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4abf      	ldr	r2, [pc, #764]	@ (8003e78 <UART_SetConfig+0x348>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	68d9      	ldr	r1, [r3, #12]
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	0003      	movs	r3, r0
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4ab9      	ldr	r2, [pc, #740]	@ (8003e7c <UART_SetConfig+0x34c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4ab4      	ldr	r2, [pc, #720]	@ (8003e80 <UART_SetConfig+0x350>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	4393      	bics	r3, r2
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4aaa      	ldr	r2, [pc, #680]	@ (8003e84 <UART_SetConfig+0x354>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d131      	bne.n	8003c44 <UART_SetConfig+0x114>
 8003be0:	4ba9      	ldr	r3, [pc, #676]	@ (8003e88 <UART_SetConfig+0x358>)
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	2203      	movs	r2, #3
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d01d      	beq.n	8003c28 <UART_SetConfig+0xf8>
 8003bec:	d823      	bhi.n	8003c36 <UART_SetConfig+0x106>
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d00c      	beq.n	8003c0c <UART_SetConfig+0xdc>
 8003bf2:	d820      	bhi.n	8003c36 <UART_SetConfig+0x106>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <UART_SetConfig+0xce>
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d00e      	beq.n	8003c1a <UART_SetConfig+0xea>
 8003bfc:	e01b      	b.n	8003c36 <UART_SetConfig+0x106>
 8003bfe:	231b      	movs	r3, #27
 8003c00:	2220      	movs	r2, #32
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	19db      	adds	r3, r3, r7
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e071      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003c0c:	231b      	movs	r3, #27
 8003c0e:	2220      	movs	r2, #32
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	19db      	adds	r3, r3, r7
 8003c14:	2202      	movs	r2, #2
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e06a      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003c1a:	231b      	movs	r3, #27
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	2204      	movs	r2, #4
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e063      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003c28:	231b      	movs	r3, #27
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	2208      	movs	r2, #8
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e05c      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003c36:	231b      	movs	r3, #27
 8003c38:	2220      	movs	r2, #32
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	2210      	movs	r2, #16
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e055      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a90      	ldr	r2, [pc, #576]	@ (8003e8c <UART_SetConfig+0x35c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d106      	bne.n	8003c5c <UART_SetConfig+0x12c>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	2220      	movs	r2, #32
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e049      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a86      	ldr	r2, [pc, #536]	@ (8003e7c <UART_SetConfig+0x34c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d13e      	bne.n	8003ce4 <UART_SetConfig+0x1b4>
 8003c66:	4b88      	ldr	r3, [pc, #544]	@ (8003e88 <UART_SetConfig+0x358>)
 8003c68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c6a:	23c0      	movs	r3, #192	@ 0xc0
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4013      	ands	r3, r2
 8003c70:	22c0      	movs	r2, #192	@ 0xc0
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d027      	beq.n	8003cc8 <UART_SetConfig+0x198>
 8003c78:	22c0      	movs	r2, #192	@ 0xc0
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d82a      	bhi.n	8003cd6 <UART_SetConfig+0x1a6>
 8003c80:	2280      	movs	r2, #128	@ 0x80
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d011      	beq.n	8003cac <UART_SetConfig+0x17c>
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d822      	bhi.n	8003cd6 <UART_SetConfig+0x1a6>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <UART_SetConfig+0x16e>
 8003c94:	2280      	movs	r2, #128	@ 0x80
 8003c96:	00d2      	lsls	r2, r2, #3
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <UART_SetConfig+0x18a>
 8003c9c:	e01b      	b.n	8003cd6 <UART_SetConfig+0x1a6>
 8003c9e:	231b      	movs	r3, #27
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	19db      	adds	r3, r3, r7
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e021      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003cac:	231b      	movs	r3, #27
 8003cae:	2220      	movs	r2, #32
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	19db      	adds	r3, r3, r7
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e01a      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003cba:	231b      	movs	r3, #27
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	189b      	adds	r3, r3, r2
 8003cc0:	19db      	adds	r3, r3, r7
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e013      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003cc8:	231b      	movs	r3, #27
 8003cca:	2220      	movs	r2, #32
 8003ccc:	189b      	adds	r3, r3, r2
 8003cce:	19db      	adds	r3, r3, r7
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e00c      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003cd6:	231b      	movs	r3, #27
 8003cd8:	2220      	movs	r2, #32
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	19db      	adds	r3, r3, r7
 8003cde:	2210      	movs	r2, #16
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e005      	b.n	8003cf0 <UART_SetConfig+0x1c0>
 8003ce4:	231b      	movs	r3, #27
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	19db      	adds	r3, r3, r7
 8003cec:	2210      	movs	r2, #16
 8003cee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a61      	ldr	r2, [pc, #388]	@ (8003e7c <UART_SetConfig+0x34c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d000      	beq.n	8003cfc <UART_SetConfig+0x1cc>
 8003cfa:	e092      	b.n	8003e22 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cfc:	231b      	movs	r3, #27
 8003cfe:	2220      	movs	r2, #32
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	19db      	adds	r3, r3, r7
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d015      	beq.n	8003d36 <UART_SetConfig+0x206>
 8003d0a:	dc18      	bgt.n	8003d3e <UART_SetConfig+0x20e>
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00d      	beq.n	8003d2c <UART_SetConfig+0x1fc>
 8003d10:	dc15      	bgt.n	8003d3e <UART_SetConfig+0x20e>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x1ec>
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d005      	beq.n	8003d26 <UART_SetConfig+0x1f6>
 8003d1a:	e010      	b.n	8003d3e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fc84 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003d20:	0003      	movs	r3, r0
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d24:	e014      	b.n	8003d50 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d26:	4b5a      	ldr	r3, [pc, #360]	@ (8003e90 <UART_SetConfig+0x360>)
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d2a:	e011      	b.n	8003d50 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2c:	f7fe fbf0 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8003d30:	0003      	movs	r3, r0
 8003d32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d34:	e00c      	b.n	8003d50 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d36:	2380      	movs	r3, #128	@ 0x80
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d3c:	e008      	b.n	8003d50 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003d42:	231a      	movs	r3, #26
 8003d44:	2220      	movs	r2, #32
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	19db      	adds	r3, r3, r7
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
        break;
 8003d4e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d100      	bne.n	8003d58 <UART_SetConfig+0x228>
 8003d56:	e147      	b.n	8003fe8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e94 <UART_SetConfig+0x364>)
 8003d5e:	0052      	lsls	r2, r2, #1
 8003d60:	5ad3      	ldrh	r3, [r2, r3]
 8003d62:	0019      	movs	r1, r3
 8003d64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d66:	f7fc f9cd 	bl	8000104 <__udivsi3>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	0013      	movs	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d305      	bcc.n	8003d8a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d906      	bls.n	8003d98 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003d8a:	231a      	movs	r3, #26
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e127      	b.n	8003fe8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <UART_SetConfig+0x364>)
 8003da6:	0052      	lsls	r2, r2, #1
 8003da8:	5ad3      	ldrh	r3, [r2, r3]
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	69b8      	ldr	r0, [r7, #24]
 8003db6:	69f9      	ldr	r1, [r7, #28]
 8003db8:	f7fc fa30 	bl	800021c <__aeabi_uldivmod>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	000b      	movs	r3, r1
 8003dc0:	0e11      	lsrs	r1, r2, #24
 8003dc2:	021d      	lsls	r5, r3, #8
 8003dc4:	430d      	orrs	r5, r1
 8003dc6:	0214      	lsls	r4, r2, #8
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68b8      	ldr	r0, [r7, #8]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	1900      	adds	r0, r0, r4
 8003dda:	4169      	adcs	r1, r5
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f7fc fa17 	bl	800021c <__aeabi_uldivmod>
 8003dee:	0002      	movs	r2, r0
 8003df0:	000b      	movs	r3, r1
 8003df2:	0013      	movs	r3, r2
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df8:	23c0      	movs	r3, #192	@ 0xc0
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d309      	bcc.n	8003e14 <UART_SetConfig+0x2e4>
 8003e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	035b      	lsls	r3, r3, #13
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d204      	bcs.n	8003e14 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e0e9      	b.n	8003fe8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e14:	231a      	movs	r3, #26
 8003e16:	2220      	movs	r2, #32
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e0e2      	b.n	8003fe8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d000      	beq.n	8003e30 <UART_SetConfig+0x300>
 8003e2e:	e083      	b.n	8003f38 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003e30:	231b      	movs	r3, #27
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d015      	beq.n	8003e6a <UART_SetConfig+0x33a>
 8003e3e:	dc2b      	bgt.n	8003e98 <UART_SetConfig+0x368>
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d00d      	beq.n	8003e60 <UART_SetConfig+0x330>
 8003e44:	dc28      	bgt.n	8003e98 <UART_SetConfig+0x368>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <UART_SetConfig+0x320>
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d005      	beq.n	8003e5a <UART_SetConfig+0x32a>
 8003e4e:	e023      	b.n	8003e98 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe fbea 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003e54:	0003      	movs	r3, r0
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e58:	e027      	b.n	8003eaa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <UART_SetConfig+0x360>)
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e5e:	e024      	b.n	8003eaa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e60:	f7fe fb56 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8003e64:	0003      	movs	r3, r0
 8003e66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e68:	e01f      	b.n	8003eaa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e70:	e01b      	b.n	8003eaa <UART_SetConfig+0x37a>
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	cfff69f3 	.word	0xcfff69f3
 8003e78:	ffffcfff 	.word	0xffffcfff
 8003e7c:	40008000 	.word	0x40008000
 8003e80:	11fff4ff 	.word	0x11fff4ff
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40004400 	.word	0x40004400
 8003e90:	00f42400 	.word	0x00f42400
 8003e94:	080045ac 	.word	0x080045ac
      default:
        pclk = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e9c:	231a      	movs	r3, #26
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	189b      	adds	r3, r3, r2
 8003ea2:	19db      	adds	r3, r3, r7
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
        break;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d100      	bne.n	8003eb2 <UART_SetConfig+0x382>
 8003eb0:	e09a      	b.n	8003fe8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb6:	4b58      	ldr	r3, [pc, #352]	@ (8004018 <UART_SetConfig+0x4e8>)
 8003eb8:	0052      	lsls	r2, r2, #1
 8003eba:	5ad3      	ldrh	r3, [r2, r3]
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ec0:	f7fc f920 	bl	8000104 <__udivsi3>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	005a      	lsls	r2, r3, #1
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	18d2      	adds	r2, r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	0010      	movs	r0, r2
 8003ed8:	f7fc f914 	bl	8000104 <__udivsi3>
 8003edc:	0003      	movs	r3, r0
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d921      	bls.n	8003f2a <UART_SetConfig+0x3fa>
 8003ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	025b      	lsls	r3, r3, #9
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d21c      	bcs.n	8003f2a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	200e      	movs	r0, #14
 8003ef6:	2420      	movs	r4, #32
 8003ef8:	1903      	adds	r3, r0, r4
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	210f      	movs	r1, #15
 8003efe:	438a      	bics	r2, r1
 8003f00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2207      	movs	r2, #7
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b299      	uxth	r1, r3
 8003f0e:	1903      	adds	r3, r0, r4
 8003f10:	19db      	adds	r3, r3, r7
 8003f12:	1902      	adds	r2, r0, r4
 8003f14:	19d2      	adds	r2, r2, r7
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1902      	adds	r2, r0, r4
 8003f22:	19d2      	adds	r2, r2, r7
 8003f24:	8812      	ldrh	r2, [r2, #0]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e05e      	b.n	8003fe8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f2a:	231a      	movs	r3, #26
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	189b      	adds	r3, r3, r2
 8003f30:	19db      	adds	r3, r3, r7
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e057      	b.n	8003fe8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f38:	231b      	movs	r3, #27
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d015      	beq.n	8003f72 <UART_SetConfig+0x442>
 8003f46:	dc18      	bgt.n	8003f7a <UART_SetConfig+0x44a>
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d00d      	beq.n	8003f68 <UART_SetConfig+0x438>
 8003f4c:	dc15      	bgt.n	8003f7a <UART_SetConfig+0x44a>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <UART_SetConfig+0x428>
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d005      	beq.n	8003f62 <UART_SetConfig+0x432>
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe fb66 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f60:	e014      	b.n	8003f8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f62:	4b2e      	ldr	r3, [pc, #184]	@ (800401c <UART_SetConfig+0x4ec>)
 8003f64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f66:	e011      	b.n	8003f8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f68:	f7fe fad2 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	2380      	movs	r3, #128	@ 0x80
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f7e:	231a      	movs	r3, #26
 8003f80:	2220      	movs	r2, #32
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	19db      	adds	r3, r3, r7
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
        break;
 8003f8a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02a      	beq.n	8003fe8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f96:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <UART_SetConfig+0x4e8>)
 8003f98:	0052      	lsls	r2, r2, #1
 8003f9a:	5ad3      	ldrh	r3, [r2, r3]
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fa0:	f7fc f8b0 	bl	8000104 <__udivsi3>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	18d2      	adds	r2, r2, r3
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	0010      	movs	r0, r2
 8003fb8:	f7fc f8a4 	bl	8000104 <__udivsi3>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d90a      	bls.n	8003fdc <UART_SetConfig+0x4ac>
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	025b      	lsls	r3, r3, #9
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d205      	bcs.n	8003fdc <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	e005      	b.n	8003fe8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fdc:	231a      	movs	r3, #26
 8003fde:	2220      	movs	r2, #32
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	226a      	movs	r2, #106	@ 0x6a
 8003fec:	2101      	movs	r1, #1
 8003fee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	2268      	movs	r2, #104	@ 0x68
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	2200      	movs	r2, #0
 8004002:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004004:	231a      	movs	r3, #26
 8004006:	2220      	movs	r2, #32
 8004008:	189b      	adds	r3, r3, r2
 800400a:	19db      	adds	r3, r3, r7
 800400c:	781b      	ldrb	r3, [r3, #0]
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	b010      	add	sp, #64	@ 0x40
 8004014:	bdb0      	pop	{r4, r5, r7, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	080045ac 	.word	0x080045ac
 800401c:	00f42400 	.word	0x00f42400

08004020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	2208      	movs	r2, #8
 800402e:	4013      	ands	r3, r2
 8004030:	d00b      	beq.n	800404a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a4a      	ldr	r2, [pc, #296]	@ (8004164 <UART_AdvFeatureConfig+0x144>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	2201      	movs	r2, #1
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a43      	ldr	r2, [pc, #268]	@ (8004168 <UART_AdvFeatureConfig+0x148>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2202      	movs	r2, #2
 8004072:	4013      	ands	r3, r2
 8004074:	d00b      	beq.n	800408e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a3b      	ldr	r2, [pc, #236]	@ (800416c <UART_AdvFeatureConfig+0x14c>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	2204      	movs	r2, #4
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4a34      	ldr	r2, [pc, #208]	@ (8004170 <UART_AdvFeatureConfig+0x150>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	2210      	movs	r2, #16
 80040b6:	4013      	ands	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <UART_AdvFeatureConfig+0x154>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	2220      	movs	r2, #32
 80040d8:	4013      	ands	r3, r2
 80040da:	d00b      	beq.n	80040f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	4a25      	ldr	r2, [pc, #148]	@ (8004178 <UART_AdvFeatureConfig+0x158>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	2240      	movs	r2, #64	@ 0x40
 80040fa:	4013      	ands	r3, r2
 80040fc:	d01d      	beq.n	800413a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a1d      	ldr	r2, [pc, #116]	@ (800417c <UART_AdvFeatureConfig+0x15c>)
 8004106:	4013      	ands	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	035b      	lsls	r3, r3, #13
 800411e:	429a      	cmp	r2, r3
 8004120:	d10b      	bne.n	800413a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <UART_AdvFeatureConfig+0x160>)
 800412a:	4013      	ands	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	2280      	movs	r2, #128	@ 0x80
 8004140:	4013      	ands	r3, r2
 8004142:	d00b      	beq.n	800415c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a0e      	ldr	r2, [pc, #56]	@ (8004184 <UART_AdvFeatureConfig+0x164>)
 800414c:	4013      	ands	r3, r2
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }
}
 800415c:	46c0      	nop			@ (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}
 8004164:	ffff7fff 	.word	0xffff7fff
 8004168:	fffdffff 	.word	0xfffdffff
 800416c:	fffeffff 	.word	0xfffeffff
 8004170:	fffbffff 	.word	0xfffbffff
 8004174:	ffffefff 	.word	0xffffefff
 8004178:	ffffdfff 	.word	0xffffdfff
 800417c:	ffefffff 	.word	0xffefffff
 8004180:	ff9fffff 	.word	0xff9fffff
 8004184:	fff7ffff 	.word	0xfff7ffff

08004188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b092      	sub	sp, #72	@ 0x48
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2290      	movs	r2, #144	@ 0x90
 8004194:	2100      	movs	r1, #0
 8004196:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004198:	f7fc fe64 	bl	8000e64 <HAL_GetTick>
 800419c:	0003      	movs	r3, r0
 800419e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2208      	movs	r2, #8
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d12d      	bne.n	800420a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b0:	2280      	movs	r2, #128	@ 0x80
 80041b2:	0391      	lsls	r1, r2, #14
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4a47      	ldr	r2, [pc, #284]	@ (80042d4 <UART_CheckIdleState+0x14c>)
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f000 f88e 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d022      	beq.n	800420a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c4:	f3ef 8310 	mrs	r3, PRIMASK
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041ce:	2301      	movs	r3, #1
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			@ (mov r8, r8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2180      	movs	r1, #128	@ 0x80
 80041e6:	438a      	bics	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2288      	movs	r2, #136	@ 0x88
 80041fa:	2120      	movs	r1, #32
 80041fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2284      	movs	r2, #132	@ 0x84
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e060      	b.n	80042cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2204      	movs	r2, #4
 8004212:	4013      	ands	r3, r2
 8004214:	2b04      	cmp	r3, #4
 8004216:	d146      	bne.n	80042a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	03d1      	lsls	r1, r2, #15
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4a2c      	ldr	r2, [pc, #176]	@ (80042d4 <UART_CheckIdleState+0x14c>)
 8004222:	9200      	str	r2, [sp, #0]
 8004224:	2200      	movs	r2, #0
 8004226:	f000 f859 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d03b      	beq.n	80042a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422e:	f3ef 8310 	mrs	r3, PRIMASK
 8004232:	60fb      	str	r3, [r7, #12]
  return(result);
 8004234:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
 8004238:	2301      	movs	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f383 8810 	msr	PRIMASK, r3
}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4922      	ldr	r1, [pc, #136]	@ (80042d8 <UART_CheckIdleState+0x150>)
 8004250:	400a      	ands	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f383 8810 	msr	PRIMASK, r3
}
 800425e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004260:	f3ef 8310 	mrs	r3, PRIMASK
 8004264:	61bb      	str	r3, [r7, #24]
  return(result);
 8004266:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	633b      	str	r3, [r7, #48]	@ 0x30
 800426a:	2301      	movs	r3, #1
 800426c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2101      	movs	r1, #1
 8004282:	438a      	bics	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	228c      	movs	r2, #140	@ 0x8c
 8004296:	2120      	movs	r1, #32
 8004298:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2284      	movs	r2, #132	@ 0x84
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e012      	b.n	80042cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2288      	movs	r2, #136	@ 0x88
 80042aa:	2120      	movs	r1, #32
 80042ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	228c      	movs	r2, #140	@ 0x8c
 80042b2:	2120      	movs	r1, #32
 80042b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2284      	movs	r2, #132	@ 0x84
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b010      	add	sp, #64	@ 0x40
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	01ffffff 	.word	0x01ffffff
 80042d8:	fffffedf 	.word	0xfffffedf

080042dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	e051      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3301      	adds	r3, #1
 80042f2:	d04e      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fc fdb6 	bl	8000e64 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e051      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2204      	movs	r2, #4
 8004316:	4013      	ands	r3, r2
 8004318:	d03b      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b80      	cmp	r3, #128	@ 0x80
 800431e:	d038      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b40      	cmp	r3, #64	@ 0x40
 8004324:	d035      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	2208      	movs	r2, #8
 800432e:	4013      	ands	r3, r2
 8004330:	2b08      	cmp	r3, #8
 8004332:	d111      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f83c 	bl	80043bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2290      	movs	r2, #144	@ 0x90
 8004348:	2108      	movs	r1, #8
 800434a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2284      	movs	r2, #132	@ 0x84
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e02c      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	401a      	ands	r2, r3
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	429a      	cmp	r2, r3
 800436a:	d112      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2280      	movs	r2, #128	@ 0x80
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	0018      	movs	r0, r3
 800437a:	f000 f81f 	bl	80043bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2290      	movs	r2, #144	@ 0x90
 8004382:	2120      	movs	r1, #32
 8004384:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2284      	movs	r2, #132	@ 0x84
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	425a      	negs	r2, r3
 80043a2:	4153      	adcs	r3, r2
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	001a      	movs	r2, r3
 80043a8:	1dfb      	adds	r3, r7, #7
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d09e      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b004      	add	sp, #16
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	@ 0x38
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c4:	f3ef 8310 	mrs	r3, PRIMASK
 80043c8:	617b      	str	r3, [r7, #20]
  return(result);
 80043ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ce:	2301      	movs	r3, #1
 80043d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4926      	ldr	r1, [pc, #152]	@ (8004480 <UART_EndRxTransfer+0xc4>)
 80043e6:	400a      	ands	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f6:	f3ef 8310 	mrs	r3, PRIMASK
 80043fa:	623b      	str	r3, [r7, #32]
  return(result);
 80043fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004400:	2301      	movs	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	491b      	ldr	r1, [pc, #108]	@ (8004484 <UART_EndRxTransfer+0xc8>)
 8004418:	400a      	ands	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d118      	bne.n	8004462 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004430:	f3ef 8310 	mrs	r3, PRIMASK
 8004434:	60bb      	str	r3, [r7, #8]
  return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443a:	2301      	movs	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f383 8810 	msr	PRIMASK, r3
}
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2110      	movs	r1, #16
 8004452:	438a      	bics	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	228c      	movs	r2, #140	@ 0x8c
 8004466:	2120      	movs	r1, #32
 8004468:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b00e      	add	sp, #56	@ 0x38
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	fffffedf 	.word	0xfffffedf
 8004484:	effffffe 	.word	0xeffffffe

08004488 <memset>:
 8004488:	0003      	movs	r3, r0
 800448a:	1882      	adds	r2, r0, r2
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	7019      	strb	r1, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	2600      	movs	r6, #0
 800449c:	4c0c      	ldr	r4, [pc, #48]	@ (80044d0 <__libc_init_array+0x38>)
 800449e:	4d0d      	ldr	r5, [pc, #52]	@ (80044d4 <__libc_init_array+0x3c>)
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	2600      	movs	r6, #0
 80044aa:	f000 f819 	bl	80044e0 <_init>
 80044ae:	4c0a      	ldr	r4, [pc, #40]	@ (80044d8 <__libc_init_array+0x40>)
 80044b0:	4d0a      	ldr	r5, [pc, #40]	@ (80044dc <__libc_init_array+0x44>)
 80044b2:	1b64      	subs	r4, r4, r5
 80044b4:	10a4      	asrs	r4, r4, #2
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	00b3      	lsls	r3, r6, #2
 80044be:	58eb      	ldr	r3, [r5, r3]
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	00b3      	lsls	r3, r6, #2
 80044c8:	58eb      	ldr	r3, [r5, r3]
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	080045cc 	.word	0x080045cc
 80044d4:	080045cc 	.word	0x080045cc
 80044d8:	080045d0 	.word	0x080045d0
 80044dc:	080045cc 	.word	0x080045cc

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
