
jhhhjjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006054  08006054  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800605c  0800605c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800605c  0800605c  0000705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006060  08006060  00007060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006064  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000000c  08006070  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08006070  000083c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ad  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273f  00000000  00000000  0001b0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d58  00000000  00000000  0001e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764b  00000000  00000000  0001f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001435f  00000000  00000000  00036cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a04e  00000000  00000000  0004b01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd4  00000000  00000000  000e50ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e8e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f1c 	.word	0x08005f1c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005f1c 	.word	0x08005f1c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f001 f84c 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f816 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fc70 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000458:	f000 fc48 	bl	8000cec <MX_DMA_Init>
  MX_ADC1_Init();
 800045c:	f000 f872 	bl	8000544 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000460:	f000 fc10 	bl	8000c84 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000464:	f000 f9f8 	bl	8000858 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000468:	f000 fa72 	bl	8000950 <MX_TIM3_Init>
  MX_TIM17_Init();
 800046c:	f000 fb7c 	bl	8000b68 <MX_TIM17_Init>
  MX_TIM1_Init();
 8000470:	f000 f91a 	bl	80006a8 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000474:	f000 faec 	bl	8000a50 <MX_TIM16_Init>
  MX_IWDG_Init();
 8000478:	f000 f8f6 	bl	8000668 <MX_IWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	e7fd      	b.n	800047c <main+0x34>

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b093      	sub	sp, #76	@ 0x4c
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	2410      	movs	r4, #16
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2338      	movs	r3, #56	@ 0x38
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f005 fd16 	bl	8005ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000496:	003b      	movs	r3, r7
 8000498:	0018      	movs	r0, r3
 800049a:	2310      	movs	r3, #16
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f005 fd0f 	bl	8005ec2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f002 fa69 	bl	8002980 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	220a      	movs	r2, #10
 80004b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2280      	movs	r2, #128	@ 0x80
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004bc:	0021      	movs	r1, r4
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2240      	movs	r2, #64	@ 0x40
 80004c8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2201      	movs	r2, #1
 80004ce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2202      	movs	r2, #2
 80004d4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2202      	movs	r2, #2
 80004da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2208      	movs	r2, #8
 80004e6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	0292      	lsls	r2, r2, #10
 80004ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	22c0      	movs	r2, #192	@ 0xc0
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2280      	movs	r2, #128	@ 0x80
 80004fc:	0592      	lsls	r2, r2, #22
 80004fe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	187b      	adds	r3, r7, r1
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fa88 	bl	8002a18 <HAL_RCC_OscConfig>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800050c:	f000 fcba 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	003b      	movs	r3, r7
 8000512:	2207      	movs	r2, #7
 8000514:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	003b      	movs	r3, r7
 8000518:	2202      	movs	r2, #2
 800051a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051c:	003b      	movs	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000522:	003b      	movs	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000528:	003b      	movs	r3, r7
 800052a:	2102      	movs	r1, #2
 800052c:	0018      	movs	r0, r3
 800052e:	f002 fd8d 	bl	800304c <HAL_RCC_ClockConfig>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000536:	f000 fca5 	bl	8000e84 <Error_Handler>
  }
}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b013      	add	sp, #76	@ 0x4c
 8000540:	bd90      	pop	{r4, r7, pc}
	...

08000544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	230c      	movs	r3, #12
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f005 fcb5 	bl	8005ec2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000558:	4b41      	ldr	r3, [pc, #260]	@ (8000660 <MX_ADC1_Init+0x11c>)
 800055a:	4a42      	ldr	r2, [pc, #264]	@ (8000664 <MX_ADC1_Init+0x120>)
 800055c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800055e:	4b40      	ldr	r3, [pc, #256]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000560:	2280      	movs	r2, #128	@ 0x80
 8000562:	05d2      	lsls	r2, r2, #23
 8000564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056c:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <MX_ADC1_Init+0x11c>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000572:	4b3b      	ldr	r3, [pc, #236]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	0392      	lsls	r2, r2, #14
 8000578:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800057a:	4b39      	ldr	r3, [pc, #228]	@ (8000660 <MX_ADC1_Init+0x11c>)
 800057c:	2208      	movs	r2, #8
 800057e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000580:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000586:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058c:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <MX_ADC1_Init+0x11c>)
 800058e:	2200      	movs	r2, #0
 8000590:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000592:	4b33      	ldr	r3, [pc, #204]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000594:	2204      	movs	r2, #4
 8000596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000598:	4b31      	ldr	r3, [pc, #196]	@ (8000660 <MX_ADC1_Init+0x11c>)
 800059a:	2220      	movs	r2, #32
 800059c:	2100      	movs	r1, #0
 800059e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005ae:	222c      	movs	r2, #44	@ 0x2c
 80005b0:	2100      	movs	r1, #0
 80005b2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005ba:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005c6:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005c8:	223c      	movs	r2, #60	@ 0x3c
 80005ca:	2100      	movs	r1, #0
 80005cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005ce:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f001 f90a 	bl	80017f0 <HAL_ADC_Init>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005e0:	f000 fc50 	bl	8000e84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3a      	adds	r2, r7, #4
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_ADC1_Init+0x11c>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fa9f 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000606:	f000 fc3d 	bl	8000e84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2204      	movs	r2, #4
 800060e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fa92 	bl	8001b40 <HAL_ADC_ConfigChannel>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000620:	f000 fc30 	bl	8000e84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2208      	movs	r2, #8
 8000628:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3a      	adds	r2, r7, #4
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_ADC1_Init+0x11c>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fa85 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800063a:	f000 fc23 	bl	8000e84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	220c      	movs	r2, #12
 8000642:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_ADC1_Init+0x11c>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fa78 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000654:	f000 fc16 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b004      	add	sp, #16
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028
 8000664:	40012400 	.word	0x40012400

08000668 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_IWDG_Init+0x34>)
 800066e:	4a0c      	ldr	r2, [pc, #48]	@ (80006a0 <MX_IWDG_Init+0x38>)
 8000670:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_IWDG_Init+0x34>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_IWDG_Init+0x34>)
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <MX_IWDG_Init+0x3c>)
 800067c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_IWDG_Init+0x34>)
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <MX_IWDG_Init+0x3c>)
 8000682:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <MX_IWDG_Init+0x34>)
 8000686:	0018      	movs	r0, r3
 8000688:	f002 f928 	bl	80028dc <HAL_IWDG_Init>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000690:	f000 fbf8 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	200000e8 	.word	0x200000e8
 80006a0:	40003000 	.word	0x40003000
 80006a4:	00000fff 	.word	0x00000fff

080006a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	@ 0x70
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	2360      	movs	r3, #96	@ 0x60
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	0018      	movs	r0, r3
 80006b4:	2310      	movs	r3, #16
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f005 fc02 	bl	8005ec2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006be:	2354      	movs	r3, #84	@ 0x54
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	0018      	movs	r0, r3
 80006c4:	230c      	movs	r3, #12
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f005 fbfa 	bl	8005ec2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	2338      	movs	r3, #56	@ 0x38
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	0018      	movs	r0, r3
 80006d4:	231c      	movs	r3, #28
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f005 fbf2 	bl	8005ec2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	0018      	movs	r0, r3
 80006e2:	2334      	movs	r3, #52	@ 0x34
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f005 fbeb 	bl	8005ec2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b57      	ldr	r3, [pc, #348]	@ (800084c <MX_TIM1_Init+0x1a4>)
 80006ee:	4a58      	ldr	r2, [pc, #352]	@ (8000850 <MX_TIM1_Init+0x1a8>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f2:	4b56      	ldr	r3, [pc, #344]	@ (800084c <MX_TIM1_Init+0x1a4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b54      	ldr	r3, [pc, #336]	@ (800084c <MX_TIM1_Init+0x1a4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 80006fe:	4b53      	ldr	r3, [pc, #332]	@ (800084c <MX_TIM1_Init+0x1a4>)
 8000700:	4a54      	ldr	r2, [pc, #336]	@ (8000854 <MX_TIM1_Init+0x1ac>)
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000704:	4b51      	ldr	r3, [pc, #324]	@ (800084c <MX_TIM1_Init+0x1a4>)
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	4b4f      	ldr	r3, [pc, #316]	@ (800084c <MX_TIM1_Init+0x1a4>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000712:	4b4e      	ldr	r3, [pc, #312]	@ (800084c <MX_TIM1_Init+0x1a4>)
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000718:	4b4c      	ldr	r3, [pc, #304]	@ (800084c <MX_TIM1_Init+0x1a4>)
 800071a:	0018      	movs	r0, r3
 800071c:	f002 ffba 	bl	8003694 <HAL_TIM_Base_Init>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000724:	f000 fbae 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	2160      	movs	r1, #96	@ 0x60
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	0152      	lsls	r2, r2, #5
 8000730:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000732:	187a      	adds	r2, r7, r1
 8000734:	4b45      	ldr	r3, [pc, #276]	@ (800084c <MX_TIM1_Init+0x1a4>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f003 fc2f 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000742:	f000 fb9f 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000746:	4b41      	ldr	r3, [pc, #260]	@ (800084c <MX_TIM1_Init+0x1a4>)
 8000748:	0018      	movs	r0, r3
 800074a:	f003 f85b 	bl	8003804 <HAL_TIM_PWM_Init>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000752:	f000 fb97 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2154      	movs	r1, #84	@ 0x54
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076a:	187a      	adds	r2, r7, r1
 800076c:	4b37      	ldr	r3, [pc, #220]	@ (800084c <MX_TIM1_Init+0x1a4>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f004 f9eb 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800077a:	f000 fb83 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077e:	2138      	movs	r1, #56	@ 0x38
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2260      	movs	r2, #96	@ 0x60
 8000784:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0092      	lsls	r2, r2, #2
 800078c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ac:	1879      	adds	r1, r7, r1
 80007ae:	4b27      	ldr	r3, [pc, #156]	@ (800084c <MX_TIM1_Init+0x1a4>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	0018      	movs	r0, r3
 80007b4:	f003 faf2 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80007bc:	f000 fb62 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007c0:	2338      	movs	r3, #56	@ 0x38
 80007c2:	18f9      	adds	r1, r7, r3
 80007c4:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_TIM1_Init+0x1a4>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 fae7 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007d2:	f000 fb57 	bl	8000e84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	0192      	lsls	r2, r2, #6
 80007fa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0492      	lsls	r2, r2, #18
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	1d3a      	adds	r2, r7, #4
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_TIM1_Init+0x1a4>)
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f004 f9f4 	bl	8004c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8000838:	f000 fb24 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4b03      	ldr	r3, [pc, #12]	@ (800084c <MX_TIM1_Init+0x1a4>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fc94 	bl	800116c <HAL_TIM_MspPostInit>

}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b01c      	add	sp, #112	@ 0x70
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000f8 	.word	0x200000f8
 8000850:	40012c00 	.word	0x40012c00
 8000854:	000003ff 	.word	0x000003ff

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	2320      	movs	r3, #32
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	0018      	movs	r0, r3
 8000864:	2310      	movs	r3, #16
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f005 fb2a 	bl	8005ec2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086e:	2314      	movs	r3, #20
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	0018      	movs	r0, r3
 8000874:	230c      	movs	r3, #12
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f005 fb22 	bl	8005ec2 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	0018      	movs	r0, r3
 8000882:	2310      	movs	r3, #16
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f005 fb1b 	bl	8005ec2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_TIM2_Init+0xf0>)
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	05d2      	lsls	r2, r2, #23
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <MX_TIM2_Init+0xf0>)
 8000896:	223f      	movs	r2, #63	@ 0x3f
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_TIM2_Init+0xf0>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 80008a0:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_TIM2_Init+0xf0>)
 80008a2:	4a2a      	ldr	r2, [pc, #168]	@ (800094c <MX_TIM2_Init+0xf4>)
 80008a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80008a6:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <MX_TIM2_Init+0xf0>)
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_TIM2_Init+0xf0>)
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_TIM2_Init+0xf0>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 feec 	bl	8003694 <HAL_TIM_Base_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008c0:	f000 fae0 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	2120      	movs	r1, #32
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	0152      	lsls	r2, r2, #5
 80008cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_TIM2_Init+0xf0>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fb61 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80008de:	f000 fad1 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_TIM2_Init+0xf0>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 ffed 	bl	80038c4 <HAL_TIM_IC_Init>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008ee:	f000 fac9 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2114      	movs	r1, #20
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000900:	187a      	adds	r2, r7, r1
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_TIM2_Init+0xf0>)
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f004 f920 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000910:	f000 fab8 	bl	8000e84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2202      	movs	r2, #2
 8000918:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2201      	movs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	220f      	movs	r2, #15
 800092a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800092c:	1d39      	adds	r1, r7, #4
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_TIM2_Init+0xf0>)
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f003 f98e 	bl	8003c54 <HAL_TIM_IC_ConfigChannel>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800093c:	f000 faa2 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b00c      	add	sp, #48	@ 0x30
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000144 	.word	0x20000144
 800094c:	001fffff 	.word	0x001fffff

08000950 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	@ 0x38
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	2328      	movs	r3, #40	@ 0x28
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	0018      	movs	r0, r3
 800095c:	2310      	movs	r3, #16
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f005 faae 	bl	8005ec2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	231c      	movs	r3, #28
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	230c      	movs	r3, #12
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f005 faa6 	bl	8005ec2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000976:	003b      	movs	r3, r7
 8000978:	0018      	movs	r0, r3
 800097a:	231c      	movs	r3, #28
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f005 fa9f 	bl	8005ec2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 8000986:	4a2f      	ldr	r2, [pc, #188]	@ (8000a44 <MX_TIM3_Init+0xf4>)
 8000988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800098a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 800098c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a48 <MX_TIM3_Init+0xf8>)
 800098e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8000996:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 8000998:	4a2c      	ldr	r2, [pc, #176]	@ (8000a4c <MX_TIM3_Init+0xfc>)
 800099a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 fe71 	bl	8003694 <HAL_TIM_Base_Init>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 fa65 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	2128      	movs	r1, #40	@ 0x28
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2280      	movs	r2, #128	@ 0x80
 80009c0:	0152      	lsls	r2, r2, #5
 80009c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c4:	187a      	adds	r2, r7, r1
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f003 fae6 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009d4:	f000 fa56 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f002 feb2 	bl	8003744 <HAL_TIM_OC_Init>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009e4:	f000 fa4e 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	211c      	movs	r1, #28
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f6:	187a      	adds	r2, r7, r1
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f004 f8a5 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000a06:	f000 fa3d 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a10:	003b      	movs	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	0039      	movs	r1, r7
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_TIM3_Init+0xf0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f003 f8b3 	bl	8003b94 <HAL_TIM_OC_ConfigChannel>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000a32:	f000 fa27 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b00e      	add	sp, #56	@ 0x38
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	20000190 	.word	0x20000190
 8000a44:	40000400 	.word	0x40000400
 8000a48:	00007fff 	.word	0x00007fff
 8000a4c:	00000fff 	.word	0x00000fff

08000a50 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	@ 0x50
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a56:	2334      	movs	r3, #52	@ 0x34
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	231c      	movs	r3, #28
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	f005 fa2e 	bl	8005ec2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a66:	003b      	movs	r3, r7
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2334      	movs	r3, #52	@ 0x34
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f005 fa27 	bl	8005ec2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a74:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a76:	4a3b      	ldr	r2, [pc, #236]	@ (8000b64 <MX_TIM16_Init+0x114>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000a7a:	4b39      	ldr	r3, [pc, #228]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256 - 1;
 8000a86:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a88:	22ff      	movs	r2, #255	@ 0xff
 8000a8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a8c:	4b34      	ldr	r3, [pc, #208]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a94:	4b32      	ldr	r3, [pc, #200]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 fdf6 	bl	8003694 <HAL_TIM_Base_Init>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000aac:	f000 f9ea 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 fe46 	bl	8003744 <HAL_TIM_OC_Init>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000abc:	f000 f9e2 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ac0:	2134      	movs	r1, #52	@ 0x34
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 256 - 1;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	22ff      	movs	r2, #255	@ 0xff
 8000acc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aec:	1879      	adds	r1, r7, r1
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f003 f84e 	bl	8003b94 <HAL_TIM_OC_ConfigChannel>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000afc:	f000 f9c2 	bl	8000e84 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	699a      	ldr	r2, [r3, #24]
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	0192      	lsls	r2, r2, #6
 8000b34:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b42:	003a      	movs	r2, r7
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_TIM16_Init+0x110>)
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 f867 	bl	8004c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8000b52:	f000 f997 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b014      	add	sp, #80	@ 0x50
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	200001dc 	.word	0x200001dc
 8000b64:	40014400 	.word	0x40014400

08000b68 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	@ 0x50
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	2334      	movs	r3, #52	@ 0x34
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	0018      	movs	r0, r3
 8000b74:	231c      	movs	r3, #28
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f005 f9a2 	bl	8005ec2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b7e:	003b      	movs	r3, r7
 8000b80:	0018      	movs	r0, r3
 8000b82:	2334      	movs	r3, #52	@ 0x34
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f005 f99b 	bl	8005ec2 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c7c <MX_TIM17_Init+0x114>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8000b92:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000b94:	4a3a      	ldr	r2, [pc, #232]	@ (8000c80 <MX_TIM17_Init+0x118>)
 8000b96:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50 - 1;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000ba0:	2231      	movs	r2, #49	@ 0x31
 8000ba2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ba4:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bac:	4b32      	ldr	r3, [pc, #200]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 fd6a 	bl	8003694 <HAL_TIM_Base_Init>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000bc4:	f000 f95e 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 fdba 	bl	8003744 <HAL_TIM_OC_Init>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000bd4:	f000 f956 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bd8:	2134      	movs	r1, #52	@ 0x34
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50 - 1;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2231      	movs	r2, #49	@ 0x31
 8000be4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	1879      	adds	r1, r7, r1
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 ffc2 	bl	8003b94 <HAL_TIM_OC_ConfigChannel>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000c14:	f000 f936 	bl	8000e84 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2108      	movs	r1, #8
 8000c24:	430a      	orrs	r2, r1
 8000c26:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c2e:	003b      	movs	r3, r7
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c34:	003b      	movs	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c40:	003b      	movs	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c46:	003b      	movs	r3, r7
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	0192      	lsls	r2, r2, #6
 8000c4c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4e:	003b      	movs	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c54:	003b      	movs	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_TIM17_Init+0x110>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f003 ffdb 	bl	8004c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000c6a:	f000 f90b 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b014      	add	sp, #80	@ 0x50
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	20000228 	.word	0x20000228
 8000c7c:	40014800 	.word	0x40014800
 8000c80:	00007fff 	.word	0x00007fff

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ce4 <MX_USART2_UART_Init+0x60>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c90:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_USART2_UART_Init+0x64>)
 8000c92:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000ca8:	220c      	movs	r2, #12
 8000caa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f004 f859 	bl	8004d84 <HAL_UART_Init>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000cd6:	f000 f8d5 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000274 	.word	0x20000274
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	00007a12 	.word	0x00007a12

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <MX_DMA_Init+0x48>)
 8000cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_DMA_Init+0x48>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <MX_DMA_Init+0x48>)
 8000d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2009      	movs	r0, #9
 8000d10:	f001 f99a 	bl	8002048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d14:	2009      	movs	r0, #9
 8000d16:	f001 f9ac 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f001 f992 	bl	8002048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 f9a4 	bl	8002072 <HAL_NVIC_EnableIRQ>

}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	2414      	movs	r4, #20
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	0018      	movs	r0, r3
 8000d44:	2314      	movs	r3, #20
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f005 f8ba 	bl	8005ec2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d52:	4b49      	ldr	r3, [pc, #292]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d54:	2104      	movs	r1, #4
 8000d56:	430a      	orrs	r2, r1
 8000d58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d5a:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d66:	4b44      	ldr	r3, [pc, #272]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d72:	4b41      	ldr	r3, [pc, #260]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d76:	2220      	movs	r2, #32
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d82:	4b3d      	ldr	r3, [pc, #244]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b38      	ldr	r3, [pc, #224]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d9a:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000da2:	4b35      	ldr	r3, [pc, #212]	@ (8000e78 <MX_GPIO_Init+0x140>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);
 8000dae:	2380      	movs	r3, #128	@ 0x80
 8000db0:	0099      	lsls	r1, r3, #2
 8000db2:	23a0      	movs	r3, #160	@ 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	2200      	movs	r2, #0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f001 fd33 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <MX_GPIO_Init+0x144>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2140      	movs	r1, #64	@ 0x40
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f001 fd2d 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2204      	movs	r2, #4
 8000dce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	2288      	movs	r2, #136	@ 0x88
 8000dd4:	0352      	lsls	r2, r2, #13
 8000dd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	4a27      	ldr	r2, [pc, #156]	@ (8000e80 <MX_GPIO_Init+0x148>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f001 fbb9 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8000dea:	0021      	movs	r1, r4
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2280      	movs	r2, #128	@ 0x80
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	000c      	movs	r4, r1
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2201      	movs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e08:	193a      	adds	r2, r7, r4
 8000e0a:	23a0      	movs	r3, #160	@ 0xa0
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 fba3 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2240      	movs	r2, #64	@ 0x40
 8000e1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2201      	movs	r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <MX_GPIO_Init+0x144>)
 8000e32:	0019      	movs	r1, r3
 8000e34:	0010      	movs	r0, r2
 8000e36:	f001 fb91 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2284      	movs	r2, #132	@ 0x84
 8000e48:	0392      	lsls	r2, r2, #14
 8000e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000e52:	187a      	adds	r2, r7, r1
 8000e54:	23a0      	movs	r3, #160	@ 0xa0
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 fb7e 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2007      	movs	r0, #7
 8000e66:	f001 f8ef 	bl	8002048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000e6a:	2007      	movs	r0, #7
 8000e6c:	f001 f901 	bl	8002072 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b00b      	add	sp, #44	@ 0x2c
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	50000800 	.word	0x50000800
 8000e80:	50001400 	.word	0x50001400

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	e7fd      	b.n	8000e8c <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0549      	lsls	r1, r1, #21
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	055b      	lsls	r3, r3, #21
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08b      	sub	sp, #44	@ 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	2414      	movs	r4, #20
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	f004 ffe9 	bl	8005ec2 <memset>
  if(hadc->Instance==ADC1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d155      	bne.n	8000fa6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000efa:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000efe:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	0349      	lsls	r1, r1, #13
 8000f04:	430a      	orrs	r2, r1
 8000f06:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	035b      	lsls	r3, r3, #13
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2233      	movs	r2, #51	@ 0x33
 8000f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2203      	movs	r2, #3
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	193a      	adds	r2, r7, r4
 8000f42:	23a0      	movs	r3, #160	@ 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 fb07 	bl	800255c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f50:	4a1a      	ldr	r2, [pc, #104]	@ (8000fbc <HAL_ADC_MspInit+0xe4>)
 8000f52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f56:	2205      	movs	r2, #5
 8000f58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	0052      	lsls	r2, r2, #1
 8000f72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	0192      	lsls	r2, r2, #6
 8000f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 f88d 	bl	80020ac <HAL_DMA_Init>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000f96:	f7ff ff75 	bl	8000e84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b00b      	add	sp, #44	@ 0x2c
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	40012400 	.word	0x40012400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	2000008c 	.word	0x2000008c
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b099      	sub	sp, #100	@ 0x64
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	234c      	movs	r3, #76	@ 0x4c
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	0018      	movs	r0, r3
 8000fce:	2314      	movs	r3, #20
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f004 ff75 	bl	8005ec2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	2424      	movs	r4, #36	@ 0x24
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2328      	movs	r3, #40	@ 0x28
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f004 ff6d 	bl	8005ec2 <memset>
  if(htim_base->Instance==TIM1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a5a      	ldr	r2, [pc, #360]	@ (8001158 <HAL_TIM_Base_MspInit+0x198>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11d      	bne.n	800102e <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	2280      	movs	r2, #128	@ 0x80
 8000ff6:	0392      	lsls	r2, r2, #14
 8000ff8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001000:	193b      	adds	r3, r7, r4
 8001002:	0018      	movs	r0, r3
 8001004:	f002 f9cc 	bl	80033a0 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d001      	beq.n	8001010 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 800100c:	f7ff ff3a 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001010:	4b52      	ldr	r3, [pc, #328]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001014:	4b51      	ldr	r3, [pc, #324]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	0109      	lsls	r1, r1, #4
 800101a:	430a      	orrs	r2, r1
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
 800101e:	4b4f      	ldr	r3, [pc, #316]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4013      	ands	r3, r2
 8001028:	623b      	str	r3, [r7, #32]
 800102a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800102c:	e08f      	b.n	800114e <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	429a      	cmp	r2, r3
 8001038:	d138      	bne.n	80010ac <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103a:	4b48      	ldr	r3, [pc, #288]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 800103c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800103e:	4b47      	ldr	r3, [pc, #284]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001046:	4b45      	ldr	r3, [pc, #276]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800104a:	2201      	movs	r2, #1
 800104c:	4013      	ands	r3, r2
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b42      	ldr	r3, [pc, #264]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001056:	4b41      	ldr	r3, [pc, #260]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001058:	2101      	movs	r1, #1
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	@ 0x34
 800105e:	4b3f      	ldr	r3, [pc, #252]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001062:	2201      	movs	r2, #1
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 800106a:	214c      	movs	r1, #76	@ 0x4c
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	0212      	lsls	r2, r2, #8
 8001072:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2202      	movs	r2, #2
 8001078:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2202      	movs	r2, #2
 800108a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 800108c:	187a      	adds	r2, r7, r1
 800108e:	23a0      	movs	r3, #160	@ 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f001 fa61 	bl	800255c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	200f      	movs	r0, #15
 80010a0:	f000 ffd2 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a4:	200f      	movs	r0, #15
 80010a6:	f000 ffe4 	bl	8002072 <HAL_NVIC_EnableIRQ>
}
 80010aa:	e050      	b.n	800114e <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001160 <HAL_TIM_Base_MspInit+0x1a0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d114      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	4b29      	ldr	r3, [pc, #164]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 80010b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 80010bc:	2102      	movs	r1, #2
 80010be:	430a      	orrs	r2, r1
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 80010c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2010      	movs	r0, #16
 80010d4:	f000 ffb8 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010d8:	2010      	movs	r0, #16
 80010da:	f000 ffca 	bl	8002072 <HAL_NVIC_EnableIRQ>
}
 80010de:	e036      	b.n	800114e <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM16)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001164 <HAL_TIM_Base_MspInit+0x1a4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d116      	bne.n	8001118 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 80010ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	0289      	lsls	r1, r1, #10
 80010f4:	430a      	orrs	r2, r1
 80010f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 80010fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2015      	movs	r0, #21
 800110c:	f000 ff9c 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001110:	2015      	movs	r0, #21
 8001112:	f000 ffae 	bl	8002072 <HAL_NVIC_EnableIRQ>
}
 8001116:	e01a      	b.n	800114e <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM17)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <HAL_TIM_Base_MspInit+0x1a8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d115      	bne.n	800114e <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	02c9      	lsls	r1, r1, #11
 800112c:	430a      	orrs	r2, r1
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_TIM_Base_MspInit+0x19c>)
 8001132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	02db      	lsls	r3, r3, #11
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2016      	movs	r0, #22
 8001144:	f000 ff80 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001148:	2016      	movs	r0, #22
 800114a:	f000 ff92 	bl	8002072 <HAL_NVIC_EnableIRQ>
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b019      	add	sp, #100	@ 0x64
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	40012c00 	.word	0x40012c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40000400 	.word	0x40000400
 8001164:	40014400 	.word	0x40014400
 8001168:	40014800 	.word	0x40014800

0800116c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08b      	sub	sp, #44	@ 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	2414      	movs	r4, #20
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	2314      	movs	r3, #20
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f004 fe9f 	bl	8005ec2 <memset>
  if(htim->Instance==TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <HAL_TIM_MspPostInit+0xb4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d144      	bne.n	8001218 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <HAL_TIM_MspPostInit+0xb8>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <HAL_TIM_MspPostInit+0xb8>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	@ 0x34
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <HAL_TIM_MspPostInit+0xb8>)
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	2201      	movs	r2, #1
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <HAL_TIM_MspPostInit+0xb8>)
 80011a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <HAL_TIM_MspPostInit+0xb8>)
 80011ac:	2102      	movs	r1, #2
 80011ae:	430a      	orrs	r2, r1
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_TIM_MspPostInit+0xb8>)
 80011b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	2202      	movs	r2, #2
 80011ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2202      	movs	r2, #2
 80011dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80011de:	193a      	adds	r2, r7, r4
 80011e0:	23a0      	movs	r3, #160	@ 0xa0
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	0011      	movs	r1, r2
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 f9b8 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 80011ec:	0021      	movs	r1, r4
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2208      	movs	r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2202      	movs	r2, #2
 80011f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2201      	movs	r2, #1
 800120a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 800120c:	187b      	adds	r3, r7, r1
 800120e:	4a06      	ldr	r2, [pc, #24]	@ (8001228 <HAL_TIM_MspPostInit+0xbc>)
 8001210:	0019      	movs	r1, r3
 8001212:	0010      	movs	r0, r2
 8001214:	f001 f9a2 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b00b      	add	sp, #44	@ 0x2c
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	40012c00 	.word	0x40012c00
 8001224:	40021000 	.word	0x40021000
 8001228:	50000400 	.word	0x50000400

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b08b      	sub	sp, #44	@ 0x2c
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	2414      	movs	r4, #20
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	2314      	movs	r3, #20
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f004 fe3f 	bl	8005ec2 <memset>
  if(huart->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <HAL_UART_MspInit+0x148>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d000      	beq.n	8001250 <HAL_UART_MspInit+0x24>
 800124e:	e08d      	b.n	800136c <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001250:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_UART_MspInit+0x14c>)
 8001252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001254:	4b48      	ldr	r3, [pc, #288]	@ (8001378 <HAL_UART_MspInit+0x14c>)
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	0289      	lsls	r1, r1, #10
 800125a:	430a      	orrs	r2, r1
 800125c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800125e:	4b46      	ldr	r3, [pc, #280]	@ (8001378 <HAL_UART_MspInit+0x14c>)
 8001260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	029b      	lsls	r3, r3, #10
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <HAL_UART_MspInit+0x14c>)
 800126e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <HAL_UART_MspInit+0x14c>)
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34
 8001278:	4b3f      	ldr	r3, [pc, #252]	@ (8001378 <HAL_UART_MspInit+0x14c>)
 800127a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001284:	0021      	movs	r1, r4
 8001286:	187b      	adds	r3, r7, r1
 8001288:	220c      	movs	r2, #12
 800128a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2202      	movs	r2, #2
 8001290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2201      	movs	r2, #1
 8001296:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2201      	movs	r2, #1
 80012a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	187a      	adds	r2, r7, r1
 80012a6:	23a0      	movs	r3, #160	@ 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 f955 	bl	800255c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80012b2:	4b32      	ldr	r3, [pc, #200]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012b4:	4a32      	ldr	r2, [pc, #200]	@ (8001380 <HAL_UART_MspInit+0x154>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80012b8:	4b30      	ldr	r3, [pc, #192]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012ba:	2234      	movs	r2, #52	@ 0x34
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012be:	4b2f      	ldr	r3, [pc, #188]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	0152      	lsls	r2, r2, #5
 80012e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_UART_MspInit+0x150>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fedd 	bl	80020ac <HAL_DMA_Init>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80012f6:	f7ff fdc5 	bl	8000e84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	4a1f      	ldr	r2, [pc, #124]	@ (800137c <HAL_UART_MspInit+0x150>)
 8001300:	505a      	str	r2, [r3, r1]
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <HAL_UART_MspInit+0x150>)
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <HAL_UART_MspInit+0x158>)
 800130a:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <HAL_UART_MspInit+0x15c>)
 800130c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001310:	2235      	movs	r2, #53	@ 0x35
 8001312:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001316:	2210      	movs	r2, #16
 8001318:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_UART_MspInit+0x158>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_UART_MspInit+0x158>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_UART_MspInit+0x158>)
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	0152      	lsls	r2, r2, #5
 800133e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001342:	0018      	movs	r0, r3
 8001344:	f000 feb2 	bl	80020ac <HAL_DMA_Init>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800134c:	f7ff fd9a 	bl	8000e84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001354:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_UART_MspInit+0x158>)
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	201c      	movs	r0, #28
 8001362:	f000 fe71 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001366:	201c      	movs	r0, #28
 8001368:	f000 fe83 	bl	8002072 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b00b      	add	sp, #44	@ 0x2c
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	40004400 	.word	0x40004400
 8001378:	40021000 	.word	0x40021000
 800137c:	20000308 	.word	0x20000308
 8001380:	4002001c 	.word	0x4002001c
 8001384:	20000364 	.word	0x20000364
 8001388:	40020030 	.word	0x40020030

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	e7fd      	b.n	8001390 <NMI_Handler+0x4>

08001394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	e7fd      	b.n	8001398 <HardFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f902 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 fa4a 	bl	8002860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <DMA1_Channel1_IRQHandler+0x14>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 ffbc 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	2000008c 	.word	0x2000008c

080013ec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 ffb0 	bl	8002358 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <DMA1_Channel2_3_IRQHandler+0x20>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 ffac 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	20000308 	.word	0x20000308
 800140c:	20000364 	.word	0x20000364

08001410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <TIM2_IRQHandler+0x14>)
 8001416:	0018      	movs	r0, r3
 8001418:	f002 fab4 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	20000144 	.word	0x20000144

08001428 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <TIM3_IRQHandler+0x14>)
 800142e:	0018      	movs	r0, r3
 8001430:	f002 faa8 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	20000190 	.word	0x20000190

08001440 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <TIM16_IRQHandler+0x14>)
 8001446:	0018      	movs	r0, r3
 8001448:	f002 fa9c 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	200001dc 	.word	0x200001dc

08001458 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <TIM17_IRQHandler+0x14>)
 800145e:	0018      	movs	r0, r3
 8001460:	f002 fa90 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	20000228 	.word	0x20000228

08001470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <USART2_IRQHandler+0x14>)
 8001476:	0018      	movs	r0, r3
 8001478:	f003 fcda 	bl	8004e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	20000274 	.word	0x20000274

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001494:	480d      	ldr	r0, [pc, #52]	@ (80014cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001496:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001498:	f7ff fff6 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	@ (80014d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <LoopForever+0xe>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	@ (80014e0 <LoopForever+0x16>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014c2:	f004 fd07 	bl	8005ed4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014c6:	f7fe ffbf 	bl	8000448 <main>

080014ca <LoopForever>:

LoopForever:
  b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   r0, =_estack
 80014cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d8:	08006064 	.word	0x08006064
  ldr r2, =_sbss
 80014dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014e0:	200003c4 	.word	0x200003c4

080014e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_Init+0x3c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Init+0x3c>)
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	0049      	lsls	r1, r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f810 	bl	8001528 <HAL_InitTick>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d003      	beq.n	8001514 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e001      	b.n	8001518 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fcbc 	bl	8000e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	781b      	ldrb	r3, [r3, #0]
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_InitTick+0x88>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d02b      	beq.n	8001598 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_InitTick+0x8c>)
 8001542:	681c      	ldr	r4, [r3, #0]
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_InitTick+0x88>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	0019      	movs	r1, r3
 800154a:	23fa      	movs	r3, #250	@ 0xfa
 800154c:	0098      	lsls	r0, r3, #2
 800154e:	f7fe fdd9 	bl	8000104 <__udivsi3>
 8001552:	0003      	movs	r3, r0
 8001554:	0019      	movs	r1, r3
 8001556:	0020      	movs	r0, r4
 8001558:	f7fe fdd4 	bl	8000104 <__udivsi3>
 800155c:	0003      	movs	r3, r0
 800155e:	0018      	movs	r0, r3
 8001560:	f000 fd97 	bl	8002092 <HAL_SYSTICK_Config>
 8001564:	1e03      	subs	r3, r0, #0
 8001566:	d112      	bne.n	800158e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d80a      	bhi.n	8001584 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	2200      	movs	r2, #0
 8001576:	0018      	movs	r0, r3
 8001578:	f000 fd66 	bl	8002048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_InitTick+0x90>)
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e00d      	b.n	80015a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001584:	230f      	movs	r3, #15
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e008      	b.n	80015a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e003      	b.n	80015a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b005      	add	sp, #20
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_IncTick+0x1c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	001a      	movs	r2, r3
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <HAL_IncTick+0x20>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	18d2      	adds	r2, r2, r3
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_IncTick+0x20>)
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	20000008 	.word	0x20000008
 80015dc:	200003c0 	.word	0x200003c0

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b02      	ldr	r3, [pc, #8]	@ (80015f0 <HAL_GetTick+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	200003c0 	.word	0x200003c0

080015f4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001604:	401a      	ands	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	fe3fffff 	.word	0xfe3fffff

0800161c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	23e0      	movs	r3, #224	@ 0xe0
 800162a:	045b      	lsls	r3, r3, #17
 800162c:	4013      	ands	r3, r2
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}

08001636 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	2104      	movs	r1, #4
 800164a:	400a      	ands	r2, r1
 800164c:	2107      	movs	r1, #7
 800164e:	4091      	lsls	r1, r2
 8001650:	000a      	movs	r2, r1
 8001652:	43d2      	mvns	r2, r2
 8001654:	401a      	ands	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2104      	movs	r1, #4
 800165a:	400b      	ands	r3, r1
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4099      	lsls	r1, r3
 8001660:	000b      	movs	r3, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001668:	46c0      	nop			@ (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bd80      	pop	{r7, pc}

08001670 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	2104      	movs	r1, #4
 8001682:	400a      	ands	r2, r1
 8001684:	2107      	movs	r1, #7
 8001686:	4091      	lsls	r1, r2
 8001688:	000a      	movs	r2, r1
 800168a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2104      	movs	r1, #4
 8001690:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001692:	40da      	lsrs	r2, r3
 8001694:	0013      	movs	r3, r2
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}

0800169e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	211f      	movs	r1, #31
 80016b2:	400a      	ands	r2, r1
 80016b4:	210f      	movs	r1, #15
 80016b6:	4091      	lsls	r1, r2
 80016b8:	000a      	movs	r2, r1
 80016ba:	43d2      	mvns	r2, r2
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	210f      	movs	r1, #15
 80016c4:	4019      	ands	r1, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	201f      	movs	r0, #31
 80016ca:	4003      	ands	r3, r0
 80016cc:	4099      	lsls	r1, r3
 80016ce:	000b      	movs	r3, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}

080016de <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	035b      	lsls	r3, r3, #13
 80016f0:	0b5b      	lsrs	r3, r3, #13
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016f8:	46c0      	nop			@ (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	0352      	lsls	r2, r2, #13
 8001712:	0b52      	lsrs	r2, r2, #13
 8001714:	43d2      	mvns	r2, r2
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	0212      	lsls	r2, r2, #8
 8001738:	43d2      	mvns	r2, r2
 800173a:	401a      	ands	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	400b      	ands	r3, r1
 8001744:	4904      	ldr	r1, [pc, #16]	@ (8001758 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001746:	400b      	ands	r3, r1
 8001748:	431a      	orrs	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	07ffff00 	.word	0x07ffff00

0800175c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <LL_ADC_EnableInternalRegulator+0x24>)
 800176a:	4013      	ands	r3, r2
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	0552      	lsls	r2, r2, #21
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	6fffffe8 	.word	0x6fffffe8

08001784 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	401a      	ands	r2, r3
 8001796:	2380      	movs	r3, #128	@ 0x80
 8001798:	055b      	lsls	r3, r3, #21
 800179a:	429a      	cmp	r2, r3
 800179c:	d101      	bne.n	80017a2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <LL_ADC_IsEnabled+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_IsEnabled+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}

080017ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2204      	movs	r2, #4
 80017dc:	4013      	ands	r3, r2
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	231f      	movs	r3, #31
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e17f      	b.n	8001b16 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fb59 	bl	8000ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2254      	movs	r2, #84	@ 0x54
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ffa3 	bl	8001784 <LL_ADC_IsInternalRegulatorEnabled>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d115      	bne.n	800186e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0018      	movs	r0, r3
 8001848:	f7ff ff88 	bl	800175c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800184c:	4bb4      	ldr	r3, [pc, #720]	@ (8001b20 <HAL_ADC_Init+0x330>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	49b4      	ldr	r1, [pc, #720]	@ (8001b24 <HAL_ADC_Init+0x334>)
 8001852:	0018      	movs	r0, r3
 8001854:	f7fe fc56 	bl	8000104 <__udivsi3>
 8001858:	0003      	movs	r3, r0
 800185a:	3301      	adds	r3, #1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001860:	e002      	b.n	8001868 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff86 	bl	8001784 <LL_ADC_IsInternalRegulatorEnabled>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d10f      	bne.n	800189c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001880:	2210      	movs	r2, #16
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188c:	2201      	movs	r2, #1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001894:	231f      	movs	r3, #31
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ff94 	bl	80017ce <LL_ADC_REG_IsConversionOngoing>
 80018a6:	0003      	movs	r3, r0
 80018a8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	2210      	movs	r2, #16
 80018b0:	4013      	ands	r3, r2
 80018b2:	d000      	beq.n	80018b6 <HAL_ADC_Init+0xc6>
 80018b4:	e122      	b.n	8001afc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <HAL_ADC_Init+0xce>
 80018bc:	e11e      	b.n	8001afc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	4a99      	ldr	r2, [pc, #612]	@ (8001b28 <HAL_ADC_Init+0x338>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	2202      	movs	r2, #2
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff ff6a 	bl	80017ac <LL_ADC_IsEnabled>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d000      	beq.n	80018de <HAL_ADC_Init+0xee>
 80018dc:	e0ad      	b.n	8001a3a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e1b      	ldrb	r3, [r3, #24]
 80018e6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80018e8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7e5b      	ldrb	r3, [r3, #25]
 80018ee:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7e9b      	ldrb	r3, [r3, #26]
 80018f6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_ADC_Init+0x118>
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	e000      	b.n	800190a <HAL_ADC_Init+0x11a>
 8001908:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800190a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001910:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da04      	bge.n	8001924 <HAL_ADC_Init+0x134>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	e001      	b.n	8001928 <HAL_ADC_Init+0x138>
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001928:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	212c      	movs	r1, #44	@ 0x2c
 800192e:	5c5b      	ldrb	r3, [r3, r1]
 8001930:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001932:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d115      	bne.n	8001970 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e9b      	ldrb	r3, [r3, #26]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2280      	movs	r2, #128	@ 0x80
 8001950:	0252      	lsls	r2, r2, #9
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	e00b      	b.n	8001970 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	2220      	movs	r2, #32
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001968:	2201      	movs	r2, #1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800197c:	23e0      	movs	r3, #224	@ 0xe0
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001986:	4313      	orrs	r3, r2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a65      	ldr	r2, [pc, #404]	@ (8001b2c <HAL_ADC_Init+0x33c>)
 8001996:	4013      	ands	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0f9b      	lsrs	r3, r3, #30
 80019aa:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019b0:	4313      	orrs	r3, r2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	223c      	movs	r2, #60	@ 0x3c
 80019bc:	5c9b      	ldrb	r3, [r3, r2]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d111      	bne.n	80019e6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0f9b      	lsrs	r3, r3, #30
 80019c8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019ce:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80019d4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80019da:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	4313      	orrs	r3, r2
 80019e0:	2201      	movs	r2, #1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <HAL_ADC_Init+0x340>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	23c0      	movs	r3, #192	@ 0xc0
 8001a02:	061b      	lsls	r3, r3, #24
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d018      	beq.n	8001a3a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	05db      	lsls	r3, r3, #23
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d012      	beq.n	8001a3a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	061b      	lsls	r3, r3, #24
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d00c      	beq.n	8001a3a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a20:	4b44      	ldr	r3, [pc, #272]	@ (8001b34 <HAL_ADC_Init+0x344>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <HAL_ADC_Init+0x348>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	23f0      	movs	r3, #240	@ 0xf0
 8001a30:	039b      	lsls	r3, r3, #14
 8001a32:	401a      	ands	r2, r3
 8001a34:	4b3f      	ldr	r3, [pc, #252]	@ (8001b34 <HAL_ADC_Init+0x344>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a42:	001a      	movs	r2, r3
 8001a44:	2100      	movs	r1, #0
 8001a46:	f7ff fdf6 	bl	8001636 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a52:	493a      	ldr	r1, [pc, #232]	@ (8001b3c <HAL_ADC_Init+0x34c>)
 8001a54:	001a      	movs	r2, r3
 8001a56:	f7ff fdee 	bl	8001636 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	4249      	negs	r1, r1
 8001a70:	430a      	orrs	r2, r1
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a74:	e018      	b.n	8001aa8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	039b      	lsls	r3, r3, #14
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d112      	bne.n	8001aa8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	221c      	movs	r2, #28
 8001a92:	4013      	ands	r3, r2
 8001a94:	2210      	movs	r2, #16
 8001a96:	4252      	negs	r2, r2
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2100      	movs	r1, #0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff fdde 	bl	8001670 <LL_ADC_GetSamplingTimeCommonChannels>
 8001ab4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d10b      	bne.n	8001ad6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4393      	bics	r3, r2
 8001acc:	2201      	movs	r2, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ad4:	e01c      	b.n	8001b10 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	2212      	movs	r2, #18
 8001adc:	4393      	bics	r3, r2
 8001ade:	2210      	movs	r2, #16
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aea:	2201      	movs	r2, #1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001af2:	231f      	movs	r3, #31
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001afa:	e009      	b.n	8001b10 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	2210      	movs	r2, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b08:	231f      	movs	r3, #31
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b10:	231f      	movs	r3, #31
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b008      	add	sp, #32
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	20000000 	.word	0x20000000
 8001b24:	00030d40 	.word	0x00030d40
 8001b28:	fffffefd 	.word	0xfffffefd
 8001b2c:	ffde0201 	.word	0xffde0201
 8001b30:	1ffffc02 	.word	0x1ffffc02
 8001b34:	40012708 	.word	0x40012708
 8001b38:	ffc3ffff 	.word	0xffc3ffff
 8001b3c:	07ffff04 	.word	0x07ffff04

08001b40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4a:	2317      	movs	r3, #23
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2254      	movs	r2, #84	@ 0x54
 8001b5a:	5c9b      	ldrb	r3, [r3, r2]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x24>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e1c0      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x3a6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2254      	movs	r2, #84	@ 0x54
 8001b68:	2101      	movs	r1, #1
 8001b6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fe2c 	bl	80017ce <LL_ADC_REG_IsConversionOngoing>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d000      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x3c>
 8001b7a:	e1a3      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d100      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x46>
 8001b84:	e143      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d004      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b96:	4ac1      	ldr	r2, [pc, #772]	@ (8001e9c <HAL_ADC_ConfigChannel+0x35c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	f7ff fd99 	bl	80016de <LL_ADC_REG_SetSequencerChAdd>
 8001bac:	e0c9      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	211f      	movs	r1, #31
 8001bb8:	400b      	ands	r3, r1
 8001bba:	210f      	movs	r1, #15
 8001bbc:	4099      	lsls	r1, r3
 8001bbe:	000b      	movs	r3, r1
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	035b      	lsls	r3, r3, #13
 8001bcc:	0b5b      	lsrs	r3, r3, #13
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x9c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	221f      	movs	r2, #31
 8001bd8:	4013      	ands	r3, r2
 8001bda:	e098      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d000      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xa8>
 8001be6:	e091      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1cc>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d000      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0xb4>
 8001bf2:	e089      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x1c8>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d000      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0xc0>
 8001bfe:	e081      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x1c4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2208      	movs	r2, #8
 8001c06:	4013      	ands	r3, r2
 8001c08:	d000      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0xcc>
 8001c0a:	e079      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x1c0>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2210      	movs	r2, #16
 8001c12:	4013      	ands	r3, r2
 8001c14:	d000      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0xd8>
 8001c16:	e071      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x1bc>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d000      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0xe4>
 8001c22:	e069      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x1b8>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2240      	movs	r2, #64	@ 0x40
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d000      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0xf0>
 8001c2e:	e061      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x1b4>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2280      	movs	r2, #128	@ 0x80
 8001c36:	4013      	ands	r3, r2
 8001c38:	d000      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0xfc>
 8001c3a:	e059      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x1b0>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d151      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1ac>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d149      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x1a8>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d141      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1a4>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d139      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1a0>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	015b      	lsls	r3, r3, #5
 8001c74:	4013      	ands	r3, r2
 8001c76:	d131      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x19c>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	019b      	lsls	r3, r3, #6
 8001c80:	4013      	ands	r3, r2
 8001c82:	d129      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x198>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d121      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x194>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d119      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x190>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x18c>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	029b      	lsls	r3, r3, #10
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x188>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	02db      	lsls	r3, r3, #11
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d001      	beq.n	8001cc4 <HAL_ADC_ConfigChannel+0x184>
 8001cc0:	2312      	movs	r3, #18
 8001cc2:	e024      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e022      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cc8:	2311      	movs	r3, #17
 8001cca:	e020      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001ccc:	2310      	movs	r3, #16
 8001cce:	e01e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	e01c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	e01a      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cd8:	230d      	movs	r3, #13
 8001cda:	e018      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cdc:	230c      	movs	r3, #12
 8001cde:	e016      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001ce0:	230b      	movs	r3, #11
 8001ce2:	e014      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	e012      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001ce8:	2309      	movs	r3, #9
 8001cea:	e010      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cec:	2308      	movs	r3, #8
 8001cee:	e00e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	e00c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	e00a      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	e008      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	e006      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e004      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1ce>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6852      	ldr	r2, [r2, #4]
 8001d12:	201f      	movs	r0, #31
 8001d14:	4002      	ands	r2, r0
 8001d16:	4093      	lsls	r3, r2
 8001d18:	000a      	movs	r2, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d808      	bhi.n	8001d42 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	f7ff fcae 	bl	800169e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	001a      	movs	r2, r3
 8001d50:	f7ff fce8 	bl	8001724 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db00      	blt.n	8001d5e <HAL_ADC_ConfigChannel+0x21e>
 8001d5c:	e0bc      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d5e:	4b50      	ldr	r3, [pc, #320]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fc5b 	bl	800161c <LL_ADC_GetCommonPathInternalCh>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x364>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d122      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d7c:	d11d      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	0412      	lsls	r2, r2, #16
 8001d84:	4313      	orrs	r3, r2
 8001d86:	4a46      	ldr	r2, [pc, #280]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001d88:	0019      	movs	r1, r3
 8001d8a:	0010      	movs	r0, r2
 8001d8c:	f7ff fc32 	bl	80015f4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d90:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x368>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4945      	ldr	r1, [pc, #276]	@ (8001eac <HAL_ADC_ConfigChannel+0x36c>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7fe f9b4 	bl	8000104 <__udivsi3>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	0013      	movs	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001db8:	e08e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x370>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10e      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	045b      	lsls	r3, r3, #17
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2280      	movs	r2, #128	@ 0x80
 8001dd2:	0452      	lsls	r2, r2, #17
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001dd8:	0019      	movs	r1, r3
 8001dda:	0010      	movs	r0, r2
 8001ddc:	f7ff fc0a 	bl	80015f4 <LL_ADC_SetCommonPathInternalCh>
 8001de0:	e07a      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a33      	ldr	r2, [pc, #204]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x374>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d000      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x2ae>
 8001dec:	e074      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	03db      	lsls	r3, r3, #15
 8001df4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001df6:	d000      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x2ba>
 8001df8:	e06e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	03d2      	lsls	r2, r2, #15
 8001e00:	4313      	orrs	r3, r2
 8001e02:	4a27      	ldr	r2, [pc, #156]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001e04:	0019      	movs	r1, r3
 8001e06:	0010      	movs	r0, r2
 8001e08:	f7ff fbf4 	bl	80015f4 <LL_ADC_SetCommonPathInternalCh>
 8001e0c:	e064      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d004      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e9c <HAL_ADC_ConfigChannel+0x35c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	0010      	movs	r0, r2
 8001e30:	f7ff fc66 	bl	8001700 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da4d      	bge.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f7ff fbec 	bl	800161c <LL_ADC_GetCommonPathInternalCh>
 8001e44:	0003      	movs	r3, r0
 8001e46:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x364>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d108      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x378>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f7ff fbc9 	bl	80015f4 <LL_ADC_SetCommonPathInternalCh>
 8001e62:	e039      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x370>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d108      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <HAL_ADC_ConfigChannel+0x37c>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001e76:	0019      	movs	r1, r3
 8001e78:	0010      	movs	r0, r2
 8001e7a:	f7ff fbbb 	bl	80015f4 <LL_ADC_SetCommonPathInternalCh>
 8001e7e:	e02b      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x374>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d126      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x380>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	4a03      	ldr	r2, [pc, #12]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x360>)
 8001e92:	0019      	movs	r1, r3
 8001e94:	0010      	movs	r0, r2
 8001e96:	f7ff fbad 	bl	80015f4 <LL_ADC_SetCommonPathInternalCh>
 8001e9a:	e01d      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x398>
 8001e9c:	80000004 	.word	0x80000004
 8001ea0:	40012708 	.word	0x40012708
 8001ea4:	b0001000 	.word	0xb0001000
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	00030d40 	.word	0x00030d40
 8001eb0:	b8004000 	.word	0xb8004000
 8001eb4:	b4002000 	.word	0xb4002000
 8001eb8:	ff7fffff 	.word	0xff7fffff
 8001ebc:	feffffff 	.word	0xfeffffff
 8001ec0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	2220      	movs	r2, #32
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed0:	2317      	movs	r3, #23
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2254      	movs	r2, #84	@ 0x54
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b006      	add	sp, #24
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f02:	d809      	bhi.n	8001f18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	001a      	movs	r2, r3
 8001f0a:	231f      	movs	r3, #31
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_EnableIRQ+0x30>)
 8001f10:	2101      	movs	r1, #1
 8001f12:	4091      	lsls	r1, r2
 8001f14:	000a      	movs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f38:	d828      	bhi.n	8001f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff8 <__NVIC_SetPriority+0xd4>)
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	33c0      	adds	r3, #192	@ 0xc0
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	589b      	ldr	r3, [r3, r2]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	@ 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	@ 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	481f      	ldr	r0, [pc, #124]	@ (8001ff8 <__NVIC_SetPriority+0xd4>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	430a      	orrs	r2, r1
 8001f84:	33c0      	adds	r3, #192	@ 0xc0
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f8a:	e031      	b.n	8001ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <__NVIC_SetPriority+0xd8>)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	0019      	movs	r1, r3
 8001f94:	230f      	movs	r3, #15
 8001f96:	400b      	ands	r3, r1
 8001f98:	3b08      	subs	r3, #8
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3306      	adds	r3, #6
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	18d3      	adds	r3, r2, r3
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1dfa      	adds	r2, r7, #7
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	0011      	movs	r1, r2
 8001fac:	2203      	movs	r2, #3
 8001fae:	400a      	ands	r2, r1
 8001fb0:	00d2      	lsls	r2, r2, #3
 8001fb2:	21ff      	movs	r1, #255	@ 0xff
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	43d2      	mvns	r2, r2
 8001fba:	401a      	ands	r2, r3
 8001fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	22ff      	movs	r2, #255	@ 0xff
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	2303      	movs	r3, #3
 8001fce:	4003      	ands	r3, r0
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd4:	4809      	ldr	r0, [pc, #36]	@ (8001ffc <__NVIC_SetPriority+0xd8>)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	001c      	movs	r4, r3
 8001fdc:	230f      	movs	r3, #15
 8001fde:	4023      	ands	r3, r4
 8001fe0:	3b08      	subs	r3, #8
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	3306      	adds	r3, #6
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	18c3      	adds	r3, r0, r3
 8001fec:	3304      	adds	r3, #4
 8001fee:	601a      	str	r2, [r3, #0]
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	045b      	lsls	r3, r3, #17
 8002010:	429a      	cmp	r2, r3
 8002012:	d301      	bcc.n	8002018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002014:	2301      	movs	r3, #1
 8002016:	e010      	b.n	800203a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002018:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <SysTick_Config+0x44>)
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	3a01      	subs	r2, #1
 800201e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002020:	2301      	movs	r3, #1
 8002022:	425b      	negs	r3, r3
 8002024:	2103      	movs	r1, #3
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff ff7c 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SysTick_Config+0x44>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <SysTick_Config+0x44>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	210f      	movs	r1, #15
 8002054:	187b      	adds	r3, r7, r1
 8002056:	1c02      	adds	r2, r0, #0
 8002058:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	187b      	adds	r3, r7, r1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b004      	add	sp, #16
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	0002      	movs	r2, r0
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b25b      	sxtb	r3, r3
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff ff33 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ffaf 	bl	8002000 <SysTick_Config>
 80020a2:	0003      	movs	r3, r0
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e077      	b.n	80021ae <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3d      	ldr	r2, [pc, #244]	@ (80021b8 <HAL_DMA_Init+0x10c>)
 80020c4:	4694      	mov	ip, r2
 80020c6:	4463      	add	r3, ip
 80020c8:	2114      	movs	r1, #20
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7fe f81a 	bl	8000104 <__udivsi3>
 80020d0:	0003      	movs	r3, r0
 80020d2:	009a      	lsls	r2, r3, #2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2225      	movs	r2, #37	@ 0x25
 80020dc:	2102      	movs	r1, #2
 80020de:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4934      	ldr	r1, [pc, #208]	@ (80021bc <HAL_DMA_Init+0x110>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f9c7 	bl	80024bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	2380      	movs	r3, #128	@ 0x80
 8002134:	01db      	lsls	r3, r3, #7
 8002136:	429a      	cmp	r2, r3
 8002138:	d102      	bne.n	8002140 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	213f      	movs	r1, #63	@ 0x3f
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002156:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d011      	beq.n	8002184 <HAL_DMA_Init+0xd8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d80d      	bhi.n	8002184 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f9d2 	bl	8002514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	e008      	b.n	8002196 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2225      	movs	r2, #37	@ 0x25
 80021a0:	2101      	movs	r1, #1
 80021a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	@ 0x24
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	bffdfff8 	.word	0xbffdfff8
 80021bc:	ffff800f 	.word	0xffff800f

080021c0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e050      	b.n	8002274 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2225      	movs	r2, #37	@ 0x25
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	@ 0x24
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e041      	b.n	8002274 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	210e      	movs	r1, #14
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	491c      	ldr	r1, [pc, #112]	@ (800227c <HAL_DMA_Abort+0xbc>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	438a      	bics	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_DMA_Abort+0xc0>)
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	221c      	movs	r2, #28
 800222a:	4013      	ands	r3, r2
 800222c:	2201      	movs	r2, #1
 800222e:	409a      	lsls	r2, r3
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <HAL_DMA_Abort+0xc0>)
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800223e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00c      	beq.n	8002262 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002252:	490a      	ldr	r1, [pc, #40]	@ (800227c <HAL_DMA_Abort+0xbc>)
 8002254:	400a      	ands	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002260:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2225      	movs	r2, #37	@ 0x25
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2224      	movs	r2, #36	@ 0x24
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}
 800227c:	fffffeff 	.word	0xfffffeff
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	210f      	movs	r1, #15
 800228e:	187b      	adds	r3, r7, r1
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2225      	movs	r2, #37	@ 0x25
 8002298:	5c9b      	ldrb	r3, [r3, r2]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d006      	beq.n	80022ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2204      	movs	r2, #4
 80022a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e049      	b.n	8002342 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	210e      	movs	r1, #14
 80022ba:	438a      	bics	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	438a      	bics	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	491d      	ldr	r1, [pc, #116]	@ (8002350 <HAL_DMA_Abort_IT+0xcc>)
 80022da:	400a      	ands	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022de:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <HAL_DMA_Abort_IT+0xd0>)
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	221c      	movs	r2, #28
 80022e8:	4013      	ands	r3, r2
 80022ea:	2201      	movs	r2, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_DMA_Abort_IT+0xd0>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00c      	beq.n	8002320 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	490f      	ldr	r1, [pc, #60]	@ (8002350 <HAL_DMA_Abort_IT+0xcc>)
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800231e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2225      	movs	r2, #37	@ 0x25
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	@ 0x24
 800232c:	2100      	movs	r1, #0
 800232e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	0010      	movs	r0, r2
 8002340:	4798      	blx	r3
    }
  }
  return status;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	781b      	ldrb	r3, [r3, #0]
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b004      	add	sp, #16
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fffffeff 	.word	0xfffffeff
 8002354:	40020000 	.word	0x40020000

08002358 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002360:	4b55      	ldr	r3, [pc, #340]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	221c      	movs	r2, #28
 8002374:	4013      	ands	r3, r2
 8002376:	2204      	movs	r2, #4
 8002378:	409a      	lsls	r2, r3
 800237a:	0013      	movs	r3, r2
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	d027      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x7a>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2204      	movs	r2, #4
 8002386:	4013      	ands	r3, r2
 8002388:	d023      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	d107      	bne.n	80023a6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2104      	movs	r1, #4
 80023a2:	438a      	bics	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80023a6:	4b44      	ldr	r3, [pc, #272]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	221c      	movs	r2, #28
 80023b0:	4013      	ands	r3, r2
 80023b2:	2204      	movs	r2, #4
 80023b4:	409a      	lsls	r2, r3
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d100      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x6e>
 80023c4:	e073      	b.n	80024ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	0010      	movs	r0, r2
 80023ce:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80023d0:	e06d      	b.n	80024ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	221c      	movs	r2, #28
 80023d8:	4013      	ands	r3, r2
 80023da:	2202      	movs	r2, #2
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	d02e      	beq.n	8002444 <HAL_DMA_IRQHandler+0xec>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2202      	movs	r2, #2
 80023ea:	4013      	ands	r3, r2
 80023ec:	d02a      	beq.n	8002444 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2220      	movs	r2, #32
 80023f6:	4013      	ands	r3, r2
 80023f8:	d10b      	bne.n	8002412 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	210a      	movs	r1, #10
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2225      	movs	r2, #37	@ 0x25
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002412:	4b29      	ldr	r3, [pc, #164]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	221c      	movs	r2, #28
 800241c:	4013      	ands	r3, r2
 800241e:	2202      	movs	r2, #2
 8002420:	409a      	lsls	r2, r3
 8002422:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	@ 0x24
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d03a      	beq.n	80024ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	0010      	movs	r0, r2
 8002440:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002442:	e034      	b.n	80024ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	221c      	movs	r2, #28
 800244a:	4013      	ands	r3, r2
 800244c:	2208      	movs	r2, #8
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	d02b      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x158>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2208      	movs	r2, #8
 800245c:	4013      	ands	r3, r2
 800245e:	d027      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	210e      	movs	r1, #14
 800246c:	438a      	bics	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	221c      	movs	r2, #28
 800247a:	4013      	ands	r3, r2
 800247c:	2201      	movs	r2, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HAL_DMA_IRQHandler+0x160>)
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2225      	movs	r2, #37	@ 0x25
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	@ 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	0010      	movs	r0, r2
 80024ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	46c0      	nop			@ (mov r8, r8)
}
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40020000 	.word	0x40020000

080024bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	4a10      	ldr	r2, [pc, #64]	@ (800250c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80024cc:	4694      	mov	ip, r2
 80024ce:	4463      	add	r3, ip
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	001a      	movs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	001a      	movs	r2, r3
 80024de:	23ff      	movs	r3, #255	@ 0xff
 80024e0:	4013      	ands	r3, r2
 80024e2:	3b08      	subs	r3, #8
 80024e4:	2114      	movs	r1, #20
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7fd fe0c 	bl	8000104 <__udivsi3>
 80024ec:	0003      	movs	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80024f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	221f      	movs	r2, #31
 80024fa:	4013      	ands	r3, r2
 80024fc:	2201      	movs	r2, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}
 800250c:	10008200 	.word	0x10008200
 8002510:	40020880 	.word	0x40020880

08002514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	223f      	movs	r2, #63	@ 0x3f
 8002522:	4013      	ands	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800252a:	4694      	mov	ip, r2
 800252c:	4463      	add	r3, ip
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	001a      	movs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3b01      	subs	r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	4013      	ands	r3, r2
 8002544:	2201      	movs	r2, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}
 8002554:	1000823f 	.word	0x1000823f
 8002558:	40020940 	.word	0x40020940

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256a:	e147      	b.n	80027fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4091      	lsls	r1, r2
 8002576:	000a      	movs	r2, r1
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d100      	bne.n	8002584 <HAL_GPIO_Init+0x28>
 8002582:	e138      	b.n	80027f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	2b01      	cmp	r3, #1
 800258e:	d005      	beq.n	800259c <HAL_GPIO_Init+0x40>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	4013      	ands	r3, r2
 8002598:	2b02      	cmp	r3, #2
 800259a:	d130      	bne.n	80025fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	409a      	lsls	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	43da      	mvns	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	409a      	lsls	r2, r3
 80025be:	0013      	movs	r3, r2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d2:	2201      	movs	r2, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	43da      	mvns	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	2201      	movs	r2, #1
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2203      	movs	r2, #3
 8002604:	4013      	ands	r3, r2
 8002606:	2b03      	cmp	r3, #3
 8002608:	d017      	beq.n	800263a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	4013      	ands	r3, r2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d123      	bne.n	800268e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	58d3      	ldr	r3, [r2, r3]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2207      	movs	r2, #7
 8002658:	4013      	ands	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2107      	movs	r1, #7
 8002672:	400b      	ands	r3, r1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	409a      	lsls	r2, r3
 8002678:	0013      	movs	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	6939      	ldr	r1, [r7, #16]
 800268c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	409a      	lsls	r2, r3
 800269c:	0013      	movs	r3, r2
 800269e:	43da      	mvns	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2203      	movs	r2, #3
 80026ac:	401a      	ands	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	0013      	movs	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	23c0      	movs	r3, #192	@ 0xc0
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	4013      	ands	r3, r2
 80026cc:	d100      	bne.n	80026d0 <HAL_GPIO_Init+0x174>
 80026ce:	e092      	b.n	80027f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80026d0:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3318      	adds	r3, #24
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	589b      	ldr	r3, [r3, r2]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2203      	movs	r2, #3
 80026e2:	4013      	ands	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	220f      	movs	r2, #15
 80026e8:	409a      	lsls	r2, r3
 80026ea:	0013      	movs	r3, r2
 80026ec:	43da      	mvns	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	23a0      	movs	r3, #160	@ 0xa0
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x1ca>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <HAL_GPIO_Init+0x2bc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x1c6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a44      	ldr	r2, [pc, #272]	@ (800281c <HAL_GPIO_Init+0x2c0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x1c2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a43      	ldr	r2, [pc, #268]	@ (8002820 <HAL_GPIO_Init+0x2c4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x1be>
 8002716:	2303      	movs	r3, #3
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x1cc>
 800271a:	2305      	movs	r3, #5
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x1cc>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x1cc>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x1cc>
 8002726:	2300      	movs	r3, #0
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	2103      	movs	r1, #3
 800272c:	400a      	ands	r2, r1
 800272e:	00d2      	lsls	r2, r2, #3
 8002730:	4093      	lsls	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002738:	4936      	ldr	r1, [pc, #216]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3318      	adds	r3, #24
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002746:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	035b      	lsls	r3, r3, #13
 800275e:	4013      	ands	r3, r2
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002770:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43da      	mvns	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	039b      	lsls	r3, r3, #14
 8002788:	4013      	ands	r3, r2
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800279a:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 800279c:	2384      	movs	r3, #132	@ 0x84
 800279e:	58d3      	ldr	r3, [r2, r3]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c0:	4914      	ldr	r1, [pc, #80]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 80027c2:	2284      	movs	r2, #132	@ 0x84
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80027c8:	4a12      	ldr	r2, [pc, #72]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	58d3      	ldr	r3, [r2, r3]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43da      	mvns	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	4013      	ands	r3, r2
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ee:	4909      	ldr	r1, [pc, #36]	@ (8002814 <HAL_GPIO_Init+0x2b8>)
 80027f0:	2280      	movs	r2, #128	@ 0x80
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	40da      	lsrs	r2, r3
 8002804:	1e13      	subs	r3, r2, #0
 8002806:	d000      	beq.n	800280a <HAL_GPIO_Init+0x2ae>
 8002808:	e6b0      	b.n	800256c <HAL_GPIO_Init+0x10>
  }
}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b006      	add	sp, #24
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021800 	.word	0x40021800
 8002818:	50000400 	.word	0x50000400
 800281c:	50000800 	.word	0x50000800
 8002820:	50000c00 	.word	0x50000c00

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	0008      	movs	r0, r1
 800282e:	0011      	movs	r1, r2
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	1c02      	adds	r2, r0, #0
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	1c7b      	adds	r3, r7, #1
 8002838:	1c0a      	adds	r2, r1, #0
 800283a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283c:	1c7b      	adds	r3, r7, #1
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002844:	1cbb      	adds	r3, r7, #2
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800284c:	e003      	b.n	8002856 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800284e:	1cbb      	adds	r3, r7, #2
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b002      	add	sp, #8
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	0002      	movs	r2, r0
 8002868:	1dbb      	adds	r3, r7, #6
 800286a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	1dba      	adds	r2, r7, #6
 8002872:	8812      	ldrh	r2, [r2, #0]
 8002874:	4013      	ands	r3, r2
 8002876:	d008      	beq.n	800288a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800287a:	1dba      	adds	r2, r7, #6
 800287c:	8812      	ldrh	r2, [r2, #0]
 800287e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002880:	1dbb      	adds	r3, r7, #6
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f815 	bl	80028b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	1dba      	adds	r2, r7, #6
 8002890:	8812      	ldrh	r2, [r2, #0]
 8002892:	4013      	ands	r3, r2
 8002894:	d008      	beq.n	80028a8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002898:	1dba      	adds	r2, r7, #6
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800289e:	1dbb      	adds	r3, r7, #6
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f810 	bl	80028c8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021800 	.word	0x40021800

080028b4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	0002      	movs	r2, r0
 80028bc:	1dbb      	adds	r3, r7, #6
 80028be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	0002      	movs	r2, r0
 80028d0:	1dbb      	adds	r3, r7, #6
 80028d2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e03d      	b.n	800296a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a20      	ldr	r2, [pc, #128]	@ (8002974 <HAL_IWDG_Init+0x98>)
 80028f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <HAL_IWDG_Init+0x9c>)
 80028fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6852      	ldr	r2, [r2, #4]
 8002906:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002912:	f7fe fe65 	bl	80015e0 <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800291a:	e00e      	b.n	800293a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800291c:	f7fe fe60 	bl	80015e0 <HAL_GetTick>
 8002920:	0002      	movs	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b31      	cmp	r3, #49	@ 0x31
 8002928:	d907      	bls.n	800293a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2207      	movs	r2, #7
 8002932:	4013      	ands	r3, r2
 8002934:	d001      	beq.n	800293a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e017      	b.n	800296a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2207      	movs	r2, #7
 8002942:	4013      	ands	r3, r2
 8002944:	d1ea      	bne.n	800291c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d005      	beq.n	8002960 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68d2      	ldr	r2, [r2, #12]
 800295c:	611a      	str	r2, [r3, #16]
 800295e:	e003      	b.n	8002968 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a05      	ldr	r2, [pc, #20]	@ (800297c <HAL_IWDG_Init+0xa0>)
 8002966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	0000cccc 	.word	0x0000cccc
 8002978:	00005555 	.word	0x00005555
 800297c:	0000aaaa 	.word	0x0000aaaa

08002980 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d11f      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	0013      	movs	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4912      	ldr	r1, [pc, #72]	@ (80029fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fd fba6 	bl	8000104 <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	3301      	adds	r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029be:	e008      	b.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e001      	b.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e009      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	401a      	ands	r2, r3
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d0ed      	beq.n	80029c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b004      	add	sp, #16
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	40007000 	.word	0x40007000
 80029f4:	fffff9ff 	.word	0xfffff9ff
 80029f8:	20000000 	.word	0x20000000
 80029fc:	000f4240 	.word	0x000f4240

08002a00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	23e0      	movs	r3, #224	@ 0xe0
 8002a0a:	01db      	lsls	r3, r3, #7
 8002a0c:	4013      	ands	r3, r2
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e2fe      	b.n	8003028 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	d100      	bne.n	8002a36 <HAL_RCC_OscConfig+0x1e>
 8002a34:	e07c      	b.n	8002b30 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a36:	4bc3      	ldr	r3, [pc, #780]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2238      	movs	r2, #56	@ 0x38
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a40:	4bc0      	ldr	r3, [pc, #768]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2203      	movs	r2, #3
 8002a46:	4013      	ands	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3e>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	4013      	ands	r3, r2
 8002a66:	d062      	beq.n	8002b2e <HAL_RCC_OscConfig+0x116>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d15e      	bne.n	8002b2e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e2d9      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	025b      	lsls	r3, r3, #9
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x78>
 8002a80:	4bb0      	ldr	r3, [pc, #704]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4baf      	ldr	r3, [pc, #700]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	0249      	lsls	r1, r1, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e020      	b.n	8002ad2 <HAL_RCC_OscConfig+0xba>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	23a0      	movs	r3, #160	@ 0xa0
 8002a96:	02db      	lsls	r3, r3, #11
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d10e      	bne.n	8002aba <HAL_RCC_OscConfig+0xa2>
 8002a9c:	4ba9      	ldr	r3, [pc, #676]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4ba8      	ldr	r3, [pc, #672]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002aa2:	2180      	movs	r1, #128	@ 0x80
 8002aa4:	02c9      	lsls	r1, r1, #11
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	4ba6      	ldr	r3, [pc, #664]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4ba5      	ldr	r3, [pc, #660]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002ab0:	2180      	movs	r1, #128	@ 0x80
 8002ab2:	0249      	lsls	r1, r1, #9
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0xba>
 8002aba:	4ba2      	ldr	r3, [pc, #648]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4ba1      	ldr	r3, [pc, #644]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	49a1      	ldr	r1, [pc, #644]	@ (8002d48 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	4b9f      	ldr	r3, [pc, #636]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b9e      	ldr	r3, [pc, #632]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002acc:	499f      	ldr	r1, [pc, #636]	@ (8002d4c <HAL_RCC_OscConfig+0x334>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d014      	beq.n	8002b04 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fd81 	bl	80015e0 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd7c 	bl	80015e0 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e298      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b93      	ldr	r3, [pc, #588]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xcc>
 8002b02:	e015      	b.n	8002b30 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fd6c 	bl	80015e0 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fd67 	bl	80015e0 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	@ 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e283      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b20:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0xf6>
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d100      	bne.n	8002b3c <HAL_RCC_OscConfig+0x124>
 8002b3a:	e099      	b.n	8002c70 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3c:	4b81      	ldr	r3, [pc, #516]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2238      	movs	r2, #56	@ 0x38
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b46:	4b7f      	ldr	r3, [pc, #508]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_OscConfig+0x144>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d002      	beq.n	8002b62 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d135      	bne.n	8002bce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b62:	4b78      	ldr	r3, [pc, #480]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x162>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e256      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a74      	ldr	r2, [pc, #464]	@ (8002d50 <HAL_RCC_OscConfig+0x338>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d112      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b96:	4b6b      	ldr	r3, [pc, #428]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d54 <HAL_RCC_OscConfig+0x33c>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002baa:	4b66      	ldr	r3, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0adb      	lsrs	r3, r3, #11
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	4a68      	ldr	r2, [pc, #416]	@ (8002d58 <HAL_RCC_OscConfig+0x340>)
 8002bb6:	40da      	lsrs	r2, r3
 8002bb8:	4b68      	ldr	r3, [pc, #416]	@ (8002d5c <HAL_RCC_OscConfig+0x344>)
 8002bba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bbc:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_RCC_OscConfig+0x348>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fe fcb1 	bl	8001528 <HAL_InitTick>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d051      	beq.n	8002c6e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e22c      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d030      	beq.n	8002c38 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5e      	ldr	r2, [pc, #376]	@ (8002d54 <HAL_RCC_OscConfig+0x33c>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002bea:	4b56      	ldr	r3, [pc, #344]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b55      	ldr	r3, [pc, #340]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002bf0:	2180      	movs	r1, #128	@ 0x80
 8002bf2:	0049      	lsls	r1, r1, #1
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fcf2 	bl	80015e0 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe fced 	bl	80015e0 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e209      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c14:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b48      	ldr	r3, [pc, #288]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a4a      	ldr	r2, [pc, #296]	@ (8002d50 <HAL_RCC_OscConfig+0x338>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	021a      	lsls	r2, r3, #8
 8002c30:	4b44      	ldr	r3, [pc, #272]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e01b      	b.n	8002c70 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c38:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c3e:	4949      	ldr	r1, [pc, #292]	@ (8002d64 <HAL_RCC_OscConfig+0x34c>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fccc 	bl	80015e0 <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fcc7 	bl	80015e0 <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1e3      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c60:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x236>
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c6e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2208      	movs	r2, #8
 8002c76:	4013      	ands	r3, r2
 8002c78:	d047      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c7a:	4b32      	ldr	r3, [pc, #200]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2238      	movs	r2, #56	@ 0x38
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b18      	cmp	r3, #24
 8002c84:	d10a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c86:	4b2f      	ldr	r3, [pc, #188]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d03c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d138      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e1c5      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d019      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ca4:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ca8:	4b26      	ldr	r3, [pc, #152]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	430a      	orrs	r2, r1
 8002cae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fc96 	bl	80015e0 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe fc91 	bl	80015e0 <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1ad      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d0f1      	beq.n	8002cba <HAL_RCC_OscConfig+0x2a2>
 8002cd6:	e018      	b.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002cda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cdc:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fc7c 	bl	80015e0 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fe fc77 	bl	80015e0 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e193      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d1f1      	bne.n	8002cee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d100      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2fe>
 8002d14:	e0c6      	b.n	8002ea4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	231f      	movs	r3, #31
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2238      	movs	r2, #56	@ 0x38
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d11e      	bne.n	8002d68 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2202      	movs	r2, #2
 8002d30:	4013      	ands	r3, r2
 8002d32:	d100      	bne.n	8002d36 <HAL_RCC_OscConfig+0x31e>
 8002d34:	e0b6      	b.n	8002ea4 <HAL_RCC_OscConfig+0x48c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d000      	beq.n	8002d40 <HAL_RCC_OscConfig+0x328>
 8002d3e:	e0b1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e171      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	fffeffff 	.word	0xfffeffff
 8002d4c:	fffbffff 	.word	0xfffbffff
 8002d50:	ffff80ff 	.word	0xffff80ff
 8002d54:	ffffc7ff 	.word	0xffffc7ff
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004
 8002d64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d68:	4bb1      	ldr	r3, [pc, #708]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	055b      	lsls	r3, r3, #21
 8002d70:	4013      	ands	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_OscConfig+0x360>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x362>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4bac      	ldr	r3, [pc, #688]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d82:	4bab      	ldr	r3, [pc, #684]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002d84:	2180      	movs	r1, #128	@ 0x80
 8002d86:	0549      	lsls	r1, r1, #21
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d8c:	4ba8      	ldr	r3, [pc, #672]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d9a:	231f      	movs	r3, #31
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da2:	4ba4      	ldr	r3, [pc, #656]	@ (8003034 <HAL_RCC_OscConfig+0x61c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dae:	4ba1      	ldr	r3, [pc, #644]	@ (8003034 <HAL_RCC_OscConfig+0x61c>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4ba0      	ldr	r3, [pc, #640]	@ (8003034 <HAL_RCC_OscConfig+0x61c>)
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	0049      	lsls	r1, r1, #1
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fc10 	bl	80015e0 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7fe fc0b 	bl	80015e0 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e127      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd8:	4b96      	ldr	r3, [pc, #600]	@ (8003034 <HAL_RCC_OscConfig+0x61c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4013      	ands	r3, r2
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3e2>
 8002dec:	4b90      	ldr	r3, [pc, #576]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002dee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002df0:	4b8f      	ldr	r3, [pc, #572]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	430a      	orrs	r2, r1
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002df8:	e01c      	b.n	8002e34 <HAL_RCC_OscConfig+0x41c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x404>
 8002e02:	4b8b      	ldr	r3, [pc, #556]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e06:	4b8a      	ldr	r3, [pc, #552]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e08:	2104      	movs	r1, #4
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e0e:	4b88      	ldr	r3, [pc, #544]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e12:	4b87      	ldr	r3, [pc, #540]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0x41c>
 8002e1c:	4b84      	ldr	r3, [pc, #528]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e20:	4b83      	ldr	r3, [pc, #524]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	438a      	bics	r2, r1
 8002e26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e28:	4b81      	ldr	r3, [pc, #516]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e2c:	4b80      	ldr	r3, [pc, #512]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	2104      	movs	r1, #4
 8002e30:	438a      	bics	r2, r1
 8002e32:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d014      	beq.n	8002e66 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fbd0 	bl	80015e0 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fbcb 	bl	80015e0 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	4a79      	ldr	r2, [pc, #484]	@ (8003038 <HAL_RCC_OscConfig+0x620>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0e6      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5a:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4013      	ands	r3, r2
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x42e>
 8002e64:	e013      	b.n	8002e8e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fbbb 	bl	80015e0 <HAL_GetTick>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e6e:	e009      	b.n	8002e84 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fbb6 	bl	80015e0 <HAL_GetTick>
 8002e74:	0002      	movs	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003038 <HAL_RCC_OscConfig+0x620>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0d1      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e84:	4b6a      	ldr	r3, [pc, #424]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	2202      	movs	r2, #2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e8e:	231f      	movs	r3, #31
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b65      	ldr	r3, [pc, #404]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e9c:	4b64      	ldr	r3, [pc, #400]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002e9e:	4967      	ldr	r1, [pc, #412]	@ (800303c <HAL_RCC_OscConfig+0x624>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d100      	bne.n	8002eae <HAL_RCC_OscConfig+0x496>
 8002eac:	e0bb      	b.n	8003026 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eae:	4b60      	ldr	r3, [pc, #384]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2238      	movs	r2, #56	@ 0x38
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d100      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4a4>
 8002eba:	e07b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d156      	bne.n	8002f72 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b59      	ldr	r3, [pc, #356]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002eca:	495d      	ldr	r1, [pc, #372]	@ (8003040 <HAL_RCC_OscConfig+0x628>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fb86 	bl	80015e0 <HAL_GetTick>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fb81 	bl	80015e0 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e09d      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	4b50      	ldr	r3, [pc, #320]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	049b      	lsls	r3, r3, #18
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a51      	ldr	r2, [pc, #324]	@ (8003044 <HAL_RCC_OscConfig+0x62c>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	431a      	orrs	r2, r3
 8002f26:	4b42      	ldr	r3, [pc, #264]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b40      	ldr	r3, [pc, #256]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b3f      	ldr	r3, [pc, #252]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	0449      	lsls	r1, r1, #17
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f40:	2180      	movs	r1, #128	@ 0x80
 8002f42:	0549      	lsls	r1, r1, #21
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fb4a 	bl	80015e0 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fb45 	bl	80015e0 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e061      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	049b      	lsls	r3, r3, #18
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x53a>
 8002f70:	e059      	b.n	8003026 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b2f      	ldr	r3, [pc, #188]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b2e      	ldr	r3, [pc, #184]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f78:	4931      	ldr	r1, [pc, #196]	@ (8003040 <HAL_RCC_OscConfig+0x628>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fb2f 	bl	80015e0 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fb2a 	bl	80015e0 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e046      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	049b      	lsls	r3, r3, #18
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002fac:	4926      	ldr	r1, [pc, #152]	@ (8003048 <HAL_RCC_OscConfig+0x630>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	e038      	b.n	8003026 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e033      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d126      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2270      	movs	r2, #112	@ 0x70
 8002fd8:	401a      	ands	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d11f      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	23fe      	movs	r3, #254	@ 0xfe
 8002fe6:	01db      	lsls	r3, r3, #7
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d116      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	23f8      	movs	r3, #248	@ 0xf8
 8002ff8:	039b      	lsls	r3, r3, #14
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d10e      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	23e0      	movs	r3, #224	@ 0xe0
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	0f5b      	lsrs	r3, r3, #29
 8003018:	075a      	lsls	r2, r3, #29
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b008      	add	sp, #32
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
 8003038:	00001388 	.word	0x00001388
 800303c:	efffffff 	.word	0xefffffff
 8003040:	feffffff 	.word	0xfeffffff
 8003044:	11c1808c 	.word	0x11c1808c
 8003048:	eefefffc 	.word	0xeefefffc

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0e9      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b76      	ldr	r3, [pc, #472]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2207      	movs	r2, #7
 8003066:	4013      	ands	r3, r2
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d91e      	bls.n	80030ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b73      	ldr	r3, [pc, #460]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2207      	movs	r2, #7
 8003074:	4393      	bics	r3, r2
 8003076:	0019      	movs	r1, r3
 8003078:	4b70      	ldr	r3, [pc, #448]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003080:	f7fe faae 	bl	80015e0 <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003088:	e009      	b.n	800309e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308a:	f7fe faa9 	bl	80015e0 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	4a6a      	ldr	r2, [pc, #424]	@ (8003240 <HAL_RCC_ClockConfig+0x1f4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0ca      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800309e:	4b67      	ldr	r3, [pc, #412]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2207      	movs	r2, #7
 80030a4:	4013      	ands	r3, r2
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1ee      	bne.n	800308a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2202      	movs	r2, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	d015      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d006      	beq.n	80030ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030c0:	4b60      	ldr	r3, [pc, #384]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4b5f      	ldr	r3, [pc, #380]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 80030c6:	21e0      	movs	r1, #224	@ 0xe0
 80030c8:	01c9      	lsls	r1, r1, #7
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4a5d      	ldr	r2, [pc, #372]	@ (8003248 <HAL_RCC_ClockConfig+0x1fc>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	d057      	beq.n	800319c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	4013      	ands	r3, r2
 80030fe:	d12b      	bne.n	8003158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e097      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310c:	4b4d      	ldr	r3, [pc, #308]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	049b      	lsls	r3, r3, #18
 8003114:	4013      	ands	r3, r2
 8003116:	d11f      	bne.n	8003158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e08b      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003124:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4013      	ands	r3, r2
 800312e:	d113      	bne.n	8003158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e07f      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d106      	bne.n	800314a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800313c:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800313e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003140:	2202      	movs	r2, #2
 8003142:	4013      	ands	r3, r2
 8003144:	d108      	bne.n	8003158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e074      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314a:	4b3e      	ldr	r3, [pc, #248]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	2202      	movs	r2, #2
 8003150:	4013      	ands	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e06d      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003158:	4b3a      	ldr	r3, [pc, #232]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2207      	movs	r2, #7
 800315e:	4393      	bics	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4b37      	ldr	r3, [pc, #220]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 8003168:	430a      	orrs	r2, r1
 800316a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fe fa38 	bl	80015e0 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	e009      	b.n	800318a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7fe fa33 	bl	80015e0 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	4a2f      	ldr	r2, [pc, #188]	@ (8003240 <HAL_RCC_ClockConfig+0x1f4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e054      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2e      	ldr	r3, [pc, #184]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2238      	movs	r2, #56	@ 0x38
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	429a      	cmp	r2, r3
 800319a:	d1ec      	bne.n	8003176 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2207      	movs	r2, #7
 80031a2:	4013      	ands	r3, r2
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d21e      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2207      	movs	r2, #7
 80031b0:	4393      	bics	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	4b21      	ldr	r3, [pc, #132]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031bc:	f7fe fa10 	bl	80015e0 <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c4:	e009      	b.n	80031da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	f7fe fa0b 	bl	80015e0 <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003240 <HAL_RCC_ClockConfig+0x1f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e02c      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2207      	movs	r2, #7
 80031e0:	4013      	ands	r3, r2
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2204      	movs	r2, #4
 80031ee:	4013      	ands	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031f2:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4a15      	ldr	r2, [pc, #84]	@ (800324c <HAL_RCC_ClockConfig+0x200>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003206:	f000 f829 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800320a:	0001      	movs	r1, r0
 800320c:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	220f      	movs	r2, #15
 8003214:	401a      	ands	r2, r3
 8003216:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <HAL_RCC_ClockConfig+0x204>)
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	58d3      	ldr	r3, [r2, r3]
 800321c:	221f      	movs	r2, #31
 800321e:	4013      	ands	r3, r2
 8003220:	000a      	movs	r2, r1
 8003222:	40da      	lsrs	r2, r3
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003226:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x20c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0018      	movs	r0, r3
 800322e:	f7fe f97b 	bl	8001528 <HAL_InitTick>
 8003232:	0003      	movs	r3, r0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40022000 	.word	0x40022000
 8003240:	00001388 	.word	0x00001388
 8003244:	40021000 	.word	0x40021000
 8003248:	fffff0ff 	.word	0xfffff0ff
 800324c:	ffff8fff 	.word	0xffff8fff
 8003250:	08005f34 	.word	0x08005f34
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003262:	4b3c      	ldr	r3, [pc, #240]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2238      	movs	r2, #56	@ 0x38
 8003268:	4013      	ands	r3, r2
 800326a:	d10f      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0adb      	lsrs	r3, r3, #11
 8003272:	2207      	movs	r2, #7
 8003274:	4013      	ands	r3, r2
 8003276:	2201      	movs	r2, #1
 8003278:	409a      	lsls	r2, r3
 800327a:	0013      	movs	r3, r2
 800327c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800327e:	6839      	ldr	r1, [r7, #0]
 8003280:	4835      	ldr	r0, [pc, #212]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003282:	f7fc ff3f 	bl	8000104 <__udivsi3>
 8003286:	0003      	movs	r3, r0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e05d      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800328c:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2238      	movs	r2, #56	@ 0x38
 8003292:	4013      	ands	r3, r2
 8003294:	2b08      	cmp	r3, #8
 8003296:	d102      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003298:	4b30      	ldr	r3, [pc, #192]	@ (800335c <HAL_RCC_GetSysClockFreq+0x100>)
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	e054      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329e:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2238      	movs	r2, #56	@ 0x38
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d138      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2203      	movs	r2, #3
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b4:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	2207      	movs	r2, #7
 80032bc:	4013      	ands	r3, r2
 80032be:	3301      	adds	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4824      	ldr	r0, [pc, #144]	@ (800335c <HAL_RCC_GetSysClockFreq+0x100>)
 80032cc:	f7fc ff1a 	bl	8000104 <__udivsi3>
 80032d0:	0003      	movs	r3, r0
 80032d2:	0019      	movs	r1, r3
 80032d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	227f      	movs	r2, #127	@ 0x7f
 80032dc:	4013      	ands	r3, r2
 80032de:	434b      	muls	r3, r1
 80032e0:	617b      	str	r3, [r7, #20]
        break;
 80032e2:	e00d      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	481c      	ldr	r0, [pc, #112]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032e8:	f7fc ff0c 	bl	8000104 <__udivsi3>
 80032ec:	0003      	movs	r3, r0
 80032ee:	0019      	movs	r1, r3
 80032f0:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	227f      	movs	r2, #127	@ 0x7f
 80032f8:	4013      	ands	r3, r2
 80032fa:	434b      	muls	r3, r1
 80032fc:	617b      	str	r3, [r7, #20]
        break;
 80032fe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003300:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0f5b      	lsrs	r3, r3, #29
 8003306:	2207      	movs	r2, #7
 8003308:	4013      	ands	r3, r2
 800330a:	3301      	adds	r3, #1
 800330c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	6978      	ldr	r0, [r7, #20]
 8003312:	f7fc fef7 	bl	8000104 <__udivsi3>
 8003316:	0003      	movs	r3, r0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e015      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800331c:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2238      	movs	r2, #56	@ 0x38
 8003322:	4013      	ands	r3, r2
 8003324:	2b20      	cmp	r3, #32
 8003326:	d103      	bne.n	8003330 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	e00b      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003330:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2238      	movs	r2, #56	@ 0x38
 8003336:	4013      	ands	r3, r2
 8003338:	2b18      	cmp	r3, #24
 800333a:	d103      	bne.n	8003344 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800333c:	23fa      	movs	r3, #250	@ 0xfa
 800333e:	01db      	lsls	r3, r3, #7
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e001      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003348:	693b      	ldr	r3, [r7, #16]
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b006      	add	sp, #24
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	40021000 	.word	0x40021000
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200

08003360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b02      	ldr	r3, [pc, #8]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x10>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	20000000 	.word	0x20000000

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003378:	f7ff fff2 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 800337c:	0004      	movs	r4, r0
 800337e:	f7ff fb3f 	bl	8002a00 <LL_RCC_GetAPB1Prescaler>
 8003382:	0003      	movs	r3, r0
 8003384:	0b1a      	lsrs	r2, r3, #12
 8003386:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	58d3      	ldr	r3, [r2, r3]
 800338c:	221f      	movs	r2, #31
 800338e:	4013      	ands	r3, r2
 8003390:	40dc      	lsrs	r4, r3
 8003392:	0023      	movs	r3, r4
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	bdb0      	pop	{r4, r5, r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	08005f74 	.word	0x08005f74

080033a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033a8:	2313      	movs	r3, #19
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b0:	2312      	movs	r3, #18
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	4013      	ands	r3, r2
 80033c2:	d100      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033c4:	e0a3      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2011      	movs	r0, #17
 80033c8:	183b      	adds	r3, r7, r0
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4ba5      	ldr	r3, [pc, #660]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	055b      	lsls	r3, r3, #21
 80033d6:	4013      	ands	r3, r2
 80033d8:	d110      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	4ba2      	ldr	r3, [pc, #648]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033de:	4ba1      	ldr	r3, [pc, #644]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	0549      	lsls	r1, r1, #21
 80033e4:	430a      	orrs	r2, r1
 80033e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033e8:	4b9e      	ldr	r3, [pc, #632]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	055b      	lsls	r3, r3, #21
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fc:	4b9a      	ldr	r3, [pc, #616]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b99      	ldr	r3, [pc, #612]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003402:	2180      	movs	r1, #128	@ 0x80
 8003404:	0049      	lsls	r1, r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800340a:	f7fe f8e9 	bl	80015e0 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003412:	e00b      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fe f8e4 	bl	80015e0 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d904      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003422:	2313      	movs	r3, #19
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	2203      	movs	r2, #3
 8003428:	701a      	strb	r2, [r3, #0]
        break;
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342c:	4b8e      	ldr	r3, [pc, #568]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d0ed      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003438:	2313      	movs	r3, #19
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d154      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003444:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003446:	23c0      	movs	r3, #192	@ 0xc0
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4013      	ands	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d019      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d014      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345e:	4b81      	ldr	r3, [pc, #516]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003462:	4a82      	ldr	r2, [pc, #520]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003464:	4013      	ands	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003468:	4b7e      	ldr	r3, [pc, #504]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800346a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800346c:	4b7d      	ldr	r3, [pc, #500]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	0249      	lsls	r1, r1, #9
 8003472:	430a      	orrs	r2, r1
 8003474:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003478:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800347a:	4b7a      	ldr	r3, [pc, #488]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800347c:	497c      	ldr	r1, [pc, #496]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800347e:	400a      	ands	r2, r1
 8003480:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003482:	4b78      	ldr	r3, [pc, #480]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	d016      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f8a6 	bl	80015e0 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003498:	e00c      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fe f8a1 	bl	80015e0 <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	4a73      	ldr	r2, [pc, #460]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d904      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80034aa:	2313      	movs	r3, #19
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	2203      	movs	r2, #3
 80034b0:	701a      	strb	r2, [r3, #0]
            break;
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d0ed      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034be:	2313      	movs	r3, #19
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c8:	4b66      	ldr	r3, [pc, #408]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	4a67      	ldr	r2, [pc, #412]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d6:	4b63      	ldr	r3, [pc, #396]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034d8:	430a      	orrs	r2, r1
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034dc:	e00c      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034de:	2312      	movs	r3, #18
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2213      	movs	r2, #19
 80034e4:	18ba      	adds	r2, r7, r2
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e005      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	2312      	movs	r3, #18
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2213      	movs	r2, #19
 80034f2:	18ba      	adds	r2, r7, r2
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034f8:	2311      	movs	r3, #17
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b58      	ldr	r3, [pc, #352]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003506:	4b57      	ldr	r3, [pc, #348]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003508:	495b      	ldr	r1, [pc, #364]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800350a:	400a      	ands	r2, r1
 800350c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	4013      	ands	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003518:	4b52      	ldr	r3, [pc, #328]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800351a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351c:	2203      	movs	r2, #3
 800351e:	4393      	bics	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4b4f      	ldr	r3, [pc, #316]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003528:	430a      	orrs	r2, r1
 800352a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2210      	movs	r2, #16
 8003532:	4013      	ands	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003536:	4b4b      	ldr	r3, [pc, #300]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	4a50      	ldr	r2, [pc, #320]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003546:	430a      	orrs	r2, r1
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4013      	ands	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003556:	4b43      	ldr	r3, [pc, #268]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	4a49      	ldr	r2, [pc, #292]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800355c:	4013      	ands	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003566:	430a      	orrs	r2, r1
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	2380      	movs	r3, #128	@ 0x80
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4013      	ands	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003576:	4b3b      	ldr	r3, [pc, #236]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357a:	4a42      	ldr	r2, [pc, #264]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800357c:	4013      	ands	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003586:	430a      	orrs	r2, r1
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2220      	movs	r2, #32
 8003590:	4013      	ands	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003594:	4b33      	ldr	r3, [pc, #204]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	4a3b      	ldr	r2, [pc, #236]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	4b30      	ldr	r3, [pc, #192]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	01db      	lsls	r3, r3, #7
 80035b0:	4013      	ands	r3, r2
 80035b2:	d015      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	0899      	lsrs	r1, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	05db      	lsls	r3, r3, #23
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d106      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	0249      	lsls	r1, r1, #9
 80035dc:	430a      	orrs	r2, r1
 80035de:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	039b      	lsls	r3, r3, #14
 80035e8:	4013      	ands	r3, r2
 80035ea:	d016      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	4a26      	ldr	r2, [pc, #152]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	03db      	lsls	r3, r3, #15
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003612:	2180      	movs	r1, #128	@ 0x80
 8003614:	0449      	lsls	r1, r1, #17
 8003616:	430a      	orrs	r2, r1
 8003618:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4013      	ands	r3, r2
 8003624:	d016      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003626:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362c:	4013      	ands	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003636:	430a      	orrs	r2, r1
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	2380      	movs	r3, #128	@ 0x80
 8003640:	01db      	lsls	r3, r3, #7
 8003642:	429a      	cmp	r2, r3
 8003644:	d106      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800364c:	2180      	movs	r1, #128	@ 0x80
 800364e:	0249      	lsls	r1, r1, #9
 8003650:	430a      	orrs	r2, r1
 8003652:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003654:	2312      	movs	r3, #18
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	781b      	ldrb	r3, [r3, #0]
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b006      	add	sp, #24
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	fffffcff 	.word	0xfffffcff
 8003670:	fffeffff 	.word	0xfffeffff
 8003674:	00001388 	.word	0x00001388
 8003678:	efffffff 	.word	0xefffffff
 800367c:	fffff3ff 	.word	0xfffff3ff
 8003680:	fff3ffff 	.word	0xfff3ffff
 8003684:	ffcfffff 	.word	0xffcfffff
 8003688:	ffffcfff 	.word	0xffffcfff
 800368c:	ffbfffff 	.word	0xffbfffff
 8003690:	ffff3fff 	.word	0xffff3fff

08003694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e04a      	b.n	800373c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223d      	movs	r2, #61	@ 0x3d
 80036aa:	5c9b      	ldrb	r3, [r3, r2]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223c      	movs	r2, #60	@ 0x3c
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd fc7f 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223d      	movs	r2, #61	@ 0x3d
 80036c6:	2102      	movs	r1, #2
 80036c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	0019      	movs	r1, r3
 80036d4:	0010      	movs	r0, r2
 80036d6:	f000 fd5f 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2248      	movs	r2, #72	@ 0x48
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223e      	movs	r2, #62	@ 0x3e
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	223f      	movs	r2, #63	@ 0x3f
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2240      	movs	r2, #64	@ 0x40
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2241      	movs	r2, #65	@ 0x41
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2242      	movs	r2, #66	@ 0x42
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2243      	movs	r2, #67	@ 0x43
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2244      	movs	r2, #68	@ 0x44
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2245      	movs	r2, #69	@ 0x45
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2246      	movs	r2, #70	@ 0x46
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2247      	movs	r2, #71	@ 0x47
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	223d      	movs	r2, #61	@ 0x3d
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e04a      	b.n	80037ec <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223d      	movs	r2, #61	@ 0x3d
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	223c      	movs	r2, #60	@ 0x3c
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 f841 	bl	80037f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223d      	movs	r2, #61	@ 0x3d
 8003776:	2102      	movs	r1, #2
 8003778:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f000 fd07 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2248      	movs	r2, #72	@ 0x48
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	223e      	movs	r2, #62	@ 0x3e
 8003796:	2101      	movs	r1, #1
 8003798:	5499      	strb	r1, [r3, r2]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	223f      	movs	r2, #63	@ 0x3f
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2240      	movs	r2, #64	@ 0x40
 80037a6:	2101      	movs	r1, #1
 80037a8:	5499      	strb	r1, [r3, r2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2241      	movs	r2, #65	@ 0x41
 80037ae:	2101      	movs	r1, #1
 80037b0:	5499      	strb	r1, [r3, r2]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2242      	movs	r2, #66	@ 0x42
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2243      	movs	r2, #67	@ 0x43
 80037be:	2101      	movs	r1, #1
 80037c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2244      	movs	r2, #68	@ 0x44
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2245      	movs	r2, #69	@ 0x45
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2246      	movs	r2, #70	@ 0x46
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2247      	movs	r2, #71	@ 0x47
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223d      	movs	r2, #61	@ 0x3d
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e04a      	b.n	80038ac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223d      	movs	r2, #61	@ 0x3d
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223c      	movs	r2, #60	@ 0x3c
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 f841 	bl	80038b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223d      	movs	r2, #61	@ 0x3d
 8003836:	2102      	movs	r1, #2
 8003838:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	0019      	movs	r1, r3
 8003844:	0010      	movs	r0, r2
 8003846:	f000 fca7 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2248      	movs	r2, #72	@ 0x48
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223e      	movs	r2, #62	@ 0x3e
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223f      	movs	r2, #63	@ 0x3f
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2240      	movs	r2, #64	@ 0x40
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2241      	movs	r2, #65	@ 0x41
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2242      	movs	r2, #66	@ 0x42
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2243      	movs	r2, #67	@ 0x43
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2244      	movs	r2, #68	@ 0x44
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2245      	movs	r2, #69	@ 0x45
 800388e:	2101      	movs	r1, #1
 8003890:	5499      	strb	r1, [r3, r2]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2246      	movs	r2, #70	@ 0x46
 8003896:	2101      	movs	r1, #1
 8003898:	5499      	strb	r1, [r3, r2]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2247      	movs	r2, #71	@ 0x47
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	223d      	movs	r2, #61	@ 0x3d
 80038a6:	2101      	movs	r1, #1
 80038a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b002      	add	sp, #8
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e04a      	b.n	800396c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	223d      	movs	r2, #61	@ 0x3d
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	223c      	movs	r2, #60	@ 0x3c
 80038e6:	2100      	movs	r1, #0
 80038e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f841 	bl	8003974 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	223d      	movs	r2, #61	@ 0x3d
 80038f6:	2102      	movs	r1, #2
 80038f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	0019      	movs	r1, r3
 8003904:	0010      	movs	r0, r2
 8003906:	f000 fc47 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2248      	movs	r2, #72	@ 0x48
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	223e      	movs	r2, #62	@ 0x3e
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	223f      	movs	r2, #63	@ 0x3f
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2240      	movs	r2, #64	@ 0x40
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2241      	movs	r2, #65	@ 0x41
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2242      	movs	r2, #66	@ 0x42
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2243      	movs	r2, #67	@ 0x43
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2244      	movs	r2, #68	@ 0x44
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2245      	movs	r2, #69	@ 0x45
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2246      	movs	r2, #70	@ 0x46
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2247      	movs	r2, #71	@ 0x47
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	223d      	movs	r2, #61	@ 0x3d
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2202      	movs	r2, #2
 80039a0:	4013      	ands	r3, r2
 80039a2:	d021      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2202      	movs	r2, #2
 80039a8:	4013      	ands	r3, r2
 80039aa:	d01d      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2203      	movs	r2, #3
 80039b2:	4252      	negs	r2, r2
 80039b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2203      	movs	r2, #3
 80039c4:	4013      	ands	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fbcc 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e007      	b.n	80039e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 fbbf 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 fbcb 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2204      	movs	r2, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2204      	movs	r2, #4
 80039f4:	4013      	ands	r3, r2
 80039f6:	d01e      	beq.n	8003a36 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2205      	movs	r2, #5
 80039fe:	4252      	negs	r2, r2
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	23c0      	movs	r3, #192	@ 0xc0
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4013      	ands	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fba5 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e007      	b.n	8003a30 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fb98 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fba4 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d021      	beq.n	8003a82 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2208      	movs	r2, #8
 8003a42:	4013      	ands	r3, r2
 8003a44:	d01d      	beq.n	8003a82 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2209      	movs	r2, #9
 8003a4c:	4252      	negs	r2, r2
 8003a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 fb7f 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 8003a6a:	e007      	b.n	8003a7c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fb72 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fb7e 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2210      	movs	r2, #16
 8003a86:	4013      	ands	r3, r2
 8003a88:	d022      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d01e      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2211      	movs	r2, #17
 8003a98:	4252      	negs	r2, r2
 8003a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	23c0      	movs	r3, #192	@ 0xc0
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4013      	ands	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 fb58 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e007      	b.n	8003aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 fb4b 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 fb57 	bl	8004178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d00c      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	d008      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4252      	negs	r2, r2
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 fb2b 	bl	8004148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	4013      	ands	r3, r2
 8003af8:	d104      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	019b      	lsls	r3, r3, #6
 8003b00:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b02:	d00b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2280      	movs	r2, #128	@ 0x80
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1e      	ldr	r2, [pc, #120]	@ (8003b8c <HAL_TIM_IRQHandler+0x208>)
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f001 f924 	bl	8004d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	2380      	movs	r3, #128	@ 0x80
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a17      	ldr	r2, [pc, #92]	@ (8003b90 <HAL_TIM_IRQHandler+0x20c>)
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f001 f91b 	bl	8004d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2240      	movs	r2, #64	@ 0x40
 8003b42:	4013      	ands	r3, r2
 8003b44:	d00c      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d008      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2241      	movs	r2, #65	@ 0x41
 8003b54:	4252      	negs	r2, r2
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 fb14 	bl	8004188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2220      	movs	r2, #32
 8003b64:	4013      	ands	r3, r2
 8003b66:	d00c      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d008      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2221      	movs	r2, #33	@ 0x21
 8003b76:	4252      	negs	r2, r2
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f001 f8e9 	bl	8004d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b004      	add	sp, #16
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	ffffdf7f 	.word	0xffffdf7f
 8003b90:	fffffeff 	.word	0xfffffeff

08003b94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2317      	movs	r3, #23
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	223c      	movs	r2, #60	@ 0x3c
 8003bac:	5c9b      	ldrb	r3, [r3, r2]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_OC_ConfigChannel+0x22>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e048      	b.n	8003c48 <HAL_TIM_OC_ConfigChannel+0xb4>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	223c      	movs	r2, #60	@ 0x3c
 8003bba:	2101      	movs	r1, #1
 8003bbc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b14      	cmp	r3, #20
 8003bc2:	d835      	bhi.n	8003c30 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	009a      	lsls	r2, r3, #2
 8003bc8:	4b21      	ldr	r3, [pc, #132]	@ (8003c50 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003bca:	18d3      	adds	r3, r2, r3
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fb61 	bl	80042a0 <TIM_OC1_SetConfig>
      break;
 8003bde:	e02c      	b.n	8003c3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fbd9 	bl	80043a0 <TIM_OC2_SetConfig>
      break;
 8003bee:	e024      	b.n	8003c3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 fc4f 	bl	800449c <TIM_OC3_SetConfig>
      break;
 8003bfe:	e01c      	b.n	8003c3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f000 fcc9 	bl	80045a0 <TIM_OC4_SetConfig>
      break;
 8003c0e:	e014      	b.n	8003c3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	0011      	movs	r1, r2
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 fd25 	bl	8004668 <TIM_OC5_SetConfig>
      break;
 8003c1e:	e00c      	b.n	8003c3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 fd77 	bl	800471c <TIM_OC6_SetConfig>
      break;
 8003c2e:	e004      	b.n	8003c3a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003c30:	2317      	movs	r3, #23
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
      break;
 8003c38:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	223c      	movs	r2, #60	@ 0x3c
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]

  return status;
 8003c42:	2317      	movs	r3, #23
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	781b      	ldrb	r3, [r3, #0]
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	08005f94 	.word	0x08005f94

08003c54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2317      	movs	r3, #23
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	223c      	movs	r2, #60	@ 0x3c
 8003c6c:	5c9b      	ldrb	r3, [r3, r2]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_IC_ConfigChannel+0x22>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e08c      	b.n	8003d90 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	223c      	movs	r2, #60	@ 0x3c
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c94:	f000 fda0 	bl	80047d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	210c      	movs	r1, #12
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	e062      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d11c      	bne.n	8003cfc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003cd2:	f000 fe05 	bl	80048e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	492d      	ldr	r1, [pc, #180]	@ (8003d98 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6999      	ldr	r1, [r3, #24]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	021a      	lsls	r2, r3, #8
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	619a      	str	r2, [r3, #24]
 8003cfa:	e042      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d11b      	bne.n	8003d3a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d12:	f000 fe59 	bl	80049c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	210c      	movs	r1, #12
 8003d22:	438a      	bics	r2, r1
 8003d24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	61da      	str	r2, [r3, #28]
 8003d38:	e023      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d11c      	bne.n	8003d7a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003d50:	f000 fe7a 	bl	8004a48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	490e      	ldr	r1, [pc, #56]	@ (8003d98 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003d60:	400a      	ands	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69d9      	ldr	r1, [r3, #28]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
 8003d78:	e003      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003d7a:	2317      	movs	r3, #23
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	223c      	movs	r2, #60	@ 0x3c
 8003d86:	2100      	movs	r1, #0
 8003d88:	5499      	strb	r1, [r3, r2]

  return status;
 8003d8a:	2317      	movs	r3, #23
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	781b      	ldrb	r3, [r3, #0]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b006      	add	sp, #24
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	fffff3ff 	.word	0xfffff3ff

08003d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2317      	movs	r3, #23
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	223c      	movs	r2, #60	@ 0x3c
 8003db4:	5c9b      	ldrb	r3, [r3, r2]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x22>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0e5      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	223c      	movs	r2, #60	@ 0x3c
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b14      	cmp	r3, #20
 8003dca:	d900      	bls.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x32>
 8003dcc:	e0d1      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	4b70      	ldr	r3, [pc, #448]	@ (8003f94 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003dd4:	18d3      	adds	r3, r2, r3
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fa5c 	bl	80042a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2108      	movs	r1, #8
 8003df4:	430a      	orrs	r2, r1
 8003df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2104      	movs	r1, #4
 8003e04:	438a      	bics	r2, r1
 8003e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6999      	ldr	r1, [r3, #24]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]
      break;
 8003e1a:	e0af      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	0011      	movs	r1, r2
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 fabb 	bl	80043a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2180      	movs	r1, #128	@ 0x80
 8003e36:	0109      	lsls	r1, r1, #4
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4954      	ldr	r1, [pc, #336]	@ (8003f98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e48:	400a      	ands	r2, r1
 8003e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6999      	ldr	r1, [r3, #24]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	021a      	lsls	r2, r3, #8
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	619a      	str	r2, [r3, #24]
      break;
 8003e60:	e08c      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fb16 	bl	800449c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2108      	movs	r1, #8
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69d9      	ldr	r1, [r3, #28]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	61da      	str	r2, [r3, #28]
      break;
 8003ea2:	e06b      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	0011      	movs	r1, r2
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 fb77 	bl	80045a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	0109      	lsls	r1, r1, #4
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4932      	ldr	r1, [pc, #200]	@ (8003f98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69d9      	ldr	r1, [r3, #28]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	61da      	str	r2, [r3, #28]
      break;
 8003ee8:	e048      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 fbb8 	bl	8004668 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2108      	movs	r1, #8
 8003f04:	430a      	orrs	r2, r1
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2104      	movs	r1, #4
 8003f14:	438a      	bics	r2, r1
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f2a:	e027      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 fbf1 	bl	800471c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2180      	movs	r1, #128	@ 0x80
 8003f46:	0109      	lsls	r1, r1, #4
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4910      	ldr	r1, [pc, #64]	@ (8003f98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f70:	e004      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003f72:	2317      	movs	r3, #23
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
      break;
 8003f7a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	223c      	movs	r2, #60	@ 0x3c
 8003f80:	2100      	movs	r1, #0
 8003f82:	5499      	strb	r1, [r3, r2]

  return status;
 8003f84:	2317      	movs	r3, #23
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	781b      	ldrb	r3, [r3, #0]
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b006      	add	sp, #24
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	08005fe8 	.word	0x08005fe8
 8003f98:	fffffbff 	.word	0xfffffbff

08003f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	230f      	movs	r3, #15
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	223c      	movs	r2, #60	@ 0x3c
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIM_ConfigClockSource+0x20>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0bc      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x19a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	223c      	movs	r2, #60	@ 0x3c
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	223d      	movs	r2, #61	@ 0x3d
 8003fc8:	2102      	movs	r1, #2
 8003fca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8004140 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a59      	ldr	r2, [pc, #356]	@ (8004144 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2280      	movs	r2, #128	@ 0x80
 8003ff2:	0192      	lsls	r2, r2, #6
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_TIM_ConfigClockSource+0xde>
 8003ff8:	2280      	movs	r2, #128	@ 0x80
 8003ffa:	0192      	lsls	r2, r2, #6
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d900      	bls.n	8004002 <HAL_TIM_ConfigClockSource+0x66>
 8004000:	e088      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 8004002:	2280      	movs	r2, #128	@ 0x80
 8004004:	0152      	lsls	r2, r2, #5
 8004006:	4293      	cmp	r3, r2
 8004008:	d100      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x70>
 800400a:	e088      	b.n	800411e <HAL_TIM_ConfigClockSource+0x182>
 800400c:	2280      	movs	r2, #128	@ 0x80
 800400e:	0152      	lsls	r2, r2, #5
 8004010:	4293      	cmp	r3, r2
 8004012:	d900      	bls.n	8004016 <HAL_TIM_ConfigClockSource+0x7a>
 8004014:	e07e      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 8004016:	2b70      	cmp	r3, #112	@ 0x70
 8004018:	d018      	beq.n	800404c <HAL_TIM_ConfigClockSource+0xb0>
 800401a:	d900      	bls.n	800401e <HAL_TIM_ConfigClockSource+0x82>
 800401c:	e07a      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 800401e:	2b60      	cmp	r3, #96	@ 0x60
 8004020:	d04f      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x126>
 8004022:	d900      	bls.n	8004026 <HAL_TIM_ConfigClockSource+0x8a>
 8004024:	e076      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 8004026:	2b50      	cmp	r3, #80	@ 0x50
 8004028:	d03b      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x106>
 800402a:	d900      	bls.n	800402e <HAL_TIM_ConfigClockSource+0x92>
 800402c:	e072      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 800402e:	2b40      	cmp	r3, #64	@ 0x40
 8004030:	d057      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x146>
 8004032:	d900      	bls.n	8004036 <HAL_TIM_ConfigClockSource+0x9a>
 8004034:	e06e      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 8004036:	2b30      	cmp	r3, #48	@ 0x30
 8004038:	d063      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x166>
 800403a:	d86b      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 800403c:	2b20      	cmp	r3, #32
 800403e:	d060      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x166>
 8004040:	d868      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05d      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x166>
 8004046:	2b10      	cmp	r3, #16
 8004048:	d05b      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x166>
 800404a:	e063      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	f000 fd56 	bl	8004b0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2277      	movs	r2, #119	@ 0x77
 800406c:	4313      	orrs	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]
      break;
 8004078:	e052      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800408a:	f000 fd3f 	bl	8004b0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2180      	movs	r1, #128	@ 0x80
 800409a:	01c9      	lsls	r1, r1, #7
 800409c:	430a      	orrs	r2, r1
 800409e:	609a      	str	r2, [r3, #8]
      break;
 80040a0:	e03e      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ae:	001a      	movs	r2, r3
 80040b0:	f000 fbe8 	bl	8004884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2150      	movs	r1, #80	@ 0x50
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 fd0a 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 80040c0:	e02e      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ce:	001a      	movs	r2, r3
 80040d0:	f000 fc48 	bl	8004964 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2160      	movs	r1, #96	@ 0x60
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 fcfa 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 80040e0:	e01e      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	001a      	movs	r2, r3
 80040f0:	f000 fbc8 	bl	8004884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2140      	movs	r1, #64	@ 0x40
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 fcea 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 8004100:	e00e      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0019      	movs	r1, r3
 800410c:	0010      	movs	r0, r2
 800410e:	f000 fce1 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 8004112:	e005      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004114:	230f      	movs	r3, #15
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
      break;
 800411c:	e000      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800411e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	223d      	movs	r2, #61	@ 0x3d
 8004124:	2101      	movs	r1, #1
 8004126:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	223c      	movs	r2, #60	@ 0x3c
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]

  return status;
 8004130:	230f      	movs	r3, #15
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	ffceff88 	.word	0xffceff88
 8004144:	ffff00ff 	.word	0xffff00ff

08004148 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004150:	46c0      	nop			@ (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004180:	46c0      	nop			@ (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004190:	46c0      	nop			@ (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}

08004198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a37      	ldr	r2, [pc, #220]	@ (8004288 <TIM_Base_SetConfig+0xf0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d008      	beq.n	80041c2 <TIM_Base_SetConfig+0x2a>
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0x2a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a33      	ldr	r2, [pc, #204]	@ (800428c <TIM_Base_SetConfig+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2270      	movs	r2, #112	@ 0x70
 80041c6:	4393      	bics	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004288 <TIM_Base_SetConfig+0xf0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d014      	beq.n	8004206 <TIM_Base_SetConfig+0x6e>
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	05db      	lsls	r3, r3, #23
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d00f      	beq.n	8004206 <TIM_Base_SetConfig+0x6e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a28      	ldr	r2, [pc, #160]	@ (800428c <TIM_Base_SetConfig+0xf4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x6e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a27      	ldr	r2, [pc, #156]	@ (8004290 <TIM_Base_SetConfig+0xf8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x6e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <TIM_Base_SetConfig+0xfc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x6e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a25      	ldr	r2, [pc, #148]	@ (8004298 <TIM_Base_SetConfig+0x100>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a24      	ldr	r2, [pc, #144]	@ (800429c <TIM_Base_SetConfig+0x104>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	4393      	bics	r3, r2
 800421e:	001a      	movs	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <TIM_Base_SetConfig+0xf0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0xbe>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a12      	ldr	r2, [pc, #72]	@ (8004294 <TIM_Base_SetConfig+0xfc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0xbe>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a11      	ldr	r2, [pc, #68]	@ (8004298 <TIM_Base_SetConfig+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d103      	bne.n	800425e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2201      	movs	r2, #1
 8004276:	4393      	bics	r3, r2
 8004278:	001a      	movs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]
  }
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40000400 	.word	0x40000400
 8004290:	40002000 	.word	0x40002000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	fffffcff 	.word	0xfffffcff

080042a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	2201      	movs	r2, #1
 80042b6:	4393      	bics	r3, r2
 80042b8:	001a      	movs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004388 <TIM_OC1_SetConfig+0xe8>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2203      	movs	r2, #3
 80042d6:	4393      	bics	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2202      	movs	r2, #2
 80042e8:	4393      	bics	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a24      	ldr	r2, [pc, #144]	@ (800438c <TIM_OC1_SetConfig+0xec>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_OC1_SetConfig+0x6e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a23      	ldr	r2, [pc, #140]	@ (8004390 <TIM_OC1_SetConfig+0xf0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_OC1_SetConfig+0x6e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <TIM_OC1_SetConfig+0xf4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2208      	movs	r2, #8
 8004312:	4393      	bics	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2204      	movs	r2, #4
 8004324:	4393      	bics	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a18      	ldr	r2, [pc, #96]	@ (800438c <TIM_OC1_SetConfig+0xec>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d007      	beq.n	8004340 <TIM_OC1_SetConfig+0xa0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <TIM_OC1_SetConfig+0xf0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_OC1_SetConfig+0xa0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <TIM_OC1_SetConfig+0xf4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4a15      	ldr	r2, [pc, #84]	@ (8004398 <TIM_OC1_SetConfig+0xf8>)
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4a14      	ldr	r2, [pc, #80]	@ (800439c <TIM_OC1_SetConfig+0xfc>)
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b006      	add	sp, #24
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	fffeff8f 	.word	0xfffeff8f
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800
 8004398:	fffffeff 	.word	0xfffffeff
 800439c:	fffffdff 	.word	0xfffffdff

080043a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	2210      	movs	r2, #16
 80043b6:	4393      	bics	r3, r2
 80043b8:	001a      	movs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004480 <TIM_OC2_SetConfig+0xe0>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004484 <TIM_OC2_SetConfig+0xe4>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2220      	movs	r2, #32
 80043ea:	4393      	bics	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a22      	ldr	r2, [pc, #136]	@ (8004488 <TIM_OC2_SetConfig+0xe8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	4393      	bics	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	4393      	bics	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <TIM_OC2_SetConfig+0xe8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_OC2_SetConfig+0x96>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a18      	ldr	r2, [pc, #96]	@ (800448c <TIM_OC2_SetConfig+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC2_SetConfig+0x96>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a17      	ldr	r2, [pc, #92]	@ (8004490 <TIM_OC2_SetConfig+0xf0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4a16      	ldr	r2, [pc, #88]	@ (8004494 <TIM_OC2_SetConfig+0xf4>)
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <TIM_OC2_SetConfig+0xf8>)
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	46bd      	mov	sp, r7
 800447c:	b006      	add	sp, #24
 800447e:	bd80      	pop	{r7, pc}
 8004480:	feff8fff 	.word	0xfeff8fff
 8004484:	fffffcff 	.word	0xfffffcff
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800
 8004494:	fffffbff 	.word	0xfffffbff
 8004498:	fffff7ff 	.word	0xfffff7ff

0800449c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4a31      	ldr	r2, [pc, #196]	@ (8004578 <TIM_OC3_SetConfig+0xdc>)
 80044b2:	401a      	ands	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a2d      	ldr	r2, [pc, #180]	@ (800457c <TIM_OC3_SetConfig+0xe0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4393      	bics	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <TIM_OC3_SetConfig+0xe4>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <TIM_OC3_SetConfig+0xe8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d10d      	bne.n	8004516 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a22      	ldr	r2, [pc, #136]	@ (8004588 <TIM_OC3_SetConfig+0xec>)
 80044fe:	4013      	ands	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <TIM_OC3_SetConfig+0xf0>)
 8004512:	4013      	ands	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1a      	ldr	r2, [pc, #104]	@ (8004584 <TIM_OC3_SetConfig+0xe8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_OC3_SetConfig+0x92>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1b      	ldr	r2, [pc, #108]	@ (8004590 <TIM_OC3_SetConfig+0xf4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC3_SetConfig+0x92>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <TIM_OC3_SetConfig+0xf8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d113      	bne.n	8004556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <TIM_OC3_SetConfig+0xfc>)
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4a18      	ldr	r2, [pc, #96]	@ (800459c <TIM_OC3_SetConfig+0x100>)
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}
 8004578:	fffffeff 	.word	0xfffffeff
 800457c:	fffeff8f 	.word	0xfffeff8f
 8004580:	fffffdff 	.word	0xfffffdff
 8004584:	40012c00 	.word	0x40012c00
 8004588:	fffff7ff 	.word	0xfffff7ff
 800458c:	fffffbff 	.word	0xfffffbff
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800
 8004598:	ffffefff 	.word	0xffffefff
 800459c:	ffffdfff 	.word	0xffffdfff

080045a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <TIM_OC4_SetConfig+0xa8>)
 80045b6:	401a      	ands	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a20      	ldr	r2, [pc, #128]	@ (800464c <TIM_OC4_SetConfig+0xac>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004650 <TIM_OC4_SetConfig+0xb0>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004654 <TIM_OC4_SetConfig+0xb4>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <TIM_OC4_SetConfig+0xb8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_OC4_SetConfig+0x70>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <TIM_OC4_SetConfig+0xbc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_OC4_SetConfig+0x70>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <TIM_OC4_SetConfig+0xc0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <TIM_OC4_SetConfig+0xc4>)
 8004614:	4013      	ands	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b006      	add	sp, #24
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	ffffefff 	.word	0xffffefff
 800464c:	feff8fff 	.word	0xfeff8fff
 8004650:	fffffcff 	.word	0xfffffcff
 8004654:	ffffdfff 	.word	0xffffdfff
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	ffffbfff 	.word	0xffffbfff

08004668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <TIM_OC5_SetConfig+0x9c>)
 800467e:	401a      	ands	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <TIM_OC5_SetConfig+0xa0>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4a19      	ldr	r2, [pc, #100]	@ (800470c <TIM_OC5_SetConfig+0xa4>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <TIM_OC5_SetConfig+0xa8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC5_SetConfig+0x66>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a14      	ldr	r2, [pc, #80]	@ (8004714 <TIM_OC5_SetConfig+0xac>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC5_SetConfig+0x66>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a13      	ldr	r2, [pc, #76]	@ (8004718 <TIM_OC5_SetConfig+0xb0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d109      	bne.n	80046e2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004704 <TIM_OC5_SetConfig+0x9c>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	46c0      	nop			@ (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b006      	add	sp, #24
 8004702:	bd80      	pop	{r7, pc}
 8004704:	fffeffff 	.word	0xfffeffff
 8004708:	fffeff8f 	.word	0xfffeff8f
 800470c:	fffdffff 	.word	0xfffdffff
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800

0800471c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <TIM_OC6_SetConfig+0xa0>)
 8004732:	401a      	ands	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a1e      	ldr	r2, [pc, #120]	@ (80047c0 <TIM_OC6_SetConfig+0xa4>)
 8004748:	4013      	ands	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4a1a      	ldr	r2, [pc, #104]	@ (80047c4 <TIM_OC6_SetConfig+0xa8>)
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	051b      	lsls	r3, r3, #20
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <TIM_OC6_SetConfig+0xac>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_OC6_SetConfig+0x68>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a15      	ldr	r2, [pc, #84]	@ (80047cc <TIM_OC6_SetConfig+0xb0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC6_SetConfig+0x68>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a14      	ldr	r2, [pc, #80]	@ (80047d0 <TIM_OC6_SetConfig+0xb4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d109      	bne.n	8004798 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <TIM_OC6_SetConfig+0xb8>)
 8004788:	4013      	ands	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b006      	add	sp, #24
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	ffefffff 	.word	0xffefffff
 80047c0:	feff8fff 	.word	0xfeff8fff
 80047c4:	ffdfffff 	.word	0xffdfffff
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	fffbffff 	.word	0xfffbffff

080047d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	2201      	movs	r2, #1
 80047f2:	4393      	bics	r3, r2
 80047f4:	001a      	movs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <TIM_TI1_SetConfig+0xa4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d008      	beq.n	800481a <TIM_TI1_SetConfig+0x42>
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	429a      	cmp	r2, r3
 8004810:	d003      	beq.n	800481a <TIM_TI1_SetConfig+0x42>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a1a      	ldr	r2, [pc, #104]	@ (8004880 <TIM_TI1_SetConfig+0xa8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <TIM_TI1_SetConfig+0x46>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <TIM_TI1_SetConfig+0x48>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2203      	movs	r2, #3
 8004828:	4393      	bics	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e003      	b.n	800483e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2201      	movs	r2, #1
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	22f0      	movs	r2, #240	@ 0xf0
 8004842:	4393      	bics	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	22ff      	movs	r2, #255	@ 0xff
 800484c:	4013      	ands	r3, r2
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	220a      	movs	r2, #10
 8004858:	4393      	bics	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	220a      	movs	r2, #10
 8004860:	4013      	ands	r3, r2
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	46c0      	nop			@ (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b006      	add	sp, #24
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40000400 	.word	0x40000400

08004884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	2201      	movs	r2, #1
 800489c:	4393      	bics	r3, r2
 800489e:	001a      	movs	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	22f0      	movs	r2, #240	@ 0xf0
 80048ae:	4393      	bics	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	220a      	movs	r2, #10
 80048c0:	4393      	bics	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b006      	add	sp, #24
 80048de:	bd80      	pop	{r7, pc}

080048e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	2210      	movs	r2, #16
 80048fa:	4393      	bics	r3, r2
 80048fc:	001a      	movs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4a14      	ldr	r2, [pc, #80]	@ (800495c <TIM_TI2_SetConfig+0x7c>)
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4a10      	ldr	r2, [pc, #64]	@ (8004960 <TIM_TI2_SetConfig+0x80>)
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	22a0      	movs	r2, #160	@ 0xa0
 8004934:	4393      	bics	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	22a0      	movs	r2, #160	@ 0xa0
 800493e:	4013      	ands	r3, r2
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b006      	add	sp, #24
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	fffffcff 	.word	0xfffffcff
 8004960:	ffff0fff 	.word	0xffff0fff

08004964 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	2210      	movs	r2, #16
 800497c:	4393      	bics	r3, r2
 800497e:	001a      	movs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4a0d      	ldr	r2, [pc, #52]	@ (80049c4 <TIM_TI2_ConfigInputStage+0x60>)
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	22a0      	movs	r2, #160	@ 0xa0
 80049a0:	4393      	bics	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	46bd      	mov	sp, r7
 80049be:	b006      	add	sp, #24
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	ffff0fff 	.word	0xffff0fff

080049c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4a17      	ldr	r2, [pc, #92]	@ (8004a40 <TIM_TI3_SetConfig+0x78>)
 80049e2:	401a      	ands	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2203      	movs	r2, #3
 80049f2:	4393      	bics	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	22f0      	movs	r2, #240	@ 0xf0
 8004a02:	4393      	bics	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	22ff      	movs	r2, #255	@ 0xff
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4a0b      	ldr	r2, [pc, #44]	@ (8004a44 <TIM_TI3_SetConfig+0x7c>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	23a0      	movs	r3, #160	@ 0xa0
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b006      	add	sp, #24
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	fffffeff 	.word	0xfffffeff
 8004a44:	fffff5ff 	.word	0xfffff5ff

08004a48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <TIM_TI4_SetConfig+0x7c>)
 8004a62:	401a      	ands	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <TIM_TI4_SetConfig+0x80>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <TIM_TI4_SetConfig+0x84>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	031b      	lsls	r3, r3, #12
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad0 <TIM_TI4_SetConfig+0x88>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	031a      	lsls	r2, r3, #12
 8004aa2:	23a0      	movs	r3, #160	@ 0xa0
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b006      	add	sp, #24
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	ffffefff 	.word	0xffffefff
 8004ac8:	fffffcff 	.word	0xfffffcff
 8004acc:	ffff0fff 	.word	0xffff0fff
 8004ad0:	ffff5fff 	.word	0xffff5fff

08004ad4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a08      	ldr	r2, [pc, #32]	@ (8004b08 <TIM_ITRx_SetConfig+0x34>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	2207      	movs	r2, #7
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	609a      	str	r2, [r3, #8]
}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	ffcfff8f 	.word	0xffcfff8f

08004b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <TIM_ETR_SetConfig+0x3c>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b006      	add	sp, #24
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	ffff00ff 	.word	0xffff00ff

08004b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	223c      	movs	r2, #60	@ 0x3c
 8004b5a:	5c9b      	ldrb	r3, [r3, r2]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e050      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	223c      	movs	r2, #60	@ 0x3c
 8004b68:	2101      	movs	r1, #1
 8004b6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	223d      	movs	r2, #61	@ 0x3d
 8004b70:	2102      	movs	r1, #2
 8004b72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a21      	ldr	r2, [pc, #132]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a20      	ldr	r2, [pc, #128]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2270      	movs	r2, #112	@ 0x70
 8004ba4:	4393      	bics	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00a      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	05db      	lsls	r3, r3, #23
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d004      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2280      	movs	r2, #128	@ 0x80
 8004bde:	4393      	bics	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	223d      	movs	r2, #61	@ 0x3d
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	223c      	movs	r2, #60	@ 0x3c
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b004      	add	sp, #16
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	ff0fffff 	.word	0xff0fffff
 8004c18:	40000400 	.word	0x40000400

08004c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	223c      	movs	r2, #60	@ 0x3c
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e06f      	b.n	8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	223c      	movs	r2, #60	@ 0x3c
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	22ff      	movs	r2, #255	@ 0xff
 8004c44:	4393      	bics	r3, r2
 8004c46:	001a      	movs	r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a33      	ldr	r2, [pc, #204]	@ (8004d20 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004c54:	401a      	ands	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a30      	ldr	r2, [pc, #192]	@ (8004d24 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004c62:	401a      	ands	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d28 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004c70:	401a      	ands	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d2c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004c7e:	401a      	ands	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a29      	ldr	r2, [pc, #164]	@ (8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a26      	ldr	r2, [pc, #152]	@ (8004d34 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a24      	ldr	r2, [pc, #144]	@ (8004d38 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004ca8:	401a      	ands	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a21      	ldr	r2, [pc, #132]	@ (8004d3c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004cb8:	401a      	ands	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d11c      	bne.n	8004d06 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	051b      	lsls	r3, r3, #20
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a1a      	ldr	r2, [pc, #104]	@ (8004d48 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a17      	ldr	r2, [pc, #92]	@ (8004d4c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004cee:	401a      	ands	r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	@ (8004d50 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223c      	movs	r2, #60	@ 0x3c
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b004      	add	sp, #16
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	fffffcff 	.word	0xfffffcff
 8004d24:	fffffbff 	.word	0xfffffbff
 8004d28:	fffff7ff 	.word	0xfffff7ff
 8004d2c:	ffffefff 	.word	0xffffefff
 8004d30:	ffffdfff 	.word	0xffffdfff
 8004d34:	ffffbfff 	.word	0xffffbfff
 8004d38:	fff0ffff 	.word	0xfff0ffff
 8004d3c:	efffffff 	.word	0xefffffff
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	ff0fffff 	.word	0xff0fffff
 8004d48:	feffffff 	.word	0xfeffffff
 8004d4c:	fdffffff 	.word	0xfdffffff
 8004d50:	dfffffff 	.word	0xdfffffff

08004d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b002      	add	sp, #8
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6c:	46c0      	nop			@ (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b002      	add	sp, #8
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b002      	add	sp, #8
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e046      	b.n	8004e24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2288      	movs	r2, #136	@ 0x88
 8004d9a:	589b      	ldr	r3, [r3, r2]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2284      	movs	r2, #132	@ 0x84
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fc fa3e 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2288      	movs	r2, #136	@ 0x88
 8004db4:	2124      	movs	r1, #36	@ 0x24
 8004db6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fde6 	bl	80059a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 fb6a 	bl	80054b4 <UART_SetConfig>
 8004de0:	0003      	movs	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e01c      	b.n	8004e24 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	490d      	ldr	r1, [pc, #52]	@ (8004e2c <HAL_UART_Init+0xa8>)
 8004df6:	400a      	ands	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	212a      	movs	r1, #42	@ 0x2a
 8004e06:	438a      	bics	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 fe75 	bl	8005b0c <UART_CheckIdleState>
 8004e22:	0003      	movs	r3, r0
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	ffffb7ff 	.word	0xffffb7ff

08004e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b0aa      	sub	sp, #168	@ 0xa8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	22a4      	movs	r2, #164	@ 0xa4
 8004e40:	18b9      	adds	r1, r7, r2
 8004e42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	20a0      	movs	r0, #160	@ 0xa0
 8004e4c:	1839      	adds	r1, r7, r0
 8004e4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	249c      	movs	r4, #156	@ 0x9c
 8004e58:	1939      	adds	r1, r7, r4
 8004e5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e5c:	0011      	movs	r1, r2
 8004e5e:	18bb      	adds	r3, r7, r2
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4aa2      	ldr	r2, [pc, #648]	@ (80050ec <HAL_UART_IRQHandler+0x2bc>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	2298      	movs	r2, #152	@ 0x98
 8004e68:	18bd      	adds	r5, r7, r2
 8004e6a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004e6c:	18bb      	adds	r3, r7, r2
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11a      	bne.n	8004eaa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d015      	beq.n	8004eaa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2220      	movs	r2, #32
 8004e84:	4013      	ands	r3, r2
 8004e86:	d105      	bne.n	8004e94 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e88:	193b      	adds	r3, r7, r4
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	055b      	lsls	r3, r3, #21
 8004e90:	4013      	ands	r3, r2
 8004e92:	d00a      	beq.n	8004eaa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d100      	bne.n	8004e9e <HAL_UART_IRQHandler+0x6e>
 8004e9c:	e2dc      	b.n	8005458 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	0010      	movs	r0, r2
 8004ea6:	4798      	blx	r3
      }
      return;
 8004ea8:	e2d6      	b.n	8005458 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004eaa:	2398      	movs	r3, #152	@ 0x98
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d100      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x86>
 8004eb4:	e122      	b.n	80050fc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004eb6:	239c      	movs	r3, #156	@ 0x9c
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a8c      	ldr	r2, [pc, #560]	@ (80050f0 <HAL_UART_IRQHandler+0x2c0>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ec2:	23a0      	movs	r3, #160	@ 0xa0
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a8a      	ldr	r2, [pc, #552]	@ (80050f4 <HAL_UART_IRQHandler+0x2c4>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d100      	bne.n	8004ed0 <HAL_UART_IRQHandler+0xa0>
 8004ece:	e115      	b.n	80050fc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ed0:	23a4      	movs	r3, #164	@ 0xa4
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d012      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
 8004edc:	23a0      	movs	r3, #160	@ 0xa0
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2290      	movs	r2, #144	@ 0x90
 8004ef6:	589b      	ldr	r3, [r3, r2]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2190      	movs	r1, #144	@ 0x90
 8004f00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f02:	23a4      	movs	r3, #164	@ 0xa4
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d011      	beq.n	8004f32 <HAL_UART_IRQHandler+0x102>
 8004f0e:	239c      	movs	r3, #156	@ 0x9c
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2201      	movs	r2, #1
 8004f16:	4013      	ands	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2290      	movs	r2, #144	@ 0x90
 8004f26:	589b      	ldr	r3, [r3, r2]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2190      	movs	r1, #144	@ 0x90
 8004f30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f32:	23a4      	movs	r3, #164	@ 0xa4
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d011      	beq.n	8004f62 <HAL_UART_IRQHandler+0x132>
 8004f3e:	239c      	movs	r3, #156	@ 0x9c
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	4013      	ands	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2290      	movs	r2, #144	@ 0x90
 8004f56:	589b      	ldr	r3, [r3, r2]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2190      	movs	r1, #144	@ 0x90
 8004f60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f62:	23a4      	movs	r3, #164	@ 0xa4
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d017      	beq.n	8004f9e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f6e:	23a0      	movs	r3, #160	@ 0xa0
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2220      	movs	r2, #32
 8004f76:	4013      	ands	r3, r2
 8004f78:	d105      	bne.n	8004f86 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f7a:	239c      	movs	r3, #156	@ 0x9c
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a5b      	ldr	r2, [pc, #364]	@ (80050f0 <HAL_UART_IRQHandler+0x2c0>)
 8004f82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f84:	d00b      	beq.n	8004f9e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2290      	movs	r2, #144	@ 0x90
 8004f92:	589b      	ldr	r3, [r3, r2]
 8004f94:	2208      	movs	r2, #8
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2190      	movs	r1, #144	@ 0x90
 8004f9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f9e:	23a4      	movs	r3, #164	@ 0xa4
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x1a4>
 8004fac:	23a0      	movs	r3, #160	@ 0xa0
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	04db      	lsls	r3, r3, #19
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2280      	movs	r2, #128	@ 0x80
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2290      	movs	r2, #144	@ 0x90
 8004fc8:	589b      	ldr	r3, [r3, r2]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2190      	movs	r1, #144	@ 0x90
 8004fd2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2290      	movs	r2, #144	@ 0x90
 8004fd8:	589b      	ldr	r3, [r3, r2]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d100      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x1b0>
 8004fde:	e23d      	b.n	800545c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fe0:	23a4      	movs	r3, #164	@ 0xa4
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d015      	beq.n	8005018 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fec:	23a0      	movs	r3, #160	@ 0xa0
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d106      	bne.n	8005006 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ff8:	239c      	movs	r3, #156	@ 0x9c
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	055b      	lsls	r3, r3, #21
 8005002:	4013      	ands	r3, r2
 8005004:	d008      	beq.n	8005018 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	0010      	movs	r0, r2
 8005016:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2290      	movs	r2, #144	@ 0x90
 800501c:	589b      	ldr	r3, [r3, r2]
 800501e:	2194      	movs	r1, #148	@ 0x94
 8005020:	187a      	adds	r2, r7, r1
 8005022:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2240      	movs	r2, #64	@ 0x40
 800502c:	4013      	ands	r3, r2
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d004      	beq.n	800503c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005032:	187b      	adds	r3, r7, r1
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2228      	movs	r2, #40	@ 0x28
 8005038:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800503a:	d04c      	beq.n	80050d6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fe7e 	bl	8005d40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	4013      	ands	r3, r2
 800504e:	2b40      	cmp	r3, #64	@ 0x40
 8005050:	d13c      	bne.n	80050cc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005052:	f3ef 8310 	mrs	r3, PRIMASK
 8005056:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505a:	2090      	movs	r0, #144	@ 0x90
 800505c:	183a      	adds	r2, r7, r0
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	2301      	movs	r3, #1
 8005062:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2140      	movs	r1, #64	@ 0x40
 8005078:	438a      	bics	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	183b      	adds	r3, r7, r0
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2280      	movs	r2, #128	@ 0x80
 800508e:	589b      	ldr	r3, [r3, r2]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2280      	movs	r2, #128	@ 0x80
 8005098:	589b      	ldr	r3, [r3, r2]
 800509a:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <HAL_UART_IRQHandler+0x2c8>)
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2280      	movs	r2, #128	@ 0x80
 80050a2:	589b      	ldr	r3, [r3, r2]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fd f8ed 	bl	8002284 <HAL_DMA_Abort_IT>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d01c      	beq.n	80050e8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2280      	movs	r2, #128	@ 0x80
 80050b2:	589b      	ldr	r3, [r3, r2]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	2180      	movs	r1, #128	@ 0x80
 80050ba:	5852      	ldr	r2, [r2, r1]
 80050bc:	0010      	movs	r0, r2
 80050be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	e012      	b.n	80050e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f9e1 	bl	800548c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ca:	e00d      	b.n	80050e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 f9dc 	bl	800548c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	e008      	b.n	80050e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f9d7 	bl	800548c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2290      	movs	r2, #144	@ 0x90
 80050e2:	2100      	movs	r1, #0
 80050e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80050e6:	e1b9      	b.n	800545c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	46c0      	nop			@ (mov r8, r8)
    return;
 80050ea:	e1b7      	b.n	800545c <HAL_UART_IRQHandler+0x62c>
 80050ec:	0000080f 	.word	0x0000080f
 80050f0:	10000001 	.word	0x10000001
 80050f4:	04000120 	.word	0x04000120
 80050f8:	08005e0d 	.word	0x08005e0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d000      	beq.n	8005106 <HAL_UART_IRQHandler+0x2d6>
 8005104:	e13e      	b.n	8005384 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005106:	23a4      	movs	r3, #164	@ 0xa4
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2210      	movs	r2, #16
 800510e:	4013      	ands	r3, r2
 8005110:	d100      	bne.n	8005114 <HAL_UART_IRQHandler+0x2e4>
 8005112:	e137      	b.n	8005384 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005114:	23a0      	movs	r3, #160	@ 0xa0
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	4013      	ands	r3, r2
 800511e:	d100      	bne.n	8005122 <HAL_UART_IRQHandler+0x2f2>
 8005120:	e130      	b.n	8005384 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2210      	movs	r2, #16
 8005128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2240      	movs	r2, #64	@ 0x40
 8005132:	4013      	ands	r3, r2
 8005134:	2b40      	cmp	r3, #64	@ 0x40
 8005136:	d000      	beq.n	800513a <HAL_UART_IRQHandler+0x30a>
 8005138:	e0a4      	b.n	8005284 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2280      	movs	r2, #128	@ 0x80
 800513e:	589b      	ldr	r3, [r3, r2]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	217e      	movs	r1, #126	@ 0x7e
 8005146:	187b      	adds	r3, r7, r1
 8005148:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800514a:	187b      	adds	r3, r7, r1
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d100      	bne.n	8005154 <HAL_UART_IRQHandler+0x324>
 8005152:	e185      	b.n	8005460 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	225c      	movs	r2, #92	@ 0x5c
 8005158:	5a9b      	ldrh	r3, [r3, r2]
 800515a:	187a      	adds	r2, r7, r1
 800515c:	8812      	ldrh	r2, [r2, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d300      	bcc.n	8005164 <HAL_UART_IRQHandler+0x334>
 8005162:	e17d      	b.n	8005460 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	187a      	adds	r2, r7, r1
 8005168:	215e      	movs	r1, #94	@ 0x5e
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2280      	movs	r2, #128	@ 0x80
 8005172:	589b      	ldr	r3, [r3, r2]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2220      	movs	r2, #32
 800517a:	4013      	ands	r3, r2
 800517c:	d170      	bne.n	8005260 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517e:	f3ef 8310 	mrs	r3, PRIMASK
 8005182:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005186:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005188:	2301      	movs	r3, #1
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	f383 8810 	msr	PRIMASK, r3
}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	49b4      	ldr	r1, [pc, #720]	@ (8005470 <HAL_UART_IRQHandler+0x640>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b0:	f3ef 8310 	mrs	r3, PRIMASK
 80051b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80051b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80051ba:	2301      	movs	r3, #1
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	438a      	bics	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e2:	f3ef 8310 	mrs	r3, PRIMASK
 80051e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80051e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ec:	2301      	movs	r3, #1
 80051ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f2:	f383 8810 	msr	PRIMASK, r3
}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2140      	movs	r1, #64	@ 0x40
 8005204:	438a      	bics	r2, r1
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800520e:	f383 8810 	msr	PRIMASK, r3
}
 8005212:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	228c      	movs	r2, #140	@ 0x8c
 8005218:	2120      	movs	r1, #32
 800521a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005222:	f3ef 8310 	mrs	r3, PRIMASK
 8005226:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800522c:	2301      	movs	r3, #1
 800522e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005232:	f383 8810 	msr	PRIMASK, r3
}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2110      	movs	r1, #16
 8005244:	438a      	bics	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800524a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800524e:	f383 8810 	msr	PRIMASK, r3
}
 8005252:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2280      	movs	r2, #128	@ 0x80
 8005258:	589b      	ldr	r3, [r3, r2]
 800525a:	0018      	movs	r0, r3
 800525c:	f7fc ffb0 	bl	80021c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	225c      	movs	r2, #92	@ 0x5c
 800526a:	5a9a      	ldrh	r2, [r3, r2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	215e      	movs	r1, #94	@ 0x5e
 8005270:	5a5b      	ldrh	r3, [r3, r1]
 8005272:	b29b      	uxth	r3, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0011      	movs	r1, r2
 800527c:	0018      	movs	r0, r3
 800527e:	f000 f90d 	bl	800549c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005282:	e0ed      	b.n	8005460 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	225c      	movs	r2, #92	@ 0x5c
 8005288:	5a99      	ldrh	r1, [r3, r2]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	225e      	movs	r2, #94	@ 0x5e
 800528e:	5a9b      	ldrh	r3, [r3, r2]
 8005290:	b29a      	uxth	r2, r3
 8005292:	208e      	movs	r0, #142	@ 0x8e
 8005294:	183b      	adds	r3, r7, r0
 8005296:	1a8a      	subs	r2, r1, r2
 8005298:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	225e      	movs	r2, #94	@ 0x5e
 800529e:	5a9b      	ldrh	r3, [r3, r2]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d100      	bne.n	80052a8 <HAL_UART_IRQHandler+0x478>
 80052a6:	e0dd      	b.n	8005464 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80052a8:	183b      	adds	r3, r7, r0
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d100      	bne.n	80052b2 <HAL_UART_IRQHandler+0x482>
 80052b0:	e0d8      	b.n	8005464 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b2:	f3ef 8310 	mrs	r3, PRIMASK
 80052b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80052b8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ba:	2488      	movs	r4, #136	@ 0x88
 80052bc:	193a      	adds	r2, r7, r4
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	2301      	movs	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	46c0      	nop			@ (mov r8, r8)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4967      	ldr	r1, [pc, #412]	@ (8005474 <HAL_UART_IRQHandler+0x644>)
 80052d8:	400a      	ands	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80052f0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052f2:	2484      	movs	r4, #132	@ 0x84
 80052f4:	193a      	adds	r2, r7, r4
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	2301      	movs	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	495a      	ldr	r1, [pc, #360]	@ (8005478 <HAL_UART_IRQHandler+0x648>)
 8005310:	400a      	ands	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	193b      	adds	r3, r7, r4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f383 8810 	msr	PRIMASK, r3
}
 8005320:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	228c      	movs	r2, #140	@ 0x8c
 8005326:	2120      	movs	r1, #32
 8005328:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005336:	f3ef 8310 	mrs	r3, PRIMASK
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533e:	2480      	movs	r4, #128	@ 0x80
 8005340:	193a      	adds	r2, r7, r4
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	2301      	movs	r3, #1
 8005346:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	f383 8810 	msr	PRIMASK, r3
}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2110      	movs	r1, #16
 800535c:	438a      	bics	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	193b      	adds	r3, r7, r4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005374:	183b      	adds	r3, r7, r0
 8005376:	881a      	ldrh	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0011      	movs	r1, r2
 800537c:	0018      	movs	r0, r3
 800537e:	f000 f88d 	bl	800549c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005382:	e06f      	b.n	8005464 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005384:	23a4      	movs	r3, #164	@ 0xa4
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	035b      	lsls	r3, r3, #13
 800538e:	4013      	ands	r3, r2
 8005390:	d010      	beq.n	80053b4 <HAL_UART_IRQHandler+0x584>
 8005392:	239c      	movs	r3, #156	@ 0x9c
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	03db      	lsls	r3, r3, #15
 800539c:	4013      	ands	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2280      	movs	r2, #128	@ 0x80
 80053a6:	0352      	lsls	r2, r2, #13
 80053a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 fd70 	bl	8005e92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053b2:	e05a      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053b4:	23a4      	movs	r3, #164	@ 0xa4
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2280      	movs	r2, #128	@ 0x80
 80053bc:	4013      	ands	r3, r2
 80053be:	d016      	beq.n	80053ee <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053c0:	23a0      	movs	r3, #160	@ 0xa0
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2280      	movs	r2, #128	@ 0x80
 80053c8:	4013      	ands	r3, r2
 80053ca:	d106      	bne.n	80053da <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053cc:	239c      	movs	r3, #156	@ 0x9c
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	4013      	ands	r3, r2
 80053d8:	d009      	beq.n	80053ee <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d042      	beq.n	8005468 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	0010      	movs	r0, r2
 80053ea:	4798      	blx	r3
    }
    return;
 80053ec:	e03c      	b.n	8005468 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053ee:	23a4      	movs	r3, #164	@ 0xa4
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2240      	movs	r2, #64	@ 0x40
 80053f6:	4013      	ands	r3, r2
 80053f8:	d00a      	beq.n	8005410 <HAL_UART_IRQHandler+0x5e0>
 80053fa:	23a0      	movs	r3, #160	@ 0xa0
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2240      	movs	r2, #64	@ 0x40
 8005402:	4013      	ands	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 fd16 	bl	8005e3a <UART_EndTransmit_IT>
    return;
 800540e:	e02c      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005410:	23a4      	movs	r3, #164	@ 0xa4
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	4013      	ands	r3, r2
 800541c:	d00b      	beq.n	8005436 <HAL_UART_IRQHandler+0x606>
 800541e:	23a0      	movs	r3, #160	@ 0xa0
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	2380      	movs	r3, #128	@ 0x80
 8005426:	05db      	lsls	r3, r3, #23
 8005428:	4013      	ands	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	0018      	movs	r0, r3
 8005430:	f000 fd3f 	bl	8005eb2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005434:	e019      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005436:	23a4      	movs	r3, #164	@ 0xa4
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	045b      	lsls	r3, r3, #17
 8005440:	4013      	ands	r3, r2
 8005442:	d012      	beq.n	800546a <HAL_UART_IRQHandler+0x63a>
 8005444:	23a0      	movs	r3, #160	@ 0xa0
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	da0d      	bge.n	800546a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0018      	movs	r0, r3
 8005452:	f000 fd26 	bl	8005ea2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005456:	e008      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
      return;
 8005458:	46c0      	nop			@ (mov r8, r8)
 800545a:	e006      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
    return;
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	e004      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
      return;
 8005460:	46c0      	nop			@ (mov r8, r8)
 8005462:	e002      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
      return;
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	e000      	b.n	800546a <HAL_UART_IRQHandler+0x63a>
    return;
 8005468:	46c0      	nop			@ (mov r8, r8)
  }
}
 800546a:	46bd      	mov	sp, r7
 800546c:	b02a      	add	sp, #168	@ 0xa8
 800546e:	bdb0      	pop	{r4, r5, r7, pc}
 8005470:	fffffeff 	.word	0xfffffeff
 8005474:	fffffedf 	.word	0xfffffedf
 8005478:	effffffe 	.word	0xeffffffe

0800547c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005494:	46c0      	nop			@ (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	000a      	movs	r2, r1
 80054a6:	1cbb      	adds	r3, r7, #2
 80054a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b002      	add	sp, #8
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b4:	b5b0      	push	{r4, r5, r7, lr}
 80054b6:	b090      	sub	sp, #64	@ 0x40
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054bc:	231a      	movs	r3, #26
 80054be:	2220      	movs	r2, #32
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	19db      	adds	r3, r3, r7
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4313      	orrs	r3, r2
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4ac4      	ldr	r2, [pc, #784]	@ (80057f8 <UART_SetConfig+0x344>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	0019      	movs	r1, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4abf      	ldr	r2, [pc, #764]	@ (80057fc <UART_SetConfig+0x348>)
 80054fe:	4013      	ands	r3, r2
 8005500:	0018      	movs	r0, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	68d9      	ldr	r1, [r3, #12]
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	0003      	movs	r3, r0
 800550c:	430b      	orrs	r3, r1
 800550e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4ab9      	ldr	r2, [pc, #740]	@ (8005800 <UART_SetConfig+0x34c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005526:	4313      	orrs	r3, r2
 8005528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4ab4      	ldr	r2, [pc, #720]	@ (8005804 <UART_SetConfig+0x350>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553c:	430b      	orrs	r3, r1
 800553e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	220f      	movs	r2, #15
 8005548:	4393      	bics	r3, r2
 800554a:	0018      	movs	r0, r3
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	0003      	movs	r3, r0
 8005556:	430b      	orrs	r3, r1
 8005558:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4aaa      	ldr	r2, [pc, #680]	@ (8005808 <UART_SetConfig+0x354>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d131      	bne.n	80055c8 <UART_SetConfig+0x114>
 8005564:	4ba9      	ldr	r3, [pc, #676]	@ (800580c <UART_SetConfig+0x358>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	2203      	movs	r2, #3
 800556a:	4013      	ands	r3, r2
 800556c:	2b03      	cmp	r3, #3
 800556e:	d01d      	beq.n	80055ac <UART_SetConfig+0xf8>
 8005570:	d823      	bhi.n	80055ba <UART_SetConfig+0x106>
 8005572:	2b02      	cmp	r3, #2
 8005574:	d00c      	beq.n	8005590 <UART_SetConfig+0xdc>
 8005576:	d820      	bhi.n	80055ba <UART_SetConfig+0x106>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <UART_SetConfig+0xce>
 800557c:	2b01      	cmp	r3, #1
 800557e:	d00e      	beq.n	800559e <UART_SetConfig+0xea>
 8005580:	e01b      	b.n	80055ba <UART_SetConfig+0x106>
 8005582:	231b      	movs	r3, #27
 8005584:	2220      	movs	r2, #32
 8005586:	189b      	adds	r3, r3, r2
 8005588:	19db      	adds	r3, r3, r7
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e071      	b.n	8005674 <UART_SetConfig+0x1c0>
 8005590:	231b      	movs	r3, #27
 8005592:	2220      	movs	r2, #32
 8005594:	189b      	adds	r3, r3, r2
 8005596:	19db      	adds	r3, r3, r7
 8005598:	2202      	movs	r2, #2
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e06a      	b.n	8005674 <UART_SetConfig+0x1c0>
 800559e:	231b      	movs	r3, #27
 80055a0:	2220      	movs	r2, #32
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	19db      	adds	r3, r3, r7
 80055a6:	2204      	movs	r2, #4
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e063      	b.n	8005674 <UART_SetConfig+0x1c0>
 80055ac:	231b      	movs	r3, #27
 80055ae:	2220      	movs	r2, #32
 80055b0:	189b      	adds	r3, r3, r2
 80055b2:	19db      	adds	r3, r3, r7
 80055b4:	2208      	movs	r2, #8
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e05c      	b.n	8005674 <UART_SetConfig+0x1c0>
 80055ba:	231b      	movs	r3, #27
 80055bc:	2220      	movs	r2, #32
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	19db      	adds	r3, r3, r7
 80055c2:	2210      	movs	r2, #16
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e055      	b.n	8005674 <UART_SetConfig+0x1c0>
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a90      	ldr	r2, [pc, #576]	@ (8005810 <UART_SetConfig+0x35c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d106      	bne.n	80055e0 <UART_SetConfig+0x12c>
 80055d2:	231b      	movs	r3, #27
 80055d4:	2220      	movs	r2, #32
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	19db      	adds	r3, r3, r7
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e049      	b.n	8005674 <UART_SetConfig+0x1c0>
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a86      	ldr	r2, [pc, #536]	@ (8005800 <UART_SetConfig+0x34c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d13e      	bne.n	8005668 <UART_SetConfig+0x1b4>
 80055ea:	4b88      	ldr	r3, [pc, #544]	@ (800580c <UART_SetConfig+0x358>)
 80055ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ee:	23c0      	movs	r3, #192	@ 0xc0
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4013      	ands	r3, r2
 80055f4:	22c0      	movs	r2, #192	@ 0xc0
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d027      	beq.n	800564c <UART_SetConfig+0x198>
 80055fc:	22c0      	movs	r2, #192	@ 0xc0
 80055fe:	0112      	lsls	r2, r2, #4
 8005600:	4293      	cmp	r3, r2
 8005602:	d82a      	bhi.n	800565a <UART_SetConfig+0x1a6>
 8005604:	2280      	movs	r2, #128	@ 0x80
 8005606:	0112      	lsls	r2, r2, #4
 8005608:	4293      	cmp	r3, r2
 800560a:	d011      	beq.n	8005630 <UART_SetConfig+0x17c>
 800560c:	2280      	movs	r2, #128	@ 0x80
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	4293      	cmp	r3, r2
 8005612:	d822      	bhi.n	800565a <UART_SetConfig+0x1a6>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <UART_SetConfig+0x16e>
 8005618:	2280      	movs	r2, #128	@ 0x80
 800561a:	00d2      	lsls	r2, r2, #3
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <UART_SetConfig+0x18a>
 8005620:	e01b      	b.n	800565a <UART_SetConfig+0x1a6>
 8005622:	231b      	movs	r3, #27
 8005624:	2220      	movs	r2, #32
 8005626:	189b      	adds	r3, r3, r2
 8005628:	19db      	adds	r3, r3, r7
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e021      	b.n	8005674 <UART_SetConfig+0x1c0>
 8005630:	231b      	movs	r3, #27
 8005632:	2220      	movs	r2, #32
 8005634:	189b      	adds	r3, r3, r2
 8005636:	19db      	adds	r3, r3, r7
 8005638:	2202      	movs	r2, #2
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e01a      	b.n	8005674 <UART_SetConfig+0x1c0>
 800563e:	231b      	movs	r3, #27
 8005640:	2220      	movs	r2, #32
 8005642:	189b      	adds	r3, r3, r2
 8005644:	19db      	adds	r3, r3, r7
 8005646:	2204      	movs	r2, #4
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e013      	b.n	8005674 <UART_SetConfig+0x1c0>
 800564c:	231b      	movs	r3, #27
 800564e:	2220      	movs	r2, #32
 8005650:	189b      	adds	r3, r3, r2
 8005652:	19db      	adds	r3, r3, r7
 8005654:	2208      	movs	r2, #8
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e00c      	b.n	8005674 <UART_SetConfig+0x1c0>
 800565a:	231b      	movs	r3, #27
 800565c:	2220      	movs	r2, #32
 800565e:	189b      	adds	r3, r3, r2
 8005660:	19db      	adds	r3, r3, r7
 8005662:	2210      	movs	r2, #16
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e005      	b.n	8005674 <UART_SetConfig+0x1c0>
 8005668:	231b      	movs	r3, #27
 800566a:	2220      	movs	r2, #32
 800566c:	189b      	adds	r3, r3, r2
 800566e:	19db      	adds	r3, r3, r7
 8005670:	2210      	movs	r2, #16
 8005672:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a61      	ldr	r2, [pc, #388]	@ (8005800 <UART_SetConfig+0x34c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d000      	beq.n	8005680 <UART_SetConfig+0x1cc>
 800567e:	e092      	b.n	80057a6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005680:	231b      	movs	r3, #27
 8005682:	2220      	movs	r2, #32
 8005684:	189b      	adds	r3, r3, r2
 8005686:	19db      	adds	r3, r3, r7
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d015      	beq.n	80056ba <UART_SetConfig+0x206>
 800568e:	dc18      	bgt.n	80056c2 <UART_SetConfig+0x20e>
 8005690:	2b04      	cmp	r3, #4
 8005692:	d00d      	beq.n	80056b0 <UART_SetConfig+0x1fc>
 8005694:	dc15      	bgt.n	80056c2 <UART_SetConfig+0x20e>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <UART_SetConfig+0x1ec>
 800569a:	2b02      	cmp	r3, #2
 800569c:	d005      	beq.n	80056aa <UART_SetConfig+0x1f6>
 800569e:	e010      	b.n	80056c2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fd fe68 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 80056a4:	0003      	movs	r3, r0
 80056a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056a8:	e014      	b.n	80056d4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005814 <UART_SetConfig+0x360>)
 80056ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056ae:	e011      	b.n	80056d4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b0:	f7fd fdd4 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80056b4:	0003      	movs	r3, r0
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056b8:	e00c      	b.n	80056d4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ba:	2380      	movs	r3, #128	@ 0x80
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056c0:	e008      	b.n	80056d4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80056c6:	231a      	movs	r3, #26
 80056c8:	2220      	movs	r2, #32
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	19db      	adds	r3, r3, r7
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
        break;
 80056d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d100      	bne.n	80056dc <UART_SetConfig+0x228>
 80056da:	e147      	b.n	800596c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005818 <UART_SetConfig+0x364>)
 80056e2:	0052      	lsls	r2, r2, #1
 80056e4:	5ad3      	ldrh	r3, [r2, r3]
 80056e6:	0019      	movs	r1, r3
 80056e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80056ea:	f7fa fd0b 	bl	8000104 <__udivsi3>
 80056ee:	0003      	movs	r3, r0
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	0013      	movs	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056fe:	429a      	cmp	r2, r3
 8005700:	d305      	bcc.n	800570e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570a:	429a      	cmp	r2, r3
 800570c:	d906      	bls.n	800571c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800570e:	231a      	movs	r3, #26
 8005710:	2220      	movs	r2, #32
 8005712:	189b      	adds	r3, r3, r2
 8005714:	19db      	adds	r3, r3, r7
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e127      	b.n	800596c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800571c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <UART_SetConfig+0x364>)
 800572a:	0052      	lsls	r2, r2, #1
 800572c:	5ad3      	ldrh	r3, [r2, r3]
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	69b8      	ldr	r0, [r7, #24]
 800573a:	69f9      	ldr	r1, [r7, #28]
 800573c:	f7fa fd6e 	bl	800021c <__aeabi_uldivmod>
 8005740:	0002      	movs	r2, r0
 8005742:	000b      	movs	r3, r1
 8005744:	0e11      	lsrs	r1, r2, #24
 8005746:	021d      	lsls	r5, r3, #8
 8005748:	430d      	orrs	r5, r1
 800574a:	0214      	lsls	r4, r2, #8
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68b8      	ldr	r0, [r7, #8]
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	1900      	adds	r0, r0, r4
 800575e:	4169      	adcs	r1, r5
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f7fa fd55 	bl	800021c <__aeabi_uldivmod>
 8005772:	0002      	movs	r2, r0
 8005774:	000b      	movs	r3, r1
 8005776:	0013      	movs	r3, r2
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800577a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800577c:	23c0      	movs	r3, #192	@ 0xc0
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	429a      	cmp	r2, r3
 8005782:	d309      	bcc.n	8005798 <UART_SetConfig+0x2e4>
 8005784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005786:	2380      	movs	r3, #128	@ 0x80
 8005788:	035b      	lsls	r3, r3, #13
 800578a:	429a      	cmp	r2, r3
 800578c:	d204      	bcs.n	8005798 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e0e9      	b.n	800596c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005798:	231a      	movs	r3, #26
 800579a:	2220      	movs	r2, #32
 800579c:	189b      	adds	r3, r3, r2
 800579e:	19db      	adds	r3, r3, r7
 80057a0:	2201      	movs	r2, #1
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e0e2      	b.n	800596c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	2380      	movs	r3, #128	@ 0x80
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d000      	beq.n	80057b4 <UART_SetConfig+0x300>
 80057b2:	e083      	b.n	80058bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80057b4:	231b      	movs	r3, #27
 80057b6:	2220      	movs	r2, #32
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	19db      	adds	r3, r3, r7
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d015      	beq.n	80057ee <UART_SetConfig+0x33a>
 80057c2:	dc2b      	bgt.n	800581c <UART_SetConfig+0x368>
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d00d      	beq.n	80057e4 <UART_SetConfig+0x330>
 80057c8:	dc28      	bgt.n	800581c <UART_SetConfig+0x368>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <UART_SetConfig+0x320>
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d005      	beq.n	80057de <UART_SetConfig+0x32a>
 80057d2:	e023      	b.n	800581c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fd fdce 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 80057d8:	0003      	movs	r3, r0
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057dc:	e027      	b.n	800582e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <UART_SetConfig+0x360>)
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057e2:	e024      	b.n	800582e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e4:	f7fd fd3a 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80057e8:	0003      	movs	r3, r0
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057ec:	e01f      	b.n	800582e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	2380      	movs	r3, #128	@ 0x80
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057f4:	e01b      	b.n	800582e <UART_SetConfig+0x37a>
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	cfff69f3 	.word	0xcfff69f3
 80057fc:	ffffcfff 	.word	0xffffcfff
 8005800:	40008000 	.word	0x40008000
 8005804:	11fff4ff 	.word	0x11fff4ff
 8005808:	40013800 	.word	0x40013800
 800580c:	40021000 	.word	0x40021000
 8005810:	40004400 	.word	0x40004400
 8005814:	00f42400 	.word	0x00f42400
 8005818:	0800603c 	.word	0x0800603c
      default:
        pclk = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005820:	231a      	movs	r3, #26
 8005822:	2220      	movs	r2, #32
 8005824:	189b      	adds	r3, r3, r2
 8005826:	19db      	adds	r3, r3, r7
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
        break;
 800582c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <UART_SetConfig+0x382>
 8005834:	e09a      	b.n	800596c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800583a:	4b58      	ldr	r3, [pc, #352]	@ (800599c <UART_SetConfig+0x4e8>)
 800583c:	0052      	lsls	r2, r2, #1
 800583e:	5ad3      	ldrh	r3, [r2, r3]
 8005840:	0019      	movs	r1, r3
 8005842:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005844:	f7fa fc5e 	bl	8000104 <__udivsi3>
 8005848:	0003      	movs	r3, r0
 800584a:	005a      	lsls	r2, r3, #1
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	18d2      	adds	r2, r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0019      	movs	r1, r3
 800585a:	0010      	movs	r0, r2
 800585c:	f7fa fc52 	bl	8000104 <__udivsi3>
 8005860:	0003      	movs	r3, r0
 8005862:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d921      	bls.n	80058ae <UART_SetConfig+0x3fa>
 800586a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586c:	2380      	movs	r3, #128	@ 0x80
 800586e:	025b      	lsls	r3, r3, #9
 8005870:	429a      	cmp	r2, r3
 8005872:	d21c      	bcs.n	80058ae <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	b29a      	uxth	r2, r3
 8005878:	200e      	movs	r0, #14
 800587a:	2420      	movs	r4, #32
 800587c:	1903      	adds	r3, r0, r4
 800587e:	19db      	adds	r3, r3, r7
 8005880:	210f      	movs	r1, #15
 8005882:	438a      	bics	r2, r1
 8005884:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	2207      	movs	r2, #7
 800588e:	4013      	ands	r3, r2
 8005890:	b299      	uxth	r1, r3
 8005892:	1903      	adds	r3, r0, r4
 8005894:	19db      	adds	r3, r3, r7
 8005896:	1902      	adds	r2, r0, r4
 8005898:	19d2      	adds	r2, r2, r7
 800589a:	8812      	ldrh	r2, [r2, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	1902      	adds	r2, r0, r4
 80058a6:	19d2      	adds	r2, r2, r7
 80058a8:	8812      	ldrh	r2, [r2, #0]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	e05e      	b.n	800596c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80058ae:	231a      	movs	r3, #26
 80058b0:	2220      	movs	r2, #32
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	19db      	adds	r3, r3, r7
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e057      	b.n	800596c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058bc:	231b      	movs	r3, #27
 80058be:	2220      	movs	r2, #32
 80058c0:	189b      	adds	r3, r3, r2
 80058c2:	19db      	adds	r3, r3, r7
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d015      	beq.n	80058f6 <UART_SetConfig+0x442>
 80058ca:	dc18      	bgt.n	80058fe <UART_SetConfig+0x44a>
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d00d      	beq.n	80058ec <UART_SetConfig+0x438>
 80058d0:	dc15      	bgt.n	80058fe <UART_SetConfig+0x44a>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <UART_SetConfig+0x428>
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d005      	beq.n	80058e6 <UART_SetConfig+0x432>
 80058da:	e010      	b.n	80058fe <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fd fd4a 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 80058e0:	0003      	movs	r3, r0
 80058e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058e4:	e014      	b.n	8005910 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e6:	4b2e      	ldr	r3, [pc, #184]	@ (80059a0 <UART_SetConfig+0x4ec>)
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058ea:	e011      	b.n	8005910 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ec:	f7fd fcb6 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80058f0:	0003      	movs	r3, r0
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058f4:	e00c      	b.n	8005910 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	2380      	movs	r3, #128	@ 0x80
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058fc:	e008      	b.n	8005910 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005902:	231a      	movs	r3, #26
 8005904:	2220      	movs	r2, #32
 8005906:	189b      	adds	r3, r3, r2
 8005908:	19db      	adds	r3, r3, r7
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
        break;
 800590e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800591a:	4b20      	ldr	r3, [pc, #128]	@ (800599c <UART_SetConfig+0x4e8>)
 800591c:	0052      	lsls	r2, r2, #1
 800591e:	5ad3      	ldrh	r3, [r2, r3]
 8005920:	0019      	movs	r1, r3
 8005922:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005924:	f7fa fbee 	bl	8000104 <__udivsi3>
 8005928:	0003      	movs	r3, r0
 800592a:	001a      	movs	r2, r3
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	18d2      	adds	r2, r2, r3
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	0019      	movs	r1, r3
 800593a:	0010      	movs	r0, r2
 800593c:	f7fa fbe2 	bl	8000104 <__udivsi3>
 8005940:	0003      	movs	r3, r0
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	2b0f      	cmp	r3, #15
 8005948:	d90a      	bls.n	8005960 <UART_SetConfig+0x4ac>
 800594a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	025b      	lsls	r3, r3, #9
 8005950:	429a      	cmp	r2, r3
 8005952:	d205      	bcs.n	8005960 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	b29a      	uxth	r2, r3
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	e005      	b.n	800596c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005960:	231a      	movs	r3, #26
 8005962:	2220      	movs	r2, #32
 8005964:	189b      	adds	r3, r3, r2
 8005966:	19db      	adds	r3, r3, r7
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	226a      	movs	r2, #106	@ 0x6a
 8005970:	2101      	movs	r1, #1
 8005972:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	2268      	movs	r2, #104	@ 0x68
 8005978:	2101      	movs	r1, #1
 800597a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	2200      	movs	r2, #0
 8005980:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	2200      	movs	r2, #0
 8005986:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005988:	231a      	movs	r3, #26
 800598a:	2220      	movs	r2, #32
 800598c:	189b      	adds	r3, r3, r2
 800598e:	19db      	adds	r3, r3, r7
 8005990:	781b      	ldrb	r3, [r3, #0]
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b010      	add	sp, #64	@ 0x40
 8005998:	bdb0      	pop	{r4, r5, r7, pc}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	0800603c 	.word	0x0800603c
 80059a0:	00f42400 	.word	0x00f42400

080059a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	2208      	movs	r2, #8
 80059b2:	4013      	ands	r3, r2
 80059b4:	d00b      	beq.n	80059ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4a4a      	ldr	r2, [pc, #296]	@ (8005ae8 <UART_AdvFeatureConfig+0x144>)
 80059be:	4013      	ands	r3, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d2:	2201      	movs	r2, #1
 80059d4:	4013      	ands	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4a43      	ldr	r2, [pc, #268]	@ (8005aec <UART_AdvFeatureConfig+0x148>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	0019      	movs	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	2202      	movs	r2, #2
 80059f6:	4013      	ands	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a3b      	ldr	r2, [pc, #236]	@ (8005af0 <UART_AdvFeatureConfig+0x14c>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	0019      	movs	r1, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	2204      	movs	r2, #4
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4a34      	ldr	r2, [pc, #208]	@ (8005af4 <UART_AdvFeatureConfig+0x150>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	2210      	movs	r2, #16
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <UART_AdvFeatureConfig+0x154>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4a25      	ldr	r2, [pc, #148]	@ (8005afc <UART_AdvFeatureConfig+0x158>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	2240      	movs	r2, #64	@ 0x40
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d01d      	beq.n	8005abe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <UART_AdvFeatureConfig+0x15c>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a9e:	2380      	movs	r3, #128	@ 0x80
 8005aa0:	035b      	lsls	r3, r3, #13
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d10b      	bne.n	8005abe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a15      	ldr	r2, [pc, #84]	@ (8005b04 <UART_AdvFeatureConfig+0x160>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	2280      	movs	r2, #128	@ 0x80
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4a0e      	ldr	r2, [pc, #56]	@ (8005b08 <UART_AdvFeatureConfig+0x164>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }
}
 8005ae0:	46c0      	nop			@ (mov r8, r8)
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	ffff7fff 	.word	0xffff7fff
 8005aec:	fffdffff 	.word	0xfffdffff
 8005af0:	fffeffff 	.word	0xfffeffff
 8005af4:	fffbffff 	.word	0xfffbffff
 8005af8:	ffffefff 	.word	0xffffefff
 8005afc:	ffffdfff 	.word	0xffffdfff
 8005b00:	ffefffff 	.word	0xffefffff
 8005b04:	ff9fffff 	.word	0xff9fffff
 8005b08:	fff7ffff 	.word	0xfff7ffff

08005b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b092      	sub	sp, #72	@ 0x48
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2290      	movs	r2, #144	@ 0x90
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b1c:	f7fb fd60 	bl	80015e0 <HAL_GetTick>
 8005b20:	0003      	movs	r3, r0
 8005b22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d12d      	bne.n	8005b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b34:	2280      	movs	r2, #128	@ 0x80
 8005b36:	0391      	lsls	r1, r2, #14
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4a47      	ldr	r2, [pc, #284]	@ (8005c58 <UART_CheckIdleState+0x14c>)
 8005b3c:	9200      	str	r2, [sp, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f000 f88e 	bl	8005c60 <UART_WaitOnFlagUntilTimeout>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d022      	beq.n	8005b8e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b48:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b52:	2301      	movs	r3, #1
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			@ (mov r8, r8)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2180      	movs	r1, #128	@ 0x80
 8005b6a:	438a      	bics	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2288      	movs	r2, #136	@ 0x88
 8005b7e:	2120      	movs	r1, #32
 8005b80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2284      	movs	r2, #132	@ 0x84
 8005b86:	2100      	movs	r1, #0
 8005b88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e060      	b.n	8005c50 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2204      	movs	r2, #4
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d146      	bne.n	8005c2a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9e:	2280      	movs	r2, #128	@ 0x80
 8005ba0:	03d1      	lsls	r1, r2, #15
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c58 <UART_CheckIdleState+0x14c>)
 8005ba6:	9200      	str	r2, [sp, #0]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f000 f859 	bl	8005c60 <UART_WaitOnFlagUntilTimeout>
 8005bae:	1e03      	subs	r3, r0, #0
 8005bb0:	d03b      	beq.n	8005c2a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f383 8810 	msr	PRIMASK, r3
}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4922      	ldr	r1, [pc, #136]	@ (8005c5c <UART_CheckIdleState+0x150>)
 8005bd4:	400a      	ands	r2, r1
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f383 8810 	msr	PRIMASK, r3
}
 8005be2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be4:	f3ef 8310 	mrs	r3, PRIMASK
 8005be8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bee:	2301      	movs	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2101      	movs	r1, #1
 8005c06:	438a      	bics	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	f383 8810 	msr	PRIMASK, r3
}
 8005c14:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	228c      	movs	r2, #140	@ 0x8c
 8005c1a:	2120      	movs	r1, #32
 8005c1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2284      	movs	r2, #132	@ 0x84
 8005c22:	2100      	movs	r1, #0
 8005c24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e012      	b.n	8005c50 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2288      	movs	r2, #136	@ 0x88
 8005c2e:	2120      	movs	r1, #32
 8005c30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	228c      	movs	r2, #140	@ 0x8c
 8005c36:	2120      	movs	r1, #32
 8005c38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2284      	movs	r2, #132	@ 0x84
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b010      	add	sp, #64	@ 0x40
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	01ffffff 	.word	0x01ffffff
 8005c5c:	fffffedf 	.word	0xfffffedf

08005c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	1dfb      	adds	r3, r7, #7
 8005c6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c70:	e051      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3301      	adds	r3, #1
 8005c76:	d04e      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c78:	f7fb fcb2 	bl	80015e0 <HAL_GetTick>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e051      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d03b      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b80      	cmp	r3, #128	@ 0x80
 8005ca2:	d038      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b40      	cmp	r3, #64	@ 0x40
 8005ca8:	d035      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d111      	bne.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f000 f83c 	bl	8005d40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2290      	movs	r2, #144	@ 0x90
 8005ccc:	2108      	movs	r1, #8
 8005cce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2284      	movs	r2, #132	@ 0x84
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e02c      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	2380      	movs	r3, #128	@ 0x80
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d112      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2280      	movs	r2, #128	@ 0x80
 8005cf6:	0112      	lsls	r2, r2, #4
 8005cf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f000 f81f 	bl	8005d40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2290      	movs	r2, #144	@ 0x90
 8005d06:	2120      	movs	r1, #32
 8005d08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2284      	movs	r2, #132	@ 0x84
 8005d0e:	2100      	movs	r1, #0
 8005d10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00f      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	425a      	negs	r2, r3
 8005d26:	4153      	adcs	r3, r2
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	1dfb      	adds	r3, r7, #7
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d09e      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	0018      	movs	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b004      	add	sp, #16
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08e      	sub	sp, #56	@ 0x38
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d48:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d52:	2301      	movs	r3, #1
 8005d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f383 8810 	msr	PRIMASK, r3
}
 8005d5c:	46c0      	nop			@ (mov r8, r8)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4926      	ldr	r1, [pc, #152]	@ (8005e04 <UART_EndRxTransfer+0xc4>)
 8005d6a:	400a      	ands	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f383 8810 	msr	PRIMASK, r3
}
 8005d78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	623b      	str	r3, [r7, #32]
  return(result);
 8005d80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d84:	2301      	movs	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	f383 8810 	msr	PRIMASK, r3
}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	491b      	ldr	r1, [pc, #108]	@ (8005e08 <UART_EndRxTransfer+0xc8>)
 8005d9c:	400a      	ands	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d118      	bne.n	8005de6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db4:	f3ef 8310 	mrs	r3, PRIMASK
 8005db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f383 8810 	msr	PRIMASK, r3
}
 8005dc8:	46c0      	nop			@ (mov r8, r8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2110      	movs	r1, #16
 8005dd6:	438a      	bics	r2, r1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f383 8810 	msr	PRIMASK, r3
}
 8005de4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	228c      	movs	r2, #140	@ 0x8c
 8005dea:	2120      	movs	r1, #32
 8005dec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b00e      	add	sp, #56	@ 0x38
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	fffffedf 	.word	0xfffffedf
 8005e08:	effffffe 	.word	0xeffffffe

08005e0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	225e      	movs	r2, #94	@ 0x5e
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2256      	movs	r2, #86	@ 0x56
 8005e26:	2100      	movs	r1, #0
 8005e28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7ff fb2d 	bl	800548c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e32:	46c0      	nop			@ (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b004      	add	sp, #16
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b086      	sub	sp, #24
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e42:	f3ef 8310 	mrs	r3, PRIMASK
 8005e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e48:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f383 8810 	msr	PRIMASK, r3
}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2140      	movs	r1, #64	@ 0x40
 8005e64:	438a      	bics	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f383 8810 	msr	PRIMASK, r3
}
 8005e72:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2288      	movs	r2, #136	@ 0x88
 8005e78:	2120      	movs	r1, #32
 8005e7a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f7ff faf9 	bl	800547c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b006      	add	sp, #24
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b002      	add	sp, #8
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b002      	add	sp, #8
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b002      	add	sp, #8
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <memset>:
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	1882      	adds	r2, r0, r2
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d100      	bne.n	8005ecc <memset+0xa>
 8005eca:	4770      	bx	lr
 8005ecc:	7019      	strb	r1, [r3, #0]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	e7f9      	b.n	8005ec6 <memset+0x4>
	...

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	4c0c      	ldr	r4, [pc, #48]	@ (8005f0c <__libc_init_array+0x38>)
 8005eda:	4d0d      	ldr	r5, [pc, #52]	@ (8005f10 <__libc_init_array+0x3c>)
 8005edc:	1b64      	subs	r4, r4, r5
 8005ede:	10a4      	asrs	r4, r4, #2
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	f000 f819 	bl	8005f1c <_init>
 8005eea:	4c0a      	ldr	r4, [pc, #40]	@ (8005f14 <__libc_init_array+0x40>)
 8005eec:	4d0a      	ldr	r5, [pc, #40]	@ (8005f18 <__libc_init_array+0x44>)
 8005eee:	1b64      	subs	r4, r4, r5
 8005ef0:	10a4      	asrs	r4, r4, #2
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	00b3      	lsls	r3, r6, #2
 8005efa:	58eb      	ldr	r3, [r5, r3]
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	00b3      	lsls	r3, r6, #2
 8005f04:	58eb      	ldr	r3, [r5, r3]
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	0800605c 	.word	0x0800605c
 8005f10:	0800605c 	.word	0x0800605c
 8005f14:	08006060 	.word	0x08006060
 8005f18:	0800605c 	.word	0x0800605c

08005f1c <_init>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr

08005f28 <_fini>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr
