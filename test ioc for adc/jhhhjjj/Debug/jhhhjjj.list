
jhhhjjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005648  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005704  08005704  00006704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005824  08005824  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005824  08005824  00006824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800582c  0800582c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800582c  0800582c  0000682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005830  08005830  00006830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005834  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000000c  08005840  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08005840  00007410  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da4  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245a  00000000  00000000  00018dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  0001c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001740a  00000000  00000000  0001cf61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013532  00000000  00000000  0003436b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d10  00000000  00000000  0004789d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e15ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000e15f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e5170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080056ec 	.word	0x080056ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080056ec 	.word	0x080056ec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f001 f89e 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f818 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fcc4 	bl	8000de0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000458:	f000 fc9c 	bl	8000d94 <MX_DMA_Init>
  MX_ADC1_Init();
 800045c:	f000 f85e 	bl	800051c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000460:	f000 fc64 	bl	8000d2c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000464:	f000 f9fa 	bl	800085c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000468:	f000 fa74 	bl	8000954 <MX_TIM3_Init>
  MX_TIM17_Init();
 800046c:	f000 fbd0 	bl	8000c10 <MX_TIM17_Init>
  MX_TIM1_Init();
 8000470:	f000 f906 	bl	8000680 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000474:	f000 faee 	bl	8000a54 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000478:	f000 fb3e 	bl	8000af8 <MX_TIM16_Init>
  MX_IWDG_Init();
 800047c:	f000 f8e0 	bl	8000640 <MX_IWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	e7fd      	b.n	8000480 <main+0x38>

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b093      	sub	sp, #76	@ 0x4c
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	2410      	movs	r4, #16
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2338      	movs	r3, #56	@ 0x38
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f005 f8fd 	bl	8005694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	2310      	movs	r3, #16
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f005 f8f6 	bl	8005694 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f9ed 	bl	800288c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	220a      	movs	r2, #10
 80004b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2280      	movs	r2, #128	@ 0x80
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004c0:	0021      	movs	r1, r4
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2240      	movs	r2, #64	@ 0x40
 80004cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2201      	movs	r2, #1
 80004d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fa21 	bl	8002924 <HAL_RCC_OscConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004e6:	f000 fd15 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	003b      	movs	r3, r7
 80004ec:	2207      	movs	r2, #7
 80004ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000502:	003b      	movs	r3, r7
 8000504:	2100      	movs	r1, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f002 fd26 	bl	8002f58 <HAL_RCC_ClockConfig>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000510:	f000 fd00 	bl	8000f14 <Error_Handler>
  }
}
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b013      	add	sp, #76	@ 0x4c
 800051a:	bd90      	pop	{r4, r7, pc}

0800051c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	0018      	movs	r0, r3
 8000526:	230c      	movs	r3, #12
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f005 f8b2 	bl	8005694 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000530:	4b41      	ldr	r3, [pc, #260]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000532:	4a42      	ldr	r2, [pc, #264]	@ (800063c <MX_ADC1_Init+0x120>)
 8000534:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000536:	4b40      	ldr	r3, [pc, #256]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000538:	2280      	movs	r2, #128	@ 0x80
 800053a:	05d2      	lsls	r2, r2, #23
 800053c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800053e:	4b3e      	ldr	r3, [pc, #248]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000544:	4b3c      	ldr	r3, [pc, #240]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800054a:	4b3b      	ldr	r3, [pc, #236]	@ (8000638 <MX_ADC1_Init+0x11c>)
 800054c:	2280      	movs	r2, #128	@ 0x80
 800054e:	0392      	lsls	r2, r2, #14
 8000550:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000552:	4b39      	ldr	r3, [pc, #228]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000554:	2208      	movs	r2, #8
 8000556:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000558:	4b37      	ldr	r3, [pc, #220]	@ (8000638 <MX_ADC1_Init+0x11c>)
 800055a:	2200      	movs	r2, #0
 800055c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800055e:	4b36      	ldr	r3, [pc, #216]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000560:	2200      	movs	r2, #0
 8000562:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000564:	4b34      	ldr	r3, [pc, #208]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000566:	2200      	movs	r2, #0
 8000568:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800056a:	4b33      	ldr	r3, [pc, #204]	@ (8000638 <MX_ADC1_Init+0x11c>)
 800056c:	2204      	movs	r2, #4
 800056e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000570:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000572:	2220      	movs	r2, #32
 8000574:	2100      	movs	r1, #0
 8000576:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000578:	4b2f      	ldr	r3, [pc, #188]	@ (8000638 <MX_ADC1_Init+0x11c>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057e:	4b2e      	ldr	r3, [pc, #184]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000580:	2200      	movs	r2, #0
 8000582:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000584:	4b2c      	ldr	r3, [pc, #176]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000586:	222c      	movs	r2, #44	@ 0x2c
 8000588:	2100      	movs	r1, #0
 800058a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800058c:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <MX_ADC1_Init+0x11c>)
 800058e:	2200      	movs	r2, #0
 8000590:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000592:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000594:	2200      	movs	r2, #0
 8000596:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <MX_ADC1_Init+0x11c>)
 800059a:	2200      	movs	r2, #0
 800059c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800059e:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <MX_ADC1_Init+0x11c>)
 80005a0:	223c      	movs	r2, #60	@ 0x3c
 80005a2:	2100      	movs	r1, #0
 80005a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005a6:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <MX_ADC1_Init+0x11c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <MX_ADC1_Init+0x11c>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 f970 	bl	8001894 <HAL_ADC_Init>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005b8:	f000 fcac 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x11c>)
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fb05 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005de:	f000 fc99 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2204      	movs	r2, #4
 80005e6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	1d3a      	adds	r2, r7, #4
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <MX_ADC1_Init+0x11c>)
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 faf8 	bl	8001be4 <HAL_ADC_ConfigChannel>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80005f8:	f000 fc8c 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2208      	movs	r2, #8
 8000600:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f001 faeb 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000612:	f000 fc7f 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	220c      	movs	r2, #12
 800061a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	1d3a      	adds	r2, r7, #4
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_ADC1_Init+0x11c>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fade 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800062c:	f000 fc72 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000028 	.word	0x20000028
 800063c:	40012400 	.word	0x40012400

08000640 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_IWDG_Init+0x34>)
 8000646:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <MX_IWDG_Init+0x38>)
 8000648:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_IWDG_Init+0x34>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_IWDG_Init+0x34>)
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <MX_IWDG_Init+0x3c>)
 8000654:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_IWDG_Init+0x34>)
 8000658:	4a08      	ldr	r2, [pc, #32]	@ (800067c <MX_IWDG_Init+0x3c>)
 800065a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <MX_IWDG_Init+0x34>)
 800065e:	0018      	movs	r0, r3
 8000660:	f002 f8c2 	bl	80027e8 <HAL_IWDG_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000668:	f000 fc54 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	200000e8 	.word	0x200000e8
 8000678:	40003000 	.word	0x40003000
 800067c:	00000fff 	.word	0x00000fff

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	@ 0x70
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	2360      	movs	r3, #96	@ 0x60
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	2310      	movs	r3, #16
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f004 ffff 	bl	8005694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	2354      	movs	r3, #84	@ 0x54
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	0018      	movs	r0, r3
 800069c:	230c      	movs	r3, #12
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f004 fff7 	bl	8005694 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a6:	2338      	movs	r3, #56	@ 0x38
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	0018      	movs	r0, r3
 80006ac:	231c      	movs	r3, #28
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f004 ffef 	bl	8005694 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	2334      	movs	r3, #52	@ 0x34
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f004 ffe8 	bl	8005694 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c4:	4b62      	ldr	r3, [pc, #392]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006c6:	4a63      	ldr	r2, [pc, #396]	@ (8000854 <MX_TIM1_Init+0x1d4>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ca:	4b61      	ldr	r3, [pc, #388]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b5f      	ldr	r3, [pc, #380]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 80006d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006d8:	4a5f      	ldr	r2, [pc, #380]	@ (8000858 <MX_TIM1_Init+0x1d8>)
 80006da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006dc:	4b5c      	ldr	r3, [pc, #368]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e4:	4b5a      	ldr	r3, [pc, #360]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ea:	4b59      	ldr	r3, [pc, #356]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f0:	4b57      	ldr	r3, [pc, #348]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 ff54 	bl	80035a0 <HAL_TIM_Base_Init>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006fc:	f000 fc0a 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000700:	2160      	movs	r1, #96	@ 0x60
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	0152      	lsls	r2, r2, #5
 8000708:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070a:	187a      	adds	r2, r7, r1
 800070c:	4b50      	ldr	r3, [pc, #320]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f003 fbc9 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800071a:	f000 fbfb 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800071e:	4b4c      	ldr	r3, [pc, #304]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 8000720:	0018      	movs	r0, r3
 8000722:	f002 ff95 	bl	8003650 <HAL_TIM_OC_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800072a:	f000 fbf3 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800072e:	4b48      	ldr	r3, [pc, #288]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 8000730:	0018      	movs	r0, r3
 8000732:	f002 ffed 	bl	8003710 <HAL_TIM_PWM_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800073a:	f000 fbeb 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2154      	movs	r1, #84	@ 0x54
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000752:	187a      	adds	r2, r7, r1
 8000754:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f004 f97d 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000762:	f000 fbd7 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000766:	2138      	movs	r1, #56	@ 0x38
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1024-1;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	4a39      	ldr	r2, [pc, #228]	@ (8000858 <MX_TIM1_Init+0x1d8>)
 8000772:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	1879      	adds	r1, r7, r1
 8000794:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 8000796:	2200      	movs	r2, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f003 f981 	bl	8003aa0 <HAL_TIM_OC_ConfigChannel>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80007a2:	f000 fbb7 	bl	8000f14 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80007a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2108      	movs	r1, #8
 80007b2:	430a      	orrs	r2, r1
 80007b4:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2138      	movs	r1, #56	@ 0x38
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2260      	movs	r2, #96	@ 0x60
 80007bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 45;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	222d      	movs	r2, #45	@ 0x2d
 80007c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007c4:	1879      	adds	r1, r7, r1
 80007c6:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 80007c8:	220c      	movs	r2, #12
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 fa6c 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80007d4:	f000 fb9e 	bl	8000f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2280      	movs	r2, #128	@ 0x80
 80007fa:	0192      	lsls	r2, r2, #6
 80007fc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	0492      	lsls	r2, r2, #18
 8000816:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f004 f979 	bl	8004b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x1be>
  {
    Error_Handler();
 800083a:	f000 fb6b 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <MX_TIM1_Init+0x1d0>)
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fcf1 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b01c      	add	sp, #112	@ 0x70
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	200000f8 	.word	0x200000f8
 8000854:	40012c00 	.word	0x40012c00
 8000858:	000003ff 	.word	0x000003ff

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	2320      	movs	r3, #32
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2310      	movs	r3, #16
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f004 ff11 	bl	8005694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	2314      	movs	r3, #20
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	0018      	movs	r0, r3
 8000878:	230c      	movs	r3, #12
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f004 ff09 	bl	8005694 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	0018      	movs	r0, r3
 8000886:	2310      	movs	r3, #16
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f004 ff02 	bl	8005694 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000890:	4b2e      	ldr	r3, [pc, #184]	@ (800094c <MX_TIM2_Init+0xf0>)
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	05d2      	lsls	r2, r2, #23
 8000896:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000898:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <MX_TIM2_Init+0xf0>)
 800089a:	223f      	movs	r2, #63	@ 0x3f
 800089c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 80008a4:	4b29      	ldr	r3, [pc, #164]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000950 <MX_TIM2_Init+0xf4>)
 80008a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80008aa:	4b28      	ldr	r3, [pc, #160]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fe70 	bl	80035a0 <HAL_TIM_Base_Init>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008c4:	f000 fb26 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	2120      	movs	r1, #32
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	0152      	lsls	r2, r2, #5
 80008d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d2:	187a      	adds	r2, r7, r1
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f003 fae5 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80008e2:	f000 fb17 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_TIM2_Init+0xf0>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 ff71 	bl	80037d0 <HAL_TIM_IC_Init>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008f2:	f000 fb0f 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2114      	movs	r1, #20
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000904:	187a      	adds	r2, r7, r1
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_TIM2_Init+0xf0>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f004 f8a4 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000914:	f000 fafe 	bl	8000f14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2202      	movs	r2, #2
 800091c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2201      	movs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	220f      	movs	r2, #15
 800092e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_TIM2_Init+0xf0>)
 8000934:	2200      	movs	r2, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f003 f912 	bl	8003b60 <HAL_TIM_IC_ConfigChannel>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000940:	f000 fae8 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b00c      	add	sp, #48	@ 0x30
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000144 	.word	0x20000144
 8000950:	001fffff 	.word	0x001fffff

08000954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	2328      	movs	r3, #40	@ 0x28
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	0018      	movs	r0, r3
 8000960:	2310      	movs	r3, #16
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f004 fe95 	bl	8005694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	231c      	movs	r3, #28
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	230c      	movs	r3, #12
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f004 fe8d 	bl	8005694 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	003b      	movs	r3, r7
 800097c:	0018      	movs	r0, r3
 800097e:	231c      	movs	r3, #28
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f004 fe86 	bl	8005694 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000988:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 800098a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a48 <MX_TIM3_Init+0xf4>)
 800098c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800098e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 8000990:	4a2e      	ldr	r2, [pc, #184]	@ (8000a4c <MX_TIM3_Init+0xf8>)
 8000992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 800099a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 800099c:	4a2c      	ldr	r2, [pc, #176]	@ (8000a50 <MX_TIM3_Init+0xfc>)
 800099e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a8:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ae:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f002 fdf5 	bl	80035a0 <HAL_TIM_Base_Init>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80009ba:	f000 faab 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	2128      	movs	r1, #40	@ 0x28
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	0152      	lsls	r2, r2, #5
 80009c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f003 fa6a 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009d8:	f000 fa9c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f002 fe36 	bl	8003650 <HAL_TIM_OC_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009e8:	f000 fa94 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	211c      	movs	r1, #28
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f004 f829 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000a0a:	f000 fa83 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	003b      	movs	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	0039      	movs	r1, r7
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_TIM3_Init+0xf0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f003 f837 	bl	8003aa0 <HAL_TIM_OC_ConfigChannel>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000a36:	f000 fa6d 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b00e      	add	sp, #56	@ 0x38
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	20000190 	.word	0x20000190
 8000a48:	40000400 	.word	0x40000400
 8000a4c:	00007fff 	.word	0x00007fff
 8000a50:	00000fff 	.word	0x00000fff

08000a54 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	231c      	movs	r3, #28
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f004 fe16 	bl	8005694 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a6a:	4a21      	ldr	r2, [pc, #132]	@ (8000af0 <MX_TIM14_Init+0x9c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024 - 1;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <MX_TIM14_Init+0xa0>)
 8000a7e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fd85 	bl	80035a0 <HAL_TIM_Base_Init>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fa3b 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 fe35 	bl	8003710 <HAL_TIM_PWM_Init>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 fa33 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2260      	movs	r2, #96	@ 0x60
 8000ab2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac6:	1d39      	adds	r1, r7, #4
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	0018      	movs	r0, r3
 8000ace:	f003 f8eb 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000ad6:	f000 fa1d 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <MX_TIM14_Init+0x98>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fba3 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b008      	add	sp, #32
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	200001dc 	.word	0x200001dc
 8000af0:	40002000 	.word	0x40002000
 8000af4:	000003ff 	.word	0x000003ff

08000af8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	2334      	movs	r3, #52	@ 0x34
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	0018      	movs	r0, r3
 8000b04:	231c      	movs	r3, #28
 8000b06:	001a      	movs	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f004 fdc3 	bl	8005694 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0e:	003b      	movs	r3, r7
 8000b10:	0018      	movs	r0, r3
 8000b12:	2334      	movs	r3, #52	@ 0x34
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f004 fdbc 	bl	8005694 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c0c <MX_TIM16_Init+0x114>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b22:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b37      	ldr	r3, [pc, #220]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256 - 1;
 8000b2e:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000b34:	4b34      	ldr	r3, [pc, #208]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b3c:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b42:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b48:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 fd28 	bl	80035a0 <HAL_TIM_Base_Init>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 f9de 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 fd78 	bl	8003650 <HAL_TIM_OC_Init>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000b64:	f000 f9d6 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b68:	2134      	movs	r1, #52	@ 0x34
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 256 - 1;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22ff      	movs	r2, #255	@ 0xff
 8000b74:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b94:	1879      	adds	r1, r7, r1
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f002 ff80 	bl	8003aa0 <HAL_TIM_OC_ConfigChannel>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000ba4:	f000 f9b6 	bl	8000f14 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	0192      	lsls	r2, r2, #6
 8000bdc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bea:	003a      	movs	r2, r7
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_TIM16_Init+0x110>)
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 ff99 	bl	8004b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8000bfa:	f000 f98b 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b014      	add	sp, #80	@ 0x50
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	20000228 	.word	0x20000228
 8000c0c:	40014400 	.word	0x40014400

08000c10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	@ 0x50
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	2334      	movs	r3, #52	@ 0x34
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	231c      	movs	r3, #28
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f004 fd37 	bl	8005694 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c26:	003b      	movs	r3, r7
 8000c28:	0018      	movs	r0, r3
 8000c2a:	2334      	movs	r3, #52	@ 0x34
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f004 fd30 	bl	8005694 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c34:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c36:	4a3b      	ldr	r2, [pc, #236]	@ (8000d24 <MX_TIM17_Init+0x114>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8000c3a:	4b39      	ldr	r3, [pc, #228]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d28 <MX_TIM17_Init+0x118>)
 8000c3e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10 - 1;
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c48:	2209      	movs	r2, #9
 8000c4a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c4c:	4b34      	ldr	r3, [pc, #208]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c54:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5a:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c60:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fc9c 	bl	80035a0 <HAL_TIM_Base_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000c6c:	f000 f952 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000c70:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 fcec 	bl	8003650 <HAL_TIM_OC_Init>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 f94a 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c80:	2134      	movs	r1, #52	@ 0x34
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10 - 1;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2209      	movs	r2, #9
 8000c8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f002 fef4 	bl	8003aa0 <HAL_TIM_OC_ConfigChannel>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000cbc:	f000 f92a 	bl	8000f14 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	699a      	ldr	r2, [r3, #24]
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2108      	movs	r1, #8
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce8:	003b      	movs	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cee:	003b      	movs	r3, r7
 8000cf0:	2280      	movs	r2, #128	@ 0x80
 8000cf2:	0192      	lsls	r2, r2, #6
 8000cf4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d02:	003a      	movs	r2, r7
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_TIM17_Init+0x110>)
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f003 ff0d 	bl	8004b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000d12:	f000 f8ff 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b014      	add	sp, #80	@ 0x50
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	20000274 	.word	0x20000274
 8000d24:	40014800 	.word	0x40014800
 8000d28:	00007fff 	.word	0x00007fff

08000d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d32:	4a16      	ldr	r2, [pc, #88]	@ (8000d8c <MX_USART2_UART_Init+0x60>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d38:	4a15      	ldr	r2, [pc, #84]	@ (8000d90 <MX_USART2_UART_Init+0x64>)
 8000d3a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d50:	220c      	movs	r2, #12
 8000d52:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f003 ff8b 	bl	8004c90 <HAL_UART_Init>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000d7e:	f000 f8c9 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002c0 	.word	0x200002c0
 8000d8c:	40004400 	.word	0x40004400
 8000d90:	00007a12 	.word	0x00007a12

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <MX_DMA_Init+0x48>)
 8000d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_DMA_Init+0x48>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	430a      	orrs	r2, r1
 8000da4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <MX_DMA_Init+0x48>)
 8000da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000daa:	2201      	movs	r2, #1
 8000dac:	4013      	ands	r3, r2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2009      	movs	r0, #9
 8000db8:	f001 f998 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dbc:	2009      	movs	r0, #9
 8000dbe:	f001 f9aa 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f001 f990 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f001 f9a2 	bl	8002116 <HAL_NVIC_EnableIRQ>

}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b089      	sub	sp, #36	@ 0x24
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	240c      	movs	r4, #12
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	0018      	movs	r0, r3
 8000dec:	2314      	movs	r3, #20
 8000dee:	001a      	movs	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f004 fc4f 	bl	8005694 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b44      	ldr	r3, [pc, #272]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dfa:	4b43      	ldr	r3, [pc, #268]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e02:	4b41      	ldr	r3, [pc, #260]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e06:	2204      	movs	r2, #4
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e12:	4b3d      	ldr	r3, [pc, #244]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e14:	2120      	movs	r1, #32
 8000e16:	430a      	orrs	r2, r1
 8000e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e1e:	2220      	movs	r2, #32
 8000e20:	4013      	ands	r3, r2
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e2a:	4b37      	ldr	r3, [pc, #220]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e32:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <MX_GPIO_Init+0x128>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBOUNCED_SW_OUT_GPIO_Port, DEBOUNCED_SW_OUT_Pin, GPIO_PIN_RESET);
 8000e3e:	2380      	movs	r3, #128	@ 0x80
 8000e40:	0099      	lsls	r1, r3, #2
 8000e42:	23a0      	movs	r3, #160	@ 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	2200      	movs	r2, #0
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f001 fc71 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <MX_GPIO_Init+0x12c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	2140      	movs	r1, #64	@ 0x40
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 fc6b 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2288      	movs	r2, #136	@ 0x88
 8000e64:	0352      	lsls	r2, r2, #13
 8000e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <MX_GPIO_Init+0x130>)
 8000e72:	0019      	movs	r1, r3
 8000e74:	0010      	movs	r0, r2
 8000e76:	f001 faf7 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBOUNCED_SW_OUT_Pin */
  GPIO_InitStruct.Pin = DEBOUNCED_SW_OUT_Pin;
 8000e7a:	0021      	movs	r1, r4
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	000c      	movs	r4, r1
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2201      	movs	r2, #1
 8000e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBOUNCED_SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e98:	193a      	adds	r2, r7, r4
 8000e9a:	23a0      	movs	r3, #160	@ 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 fae1 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2240      	movs	r2, #64	@ 0x40
 8000eaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2201      	movs	r2, #1
 8000eb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <MX_GPIO_Init+0x12c>)
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	f001 facf 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000eca:	0021      	movs	r1, r4
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2284      	movs	r2, #132	@ 0x84
 8000ed8:	0392      	lsls	r2, r2, #14
 8000eda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2201      	movs	r2, #1
 8000ee0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	187a      	adds	r2, r7, r1
 8000ee4:	23a0      	movs	r3, #160	@ 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fabc 	bl	8002468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2007      	movs	r0, #7
 8000ef6:	f001 f8f9 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000efa:	2007      	movs	r0, #7
 8000efc:	f001 f90b 	bl	8002116 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b009      	add	sp, #36	@ 0x24
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	50000800 	.word	0x50000800
 8000f10:	50001400 	.word	0x50001400

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0549      	lsls	r1, r1, #21
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	055b      	lsls	r3, r3, #21
 8000f54:	4013      	ands	r3, r2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	@ 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	2414      	movs	r4, #20
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2314      	movs	r3, #20
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f004 fb8a 	bl	8005694 <memset>
  if(hadc->Instance==ADC1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2e      	ldr	r2, [pc, #184]	@ (8001040 <HAL_ADC_MspInit+0xd8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d155      	bne.n	8001036 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <HAL_ADC_MspInit+0xdc>)
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <HAL_ADC_MspInit+0xdc>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	0349      	lsls	r1, r1, #13
 8000f94:	430a      	orrs	r2, r1
 8000f96:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <HAL_ADC_MspInit+0xdc>)
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	035b      	lsls	r3, r3, #13
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <HAL_ADC_MspInit+0xdc>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000faa:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <HAL_ADC_MspInit+0xdc>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <HAL_ADC_MspInit+0xdc>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2233      	movs	r2, #51	@ 0x33
 8000fc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	193a      	adds	r2, r7, r4
 8000fd2:	23a0      	movs	r3, #160	@ 0xa0
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 fa45 	bl	8002468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800104c <HAL_ADC_MspInit+0xe4>)
 8000fe2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8000ff8:	2280      	movs	r2, #128	@ 0x80
 8000ffa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	0052      	lsls	r2, r2, #1
 8001002:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8001006:	2280      	movs	r2, #128	@ 0x80
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	0192      	lsls	r2, r2, #6
 8001018:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 800101c:	0018      	movs	r0, r3
 800101e:	f001 f897 	bl	8002150 <HAL_DMA_Init>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001026:	f7ff ff75 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 800102e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_ADC_MspInit+0xe0>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b00b      	add	sp, #44	@ 0x2c
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	40012400 	.word	0x40012400
 8001044:	40021000 	.word	0x40021000
 8001048:	2000008c 	.word	0x2000008c
 800104c:	40020008 	.word	0x40020008

08001050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b099      	sub	sp, #100	@ 0x64
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	234c      	movs	r3, #76	@ 0x4c
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f004 fb16 	bl	8005694 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	2424      	movs	r4, #36	@ 0x24
 800106a:	193b      	adds	r3, r7, r4
 800106c:	0018      	movs	r0, r3
 800106e:	2328      	movs	r3, #40	@ 0x28
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f004 fb0e 	bl	8005694 <memset>
  if(htim_base->Instance==TIM1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a64      	ldr	r2, [pc, #400]	@ (8001210 <HAL_TIM_Base_MspInit+0x1c0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d11d      	bne.n	80010be <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2280      	movs	r2, #128	@ 0x80
 8001086:	0392      	lsls	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	193b      	adds	r3, r7, r4
 8001092:	0018      	movs	r0, r3
 8001094:	f002 f90a 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8001098:	1e03      	subs	r3, r0, #0
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 800109c:	f7ff ff3a 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010a6:	2180      	movs	r1, #128	@ 0x80
 80010a8:	0109      	lsls	r1, r1, #4
 80010aa:	430a      	orrs	r2, r1
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ae:	4b59      	ldr	r3, [pc, #356]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4013      	ands	r3, r2
 80010b8:	623b      	str	r3, [r7, #32]
 80010ba:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010bc:	e0a3      	b.n	8001206 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d138      	bne.n	800113c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ca:	4b52      	ldr	r3, [pc, #328]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ce:	4b51      	ldr	r3, [pc, #324]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	430a      	orrs	r2, r1
 80010d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010da:	2201      	movs	r2, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ee:	4b49      	ldr	r3, [pc, #292]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f2:	2201      	movs	r2, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010fa:	214c      	movs	r1, #76	@ 0x4c
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2280      	movs	r2, #128	@ 0x80
 8001100:	0212      	lsls	r2, r2, #8
 8001102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2202      	movs	r2, #2
 8001108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2202      	movs	r2, #2
 800111a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	187a      	adds	r2, r7, r1
 800111e:	23a0      	movs	r3, #160	@ 0xa0
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f001 f99f 	bl	8002468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200f      	movs	r0, #15
 8001130:	f000 ffdc 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001134:	200f      	movs	r0, #15
 8001136:	f000 ffee 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 800113a:	e064      	b.n	8001206 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a35      	ldr	r2, [pc, #212]	@ (8001218 <HAL_TIM_Base_MspInit+0x1c8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d114      	bne.n	8001170 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001146:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 8001148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800114a:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 800114c:	2102      	movs	r1, #2
 800114e:	430a      	orrs	r2, r1
 8001150:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 8001154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2010      	movs	r0, #16
 8001164:	f000 ffc2 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001168:	2010      	movs	r0, #16
 800116a:	f000 ffd4 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 800116e:	e04a      	b.n	8001206 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM14)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a29      	ldr	r2, [pc, #164]	@ (800121c <HAL_TIM_Base_MspInit+0x1cc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10e      	bne.n	8001198 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 800117c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 8001180:	2180      	movs	r1, #128	@ 0x80
 8001182:	0209      	lsls	r1, r1, #8
 8001184:	430a      	orrs	r2, r1
 8001186:	641a      	str	r2, [r3, #64]	@ 0x40
 8001188:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 800118a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
}
 8001196:	e036      	b.n	8001206 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM16)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a20      	ldr	r2, [pc, #128]	@ (8001220 <HAL_TIM_Base_MspInit+0x1d0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d116      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80011a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	0289      	lsls	r1, r1, #10
 80011ac:	430a      	orrs	r2, r1
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80011b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2015      	movs	r0, #21
 80011c4:	f000 ff92 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80011c8:	2015      	movs	r0, #21
 80011ca:	f000 ffa4 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 80011ce:	e01a      	b.n	8001206 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM17)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <HAL_TIM_Base_MspInit+0x1d4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d115      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80011dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	02c9      	lsls	r1, r1, #11
 80011e4:	430a      	orrs	r2, r1
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_TIM_Base_MspInit+0x1c4>)
 80011ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	02db      	lsls	r3, r3, #11
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2016      	movs	r0, #22
 80011fc:	f000 ff76 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001200:	2016      	movs	r0, #22
 8001202:	f000 ff88 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b019      	add	sp, #100	@ 0x64
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40000400 	.word	0x40000400
 800121c:	40002000 	.word	0x40002000
 8001220:	40014400 	.word	0x40014400
 8001224:	40014800 	.word	0x40014800

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b08b      	sub	sp, #44	@ 0x2c
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	2414      	movs	r4, #20
 8001232:	193b      	adds	r3, r7, r4
 8001234:	0018      	movs	r0, r3
 8001236:	2314      	movs	r3, #20
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f004 fa2a 	bl	8005694 <memset>
  if(htim->Instance==TIM1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a29      	ldr	r2, [pc, #164]	@ (80012ec <HAL_TIM_MspPostInit+0xc4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d124      	bne.n	8001294 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_TIM_MspPostInit+0xc8>)
 800124c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_TIM_MspPostInit+0xc8>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	@ 0x34
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_TIM_MspPostInit+0xc8>)
 8001258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	0021      	movs	r1, r4
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2202      	movs	r2, #2
 8001270:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2202      	movs	r2, #2
 8001282:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	187a      	adds	r2, r7, r1
 8001286:	23a0      	movs	r3, #160	@ 0xa0
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f001 f8eb 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001292:	e027      	b.n	80012e4 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM14)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <HAL_TIM_MspPostInit+0xcc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d122      	bne.n	80012e4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_TIM_MspPostInit+0xc8>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <HAL_TIM_MspPostInit+0xc8>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_TIM_MspPostInit+0xc8>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ae:	2201      	movs	r2, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012b6:	2114      	movs	r1, #20
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2202      	movs	r2, #2
 80012c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2204      	movs	r2, #4
 80012d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	187a      	adds	r2, r7, r1
 80012d8:	23a0      	movs	r3, #160	@ 0xa0
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 f8c2 	bl	8002468 <HAL_GPIO_Init>
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b00b      	add	sp, #44	@ 0x2c
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	40012c00 	.word	0x40012c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40002000 	.word	0x40002000

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	@ 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	2414      	movs	r4, #20
 8001302:	193b      	adds	r3, r7, r4
 8001304:	0018      	movs	r0, r3
 8001306:	2314      	movs	r3, #20
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f004 f9c2 	bl	8005694 <memset>
  if(huart->Instance==USART2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a46      	ldr	r2, [pc, #280]	@ (8001430 <HAL_UART_MspInit+0x138>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d000      	beq.n	800131c <HAL_UART_MspInit+0x24>
 800131a:	e085      	b.n	8001428 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131c:	4b45      	ldr	r3, [pc, #276]	@ (8001434 <HAL_UART_MspInit+0x13c>)
 800131e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001320:	4b44      	ldr	r3, [pc, #272]	@ (8001434 <HAL_UART_MspInit+0x13c>)
 8001322:	2180      	movs	r1, #128	@ 0x80
 8001324:	0289      	lsls	r1, r1, #10
 8001326:	430a      	orrs	r2, r1
 8001328:	63da      	str	r2, [r3, #60]	@ 0x3c
 800132a:	4b42      	ldr	r3, [pc, #264]	@ (8001434 <HAL_UART_MspInit+0x13c>)
 800132c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <HAL_UART_MspInit+0x13c>)
 800133a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133c:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <HAL_UART_MspInit+0x13c>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34
 8001344:	4b3b      	ldr	r3, [pc, #236]	@ (8001434 <HAL_UART_MspInit+0x13c>)
 8001346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001348:	2201      	movs	r2, #1
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001350:	0021      	movs	r1, r4
 8001352:	187b      	adds	r3, r7, r1
 8001354:	220c      	movs	r2, #12
 8001356:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2202      	movs	r2, #2
 800135c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2201      	movs	r2, #1
 8001362:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2201      	movs	r2, #1
 800136e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	187a      	adds	r2, r7, r1
 8001372:	23a0      	movs	r3, #160	@ 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f001 f875 	bl	8002468 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <HAL_UART_MspInit+0x140>)
 8001380:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <HAL_UART_MspInit+0x144>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <HAL_UART_MspInit+0x140>)
 8001386:	2234      	movs	r2, #52	@ 0x34
 8001388:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138a:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <HAL_UART_MspInit+0x140>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <HAL_UART_MspInit+0x140>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <HAL_UART_MspInit+0x140>)
 8001398:	2280      	movs	r2, #128	@ 0x80
 800139a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_UART_MspInit+0x140>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a2:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <HAL_UART_MspInit+0x140>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <HAL_UART_MspInit+0x140>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <HAL_UART_MspInit+0x140>)
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	0152      	lsls	r2, r2, #5
 80013b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <HAL_UART_MspInit+0x140>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 fec9 	bl	8002150 <HAL_DMA_Init>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80013c2:	f7ff fda7 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2180      	movs	r1, #128	@ 0x80
 80013ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_UART_MspInit+0x140>)
 80013cc:	505a      	str	r2, [r3, r1]
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_UART_MspInit+0x140>)
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_UART_MspInit+0x14c>)
 80013d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013dc:	2235      	movs	r2, #53	@ 0x35
 80013de:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013e2:	2210      	movs	r2, #16
 80013e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013ee:	2280      	movs	r2, #128	@ 0x80
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_UART_MspInit+0x148>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_UART_MspInit+0x148>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <HAL_UART_MspInit+0x148>)
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	0152      	lsls	r2, r2, #5
 800140a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_UART_MspInit+0x148>)
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fe9e 	bl	8002150 <HAL_DMA_Init>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8001418:	f7ff fd7c 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_UART_MspInit+0x148>)
 8001420:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <HAL_UART_MspInit+0x148>)
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b00b      	add	sp, #44	@ 0x2c
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	40004400 	.word	0x40004400
 8001434:	40021000 	.word	0x40021000
 8001438:	20000354 	.word	0x20000354
 800143c:	4002001c 	.word	0x4002001c
 8001440:	200003b0 	.word	0x200003b0
 8001444:	40020030 	.word	0x40020030

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8f6 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	0018      	movs	r0, r3
 8001484:	f001 f972 	bl	800276c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <DMA1_Channel1_IRQHandler+0x14>)
 8001496:	0018      	movs	r0, r3
 8001498:	f000 fee4 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	2000008c 	.word	0x2000008c

080014a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fed8 	bl	8002264 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fed4 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80014bc:	46c0      	nop			@ (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	20000354 	.word	0x20000354
 80014c8:	200003b0 	.word	0x200003b0

080014cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <TIM2_IRQHandler+0x14>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f002 f9dc 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	20000144 	.word	0x20000144

080014e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <TIM3_IRQHandler+0x14>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f002 f9d0 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	20000190 	.word	0x20000190

080014fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <TIM16_IRQHandler+0x14>)
 8001502:	0018      	movs	r0, r3
 8001504:	f002 f9c4 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	20000228 	.word	0x20000228

08001514 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <TIM17_IRQHandler+0x14>)
 800151a:	0018      	movs	r0, r3
 800151c:	f002 f9b8 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	20000274 	.word	0x20000274

0800152c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800153a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800153c:	f7ff fff6 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopForever+0x6>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopForever+0xe>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopForever+0x16>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001566:	f004 f89d 	bl	80056a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800156a:	f7fe ff6d 	bl	8000448 <main>

0800156e <LoopForever>:

LoopForever:
  b LoopForever
 800156e:	e7fe      	b.n	800156e <LoopForever>
  ldr   r0, =_estack
 8001570:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800157c:	08005834 	.word	0x08005834
  ldr r2, =_sbss
 8001580:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001584:	20000410 	.word	0x20000410

08001588 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_IRQHandler>
	...

0800158c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x3c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <HAL_Init+0x3c>)
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	0049      	lsls	r1, r1, #1
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f810 	bl	80015cc <HAL_InitTick>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e001      	b.n	80015bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fcb2 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40022000 	.word	0x40022000

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_InitTick+0x88>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d02b      	beq.n	800163c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <HAL_InitTick+0x8c>)
 80015e6:	681c      	ldr	r4, [r3, #0]
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_InitTick+0x88>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	0019      	movs	r1, r3
 80015ee:	23fa      	movs	r3, #250	@ 0xfa
 80015f0:	0098      	lsls	r0, r3, #2
 80015f2:	f7fe fd87 	bl	8000104 <__udivsi3>
 80015f6:	0003      	movs	r3, r0
 80015f8:	0019      	movs	r1, r3
 80015fa:	0020      	movs	r0, r4
 80015fc:	f7fe fd82 	bl	8000104 <__udivsi3>
 8001600:	0003      	movs	r3, r0
 8001602:	0018      	movs	r0, r3
 8001604:	f000 fd97 	bl	8002136 <HAL_SYSTICK_Config>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d112      	bne.n	8001632 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d80a      	bhi.n	8001628 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2301      	movs	r3, #1
 8001616:	425b      	negs	r3, r3
 8001618:	2200      	movs	r2, #0
 800161a:	0018      	movs	r0, r3
 800161c:	f000 fd66 	bl	80020ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_InitTick+0x90>)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e00d      	b.n	8001644 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001628:	230f      	movs	r3, #15
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e008      	b.n	8001644 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001632:	230f      	movs	r3, #15
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e003      	b.n	8001644 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163c:	230f      	movs	r3, #15
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001644:	230f      	movs	r3, #15
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b005      	add	sp, #20
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	20000008 	.word	0x20000008
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	001a      	movs	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	18d2      	adds	r2, r2, r3
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_IncTick+0x20>)
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	20000008 	.word	0x20000008
 8001680:	2000040c 	.word	0x2000040c

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b02      	ldr	r3, [pc, #8]	@ (8001694 <HAL_GetTick+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	2000040c 	.word	0x2000040c

08001698 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80016a8:	401a      	ands	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	fe3fffff 	.word	0xfe3fffff

080016c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	23e0      	movs	r3, #224	@ 0xe0
 80016ce:	045b      	lsls	r3, r3, #17
 80016d0:	4013      	ands	r3, r2
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}

080016da <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	2104      	movs	r1, #4
 80016ee:	400a      	ands	r2, r1
 80016f0:	2107      	movs	r1, #7
 80016f2:	4091      	lsls	r1, r2
 80016f4:	000a      	movs	r2, r1
 80016f6:	43d2      	mvns	r2, r2
 80016f8:	401a      	ands	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2104      	movs	r1, #4
 80016fe:	400b      	ands	r3, r1
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4099      	lsls	r1, r3
 8001704:	000b      	movs	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b004      	add	sp, #16
 8001712:	bd80      	pop	{r7, pc}

08001714 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	2104      	movs	r1, #4
 8001726:	400a      	ands	r2, r1
 8001728:	2107      	movs	r1, #7
 800172a:	4091      	lsls	r1, r2
 800172c:	000a      	movs	r2, r1
 800172e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2104      	movs	r1, #4
 8001734:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001736:	40da      	lsrs	r2, r3
 8001738:	0013      	movs	r3, r2
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}

08001742 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	211f      	movs	r1, #31
 8001756:	400a      	ands	r2, r1
 8001758:	210f      	movs	r1, #15
 800175a:	4091      	lsls	r1, r2
 800175c:	000a      	movs	r2, r1
 800175e:	43d2      	mvns	r2, r2
 8001760:	401a      	ands	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	210f      	movs	r1, #15
 8001768:	4019      	ands	r1, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	201f      	movs	r0, #31
 800176e:	4003      	ands	r3, r0
 8001770:	4099      	lsls	r1, r3
 8001772:	000b      	movs	r3, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}

08001782 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	035b      	lsls	r3, r3, #13
 8001794:	0b5b      	lsrs	r3, r3, #13
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	0352      	lsls	r2, r2, #13
 80017b6:	0b52      	lsrs	r2, r2, #13
 80017b8:	43d2      	mvns	r2, r2
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	0212      	lsls	r2, r2, #8
 80017dc:	43d2      	mvns	r2, r2
 80017de:	401a      	ands	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	400b      	ands	r3, r1
 80017e8:	4904      	ldr	r1, [pc, #16]	@ (80017fc <LL_ADC_SetChannelSamplingTime+0x34>)
 80017ea:	400b      	ands	r3, r1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	07ffff00 	.word	0x07ffff00

08001800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <LL_ADC_EnableInternalRegulator+0x24>)
 800180e:	4013      	ands	r3, r2
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	0552      	lsls	r2, r2, #21
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	6fffffe8 	.word	0x6fffffe8

08001828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	055b      	lsls	r3, r3, #21
 8001838:	401a      	ands	r2, r3
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	055b      	lsls	r3, r3, #21
 800183e:	429a      	cmp	r2, r3
 8001840:	d101      	bne.n	8001846 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <LL_ADC_IsEnabled+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_ADC_IsEnabled+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2204      	movs	r2, #4
 8001880:	4013      	ands	r3, r2
 8001882:	2b04      	cmp	r3, #4
 8001884:	d101      	bne.n	800188a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	231f      	movs	r3, #31
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e17f      	b.n	8001bba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fb4f 	bl	8000f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2254      	movs	r2, #84	@ 0x54
 80018d4:	2100      	movs	r1, #0
 80018d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff ffa3 	bl	8001828 <LL_ADC_IsInternalRegulatorEnabled>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d115      	bne.n	8001912 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff ff88 	bl	8001800 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018f0:	4bb4      	ldr	r3, [pc, #720]	@ (8001bc4 <HAL_ADC_Init+0x330>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	49b4      	ldr	r1, [pc, #720]	@ (8001bc8 <HAL_ADC_Init+0x334>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fc04 	bl	8000104 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001904:	e002      	b.n	800190c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f9      	bne.n	8001906 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff ff86 	bl	8001828 <LL_ADC_IsInternalRegulatorEnabled>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d10f      	bne.n	8001940 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	2210      	movs	r2, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	2201      	movs	r2, #1
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001938:	231f      	movs	r3, #31
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff ff94 	bl	8001872 <LL_ADC_REG_IsConversionOngoing>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	2210      	movs	r2, #16
 8001954:	4013      	ands	r3, r2
 8001956:	d000      	beq.n	800195a <HAL_ADC_Init+0xc6>
 8001958:	e122      	b.n	8001ba0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d000      	beq.n	8001962 <HAL_ADC_Init+0xce>
 8001960:	e11e      	b.n	8001ba0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	4a99      	ldr	r2, [pc, #612]	@ (8001bcc <HAL_ADC_Init+0x338>)
 8001968:	4013      	ands	r3, r2
 800196a:	2202      	movs	r2, #2
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff ff6a 	bl	8001850 <LL_ADC_IsEnabled>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d000      	beq.n	8001982 <HAL_ADC_Init+0xee>
 8001980:	e0ad      	b.n	8001ade <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7e1b      	ldrb	r3, [r3, #24]
 800198a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800198c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7e5b      	ldrb	r3, [r3, #25]
 8001992:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001994:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7e9b      	ldrb	r3, [r3, #26]
 800199a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800199c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_ADC_Init+0x118>
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	015b      	lsls	r3, r3, #5
 80019aa:	e000      	b.n	80019ae <HAL_ADC_Init+0x11a>
 80019ac:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019ae:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019b4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da04      	bge.n	80019c8 <HAL_ADC_Init+0x134>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	e001      	b.n	80019cc <HAL_ADC_Init+0x138>
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80019cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	212c      	movs	r1, #44	@ 0x2c
 80019d2:	5c5b      	ldrb	r3, [r3, r1]
 80019d4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019d6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	5c9b      	ldrb	r3, [r3, r2]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d115      	bne.n	8001a14 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	0252      	lsls	r2, r2, #9
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e00b      	b.n	8001a14 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	2220      	movs	r2, #32
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a20:	23e0      	movs	r3, #224	@ 0xe0
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a65      	ldr	r2, [pc, #404]	@ (8001bd0 <HAL_ADC_Init+0x33c>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0f9b      	lsrs	r3, r3, #30
 8001a4e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a54:	4313      	orrs	r3, r2
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	223c      	movs	r2, #60	@ 0x3c
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d111      	bne.n	8001a8a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0f9b      	lsrs	r3, r3, #30
 8001a6c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a72:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a78:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a7e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	2201      	movs	r2, #1
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4a50      	ldr	r2, [pc, #320]	@ (8001bd4 <HAL_ADC_Init+0x340>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	23c0      	movs	r3, #192	@ 0xc0
 8001aa6:	061b      	lsls	r3, r3, #24
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d018      	beq.n	8001ade <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	05db      	lsls	r3, r3, #23
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d012      	beq.n	8001ade <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	061b      	lsls	r3, r3, #24
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d00c      	beq.n	8001ade <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ac4:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <HAL_ADC_Init+0x344>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a44      	ldr	r2, [pc, #272]	@ (8001bdc <HAL_ADC_Init+0x348>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	23f0      	movs	r3, #240	@ 0xf0
 8001ad4:	039b      	lsls	r3, r3, #14
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <HAL_ADC_Init+0x344>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f7ff fdf6 	bl	80016da <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af6:	493a      	ldr	r1, [pc, #232]	@ (8001be0 <HAL_ADC_Init+0x34c>)
 8001af8:	001a      	movs	r2, r3
 8001afa:	f7ff fdee 	bl	80016da <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2110      	movs	r1, #16
 8001b12:	4249      	negs	r1, r1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b18:	e018      	b.n	8001b4c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	039b      	lsls	r3, r3, #14
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d112      	bne.n	8001b4c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	221c      	movs	r2, #28
 8001b36:	4013      	ands	r3, r2
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0011      	movs	r1, r2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2100      	movs	r1, #0
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7ff fdde 	bl	8001714 <LL_ADC_GetSamplingTimeCommonChannels>
 8001b58:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d10b      	bne.n	8001b7a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4393      	bics	r3, r2
 8001b70:	2201      	movs	r2, #1
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b78:	e01c      	b.n	8001bb4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7e:	2212      	movs	r2, #18
 8001b80:	4393      	bics	r3, r2
 8001b82:	2210      	movs	r2, #16
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2201      	movs	r2, #1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b96:	231f      	movs	r3, #31
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b9e:	e009      	b.n	8001bb4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bac:	231f      	movs	r3, #31
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001bb4:	231f      	movs	r3, #31
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b008      	add	sp, #32
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	00030d40 	.word	0x00030d40
 8001bcc:	fffffefd 	.word	0xfffffefd
 8001bd0:	ffde0201 	.word	0xffde0201
 8001bd4:	1ffffc02 	.word	0x1ffffc02
 8001bd8:	40012708 	.word	0x40012708
 8001bdc:	ffc3ffff 	.word	0xffc3ffff
 8001be0:	07ffff04 	.word	0x07ffff04

08001be4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2254      	movs	r2, #84	@ 0x54
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x24>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e1c0      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x3a6>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2254      	movs	r2, #84	@ 0x54
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fe2c 	bl	8001872 <LL_ADC_REG_IsConversionOngoing>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d000      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x3c>
 8001c1e:	e1a3      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d100      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x46>
 8001c28:	e143      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d004      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c3a:	4ac1      	ldr	r2, [pc, #772]	@ (8001f40 <HAL_ADC_ConfigChannel+0x35c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d108      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0019      	movs	r1, r3
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	f7ff fd99 	bl	8001782 <LL_ADC_REG_SetSequencerChAdd>
 8001c50:	e0c9      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	211f      	movs	r1, #31
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	210f      	movs	r1, #15
 8001c60:	4099      	lsls	r1, r3
 8001c62:	000b      	movs	r3, r1
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	035b      	lsls	r3, r3, #13
 8001c70:	0b5b      	lsrs	r3, r3, #13
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x9c>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	e098      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	d000      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0xa8>
 8001c8a:	e091      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1cc>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d000      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0xb4>
 8001c96:	e089      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1c8>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d000      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0xc0>
 8001ca2:	e081      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x1c4>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	4013      	ands	r3, r2
 8001cac:	d000      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0xcc>
 8001cae:	e079      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1c0>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d000      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0xd8>
 8001cba:	e071      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1bc>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d000      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0xe4>
 8001cc6:	e069      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x1b8>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d000      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0xf0>
 8001cd2:	e061      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x1b4>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d000      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0xfc>
 8001cde:	e059      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1b0>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d151      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1ac>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d149      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x1a8>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4013      	ands	r3, r2
 8001d02:	d141      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1a4>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d139      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1a0>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d131      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x19c>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	019b      	lsls	r3, r3, #6
 8001d24:	4013      	ands	r3, r2
 8001d26:	d129      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x198>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	01db      	lsls	r3, r3, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	d121      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x194>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d119      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x190>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	025b      	lsls	r3, r3, #9
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x18c>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	029b      	lsls	r3, r3, #10
 8001d54:	4013      	ands	r3, r2
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x188>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	02db      	lsls	r3, r3, #11
 8001d60:	4013      	ands	r3, r2
 8001d62:	d001      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x184>
 8001d64:	2312      	movs	r3, #18
 8001d66:	e024      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e022      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	2311      	movs	r3, #17
 8001d6e:	e020      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	2310      	movs	r3, #16
 8001d72:	e01e      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	230f      	movs	r3, #15
 8001d76:	e01c      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	230e      	movs	r3, #14
 8001d7a:	e01a      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	230d      	movs	r3, #13
 8001d7e:	e018      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	230c      	movs	r3, #12
 8001d82:	e016      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	230b      	movs	r3, #11
 8001d86:	e014      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	230a      	movs	r3, #10
 8001d8a:	e012      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	2309      	movs	r3, #9
 8001d8e:	e010      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	2308      	movs	r3, #8
 8001d92:	e00e      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	2307      	movs	r3, #7
 8001d96:	e00c      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	2306      	movs	r3, #6
 8001d9a:	e00a      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	e008      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e006      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e004      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db0:	2300      	movs	r3, #0
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	6852      	ldr	r2, [r2, #4]
 8001db6:	201f      	movs	r0, #31
 8001db8:	4002      	ands	r2, r0
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	000a      	movs	r2, r1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d808      	bhi.n	8001de6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	001a      	movs	r2, r3
 8001de2:	f7ff fcae 	bl	8001742 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	001a      	movs	r2, r3
 8001df4:	f7ff fce8 	bl	80017c8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db00      	blt.n	8001e02 <HAL_ADC_ConfigChannel+0x21e>
 8001e00:	e0bc      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e02:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff fc5b 	bl	80016c0 <LL_ADC_GetCommonPathInternalCh>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a4d      	ldr	r2, [pc, #308]	@ (8001f48 <HAL_ADC_ConfigChannel+0x364>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d122      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e20:	d11d      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2280      	movs	r2, #128	@ 0x80
 8001e26:	0412      	lsls	r2, r2, #16
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	4a46      	ldr	r2, [pc, #280]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	0010      	movs	r0, r2
 8001e30:	f7ff fc32 	bl	8001698 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e34:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <HAL_ADC_ConfigChannel+0x368>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4945      	ldr	r1, [pc, #276]	@ (8001f50 <HAL_ADC_ConfigChannel+0x36c>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7fe f962 	bl	8000104 <__udivsi3>
 8001e40:	0003      	movs	r3, r0
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	0013      	movs	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e4e:	e002      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e5c:	e08e      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <HAL_ADC_ConfigChannel+0x370>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d10e      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	045b      	lsls	r3, r3, #17
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d109      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2280      	movs	r2, #128	@ 0x80
 8001e76:	0452      	lsls	r2, r2, #17
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	0010      	movs	r0, r2
 8001e80:	f7ff fc0a 	bl	8001698 <LL_ADC_SetCommonPathInternalCh>
 8001e84:	e07a      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a33      	ldr	r2, [pc, #204]	@ (8001f58 <HAL_ADC_ConfigChannel+0x374>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d000      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x2ae>
 8001e90:	e074      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	03db      	lsls	r3, r3, #15
 8001e98:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e9a:	d000      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x2ba>
 8001e9c:	e06e      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2280      	movs	r2, #128	@ 0x80
 8001ea2:	03d2      	lsls	r2, r2, #15
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0010      	movs	r0, r2
 8001eac:	f7ff fbf4 	bl	8001698 <LL_ADC_SetCommonPathInternalCh>
 8001eb0:	e064      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d004      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_ADC_ConfigChannel+0x35c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d107      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	f7ff fc66 	bl	80017a4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da4d      	bge.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fbec 	bl	80016c0 <LL_ADC_GetCommonPathInternalCh>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <HAL_ADC_ConfigChannel+0x364>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <HAL_ADC_ConfigChannel+0x378>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	4a11      	ldr	r2, [pc, #68]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001efe:	0019      	movs	r1, r3
 8001f00:	0010      	movs	r0, r2
 8001f02:	f7ff fbc9 	bl	8001698 <LL_ADC_SetCommonPathInternalCh>
 8001f06:	e039      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <HAL_ADC_ConfigChannel+0x370>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <HAL_ADC_ConfigChannel+0x37c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	f7ff fbbb 	bl	8001698 <LL_ADC_SetCommonPathInternalCh>
 8001f22:	e02b      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_ADC_ConfigChannel+0x374>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d126      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <HAL_ADC_ConfigChannel+0x380>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	4a03      	ldr	r2, [pc, #12]	@ (8001f44 <HAL_ADC_ConfigChannel+0x360>)
 8001f36:	0019      	movs	r1, r3
 8001f38:	0010      	movs	r0, r2
 8001f3a:	f7ff fbad 	bl	8001698 <LL_ADC_SetCommonPathInternalCh>
 8001f3e:	e01d      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x398>
 8001f40:	80000004 	.word	0x80000004
 8001f44:	40012708 	.word	0x40012708
 8001f48:	b0001000 	.word	0xb0001000
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	00030d40 	.word	0x00030d40
 8001f54:	b8004000 	.word	0xb8004000
 8001f58:	b4002000 	.word	0xb4002000
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	feffffff 	.word	0xfeffffff
 8001f64:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f74:	2317      	movs	r3, #23
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2254      	movs	r2, #84	@ 0x54
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f84:	2317      	movs	r3, #23
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	781b      	ldrb	r3, [r3, #0]
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b006      	add	sp, #24
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fa6:	d809      	bhi.n	8001fbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	001a      	movs	r2, r3
 8001fae:	231f      	movs	r3, #31
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <__NVIC_EnableIRQ+0x30>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4091      	lsls	r1, r2
 8001fb8:	000a      	movs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fdc:	d828      	bhi.n	8002030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fde:	4a2f      	ldr	r2, [pc, #188]	@ (800209c <__NVIC_SetPriority+0xd4>)
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	33c0      	adds	r3, #192	@ 0xc0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	589b      	ldr	r3, [r3, r2]
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	21ff      	movs	r1, #255	@ 0xff
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	22ff      	movs	r2, #255	@ 0xff
 800200c:	401a      	ands	r2, r3
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4003      	ands	r3, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	481f      	ldr	r0, [pc, #124]	@ (800209c <__NVIC_SetPriority+0xd4>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	430a      	orrs	r2, r1
 8002028:	33c0      	adds	r3, #192	@ 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800202e:	e031      	b.n	8002094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002030:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <__NVIC_SetPriority+0xd8>)
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0019      	movs	r1, r3
 8002038:	230f      	movs	r3, #15
 800203a:	400b      	ands	r3, r1
 800203c:	3b08      	subs	r3, #8
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3306      	adds	r3, #6
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	3304      	adds	r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1dfa      	adds	r2, r7, #7
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	0011      	movs	r1, r2
 8002050:	2203      	movs	r2, #3
 8002052:	400a      	ands	r2, r1
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	21ff      	movs	r1, #255	@ 0xff
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	401a      	ands	r2, r3
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0018      	movs	r0, r3
 8002070:	2303      	movs	r3, #3
 8002072:	4003      	ands	r3, r0
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002078:	4809      	ldr	r0, [pc, #36]	@ (80020a0 <__NVIC_SetPriority+0xd8>)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	001c      	movs	r4, r3
 8002080:	230f      	movs	r3, #15
 8002082:	4023      	ands	r3, r4
 8002084:	3b08      	subs	r3, #8
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	430a      	orrs	r2, r1
 800208a:	3306      	adds	r3, #6
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	18c3      	adds	r3, r0, r3
 8002090:	3304      	adds	r3, #4
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b003      	add	sp, #12
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	045b      	lsls	r3, r3, #17
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d301      	bcc.n	80020bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <SysTick_Config+0x44>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	3a01      	subs	r2, #1
 80020c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c4:	2301      	movs	r3, #1
 80020c6:	425b      	negs	r3, r3
 80020c8:	2103      	movs	r1, #3
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff ff7c 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <SysTick_Config+0x44>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <SysTick_Config+0x44>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	210f      	movs	r1, #15
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	1c02      	adds	r2, r0, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	187b      	adds	r3, r7, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	0002      	movs	r2, r0
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff33 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ffaf 	bl	80020a4 <SysTick_Config>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e077      	b.n	8002252 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <HAL_DMA_Init+0x10c>)
 8002168:	4694      	mov	ip, r2
 800216a:	4463      	add	r3, ip
 800216c:	2114      	movs	r1, #20
 800216e:	0018      	movs	r0, r3
 8002170:	f7fd ffc8 	bl	8000104 <__udivsi3>
 8002174:	0003      	movs	r3, r0
 8002176:	009a      	lsls	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2225      	movs	r2, #37	@ 0x25
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4934      	ldr	r1, [pc, #208]	@ (8002260 <HAL_DMA_Init+0x110>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6819      	ldr	r1, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f8fb 	bl	80023c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	01db      	lsls	r3, r3, #7
 80021da:	429a      	cmp	r2, r3
 80021dc:	d102      	bne.n	80021e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	213f      	movs	r1, #63	@ 0x3f
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d011      	beq.n	8002228 <HAL_DMA_Init+0xd8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d80d      	bhi.n	8002228 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f906 	bl	8002420 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	e008      	b.n	800223a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2225      	movs	r2, #37	@ 0x25
 8002244:	2101      	movs	r1, #1
 8002246:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	bffdfff8 	.word	0xbffdfff8
 8002260:	ffff800f 	.word	0xffff800f

08002264 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800226c:	4b55      	ldr	r3, [pc, #340]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	221c      	movs	r2, #28
 8002280:	4013      	ands	r3, r2
 8002282:	2204      	movs	r2, #4
 8002284:	409a      	lsls	r2, r3
 8002286:	0013      	movs	r3, r2
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	d027      	beq.n	80022de <HAL_DMA_IRQHandler+0x7a>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2204      	movs	r2, #4
 8002292:	4013      	ands	r3, r2
 8002294:	d023      	beq.n	80022de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	4013      	ands	r3, r2
 80022a0:	d107      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2104      	movs	r1, #4
 80022ae:	438a      	bics	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80022b2:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	221c      	movs	r2, #28
 80022bc:	4013      	ands	r3, r2
 80022be:	2204      	movs	r2, #4
 80022c0:	409a      	lsls	r2, r3
 80022c2:	4b40      	ldr	r3, [pc, #256]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d100      	bne.n	80022d2 <HAL_DMA_IRQHandler+0x6e>
 80022d0:	e073      	b.n	80023ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	0010      	movs	r0, r2
 80022da:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80022dc:	e06d      	b.n	80023ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	221c      	movs	r2, #28
 80022e4:	4013      	ands	r3, r2
 80022e6:	2202      	movs	r2, #2
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4013      	ands	r3, r2
 80022f0:	d02e      	beq.n	8002350 <HAL_DMA_IRQHandler+0xec>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2202      	movs	r2, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	d02a      	beq.n	8002350 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2220      	movs	r2, #32
 8002302:	4013      	ands	r3, r2
 8002304:	d10b      	bne.n	800231e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	210a      	movs	r1, #10
 8002312:	438a      	bics	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2225      	movs	r2, #37	@ 0x25
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	221c      	movs	r2, #28
 8002328:	4013      	ands	r3, r2
 800232a:	2202      	movs	r2, #2
 800232c:	409a      	lsls	r2, r3
 800232e:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	@ 0x24
 8002338:	2100      	movs	r1, #0
 800233a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03a      	beq.n	80023ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	0010      	movs	r0, r2
 800234c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800234e:	e034      	b.n	80023ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	221c      	movs	r2, #28
 8002356:	4013      	ands	r3, r2
 8002358:	2208      	movs	r2, #8
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	d02b      	beq.n	80023bc <HAL_DMA_IRQHandler+0x158>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2208      	movs	r2, #8
 8002368:	4013      	ands	r3, r2
 800236a:	d027      	beq.n	80023bc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	210e      	movs	r1, #14
 8002378:	438a      	bics	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	221c      	movs	r2, #28
 8002386:	4013      	ands	r3, r2
 8002388:	2201      	movs	r2, #1
 800238a:	409a      	lsls	r2, r3
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_DMA_IRQHandler+0x160>)
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2225      	movs	r2, #37	@ 0x25
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	@ 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	0010      	movs	r0, r2
 80023b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46c0      	nop			@ (mov r8, r8)
}
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40020000 	.word	0x40020000

080023c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	4a10      	ldr	r2, [pc, #64]	@ (8002418 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80023d8:	4694      	mov	ip, r2
 80023da:	4463      	add	r3, ip
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	001a      	movs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	001a      	movs	r2, r3
 80023ea:	23ff      	movs	r3, #255	@ 0xff
 80023ec:	4013      	ands	r3, r2
 80023ee:	3b08      	subs	r3, #8
 80023f0:	2114      	movs	r1, #20
 80023f2:	0018      	movs	r0, r3
 80023f4:	f7fd fe86 	bl	8000104 <__udivsi3>
 80023f8:	0003      	movs	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a07      	ldr	r2, [pc, #28]	@ (800241c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002400:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	221f      	movs	r2, #31
 8002406:	4013      	ands	r3, r2
 8002408:	2201      	movs	r2, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b004      	add	sp, #16
 8002416:	bd80      	pop	{r7, pc}
 8002418:	10008200 	.word	0x10008200
 800241c:	40020880 	.word	0x40020880

08002420 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	223f      	movs	r2, #63	@ 0x3f
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002436:	4694      	mov	ip, r2
 8002438:	4463      	add	r3, ip
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	001a      	movs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a07      	ldr	r2, [pc, #28]	@ (8002464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3b01      	subs	r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	4013      	ands	r3, r2
 8002450:	2201      	movs	r2, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	1000823f 	.word	0x1000823f
 8002464:	40020940 	.word	0x40020940

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e147      	b.n	8002708 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4091      	lsls	r1, r2
 8002482:	000a      	movs	r2, r1
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d100      	bne.n	8002490 <HAL_GPIO_Init+0x28>
 800248e:	e138      	b.n	8002702 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x40>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	409a      	lsls	r2, r3
 80024b6:	0013      	movs	r3, r2
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	409a      	lsls	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	43da      	mvns	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	2201      	movs	r2, #1
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
 80024fc:	0013      	movs	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2203      	movs	r2, #3
 8002510:	4013      	ands	r3, r2
 8002512:	2b03      	cmp	r3, #3
 8002514:	d017      	beq.n	8002546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	4013      	ands	r3, r2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d123      	bne.n	800259a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	58d3      	ldr	r3, [r2, r3]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2207      	movs	r2, #7
 8002564:	4013      	ands	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2107      	movs	r1, #7
 800257e:	400b      	ands	r3, r1
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	401a      	ands	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	23c0      	movs	r3, #192	@ 0xc0
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_GPIO_Init+0x174>
 80025da:	e092      	b.n	8002702 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025dc:	4a50      	ldr	r2, [pc, #320]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3318      	adds	r3, #24
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2203      	movs	r2, #3
 80025ee:	4013      	ands	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	220f      	movs	r2, #15
 80025f4:	409a      	lsls	r2, r3
 80025f6:	0013      	movs	r3, r2
 80025f8:	43da      	mvns	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	23a0      	movs	r3, #160	@ 0xa0
 8002604:	05db      	lsls	r3, r3, #23
 8002606:	429a      	cmp	r2, r3
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1ca>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a45      	ldr	r2, [pc, #276]	@ (8002724 <HAL_GPIO_Init+0x2bc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a44      	ldr	r2, [pc, #272]	@ (8002728 <HAL_GPIO_Init+0x2c0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1c2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a43      	ldr	r2, [pc, #268]	@ (800272c <HAL_GPIO_Init+0x2c4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1be>
 8002622:	2303      	movs	r3, #3
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 8002626:	2305      	movs	r3, #5
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 8002632:	2300      	movs	r3, #0
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	2103      	movs	r1, #3
 8002638:	400a      	ands	r2, r1
 800263a:	00d2      	lsls	r2, r2, #3
 800263c:	4093      	lsls	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002644:	4936      	ldr	r1, [pc, #216]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3318      	adds	r3, #24
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002652:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43da      	mvns	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	035b      	lsls	r3, r3, #13
 800266a:	4013      	ands	r3, r2
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002676:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43da      	mvns	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	039b      	lsls	r3, r3, #14
 8002694:	4013      	ands	r3, r2
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 80026a8:	2384      	movs	r3, #132	@ 0x84
 80026aa:	58d3      	ldr	r3, [r2, r3]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43da      	mvns	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	4013      	ands	r3, r2
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026cc:	4914      	ldr	r1, [pc, #80]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 80026ce:	2284      	movs	r2, #132	@ 0x84
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026d4:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	58d3      	ldr	r3, [r2, r3]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43da      	mvns	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	025b      	lsls	r3, r3, #9
 80026ee:	4013      	ands	r3, r2
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026fa:	4909      	ldr	r1, [pc, #36]	@ (8002720 <HAL_GPIO_Init+0x2b8>)
 80026fc:	2280      	movs	r2, #128	@ 0x80
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	40da      	lsrs	r2, r3
 8002710:	1e13      	subs	r3, r2, #0
 8002712:	d000      	beq.n	8002716 <HAL_GPIO_Init+0x2ae>
 8002714:	e6b0      	b.n	8002478 <HAL_GPIO_Init+0x10>
  }
}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b006      	add	sp, #24
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021800 	.word	0x40021800
 8002724:	50000400 	.word	0x50000400
 8002728:	50000800 	.word	0x50000800
 800272c:	50000c00 	.word	0x50000c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	0008      	movs	r0, r1
 800273a:	0011      	movs	r1, r2
 800273c:	1cbb      	adds	r3, r7, #2
 800273e:	1c02      	adds	r2, r0, #0
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	1c7b      	adds	r3, r7, #1
 8002744:	1c0a      	adds	r2, r1, #0
 8002746:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002748:	1c7b      	adds	r3, r7, #1
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002750:	1cbb      	adds	r3, r7, #2
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275a:	1cbb      	adds	r3, r7, #2
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	0002      	movs	r2, r0
 8002774:	1dbb      	adds	r3, r7, #6
 8002776:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002778:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	1dba      	adds	r2, r7, #6
 800277e:	8812      	ldrh	r2, [r2, #0]
 8002780:	4013      	ands	r3, r2
 8002782:	d008      	beq.n	8002796 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002784:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002786:	1dba      	adds	r2, r7, #6
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800278c:	1dbb      	adds	r3, r7, #6
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f815 	bl	80027c0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	1dba      	adds	r2, r7, #6
 800279c:	8812      	ldrh	r2, [r2, #0]
 800279e:	4013      	ands	r3, r2
 80027a0:	d008      	beq.n	80027b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027a4:	1dba      	adds	r2, r7, #6
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027aa:	1dbb      	adds	r3, r7, #6
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f810 	bl	80027d4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021800 	.word	0x40021800

080027c0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	0002      	movs	r2, r0
 80027c8:	1dbb      	adds	r3, r7, #6
 80027ca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	0002      	movs	r2, r0
 80027dc:	1dbb      	adds	r3, r7, #6
 80027de:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e03d      	b.n	8002876 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a20      	ldr	r2, [pc, #128]	@ (8002880 <HAL_IWDG_Init+0x98>)
 8002800:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <HAL_IWDG_Init+0x9c>)
 8002808:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6852      	ldr	r2, [r2, #4]
 8002812:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6892      	ldr	r2, [r2, #8]
 800281c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800281e:	f7fe ff31 	bl	8001684 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002826:	e00e      	b.n	8002846 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002828:	f7fe ff2c 	bl	8001684 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b31      	cmp	r3, #49	@ 0x31
 8002834:	d907      	bls.n	8002846 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2207      	movs	r2, #7
 800283e:	4013      	ands	r3, r2
 8002840:	d001      	beq.n	8002846 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e017      	b.n	8002876 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2207      	movs	r2, #7
 800284e:	4013      	ands	r3, r2
 8002850:	d1ea      	bne.n	8002828 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d005      	beq.n	800286c <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68d2      	ldr	r2, [r2, #12]
 8002868:	611a      	str	r2, [r3, #16]
 800286a:	e003      	b.n	8002874 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <HAL_IWDG_Init+0xa0>)
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	0000cccc 	.word	0x0000cccc
 8002884:	00005555 	.word	0x00005555
 8002888:	0000aaaa 	.word	0x0000aaaa

0800288c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d11f      	bne.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	0013      	movs	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	189b      	adds	r3, r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4912      	ldr	r1, [pc, #72]	@ (8002908 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fd fc20 	bl	8000104 <__udivsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	3301      	adds	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ca:	e008      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e001      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e009      	b.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028de:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	401a      	ands	r2, r3
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d0ed      	beq.n	80028cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	40007000 	.word	0x40007000
 8002900:	fffff9ff 	.word	0xfffff9ff
 8002904:	20000000 	.word	0x20000000
 8002908:	000f4240 	.word	0x000f4240

0800290c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	23e0      	movs	r3, #224	@ 0xe0
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4013      	ands	r3, r2
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e2fe      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	d100      	bne.n	8002942 <HAL_RCC_OscConfig+0x1e>
 8002940:	e07c      	b.n	8002a3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4bc3      	ldr	r3, [pc, #780]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2238      	movs	r2, #56	@ 0x38
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294c:	4bc0      	ldr	r3, [pc, #768]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	4013      	ands	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b10      	cmp	r3, #16
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0x3e>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d002      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4bb9      	ldr	r3, [pc, #740]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	4013      	ands	r3, r2
 8002972:	d062      	beq.n	8002a3a <HAL_RCC_OscConfig+0x116>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d15e      	bne.n	8002a3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2d9      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	025b      	lsls	r3, r3, #9
 8002988:	429a      	cmp	r2, r3
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x78>
 800298c:	4bb0      	ldr	r3, [pc, #704]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4baf      	ldr	r3, [pc, #700]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002992:	2180      	movs	r1, #128	@ 0x80
 8002994:	0249      	lsls	r1, r1, #9
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e020      	b.n	80029de <HAL_RCC_OscConfig+0xba>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	23a0      	movs	r3, #160	@ 0xa0
 80029a2:	02db      	lsls	r3, r3, #11
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10e      	bne.n	80029c6 <HAL_RCC_OscConfig+0xa2>
 80029a8:	4ba9      	ldr	r3, [pc, #676]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029ae:	2180      	movs	r1, #128	@ 0x80
 80029b0:	02c9      	lsls	r1, r1, #11
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0249      	lsls	r1, r1, #9
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0xba>
 80029c6:	4ba2      	ldr	r3, [pc, #648]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4ba1      	ldr	r3, [pc, #644]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	49a1      	ldr	r1, [pc, #644]	@ (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 80029d8:	499f      	ldr	r1, [pc, #636]	@ (8002c58 <HAL_RCC_OscConfig+0x334>)
 80029da:	400a      	ands	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d014      	beq.n	8002a10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fe4d 	bl	8001684 <HAL_GetTick>
 80029ea:	0003      	movs	r3, r0
 80029ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fe48 	bl	8001684 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e298      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	4b93      	ldr	r3, [pc, #588]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	029b      	lsls	r3, r3, #10
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xcc>
 8002a0e:	e015      	b.n	8002a3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fe38 	bl	8001684 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fe33 	bl	8001684 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e283      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2c:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	029b      	lsls	r3, r3, #10
 8002a34:	4013      	ands	r3, r2
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0xf6>
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2202      	movs	r2, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_RCC_OscConfig+0x124>
 8002a46:	e099      	b.n	8002b7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a48:	4b81      	ldr	r3, [pc, #516]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2238      	movs	r2, #56	@ 0x38
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a52:	4b7f      	ldr	r3, [pc, #508]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2203      	movs	r2, #3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_OscConfig+0x144>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d002      	beq.n	8002a6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d135      	bne.n	8002ada <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6e:	4b78      	ldr	r3, [pc, #480]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4013      	ands	r3, r2
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x162>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e256      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b72      	ldr	r3, [pc, #456]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a74      	ldr	r2, [pc, #464]	@ (8002c5c <HAL_RCC_OscConfig+0x338>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	4b6e      	ldr	r3, [pc, #440]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c60 <HAL_RCC_OscConfig+0x33c>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ab6:	4b66      	ldr	r3, [pc, #408]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	2207      	movs	r2, #7
 8002abe:	4013      	ands	r3, r2
 8002ac0:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <HAL_RCC_OscConfig+0x340>)
 8002ac2:	40da      	lsrs	r2, r3
 8002ac4:	4b68      	ldr	r3, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x344>)
 8002ac6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ac8:	4b68      	ldr	r3, [pc, #416]	@ (8002c6c <HAL_RCC_OscConfig+0x348>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7fe fd7d 	bl	80015cc <HAL_InitTick>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d051      	beq.n	8002b7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e22c      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d030      	beq.n	8002b44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c60 <HAL_RCC_OscConfig+0x33c>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	4b57      	ldr	r3, [pc, #348]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002af6:	4b56      	ldr	r3, [pc, #344]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b55      	ldr	r3, [pc, #340]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002afc:	2180      	movs	r1, #128	@ 0x80
 8002afe:	0049      	lsls	r1, r1, #1
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fdbe 	bl	8001684 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fdb9 	bl	8001684 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e209      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b48      	ldr	r3, [pc, #288]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a4a      	ldr	r2, [pc, #296]	@ (8002c5c <HAL_RCC_OscConfig+0x338>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	021a      	lsls	r2, r3, #8
 8002b3c:	4b44      	ldr	r3, [pc, #272]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b44:	4b42      	ldr	r3, [pc, #264]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b4a:	4949      	ldr	r1, [pc, #292]	@ (8002c70 <HAL_RCC_OscConfig+0x34c>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fd98 	bl	8001684 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fd93 	bl	8001684 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1e3      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b6c:	4b38      	ldr	r3, [pc, #224]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4013      	ands	r3, r2
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x236>
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2208      	movs	r2, #8
 8002b82:	4013      	ands	r3, r2
 8002b84:	d047      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b86:	4b32      	ldr	r3, [pc, #200]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2238      	movs	r2, #56	@ 0x38
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b18      	cmp	r3, #24
 8002b90:	d10a      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b92:	4b2f      	ldr	r3, [pc, #188]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d03c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d138      	bne.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e1c5      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d019      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002bb0:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bb4:	4b26      	ldr	r3, [pc, #152]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fd62 	bl	8001684 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fd5d 	bl	8001684 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1ad      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d0f1      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2a2>
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	438a      	bics	r2, r1
 8002bee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fd48 	bl	8001684 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fd43 	bl	8001684 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e193      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c0c:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d1f1      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2fe>
 8002c20:	e0c6      	b.n	8002db0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	231f      	movs	r3, #31
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2238      	movs	r2, #56	@ 0x38
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d11e      	bne.n	8002c74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_RCC_OscConfig+0x32c>)
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_RCC_OscConfig+0x31e>
 8002c40:	e0b6      	b.n	8002db0 <HAL_RCC_OscConfig+0x48c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d000      	beq.n	8002c4c <HAL_RCC_OscConfig+0x328>
 8002c4a:	e0b1      	b.n	8002db0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e171      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
 8002c50:	40021000 	.word	0x40021000
 8002c54:	fffeffff 	.word	0xfffeffff
 8002c58:	fffbffff 	.word	0xfffbffff
 8002c5c:	ffff80ff 	.word	0xffff80ff
 8002c60:	ffffc7ff 	.word	0xffffc7ff
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c74:	4bb1      	ldr	r3, [pc, #708]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002c76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	055b      	lsls	r3, r3, #21
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_OscConfig+0x360>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x362>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d011      	beq.n	8002cae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4bac      	ldr	r3, [pc, #688]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c8e:	4bab      	ldr	r3, [pc, #684]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	0549      	lsls	r1, r1, #21
 8002c94:	430a      	orrs	r2, r1
 8002c96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c98:	4ba8      	ldr	r3, [pc, #672]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	055b      	lsls	r3, r3, #21
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cae:	4ba4      	ldr	r3, [pc, #656]	@ (8002f40 <HAL_RCC_OscConfig+0x61c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	@ 0x80
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cba:	4ba1      	ldr	r3, [pc, #644]	@ (8002f40 <HAL_RCC_OscConfig+0x61c>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4ba0      	ldr	r3, [pc, #640]	@ (8002f40 <HAL_RCC_OscConfig+0x61c>)
 8002cc0:	2180      	movs	r1, #128	@ 0x80
 8002cc2:	0049      	lsls	r1, r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fcdc 	bl	8001684 <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd2:	f7fe fcd7 	bl	8001684 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e127      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce4:	4b96      	ldr	r3, [pc, #600]	@ (8002f40 <HAL_RCC_OscConfig+0x61c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3e2>
 8002cf8:	4b90      	ldr	r3, [pc, #576]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002cfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002cfe:	2101      	movs	r1, #1
 8002d00:	430a      	orrs	r2, r1
 8002d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d04:	e01c      	b.n	8002d40 <HAL_RCC_OscConfig+0x41c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x404>
 8002d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d12:	4b8a      	ldr	r3, [pc, #552]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d14:	2104      	movs	r1, #4
 8002d16:	430a      	orrs	r2, r1
 8002d18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d1a:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d1e:	4b87      	ldr	r3, [pc, #540]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0x41c>
 8002d28:	4b84      	ldr	r3, [pc, #528]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d2c:	4b83      	ldr	r3, [pc, #524]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	438a      	bics	r2, r1
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d34:	4b81      	ldr	r3, [pc, #516]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d38:	4b80      	ldr	r3, [pc, #512]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d014      	beq.n	8002d72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc9c 	bl	8001684 <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d50:	e009      	b.n	8002d66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fe fc97 	bl	8001684 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	4a79      	ldr	r2, [pc, #484]	@ (8002f44 <HAL_RCC_OscConfig+0x620>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0e6      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d66:	4b75      	ldr	r3, [pc, #468]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x42e>
 8002d70:	e013      	b.n	8002d9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe fc87 	bl	8001684 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7a:	e009      	b.n	8002d90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fc82 	bl	8001684 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	4a6f      	ldr	r2, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x620>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0d1      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d90:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	2202      	movs	r2, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d9a:	231f      	movs	r3, #31
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b65      	ldr	r3, [pc, #404]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002da8:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002daa:	4967      	ldr	r1, [pc, #412]	@ (8002f48 <HAL_RCC_OscConfig+0x624>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <HAL_RCC_OscConfig+0x496>
 8002db8:	e0bb      	b.n	8002f32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dba:	4b60      	ldr	r3, [pc, #384]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2238      	movs	r2, #56	@ 0x38
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d100      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4a4>
 8002dc6:	e07b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d156      	bne.n	8002e7e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b59      	ldr	r3, [pc, #356]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002dd6:	495d      	ldr	r1, [pc, #372]	@ (8002f4c <HAL_RCC_OscConfig+0x628>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fc52 	bl	8001684 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe fc4d 	bl	8001684 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e09d      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	4b50      	ldr	r3, [pc, #320]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	049b      	lsls	r3, r3, #18
 8002e00:	4013      	ands	r3, r2
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a51      	ldr	r2, [pc, #324]	@ (8002f50 <HAL_RCC_OscConfig+0x62c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	431a      	orrs	r2, r3
 8002e32:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b40      	ldr	r3, [pc, #256]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e3e:	2180      	movs	r1, #128	@ 0x80
 8002e40:	0449      	lsls	r1, r1, #17
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e46:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	0549      	lsls	r1, r1, #21
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fc16 	bl	8001684 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fc11 	bl	8001684 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e061      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e70:	4b32      	ldr	r3, [pc, #200]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2380      	movs	r3, #128	@ 0x80
 8002e76:	049b      	lsls	r3, r3, #18
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x53a>
 8002e7c:	e059      	b.n	8002f32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002e84:	4931      	ldr	r1, [pc, #196]	@ (8002f4c <HAL_RCC_OscConfig+0x628>)
 8002e86:	400a      	ands	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fbfb 	bl	8001684 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fbf6 	bl	8001684 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e046      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea6:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	049b      	lsls	r3, r3, #18
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002eb8:	4926      	ldr	r1, [pc, #152]	@ (8002f54 <HAL_RCC_OscConfig+0x630>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e033      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x618>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d126      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2270      	movs	r2, #112	@ 0x70
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d11f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	23fe      	movs	r3, #254	@ 0xfe
 8002ef2:	01db      	lsls	r3, r3, #7
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d116      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	23f8      	movs	r3, #248	@ 0xf8
 8002f04:	039b      	lsls	r3, r3, #14
 8002f06:	401a      	ands	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10e      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	23e0      	movs	r3, #224	@ 0xe0
 8002f14:	051b      	lsls	r3, r3, #20
 8002f16:	401a      	ands	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	0f5b      	lsrs	r3, r3, #29
 8002f24:	075a      	lsls	r2, r3, #29
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b008      	add	sp, #32
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
 8002f44:	00001388 	.word	0x00001388
 8002f48:	efffffff 	.word	0xefffffff
 8002f4c:	feffffff 	.word	0xfeffffff
 8002f50:	11c1808c 	.word	0x11c1808c
 8002f54:	eefefffc 	.word	0xeefefffc

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0e9      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b76      	ldr	r3, [pc, #472]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2207      	movs	r2, #7
 8002f72:	4013      	ands	r3, r2
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d91e      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b73      	ldr	r3, [pc, #460]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2207      	movs	r2, #7
 8002f80:	4393      	bics	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fb7a 	bl	8001684 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f94:	e009      	b.n	8002faa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f96:	f7fe fb75 	bl	8001684 <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800314c <HAL_RCC_ClockConfig+0x1f4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0ca      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002faa:	4b67      	ldr	r3, [pc, #412]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2207      	movs	r2, #7
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d015      	beq.n	8002fee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d006      	beq.n	8002fda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fcc:	4b60      	ldr	r3, [pc, #384]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd2:	21e0      	movs	r1, #224	@ 0xe0
 8002fd4:	01c9      	lsls	r1, r1, #7
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fda:	4b5d      	ldr	r3, [pc, #372]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4a5d      	ldr	r2, [pc, #372]	@ (8003154 <HAL_RCC_ClockConfig+0x1fc>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4b59      	ldr	r3, [pc, #356]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d057      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003000:	4b53      	ldr	r3, [pc, #332]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	029b      	lsls	r3, r3, #10
 8003008:	4013      	ands	r3, r2
 800300a:	d12b      	bne.n	8003064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e097      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003018:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	049b      	lsls	r3, r3, #18
 8003020:	4013      	ands	r3, r2
 8003022:	d11f      	bne.n	8003064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e08b      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003030:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4013      	ands	r3, r2
 800303a:	d113      	bne.n	8003064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e07f      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d106      	bne.n	8003056 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003048:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 800304a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304c:	2202      	movs	r2, #2
 800304e:	4013      	ands	r3, r2
 8003050:	d108      	bne.n	8003064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e074      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003056:	4b3e      	ldr	r3, [pc, #248]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	2202      	movs	r2, #2
 800305c:	4013      	ands	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e06d      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003064:	4b3a      	ldr	r3, [pc, #232]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2207      	movs	r2, #7
 800306a:	4393      	bics	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4b37      	ldr	r3, [pc, #220]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe fb04 	bl	8001684 <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003080:	e009      	b.n	8003096 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7fe faff 	bl	8001684 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	4a2f      	ldr	r2, [pc, #188]	@ (800314c <HAL_RCC_ClockConfig+0x1f4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e054      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2238      	movs	r2, #56	@ 0x38
 800309c:	401a      	ands	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1ec      	bne.n	8003082 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2207      	movs	r2, #7
 80030ae:	4013      	ands	r3, r2
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d21e      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2207      	movs	r2, #7
 80030bc:	4393      	bics	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030c8:	f7fe fadc 	bl	8001684 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d2:	f7fe fad7 	bl	8001684 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4a1b      	ldr	r2, [pc, #108]	@ (800314c <HAL_RCC_ClockConfig+0x1f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e02c      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030e6:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <HAL_RCC_ClockConfig+0x1f0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2207      	movs	r2, #7
 80030ec:	4013      	ands	r3, r2
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2204      	movs	r2, #4
 80030fa:	4013      	ands	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030fe:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4a15      	ldr	r2, [pc, #84]	@ (8003158 <HAL_RCC_ClockConfig+0x200>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003112:	f000 f829 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003116:	0001      	movs	r1, r0
 8003118:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <HAL_RCC_ClockConfig+0x1f8>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	220f      	movs	r2, #15
 8003120:	401a      	ands	r2, r3
 8003122:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <HAL_RCC_ClockConfig+0x204>)
 8003124:	0092      	lsls	r2, r2, #2
 8003126:	58d3      	ldr	r3, [r2, r3]
 8003128:	221f      	movs	r2, #31
 800312a:	4013      	ands	r3, r2
 800312c:	000a      	movs	r2, r1
 800312e:	40da      	lsrs	r2, r3
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCC_ClockConfig+0x208>)
 8003132:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003134:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <HAL_RCC_ClockConfig+0x20c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0018      	movs	r0, r3
 800313a:	f7fe fa47 	bl	80015cc <HAL_InitTick>
 800313e:	0003      	movs	r3, r0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40022000 	.word	0x40022000
 800314c:	00001388 	.word	0x00001388
 8003150:	40021000 	.word	0x40021000
 8003154:	fffff0ff 	.word	0xfffff0ff
 8003158:	ffff8fff 	.word	0xffff8fff
 800315c:	08005704 	.word	0x08005704
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316e:	4b3c      	ldr	r3, [pc, #240]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2238      	movs	r2, #56	@ 0x38
 8003174:	4013      	ands	r3, r2
 8003176:	d10f      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003178:	4b39      	ldr	r3, [pc, #228]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0adb      	lsrs	r3, r3, #11
 800317e:	2207      	movs	r2, #7
 8003180:	4013      	ands	r3, r2
 8003182:	2201      	movs	r2, #1
 8003184:	409a      	lsls	r2, r3
 8003186:	0013      	movs	r3, r2
 8003188:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	4835      	ldr	r0, [pc, #212]	@ (8003264 <HAL_RCC_GetSysClockFreq+0xfc>)
 800318e:	f7fc ffb9 	bl	8000104 <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e05d      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003198:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2238      	movs	r2, #56	@ 0x38
 800319e:	4013      	ands	r3, r2
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a4:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x100>)
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e054      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2238      	movs	r2, #56	@ 0x38
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d138      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80031b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2203      	movs	r2, #3
 80031bc:	4013      	ands	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031c0:	4b27      	ldr	r3, [pc, #156]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	3301      	adds	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d10d      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4824      	ldr	r0, [pc, #144]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x100>)
 80031d8:	f7fc ff94 	bl	8000104 <__udivsi3>
 80031dc:	0003      	movs	r3, r0
 80031de:	0019      	movs	r1, r3
 80031e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	227f      	movs	r2, #127	@ 0x7f
 80031e8:	4013      	ands	r3, r2
 80031ea:	434b      	muls	r3, r1
 80031ec:	617b      	str	r3, [r7, #20]
        break;
 80031ee:	e00d      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	481c      	ldr	r0, [pc, #112]	@ (8003264 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031f4:	f7fc ff86 	bl	8000104 <__udivsi3>
 80031f8:	0003      	movs	r3, r0
 80031fa:	0019      	movs	r1, r3
 80031fc:	4b18      	ldr	r3, [pc, #96]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	227f      	movs	r2, #127	@ 0x7f
 8003204:	4013      	ands	r3, r2
 8003206:	434b      	muls	r3, r1
 8003208:	617b      	str	r3, [r7, #20]
        break;
 800320a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800320c:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	0f5b      	lsrs	r3, r3, #29
 8003212:	2207      	movs	r2, #7
 8003214:	4013      	ands	r3, r2
 8003216:	3301      	adds	r3, #1
 8003218:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	6978      	ldr	r0, [r7, #20]
 800321e:	f7fc ff71 	bl	8000104 <__udivsi3>
 8003222:	0003      	movs	r3, r0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e015      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003228:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2238      	movs	r2, #56	@ 0x38
 800322e:	4013      	ands	r3, r2
 8003230:	2b20      	cmp	r3, #32
 8003232:	d103      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800323c:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2238      	movs	r2, #56	@ 0x38
 8003242:	4013      	ands	r3, r2
 8003244:	2b18      	cmp	r3, #24
 8003246:	d103      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003248:	23fa      	movs	r3, #250	@ 0xfa
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e001      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003254:	693b      	ldr	r3, [r7, #16]
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b006      	add	sp, #24
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	40021000 	.word	0x40021000
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200

0800326c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003270:	4b02      	ldr	r3, [pc, #8]	@ (800327c <HAL_RCC_GetHCLKFreq+0x10>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	20000000 	.word	0x20000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003284:	f7ff fff2 	bl	800326c <HAL_RCC_GetHCLKFreq>
 8003288:	0004      	movs	r4, r0
 800328a:	f7ff fb3f 	bl	800290c <LL_RCC_GetAPB1Prescaler>
 800328e:	0003      	movs	r3, r0
 8003290:	0b1a      	lsrs	r2, r3, #12
 8003292:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	58d3      	ldr	r3, [r2, r3]
 8003298:	221f      	movs	r2, #31
 800329a:	4013      	ands	r3, r2
 800329c:	40dc      	lsrs	r4, r3
 800329e:	0023      	movs	r3, r4
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	08005744 	.word	0x08005744

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80032b4:	2313      	movs	r3, #19
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032bc:	2312      	movs	r3, #18
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	@ 0x80
 80032ca:	029b      	lsls	r3, r3, #10
 80032cc:	4013      	ands	r3, r2
 80032ce:	d100      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80032d0:	e0a3      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2011      	movs	r0, #17
 80032d4:	183b      	adds	r3, r7, r0
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032da:	4ba5      	ldr	r3, [pc, #660]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	055b      	lsls	r3, r3, #21
 80032e2:	4013      	ands	r3, r2
 80032e4:	d110      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	4ba2      	ldr	r3, [pc, #648]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032ea:	4ba1      	ldr	r3, [pc, #644]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	0549      	lsls	r1, r1, #21
 80032f0:	430a      	orrs	r2, r1
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032f4:	4b9e      	ldr	r3, [pc, #632]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	055b      	lsls	r3, r3, #21
 80032fc:	4013      	ands	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003302:	183b      	adds	r3, r7, r0
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003308:	4b9a      	ldr	r3, [pc, #616]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b99      	ldr	r3, [pc, #612]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	0049      	lsls	r1, r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003316:	f7fe f9b5 	bl	8001684 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800331e:	e00b      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003320:	f7fe f9b0 	bl	8001684 <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d904      	bls.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800332e:	2313      	movs	r3, #19
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2203      	movs	r2, #3
 8003334:	701a      	strb	r2, [r3, #0]
        break;
 8003336:	e005      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003338:	4b8e      	ldr	r3, [pc, #568]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4013      	ands	r3, r2
 8003342:	d0ed      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003344:	2313      	movs	r3, #19
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d154      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800334e:	4b88      	ldr	r3, [pc, #544]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003350:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003352:	23c0      	movs	r3, #192	@ 0xc0
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4013      	ands	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d019      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	429a      	cmp	r2, r3
 8003368:	d014      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800336a:	4b81      	ldr	r3, [pc, #516]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800336c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336e:	4a82      	ldr	r2, [pc, #520]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003370:	4013      	ands	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003374:	4b7e      	ldr	r3, [pc, #504]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003376:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003378:	4b7d      	ldr	r3, [pc, #500]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	0249      	lsls	r1, r1, #9
 800337e:	430a      	orrs	r2, r1
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003382:	4b7b      	ldr	r3, [pc, #492]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003384:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003386:	4b7a      	ldr	r3, [pc, #488]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003388:	497c      	ldr	r1, [pc, #496]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800338a:	400a      	ands	r2, r1
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800338e:	4b78      	ldr	r3, [pc, #480]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2201      	movs	r2, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d016      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f972 	bl	8001684 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a4:	e00c      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe f96d 	bl	8001684 <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	4a73      	ldr	r2, [pc, #460]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d904      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80033b6:	2313      	movs	r3, #19
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2203      	movs	r2, #3
 80033bc:	701a      	strb	r2, [r3, #0]
            break;
 80033be:	e004      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	2202      	movs	r2, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d0ed      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80033ca:	2313      	movs	r3, #19
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d4:	4b66      	ldr	r3, [pc, #408]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	4a67      	ldr	r2, [pc, #412]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033e2:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033e4:	430a      	orrs	r2, r1
 80033e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033e8:	e00c      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ea:	2312      	movs	r3, #18
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2213      	movs	r2, #19
 80033f0:	18ba      	adds	r2, r7, r2
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e005      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	2312      	movs	r3, #18
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2213      	movs	r2, #19
 80033fe:	18ba      	adds	r2, r7, r2
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003404:	2311      	movs	r3, #17
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b58      	ldr	r3, [pc, #352]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003410:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003412:	4b57      	ldr	r3, [pc, #348]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003414:	495b      	ldr	r1, [pc, #364]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003416:	400a      	ands	r2, r1
 8003418:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003424:	4b52      	ldr	r3, [pc, #328]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	2203      	movs	r2, #3
 800342a:	4393      	bics	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4b4f      	ldr	r3, [pc, #316]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003434:	430a      	orrs	r2, r1
 8003436:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003442:	4b4b      	ldr	r3, [pc, #300]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	4a50      	ldr	r2, [pc, #320]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003452:	430a      	orrs	r2, r1
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4013      	ands	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003462:	4b43      	ldr	r3, [pc, #268]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	4a49      	ldr	r2, [pc, #292]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	4b3f      	ldr	r3, [pc, #252]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003472:	430a      	orrs	r2, r1
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4013      	ands	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003482:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003486:	4a42      	ldr	r2, [pc, #264]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	4b37      	ldr	r3, [pc, #220]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003492:	430a      	orrs	r2, r1
 8003494:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2220      	movs	r2, #32
 800349c:	4013      	ands	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034a0:	4b33      	ldr	r3, [pc, #204]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	4b30      	ldr	r3, [pc, #192]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	01db      	lsls	r3, r3, #7
 80034bc:	4013      	ands	r3, r2
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	0899      	lsrs	r1, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	4b28      	ldr	r3, [pc, #160]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034ce:	430a      	orrs	r2, r1
 80034d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	05db      	lsls	r3, r3, #23
 80034da:	429a      	cmp	r2, r3
 80034dc:	d106      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	0249      	lsls	r1, r1, #9
 80034e8:	430a      	orrs	r2, r1
 80034ea:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	@ 0x80
 80034f2:	039b      	lsls	r3, r3, #14
 80034f4:	4013      	ands	r3, r2
 80034f6:	d016      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	4a26      	ldr	r2, [pc, #152]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003508:	430a      	orrs	r2, r1
 800350a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	03db      	lsls	r3, r3, #15
 8003514:	429a      	cmp	r2, r3
 8003516:	d106      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003518:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800351e:	2180      	movs	r1, #128	@ 0x80
 8003520:	0449      	lsls	r1, r1, #17
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4013      	ands	r3, r2
 8003530:	d016      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	4a19      	ldr	r2, [pc, #100]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003542:	430a      	orrs	r2, r1
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	01db      	lsls	r3, r3, #7
 800354e:	429a      	cmp	r2, r3
 8003550:	d106      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003552:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003560:	2312      	movs	r3, #18
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	781b      	ldrb	r3, [r3, #0]
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b006      	add	sp, #24
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	fffffcff 	.word	0xfffffcff
 800357c:	fffeffff 	.word	0xfffeffff
 8003580:	00001388 	.word	0x00001388
 8003584:	efffffff 	.word	0xefffffff
 8003588:	fffff3ff 	.word	0xfffff3ff
 800358c:	fff3ffff 	.word	0xfff3ffff
 8003590:	ffcfffff 	.word	0xffcfffff
 8003594:	ffffcfff 	.word	0xffffcfff
 8003598:	ffbfffff 	.word	0xffbfffff
 800359c:	ffff3fff 	.word	0xffff3fff

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e04a      	b.n	8003648 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	223d      	movs	r2, #61	@ 0x3d
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223c      	movs	r2, #60	@ 0x3c
 80035c2:	2100      	movs	r1, #0
 80035c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fd fd41 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	223d      	movs	r2, #61	@ 0x3d
 80035d2:	2102      	movs	r1, #2
 80035d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	0019      	movs	r1, r3
 80035e0:	0010      	movs	r0, r2
 80035e2:	f000 fd5f 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2248      	movs	r2, #72	@ 0x48
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	223e      	movs	r2, #62	@ 0x3e
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223f      	movs	r2, #63	@ 0x3f
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2240      	movs	r2, #64	@ 0x40
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2241      	movs	r2, #65	@ 0x41
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2242      	movs	r2, #66	@ 0x42
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2243      	movs	r2, #67	@ 0x43
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2244      	movs	r2, #68	@ 0x44
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2245      	movs	r2, #69	@ 0x45
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2246      	movs	r2, #70	@ 0x46
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2247      	movs	r2, #71	@ 0x47
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	223d      	movs	r2, #61	@ 0x3d
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e04a      	b.n	80036f8 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	223d      	movs	r2, #61	@ 0x3d
 8003666:	5c9b      	ldrb	r3, [r3, r2]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d107      	bne.n	800367e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	223c      	movs	r2, #60	@ 0x3c
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 f841 	bl	8003700 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	223d      	movs	r2, #61	@ 0x3d
 8003682:	2102      	movs	r1, #2
 8003684:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	0019      	movs	r1, r3
 8003690:	0010      	movs	r0, r2
 8003692:	f000 fd07 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2248      	movs	r2, #72	@ 0x48
 800369a:	2101      	movs	r1, #1
 800369c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	223e      	movs	r2, #62	@ 0x3e
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223f      	movs	r2, #63	@ 0x3f
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2240      	movs	r2, #64	@ 0x40
 80036b2:	2101      	movs	r1, #1
 80036b4:	5499      	strb	r1, [r3, r2]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2241      	movs	r2, #65	@ 0x41
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2242      	movs	r2, #66	@ 0x42
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2243      	movs	r2, #67	@ 0x43
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2244      	movs	r2, #68	@ 0x44
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2245      	movs	r2, #69	@ 0x45
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2246      	movs	r2, #70	@ 0x46
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2247      	movs	r2, #71	@ 0x47
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223d      	movs	r2, #61	@ 0x3d
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e04a      	b.n	80037b8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223d      	movs	r2, #61	@ 0x3d
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	223c      	movs	r2, #60	@ 0x3c
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f841 	bl	80037c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	223d      	movs	r2, #61	@ 0x3d
 8003742:	2102      	movs	r1, #2
 8003744:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f000 fca7 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2248      	movs	r2, #72	@ 0x48
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	223e      	movs	r2, #62	@ 0x3e
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	223f      	movs	r2, #63	@ 0x3f
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2240      	movs	r2, #64	@ 0x40
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2241      	movs	r2, #65	@ 0x41
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2242      	movs	r2, #66	@ 0x42
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2243      	movs	r2, #67	@ 0x43
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2244      	movs	r2, #68	@ 0x44
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2245      	movs	r2, #69	@ 0x45
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2246      	movs	r2, #70	@ 0x46
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2247      	movs	r2, #71	@ 0x47
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	223d      	movs	r2, #61	@ 0x3d
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e04a      	b.n	8003878 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223d      	movs	r2, #61	@ 0x3d
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223c      	movs	r2, #60	@ 0x3c
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f841 	bl	8003880 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223d      	movs	r2, #61	@ 0x3d
 8003802:	2102      	movs	r1, #2
 8003804:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	0019      	movs	r1, r3
 8003810:	0010      	movs	r0, r2
 8003812:	f000 fc47 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2248      	movs	r2, #72	@ 0x48
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223e      	movs	r2, #62	@ 0x3e
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223f      	movs	r2, #63	@ 0x3f
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2240      	movs	r2, #64	@ 0x40
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2241      	movs	r2, #65	@ 0x41
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2242      	movs	r2, #66	@ 0x42
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2243      	movs	r2, #67	@ 0x43
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2244      	movs	r2, #68	@ 0x44
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2245      	movs	r2, #69	@ 0x45
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2246      	movs	r2, #70	@ 0x46
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2247      	movs	r2, #71	@ 0x47
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223d      	movs	r2, #61	@ 0x3d
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003888:	46c0      	nop			@ (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2202      	movs	r2, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	d021      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2202      	movs	r2, #2
 80038b4:	4013      	ands	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2203      	movs	r2, #3
 80038be:	4252      	negs	r2, r2
 80038c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2203      	movs	r2, #3
 80038d0:	4013      	ands	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 fbcc 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 80038dc:	e007      	b.n	80038ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 fbbf 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fbcb 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2204      	movs	r2, #4
 80038f8:	4013      	ands	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2204      	movs	r2, #4
 8003900:	4013      	ands	r3, r2
 8003902:	d01e      	beq.n	8003942 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2205      	movs	r2, #5
 800390a:	4252      	negs	r2, r2
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	23c0      	movs	r3, #192	@ 0xc0
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fba5 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 800392a:	e007      	b.n	800393c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0018      	movs	r0, r3
 8003930:	f000 fb98 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	0018      	movs	r0, r3
 8003938:	f000 fba4 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2208      	movs	r2, #8
 8003946:	4013      	ands	r3, r2
 8003948:	d021      	beq.n	800398e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2208      	movs	r2, #8
 800394e:	4013      	ands	r3, r2
 8003950:	d01d      	beq.n	800398e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2209      	movs	r2, #9
 8003958:	4252      	negs	r2, r2
 800395a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2203      	movs	r2, #3
 800396a:	4013      	ands	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 fb7f 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003976:	e007      	b.n	8003988 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fb72 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 fb7e 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2210      	movs	r2, #16
 8003992:	4013      	ands	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2210      	movs	r2, #16
 800399a:	4013      	ands	r3, r2
 800399c:	d01e      	beq.n	80039dc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2211      	movs	r2, #17
 80039a4:	4252      	negs	r2, r2
 80039a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2208      	movs	r2, #8
 80039ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	23c0      	movs	r3, #192	@ 0xc0
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 fb58 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e007      	b.n	80039d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fb4b 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fb57 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	d00c      	beq.n	80039fe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4013      	ands	r3, r2
 80039ea:	d008      	beq.n	80039fe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2202      	movs	r2, #2
 80039f2:	4252      	negs	r2, r2
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fb2b 	bl	8004054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2280      	movs	r2, #128	@ 0x80
 8003a02:	4013      	ands	r3, r2
 8003a04:	d104      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	2380      	movs	r3, #128	@ 0x80
 8003a0a:	019b      	lsls	r3, r3, #6
 8003a0c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a0e:	d00b      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	4013      	ands	r3, r2
 8003a16:	d007      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <HAL_TIM_IRQHandler+0x208>)
 8003a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f001 f924 	bl	8004c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2280      	movs	r2, #128	@ 0x80
 8003a36:	4013      	ands	r3, r2
 8003a38:	d007      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a17      	ldr	r2, [pc, #92]	@ (8003a9c <HAL_TIM_IRQHandler+0x20c>)
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f001 f91b 	bl	8004c80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2240      	movs	r2, #64	@ 0x40
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00c      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2240      	movs	r2, #64	@ 0x40
 8003a56:	4013      	ands	r3, r2
 8003a58:	d008      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2241      	movs	r2, #65	@ 0x41
 8003a60:	4252      	negs	r2, r2
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fb14 	bl	8004094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00c      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d008      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2221      	movs	r2, #33	@ 0x21
 8003a82:	4252      	negs	r2, r2
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f001 f8e9 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	ffffdf7f 	.word	0xffffdf7f
 8003a9c:	fffffeff 	.word	0xfffffeff

08003aa0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2317      	movs	r3, #23
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	223c      	movs	r2, #60	@ 0x3c
 8003ab8:	5c9b      	ldrb	r3, [r3, r2]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_OC_ConfigChannel+0x22>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e048      	b.n	8003b54 <HAL_TIM_OC_ConfigChannel+0xb4>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	223c      	movs	r2, #60	@ 0x3c
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b14      	cmp	r3, #20
 8003ace:	d835      	bhi.n	8003b3c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 fb61 	bl	80041ac <TIM_OC1_SetConfig>
      break;
 8003aea:	e02c      	b.n	8003b46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fbd9 	bl	80042ac <TIM_OC2_SetConfig>
      break;
 8003afa:	e024      	b.n	8003b46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	0011      	movs	r1, r2
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 fc4f 	bl	80043a8 <TIM_OC3_SetConfig>
      break;
 8003b0a:	e01c      	b.n	8003b46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fcc9 	bl	80044ac <TIM_OC4_SetConfig>
      break;
 8003b1a:	e014      	b.n	8003b46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fd25 	bl	8004574 <TIM_OC5_SetConfig>
      break;
 8003b2a:	e00c      	b.n	8003b46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 fd77 	bl	8004628 <TIM_OC6_SetConfig>
      break;
 8003b3a:	e004      	b.n	8003b46 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2317      	movs	r3, #23
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
      break;
 8003b44:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	223c      	movs	r2, #60	@ 0x3c
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5499      	strb	r1, [r3, r2]

  return status;
 8003b4e:	2317      	movs	r3, #23
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b006      	add	sp, #24
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	08005764 	.word	0x08005764

08003b60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2317      	movs	r3, #23
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	223c      	movs	r2, #60	@ 0x3c
 8003b78:	5c9b      	ldrb	r3, [r3, r2]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_IC_ConfigChannel+0x22>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e08c      	b.n	8003c9c <HAL_TIM_IC_ConfigChannel+0x13c>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	223c      	movs	r2, #60	@ 0x3c
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ba0:	f000 fda0 	bl	80046e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	210c      	movs	r1, #12
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6999      	ldr	r1, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	e062      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d11c      	bne.n	8003c08 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003bde:	f000 fe05 	bl	80047ec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	492d      	ldr	r1, [pc, #180]	@ (8003ca4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003bee:	400a      	ands	r2, r1
 8003bf0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6999      	ldr	r1, [r3, #24]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	619a      	str	r2, [r3, #24]
 8003c06:	e042      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11b      	bne.n	8003c46 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c1e:	f000 fe59 	bl	80048d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	210c      	movs	r1, #12
 8003c2e:	438a      	bics	r2, r1
 8003c30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
 8003c44:	e023      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d11c      	bne.n	8003c86 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c5c:	f000 fe7a 	bl	8004954 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	490e      	ldr	r1, [pc, #56]	@ (8003ca4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69d9      	ldr	r1, [r3, #28]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	61da      	str	r2, [r3, #28]
 8003c84:	e003      	b.n	8003c8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003c86:	2317      	movs	r3, #23
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	223c      	movs	r2, #60	@ 0x3c
 8003c92:	2100      	movs	r1, #0
 8003c94:	5499      	strb	r1, [r3, r2]

  return status;
 8003c96:	2317      	movs	r3, #23
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	781b      	ldrb	r3, [r3, #0]
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b006      	add	sp, #24
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	fffff3ff 	.word	0xfffff3ff

08003ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2317      	movs	r3, #23
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	223c      	movs	r2, #60	@ 0x3c
 8003cc0:	5c9b      	ldrb	r3, [r3, r2]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_PWM_ConfigChannel+0x22>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0e5      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	223c      	movs	r2, #60	@ 0x3c
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b14      	cmp	r3, #20
 8003cd6:	d900      	bls.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x32>
 8003cd8:	e0d1      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	009a      	lsls	r2, r3, #2
 8003cde:	4b70      	ldr	r3, [pc, #448]	@ (8003ea0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ce0:	18d3      	adds	r3, r2, r3
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	0011      	movs	r1, r2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 fa5c 	bl	80041ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2108      	movs	r1, #8
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2104      	movs	r1, #4
 8003d10:	438a      	bics	r2, r1
 8003d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6999      	ldr	r1, [r3, #24]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	619a      	str	r2, [r3, #24]
      break;
 8003d26:	e0af      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 fabb 	bl	80042ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2180      	movs	r1, #128	@ 0x80
 8003d42:	0109      	lsls	r1, r1, #4
 8003d44:	430a      	orrs	r2, r1
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4954      	ldr	r1, [pc, #336]	@ (8003ea4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e08c      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fb16 	bl	80043a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2108      	movs	r1, #8
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2104      	movs	r1, #4
 8003d98:	438a      	bics	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69d9      	ldr	r1, [r3, #28]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	61da      	str	r2, [r3, #28]
      break;
 8003dae:	e06b      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fb77 	bl	80044ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2180      	movs	r1, #128	@ 0x80
 8003dca:	0109      	lsls	r1, r1, #4
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4932      	ldr	r1, [pc, #200]	@ (8003ea4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69d9      	ldr	r1, [r3, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	61da      	str	r2, [r3, #28]
      break;
 8003df4:	e048      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fbb8 	bl	8004574 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2108      	movs	r1, #8
 8003e10:	430a      	orrs	r2, r1
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2104      	movs	r1, #4
 8003e20:	438a      	bics	r2, r1
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e36:	e027      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 fbf1 	bl	8004628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2180      	movs	r1, #128	@ 0x80
 8003e52:	0109      	lsls	r1, r1, #4
 8003e54:	430a      	orrs	r2, r1
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4910      	ldr	r1, [pc, #64]	@ (8003ea4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	021a      	lsls	r2, r3, #8
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e7c:	e004      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003e7e:	2317      	movs	r3, #23
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
      break;
 8003e86:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	223c      	movs	r2, #60	@ 0x3c
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e90:	2317      	movs	r3, #23
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b006      	add	sp, #24
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	080057b8 	.word	0x080057b8
 8003ea4:	fffffbff 	.word	0xfffffbff

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	230f      	movs	r3, #15
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223c      	movs	r2, #60	@ 0x3c
 8003ebe:	5c9b      	ldrb	r3, [r3, r2]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIM_ConfigClockSource+0x20>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0bc      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x19a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	223c      	movs	r2, #60	@ 0x3c
 8003ecc:	2101      	movs	r1, #1
 8003ece:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	223d      	movs	r2, #61	@ 0x3d
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800404c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a59      	ldr	r2, [pc, #356]	@ (8004050 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2280      	movs	r2, #128	@ 0x80
 8003efe:	0192      	lsls	r2, r2, #6
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d040      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0xde>
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	0192      	lsls	r2, r2, #6
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d900      	bls.n	8003f0e <HAL_TIM_ConfigClockSource+0x66>
 8003f0c:	e088      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f0e:	2280      	movs	r2, #128	@ 0x80
 8003f10:	0152      	lsls	r2, r2, #5
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d100      	bne.n	8003f18 <HAL_TIM_ConfigClockSource+0x70>
 8003f16:	e088      	b.n	800402a <HAL_TIM_ConfigClockSource+0x182>
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	0152      	lsls	r2, r2, #5
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d900      	bls.n	8003f22 <HAL_TIM_ConfigClockSource+0x7a>
 8003f20:	e07e      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f22:	2b70      	cmp	r3, #112	@ 0x70
 8003f24:	d018      	beq.n	8003f58 <HAL_TIM_ConfigClockSource+0xb0>
 8003f26:	d900      	bls.n	8003f2a <HAL_TIM_ConfigClockSource+0x82>
 8003f28:	e07a      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f2a:	2b60      	cmp	r3, #96	@ 0x60
 8003f2c:	d04f      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x126>
 8003f2e:	d900      	bls.n	8003f32 <HAL_TIM_ConfigClockSource+0x8a>
 8003f30:	e076      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f32:	2b50      	cmp	r3, #80	@ 0x50
 8003f34:	d03b      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x106>
 8003f36:	d900      	bls.n	8003f3a <HAL_TIM_ConfigClockSource+0x92>
 8003f38:	e072      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f3a:	2b40      	cmp	r3, #64	@ 0x40
 8003f3c:	d057      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x146>
 8003f3e:	d900      	bls.n	8003f42 <HAL_TIM_ConfigClockSource+0x9a>
 8003f40:	e06e      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f42:	2b30      	cmp	r3, #48	@ 0x30
 8003f44:	d063      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x166>
 8003f46:	d86b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d060      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x166>
 8003f4c:	d868      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d05d      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x166>
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d05b      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x166>
 8003f56:	e063      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f68:	f000 fd56 	bl	8004a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2277      	movs	r2, #119	@ 0x77
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
      break;
 8003f84:	e052      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f96:	f000 fd3f 	bl	8004a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2180      	movs	r1, #128	@ 0x80
 8003fa6:	01c9      	lsls	r1, r1, #7
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
      break;
 8003fac:	e03e      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	001a      	movs	r2, r3
 8003fbc:	f000 fbe8 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2150      	movs	r1, #80	@ 0x50
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 fd0a 	bl	80049e0 <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e02e      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fda:	001a      	movs	r2, r3
 8003fdc:	f000 fc48 	bl	8004870 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2160      	movs	r1, #96	@ 0x60
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fcfa 	bl	80049e0 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e01e      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	f000 fbc8 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	@ 0x40
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fcea 	bl	80049e0 <TIM_ITRx_SetConfig>
      break;
 800400c:	e00e      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0019      	movs	r1, r3
 8004018:	0010      	movs	r0, r2
 800401a:	f000 fce1 	bl	80049e0 <TIM_ITRx_SetConfig>
      break;
 800401e:	e005      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004020:	230f      	movs	r3, #15
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
      break;
 8004028:	e000      	b.n	800402c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800402a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	223d      	movs	r2, #61	@ 0x3d
 8004030:	2101      	movs	r1, #1
 8004032:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	223c      	movs	r2, #60	@ 0x3c
 8004038:	2100      	movs	r1, #0
 800403a:	5499      	strb	r1, [r3, r2]

  return status;
 800403c:	230f      	movs	r3, #15
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	781b      	ldrb	r3, [r3, #0]
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	ffceff88 	.word	0xffceff88
 8004050:	ffff00ff 	.word	0xffff00ff

08004054 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800407c:	46c0      	nop			@ (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409c:	46c0      	nop			@ (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a37      	ldr	r2, [pc, #220]	@ (8004194 <TIM_Base_SetConfig+0xf0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d008      	beq.n	80040ce <TIM_Base_SetConfig+0x2a>
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	2380      	movs	r3, #128	@ 0x80
 80040c0:	05db      	lsls	r3, r3, #23
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0x2a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a33      	ldr	r2, [pc, #204]	@ (8004198 <TIM_Base_SetConfig+0xf4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2270      	movs	r2, #112	@ 0x70
 80040d2:	4393      	bics	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <TIM_Base_SetConfig+0xf0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d014      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	05db      	lsls	r3, r3, #23
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d00f      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a28      	ldr	r2, [pc, #160]	@ (8004198 <TIM_Base_SetConfig+0xf4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a27      	ldr	r2, [pc, #156]	@ (800419c <TIM_Base_SetConfig+0xf8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <TIM_Base_SetConfig+0xfc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a25      	ldr	r2, [pc, #148]	@ (80041a4 <TIM_Base_SetConfig+0x100>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a24      	ldr	r2, [pc, #144]	@ (80041a8 <TIM_Base_SetConfig+0x104>)
 8004116:	4013      	ands	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2280      	movs	r2, #128	@ 0x80
 8004128:	4393      	bics	r3, r2
 800412a:	001a      	movs	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <TIM_Base_SetConfig+0xf0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0xbe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a12      	ldr	r2, [pc, #72]	@ (80041a0 <TIM_Base_SetConfig+0xfc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0xbe>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a11      	ldr	r2, [pc, #68]	@ (80041a4 <TIM_Base_SetConfig+0x100>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d103      	bne.n	800416a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2201      	movs	r2, #1
 8004182:	4393      	bics	r3, r2
 8004184:	001a      	movs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]
  }
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40002000 	.word	0x40002000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800
 80041a8:	fffffcff 	.word	0xfffffcff

080041ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4393      	bics	r3, r2
 80041c4:	001a      	movs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004294 <TIM_OC1_SetConfig+0xe8>)
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2203      	movs	r2, #3
 80041e2:	4393      	bics	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2202      	movs	r2, #2
 80041f4:	4393      	bics	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <TIM_OC1_SetConfig+0xec>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_OC1_SetConfig+0x6e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a23      	ldr	r2, [pc, #140]	@ (800429c <TIM_OC1_SetConfig+0xf0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC1_SetConfig+0x6e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	@ (80042a0 <TIM_OC1_SetConfig+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2208      	movs	r2, #8
 800421e:	4393      	bics	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2204      	movs	r2, #4
 8004230:	4393      	bics	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <TIM_OC1_SetConfig+0xec>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC1_SetConfig+0xa0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a17      	ldr	r2, [pc, #92]	@ (800429c <TIM_OC1_SetConfig+0xf0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC1_SetConfig+0xa0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <TIM_OC1_SetConfig+0xf4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d111      	bne.n	8004270 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4a15      	ldr	r2, [pc, #84]	@ (80042a4 <TIM_OC1_SetConfig+0xf8>)
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4a14      	ldr	r2, [pc, #80]	@ (80042a8 <TIM_OC1_SetConfig+0xfc>)
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b006      	add	sp, #24
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	fffeff8f 	.word	0xfffeff8f
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40014400 	.word	0x40014400
 80042a0:	40014800 	.word	0x40014800
 80042a4:	fffffeff 	.word	0xfffffeff
 80042a8:	fffffdff 	.word	0xfffffdff

080042ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	2210      	movs	r2, #16
 80042c2:	4393      	bics	r3, r2
 80042c4:	001a      	movs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	@ (800438c <TIM_OC2_SetConfig+0xe0>)
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004390 <TIM_OC2_SetConfig+0xe4>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2220      	movs	r2, #32
 80042f6:	4393      	bics	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <TIM_OC2_SetConfig+0xe8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10d      	bne.n	800432a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2280      	movs	r2, #128	@ 0x80
 8004312:	4393      	bics	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2240      	movs	r2, #64	@ 0x40
 8004326:	4393      	bics	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a19      	ldr	r2, [pc, #100]	@ (8004394 <TIM_OC2_SetConfig+0xe8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_OC2_SetConfig+0x96>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a18      	ldr	r2, [pc, #96]	@ (8004398 <TIM_OC2_SetConfig+0xec>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC2_SetConfig+0x96>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a17      	ldr	r2, [pc, #92]	@ (800439c <TIM_OC2_SetConfig+0xf0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <TIM_OC2_SetConfig+0xf4>)
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4a15      	ldr	r2, [pc, #84]	@ (80043a4 <TIM_OC2_SetConfig+0xf8>)
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	46c0      	nop			@ (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b006      	add	sp, #24
 800438a:	bd80      	pop	{r7, pc}
 800438c:	feff8fff 	.word	0xfeff8fff
 8004390:	fffffcff 	.word	0xfffffcff
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800
 80043a0:	fffffbff 	.word	0xfffffbff
 80043a4:	fffff7ff 	.word	0xfffff7ff

080043a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4a31      	ldr	r2, [pc, #196]	@ (8004484 <TIM_OC3_SetConfig+0xdc>)
 80043be:	401a      	ands	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <TIM_OC3_SetConfig+0xe0>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2203      	movs	r2, #3
 80043dc:	4393      	bics	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4a27      	ldr	r2, [pc, #156]	@ (800448c <TIM_OC3_SetConfig+0xe4>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a23      	ldr	r2, [pc, #140]	@ (8004490 <TIM_OC3_SetConfig+0xe8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10d      	bne.n	8004422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4a22      	ldr	r2, [pc, #136]	@ (8004494 <TIM_OC3_SetConfig+0xec>)
 800440a:	4013      	ands	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <TIM_OC3_SetConfig+0xf0>)
 800441e:	4013      	ands	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1a      	ldr	r2, [pc, #104]	@ (8004490 <TIM_OC3_SetConfig+0xe8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <TIM_OC3_SetConfig+0x92>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1b      	ldr	r2, [pc, #108]	@ (800449c <TIM_OC3_SetConfig+0xf4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_OC3_SetConfig+0x92>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1a      	ldr	r2, [pc, #104]	@ (80044a0 <TIM_OC3_SetConfig+0xf8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d113      	bne.n	8004462 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4a19      	ldr	r2, [pc, #100]	@ (80044a4 <TIM_OC3_SetConfig+0xfc>)
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4a18      	ldr	r2, [pc, #96]	@ (80044a8 <TIM_OC3_SetConfig+0x100>)
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b006      	add	sp, #24
 8004482:	bd80      	pop	{r7, pc}
 8004484:	fffffeff 	.word	0xfffffeff
 8004488:	fffeff8f 	.word	0xfffeff8f
 800448c:	fffffdff 	.word	0xfffffdff
 8004490:	40012c00 	.word	0x40012c00
 8004494:	fffff7ff 	.word	0xfffff7ff
 8004498:	fffffbff 	.word	0xfffffbff
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800
 80044a4:	ffffefff 	.word	0xffffefff
 80044a8:	ffffdfff 	.word	0xffffdfff

080044ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4a24      	ldr	r2, [pc, #144]	@ (8004554 <TIM_OC4_SetConfig+0xa8>)
 80044c2:	401a      	ands	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a20      	ldr	r2, [pc, #128]	@ (8004558 <TIM_OC4_SetConfig+0xac>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <TIM_OC4_SetConfig+0xb0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <TIM_OC4_SetConfig+0xb4>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <TIM_OC4_SetConfig+0xb8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_OC4_SetConfig+0x70>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <TIM_OC4_SetConfig+0xbc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_OC4_SetConfig+0x70>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a15      	ldr	r2, [pc, #84]	@ (800456c <TIM_OC4_SetConfig+0xc0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d109      	bne.n	8004530 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <TIM_OC4_SetConfig+0xc4>)
 8004520:	4013      	ands	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b006      	add	sp, #24
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	ffffefff 	.word	0xffffefff
 8004558:	feff8fff 	.word	0xfeff8fff
 800455c:	fffffcff 	.word	0xfffffcff
 8004560:	ffffdfff 	.word	0xffffdfff
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	ffffbfff 	.word	0xffffbfff

08004574 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <TIM_OC5_SetConfig+0x9c>)
 800458a:	401a      	ands	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <TIM_OC5_SetConfig+0xa0>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <TIM_OC5_SetConfig+0xa4>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <TIM_OC5_SetConfig+0xa8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_OC5_SetConfig+0x66>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <TIM_OC5_SetConfig+0xac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC5_SetConfig+0x66>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a13      	ldr	r2, [pc, #76]	@ (8004624 <TIM_OC5_SetConfig+0xb0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d109      	bne.n	80045ee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004610 <TIM_OC5_SetConfig+0x9c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b006      	add	sp, #24
 800460e:	bd80      	pop	{r7, pc}
 8004610:	fffeffff 	.word	0xfffeffff
 8004614:	fffeff8f 	.word	0xfffeff8f
 8004618:	fffdffff 	.word	0xfffdffff
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800

08004628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a22      	ldr	r2, [pc, #136]	@ (80046c8 <TIM_OC6_SetConfig+0xa0>)
 800463e:	401a      	ands	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <TIM_OC6_SetConfig+0xa4>)
 8004654:	4013      	ands	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4a1a      	ldr	r2, [pc, #104]	@ (80046d0 <TIM_OC6_SetConfig+0xa8>)
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	051b      	lsls	r3, r3, #20
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <TIM_OC6_SetConfig+0xac>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC6_SetConfig+0x68>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <TIM_OC6_SetConfig+0xb0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC6_SetConfig+0x68>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <TIM_OC6_SetConfig+0xb4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <TIM_OC6_SetConfig+0xb8>)
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b006      	add	sp, #24
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	ffefffff 	.word	0xffefffff
 80046cc:	feff8fff 	.word	0xfeff8fff
 80046d0:	ffdfffff 	.word	0xffdfffff
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800
 80046e0:	fffbffff 	.word	0xfffbffff

080046e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	2201      	movs	r2, #1
 80046fe:	4393      	bics	r3, r2
 8004700:	001a      	movs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <TIM_TI1_SetConfig+0xa4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d008      	beq.n	8004726 <TIM_TI1_SetConfig+0x42>
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	2380      	movs	r3, #128	@ 0x80
 8004718:	05db      	lsls	r3, r3, #23
 800471a:	429a      	cmp	r2, r3
 800471c:	d003      	beq.n	8004726 <TIM_TI1_SetConfig+0x42>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a1a      	ldr	r2, [pc, #104]	@ (800478c <TIM_TI1_SetConfig+0xa8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <TIM_TI1_SetConfig+0x46>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <TIM_TI1_SetConfig+0x48>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2203      	movs	r2, #3
 8004734:	4393      	bics	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e003      	b.n	800474a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2201      	movs	r2, #1
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	22f0      	movs	r2, #240	@ 0xf0
 800474e:	4393      	bics	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	22ff      	movs	r2, #255	@ 0xff
 8004758:	4013      	ands	r3, r2
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	220a      	movs	r2, #10
 8004764:	4393      	bics	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	220a      	movs	r2, #10
 800476c:	4013      	ands	r3, r2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	46c0      	nop			@ (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b006      	add	sp, #24
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40000400 	.word	0x40000400

08004790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	2201      	movs	r2, #1
 80047a8:	4393      	bics	r3, r2
 80047aa:	001a      	movs	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	22f0      	movs	r2, #240	@ 0xf0
 80047ba:	4393      	bics	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	220a      	movs	r2, #10
 80047cc:	4393      	bics	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	46c0      	nop			@ (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b006      	add	sp, #24
 80047ea:	bd80      	pop	{r7, pc}

080047ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	2210      	movs	r2, #16
 8004806:	4393      	bics	r3, r2
 8004808:	001a      	movs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4a14      	ldr	r2, [pc, #80]	@ (8004868 <TIM_TI2_SetConfig+0x7c>)
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4a10      	ldr	r2, [pc, #64]	@ (800486c <TIM_TI2_SetConfig+0x80>)
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	22a0      	movs	r2, #160	@ 0xa0
 8004840:	4393      	bics	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	22a0      	movs	r2, #160	@ 0xa0
 800484a:	4013      	ands	r3, r2
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b006      	add	sp, #24
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	fffffcff 	.word	0xfffffcff
 800486c:	ffff0fff 	.word	0xffff0fff

08004870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	2210      	movs	r2, #16
 8004888:	4393      	bics	r3, r2
 800488a:	001a      	movs	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <TIM_TI2_ConfigInputStage+0x60>)
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	031b      	lsls	r3, r3, #12
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	22a0      	movs	r2, #160	@ 0xa0
 80048ac:	4393      	bics	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b006      	add	sp, #24
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	ffff0fff 	.word	0xffff0fff

080048d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4a17      	ldr	r2, [pc, #92]	@ (800494c <TIM_TI3_SetConfig+0x78>)
 80048ee:	401a      	ands	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2203      	movs	r2, #3
 80048fe:	4393      	bics	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	22f0      	movs	r2, #240	@ 0xf0
 800490e:	4393      	bics	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	22ff      	movs	r2, #255	@ 0xff
 8004918:	4013      	ands	r3, r2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4a0b      	ldr	r2, [pc, #44]	@ (8004950 <TIM_TI3_SetConfig+0x7c>)
 8004924:	4013      	ands	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	23a0      	movs	r3, #160	@ 0xa0
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4013      	ands	r3, r2
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b006      	add	sp, #24
 800494a:	bd80      	pop	{r7, pc}
 800494c:	fffffeff 	.word	0xfffffeff
 8004950:	fffff5ff 	.word	0xfffff5ff

08004954 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <TIM_TI4_SetConfig+0x7c>)
 800496e:	401a      	ands	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4a15      	ldr	r2, [pc, #84]	@ (80049d4 <TIM_TI4_SetConfig+0x80>)
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4a12      	ldr	r2, [pc, #72]	@ (80049d8 <TIM_TI4_SetConfig+0x84>)
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	031b      	lsls	r3, r3, #12
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <TIM_TI4_SetConfig+0x88>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	031a      	lsls	r2, r3, #12
 80049ae:	23a0      	movs	r3, #160	@ 0xa0
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	4013      	ands	r3, r2
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b006      	add	sp, #24
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	ffffefff 	.word	0xffffefff
 80049d4:	fffffcff 	.word	0xfffffcff
 80049d8:	ffff0fff 	.word	0xffff0fff
 80049dc:	ffff5fff 	.word	0xffff5fff

080049e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a08      	ldr	r2, [pc, #32]	@ (8004a14 <TIM_ITRx_SetConfig+0x34>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	2207      	movs	r2, #7
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	609a      	str	r2, [r3, #8]
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	ffcfff8f 	.word	0xffcfff8f

08004a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4a09      	ldr	r2, [pc, #36]	@ (8004a54 <TIM_ETR_SetConfig+0x3c>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	609a      	str	r2, [r3, #8]
}
 8004a4c:	46c0      	nop			@ (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b006      	add	sp, #24
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	ffff00ff 	.word	0xffff00ff

08004a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	223c      	movs	r2, #60	@ 0x3c
 8004a66:	5c9b      	ldrb	r3, [r3, r2]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e050      	b.n	8004b12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	223c      	movs	r2, #60	@ 0x3c
 8004a74:	2101      	movs	r1, #1
 8004a76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	223d      	movs	r2, #61	@ 0x3d
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a21      	ldr	r2, [pc, #132]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a20      	ldr	r2, [pc, #128]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2270      	movs	r2, #112	@ 0x70
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00a      	beq.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	05db      	lsls	r3, r3, #23
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d004      	beq.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a10      	ldr	r2, [pc, #64]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d10c      	bne.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2280      	movs	r2, #128	@ 0x80
 8004aea:	4393      	bics	r3, r2
 8004aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	223d      	movs	r2, #61	@ 0x3d
 8004b04:	2101      	movs	r1, #1
 8004b06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	223c      	movs	r2, #60	@ 0x3c
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	ff0fffff 	.word	0xff0fffff
 8004b24:	40000400 	.word	0x40000400

08004b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	223c      	movs	r2, #60	@ 0x3c
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e06f      	b.n	8004c24 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	223c      	movs	r2, #60	@ 0x3c
 8004b48:	2101      	movs	r1, #1
 8004b4a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	22ff      	movs	r2, #255	@ 0xff
 8004b50:	4393      	bics	r3, r2
 8004b52:	001a      	movs	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004b60:	401a      	ands	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a30      	ldr	r2, [pc, #192]	@ (8004c30 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004b6e:	401a      	ands	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a2b      	ldr	r2, [pc, #172]	@ (8004c38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a29      	ldr	r2, [pc, #164]	@ (8004c3c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004b98:	401a      	ands	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a24      	ldr	r2, [pc, #144]	@ (8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a21      	ldr	r2, [pc, #132]	@ (8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c4c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d11c      	bne.n	8004c12 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004bdc:	401a      	ands	r2, r3
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	051b      	lsls	r3, r3, #20
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a1a      	ldr	r2, [pc, #104]	@ (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004bec:	401a      	ands	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004c08:	401a      	ands	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	223c      	movs	r2, #60	@ 0x3c
 8004c1e:	2100      	movs	r1, #0
 8004c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b004      	add	sp, #16
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	fffffcff 	.word	0xfffffcff
 8004c30:	fffffbff 	.word	0xfffffbff
 8004c34:	fffff7ff 	.word	0xfffff7ff
 8004c38:	ffffefff 	.word	0xffffefff
 8004c3c:	ffffdfff 	.word	0xffffdfff
 8004c40:	ffffbfff 	.word	0xffffbfff
 8004c44:	fff0ffff 	.word	0xfff0ffff
 8004c48:	efffffff 	.word	0xefffffff
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	ff0fffff 	.word	0xff0fffff
 8004c54:	feffffff 	.word	0xfeffffff
 8004c58:	fdffffff 	.word	0xfdffffff
 8004c5c:	dfffffff 	.word	0xdfffffff

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	46c0      	nop			@ (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e046      	b.n	8004d30 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2288      	movs	r2, #136	@ 0x88
 8004ca6:	589b      	ldr	r3, [r3, r2]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d107      	bne.n	8004cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2284      	movs	r2, #132	@ 0x84
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7fc fb1e 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2288      	movs	r2, #136	@ 0x88
 8004cc0:	2124      	movs	r1, #36	@ 0x24
 8004cc2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2101      	movs	r1, #1
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 faa4 	bl	800522c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 f828 	bl	8004d3c <UART_SetConfig>
 8004cec:	0003      	movs	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e01c      	b.n	8004d30 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	490d      	ldr	r1, [pc, #52]	@ (8004d38 <HAL_UART_Init+0xa8>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	212a      	movs	r1, #42	@ 0x2a
 8004d12:	438a      	bics	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 fb33 	bl	8005394 <UART_CheckIdleState>
 8004d2e:	0003      	movs	r3, r0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	ffffb7ff 	.word	0xffffb7ff

08004d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b5b0      	push	{r4, r5, r7, lr}
 8004d3e:	b090      	sub	sp, #64	@ 0x40
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d44:	231a      	movs	r3, #26
 8004d46:	2220      	movs	r2, #32
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	19db      	adds	r3, r3, r7
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4ac4      	ldr	r2, [pc, #784]	@ (8005080 <UART_SetConfig+0x344>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4abf      	ldr	r2, [pc, #764]	@ (8005084 <UART_SetConfig+0x348>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	0018      	movs	r0, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	68d9      	ldr	r1, [r3, #12]
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	0003      	movs	r3, r0
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4ab9      	ldr	r2, [pc, #740]	@ (8005088 <UART_SetConfig+0x34c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dae:	4313      	orrs	r3, r2
 8004db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4ab4      	ldr	r2, [pc, #720]	@ (800508c <UART_SetConfig+0x350>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	220f      	movs	r2, #15
 8004dd0:	4393      	bics	r3, r2
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	0003      	movs	r3, r0
 8004dde:	430b      	orrs	r3, r1
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4aaa      	ldr	r2, [pc, #680]	@ (8005090 <UART_SetConfig+0x354>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d131      	bne.n	8004e50 <UART_SetConfig+0x114>
 8004dec:	4ba9      	ldr	r3, [pc, #676]	@ (8005094 <UART_SetConfig+0x358>)
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	2203      	movs	r2, #3
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d01d      	beq.n	8004e34 <UART_SetConfig+0xf8>
 8004df8:	d823      	bhi.n	8004e42 <UART_SetConfig+0x106>
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d00c      	beq.n	8004e18 <UART_SetConfig+0xdc>
 8004dfe:	d820      	bhi.n	8004e42 <UART_SetConfig+0x106>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <UART_SetConfig+0xce>
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d00e      	beq.n	8004e26 <UART_SetConfig+0xea>
 8004e08:	e01b      	b.n	8004e42 <UART_SetConfig+0x106>
 8004e0a:	231b      	movs	r3, #27
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	19db      	adds	r3, r3, r7
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e071      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004e18:	231b      	movs	r3, #27
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	2202      	movs	r2, #2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e06a      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004e26:	231b      	movs	r3, #27
 8004e28:	2220      	movs	r2, #32
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	19db      	adds	r3, r3, r7
 8004e2e:	2204      	movs	r2, #4
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e063      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004e34:	231b      	movs	r3, #27
 8004e36:	2220      	movs	r2, #32
 8004e38:	189b      	adds	r3, r3, r2
 8004e3a:	19db      	adds	r3, r3, r7
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e05c      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004e42:	231b      	movs	r3, #27
 8004e44:	2220      	movs	r2, #32
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	19db      	adds	r3, r3, r7
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e055      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a90      	ldr	r2, [pc, #576]	@ (8005098 <UART_SetConfig+0x35c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d106      	bne.n	8004e68 <UART_SetConfig+0x12c>
 8004e5a:	231b      	movs	r3, #27
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	19db      	adds	r3, r3, r7
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e049      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a86      	ldr	r2, [pc, #536]	@ (8005088 <UART_SetConfig+0x34c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d13e      	bne.n	8004ef0 <UART_SetConfig+0x1b4>
 8004e72:	4b88      	ldr	r3, [pc, #544]	@ (8005094 <UART_SetConfig+0x358>)
 8004e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e76:	23c0      	movs	r3, #192	@ 0xc0
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	22c0      	movs	r2, #192	@ 0xc0
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d027      	beq.n	8004ed4 <UART_SetConfig+0x198>
 8004e84:	22c0      	movs	r2, #192	@ 0xc0
 8004e86:	0112      	lsls	r2, r2, #4
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d82a      	bhi.n	8004ee2 <UART_SetConfig+0x1a6>
 8004e8c:	2280      	movs	r2, #128	@ 0x80
 8004e8e:	0112      	lsls	r2, r2, #4
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d011      	beq.n	8004eb8 <UART_SetConfig+0x17c>
 8004e94:	2280      	movs	r2, #128	@ 0x80
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d822      	bhi.n	8004ee2 <UART_SetConfig+0x1a6>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <UART_SetConfig+0x16e>
 8004ea0:	2280      	movs	r2, #128	@ 0x80
 8004ea2:	00d2      	lsls	r2, r2, #3
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <UART_SetConfig+0x18a>
 8004ea8:	e01b      	b.n	8004ee2 <UART_SetConfig+0x1a6>
 8004eaa:	231b      	movs	r3, #27
 8004eac:	2220      	movs	r2, #32
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	19db      	adds	r3, r3, r7
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e021      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004eb8:	231b      	movs	r3, #27
 8004eba:	2220      	movs	r2, #32
 8004ebc:	189b      	adds	r3, r3, r2
 8004ebe:	19db      	adds	r3, r3, r7
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e01a      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004ec6:	231b      	movs	r3, #27
 8004ec8:	2220      	movs	r2, #32
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	19db      	adds	r3, r3, r7
 8004ece:	2204      	movs	r2, #4
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e013      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004ed4:	231b      	movs	r3, #27
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	19db      	adds	r3, r3, r7
 8004edc:	2208      	movs	r2, #8
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e00c      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004ee2:	231b      	movs	r3, #27
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	19db      	adds	r3, r3, r7
 8004eea:	2210      	movs	r2, #16
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e005      	b.n	8004efc <UART_SetConfig+0x1c0>
 8004ef0:	231b      	movs	r3, #27
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	19db      	adds	r3, r3, r7
 8004ef8:	2210      	movs	r2, #16
 8004efa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a61      	ldr	r2, [pc, #388]	@ (8005088 <UART_SetConfig+0x34c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d000      	beq.n	8004f08 <UART_SetConfig+0x1cc>
 8004f06:	e092      	b.n	800502e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f08:	231b      	movs	r3, #27
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	189b      	adds	r3, r3, r2
 8004f0e:	19db      	adds	r3, r3, r7
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d015      	beq.n	8004f42 <UART_SetConfig+0x206>
 8004f16:	dc18      	bgt.n	8004f4a <UART_SetConfig+0x20e>
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d00d      	beq.n	8004f38 <UART_SetConfig+0x1fc>
 8004f1c:	dc15      	bgt.n	8004f4a <UART_SetConfig+0x20e>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <UART_SetConfig+0x1ec>
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d005      	beq.n	8004f32 <UART_SetConfig+0x1f6>
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7fe f9aa 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f30:	e014      	b.n	8004f5c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f32:	4b5a      	ldr	r3, [pc, #360]	@ (800509c <UART_SetConfig+0x360>)
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f36:	e011      	b.n	8004f5c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f38:	f7fe f916 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f40:	e00c      	b.n	8004f5c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	2380      	movs	r3, #128	@ 0x80
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f48:	e008      	b.n	8004f5c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f4e:	231a      	movs	r3, #26
 8004f50:	2220      	movs	r2, #32
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	19db      	adds	r3, r3, r7
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
        break;
 8004f5a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d100      	bne.n	8004f64 <UART_SetConfig+0x228>
 8004f62:	e147      	b.n	80051f4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f68:	4b4d      	ldr	r3, [pc, #308]	@ (80050a0 <UART_SetConfig+0x364>)
 8004f6a:	0052      	lsls	r2, r2, #1
 8004f6c:	5ad3      	ldrh	r3, [r2, r3]
 8004f6e:	0019      	movs	r1, r3
 8004f70:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f72:	f7fb f8c7 	bl	8000104 <__udivsi3>
 8004f76:	0003      	movs	r3, r0
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	0013      	movs	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d305      	bcc.n	8004f96 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d906      	bls.n	8004fa4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004f96:	231a      	movs	r3, #26
 8004f98:	2220      	movs	r2, #32
 8004f9a:	189b      	adds	r3, r3, r2
 8004f9c:	19db      	adds	r3, r3, r7
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e127      	b.n	80051f4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80050a0 <UART_SetConfig+0x364>)
 8004fb2:	0052      	lsls	r2, r2, #1
 8004fb4:	5ad3      	ldrh	r3, [r2, r3]
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	69b8      	ldr	r0, [r7, #24]
 8004fc2:	69f9      	ldr	r1, [r7, #28]
 8004fc4:	f7fb f92a 	bl	800021c <__aeabi_uldivmod>
 8004fc8:	0002      	movs	r2, r0
 8004fca:	000b      	movs	r3, r1
 8004fcc:	0e11      	lsrs	r1, r2, #24
 8004fce:	021d      	lsls	r5, r3, #8
 8004fd0:	430d      	orrs	r5, r1
 8004fd2:	0214      	lsls	r4, r2, #8
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68b8      	ldr	r0, [r7, #8]
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	1900      	adds	r0, r0, r4
 8004fe6:	4169      	adcs	r1, r5
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f7fb f911 	bl	800021c <__aeabi_uldivmod>
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	000b      	movs	r3, r1
 8004ffe:	0013      	movs	r3, r2
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005004:	23c0      	movs	r3, #192	@ 0xc0
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	429a      	cmp	r2, r3
 800500a:	d309      	bcc.n	8005020 <UART_SetConfig+0x2e4>
 800500c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	035b      	lsls	r3, r3, #13
 8005012:	429a      	cmp	r2, r3
 8005014:	d204      	bcs.n	8005020 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	e0e9      	b.n	80051f4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005020:	231a      	movs	r3, #26
 8005022:	2220      	movs	r2, #32
 8005024:	189b      	adds	r3, r3, r2
 8005026:	19db      	adds	r3, r3, r7
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e0e2      	b.n	80051f4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	2380      	movs	r3, #128	@ 0x80
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	429a      	cmp	r2, r3
 8005038:	d000      	beq.n	800503c <UART_SetConfig+0x300>
 800503a:	e083      	b.n	8005144 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800503c:	231b      	movs	r3, #27
 800503e:	2220      	movs	r2, #32
 8005040:	189b      	adds	r3, r3, r2
 8005042:	19db      	adds	r3, r3, r7
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b08      	cmp	r3, #8
 8005048:	d015      	beq.n	8005076 <UART_SetConfig+0x33a>
 800504a:	dc2b      	bgt.n	80050a4 <UART_SetConfig+0x368>
 800504c:	2b04      	cmp	r3, #4
 800504e:	d00d      	beq.n	800506c <UART_SetConfig+0x330>
 8005050:	dc28      	bgt.n	80050a4 <UART_SetConfig+0x368>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <UART_SetConfig+0x320>
 8005056:	2b02      	cmp	r3, #2
 8005058:	d005      	beq.n	8005066 <UART_SetConfig+0x32a>
 800505a:	e023      	b.n	80050a4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7fe f910 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8005060:	0003      	movs	r3, r0
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005064:	e027      	b.n	80050b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <UART_SetConfig+0x360>)
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800506a:	e024      	b.n	80050b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506c:	f7fe f87c 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8005070:	0003      	movs	r3, r0
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005074:	e01f      	b.n	80050b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800507c:	e01b      	b.n	80050b6 <UART_SetConfig+0x37a>
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	cfff69f3 	.word	0xcfff69f3
 8005084:	ffffcfff 	.word	0xffffcfff
 8005088:	40008000 	.word	0x40008000
 800508c:	11fff4ff 	.word	0x11fff4ff
 8005090:	40013800 	.word	0x40013800
 8005094:	40021000 	.word	0x40021000
 8005098:	40004400 	.word	0x40004400
 800509c:	00f42400 	.word	0x00f42400
 80050a0:	0800580c 	.word	0x0800580c
      default:
        pclk = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80050a8:	231a      	movs	r3, #26
 80050aa:	2220      	movs	r2, #32
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	19db      	adds	r3, r3, r7
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
        break;
 80050b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d100      	bne.n	80050be <UART_SetConfig+0x382>
 80050bc:	e09a      	b.n	80051f4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050c2:	4b58      	ldr	r3, [pc, #352]	@ (8005224 <UART_SetConfig+0x4e8>)
 80050c4:	0052      	lsls	r2, r2, #1
 80050c6:	5ad3      	ldrh	r3, [r2, r3]
 80050c8:	0019      	movs	r1, r3
 80050ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80050cc:	f7fb f81a 	bl	8000104 <__udivsi3>
 80050d0:	0003      	movs	r3, r0
 80050d2:	005a      	lsls	r2, r3, #1
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	18d2      	adds	r2, r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	0019      	movs	r1, r3
 80050e2:	0010      	movs	r0, r2
 80050e4:	f7fb f80e 	bl	8000104 <__udivsi3>
 80050e8:	0003      	movs	r3, r0
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d921      	bls.n	8005136 <UART_SetConfig+0x3fa>
 80050f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	025b      	lsls	r3, r3, #9
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d21c      	bcs.n	8005136 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	b29a      	uxth	r2, r3
 8005100:	200e      	movs	r0, #14
 8005102:	2420      	movs	r4, #32
 8005104:	1903      	adds	r3, r0, r4
 8005106:	19db      	adds	r3, r3, r7
 8005108:	210f      	movs	r1, #15
 800510a:	438a      	bics	r2, r1
 800510c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	2207      	movs	r2, #7
 8005116:	4013      	ands	r3, r2
 8005118:	b299      	uxth	r1, r3
 800511a:	1903      	adds	r3, r0, r4
 800511c:	19db      	adds	r3, r3, r7
 800511e:	1902      	adds	r2, r0, r4
 8005120:	19d2      	adds	r2, r2, r7
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	1902      	adds	r2, r0, r4
 800512e:	19d2      	adds	r2, r2, r7
 8005130:	8812      	ldrh	r2, [r2, #0]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e05e      	b.n	80051f4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005136:	231a      	movs	r3, #26
 8005138:	2220      	movs	r2, #32
 800513a:	189b      	adds	r3, r3, r2
 800513c:	19db      	adds	r3, r3, r7
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e057      	b.n	80051f4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005144:	231b      	movs	r3, #27
 8005146:	2220      	movs	r2, #32
 8005148:	189b      	adds	r3, r3, r2
 800514a:	19db      	adds	r3, r3, r7
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b08      	cmp	r3, #8
 8005150:	d015      	beq.n	800517e <UART_SetConfig+0x442>
 8005152:	dc18      	bgt.n	8005186 <UART_SetConfig+0x44a>
 8005154:	2b04      	cmp	r3, #4
 8005156:	d00d      	beq.n	8005174 <UART_SetConfig+0x438>
 8005158:	dc15      	bgt.n	8005186 <UART_SetConfig+0x44a>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <UART_SetConfig+0x428>
 800515e:	2b02      	cmp	r3, #2
 8005160:	d005      	beq.n	800516e <UART_SetConfig+0x432>
 8005162:	e010      	b.n	8005186 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7fe f88c 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8005168:	0003      	movs	r3, r0
 800516a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800516c:	e014      	b.n	8005198 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800516e:	4b2e      	ldr	r3, [pc, #184]	@ (8005228 <UART_SetConfig+0x4ec>)
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005172:	e011      	b.n	8005198 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005174:	f7fd fff8 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8005178:	0003      	movs	r3, r0
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800517c:	e00c      	b.n	8005198 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517e:	2380      	movs	r3, #128	@ 0x80
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005184:	e008      	b.n	8005198 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800518a:	231a      	movs	r3, #26
 800518c:	2220      	movs	r2, #32
 800518e:	189b      	adds	r3, r3, r2
 8005190:	19db      	adds	r3, r3, r7
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
        break;
 8005196:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519a:	2b00      	cmp	r3, #0
 800519c:	d02a      	beq.n	80051f4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051a2:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <UART_SetConfig+0x4e8>)
 80051a4:	0052      	lsls	r2, r2, #1
 80051a6:	5ad3      	ldrh	r3, [r2, r3]
 80051a8:	0019      	movs	r1, r3
 80051aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80051ac:	f7fa ffaa 	bl	8000104 <__udivsi3>
 80051b0:	0003      	movs	r3, r0
 80051b2:	001a      	movs	r2, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	18d2      	adds	r2, r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0019      	movs	r1, r3
 80051c2:	0010      	movs	r0, r2
 80051c4:	f7fa ff9e 	bl	8000104 <__udivsi3>
 80051c8:	0003      	movs	r3, r0
 80051ca:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	d90a      	bls.n	80051e8 <UART_SetConfig+0x4ac>
 80051d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	025b      	lsls	r3, r3, #9
 80051d8:	429a      	cmp	r2, r3
 80051da:	d205      	bcs.n	80051e8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60da      	str	r2, [r3, #12]
 80051e6:	e005      	b.n	80051f4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80051e8:	231a      	movs	r3, #26
 80051ea:	2220      	movs	r2, #32
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	19db      	adds	r3, r3, r7
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	226a      	movs	r2, #106	@ 0x6a
 80051f8:	2101      	movs	r1, #1
 80051fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	2268      	movs	r2, #104	@ 0x68
 8005200:	2101      	movs	r1, #1
 8005202:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	2200      	movs	r2, #0
 8005208:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	2200      	movs	r2, #0
 800520e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005210:	231a      	movs	r3, #26
 8005212:	2220      	movs	r2, #32
 8005214:	189b      	adds	r3, r3, r2
 8005216:	19db      	adds	r3, r3, r7
 8005218:	781b      	ldrb	r3, [r3, #0]
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b010      	add	sp, #64	@ 0x40
 8005220:	bdb0      	pop	{r4, r5, r7, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	0800580c 	.word	0x0800580c
 8005228:	00f42400 	.word	0x00f42400

0800522c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	2208      	movs	r2, #8
 800523a:	4013      	ands	r3, r2
 800523c:	d00b      	beq.n	8005256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a4a      	ldr	r2, [pc, #296]	@ (8005370 <UART_AdvFeatureConfig+0x144>)
 8005246:	4013      	ands	r3, r2
 8005248:	0019      	movs	r1, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	2201      	movs	r2, #1
 800525c:	4013      	ands	r3, r2
 800525e:	d00b      	beq.n	8005278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4a43      	ldr	r2, [pc, #268]	@ (8005374 <UART_AdvFeatureConfig+0x148>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	2202      	movs	r2, #2
 800527e:	4013      	ands	r3, r2
 8005280:	d00b      	beq.n	800529a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a3b      	ldr	r2, [pc, #236]	@ (8005378 <UART_AdvFeatureConfig+0x14c>)
 800528a:	4013      	ands	r3, r2
 800528c:	0019      	movs	r1, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	2204      	movs	r2, #4
 80052a0:	4013      	ands	r3, r2
 80052a2:	d00b      	beq.n	80052bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4a34      	ldr	r2, [pc, #208]	@ (800537c <UART_AdvFeatureConfig+0x150>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	0019      	movs	r1, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	2210      	movs	r2, #16
 80052c2:	4013      	ands	r3, r2
 80052c4:	d00b      	beq.n	80052de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005380 <UART_AdvFeatureConfig+0x154>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	2220      	movs	r2, #32
 80052e4:	4013      	ands	r3, r2
 80052e6:	d00b      	beq.n	8005300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	4a25      	ldr	r2, [pc, #148]	@ (8005384 <UART_AdvFeatureConfig+0x158>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	0019      	movs	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	2240      	movs	r2, #64	@ 0x40
 8005306:	4013      	ands	r3, r2
 8005308:	d01d      	beq.n	8005346 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <UART_AdvFeatureConfig+0x15c>)
 8005312:	4013      	ands	r3, r2
 8005314:	0019      	movs	r1, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005326:	2380      	movs	r3, #128	@ 0x80
 8005328:	035b      	lsls	r3, r3, #13
 800532a:	429a      	cmp	r2, r3
 800532c:	d10b      	bne.n	8005346 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a15      	ldr	r2, [pc, #84]	@ (800538c <UART_AdvFeatureConfig+0x160>)
 8005336:	4013      	ands	r3, r2
 8005338:	0019      	movs	r1, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	4013      	ands	r3, r2
 800534e:	d00b      	beq.n	8005368 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4a0e      	ldr	r2, [pc, #56]	@ (8005390 <UART_AdvFeatureConfig+0x164>)
 8005358:	4013      	ands	r3, r2
 800535a:	0019      	movs	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}
 8005370:	ffff7fff 	.word	0xffff7fff
 8005374:	fffdffff 	.word	0xfffdffff
 8005378:	fffeffff 	.word	0xfffeffff
 800537c:	fffbffff 	.word	0xfffbffff
 8005380:	ffffefff 	.word	0xffffefff
 8005384:	ffffdfff 	.word	0xffffdfff
 8005388:	ffefffff 	.word	0xffefffff
 800538c:	ff9fffff 	.word	0xff9fffff
 8005390:	fff7ffff 	.word	0xfff7ffff

08005394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b092      	sub	sp, #72	@ 0x48
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2290      	movs	r2, #144	@ 0x90
 80053a0:	2100      	movs	r1, #0
 80053a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a4:	f7fc f96e 	bl	8001684 <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2208      	movs	r2, #8
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d12d      	bne.n	8005416 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053bc:	2280      	movs	r2, #128	@ 0x80
 80053be:	0391      	lsls	r1, r2, #14
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4a47      	ldr	r2, [pc, #284]	@ (80054e0 <UART_CheckIdleState+0x14c>)
 80053c4:	9200      	str	r2, [sp, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f000 f88e 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d022      	beq.n	8005416 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d0:	f3ef 8310 	mrs	r3, PRIMASK
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053da:	2301      	movs	r3, #1
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	f383 8810 	msr	PRIMASK, r3
}
 80053e4:	46c0      	nop			@ (mov r8, r8)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2180      	movs	r1, #128	@ 0x80
 80053f2:	438a      	bics	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2288      	movs	r2, #136	@ 0x88
 8005406:	2120      	movs	r1, #32
 8005408:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2284      	movs	r2, #132	@ 0x84
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e060      	b.n	80054d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2204      	movs	r2, #4
 800541e:	4013      	ands	r3, r2
 8005420:	2b04      	cmp	r3, #4
 8005422:	d146      	bne.n	80054b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005426:	2280      	movs	r2, #128	@ 0x80
 8005428:	03d1      	lsls	r1, r2, #15
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4a2c      	ldr	r2, [pc, #176]	@ (80054e0 <UART_CheckIdleState+0x14c>)
 800542e:	9200      	str	r2, [sp, #0]
 8005430:	2200      	movs	r2, #0
 8005432:	f000 f859 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 8005436:	1e03      	subs	r3, r0, #0
 8005438:	d03b      	beq.n	80054b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543a:	f3ef 8310 	mrs	r3, PRIMASK
 800543e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005440:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
 8005444:	2301      	movs	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4922      	ldr	r1, [pc, #136]	@ (80054e4 <UART_CheckIdleState+0x150>)
 800545c:	400a      	ands	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546c:	f3ef 8310 	mrs	r3, PRIMASK
 8005470:	61bb      	str	r3, [r7, #24]
  return(result);
 8005472:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	633b      	str	r3, [r7, #48]	@ 0x30
 8005476:	2301      	movs	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	438a      	bics	r2, r1
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f383 8810 	msr	PRIMASK, r3
}
 800549c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	228c      	movs	r2, #140	@ 0x8c
 80054a2:	2120      	movs	r1, #32
 80054a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2284      	movs	r2, #132	@ 0x84
 80054aa:	2100      	movs	r1, #0
 80054ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e012      	b.n	80054d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2288      	movs	r2, #136	@ 0x88
 80054b6:	2120      	movs	r1, #32
 80054b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	228c      	movs	r2, #140	@ 0x8c
 80054be:	2120      	movs	r1, #32
 80054c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2284      	movs	r2, #132	@ 0x84
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b010      	add	sp, #64	@ 0x40
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	01ffffff 	.word	0x01ffffff
 80054e4:	fffffedf 	.word	0xfffffedf

080054e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	1dfb      	adds	r3, r7, #7
 80054f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f8:	e051      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	3301      	adds	r3, #1
 80054fe:	d04e      	beq.n	800559e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005500:	f7fc f8c0 	bl	8001684 <HAL_GetTick>
 8005504:	0002      	movs	r2, r0
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e051      	b.n	80055be <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2204      	movs	r2, #4
 8005522:	4013      	ands	r3, r2
 8005524:	d03b      	beq.n	800559e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b80      	cmp	r3, #128	@ 0x80
 800552a:	d038      	beq.n	800559e <UART_WaitOnFlagUntilTimeout+0xb6>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b40      	cmp	r3, #64	@ 0x40
 8005530:	d035      	beq.n	800559e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2208      	movs	r2, #8
 800553a:	4013      	ands	r3, r2
 800553c:	2b08      	cmp	r3, #8
 800553e:	d111      	bne.n	8005564 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2208      	movs	r2, #8
 8005546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	0018      	movs	r0, r3
 800554c:	f000 f83c 	bl	80055c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2290      	movs	r2, #144	@ 0x90
 8005554:	2108      	movs	r1, #8
 8005556:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2284      	movs	r2, #132	@ 0x84
 800555c:	2100      	movs	r1, #0
 800555e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e02c      	b.n	80055be <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	401a      	ands	r2, r3
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	429a      	cmp	r2, r3
 8005576:	d112      	bne.n	800559e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2280      	movs	r2, #128	@ 0x80
 800557e:	0112      	lsls	r2, r2, #4
 8005580:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 f81f 	bl	80055c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2290      	movs	r2, #144	@ 0x90
 800558e:	2120      	movs	r1, #32
 8005590:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2284      	movs	r2, #132	@ 0x84
 8005596:	2100      	movs	r1, #0
 8005598:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e00f      	b.n	80055be <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	425a      	negs	r2, r3
 80055ae:	4153      	adcs	r3, r2
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	001a      	movs	r2, r3
 80055b4:	1dfb      	adds	r3, r7, #7
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d09e      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b004      	add	sp, #16
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	@ 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d0:	f3ef 8310 	mrs	r3, PRIMASK
 80055d4:	617b      	str	r3, [r7, #20]
  return(result);
 80055d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055da:	2301      	movs	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f383 8810 	msr	PRIMASK, r3
}
 80055e4:	46c0      	nop			@ (mov r8, r8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4926      	ldr	r1, [pc, #152]	@ (800568c <UART_EndRxTransfer+0xc4>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005602:	f3ef 8310 	mrs	r3, PRIMASK
 8005606:	623b      	str	r3, [r7, #32]
  return(result);
 8005608:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30
 800560c:	2301      	movs	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	f383 8810 	msr	PRIMASK, r3
}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	491b      	ldr	r1, [pc, #108]	@ (8005690 <UART_EndRxTransfer+0xc8>)
 8005624:	400a      	ands	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	f383 8810 	msr	PRIMASK, r3
}
 8005632:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d118      	bne.n	800566e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563c:	f3ef 8310 	mrs	r3, PRIMASK
 8005640:	60bb      	str	r3, [r7, #8]
  return(result);
 8005642:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005646:	2301      	movs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2110      	movs	r1, #16
 800565e:	438a      	bics	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f383 8810 	msr	PRIMASK, r3
}
 800566c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	228c      	movs	r2, #140	@ 0x8c
 8005672:	2120      	movs	r1, #32
 8005674:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b00e      	add	sp, #56	@ 0x38
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			@ (mov r8, r8)
 800568c:	fffffedf 	.word	0xfffffedf
 8005690:	effffffe 	.word	0xeffffffe

08005694 <memset>:
 8005694:	0003      	movs	r3, r0
 8005696:	1882      	adds	r2, r0, r2
 8005698:	4293      	cmp	r3, r2
 800569a:	d100      	bne.n	800569e <memset+0xa>
 800569c:	4770      	bx	lr
 800569e:	7019      	strb	r1, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	e7f9      	b.n	8005698 <memset+0x4>

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	2600      	movs	r6, #0
 80056a8:	4c0c      	ldr	r4, [pc, #48]	@ (80056dc <__libc_init_array+0x38>)
 80056aa:	4d0d      	ldr	r5, [pc, #52]	@ (80056e0 <__libc_init_array+0x3c>)
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	2600      	movs	r6, #0
 80056b6:	f000 f819 	bl	80056ec <_init>
 80056ba:	4c0a      	ldr	r4, [pc, #40]	@ (80056e4 <__libc_init_array+0x40>)
 80056bc:	4d0a      	ldr	r5, [pc, #40]	@ (80056e8 <__libc_init_array+0x44>)
 80056be:	1b64      	subs	r4, r4, r5
 80056c0:	10a4      	asrs	r4, r4, #2
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	00b3      	lsls	r3, r6, #2
 80056ca:	58eb      	ldr	r3, [r5, r3]
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	00b3      	lsls	r3, r6, #2
 80056d4:	58eb      	ldr	r3, [r5, r3]
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	0800582c 	.word	0x0800582c
 80056e0:	0800582c 	.word	0x0800582c
 80056e4:	08005830 	.word	0x08005830
 80056e8:	0800582c 	.word	0x0800582c

080056ec <_init>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr

080056f8 <_fini>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr
