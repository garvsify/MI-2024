
jhhhjjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005248  08005248  00006248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005370  08005370  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005374  08005374  00006374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005378  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  2000000c  08005384  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08005384  000075b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012868  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a2  00000000  00000000  0001989c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdf  00000000  00000000  0001cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170bf  00000000  00000000  0001d977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c34  00000000  00000000  00034a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ebb  00000000  00000000  0004766a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000e1568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e5168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005230 	.word	0x08005230

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005230 	.word	0x08005230

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 ff16 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f814 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fc22 	bl	8000c9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000458:	f000 f870 	bl	800053c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800045c:	f000 fbea 	bl	8000c34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000460:	f000 f982 	bl	8000768 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000464:	f000 f9fc 	bl	8000860 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000468:	f000 f8d4 	bl	8000614 <MX_TIM1_Init>
  MX_TIM14_Init();
 800046c:	f000 fa78 	bl	8000960 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000470:	f000 fac8 	bl	8000a04 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000474:	f000 fb52 	bl	8000b1c <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	e7fd      	b.n	8000478 <main+0x30>

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b093      	sub	sp, #76	@ 0x4c
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	2410      	movs	r4, #16
 8000484:	193b      	adds	r3, r7, r4
 8000486:	0018      	movs	r0, r3
 8000488:	2338      	movs	r3, #56	@ 0x38
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f004 fea3 	bl	80051d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000492:	003b      	movs	r3, r7
 8000494:	0018      	movs	r0, r3
 8000496:	2310      	movs	r3, #16
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f004 fe9c 	bl	80051d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 feb5 	bl	8002214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2202      	movs	r2, #2
 80004ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0052      	lsls	r2, r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2240      	movs	r2, #64	@ 0x40
 80004c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2202      	movs	r2, #2
 80004ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2202      	movs	r2, #2
 80004d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2208      	movs	r2, #8
 80004dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2280      	movs	r2, #128	@ 0x80
 80004e2:	0292      	lsls	r2, r2, #10
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	22c0      	movs	r2, #192	@ 0xc0
 80004ea:	04d2      	lsls	r2, r2, #19
 80004ec:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	0592      	lsls	r2, r2, #22
 80004f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fed7 	bl	80022ac <HAL_RCC_OscConfig>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000502:	f000 fc2d 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	003b      	movs	r3, r7
 8000508:	2207      	movs	r2, #7
 800050a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050c:	003b      	movs	r3, r7
 800050e:	2202      	movs	r2, #2
 8000510:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	003b      	movs	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000518:	003b      	movs	r3, r7
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	01d2      	lsls	r2, r2, #7
 800051e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000520:	003b      	movs	r3, r7
 8000522:	2102      	movs	r1, #2
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f9db 	bl	80028e0 <HAL_RCC_ClockConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800052e:	f000 fc17 	bl	8000d60 <Error_Handler>
  }
}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b013      	add	sp, #76	@ 0x4c
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	0018      	movs	r0, r3
 8000546:	230c      	movs	r3, #12
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f004 fe44 	bl	80051d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000550:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000552:	4a2f      	ldr	r2, [pc, #188]	@ (8000610 <MX_ADC1_Init+0xd4>)
 8000554:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	05d2      	lsls	r2, r2, #23
 800055c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055e:	4b2b      	ldr	r3, [pc, #172]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000564:	4b29      	ldr	r3, [pc, #164]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056a:	4b28      	ldr	r3, [pc, #160]	@ (800060c <MX_ADC1_Init+0xd0>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000570:	4b26      	ldr	r3, [pc, #152]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000572:	2204      	movs	r2, #4
 8000574:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000578:	2200      	movs	r2, #0
 800057a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <MX_ADC1_Init+0xd0>)
 800057e:	2200      	movs	r2, #0
 8000580:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <MX_ADC1_Init+0xd0>)
 800058a:	2201      	movs	r2, #1
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000590:	2220      	movs	r2, #32
 8000592:	2100      	movs	r1, #0
 8000594:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000596:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <MX_ADC1_Init+0xd0>)
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <MX_ADC1_Init+0xd0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005a4:	222c      	movs	r2, #44	@ 0x2c
 80005a6:	2100      	movs	r1, #0
 80005a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005aa:	4b18      	ldr	r3, [pc, #96]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	0152      	lsls	r2, r2, #5
 80005b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005c0:	223c      	movs	r2, #60	@ 0x3c
 80005c2:	2100      	movs	r1, #0
 80005c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 ffd8 	bl	8001584 <HAL_ADC_Init>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005d8:	f000 fbc2 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_ADC1_Init+0xd0>)
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f9bd 	bl	8001974 <HAL_ADC_ConfigChannel>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fbaf 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b004      	add	sp, #16
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	20000028 	.word	0x20000028
 8000610:	40012400 	.word	0x40012400

08000614 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b098      	sub	sp, #96	@ 0x60
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	2354      	movs	r3, #84	@ 0x54
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	230c      	movs	r3, #12
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f004 fdd7 	bl	80051d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	2338      	movs	r3, #56	@ 0x38
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	0018      	movs	r0, r3
 8000630:	231c      	movs	r3, #28
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f004 fdcf 	bl	80051d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	2334      	movs	r3, #52	@ 0x34
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f004 fdc8 	bl	80051d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000648:	4b44      	ldr	r3, [pc, #272]	@ (800075c <MX_TIM1_Init+0x148>)
 800064a:	4a45      	ldr	r2, [pc, #276]	@ (8000760 <MX_TIM1_Init+0x14c>)
 800064c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800064e:	4b43      	ldr	r3, [pc, #268]	@ (800075c <MX_TIM1_Init+0x148>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b41      	ldr	r3, [pc, #260]	@ (800075c <MX_TIM1_Init+0x148>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800065a:	4b40      	ldr	r3, [pc, #256]	@ (800075c <MX_TIM1_Init+0x148>)
 800065c:	4a41      	ldr	r2, [pc, #260]	@ (8000764 <MX_TIM1_Init+0x150>)
 800065e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000660:	4b3e      	ldr	r3, [pc, #248]	@ (800075c <MX_TIM1_Init+0x148>)
 8000662:	2280      	movs	r2, #128	@ 0x80
 8000664:	0052      	lsls	r2, r2, #1
 8000666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000668:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <MX_TIM1_Init+0x148>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066e:	4b3b      	ldr	r3, [pc, #236]	@ (800075c <MX_TIM1_Init+0x148>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000674:	4b39      	ldr	r3, [pc, #228]	@ (800075c <MX_TIM1_Init+0x148>)
 8000676:	0018      	movs	r0, r3
 8000678:	f002 fd2a 	bl	80030d0 <HAL_TIM_PWM_Init>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000680:	f000 fb6e 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	2154      	movs	r1, #84	@ 0x54
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	187a      	adds	r2, r7, r1
 800069a:	4b30      	ldr	r3, [pc, #192]	@ (800075c <MX_TIM1_Init+0x148>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 ff74 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006a8:	f000 fb5a 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ac:	2138      	movs	r1, #56	@ 0x38
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2260      	movs	r2, #96	@ 0x60
 80006b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006d2:	1879      	adds	r1, r7, r1
 80006d4:	4b21      	ldr	r3, [pc, #132]	@ (800075c <MX_TIM1_Init+0x148>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 fffb 	bl	80036d4 <HAL_TIM_PWM_ConfigChannel>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80006e2:	f000 fb3d 	bl	8000d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	0192      	lsls	r2, r2, #6
 800070a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2280      	movs	r2, #128	@ 0x80
 8000722:	0492      	lsls	r2, r2, #18
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000738:	1d3a      	adds	r2, r7, #4
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_TIM1_Init+0x148>)
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f003 ff8c 	bl	800465c <HAL_TIMEx_ConfigBreakDeadTime>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000748:	f000 fb0a 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <MX_TIM1_Init+0x148>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fc68 	bl	8001024 <HAL_TIM_MspPostInit>

}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b018      	add	sp, #96	@ 0x60
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000b0 	.word	0x200000b0
 8000760:	40012c00 	.word	0x40012c00
 8000764:	000003ff 	.word	0x000003ff

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	@ 0x30
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	2320      	movs	r3, #32
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	0018      	movs	r0, r3
 8000774:	2310      	movs	r3, #16
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f004 fd2d 	bl	80051d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	2314      	movs	r3, #20
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	0018      	movs	r0, r3
 8000784:	230c      	movs	r3, #12
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f004 fd25 	bl	80051d8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	0018      	movs	r0, r3
 8000792:	2310      	movs	r3, #16
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f004 fd1e 	bl	80051d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800079c:	4b2e      	ldr	r3, [pc, #184]	@ (8000858 <MX_TIM2_Init+0xf0>)
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	05d2      	lsls	r2, r2, #23
 80007a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 80007a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007a6:	223f      	movs	r2, #63	@ 0x3f
 80007a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 80007b0:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007b2:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <MX_TIM2_Init+0xf4>)
 80007b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80007b6:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fbae 	bl	8002f28 <HAL_TIM_Base_Init>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80007d0:	f000 fac6 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d4:	2120      	movs	r1, #32
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	0152      	lsls	r2, r2, #5
 80007dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f003 f875 	bl	80038d4 <HAL_TIM_ConfigClockSource>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007ee:	f000 fab7 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_TIM2_Init+0xf0>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fcd1 	bl	800319c <HAL_TIM_IC_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007fe:	f000 faaf 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2114      	movs	r1, #20
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	187a      	adds	r2, r7, r1
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_TIM2_Init+0xf0>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f003 feb8 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000820:	f000 fa9e 	bl	8000d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2202      	movs	r2, #2
 8000828:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	220f      	movs	r2, #15
 800083a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	1d39      	adds	r1, r7, #4
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_TIM2_Init+0xf0>)
 8000840:	2200      	movs	r2, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fea2 	bl	800358c <HAL_TIM_IC_ConfigChannel>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800084c:	f000 fa88 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b00c      	add	sp, #48	@ 0x30
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000016c 	.word	0x2000016c
 800085c:	001fffff 	.word	0x001fffff

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	@ 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	2328      	movs	r3, #40	@ 0x28
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	0018      	movs	r0, r3
 800086c:	2310      	movs	r3, #16
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f004 fcb1 	bl	80051d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	231c      	movs	r3, #28
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	0018      	movs	r0, r3
 800087c:	230c      	movs	r3, #12
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f004 fca9 	bl	80051d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	003b      	movs	r3, r7
 8000888:	0018      	movs	r0, r3
 800088a:	231c      	movs	r3, #28
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f004 fca2 	bl	80051d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_TIM3_Init+0xf0>)
 8000896:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <MX_TIM3_Init+0xf4>)
 8000898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_TIM3_Init+0xf0>)
 800089c:	4a2e      	ldr	r2, [pc, #184]	@ (8000958 <MX_TIM3_Init+0xf8>)
 800089e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008a8:	4a2c      	ldr	r2, [pc, #176]	@ (800095c <MX_TIM3_Init+0xfc>)
 80008aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ba:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fb33 	bl	8002f28 <HAL_TIM_Base_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80008c6:	f000 fa4b 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	2128      	movs	r1, #40	@ 0x28
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	0152      	lsls	r2, r2, #5
 80008d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008d4:	187a      	adds	r2, r7, r1
 80008d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fffa 	bl	80038d4 <HAL_TIM_ConfigClockSource>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80008e4:	f000 fa3c 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_TIM3_Init+0xf0>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fb82 	bl	8002ff4 <HAL_TIM_OC_Init>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008f4:	f000 fa34 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	211c      	movs	r1, #28
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000906:	187a      	adds	r2, r7, r1
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_TIM3_Init+0xf0>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f003 fe3d 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000916:	f000 fa23 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800091a:	003b      	movs	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000920:	003b      	movs	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000926:	003b      	movs	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	003b      	movs	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000932:	0039      	movs	r1, r7
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_TIM3_Init+0xf0>)
 8000936:	2200      	movs	r2, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f002 fdc7 	bl	80034cc <HAL_TIM_OC_ConfigChannel>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000942:	f000 fa0d 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b00e      	add	sp, #56	@ 0x38
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	20000228 	.word	0x20000228
 8000954:	40000400 	.word	0x40000400
 8000958:	00007fff 	.word	0x00007fff
 800095c:	00000fff 	.word	0x00000fff

08000960 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	0018      	movs	r0, r3
 800096a:	231c      	movs	r3, #28
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f004 fc32 	bl	80051d8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000974:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <MX_TIM14_Init+0x98>)
 8000976:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <MX_TIM14_Init+0x9c>)
 8000978:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_TIM14_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_TIM14_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 8000986:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_TIM14_Init+0x98>)
 8000988:	4a1d      	ldr	r2, [pc, #116]	@ (8000a00 <MX_TIM14_Init+0xa0>)
 800098a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_TIM14_Init+0x98>)
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	0052      	lsls	r2, r2, #1
 8000992:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_TIM14_Init+0x98>)
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_TIM14_Init+0x98>)
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fac3 	bl	8002f28 <HAL_TIM_Base_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 f9db 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_TIM14_Init+0x98>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 fb8f 	bl	80030d0 <HAL_TIM_PWM_Init>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80009b6:	f000 f9d3 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2260      	movs	r2, #96	@ 0x60
 80009be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_TIM14_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fe7b 	bl	80036d4 <HAL_TIM_PWM_ConfigChannel>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80009e2:	f000 f9bd 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80009e6:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <MX_TIM14_Init+0x98>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fb1b 	bl	8001024 <HAL_TIM_MspPostInit>

}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b008      	add	sp, #32
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	200002e4 	.word	0x200002e4
 80009fc:	40002000 	.word	0x40002000
 8000a00:	000003ff 	.word	0x000003ff

08000a04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	@ 0x50
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	2334      	movs	r3, #52	@ 0x34
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	231c      	movs	r3, #28
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f004 fbdf 	bl	80051d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2334      	movs	r3, #52	@ 0x34
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f004 fbd8 	bl	80051d8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a28:	4b3a      	ldr	r3, [pc, #232]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b18 <MX_TIM16_Init+0x114>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000a2e:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000a3a:	4b36      	ldr	r3, [pc, #216]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a3c:	22ff      	movs	r2, #255	@ 0xff
 8000a3e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a40:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a42:	2280      	movs	r2, #128	@ 0x80
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a48:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a54:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fa66 	bl	8002f28 <HAL_TIM_Base_Init>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 f97e 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000a64:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fac4 	bl	8002ff4 <HAL_TIM_OC_Init>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000a70:	f000 f976 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a74:	2134      	movs	r1, #52	@ 0x34
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 fd10 	bl	80034cc <HAL_TIM_OC_ConfigChannel>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000ab0:	f000 f956 	bl	8000d60 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	699a      	ldr	r2, [r3, #24]
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2108      	movs	r1, #8
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aca:	003b      	movs	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2280      	movs	r2, #128	@ 0x80
 8000ae6:	0192      	lsls	r2, r2, #6
 8000ae8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aea:	003b      	movs	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af0:	003b      	movs	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000af6:	003a      	movs	r2, r7
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_TIM16_Init+0x110>)
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f003 fdad 	bl	800465c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8000b06:	f000 f92b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b014      	add	sp, #80	@ 0x50
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	200003a0 	.word	0x200003a0
 8000b18:	40014400 	.word	0x40014400

08000b1c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	@ 0x50
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	2334      	movs	r3, #52	@ 0x34
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	0018      	movs	r0, r3
 8000b28:	231c      	movs	r3, #28
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f004 fb53 	bl	80051d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b32:	003b      	movs	r3, r7
 8000b34:	0018      	movs	r0, r3
 8000b36:	2334      	movs	r3, #52	@ 0x34
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f004 fb4c 	bl	80051d8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b40:	4b3a      	ldr	r3, [pc, #232]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b42:	4a3b      	ldr	r2, [pc, #236]	@ (8000c30 <MX_TIM17_Init+0x114>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000b46:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8000b52:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b54:	22ff      	movs	r2, #255	@ 0xff
 8000b56:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000b58:	4b34      	ldr	r3, [pc, #208]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b5a:	2280      	movs	r2, #128	@ 0x80
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b60:	4b32      	ldr	r3, [pc, #200]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b66:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 f9da 	bl	8002f28 <HAL_TIM_Base_Init>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 f8f2 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f002 fa38 	bl	8002ff4 <HAL_TIM_OC_Init>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000b88:	f000 f8ea 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b8c:	2134      	movs	r1, #52	@ 0x34
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb8:	1879      	adds	r1, r7, r1
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 fc84 	bl	80034cc <HAL_TIM_OC_ConfigChannel>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000bc8:	f000 f8ca 	bl	8000d60 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	0192      	lsls	r2, r2, #6
 8000c00:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c02:	003b      	movs	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0e:	003a      	movs	r2, r7
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_TIM17_Init+0x110>)
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f003 fd21 	bl	800465c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000c1e:	f000 f89f 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b014      	add	sp, #80	@ 0x50
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	2000045c 	.word	0x2000045c
 8000c30:	40014800 	.word	0x40014800

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c3a:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <MX_USART2_UART_Init+0x64>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c40:	22e1      	movs	r2, #225	@ 0xe1
 8000c42:	0252      	lsls	r2, r2, #9
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	0552      	lsls	r2, r2, #21
 8000c4c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <MX_USART2_UART_Init+0x60>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f003 fda7 	bl	80047d4 <HAL_UART_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c8a:	f000 f869 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000518 	.word	0x20000518
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	240c      	movs	r4, #12
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	2314      	movs	r3, #20
 8000caa:	001a      	movs	r2, r3
 8000cac:	2100      	movs	r1, #0
 8000cae:	f004 fa93 	bl	80051d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb6:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000cb8:	2104      	movs	r1, #4
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cce:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000cd0:	2120      	movs	r1, #32
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cda:	2220      	movs	r2, #32
 8000cdc:	4013      	ands	r3, r2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <MX_GPIO_Init+0xb8>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_GPIO_Init+0xbc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2140      	movs	r1, #64	@ 0x40
 8000d00:	0018      	movs	r0, r3
 8000d02:	f001 fa69 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2204      	movs	r2, #4
 8000d0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2288      	movs	r2, #136	@ 0x88
 8000d10:	0352      	lsls	r2, r2, #13
 8000d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d5c <MX_GPIO_Init+0xc0>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f001 f8f5 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2240      	movs	r2, #64	@ 0x40
 8000d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2201      	movs	r2, #1
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <MX_GPIO_Init+0xbc>)
 8000d44:	0019      	movs	r1, r3
 8000d46:	0010      	movs	r0, r2
 8000d48:	f001 f8e2 	bl	8001f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b009      	add	sp, #36	@ 0x24
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	50000800 	.word	0x50000800
 8000d5c:	50001400 	.word	0x50001400

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	0549      	lsls	r1, r1, #21
 8000d94:	430a      	orrs	r2, r1
 8000d96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	055b      	lsls	r3, r3, #21
 8000da0:	4013      	ands	r3, r2
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b08b      	sub	sp, #44	@ 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	2414      	movs	r4, #20
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f004 fa06 	bl	80051d8 <memset>
  if(hadc->Instance==ADC1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <HAL_ADC_MspInit+0x80>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d129      	bne.n	8000e2a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_ADC_MspInit+0x84>)
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HAL_ADC_MspInit+0x84>)
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	0349      	lsls	r1, r1, #13
 8000de0:	430a      	orrs	r2, r1
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000de4:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <HAL_ADC_MspInit+0x84>)
 8000de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	035b      	lsls	r3, r3, #13
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_ADC_MspInit+0x84>)
 8000df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_ADC_MspInit+0x84>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_ADC_MspInit+0x84>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2233      	movs	r2, #51	@ 0x33
 8000e0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2203      	movs	r2, #3
 8000e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	193a      	adds	r2, r7, r4
 8000e1e:	23a0      	movs	r3, #160	@ 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	0011      	movs	r1, r2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f001 f873 	bl	8001f10 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b00b      	add	sp, #44	@ 0x2c
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	40012400 	.word	0x40012400
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b08f      	sub	sp, #60	@ 0x3c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	2410      	movs	r4, #16
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2328      	movs	r3, #40	@ 0x28
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 f9c2 	bl	80051d8 <memset>
  if(htim_pwm->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d11c      	bne.n	8000e98 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	0392      	lsls	r2, r2, #14
 8000e64:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 fee0 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000e78:	f7ff ff72 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	0109      	lsls	r1, r1, #4
 8000e86:	430a      	orrs	r2, r1
 8000e88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b00f      	add	sp, #60	@ 0x3c
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	40012c00 	.word	0x40012c00
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b08f      	sub	sp, #60	@ 0x3c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	2424      	movs	r4, #36	@ 0x24
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f004 f98c 	bl	80051d8 <memset>
  if(htim_base->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d138      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x96>
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ecc:	4b50      	ldr	r3, [pc, #320]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	623b      	str	r3, [r7, #32]
 8000ee2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ee8:	4b49      	ldr	r3, [pc, #292]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ef0:	4b47      	ldr	r3, [pc, #284]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	0212      	lsls	r2, r2, #8
 8000f02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	0021      	movs	r1, r4
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2202      	movs	r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2201      	movs	r2, #1
 8000f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	187a      	adds	r2, r7, r1
 8000f20:	23a0      	movs	r3, #160	@ 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	0011      	movs	r1, r2
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fff2 	bl	8001f10 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	200f      	movs	r0, #15
 8000f32:	f000 ffbb 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f000 ffcd 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f3c:	e064      	b.n	8001008 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM3)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a34      	ldr	r2, [pc, #208]	@ (8001014 <HAL_TIM_Base_MspInit+0x16c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d114      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000f4e:	2102      	movs	r1, #2
 8000f50:	430a      	orrs	r2, r1
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2010      	movs	r0, #16
 8000f66:	f000 ffa1 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f6a:	2010      	movs	r0, #16
 8000f6c:	f000 ffb3 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
}
 8000f70:	e04a      	b.n	8001008 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM14)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a28      	ldr	r2, [pc, #160]	@ (8001018 <HAL_TIM_Base_MspInit+0x170>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d10e      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	0209      	lsls	r1, r1, #8
 8000f86:	430a      	orrs	r2, r1
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	4013      	ands	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
}
 8000f98:	e036      	b.n	8001008 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM16)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <HAL_TIM_Base_MspInit+0x174>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d116      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	0289      	lsls	r1, r1, #10
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000fb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	029b      	lsls	r3, r3, #10
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2015      	movs	r0, #21
 8000fc6:	f000 ff71 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000fca:	2015      	movs	r0, #21
 8000fcc:	f000 ff83 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
}
 8000fd0:	e01a      	b.n	8001008 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM17)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <HAL_TIM_Base_MspInit+0x178>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d115      	bne.n	8001008 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	02c9      	lsls	r1, r1, #11
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_TIM_Base_MspInit+0x168>)
 8000fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	02db      	lsls	r3, r3, #11
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2016      	movs	r0, #22
 8000ffe:	f000 ff55 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001002:	2016      	movs	r0, #22
 8001004:	f000 ff67 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b00f      	add	sp, #60	@ 0x3c
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	40000400 	.word	0x40000400
 8001018:	40002000 	.word	0x40002000
 800101c:	40014400 	.word	0x40014400
 8001020:	40014800 	.word	0x40014800

08001024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	2414      	movs	r4, #20
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	2314      	movs	r3, #20
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f004 f8ce 	bl	80051d8 <memset>
  if(htim->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <HAL_TIM_MspPostInit+0xc4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d124      	bne.n	8001090 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <HAL_TIM_MspPostInit+0xc8>)
 8001048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <HAL_TIM_MspPostInit+0xc8>)
 800104c:	2101      	movs	r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	635a      	str	r2, [r3, #52]	@ 0x34
 8001052:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <HAL_TIM_MspPostInit+0xc8>)
 8001054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001056:	2201      	movs	r2, #1
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2202      	movs	r2, #2
 800106c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2202      	movs	r2, #2
 800107e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	187a      	adds	r2, r7, r1
 8001082:	23a0      	movs	r3, #160	@ 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f000 ff41 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800108e:	e027      	b.n	80010e0 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM14)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <HAL_TIM_MspPostInit+0xcc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d122      	bne.n	80010e0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_TIM_MspPostInit+0xc8>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_TIM_MspPostInit+0xc8>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_TIM_MspPostInit+0xc8>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010aa:	2201      	movs	r2, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b2:	2114      	movs	r1, #20
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2202      	movs	r2, #2
 80010be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2204      	movs	r2, #4
 80010d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	187a      	adds	r2, r7, r1
 80010d4:	23a0      	movs	r3, #160	@ 0xa0
 80010d6:	05db      	lsls	r3, r3, #23
 80010d8:	0011      	movs	r1, r2
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 ff18 	bl	8001f10 <HAL_GPIO_Init>
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b00b      	add	sp, #44	@ 0x2c
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40002000 	.word	0x40002000

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08b      	sub	sp, #44	@ 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	2414      	movs	r4, #20
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f004 f866 	bl	80051d8 <memset>
  if(huart->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <HAL_UART_MspInit+0x8c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d130      	bne.n	8001178 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_UART_MspInit+0x90>)
 8001118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <HAL_UART_MspInit+0x90>)
 800111c:	2180      	movs	r1, #128	@ 0x80
 800111e:	0289      	lsls	r1, r1, #10
 8001120:	430a      	orrs	r2, r1
 8001122:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_UART_MspInit+0x90>)
 8001126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_UART_MspInit+0x90>)
 8001134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_UART_MspInit+0x90>)
 8001138:	2101      	movs	r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	@ 0x34
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_UART_MspInit+0x90>)
 8001140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800114a:	0021      	movs	r1, r4
 800114c:	187b      	adds	r3, r7, r1
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2202      	movs	r2, #2
 8001156:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2201      	movs	r2, #1
 800115c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2201      	movs	r2, #1
 8001168:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	187a      	adds	r2, r7, r1
 800116c:	23a0      	movs	r3, #160	@ 0xa0
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f000 fecc 	bl	8001f10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b00b      	add	sp, #44	@ 0x2c
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	40004400 	.word	0x40004400
 8001184:	40021000 	.word	0x40021000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f8ce 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <TIM2_IRQHandler+0x14>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f002 f858 	bl	8003278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	2000016c 	.word	0x2000016c

080011d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <TIM3_IRQHandler+0x14>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f002 f84c 	bl	8003278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	20000228 	.word	0x20000228

080011ec <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <TIM16_IRQHandler+0x14>)
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 f840 	bl	8003278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	200003a0 	.word	0x200003a0

08001204 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <TIM17_IRQHandler+0x14>)
 800120a:	0018      	movs	r0, r3
 800120c:	f002 f834 	bl	8003278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	2000045c 	.word	0x2000045c

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001228:	480d      	ldr	r0, [pc, #52]	@ (8001260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff fff6 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	@ (8001268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	@ (8001274 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001256:	f003 ffc7 	bl	80051e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800125a:	f7ff f8f5 	bl	8000448 <main>

0800125e <LoopForever>:

LoopForever:
  b LoopForever
 800125e:	e7fe      	b.n	800125e <LoopForever>
  ldr   r0, =_estack
 8001260:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800126c:	08005378 	.word	0x08005378
  ldr r2, =_sbss
 8001270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001274:	200005b0 	.word	0x200005b0

08001278 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_IRQHandler>
	...

0800127c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_Init+0x3c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Init+0x3c>)
 800128e:	2180      	movs	r1, #128	@ 0x80
 8001290:	0049      	lsls	r1, r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f810 	bl	80012bc <HAL_InitTick>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d003      	beq.n	80012a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e001      	b.n	80012ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fd60 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_InitTick+0x88>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d02b      	beq.n	800132c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_InitTick+0x8c>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_InitTick+0x88>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	0019      	movs	r1, r3
 80012de:	23fa      	movs	r3, #250	@ 0xfa
 80012e0:	0098      	lsls	r0, r3, #2
 80012e2:	f7fe ff0f 	bl	8000104 <__udivsi3>
 80012e6:	0003      	movs	r3, r0
 80012e8:	0019      	movs	r1, r3
 80012ea:	0020      	movs	r0, r4
 80012ec:	f7fe ff0a 	bl	8000104 <__udivsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 fdff 	bl	8001ef6 <HAL_SYSTICK_Config>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d112      	bne.n	8001322 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d80a      	bhi.n	8001318 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	2301      	movs	r3, #1
 8001306:	425b      	negs	r3, r3
 8001308:	2200      	movs	r2, #0
 800130a:	0018      	movs	r0, r3
 800130c:	f000 fdce 	bl	8001eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_InitTick+0x90>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e00d      	b.n	8001334 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e008      	b.n	8001334 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001322:	230f      	movs	r3, #15
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e003      	b.n	8001334 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001334:	230f      	movs	r3, #15
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	781b      	ldrb	r3, [r3, #0]
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b005      	add	sp, #20
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	20000008 	.word	0x20000008
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_IncTick+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_IncTick+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	18d2      	adds	r2, r2, r3
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_IncTick+0x20>)
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	20000008 	.word	0x20000008
 8001370:	200005ac 	.word	0x200005ac

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b02      	ldr	r3, [pc, #8]	@ (8001384 <HAL_GetTick+0x10>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	200005ac 	.word	0x200005ac

08001388 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001398:	401a      	ands	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	fe3fffff 	.word	0xfe3fffff

080013b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	23e0      	movs	r3, #224	@ 0xe0
 80013be:	045b      	lsls	r3, r3, #17
 80013c0:	4013      	ands	r3, r2
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}

080013ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	2104      	movs	r1, #4
 80013de:	400a      	ands	r2, r1
 80013e0:	2107      	movs	r1, #7
 80013e2:	4091      	lsls	r1, r2
 80013e4:	000a      	movs	r2, r1
 80013e6:	43d2      	mvns	r2, r2
 80013e8:	401a      	ands	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2104      	movs	r1, #4
 80013ee:	400b      	ands	r3, r1
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4099      	lsls	r1, r3
 80013f4:	000b      	movs	r3, r1
 80013f6:	431a      	orrs	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bd80      	pop	{r7, pc}

08001404 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	2104      	movs	r1, #4
 8001416:	400a      	ands	r2, r1
 8001418:	2107      	movs	r1, #7
 800141a:	4091      	lsls	r1, r2
 800141c:	000a      	movs	r2, r1
 800141e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2104      	movs	r1, #4
 8001424:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001426:	40da      	lsrs	r2, r3
 8001428:	0013      	movs	r3, r2
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	211f      	movs	r1, #31
 8001446:	400a      	ands	r2, r1
 8001448:	210f      	movs	r1, #15
 800144a:	4091      	lsls	r1, r2
 800144c:	000a      	movs	r2, r1
 800144e:	43d2      	mvns	r2, r2
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	0e9b      	lsrs	r3, r3, #26
 8001456:	210f      	movs	r1, #15
 8001458:	4019      	ands	r1, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	201f      	movs	r0, #31
 800145e:	4003      	ands	r3, r0
 8001460:	4099      	lsls	r1, r3
 8001462:	000b      	movs	r3, r1
 8001464:	431a      	orrs	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b004      	add	sp, #16
 8001470:	bd80      	pop	{r7, pc}

08001472 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	035b      	lsls	r3, r3, #13
 8001484:	0b5b      	lsrs	r3, r3, #13
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}

08001494 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	0352      	lsls	r2, r2, #13
 80014a6:	0b52      	lsrs	r2, r2, #13
 80014a8:	43d2      	mvns	r2, r2
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	0212      	lsls	r2, r2, #8
 80014cc:	43d2      	mvns	r2, r2
 80014ce:	401a      	ands	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	400b      	ands	r3, r1
 80014d8:	4904      	ldr	r1, [pc, #16]	@ (80014ec <LL_ADC_SetChannelSamplingTime+0x34>)
 80014da:	400b      	ands	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b004      	add	sp, #16
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	07ffff00 	.word	0x07ffff00

080014f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <LL_ADC_EnableInternalRegulator+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	0552      	lsls	r2, r2, #21
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	6fffffe8 	.word	0x6fffffe8

08001518 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	055b      	lsls	r3, r3, #21
 8001528:	401a      	ands	r2, r3
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	055b      	lsls	r3, r3, #21
 800152e:	429a      	cmp	r2, r3
 8001530:	d101      	bne.n	8001536 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}

08001540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <LL_ADC_IsEnabled+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_IsEnabled+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}

08001562 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	2b04      	cmp	r3, #4
 8001574:	d101      	bne.n	800157a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800157a:	2300      	movs	r3, #0
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	231f      	movs	r3, #31
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e19f      	b.n	80018ea <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d12a      	bne.n	8001608 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4acf      	ldr	r2, [pc, #828]	@ (80018f4 <HAL_ADC_Init+0x370>)
 80015b6:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4acf      	ldr	r2, [pc, #828]	@ (80018f8 <HAL_ADC_Init+0x374>)
 80015bc:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4ace      	ldr	r2, [pc, #824]	@ (80018fc <HAL_ADC_Init+0x378>)
 80015c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4ace      	ldr	r2, [pc, #824]	@ (8001900 <HAL_ADC_Init+0x37c>)
 80015c8:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4acd      	ldr	r2, [pc, #820]	@ (8001904 <HAL_ADC_Init+0x380>)
 80015ce:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4acd      	ldr	r2, [pc, #820]	@ (8001908 <HAL_ADC_Init+0x384>)
 80015d4:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4acc      	ldr	r2, [pc, #816]	@ (800190c <HAL_ADC_Init+0x388>)
 80015da:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	589b      	ldr	r3, [r3, r2]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2180      	movs	r1, #128	@ 0x80
 80015ea:	4ac9      	ldr	r2, [pc, #804]	@ (8001910 <HAL_ADC_Init+0x38c>)
 80015ec:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	589b      	ldr	r3, [r3, r2]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	0010      	movs	r0, r2
 80015f8:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2254      	movs	r2, #84	@ 0x54
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff ff83 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d115      	bne.n	8001642 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff ff68 	bl	80014f0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001620:	4bbc      	ldr	r3, [pc, #752]	@ (8001914 <HAL_ADC_Init+0x390>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	49bc      	ldr	r1, [pc, #752]	@ (8001918 <HAL_ADC_Init+0x394>)
 8001626:	0018      	movs	r0, r3
 8001628:	f7fe fd6c 	bl	8000104 <__udivsi3>
 800162c:	0003      	movs	r3, r0
 800162e:	3301      	adds	r3, #1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001634:	e002      	b.n	800163c <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3b01      	subs	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff ff66 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d10f      	bne.n	8001670 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	2210      	movs	r2, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001660:	2201      	movs	r2, #1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001668:	231f      	movs	r3, #31
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ff74 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	2210      	movs	r2, #16
 8001684:	4013      	ands	r3, r2
 8001686:	d000      	beq.n	800168a <HAL_ADC_Init+0x106>
 8001688:	e122      	b.n	80018d0 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d000      	beq.n	8001692 <HAL_ADC_Init+0x10e>
 8001690:	e11e      	b.n	80018d0 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	4aa1      	ldr	r2, [pc, #644]	@ (800191c <HAL_ADC_Init+0x398>)
 8001698:	4013      	ands	r3, r2
 800169a:	2202      	movs	r2, #2
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff ff4a 	bl	8001540 <LL_ADC_IsEnabled>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d000      	beq.n	80016b2 <HAL_ADC_Init+0x12e>
 80016b0:	e0ad      	b.n	800180e <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7e1b      	ldrb	r3, [r3, #24]
 80016ba:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80016bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7e5b      	ldrb	r3, [r3, #25]
 80016c2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7e9b      	ldrb	r3, [r3, #26]
 80016ca:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_ADC_Init+0x158>
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	015b      	lsls	r3, r3, #5
 80016da:	e000      	b.n	80016de <HAL_ADC_Init+0x15a>
 80016dc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016de:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016e4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da04      	bge.n	80016f8 <HAL_ADC_Init+0x174>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	e001      	b.n	80016fc <HAL_ADC_Init+0x178>
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80016fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	212c      	movs	r1, #44	@ 0x2c
 8001702:	5c5b      	ldrb	r3, [r3, r1]
 8001704:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001706:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	5c9b      	ldrb	r3, [r3, r2]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d115      	bne.n	8001744 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e9b      	ldrb	r3, [r3, #26]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2280      	movs	r2, #128	@ 0x80
 8001724:	0252      	lsls	r2, r2, #9
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	e00b      	b.n	8001744 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	2220      	movs	r2, #32
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173c:	2201      	movs	r2, #1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00a      	beq.n	8001762 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001750:	23e0      	movs	r3, #224	@ 0xe0
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800175a:	4313      	orrs	r3, r2
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a6d      	ldr	r2, [pc, #436]	@ (8001920 <HAL_ADC_Init+0x39c>)
 800176a:	4013      	ands	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0f9b      	lsrs	r3, r3, #30
 800177e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001784:	4313      	orrs	r3, r2
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4313      	orrs	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	223c      	movs	r2, #60	@ 0x3c
 8001790:	5c9b      	ldrb	r3, [r3, r2]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d111      	bne.n	80017ba <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	0f9b      	lsrs	r3, r3, #30
 800179c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017a2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80017a8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80017ae:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	2201      	movs	r2, #1
 80017b6:	4313      	orrs	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a58      	ldr	r2, [pc, #352]	@ (8001924 <HAL_ADC_Init+0x3a0>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	23c0      	movs	r3, #192	@ 0xc0
 80017d6:	061b      	lsls	r3, r3, #24
 80017d8:	429a      	cmp	r2, r3
 80017da:	d018      	beq.n	800180e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	05db      	lsls	r3, r3, #23
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d012      	beq.n	800180e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	061b      	lsls	r3, r3, #24
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d00c      	beq.n	800180e <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80017f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <HAL_ADC_Init+0x3a4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	@ (800192c <HAL_ADC_Init+0x3a8>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	23f0      	movs	r3, #240	@ 0xf0
 8001804:	039b      	lsls	r3, r3, #14
 8001806:	401a      	ands	r2, r3
 8001808:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_ADC_Init+0x3a4>)
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001816:	001a      	movs	r2, r3
 8001818:	2100      	movs	r1, #0
 800181a:	f7ff fdd6 	bl	80013ca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001826:	4942      	ldr	r1, [pc, #264]	@ (8001930 <HAL_ADC_Init+0x3ac>)
 8001828:	001a      	movs	r2, r3
 800182a:	f7ff fdce 	bl	80013ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2110      	movs	r1, #16
 8001842:	4249      	negs	r1, r1
 8001844:	430a      	orrs	r2, r1
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
 8001848:	e018      	b.n	800187c <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	039b      	lsls	r3, r3, #14
 8001852:	429a      	cmp	r2, r3
 8001854:	d112      	bne.n	800187c <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	3b01      	subs	r3, #1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	221c      	movs	r2, #28
 8001866:	4013      	ands	r3, r2
 8001868:	2210      	movs	r2, #16
 800186a:	4252      	negs	r2, r2
 800186c:	409a      	lsls	r2, r3
 800186e:	0011      	movs	r1, r2
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2100      	movs	r1, #0
 8001882:	0018      	movs	r0, r3
 8001884:	f7ff fdbe 	bl	8001404 <LL_ADC_GetSamplingTimeCommonChannels>
 8001888:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800188e:	429a      	cmp	r2, r3
 8001890:	d10b      	bne.n	80018aa <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	2203      	movs	r2, #3
 800189e:	4393      	bics	r3, r2
 80018a0:	2201      	movs	r2, #1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018a8:	e01c      	b.n	80018e4 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	2212      	movs	r2, #18
 80018b0:	4393      	bics	r3, r2
 80018b2:	2210      	movs	r2, #16
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018be:	2201      	movs	r2, #1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80018c6:	231f      	movs	r3, #31
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018ce:	e009      	b.n	80018e4 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	2210      	movs	r2, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018dc:	231f      	movs	r3, #31
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018e4:	231f      	movs	r3, #31
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b008      	add	sp, #32
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	08001935 	.word	0x08001935
 80018f8:	08001945 	.word	0x08001945
 80018fc:	08001955 	.word	0x08001955
 8001900:	08001965 	.word	0x08001965
 8001904:	08001d25 	.word	0x08001d25
 8001908:	08001d35 	.word	0x08001d35
 800190c:	08001d45 	.word	0x08001d45
 8001910:	08000db5 	.word	0x08000db5
 8001914:	20000000 	.word	0x20000000
 8001918:	00030d40 	.word	0x00030d40
 800191c:	fffffefd 	.word	0xfffffefd
 8001920:	ffde0201 	.word	0xffde0201
 8001924:	1ffffc02 	.word	0x1ffffc02
 8001928:	40012708 	.word	0x40012708
 800192c:	ffc3ffff 	.word	0xffc3ffff
 8001930:	07ffff04 	.word	0x07ffff04

08001934 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197e:	2317      	movs	r3, #23
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2254      	movs	r2, #84	@ 0x54
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x24>
 8001994:	2302      	movs	r3, #2
 8001996:	e1c0      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x3a6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2254      	movs	r2, #84	@ 0x54
 800199c:	2101      	movs	r1, #1
 800199e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff fddc 	bl	8001562 <LL_ADC_REG_IsConversionOngoing>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d000      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0x3c>
 80019ae:	e1a3      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d100      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x46>
 80019b8:	e143      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d004      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ca:	4ac1      	ldr	r2, [pc, #772]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x35c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d108      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0019      	movs	r1, r3
 80019da:	0010      	movs	r0, r2
 80019dc:	f7ff fd49 	bl	8001472 <LL_ADC_REG_SetSequencerChAdd>
 80019e0:	e0c9      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	211f      	movs	r1, #31
 80019ec:	400b      	ands	r3, r1
 80019ee:	210f      	movs	r1, #15
 80019f0:	4099      	lsls	r1, r3
 80019f2:	000b      	movs	r3, r1
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4013      	ands	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	035b      	lsls	r3, r3, #13
 8001a00:	0b5b      	lsrs	r3, r3, #13
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x9c>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	221f      	movs	r2, #31
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	e098      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d000      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0xa8>
 8001a1a:	e091      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1cc>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d000      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xb4>
 8001a26:	e089      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x1c8>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d000      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0xc0>
 8001a32:	e081      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x1c4>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d000      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0xcc>
 8001a3e:	e079      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x1c0>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2210      	movs	r2, #16
 8001a46:	4013      	ands	r3, r2
 8001a48:	d000      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0xd8>
 8001a4a:	e071      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1bc>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	4013      	ands	r3, r2
 8001a54:	d000      	beq.n	8001a58 <HAL_ADC_ConfigChannel+0xe4>
 8001a56:	e069      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1b8>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d000      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0xf0>
 8001a62:	e061      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1b4>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d000      	beq.n	8001a70 <HAL_ADC_ConfigChannel+0xfc>
 8001a6e:	e059      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x1b0>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d151      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1ac>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d149      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1a8>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	d141      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1a4>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d139      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x1a0>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d131      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x19c>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d129      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x198>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	01db      	lsls	r3, r3, #7
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d121      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x194>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4013      	ands	r3, r2
 8001ace:	d119      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x190>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d111      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x18c>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x188>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	02db      	lsls	r3, r3, #11
 8001af0:	4013      	ands	r3, r2
 8001af2:	d001      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0x184>
 8001af4:	2312      	movs	r3, #18
 8001af6:	e024      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	2300      	movs	r3, #0
 8001afa:	e022      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	2311      	movs	r3, #17
 8001afe:	e020      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b00:	2310      	movs	r3, #16
 8001b02:	e01e      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b04:	230f      	movs	r3, #15
 8001b06:	e01c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b08:	230e      	movs	r3, #14
 8001b0a:	e01a      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b0c:	230d      	movs	r3, #13
 8001b0e:	e018      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b10:	230c      	movs	r3, #12
 8001b12:	e016      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b14:	230b      	movs	r3, #11
 8001b16:	e014      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b18:	230a      	movs	r3, #10
 8001b1a:	e012      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	e010      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b20:	2308      	movs	r3, #8
 8001b22:	e00e      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e00c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e00a      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	e008      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e006      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e004      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1ce>
 8001b40:	2300      	movs	r3, #0
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	6852      	ldr	r2, [r2, #4]
 8001b46:	201f      	movs	r0, #31
 8001b48:	4002      	ands	r2, r0
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d808      	bhi.n	8001b76 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	001a      	movs	r2, r3
 8001b72:	f7ff fc5e 	bl	8001432 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	001a      	movs	r2, r3
 8001b84:	f7ff fc98 	bl	80014b8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db00      	blt.n	8001b92 <HAL_ADC_ConfigChannel+0x21e>
 8001b90:	e0bc      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b92:	4b50      	ldr	r3, [pc, #320]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fc0b 	bl	80013b0 <LL_ADC_GetCommonPathInternalCh>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd8 <HAL_ADC_ConfigChannel+0x364>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d122      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bb0:	d11d      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	f7ff fbe2 	bl	8001388 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc4:	4b45      	ldr	r3, [pc, #276]	@ (8001cdc <HAL_ADC_ConfigChannel+0x368>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4945      	ldr	r1, [pc, #276]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x36c>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7fe fa9a 	bl	8000104 <__udivsi3>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	189b      	adds	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bde:	e002      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f9      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bec:	e08e      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x370>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d10e      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	045b      	lsls	r3, r3, #17
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	0452      	lsls	r2, r2, #17
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	0010      	movs	r0, r2
 8001c10:	f7ff fbba 	bl	8001388 <LL_ADC_SetCommonPathInternalCh>
 8001c14:	e07a      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x374>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d000      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x2ae>
 8001c20:	e074      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	03db      	lsls	r3, r3, #15
 8001c28:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c2a:	d000      	beq.n	8001c2e <HAL_ADC_ConfigChannel+0x2ba>
 8001c2c:	e06e      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	03d2      	lsls	r2, r2, #15
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001c38:	0019      	movs	r1, r3
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	f7ff fba4 	bl	8001388 <LL_ADC_SetCommonPathInternalCh>
 8001c40:	e064      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d004      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c52:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x35c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d107      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0019      	movs	r1, r3
 8001c62:	0010      	movs	r0, r2
 8001c64:	f7ff fc16 	bl	8001494 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da4d      	bge.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff fb9c 	bl	80013b0 <LL_ADC_GetCommonPathInternalCh>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <HAL_ADC_ConfigChannel+0x364>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d108      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4a18      	ldr	r2, [pc, #96]	@ (8001cec <HAL_ADC_ConfigChannel+0x378>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001c8e:	0019      	movs	r1, r3
 8001c90:	0010      	movs	r0, r2
 8001c92:	f7ff fb79 	bl	8001388 <LL_ADC_SetCommonPathInternalCh>
 8001c96:	e039      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x370>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x37c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001caa:	0019      	movs	r1, r3
 8001cac:	0010      	movs	r0, r2
 8001cae:	f7ff fb6b 	bl	8001388 <LL_ADC_SetCommonPathInternalCh>
 8001cb2:	e02b      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x374>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d126      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x380>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a03      	ldr	r2, [pc, #12]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x360>)
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	0010      	movs	r0, r2
 8001cca:	f7ff fb5d 	bl	8001388 <LL_ADC_SetCommonPathInternalCh>
 8001cce:	e01d      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x398>
 8001cd0:	80000004 	.word	0x80000004
 8001cd4:	40012708 	.word	0x40012708
 8001cd8:	b0001000 	.word	0xb0001000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	00030d40 	.word	0x00030d40
 8001ce4:	b8004000 	.word	0xb8004000
 8001ce8:	b4002000 	.word	0xb4002000
 8001cec:	ff7fffff 	.word	0xff7fffff
 8001cf0:	feffffff 	.word	0xfeffffff
 8001cf4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d04:	2317      	movs	r3, #23
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2254      	movs	r2, #84	@ 0x54
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d14:	2317      	movs	r3, #23
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b006      	add	sp, #24
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)

08001d24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d2c:	46c0      	nop			@ (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d66:	d809      	bhi.n	8001d7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	001a      	movs	r2, r3
 8001d6e:	231f      	movs	r3, #31
 8001d70:	401a      	ands	r2, r3
 8001d72:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <__NVIC_EnableIRQ+0x30>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	4091      	lsls	r1, r2
 8001d78:	000a      	movs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	0002      	movs	r2, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d9c:	d828      	bhi.n	8001df0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e5c <__NVIC_SetPriority+0xd4>)
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	33c0      	adds	r3, #192	@ 0xc0
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	589b      	ldr	r3, [r3, r2]
 8001dae:	1dfa      	adds	r2, r7, #7
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	0011      	movs	r1, r2
 8001db4:	2203      	movs	r2, #3
 8001db6:	400a      	ands	r2, r1
 8001db8:	00d2      	lsls	r2, r2, #3
 8001dba:	21ff      	movs	r1, #255	@ 0xff
 8001dbc:	4091      	lsls	r1, r2
 8001dbe:	000a      	movs	r2, r1
 8001dc0:	43d2      	mvns	r2, r2
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	22ff      	movs	r2, #255	@ 0xff
 8001dcc:	401a      	ands	r2, r3
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ddc:	481f      	ldr	r0, [pc, #124]	@ (8001e5c <__NVIC_SetPriority+0xd4>)
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	430a      	orrs	r2, r1
 8001de8:	33c0      	adds	r3, #192	@ 0xc0
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dee:	e031      	b.n	8001e54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <__NVIC_SetPriority+0xd8>)
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	0019      	movs	r1, r3
 8001df8:	230f      	movs	r3, #15
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	3b08      	subs	r3, #8
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3306      	adds	r3, #6
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	3304      	adds	r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	1dfa      	adds	r2, r7, #7
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	0011      	movs	r1, r2
 8001e10:	2203      	movs	r2, #3
 8001e12:	400a      	ands	r2, r1
 8001e14:	00d2      	lsls	r2, r2, #3
 8001e16:	21ff      	movs	r1, #255	@ 0xff
 8001e18:	4091      	lsls	r1, r2
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	43d2      	mvns	r2, r2
 8001e1e:	401a      	ands	r2, r3
 8001e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	22ff      	movs	r2, #255	@ 0xff
 8001e28:	401a      	ands	r2, r3
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	2303      	movs	r3, #3
 8001e32:	4003      	ands	r3, r0
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e38:	4809      	ldr	r0, [pc, #36]	@ (8001e60 <__NVIC_SetPriority+0xd8>)
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	001c      	movs	r4, r3
 8001e40:	230f      	movs	r3, #15
 8001e42:	4023      	ands	r3, r4
 8001e44:	3b08      	subs	r3, #8
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	18c3      	adds	r3, r0, r3
 8001e50:	3304      	adds	r3, #4
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b003      	add	sp, #12
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1e5a      	subs	r2, r3, #1
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	045b      	lsls	r3, r3, #17
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d301      	bcc.n	8001e7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e010      	b.n	8001e9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <SysTick_Config+0x44>)
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	3a01      	subs	r2, #1
 8001e82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e84:	2301      	movs	r3, #1
 8001e86:	425b      	negs	r3, r3
 8001e88:	2103      	movs	r1, #3
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff ff7c 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x44>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x44>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	1c02      	adds	r2, r0, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff ff5d 	bl	8001d88 <__NVIC_SetPriority>
}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	0002      	movs	r2, r0
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b25b      	sxtb	r3, r3
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ff33 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ffaf 	bl	8001e64 <SysTick_Config>
 8001f06:	0003      	movs	r3, r0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	e147      	b.n	80021b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4091      	lsls	r1, r2
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <HAL_GPIO_Init+0x28>
 8001f36:	e138      	b.n	80021aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d005      	beq.n	8001f50 <HAL_GPIO_Init+0x40>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d130      	bne.n	8001fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	43da      	mvns	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	409a      	lsls	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f86:	2201      	movs	r2, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d017      	beq.n	8001fee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d123      	bne.n	8002042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	58d3      	ldr	r3, [r2, r3]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2207      	movs	r2, #7
 800200c:	4013      	ands	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	409a      	lsls	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2107      	movs	r1, #7
 8002026:	400b      	ands	r3, r1
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	409a      	lsls	r2, r3
 8002050:	0013      	movs	r3, r2
 8002052:	43da      	mvns	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2203      	movs	r2, #3
 8002060:	401a      	ands	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	23c0      	movs	r3, #192	@ 0xc0
 800207c:	029b      	lsls	r3, r3, #10
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_GPIO_Init+0x174>
 8002082:	e092      	b.n	80021aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002084:	4a50      	ldr	r2, [pc, #320]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3318      	adds	r3, #24
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	589b      	ldr	r3, [r3, r2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2203      	movs	r2, #3
 8002096:	4013      	ands	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	220f      	movs	r2, #15
 800209c:	409a      	lsls	r2, r3
 800209e:	0013      	movs	r3, r2
 80020a0:	43da      	mvns	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	23a0      	movs	r3, #160	@ 0xa0
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x1ca>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a45      	ldr	r2, [pc, #276]	@ (80021cc <HAL_GPIO_Init+0x2bc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x1c6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a44      	ldr	r2, [pc, #272]	@ (80021d0 <HAL_GPIO_Init+0x2c0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x1c2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a43      	ldr	r2, [pc, #268]	@ (80021d4 <HAL_GPIO_Init+0x2c4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x1be>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x1cc>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x1cc>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x1cc>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x1cc>
 80020da:	2300      	movs	r3, #0
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	2103      	movs	r1, #3
 80020e0:	400a      	ands	r2, r1
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	4093      	lsls	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020ec:	4936      	ldr	r1, [pc, #216]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3318      	adds	r3, #24
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020fa:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	035b      	lsls	r3, r3, #13
 8002112:	4013      	ands	r3, r2
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002124:	4b28      	ldr	r3, [pc, #160]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43da      	mvns	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	039b      	lsls	r3, r3, #14
 800213c:	4013      	ands	r3, r2
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800214e:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002150:	2384      	movs	r3, #132	@ 0x84
 8002152:	58d3      	ldr	r3, [r2, r3]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43da      	mvns	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	4013      	ands	r3, r2
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002174:	4914      	ldr	r1, [pc, #80]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002176:	2284      	movs	r2, #132	@ 0x84
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800217c:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	58d3      	ldr	r3, [r2, r3]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43da      	mvns	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	4013      	ands	r3, r2
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a2:	4909      	ldr	r1, [pc, #36]	@ (80021c8 <HAL_GPIO_Init+0x2b8>)
 80021a4:	2280      	movs	r2, #128	@ 0x80
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	40da      	lsrs	r2, r3
 80021b8:	1e13      	subs	r3, r2, #0
 80021ba:	d000      	beq.n	80021be <HAL_GPIO_Init+0x2ae>
 80021bc:	e6b0      	b.n	8001f20 <HAL_GPIO_Init+0x10>
  }
}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	46c0      	nop			@ (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b006      	add	sp, #24
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021800 	.word	0x40021800
 80021cc:	50000400 	.word	0x50000400
 80021d0:	50000800 	.word	0x50000800
 80021d4:	50000c00 	.word	0x50000c00

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	0008      	movs	r0, r1
 80021e2:	0011      	movs	r1, r2
 80021e4:	1cbb      	adds	r3, r7, #2
 80021e6:	1c02      	adds	r2, r0, #0
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	1c7b      	adds	r3, r7, #1
 80021ec:	1c0a      	adds	r2, r1, #0
 80021ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f0:	1c7b      	adds	r3, r7, #1
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f8:	1cbb      	adds	r3, r7, #2
 80021fa:	881a      	ldrh	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002202:	1cbb      	adds	r3, r7, #2
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d11f      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	0013      	movs	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	189b      	adds	r3, r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4912      	ldr	r1, [pc, #72]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002246:	0018      	movs	r0, r3
 8002248:	f7fd ff5c 	bl	8000104 <__udivsi3>
 800224c:	0003      	movs	r3, r0
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002252:	e008      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e001      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e009      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	401a      	ands	r2, r3
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	429a      	cmp	r2, r3
 8002276:	d0ed      	beq.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40007000 	.word	0x40007000
 8002288:	fffff9ff 	.word	0xfffff9ff
 800228c:	20000000 	.word	0x20000000
 8002290:	000f4240 	.word	0x000f4240

08002294 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	23e0      	movs	r3, #224	@ 0xe0
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	4013      	ands	r3, r2
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e2fe      	b.n	80028bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d100      	bne.n	80022ca <HAL_RCC_OscConfig+0x1e>
 80022c8:	e07c      	b.n	80023c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4bc3      	ldr	r3, [pc, #780]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2238      	movs	r2, #56	@ 0x38
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4bc0      	ldr	r3, [pc, #768]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2203      	movs	r2, #3
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_OscConfig+0x3e>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d10b      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	4bb9      	ldr	r3, [pc, #740]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	4013      	ands	r3, r2
 80022fa:	d062      	beq.n	80023c2 <HAL_RCC_OscConfig+0x116>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d15e      	bne.n	80023c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e2d9      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	025b      	lsls	r3, r3, #9
 8002310:	429a      	cmp	r2, r3
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x78>
 8002314:	4bb0      	ldr	r3, [pc, #704]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4baf      	ldr	r3, [pc, #700]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	0249      	lsls	r1, r1, #9
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e020      	b.n	8002366 <HAL_RCC_OscConfig+0xba>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	23a0      	movs	r3, #160	@ 0xa0
 800232a:	02db      	lsls	r3, r3, #11
 800232c:	429a      	cmp	r2, r3
 800232e:	d10e      	bne.n	800234e <HAL_RCC_OscConfig+0xa2>
 8002330:	4ba9      	ldr	r3, [pc, #676]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4ba8      	ldr	r3, [pc, #672]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	02c9      	lsls	r1, r1, #11
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	4ba6      	ldr	r3, [pc, #664]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4ba5      	ldr	r3, [pc, #660]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002344:	2180      	movs	r1, #128	@ 0x80
 8002346:	0249      	lsls	r1, r1, #9
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0xba>
 800234e:	4ba2      	ldr	r3, [pc, #648]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4ba1      	ldr	r3, [pc, #644]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002354:	49a1      	ldr	r1, [pc, #644]	@ (80025dc <HAL_RCC_OscConfig+0x330>)
 8002356:	400a      	ands	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	4b9f      	ldr	r3, [pc, #636]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b9e      	ldr	r3, [pc, #632]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002360:	499f      	ldr	r1, [pc, #636]	@ (80025e0 <HAL_RCC_OscConfig+0x334>)
 8002362:	400a      	ands	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d014      	beq.n	8002398 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7ff f801 	bl	8001374 <HAL_GetTick>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fffc 	bl	8001374 <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e298      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238a:	4b93      	ldr	r3, [pc, #588]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	4013      	ands	r3, r2
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0xcc>
 8002396:	e015      	b.n	80023c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe ffec 	bl	8001374 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a2:	f7fe ffe7 	bl	8001374 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	@ 0x64
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e283      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b4:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	4013      	ands	r3, r2
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0xf6>
 80023c0:	e000      	b.n	80023c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d100      	bne.n	80023d0 <HAL_RCC_OscConfig+0x124>
 80023ce:	e099      	b.n	8002504 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d0:	4b81      	ldr	r3, [pc, #516]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2238      	movs	r2, #56	@ 0x38
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023da:	4b7f      	ldr	r3, [pc, #508]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2203      	movs	r2, #3
 80023e0:	4013      	ands	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_OscConfig+0x144>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d002      	beq.n	80023f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d135      	bne.n	8002462 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f6:	4b78      	ldr	r3, [pc, #480]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4013      	ands	r3, r2
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x162>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e256      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b72      	ldr	r3, [pc, #456]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a74      	ldr	r2, [pc, #464]	@ (80025e4 <HAL_RCC_OscConfig+0x338>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	021a      	lsls	r2, r3, #8
 800241e:	4b6e      	ldr	r3, [pc, #440]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800242a:	4b6b      	ldr	r3, [pc, #428]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6e      	ldr	r2, [pc, #440]	@ (80025e8 <HAL_RCC_OscConfig+0x33c>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800243e:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	2207      	movs	r2, #7
 8002446:	4013      	ands	r3, r2
 8002448:	4a68      	ldr	r2, [pc, #416]	@ (80025ec <HAL_RCC_OscConfig+0x340>)
 800244a:	40da      	lsrs	r2, r3
 800244c:	4b68      	ldr	r3, [pc, #416]	@ (80025f0 <HAL_RCC_OscConfig+0x344>)
 800244e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002450:	4b68      	ldr	r3, [pc, #416]	@ (80025f4 <HAL_RCC_OscConfig+0x348>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f7fe ff31 	bl	80012bc <HAL_InitTick>
 800245a:	1e03      	subs	r3, r0, #0
 800245c:	d051      	beq.n	8002502 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e22c      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d030      	beq.n	80024cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800246a:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5e      	ldr	r2, [pc, #376]	@ (80025e8 <HAL_RCC_OscConfig+0x33c>)
 8002470:	4013      	ands	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	4b57      	ldr	r3, [pc, #348]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800247e:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	0049      	lsls	r1, r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe ff72 	bl	8001374 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002496:	f7fe ff6d 	bl	8001374 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e209      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4013      	ands	r3, r2
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b48      	ldr	r3, [pc, #288]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	@ (80025e4 <HAL_RCC_OscConfig+0x338>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	021a      	lsls	r2, r3, #8
 80024c4:	4b44      	ldr	r3, [pc, #272]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e01b      	b.n	8002504 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024cc:	4b42      	ldr	r3, [pc, #264]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b41      	ldr	r3, [pc, #260]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	4949      	ldr	r1, [pc, #292]	@ (80025f8 <HAL_RCC_OscConfig+0x34c>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe ff4c 	bl	8001374 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe ff47 	bl	8001374 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1e3      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f4:	4b38      	ldr	r3, [pc, #224]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x236>
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002502:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2208      	movs	r2, #8
 800250a:	4013      	ands	r3, r2
 800250c:	d047      	beq.n	800259e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800250e:	4b32      	ldr	r3, [pc, #200]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2238      	movs	r2, #56	@ 0x38
 8002514:	4013      	ands	r3, r2
 8002516:	2b18      	cmp	r3, #24
 8002518:	d10a      	bne.n	8002530 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800251a:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d03c      	beq.n	800259e <HAL_RCC_OscConfig+0x2f2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d138      	bne.n	800259e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e1c5      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d019      	beq.n	800256c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002538:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800253a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800253c:	4b26      	ldr	r3, [pc, #152]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800253e:	2101      	movs	r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe ff16 	bl	8001374 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254e:	f7fe ff11 	bl	8001374 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1ad      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d0f1      	beq.n	800254e <HAL_RCC_OscConfig+0x2a2>
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 800256e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002572:	2101      	movs	r1, #1
 8002574:	438a      	bics	r2, r1
 8002576:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fefc 	bl	8001374 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe fef7 	bl	8001374 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e193      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002594:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 8002596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d1f1      	bne.n	8002582 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2204      	movs	r2, #4
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x2fe>
 80025a8:	e0c6      	b.n	8002738 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	231f      	movs	r3, #31
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025b2:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2238      	movs	r2, #56	@ 0x38
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d11e      	bne.n	80025fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x32c>)
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d100      	bne.n	80025ca <HAL_RCC_OscConfig+0x31e>
 80025c8:	e0b6      	b.n	8002738 <HAL_RCC_OscConfig+0x48c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d000      	beq.n	80025d4 <HAL_RCC_OscConfig+0x328>
 80025d2:	e0b1      	b.n	8002738 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e171      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	fffeffff 	.word	0xfffeffff
 80025e0:	fffbffff 	.word	0xfffbffff
 80025e4:	ffff80ff 	.word	0xffff80ff
 80025e8:	ffffc7ff 	.word	0xffffc7ff
 80025ec:	00f42400 	.word	0x00f42400
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004
 80025f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025fc:	4bb1      	ldr	r3, [pc, #708]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80025fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	055b      	lsls	r3, r3, #21
 8002604:	4013      	ands	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_RCC_OscConfig+0x360>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x362>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d011      	beq.n	8002636 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4bac      	ldr	r3, [pc, #688]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002616:	4bab      	ldr	r3, [pc, #684]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	0549      	lsls	r1, r1, #21
 800261c:	430a      	orrs	r2, r1
 800261e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002620:	4ba8      	ldr	r3, [pc, #672]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	055b      	lsls	r3, r3, #21
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800262e:	231f      	movs	r3, #31
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	4ba4      	ldr	r3, [pc, #656]	@ (80028c8 <HAL_RCC_OscConfig+0x61c>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d11a      	bne.n	8002678 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002642:	4ba1      	ldr	r3, [pc, #644]	@ (80028c8 <HAL_RCC_OscConfig+0x61c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4ba0      	ldr	r3, [pc, #640]	@ (80028c8 <HAL_RCC_OscConfig+0x61c>)
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	0049      	lsls	r1, r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002650:	f7fe fe90 	bl	8001374 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe fe8b 	bl	8001374 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e127      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266c:	4b96      	ldr	r3, [pc, #600]	@ (80028c8 <HAL_RCC_OscConfig+0x61c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4013      	ands	r3, r2
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x3e2>
 8002680:	4b90      	ldr	r3, [pc, #576]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002682:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002684:	4b8f      	ldr	r3, [pc, #572]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002686:	2101      	movs	r1, #1
 8002688:	430a      	orrs	r2, r1
 800268a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800268c:	e01c      	b.n	80026c8 <HAL_RCC_OscConfig+0x41c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x404>
 8002696:	4b8b      	ldr	r3, [pc, #556]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002698:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800269a:	4b8a      	ldr	r3, [pc, #552]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800269c:	2104      	movs	r1, #4
 800269e:	430a      	orrs	r2, r1
 80026a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026a6:	4b87      	ldr	r3, [pc, #540]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x41c>
 80026b0:	4b84      	ldr	r3, [pc, #528]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026b4:	4b83      	ldr	r3, [pc, #524]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	438a      	bics	r2, r1
 80026ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026bc:	4b81      	ldr	r3, [pc, #516]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c0:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026c2:	2104      	movs	r1, #4
 80026c4:	438a      	bics	r2, r1
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d014      	beq.n	80026fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fe50 	bl	8001374 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fe4b 	bl	8001374 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a79      	ldr	r2, [pc, #484]	@ (80028cc <HAL_RCC_OscConfig+0x620>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0e6      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b75      	ldr	r3, [pc, #468]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80026f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f2:	2202      	movs	r2, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x42e>
 80026f8:	e013      	b.n	8002722 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fe3b 	bl	8001374 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002702:	e009      	b.n	8002718 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fe36 	bl	8001374 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a6f      	ldr	r2, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x620>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0d1      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002722:	231f      	movs	r3, #31
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b65      	ldr	r3, [pc, #404]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800272e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002730:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002732:	4967      	ldr	r1, [pc, #412]	@ (80028d0 <HAL_RCC_OscConfig+0x624>)
 8002734:	400a      	ands	r2, r1
 8002736:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d100      	bne.n	8002742 <HAL_RCC_OscConfig+0x496>
 8002740:	e0bb      	b.n	80028ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002742:	4b60      	ldr	r3, [pc, #384]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2238      	movs	r2, #56	@ 0x38
 8002748:	4013      	ands	r3, r2
 800274a:	2b10      	cmp	r3, #16
 800274c:	d100      	bne.n	8002750 <HAL_RCC_OscConfig+0x4a4>
 800274e:	e07b      	b.n	8002848 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d156      	bne.n	8002806 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b5a      	ldr	r3, [pc, #360]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b59      	ldr	r3, [pc, #356]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800275e:	495d      	ldr	r1, [pc, #372]	@ (80028d4 <HAL_RCC_OscConfig+0x628>)
 8002760:	400a      	ands	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fe06 	bl	8001374 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fe01 	bl	8001374 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e09d      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002780:	4b50      	ldr	r3, [pc, #320]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	049b      	lsls	r3, r3, #18
 8002788:	4013      	ands	r3, r2
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278c:	4b4d      	ldr	r3, [pc, #308]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <HAL_RCC_OscConfig+0x62c>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b8:	431a      	orrs	r2, r3
 80027ba:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b3f      	ldr	r3, [pc, #252]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	0449      	lsls	r1, r1, #17
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027d4:	2180      	movs	r1, #128	@ 0x80
 80027d6:	0549      	lsls	r1, r1, #21
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fdca 	bl	8001374 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fdc5 	bl	8001374 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e061      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f8:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	049b      	lsls	r3, r3, #18
 8002800:	4013      	ands	r3, r2
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x53a>
 8002804:	e059      	b.n	80028ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800280c:	4931      	ldr	r1, [pc, #196]	@ (80028d4 <HAL_RCC_OscConfig+0x628>)
 800280e:	400a      	ands	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fdaf 	bl	8001374 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fdaa 	bl	8001374 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e046      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282e:	4b25      	ldr	r3, [pc, #148]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	049b      	lsls	r3, r3, #18
 8002836:	4013      	ands	r3, r2
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800283a:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002840:	4926      	ldr	r1, [pc, #152]	@ (80028dc <HAL_RCC_OscConfig+0x630>)
 8002842:	400a      	ands	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	e038      	b.n	80028ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e033      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2203      	movs	r2, #3
 800285e:	401a      	ands	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	429a      	cmp	r2, r3
 8002866:	d126      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2270      	movs	r2, #112	@ 0x70
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	23fe      	movs	r3, #254	@ 0xfe
 800287a:	01db      	lsls	r3, r3, #7
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d116      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	23f8      	movs	r3, #248	@ 0xf8
 800288c:	039b      	lsls	r3, r3, #14
 800288e:	401a      	ands	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d10e      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	23e0      	movs	r3, #224	@ 0xe0
 800289c:	051b      	lsls	r3, r3, #20
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	0f5b      	lsrs	r3, r3, #29
 80028ac:	075a      	lsls	r2, r3, #29
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b008      	add	sp, #32
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	00001388 	.word	0x00001388
 80028d0:	efffffff 	.word	0xefffffff
 80028d4:	feffffff 	.word	0xfeffffff
 80028d8:	11c1808c 	.word	0x11c1808c
 80028dc:	eefefffc 	.word	0xeefefffc

080028e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0e9      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f4:	4b76      	ldr	r3, [pc, #472]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2207      	movs	r2, #7
 80028fa:	4013      	ands	r3, r2
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d91e      	bls.n	8002940 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b73      	ldr	r3, [pc, #460]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2207      	movs	r2, #7
 8002908:	4393      	bics	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	4b70      	ldr	r3, [pc, #448]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002914:	f7fe fd2e 	bl	8001374 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800291c:	e009      	b.n	8002932 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7fe fd29 	bl	8001374 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0ca      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002932:	4b67      	ldr	r3, [pc, #412]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d1ee      	bne.n	800291e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2202      	movs	r2, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d015      	beq.n	8002976 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d006      	beq.n	8002962 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002954:	4b60      	ldr	r3, [pc, #384]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 800295a:	21e0      	movs	r1, #224	@ 0xe0
 800295c:	01c9      	lsls	r1, r1, #7
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002962:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4a5d      	ldr	r2, [pc, #372]	@ (8002adc <HAL_RCC_ClockConfig+0x1fc>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4b59      	ldr	r3, [pc, #356]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	d057      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	4013      	ands	r3, r2
 8002992:	d12b      	bne.n	80029ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e097      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	049b      	lsls	r3, r3, #18
 80029a8:	4013      	ands	r3, r2
 80029aa:	d11f      	bne.n	80029ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e08b      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b8:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4013      	ands	r3, r2
 80029c2:	d113      	bne.n	80029ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e07f      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d106      	bne.n	80029de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d0:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	2202      	movs	r2, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e074      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029de:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	2202      	movs	r2, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e06d      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2207      	movs	r2, #7
 80029f2:	4393      	bics	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4b37      	ldr	r3, [pc, #220]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fe fcb8 	bl	8001374 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a08:	e009      	b.n	8002a1e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0a:	f7fe fcb3 	bl	8001374 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e054      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2238      	movs	r2, #56	@ 0x38
 8002a24:	401a      	ands	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1ec      	bne.n	8002a0a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2207      	movs	r2, #7
 8002a36:	4013      	ands	r3, r2
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d21e      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2207      	movs	r2, #7
 8002a44:	4393      	bics	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fc90 	bl	8001374 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5a:	f7fe fc8b 	bl	8001374 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e02c      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2207      	movs	r2, #7
 8002a74:	4013      	ands	r3, r2
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1ee      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2204      	movs	r2, #4
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <HAL_RCC_ClockConfig+0x200>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a9a:	f000 f829 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	0001      	movs	r1, r0
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_RCC_ClockConfig+0x204>)
 8002aac:	0092      	lsls	r2, r2, #2
 8002aae:	58d3      	ldr	r3, [r2, r3]
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	40da      	lsrs	r2, r3
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_ClockConfig+0x208>)
 8002aba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCC_ClockConfig+0x20c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fe fbfb 	bl	80012bc <HAL_InitTick>
 8002ac6:	0003      	movs	r3, r0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	00001388 	.word	0x00001388
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	fffff0ff 	.word	0xfffff0ff
 8002ae0:	ffff8fff 	.word	0xffff8fff
 8002ae4:	08005248 	.word	0x08005248
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af6:	4b3c      	ldr	r3, [pc, #240]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2238      	movs	r2, #56	@ 0x38
 8002afc:	4013      	ands	r3, r2
 8002afe:	d10f      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b00:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0adb      	lsrs	r3, r3, #11
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	4835      	ldr	r0, [pc, #212]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b16:	f7fd faf5 	bl	8000104 <__udivsi3>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e05d      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b20:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2238      	movs	r2, #56	@ 0x38
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2c:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e054      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2238      	movs	r2, #56	@ 0x38
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d138      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2203      	movs	r2, #3
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b48:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	2207      	movs	r2, #7
 8002b50:	4013      	ands	r3, r2
 8002b52:	3301      	adds	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d10d      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4824      	ldr	r0, [pc, #144]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b60:	f7fd fad0 	bl	8000104 <__udivsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	0019      	movs	r1, r3
 8002b68:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	227f      	movs	r2, #127	@ 0x7f
 8002b70:	4013      	ands	r3, r2
 8002b72:	434b      	muls	r3, r1
 8002b74:	617b      	str	r3, [r7, #20]
        break;
 8002b76:	e00d      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	481c      	ldr	r0, [pc, #112]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b7c:	f7fd fac2 	bl	8000104 <__udivsi3>
 8002b80:	0003      	movs	r3, r0
 8002b82:	0019      	movs	r1, r3
 8002b84:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	227f      	movs	r2, #127	@ 0x7f
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	434b      	muls	r3, r1
 8002b90:	617b      	str	r3, [r7, #20]
        break;
 8002b92:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0f5b      	lsrs	r3, r3, #29
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f7fd faad 	bl	8000104 <__udivsi3>
 8002baa:	0003      	movs	r3, r0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e015      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2238      	movs	r2, #56	@ 0x38
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d103      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2238      	movs	r2, #56	@ 0x38
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b18      	cmp	r3, #24
 8002bce:	d103      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bd0:	23fa      	movs	r3, #250	@ 0xfa
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e001      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bdc:	693b      	ldr	r3, [r7, #16]
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b006      	add	sp, #24
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	40021000 	.word	0x40021000
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	007a1200 	.word	0x007a1200

08002bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c0c:	f7ff fff2 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c10:	0004      	movs	r4, r0
 8002c12:	f7ff fb3f 	bl	8002294 <LL_RCC_GetAPB1Prescaler>
 8002c16:	0003      	movs	r3, r0
 8002c18:	0b1a      	lsrs	r2, r3, #12
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	58d3      	ldr	r3, [r2, r3]
 8002c20:	221f      	movs	r2, #31
 8002c22:	4013      	ands	r3, r2
 8002c24:	40dc      	lsrs	r4, r3
 8002c26:	0023      	movs	r3, r4
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	08005288 	.word	0x08005288

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c3c:	2313      	movs	r3, #19
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c44:	2312      	movs	r3, #18
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	4013      	ands	r3, r2
 8002c56:	d100      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c58:	e0a3      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2011      	movs	r0, #17
 8002c5c:	183b      	adds	r3, r7, r0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4ba5      	ldr	r3, [pc, #660]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	055b      	lsls	r3, r3, #21
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d110      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c72:	4ba1      	ldr	r3, [pc, #644]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c74:	2180      	movs	r1, #128	@ 0x80
 8002c76:	0549      	lsls	r1, r1, #21
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c7c:	4b9e      	ldr	r3, [pc, #632]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	055b      	lsls	r3, r3, #21
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	183b      	adds	r3, r7, r0
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c90:	4b9a      	ldr	r3, [pc, #616]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b99      	ldr	r3, [pc, #612]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	0049      	lsls	r1, r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe fb69 	bl	8001374 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7fe fb64 	bl	8001374 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d904      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cb6:	2313      	movs	r3, #19
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	2203      	movs	r2, #3
 8002cbc:	701a      	strb	r2, [r3, #0]
        break;
 8002cbe:	e005      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d0ed      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ccc:	2313      	movs	r3, #19
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d154      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cd6:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cda:	23c0      	movs	r3, #192	@ 0xc0
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d019      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d014      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cf2:	4b81      	ldr	r3, [pc, #516]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	4a82      	ldr	r2, [pc, #520]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d00:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d02:	2180      	movs	r1, #128	@ 0x80
 8002d04:	0249      	lsls	r1, r1, #9
 8002d06:	430a      	orrs	r2, r1
 8002d08:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d10:	497c      	ldr	r1, [pc, #496]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d16:	4b78      	ldr	r3, [pc, #480]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4013      	ands	r3, r2
 8002d22:	d016      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fb26 	bl	8001374 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2c:	e00c      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fb21 	bl	8001374 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	4a73      	ldr	r2, [pc, #460]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d904      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d3e:	2313      	movs	r3, #19
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2203      	movs	r2, #3
 8002d44:	701a      	strb	r2, [r3, #0]
            break;
 8002d46:	e004      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d0ed      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d52:	2313      	movs	r3, #19
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5c:	4b66      	ldr	r3, [pc, #408]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	4a67      	ldr	r2, [pc, #412]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d6a:	4b63      	ldr	r3, [pc, #396]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d72:	2312      	movs	r3, #18
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2213      	movs	r2, #19
 8002d78:	18ba      	adds	r2, r7, r2
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e005      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	2312      	movs	r3, #18
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2213      	movs	r2, #19
 8002d86:	18ba      	adds	r2, r7, r2
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8c:	2311      	movs	r3, #17
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b58      	ldr	r3, [pc, #352]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9c:	495b      	ldr	r1, [pc, #364]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dac:	4b52      	ldr	r3, [pc, #328]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	2203      	movs	r2, #3
 8002db2:	4393      	bics	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dca:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	4a50      	ldr	r2, [pc, #320]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	@ 0x80
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4013      	ands	r3, r2
 8002e08:	d009      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0e:	4a42      	ldr	r2, [pc, #264]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2220      	movs	r2, #32
 8002e24:	4013      	ands	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	01db      	lsls	r3, r3, #7
 8002e44:	4013      	ands	r3, r2
 8002e46:	d015      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	0899      	lsrs	r1, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	2380      	movs	r3, #128	@ 0x80
 8002e60:	05db      	lsls	r3, r3, #23
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d106      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e66:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e6c:	2180      	movs	r1, #128	@ 0x80
 8002e6e:	0249      	lsls	r1, r1, #9
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	039b      	lsls	r3, r3, #14
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d016      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	4a26      	ldr	r2, [pc, #152]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	03db      	lsls	r3, r3, #15
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ea0:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea6:	2180      	movs	r1, #128	@ 0x80
 8002ea8:	0449      	lsls	r1, r1, #17
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d016      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	01db      	lsls	r3, r3, #7
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ee0:	2180      	movs	r1, #128	@ 0x80
 8002ee2:	0249      	lsls	r1, r1, #9
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ee8:	2312      	movs	r3, #18
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
 8002f00:	fffffcff 	.word	0xfffffcff
 8002f04:	fffeffff 	.word	0xfffeffff
 8002f08:	00001388 	.word	0x00001388
 8002f0c:	efffffff 	.word	0xefffffff
 8002f10:	fffff3ff 	.word	0xfffff3ff
 8002f14:	fff3ffff 	.word	0xfff3ffff
 8002f18:	ffcfffff 	.word	0xffcfffff
 8002f1c:	ffffcfff 	.word	0xffffcfff
 8002f20:	ffbfffff 	.word	0xffbfffff
 8002f24:	ffff3fff 	.word	0xffff3fff

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e056      	b.n	8002fe8 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	223d      	movs	r2, #61	@ 0x3d
 8002f3e:	5c9b      	ldrb	r3, [r3, r2]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d113      	bne.n	8002f6e <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	223c      	movs	r2, #60	@ 0x3c
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 fabf 	bl	80044d4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a23      	ldr	r2, [pc, #140]	@ (8002ff0 <HAL_TIM_Base_Init+0xc8>)
 8002f62:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	223d      	movs	r2, #61	@ 0x3d
 8002f72:	2102      	movs	r1, #2
 8002f74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	0019      	movs	r1, r3
 8002f80:	0010      	movs	r0, r2
 8002f82:	f000 fdcd 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2248      	movs	r2, #72	@ 0x48
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223e      	movs	r2, #62	@ 0x3e
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	223f      	movs	r2, #63	@ 0x3f
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2240      	movs	r2, #64	@ 0x40
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2241      	movs	r2, #65	@ 0x41
 8002faa:	2101      	movs	r1, #1
 8002fac:	5499      	strb	r1, [r3, r2]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2242      	movs	r2, #66	@ 0x42
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2243      	movs	r2, #67	@ 0x43
 8002fba:	2101      	movs	r1, #1
 8002fbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2244      	movs	r2, #68	@ 0x44
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2245      	movs	r2, #69	@ 0x45
 8002fca:	2101      	movs	r1, #1
 8002fcc:	5499      	strb	r1, [r3, r2]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2246      	movs	r2, #70	@ 0x46
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2247      	movs	r2, #71	@ 0x47
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	223d      	movs	r2, #61	@ 0x3d
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b002      	add	sp, #8
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	08000ea9 	.word	0x08000ea9

08002ff4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e056      	b.n	80030b4 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	223d      	movs	r2, #61	@ 0x3d
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d113      	bne.n	800303a <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223c      	movs	r2, #60	@ 0x3c
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f001 fa59 	bl	80044d4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <HAL_TIM_OC_Init+0xc8>)
 800302e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	0010      	movs	r0, r2
 8003038:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	223d      	movs	r2, #61	@ 0x3d
 800303e:	2102      	movs	r1, #2
 8003040:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	0019      	movs	r1, r3
 800304c:	0010      	movs	r0, r2
 800304e:	f000 fd67 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2248      	movs	r2, #72	@ 0x48
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223e      	movs	r2, #62	@ 0x3e
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223f      	movs	r2, #63	@ 0x3f
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	@ 0x40
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2241      	movs	r2, #65	@ 0x41
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2242      	movs	r2, #66	@ 0x42
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2243      	movs	r2, #67	@ 0x43
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2244      	movs	r2, #68	@ 0x44
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2245      	movs	r2, #69	@ 0x45
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2246      	movs	r2, #70	@ 0x46
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2247      	movs	r2, #71	@ 0x47
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	223d      	movs	r2, #61	@ 0x3d
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	080030c1 	.word	0x080030c1

080030c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80030c8:	46c0      	nop			@ (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e056      	b.n	8003190 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223d      	movs	r2, #61	@ 0x3d
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223c      	movs	r2, #60	@ 0x3c
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f001 f9eb 	bl	80044d4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a23      	ldr	r2, [pc, #140]	@ (8003198 <HAL_TIM_PWM_Init+0xc8>)
 800310a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	0010      	movs	r0, r2
 8003114:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	223d      	movs	r2, #61	@ 0x3d
 800311a:	2102      	movs	r1, #2
 800311c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	0019      	movs	r1, r3
 8003128:	0010      	movs	r0, r2
 800312a:	f000 fcf9 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2248      	movs	r2, #72	@ 0x48
 8003132:	2101      	movs	r1, #1
 8003134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	223e      	movs	r2, #62	@ 0x3e
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	223f      	movs	r2, #63	@ 0x3f
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2240      	movs	r2, #64	@ 0x40
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2241      	movs	r2, #65	@ 0x41
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2242      	movs	r2, #66	@ 0x42
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2243      	movs	r2, #67	@ 0x43
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2244      	movs	r2, #68	@ 0x44
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2245      	movs	r2, #69	@ 0x45
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2246      	movs	r2, #70	@ 0x46
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2247      	movs	r2, #71	@ 0x47
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	223d      	movs	r2, #61	@ 0x3d
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}
 8003198:	08000e3d 	.word	0x08000e3d

0800319c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e056      	b.n	800325c <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	223d      	movs	r2, #61	@ 0x3d
 80031b2:	5c9b      	ldrb	r3, [r3, r2]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d113      	bne.n	80031e2 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	223c      	movs	r2, #60	@ 0x3c
 80031be:	2100      	movs	r1, #0
 80031c0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 f985 	bl	80044d4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_TIM_IC_Init+0xc8>)
 80031d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	0010      	movs	r0, r2
 80031e0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223d      	movs	r2, #61	@ 0x3d
 80031e6:	2102      	movs	r1, #2
 80031e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f000 fc93 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2248      	movs	r2, #72	@ 0x48
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223e      	movs	r2, #62	@ 0x3e
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	223f      	movs	r2, #63	@ 0x3f
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2240      	movs	r2, #64	@ 0x40
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2241      	movs	r2, #65	@ 0x41
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2242      	movs	r2, #66	@ 0x42
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2243      	movs	r2, #67	@ 0x43
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2244      	movs	r2, #68	@ 0x44
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2245      	movs	r2, #69	@ 0x45
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2246      	movs	r2, #70	@ 0x46
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2247      	movs	r2, #71	@ 0x47
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223d      	movs	r2, #61	@ 0x3d
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08003269 	.word	0x08003269

08003268 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d027      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d023      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4252      	negs	r2, r2
 80032a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2203      	movs	r2, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	d006      	beq.n	80032ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2294      	movs	r2, #148	@ 0x94
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	0010      	movs	r0, r2
 80032c6:	4798      	blx	r3
 80032c8:	e00b      	b.n	80032e2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	229c      	movs	r2, #156	@ 0x9c
 80032ce:	589b      	ldr	r3, [r3, r2]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	0010      	movs	r0, r2
 80032d4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	22a0      	movs	r2, #160	@ 0xa0
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	0010      	movs	r0, r2
 80032e0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	d028      	beq.n	8003342 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	d024      	beq.n	8003342 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2205      	movs	r2, #5
 80032fe:	4252      	negs	r2, r2
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	23c0      	movs	r3, #192	@ 0xc0
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4013      	ands	r3, r2
 8003314:	d006      	beq.n	8003324 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2294      	movs	r2, #148	@ 0x94
 800331a:	589b      	ldr	r3, [r3, r2]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	0010      	movs	r0, r2
 8003320:	4798      	blx	r3
 8003322:	e00b      	b.n	800333c <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	229c      	movs	r2, #156	@ 0x9c
 8003328:	589b      	ldr	r3, [r3, r2]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	0010      	movs	r0, r2
 800332e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	22a0      	movs	r2, #160	@ 0xa0
 8003334:	589b      	ldr	r3, [r3, r2]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	0010      	movs	r0, r2
 800333a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2208      	movs	r2, #8
 8003346:	4013      	ands	r3, r2
 8003348:	d027      	beq.n	800339a <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2208      	movs	r2, #8
 800334e:	4013      	ands	r3, r2
 8003350:	d023      	beq.n	800339a <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2209      	movs	r2, #9
 8003358:	4252      	negs	r2, r2
 800335a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2204      	movs	r2, #4
 8003360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2203      	movs	r2, #3
 800336a:	4013      	ands	r3, r2
 800336c:	d006      	beq.n	800337c <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2294      	movs	r2, #148	@ 0x94
 8003372:	589b      	ldr	r3, [r3, r2]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	0010      	movs	r0, r2
 8003378:	4798      	blx	r3
 800337a:	e00b      	b.n	8003394 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	229c      	movs	r2, #156	@ 0x9c
 8003380:	589b      	ldr	r3, [r3, r2]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	0010      	movs	r0, r2
 8003386:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	22a0      	movs	r2, #160	@ 0xa0
 800338c:	589b      	ldr	r3, [r3, r2]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0010      	movs	r0, r2
 8003392:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2210      	movs	r2, #16
 800339e:	4013      	ands	r3, r2
 80033a0:	d028      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	4013      	ands	r3, r2
 80033a8:	d024      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2211      	movs	r2, #17
 80033b0:	4252      	negs	r2, r2
 80033b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2208      	movs	r2, #8
 80033b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	23c0      	movs	r3, #192	@ 0xc0
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d006      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2294      	movs	r2, #148	@ 0x94
 80033cc:	589b      	ldr	r3, [r3, r2]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	0010      	movs	r0, r2
 80033d2:	4798      	blx	r3
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	229c      	movs	r2, #156	@ 0x9c
 80033da:	589b      	ldr	r3, [r3, r2]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	0010      	movs	r0, r2
 80033e0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	22a0      	movs	r2, #160	@ 0xa0
 80033e6:	589b      	ldr	r3, [r3, r2]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	0010      	movs	r0, r2
 80033ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2201      	movs	r2, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	4013      	ands	r3, r2
 8003402:	d00a      	beq.n	800341a <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2202      	movs	r2, #2
 800340a:	4252      	negs	r2, r2
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2284      	movs	r2, #132	@ 0x84
 8003412:	589b      	ldr	r3, [r3, r2]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	0010      	movs	r0, r2
 8003418:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2280      	movs	r2, #128	@ 0x80
 800341e:	4013      	ands	r3, r2
 8003420:	d104      	bne.n	800342c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	019b      	lsls	r3, r3, #6
 8003428:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800342a:	d00d      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2280      	movs	r2, #128	@ 0x80
 8003430:	4013      	ands	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <HAL_TIM_IRQHandler+0x24c>)
 800343a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	22b4      	movs	r2, #180	@ 0xb4
 8003440:	589b      	ldr	r3, [r3, r2]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	0010      	movs	r0, r2
 8003446:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4013      	ands	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2280      	movs	r2, #128	@ 0x80
 8003456:	4013      	ands	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_TIM_IRQHandler+0x250>)
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	22b8      	movs	r2, #184	@ 0xb8
 8003466:	589b      	ldr	r3, [r3, r2]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	0010      	movs	r0, r2
 800346c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2240      	movs	r2, #64	@ 0x40
 8003472:	4013      	ands	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2240      	movs	r2, #64	@ 0x40
 800347a:	4013      	ands	r3, r2
 800347c:	d00a      	beq.n	8003494 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2241      	movs	r2, #65	@ 0x41
 8003484:	4252      	negs	r2, r2
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	228c      	movs	r2, #140	@ 0x8c
 800348c:	589b      	ldr	r3, [r3, r2]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	0010      	movs	r0, r2
 8003492:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2220      	movs	r2, #32
 8003498:	4013      	ands	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00a      	beq.n	80034ba <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2221      	movs	r2, #33	@ 0x21
 80034aa:	4252      	negs	r2, r2
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	22ac      	movs	r2, #172	@ 0xac
 80034b2:	589b      	ldr	r3, [r3, r2]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	0010      	movs	r0, r2
 80034b8:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	ffffdf7f 	.word	0xffffdf7f
 80034c8:	fffffeff 	.word	0xfffffeff

080034cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2317      	movs	r3, #23
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	223c      	movs	r2, #60	@ 0x3c
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_OC_ConfigChannel+0x22>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e048      	b.n	8003580 <HAL_TIM_OC_ConfigChannel+0xb4>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	223c      	movs	r2, #60	@ 0x3c
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b14      	cmp	r3, #20
 80034fa:	d835      	bhi.n	8003568 <HAL_TIM_OC_ConfigChannel+0x9c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	009a      	lsls	r2, r3, #2
 8003500:	4b21      	ldr	r3, [pc, #132]	@ (8003588 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003502:	18d3      	adds	r3, r2, r3
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f000 fb89 	bl	8003c28 <TIM_OC1_SetConfig>
      break;
 8003516:	e02c      	b.n	8003572 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fc01 	bl	8003d28 <TIM_OC2_SetConfig>
      break;
 8003526:	e024      	b.n	8003572 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fc77 	bl	8003e24 <TIM_OC3_SetConfig>
      break;
 8003536:	e01c      	b.n	8003572 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fcf1 	bl	8003f28 <TIM_OC4_SetConfig>
      break;
 8003546:	e014      	b.n	8003572 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	0011      	movs	r1, r2
 8003550:	0018      	movs	r0, r3
 8003552:	f000 fd4d 	bl	8003ff0 <TIM_OC5_SetConfig>
      break;
 8003556:	e00c      	b.n	8003572 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	0011      	movs	r1, r2
 8003560:	0018      	movs	r0, r3
 8003562:	f000 fd9f 	bl	80040a4 <TIM_OC6_SetConfig>
      break;
 8003566:	e004      	b.n	8003572 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003568:	2317      	movs	r3, #23
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
      break;
 8003570:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	223c      	movs	r2, #60	@ 0x3c
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]

  return status;
 800357a:	2317      	movs	r3, #23
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}
 8003588:	080052a8 	.word	0x080052a8

0800358c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2317      	movs	r3, #23
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	223c      	movs	r2, #60	@ 0x3c
 80035a4:	5c9b      	ldrb	r3, [r3, r2]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_IC_ConfigChannel+0x22>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e08c      	b.n	80036c8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	223c      	movs	r2, #60	@ 0x3c
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035cc:	f000 fdc8 	bl	8004160 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	210c      	movs	r1, #12
 80035dc:	438a      	bics	r2, r1
 80035de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
 80035f2:	e062      	b.n	80036ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d11c      	bne.n	8003634 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800360a:	f000 fe2d 	bl	8004268 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	492d      	ldr	r1, [pc, #180]	@ (80036d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800361a:	400a      	ands	r2, r1
 800361c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6999      	ldr	r1, [r3, #24]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
 8003632:	e042      	b.n	80036ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11b      	bne.n	8003672 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800364a:	f000 fe81 	bl	8004350 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	210c      	movs	r1, #12
 800365a:	438a      	bics	r2, r1
 800365c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	61da      	str	r2, [r3, #28]
 8003670:	e023      	b.n	80036ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d11c      	bne.n	80036b2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003688:	f000 fea2 	bl	80043d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	490e      	ldr	r1, [pc, #56]	@ (80036d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003698:	400a      	ands	r2, r1
 800369a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69d9      	ldr	r1, [r3, #28]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	61da      	str	r2, [r3, #28]
 80036b0:	e003      	b.n	80036ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80036b2:	2317      	movs	r3, #23
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	223c      	movs	r2, #60	@ 0x3c
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

  return status;
 80036c2:	2317      	movs	r3, #23
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	781b      	ldrb	r3, [r3, #0]
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b006      	add	sp, #24
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffff3ff 	.word	0xfffff3ff

080036d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2317      	movs	r3, #23
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	223c      	movs	r2, #60	@ 0x3c
 80036ec:	5c9b      	ldrb	r3, [r3, r2]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e0e5      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	223c      	movs	r2, #60	@ 0x3c
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b14      	cmp	r3, #20
 8003702:	d900      	bls.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003704:	e0d1      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	009a      	lsls	r2, r3, #2
 800370a:	4b70      	ldr	r3, [pc, #448]	@ (80038cc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fa84 	bl	8003c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2108      	movs	r1, #8
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]
      break;
 8003752:	e0af      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fae3 	bl	8003d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0109      	lsls	r1, r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4954      	ldr	r1, [pc, #336]	@ (80038d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003780:	400a      	ands	r2, r1
 8003782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6999      	ldr	r1, [r3, #24]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	619a      	str	r2, [r3, #24]
      break;
 8003798:	e08c      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fb3e 	bl	8003e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2108      	movs	r1, #8
 80037b4:	430a      	orrs	r2, r1
 80037b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2104      	movs	r1, #4
 80037c4:	438a      	bics	r2, r1
 80037c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69d9      	ldr	r1, [r3, #28]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	61da      	str	r2, [r3, #28]
      break;
 80037da:	e06b      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fb9f 	bl	8003f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2180      	movs	r1, #128	@ 0x80
 80037f6:	0109      	lsls	r1, r1, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4932      	ldr	r1, [pc, #200]	@ (80038d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003808:	400a      	ands	r2, r1
 800380a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69d9      	ldr	r1, [r3, #28]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	61da      	str	r2, [r3, #28]
      break;
 8003820:	e048      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fbe0 	bl	8003ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2108      	movs	r1, #8
 800383c:	430a      	orrs	r2, r1
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2104      	movs	r1, #4
 800384c:	438a      	bics	r2, r1
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003862:	e027      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	0011      	movs	r1, r2
 800386c:	0018      	movs	r0, r3
 800386e:	f000 fc19 	bl	80040a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2180      	movs	r1, #128	@ 0x80
 800387e:	0109      	lsls	r1, r1, #4
 8003880:	430a      	orrs	r2, r1
 8003882:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4910      	ldr	r1, [pc, #64]	@ (80038d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003890:	400a      	ands	r2, r1
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	021a      	lsls	r2, r3, #8
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038a8:	e004      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80038aa:	2317      	movs	r3, #23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
      break;
 80038b2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	223c      	movs	r2, #60	@ 0x3c
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

  return status;
 80038bc:	2317      	movs	r3, #23
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b006      	add	sp, #24
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	080052fc 	.word	0x080052fc
 80038d0:	fffffbff 	.word	0xfffffbff

080038d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	230f      	movs	r3, #15
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	223c      	movs	r2, #60	@ 0x3c
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_TIM_ConfigClockSource+0x20>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0bc      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x19a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223c      	movs	r2, #60	@ 0x3c
 80038f8:	2101      	movs	r1, #1
 80038fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	223d      	movs	r2, #61	@ 0x3d
 8003900:	2102      	movs	r1, #2
 8003902:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4a5a      	ldr	r2, [pc, #360]	@ (8003a78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4a59      	ldr	r2, [pc, #356]	@ (8003a7c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	0192      	lsls	r2, r2, #6
 800392c:	4293      	cmp	r3, r2
 800392e:	d040      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0xde>
 8003930:	2280      	movs	r2, #128	@ 0x80
 8003932:	0192      	lsls	r2, r2, #6
 8003934:	4293      	cmp	r3, r2
 8003936:	d900      	bls.n	800393a <HAL_TIM_ConfigClockSource+0x66>
 8003938:	e088      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	0152      	lsls	r2, r2, #5
 800393e:	4293      	cmp	r3, r2
 8003940:	d100      	bne.n	8003944 <HAL_TIM_ConfigClockSource+0x70>
 8003942:	e088      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x182>
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	0152      	lsls	r2, r2, #5
 8003948:	4293      	cmp	r3, r2
 800394a:	d900      	bls.n	800394e <HAL_TIM_ConfigClockSource+0x7a>
 800394c:	e07e      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 800394e:	2b70      	cmp	r3, #112	@ 0x70
 8003950:	d018      	beq.n	8003984 <HAL_TIM_ConfigClockSource+0xb0>
 8003952:	d900      	bls.n	8003956 <HAL_TIM_ConfigClockSource+0x82>
 8003954:	e07a      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 8003956:	2b60      	cmp	r3, #96	@ 0x60
 8003958:	d04f      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x126>
 800395a:	d900      	bls.n	800395e <HAL_TIM_ConfigClockSource+0x8a>
 800395c:	e076      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 800395e:	2b50      	cmp	r3, #80	@ 0x50
 8003960:	d03b      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x106>
 8003962:	d900      	bls.n	8003966 <HAL_TIM_ConfigClockSource+0x92>
 8003964:	e072      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 8003966:	2b40      	cmp	r3, #64	@ 0x40
 8003968:	d057      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x146>
 800396a:	d900      	bls.n	800396e <HAL_TIM_ConfigClockSource+0x9a>
 800396c:	e06e      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 800396e:	2b30      	cmp	r3, #48	@ 0x30
 8003970:	d063      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x166>
 8003972:	d86b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d060      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x166>
 8003978:	d868      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d05d      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x166>
 800397e:	2b10      	cmp	r3, #16
 8003980:	d05b      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x166>
 8003982:	e063      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003994:	f000 fd7e 	bl	8004494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2277      	movs	r2, #119	@ 0x77
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	609a      	str	r2, [r3, #8]
      break;
 80039b0:	e052      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c2:	f000 fd67 	bl	8004494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	01c9      	lsls	r1, r1, #7
 80039d4:	430a      	orrs	r2, r1
 80039d6:	609a      	str	r2, [r3, #8]
      break;
 80039d8:	e03e      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	001a      	movs	r2, r3
 80039e8:	f000 fc10 	bl	800420c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2150      	movs	r1, #80	@ 0x50
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 fd32 	bl	800445c <TIM_ITRx_SetConfig>
      break;
 80039f8:	e02e      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a06:	001a      	movs	r2, r3
 8003a08:	f000 fc70 	bl	80042ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2160      	movs	r1, #96	@ 0x60
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fd22 	bl	800445c <TIM_ITRx_SetConfig>
      break;
 8003a18:	e01e      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	001a      	movs	r2, r3
 8003a28:	f000 fbf0 	bl	800420c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2140      	movs	r1, #64	@ 0x40
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 fd12 	bl	800445c <TIM_ITRx_SetConfig>
      break;
 8003a38:	e00e      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0019      	movs	r1, r3
 8003a44:	0010      	movs	r0, r2
 8003a46:	f000 fd09 	bl	800445c <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e005      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
      break;
 8003a54:	e000      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a56:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	223d      	movs	r2, #61	@ 0x3d
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223c      	movs	r2, #60	@ 0x3c
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]

  return status;
 8003a68:	230f      	movs	r3, #15
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	ffceff88 	.word	0xffceff88
 8003a7c:	ffff00ff 	.word	0xffff00ff

08003a80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b002      	add	sp, #8
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003ac8:	46c0      	nop			@ (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad8:	46c0      	nop			@ (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af8:	46c0      	nop			@ (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b002      	add	sp, #8
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003b08:	46c0      	nop			@ (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a37      	ldr	r2, [pc, #220]	@ (8003c10 <TIM_Base_SetConfig+0xf0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d008      	beq.n	8003b4a <TIM_Base_SetConfig+0x2a>
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	05db      	lsls	r3, r3, #23
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0x2a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a33      	ldr	r2, [pc, #204]	@ (8003c14 <TIM_Base_SetConfig+0xf4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2270      	movs	r2, #112	@ 0x70
 8003b4e:	4393      	bics	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c10 <TIM_Base_SetConfig+0xf0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d014      	beq.n	8003b8e <TIM_Base_SetConfig+0x6e>
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	05db      	lsls	r3, r3, #23
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0x6e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a28      	ldr	r2, [pc, #160]	@ (8003c14 <TIM_Base_SetConfig+0xf4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0x6e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a27      	ldr	r2, [pc, #156]	@ (8003c18 <TIM_Base_SetConfig+0xf8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0x6e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a26      	ldr	r2, [pc, #152]	@ (8003c1c <TIM_Base_SetConfig+0xfc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0x6e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a25      	ldr	r2, [pc, #148]	@ (8003c20 <TIM_Base_SetConfig+0x100>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a24      	ldr	r2, [pc, #144]	@ (8003c24 <TIM_Base_SetConfig+0x104>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2280      	movs	r2, #128	@ 0x80
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a11      	ldr	r2, [pc, #68]	@ (8003c10 <TIM_Base_SetConfig+0xf0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <TIM_Base_SetConfig+0xbe>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a12      	ldr	r2, [pc, #72]	@ (8003c1c <TIM_Base_SetConfig+0xfc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_Base_SetConfig+0xbe>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a11      	ldr	r2, [pc, #68]	@ (8003c20 <TIM_Base_SetConfig+0x100>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d103      	bne.n	8003be6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4393      	bics	r3, r2
 8003c00:	001a      	movs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]
  }
}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40002000 	.word	0x40002000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800
 8003c24:	fffffcff 	.word	0xfffffcff

08003c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4393      	bics	r3, r2
 8003c40:	001a      	movs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a2e      	ldr	r2, [pc, #184]	@ (8003d10 <TIM_OC1_SetConfig+0xe8>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	4393      	bics	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4393      	bics	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a24      	ldr	r2, [pc, #144]	@ (8003d14 <TIM_OC1_SetConfig+0xec>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_OC1_SetConfig+0x6e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a23      	ldr	r2, [pc, #140]	@ (8003d18 <TIM_OC1_SetConfig+0xf0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC1_SetConfig+0x6e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <TIM_OC1_SetConfig+0xf4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10c      	bne.n	8003cb0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2204      	movs	r2, #4
 8003cac:	4393      	bics	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <TIM_OC1_SetConfig+0xec>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_OC1_SetConfig+0xa0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a17      	ldr	r2, [pc, #92]	@ (8003d18 <TIM_OC1_SetConfig+0xf0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC1_SetConfig+0xa0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a16      	ldr	r2, [pc, #88]	@ (8003d1c <TIM_OC1_SetConfig+0xf4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d111      	bne.n	8003cec <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4a15      	ldr	r2, [pc, #84]	@ (8003d20 <TIM_OC1_SetConfig+0xf8>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <TIM_OC1_SetConfig+0xfc>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b006      	add	sp, #24
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	fffeff8f 	.word	0xfffeff8f
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800
 8003d20:	fffffeff 	.word	0xfffffeff
 8003d24:	fffffdff 	.word	0xfffffdff

08003d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	4393      	bics	r3, r2
 8003d40:	001a      	movs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	@ (8003e08 <TIM_OC2_SetConfig+0xe0>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <TIM_OC2_SetConfig+0xe4>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2220      	movs	r2, #32
 8003d72:	4393      	bics	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a22      	ldr	r2, [pc, #136]	@ (8003e10 <TIM_OC2_SetConfig+0xe8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10d      	bne.n	8003da6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2280      	movs	r2, #128	@ 0x80
 8003d8e:	4393      	bics	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2240      	movs	r2, #64	@ 0x40
 8003da2:	4393      	bics	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <TIM_OC2_SetConfig+0xe8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_OC2_SetConfig+0x96>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <TIM_OC2_SetConfig+0xec>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC2_SetConfig+0x96>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <TIM_OC2_SetConfig+0xf0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <TIM_OC2_SetConfig+0xf4>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <TIM_OC2_SetConfig+0xf8>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b006      	add	sp, #24
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	feff8fff 	.word	0xfeff8fff
 8003e0c:	fffffcff 	.word	0xfffffcff
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800
 8003e1c:	fffffbff 	.word	0xfffffbff
 8003e20:	fffff7ff 	.word	0xfffff7ff

08003e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a31      	ldr	r2, [pc, #196]	@ (8003f00 <TIM_OC3_SetConfig+0xdc>)
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <TIM_OC3_SetConfig+0xe0>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2203      	movs	r2, #3
 8003e58:	4393      	bics	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4a27      	ldr	r2, [pc, #156]	@ (8003f08 <TIM_OC3_SetConfig+0xe4>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	@ (8003f0c <TIM_OC3_SetConfig+0xe8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10d      	bne.n	8003e9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4a22      	ldr	r2, [pc, #136]	@ (8003f10 <TIM_OC3_SetConfig+0xec>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <TIM_OC3_SetConfig+0xf0>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <TIM_OC3_SetConfig+0xe8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_OC3_SetConfig+0x92>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <TIM_OC3_SetConfig+0xf4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_OC3_SetConfig+0x92>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f1c <TIM_OC3_SetConfig+0xf8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d113      	bne.n	8003ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4a19      	ldr	r2, [pc, #100]	@ (8003f20 <TIM_OC3_SetConfig+0xfc>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <TIM_OC3_SetConfig+0x100>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	46c0      	nop			@ (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b006      	add	sp, #24
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	fffffeff 	.word	0xfffffeff
 8003f04:	fffeff8f 	.word	0xfffeff8f
 8003f08:	fffffdff 	.word	0xfffffdff
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	fffff7ff 	.word	0xfffff7ff
 8003f14:	fffffbff 	.word	0xfffffbff
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800
 8003f20:	ffffefff 	.word	0xffffefff
 8003f24:	ffffdfff 	.word	0xffffdfff

08003f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <TIM_OC4_SetConfig+0xa8>)
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a20      	ldr	r2, [pc, #128]	@ (8003fd4 <TIM_OC4_SetConfig+0xac>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <TIM_OC4_SetConfig+0xb0>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <TIM_OC4_SetConfig+0xb4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a17      	ldr	r2, [pc, #92]	@ (8003fe0 <TIM_OC4_SetConfig+0xb8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_OC4_SetConfig+0x70>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	@ (8003fe4 <TIM_OC4_SetConfig+0xbc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC4_SetConfig+0x70>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <TIM_OC4_SetConfig+0xc0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4a14      	ldr	r2, [pc, #80]	@ (8003fec <TIM_OC4_SetConfig+0xc4>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b006      	add	sp, #24
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	ffffefff 	.word	0xffffefff
 8003fd4:	feff8fff 	.word	0xfeff8fff
 8003fd8:	fffffcff 	.word	0xfffffcff
 8003fdc:	ffffdfff 	.word	0xffffdfff
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	40014800 	.word	0x40014800
 8003fec:	ffffbfff 	.word	0xffffbfff

08003ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4a21      	ldr	r2, [pc, #132]	@ (800408c <TIM_OC5_SetConfig+0x9c>)
 8004006:	401a      	ands	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <TIM_OC5_SetConfig+0xa0>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <TIM_OC5_SetConfig+0xa4>)
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a15      	ldr	r2, [pc, #84]	@ (8004098 <TIM_OC5_SetConfig+0xa8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_OC5_SetConfig+0x66>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a14      	ldr	r2, [pc, #80]	@ (800409c <TIM_OC5_SetConfig+0xac>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC5_SetConfig+0x66>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a13      	ldr	r2, [pc, #76]	@ (80040a0 <TIM_OC5_SetConfig+0xb0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d109      	bne.n	800406a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4a0c      	ldr	r2, [pc, #48]	@ (800408c <TIM_OC5_SetConfig+0x9c>)
 800405a:	4013      	ands	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b006      	add	sp, #24
 800408a:	bd80      	pop	{r7, pc}
 800408c:	fffeffff 	.word	0xfffeffff
 8004090:	fffeff8f 	.word	0xfffeff8f
 8004094:	fffdffff 	.word	0xfffdffff
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a22      	ldr	r2, [pc, #136]	@ (8004144 <TIM_OC6_SetConfig+0xa0>)
 80040ba:	401a      	ands	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004148 <TIM_OC6_SetConfig+0xa4>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <TIM_OC6_SetConfig+0xa8>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	051b      	lsls	r3, r3, #20
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a16      	ldr	r2, [pc, #88]	@ (8004150 <TIM_OC6_SetConfig+0xac>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_OC6_SetConfig+0x68>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a15      	ldr	r2, [pc, #84]	@ (8004154 <TIM_OC6_SetConfig+0xb0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC6_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a14      	ldr	r2, [pc, #80]	@ (8004158 <TIM_OC6_SetConfig+0xb4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4a13      	ldr	r2, [pc, #76]	@ (800415c <TIM_OC6_SetConfig+0xb8>)
 8004110:	4013      	ands	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b006      	add	sp, #24
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	ffefffff 	.word	0xffefffff
 8004148:	feff8fff 	.word	0xfeff8fff
 800414c:	ffdfffff 	.word	0xffdfffff
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	fffbffff 	.word	0xfffbffff

08004160 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	2201      	movs	r2, #1
 800417a:	4393      	bics	r3, r2
 800417c:	001a      	movs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a1e      	ldr	r2, [pc, #120]	@ (8004204 <TIM_TI1_SetConfig+0xa4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d008      	beq.n	80041a2 <TIM_TI1_SetConfig+0x42>
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	05db      	lsls	r3, r3, #23
 8004196:	429a      	cmp	r2, r3
 8004198:	d003      	beq.n	80041a2 <TIM_TI1_SetConfig+0x42>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a1a      	ldr	r2, [pc, #104]	@ (8004208 <TIM_TI1_SetConfig+0xa8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <TIM_TI1_SetConfig+0x46>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <TIM_TI1_SetConfig+0x48>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2203      	movs	r2, #3
 80041b0:	4393      	bics	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e003      	b.n	80041c6 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	22f0      	movs	r2, #240	@ 0xf0
 80041ca:	4393      	bics	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	22ff      	movs	r2, #255	@ 0xff
 80041d4:	4013      	ands	r3, r2
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	220a      	movs	r2, #10
 80041e0:	4393      	bics	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	220a      	movs	r2, #10
 80041e8:	4013      	ands	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40000400 	.word	0x40000400

0800420c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2201      	movs	r2, #1
 8004224:	4393      	bics	r3, r2
 8004226:	001a      	movs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	22f0      	movs	r2, #240	@ 0xf0
 8004236:	4393      	bics	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	220a      	movs	r2, #10
 8004248:	4393      	bics	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	46c0      	nop			@ (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b006      	add	sp, #24
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	2210      	movs	r2, #16
 8004282:	4393      	bics	r3, r2
 8004284:	001a      	movs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4a14      	ldr	r2, [pc, #80]	@ (80042e4 <TIM_TI2_SetConfig+0x7c>)
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4a10      	ldr	r2, [pc, #64]	@ (80042e8 <TIM_TI2_SetConfig+0x80>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	22a0      	movs	r2, #160	@ 0xa0
 80042bc:	4393      	bics	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	22a0      	movs	r2, #160	@ 0xa0
 80042c6:	4013      	ands	r3, r2
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b006      	add	sp, #24
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	fffffcff 	.word	0xfffffcff
 80042e8:	ffff0fff 	.word	0xffff0fff

080042ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	2210      	movs	r2, #16
 8004304:	4393      	bics	r3, r2
 8004306:	001a      	movs	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4a0d      	ldr	r2, [pc, #52]	@ (800434c <TIM_TI2_ConfigInputStage+0x60>)
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	031b      	lsls	r3, r3, #12
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	22a0      	movs	r2, #160	@ 0xa0
 8004328:	4393      	bics	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b006      	add	sp, #24
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	ffff0fff 	.word	0xffff0fff

08004350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <TIM_TI3_SetConfig+0x78>)
 800436a:	401a      	ands	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2203      	movs	r2, #3
 800437a:	4393      	bics	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	22f0      	movs	r2, #240	@ 0xf0
 800438a:	4393      	bics	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	22ff      	movs	r2, #255	@ 0xff
 8004394:	4013      	ands	r3, r2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4a0b      	ldr	r2, [pc, #44]	@ (80043cc <TIM_TI3_SetConfig+0x7c>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	23a0      	movs	r3, #160	@ 0xa0
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b006      	add	sp, #24
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	fffffeff 	.word	0xfffffeff
 80043cc:	fffff5ff 	.word	0xfffff5ff

080043d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4a18      	ldr	r2, [pc, #96]	@ (800444c <TIM_TI4_SetConfig+0x7c>)
 80043ea:	401a      	ands	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4a15      	ldr	r2, [pc, #84]	@ (8004450 <TIM_TI4_SetConfig+0x80>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4a12      	ldr	r2, [pc, #72]	@ (8004454 <TIM_TI4_SetConfig+0x84>)
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	031b      	lsls	r3, r3, #12
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <TIM_TI4_SetConfig+0x88>)
 8004422:	4013      	ands	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	031a      	lsls	r2, r3, #12
 800442a:	23a0      	movs	r3, #160	@ 0xa0
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	4013      	ands	r3, r2
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b006      	add	sp, #24
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	ffffefff 	.word	0xffffefff
 8004450:	fffffcff 	.word	0xfffffcff
 8004454:	ffff0fff 	.word	0xffff0fff
 8004458:	ffff5fff 	.word	0xffff5fff

0800445c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <TIM_ITRx_SetConfig+0x34>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	2207      	movs	r2, #7
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	609a      	str	r2, [r3, #8]
}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b004      	add	sp, #16
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	ffcfff8f 	.word	0xffcfff8f

08004494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <TIM_ETR_SetConfig+0x3c>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	46c0      	nop			@ (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b006      	add	sp, #24
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	ffff00ff 	.word	0xffff00ff

080044d4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2184      	movs	r1, #132	@ 0x84
 80044e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <TIM_ResetCallback+0x80>)
 80044e2:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2188      	movs	r1, #136	@ 0x88
 80044e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <TIM_ResetCallback+0x84>)
 80044ea:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	218c      	movs	r1, #140	@ 0x8c
 80044f0:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <TIM_ResetCallback+0x88>)
 80044f2:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2190      	movs	r1, #144	@ 0x90
 80044f8:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <TIM_ResetCallback+0x8c>)
 80044fa:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2194      	movs	r1, #148	@ 0x94
 8004500:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <TIM_ResetCallback+0x90>)
 8004502:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2198      	movs	r1, #152	@ 0x98
 8004508:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <TIM_ResetCallback+0x94>)
 800450a:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	219c      	movs	r1, #156	@ 0x9c
 8004510:	4a16      	ldr	r2, [pc, #88]	@ (800456c <TIM_ResetCallback+0x98>)
 8004512:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	21a0      	movs	r1, #160	@ 0xa0
 8004518:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <TIM_ResetCallback+0x9c>)
 800451a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	21a4      	movs	r1, #164	@ 0xa4
 8004520:	4a14      	ldr	r2, [pc, #80]	@ (8004574 <TIM_ResetCallback+0xa0>)
 8004522:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	21a8      	movs	r1, #168	@ 0xa8
 8004528:	4a13      	ldr	r2, [pc, #76]	@ (8004578 <TIM_ResetCallback+0xa4>)
 800452a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	21ac      	movs	r1, #172	@ 0xac
 8004530:	4a12      	ldr	r2, [pc, #72]	@ (800457c <TIM_ResetCallback+0xa8>)
 8004532:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	21b0      	movs	r1, #176	@ 0xb0
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <TIM_ResetCallback+0xac>)
 800453a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	21b4      	movs	r1, #180	@ 0xb4
 8004540:	4a10      	ldr	r2, [pc, #64]	@ (8004584 <TIM_ResetCallback+0xb0>)
 8004542:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	21b8      	movs	r1, #184	@ 0xb8
 8004548:	4a0f      	ldr	r2, [pc, #60]	@ (8004588 <TIM_ResetCallback+0xb4>)
 800454a:	505a      	str	r2, [r3, r1]
}
 800454c:	46c0      	nop			@ (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}
 8004554:	08003a81 	.word	0x08003a81
 8004558:	08003a91 	.word	0x08003a91
 800455c:	08003af1 	.word	0x08003af1
 8004560:	08003b01 	.word	0x08003b01
 8004564:	08003ab1 	.word	0x08003ab1
 8004568:	08003ac1 	.word	0x08003ac1
 800456c:	08003aa1 	.word	0x08003aa1
 8004570:	08003ad1 	.word	0x08003ad1
 8004574:	08003ae1 	.word	0x08003ae1
 8004578:	08003b11 	.word	0x08003b11
 800457c:	08004795 	.word	0x08004795
 8004580:	080047a5 	.word	0x080047a5
 8004584:	080047b5 	.word	0x080047b5
 8004588:	080047c5 	.word	0x080047c5

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	223c      	movs	r2, #60	@ 0x3c
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e050      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	223c      	movs	r2, #60	@ 0x3c
 80045a8:	2101      	movs	r1, #1
 80045aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223d      	movs	r2, #61	@ 0x3d
 80045b0:	2102      	movs	r1, #2
 80045b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a21      	ldr	r2, [pc, #132]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a20      	ldr	r2, [pc, #128]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2270      	movs	r2, #112	@ 0x70
 80045e4:	4393      	bics	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a14      	ldr	r2, [pc, #80]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00a      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	05db      	lsls	r3, r3, #23
 800460c:	429a      	cmp	r2, r3
 800460e:	d004      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a10      	ldr	r2, [pc, #64]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10c      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2280      	movs	r2, #128	@ 0x80
 800461e:	4393      	bics	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	223d      	movs	r2, #61	@ 0x3d
 8004638:	2101      	movs	r1, #1
 800463a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	223c      	movs	r2, #60	@ 0x3c
 8004640:	2100      	movs	r1, #0
 8004642:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	40012c00 	.word	0x40012c00
 8004654:	ff0fffff 	.word	0xff0fffff
 8004658:	40000400 	.word	0x40000400

0800465c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	223c      	movs	r2, #60	@ 0x3c
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004674:	2302      	movs	r3, #2
 8004676:	e06f      	b.n	8004758 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	223c      	movs	r2, #60	@ 0x3c
 800467c:	2101      	movs	r1, #1
 800467e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	22ff      	movs	r2, #255	@ 0xff
 8004684:	4393      	bics	r3, r2
 8004686:	001a      	movs	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a33      	ldr	r2, [pc, #204]	@ (8004760 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004694:	401a      	ands	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a30      	ldr	r2, [pc, #192]	@ (8004764 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80046a2:	401a      	ands	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004768 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80046b0:	401a      	ands	r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80046be:	401a      	ands	r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80046cc:	401a      	ands	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a26      	ldr	r2, [pc, #152]	@ (8004774 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80046da:	401a      	ands	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a24      	ldr	r2, [pc, #144]	@ (8004778 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80046e8:	401a      	ands	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a21      	ldr	r2, [pc, #132]	@ (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80046f8:	401a      	ands	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d11c      	bne.n	8004746 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004710:	401a      	ands	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	051b      	lsls	r3, r3, #20
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a1a      	ldr	r2, [pc, #104]	@ (8004788 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004720:	401a      	ands	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a17      	ldr	r2, [pc, #92]	@ (800478c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800472e:	401a      	ands	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a15      	ldr	r2, [pc, #84]	@ (8004790 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800473c:	401a      	ands	r2, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	223c      	movs	r2, #60	@ 0x3c
 8004752:	2100      	movs	r1, #0
 8004754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b004      	add	sp, #16
 800475e:	bd80      	pop	{r7, pc}
 8004760:	fffffcff 	.word	0xfffffcff
 8004764:	fffffbff 	.word	0xfffffbff
 8004768:	fffff7ff 	.word	0xfffff7ff
 800476c:	ffffefff 	.word	0xffffefff
 8004770:	ffffdfff 	.word	0xffffdfff
 8004774:	ffffbfff 	.word	0xffffbfff
 8004778:	fff0ffff 	.word	0xfff0ffff
 800477c:	efffffff 	.word	0xefffffff
 8004780:	40012c00 	.word	0x40012c00
 8004784:	ff0fffff 	.word	0xff0fffff
 8004788:	feffffff 	.word	0xfeffffff
 800478c:	fdffffff 	.word	0xfdffffff
 8004790:	dfffffff 	.word	0xdfffffff

08004794 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800479c:	46c0      	nop			@ (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80047ac:	46c0      	nop			@ (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b002      	add	sp, #8
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047bc:	46c0      	nop			@ (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e046      	b.n	8004874 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2288      	movs	r2, #136	@ 0x88
 80047ea:	589b      	ldr	r3, [r3, r2]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2284      	movs	r2, #132	@ 0x84
 80047f4:	2100      	movs	r1, #0
 80047f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fc fc7a 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2288      	movs	r2, #136	@ 0x88
 8004804:	2124      	movs	r1, #36	@ 0x24
 8004806:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	438a      	bics	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 faa4 	bl	8004d70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 f828 	bl	8004880 <UART_SetConfig>
 8004830:	0003      	movs	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e01c      	b.n	8004874 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	490d      	ldr	r1, [pc, #52]	@ (800487c <HAL_UART_Init+0xa8>)
 8004846:	400a      	ands	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	212a      	movs	r1, #42	@ 0x2a
 8004856:	438a      	bics	r2, r1
 8004858:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2101      	movs	r1, #1
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 fb33 	bl	8004ed8 <UART_CheckIdleState>
 8004872:	0003      	movs	r3, r0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}
 800487c:	ffffb7ff 	.word	0xffffb7ff

08004880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	b5b0      	push	{r4, r5, r7, lr}
 8004882:	b090      	sub	sp, #64	@ 0x40
 8004884:	af00      	add	r7, sp, #0
 8004886:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004888:	231a      	movs	r3, #26
 800488a:	2220      	movs	r2, #32
 800488c:	189b      	adds	r3, r3, r2
 800488e:	19db      	adds	r3, r3, r7
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4ac4      	ldr	r2, [pc, #784]	@ (8004bc4 <UART_SetConfig+0x344>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	0019      	movs	r1, r3
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048be:	430b      	orrs	r3, r1
 80048c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4abf      	ldr	r2, [pc, #764]	@ (8004bc8 <UART_SetConfig+0x348>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	0018      	movs	r0, r3
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	68d9      	ldr	r1, [r3, #12]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	0003      	movs	r3, r0
 80048d8:	430b      	orrs	r3, r1
 80048da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4ab9      	ldr	r2, [pc, #740]	@ (8004bcc <UART_SetConfig+0x34c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048f2:	4313      	orrs	r3, r2
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4ab4      	ldr	r2, [pc, #720]	@ (8004bd0 <UART_SetConfig+0x350>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004908:	430b      	orrs	r3, r1
 800490a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	220f      	movs	r2, #15
 8004914:	4393      	bics	r3, r2
 8004916:	0018      	movs	r0, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	0003      	movs	r3, r0
 8004922:	430b      	orrs	r3, r1
 8004924:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4aaa      	ldr	r2, [pc, #680]	@ (8004bd4 <UART_SetConfig+0x354>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d131      	bne.n	8004994 <UART_SetConfig+0x114>
 8004930:	4ba9      	ldr	r3, [pc, #676]	@ (8004bd8 <UART_SetConfig+0x358>)
 8004932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004934:	2203      	movs	r2, #3
 8004936:	4013      	ands	r3, r2
 8004938:	2b03      	cmp	r3, #3
 800493a:	d01d      	beq.n	8004978 <UART_SetConfig+0xf8>
 800493c:	d823      	bhi.n	8004986 <UART_SetConfig+0x106>
 800493e:	2b02      	cmp	r3, #2
 8004940:	d00c      	beq.n	800495c <UART_SetConfig+0xdc>
 8004942:	d820      	bhi.n	8004986 <UART_SetConfig+0x106>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <UART_SetConfig+0xce>
 8004948:	2b01      	cmp	r3, #1
 800494a:	d00e      	beq.n	800496a <UART_SetConfig+0xea>
 800494c:	e01b      	b.n	8004986 <UART_SetConfig+0x106>
 800494e:	231b      	movs	r3, #27
 8004950:	2220      	movs	r2, #32
 8004952:	189b      	adds	r3, r3, r2
 8004954:	19db      	adds	r3, r3, r7
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e071      	b.n	8004a40 <UART_SetConfig+0x1c0>
 800495c:	231b      	movs	r3, #27
 800495e:	2220      	movs	r2, #32
 8004960:	189b      	adds	r3, r3, r2
 8004962:	19db      	adds	r3, r3, r7
 8004964:	2202      	movs	r2, #2
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e06a      	b.n	8004a40 <UART_SetConfig+0x1c0>
 800496a:	231b      	movs	r3, #27
 800496c:	2220      	movs	r2, #32
 800496e:	189b      	adds	r3, r3, r2
 8004970:	19db      	adds	r3, r3, r7
 8004972:	2204      	movs	r2, #4
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e063      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004978:	231b      	movs	r3, #27
 800497a:	2220      	movs	r2, #32
 800497c:	189b      	adds	r3, r3, r2
 800497e:	19db      	adds	r3, r3, r7
 8004980:	2208      	movs	r2, #8
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	e05c      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004986:	231b      	movs	r3, #27
 8004988:	2220      	movs	r2, #32
 800498a:	189b      	adds	r3, r3, r2
 800498c:	19db      	adds	r3, r3, r7
 800498e:	2210      	movs	r2, #16
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e055      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a90      	ldr	r2, [pc, #576]	@ (8004bdc <UART_SetConfig+0x35c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d106      	bne.n	80049ac <UART_SetConfig+0x12c>
 800499e:	231b      	movs	r3, #27
 80049a0:	2220      	movs	r2, #32
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	19db      	adds	r3, r3, r7
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e049      	b.n	8004a40 <UART_SetConfig+0x1c0>
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a86      	ldr	r2, [pc, #536]	@ (8004bcc <UART_SetConfig+0x34c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d13e      	bne.n	8004a34 <UART_SetConfig+0x1b4>
 80049b6:	4b88      	ldr	r3, [pc, #544]	@ (8004bd8 <UART_SetConfig+0x358>)
 80049b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ba:	23c0      	movs	r3, #192	@ 0xc0
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4013      	ands	r3, r2
 80049c0:	22c0      	movs	r2, #192	@ 0xc0
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d027      	beq.n	8004a18 <UART_SetConfig+0x198>
 80049c8:	22c0      	movs	r2, #192	@ 0xc0
 80049ca:	0112      	lsls	r2, r2, #4
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d82a      	bhi.n	8004a26 <UART_SetConfig+0x1a6>
 80049d0:	2280      	movs	r2, #128	@ 0x80
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d011      	beq.n	80049fc <UART_SetConfig+0x17c>
 80049d8:	2280      	movs	r2, #128	@ 0x80
 80049da:	0112      	lsls	r2, r2, #4
 80049dc:	4293      	cmp	r3, r2
 80049de:	d822      	bhi.n	8004a26 <UART_SetConfig+0x1a6>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <UART_SetConfig+0x16e>
 80049e4:	2280      	movs	r2, #128	@ 0x80
 80049e6:	00d2      	lsls	r2, r2, #3
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <UART_SetConfig+0x18a>
 80049ec:	e01b      	b.n	8004a26 <UART_SetConfig+0x1a6>
 80049ee:	231b      	movs	r3, #27
 80049f0:	2220      	movs	r2, #32
 80049f2:	189b      	adds	r3, r3, r2
 80049f4:	19db      	adds	r3, r3, r7
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e021      	b.n	8004a40 <UART_SetConfig+0x1c0>
 80049fc:	231b      	movs	r3, #27
 80049fe:	2220      	movs	r2, #32
 8004a00:	189b      	adds	r3, r3, r2
 8004a02:	19db      	adds	r3, r3, r7
 8004a04:	2202      	movs	r2, #2
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	e01a      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004a0a:	231b      	movs	r3, #27
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	2204      	movs	r2, #4
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e013      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004a18:	231b      	movs	r3, #27
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	2208      	movs	r2, #8
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e00c      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004a26:	231b      	movs	r3, #27
 8004a28:	2220      	movs	r2, #32
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	2210      	movs	r2, #16
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e005      	b.n	8004a40 <UART_SetConfig+0x1c0>
 8004a34:	231b      	movs	r3, #27
 8004a36:	2220      	movs	r2, #32
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	19db      	adds	r3, r3, r7
 8004a3c:	2210      	movs	r2, #16
 8004a3e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a61      	ldr	r2, [pc, #388]	@ (8004bcc <UART_SetConfig+0x34c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d000      	beq.n	8004a4c <UART_SetConfig+0x1cc>
 8004a4a:	e092      	b.n	8004b72 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a4c:	231b      	movs	r3, #27
 8004a4e:	2220      	movs	r2, #32
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	19db      	adds	r3, r3, r7
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d015      	beq.n	8004a86 <UART_SetConfig+0x206>
 8004a5a:	dc18      	bgt.n	8004a8e <UART_SetConfig+0x20e>
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d00d      	beq.n	8004a7c <UART_SetConfig+0x1fc>
 8004a60:	dc15      	bgt.n	8004a8e <UART_SetConfig+0x20e>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <UART_SetConfig+0x1ec>
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d005      	beq.n	8004a76 <UART_SetConfig+0x1f6>
 8004a6a:	e010      	b.n	8004a8e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fe f8cc 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004a70:	0003      	movs	r3, r0
 8004a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a74:	e014      	b.n	8004aa0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a76:	4b5a      	ldr	r3, [pc, #360]	@ (8004be0 <UART_SetConfig+0x360>)
 8004a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a7a:	e011      	b.n	8004aa0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7c:	f7fe f838 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8004a80:	0003      	movs	r3, r0
 8004a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a84:	e00c      	b.n	8004aa0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a8c:	e008      	b.n	8004aa0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a92:	231a      	movs	r3, #26
 8004a94:	2220      	movs	r2, #32
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	19db      	adds	r3, r3, r7
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
        break;
 8004a9e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d100      	bne.n	8004aa8 <UART_SetConfig+0x228>
 8004aa6:	e147      	b.n	8004d38 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aac:	4b4d      	ldr	r3, [pc, #308]	@ (8004be4 <UART_SetConfig+0x364>)
 8004aae:	0052      	lsls	r2, r2, #1
 8004ab0:	5ad3      	ldrh	r3, [r2, r3]
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004ab6:	f7fb fb25 	bl	8000104 <__udivsi3>
 8004aba:	0003      	movs	r3, r0
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d906      	bls.n	8004ae8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004ada:	231a      	movs	r3, #26
 8004adc:	2220      	movs	r2, #32
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	19db      	adds	r3, r3, r7
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e127      	b.n	8004d38 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af4:	4b3b      	ldr	r3, [pc, #236]	@ (8004be4 <UART_SetConfig+0x364>)
 8004af6:	0052      	lsls	r2, r2, #1
 8004af8:	5ad3      	ldrh	r3, [r2, r3]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	69b8      	ldr	r0, [r7, #24]
 8004b06:	69f9      	ldr	r1, [r7, #28]
 8004b08:	f7fb fb88 	bl	800021c <__aeabi_uldivmod>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	000b      	movs	r3, r1
 8004b10:	0e11      	lsrs	r1, r2, #24
 8004b12:	021d      	lsls	r5, r3, #8
 8004b14:	430d      	orrs	r5, r1
 8004b16:	0214      	lsls	r4, r2, #8
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	1900      	adds	r0, r0, r4
 8004b2a:	4169      	adcs	r1, r5
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f7fb fb6f 	bl	800021c <__aeabi_uldivmod>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	000b      	movs	r3, r1
 8004b42:	0013      	movs	r3, r2
 8004b44:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b48:	23c0      	movs	r3, #192	@ 0xc0
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d309      	bcc.n	8004b64 <UART_SetConfig+0x2e4>
 8004b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	035b      	lsls	r3, r3, #13
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d204      	bcs.n	8004b64 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	e0e9      	b.n	8004d38 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b64:	231a      	movs	r3, #26
 8004b66:	2220      	movs	r2, #32
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	19db      	adds	r3, r3, r7
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e0e2      	b.n	8004d38 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d000      	beq.n	8004b80 <UART_SetConfig+0x300>
 8004b7e:	e083      	b.n	8004c88 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004b80:	231b      	movs	r3, #27
 8004b82:	2220      	movs	r2, #32
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	19db      	adds	r3, r3, r7
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d015      	beq.n	8004bba <UART_SetConfig+0x33a>
 8004b8e:	dc2b      	bgt.n	8004be8 <UART_SetConfig+0x368>
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d00d      	beq.n	8004bb0 <UART_SetConfig+0x330>
 8004b94:	dc28      	bgt.n	8004be8 <UART_SetConfig+0x368>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <UART_SetConfig+0x320>
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d005      	beq.n	8004baa <UART_SetConfig+0x32a>
 8004b9e:	e023      	b.n	8004be8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe f832 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ba8:	e027      	b.n	8004bfa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <UART_SetConfig+0x360>)
 8004bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bae:	e024      	b.n	8004bfa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb0:	f7fd ff9e 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bb8:	e01f      	b.n	8004bfa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bc0:	e01b      	b.n	8004bfa <UART_SetConfig+0x37a>
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	cfff69f3 	.word	0xcfff69f3
 8004bc8:	ffffcfff 	.word	0xffffcfff
 8004bcc:	40008000 	.word	0x40008000
 8004bd0:	11fff4ff 	.word	0x11fff4ff
 8004bd4:	40013800 	.word	0x40013800
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40004400 	.word	0x40004400
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	08005350 	.word	0x08005350
      default:
        pclk = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004bec:	231a      	movs	r3, #26
 8004bee:	2220      	movs	r2, #32
 8004bf0:	189b      	adds	r3, r3, r2
 8004bf2:	19db      	adds	r3, r3, r7
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
        break;
 8004bf8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d100      	bne.n	8004c02 <UART_SetConfig+0x382>
 8004c00:	e09a      	b.n	8004d38 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c06:	4b58      	ldr	r3, [pc, #352]	@ (8004d68 <UART_SetConfig+0x4e8>)
 8004c08:	0052      	lsls	r2, r2, #1
 8004c0a:	5ad3      	ldrh	r3, [r2, r3]
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004c10:	f7fb fa78 	bl	8000104 <__udivsi3>
 8004c14:	0003      	movs	r3, r0
 8004c16:	005a      	lsls	r2, r3, #1
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	18d2      	adds	r2, r2, r3
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	0019      	movs	r1, r3
 8004c26:	0010      	movs	r0, r2
 8004c28:	f7fb fa6c 	bl	8000104 <__udivsi3>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d921      	bls.n	8004c7a <UART_SetConfig+0x3fa>
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	025b      	lsls	r3, r3, #9
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d21c      	bcs.n	8004c7a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	200e      	movs	r0, #14
 8004c46:	2420      	movs	r4, #32
 8004c48:	1903      	adds	r3, r0, r4
 8004c4a:	19db      	adds	r3, r3, r7
 8004c4c:	210f      	movs	r1, #15
 8004c4e:	438a      	bics	r2, r1
 8004c50:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2207      	movs	r2, #7
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	1903      	adds	r3, r0, r4
 8004c60:	19db      	adds	r3, r3, r7
 8004c62:	1902      	adds	r2, r0, r4
 8004c64:	19d2      	adds	r2, r2, r7
 8004c66:	8812      	ldrh	r2, [r2, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1902      	adds	r2, r0, r4
 8004c72:	19d2      	adds	r2, r2, r7
 8004c74:	8812      	ldrh	r2, [r2, #0]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e05e      	b.n	8004d38 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7a:	231a      	movs	r3, #26
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	19db      	adds	r3, r3, r7
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e057      	b.n	8004d38 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c88:	231b      	movs	r3, #27
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	19db      	adds	r3, r3, r7
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d015      	beq.n	8004cc2 <UART_SetConfig+0x442>
 8004c96:	dc18      	bgt.n	8004cca <UART_SetConfig+0x44a>
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d00d      	beq.n	8004cb8 <UART_SetConfig+0x438>
 8004c9c:	dc15      	bgt.n	8004cca <UART_SetConfig+0x44a>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <UART_SetConfig+0x428>
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d005      	beq.n	8004cb2 <UART_SetConfig+0x432>
 8004ca6:	e010      	b.n	8004cca <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fd ffae 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004cac:	0003      	movs	r3, r0
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb0:	e014      	b.n	8004cdc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d6c <UART_SetConfig+0x4ec>)
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb6:	e011      	b.n	8004cdc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb8:	f7fd ff1a 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cc0:	e00c      	b.n	8004cdc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	2380      	movs	r3, #128	@ 0x80
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cc8:	e008      	b.n	8004cdc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004cce:	231a      	movs	r3, #26
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	19db      	adds	r3, r3, r7
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
        break;
 8004cda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d02a      	beq.n	8004d38 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce6:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <UART_SetConfig+0x4e8>)
 8004ce8:	0052      	lsls	r2, r2, #1
 8004cea:	5ad3      	ldrh	r3, [r2, r3]
 8004cec:	0019      	movs	r1, r3
 8004cee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004cf0:	f7fb fa08 	bl	8000104 <__udivsi3>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	18d2      	adds	r2, r2, r3
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	0019      	movs	r1, r3
 8004d06:	0010      	movs	r0, r2
 8004d08:	f7fb f9fc 	bl	8000104 <__udivsi3>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	d90a      	bls.n	8004d2c <UART_SetConfig+0x4ac>
 8004d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	025b      	lsls	r3, r3, #9
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d205      	bcs.n	8004d2c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	e005      	b.n	8004d38 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2c:	231a      	movs	r3, #26
 8004d2e:	2220      	movs	r2, #32
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	19db      	adds	r3, r3, r7
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	226a      	movs	r2, #106	@ 0x6a
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	2268      	movs	r2, #104	@ 0x68
 8004d44:	2101      	movs	r1, #1
 8004d46:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	2200      	movs	r2, #0
 8004d52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d54:	231a      	movs	r3, #26
 8004d56:	2220      	movs	r2, #32
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	19db      	adds	r3, r3, r7
 8004d5c:	781b      	ldrb	r3, [r3, #0]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b010      	add	sp, #64	@ 0x40
 8004d64:	bdb0      	pop	{r4, r5, r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	08005350 	.word	0x08005350
 8004d6c:	00f42400 	.word	0x00f42400

08004d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <UART_AdvFeatureConfig+0x144>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4a43      	ldr	r2, [pc, #268]	@ (8004eb8 <UART_AdvFeatureConfig+0x148>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004ebc <UART_AdvFeatureConfig+0x14c>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	2204      	movs	r2, #4
 8004de4:	4013      	ands	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4a34      	ldr	r2, [pc, #208]	@ (8004ec0 <UART_AdvFeatureConfig+0x150>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	2210      	movs	r2, #16
 8004e06:	4013      	ands	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec4 <UART_AdvFeatureConfig+0x154>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e26:	2220      	movs	r2, #32
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4a25      	ldr	r2, [pc, #148]	@ (8004ec8 <UART_AdvFeatureConfig+0x158>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	2240      	movs	r2, #64	@ 0x40
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <UART_AdvFeatureConfig+0x15c>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	0019      	movs	r1, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	035b      	lsls	r3, r3, #13
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d10b      	bne.n	8004e8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4a15      	ldr	r2, [pc, #84]	@ (8004ed0 <UART_AdvFeatureConfig+0x160>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	2280      	movs	r2, #128	@ 0x80
 8004e90:	4013      	ands	r3, r2
 8004e92:	d00b      	beq.n	8004eac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed4 <UART_AdvFeatureConfig+0x164>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	ffff7fff 	.word	0xffff7fff
 8004eb8:	fffdffff 	.word	0xfffdffff
 8004ebc:	fffeffff 	.word	0xfffeffff
 8004ec0:	fffbffff 	.word	0xfffbffff
 8004ec4:	ffffefff 	.word	0xffffefff
 8004ec8:	ffffdfff 	.word	0xffffdfff
 8004ecc:	ffefffff 	.word	0xffefffff
 8004ed0:	ff9fffff 	.word	0xff9fffff
 8004ed4:	fff7ffff 	.word	0xfff7ffff

08004ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b092      	sub	sp, #72	@ 0x48
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2290      	movs	r2, #144	@ 0x90
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee8:	f7fc fa44 	bl	8001374 <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d12d      	bne.n	8004f5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f00:	2280      	movs	r2, #128	@ 0x80
 8004f02:	0391      	lsls	r1, r2, #14
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4a47      	ldr	r2, [pc, #284]	@ (8005024 <UART_CheckIdleState+0x14c>)
 8004f08:	9200      	str	r2, [sp, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f000 f88e 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004f10:	1e03      	subs	r3, r0, #0
 8004f12:	d022      	beq.n	8004f5a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f14:	f3ef 8310 	mrs	r3, PRIMASK
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f1e:	2301      	movs	r3, #1
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			@ (mov r8, r8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2180      	movs	r1, #128	@ 0x80
 8004f36:	438a      	bics	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f40:	f383 8810 	msr	PRIMASK, r3
}
 8004f44:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2288      	movs	r2, #136	@ 0x88
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2284      	movs	r2, #132	@ 0x84
 8004f52:	2100      	movs	r1, #0
 8004f54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e060      	b.n	800501c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2204      	movs	r2, #4
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d146      	bne.n	8004ff6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6a:	2280      	movs	r2, #128	@ 0x80
 8004f6c:	03d1      	lsls	r1, r2, #15
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <UART_CheckIdleState+0x14c>)
 8004f72:	9200      	str	r2, [sp, #0]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f000 f859 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004f7a:	1e03      	subs	r3, r0, #0
 8004f7c:	d03b      	beq.n	8004ff6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f88:	2301      	movs	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4922      	ldr	r1, [pc, #136]	@ (8005028 <UART_CheckIdleState+0x150>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f383 8810 	msr	PRIMASK, r3
}
 8004fae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	438a      	bics	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	228c      	movs	r2, #140	@ 0x8c
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2284      	movs	r2, #132	@ 0x84
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e012      	b.n	800501c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2288      	movs	r2, #136	@ 0x88
 8004ffa:	2120      	movs	r1, #32
 8004ffc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	228c      	movs	r2, #140	@ 0x8c
 8005002:	2120      	movs	r1, #32
 8005004:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2284      	movs	r2, #132	@ 0x84
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	0018      	movs	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	b010      	add	sp, #64	@ 0x40
 8005022:	bd80      	pop	{r7, pc}
 8005024:	01ffffff 	.word	0x01ffffff
 8005028:	fffffedf 	.word	0xfffffedf

0800502c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503c:	e051      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	3301      	adds	r3, #1
 8005042:	d04e      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fc f996 	bl	8001374 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e051      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2204      	movs	r2, #4
 8005066:	4013      	ands	r3, r2
 8005068:	d03b      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b80      	cmp	r3, #128	@ 0x80
 800506e:	d038      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b40      	cmp	r3, #64	@ 0x40
 8005074:	d035      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2208      	movs	r2, #8
 800507e:	4013      	ands	r3, r2
 8005080:	2b08      	cmp	r3, #8
 8005082:	d111      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0018      	movs	r0, r3
 8005090:	f000 f83c 	bl	800510c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2290      	movs	r2, #144	@ 0x90
 8005098:	2108      	movs	r1, #8
 800509a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2284      	movs	r2, #132	@ 0x84
 80050a0:	2100      	movs	r1, #0
 80050a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e02c      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	2380      	movs	r3, #128	@ 0x80
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	401a      	ands	r2, r3
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d112      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2280      	movs	r2, #128	@ 0x80
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 f81f 	bl	800510c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2290      	movs	r2, #144	@ 0x90
 80050d2:	2120      	movs	r1, #32
 80050d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2284      	movs	r2, #132	@ 0x84
 80050da:	2100      	movs	r1, #0
 80050dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e00f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	425a      	negs	r2, r3
 80050f2:	4153      	adcs	r3, r2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	001a      	movs	r2, r3
 80050f8:	1dfb      	adds	r3, r7, #7
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d09e      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b004      	add	sp, #16
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08e      	sub	sp, #56	@ 0x38
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	617b      	str	r3, [r7, #20]
  return(result);
 800511a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
 800511e:	2301      	movs	r3, #1
 8005120:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4926      	ldr	r1, [pc, #152]	@ (80051d0 <UART_EndRxTransfer+0xc4>)
 8005136:	400a      	ands	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005146:	f3ef 8310 	mrs	r3, PRIMASK
 800514a:	623b      	str	r3, [r7, #32]
  return(result);
 800514c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800514e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005150:	2301      	movs	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	f383 8810 	msr	PRIMASK, r3
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	491b      	ldr	r1, [pc, #108]	@ (80051d4 <UART_EndRxTransfer+0xc8>)
 8005168:	400a      	ands	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d118      	bne.n	80051b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005180:	f3ef 8310 	mrs	r3, PRIMASK
 8005184:	60bb      	str	r3, [r7, #8]
  return(result);
 8005186:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800518a:	2301      	movs	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f383 8810 	msr	PRIMASK, r3
}
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2110      	movs	r1, #16
 80051a2:	438a      	bics	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f383 8810 	msr	PRIMASK, r3
}
 80051b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	228c      	movs	r2, #140	@ 0x8c
 80051b6:	2120      	movs	r1, #32
 80051b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b00e      	add	sp, #56	@ 0x38
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	fffffedf 	.word	0xfffffedf
 80051d4:	effffffe 	.word	0xeffffffe

080051d8 <memset>:
 80051d8:	0003      	movs	r3, r0
 80051da:	1882      	adds	r2, r0, r2
 80051dc:	4293      	cmp	r3, r2
 80051de:	d100      	bne.n	80051e2 <memset+0xa>
 80051e0:	4770      	bx	lr
 80051e2:	7019      	strb	r1, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	e7f9      	b.n	80051dc <memset+0x4>

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	2600      	movs	r6, #0
 80051ec:	4c0c      	ldr	r4, [pc, #48]	@ (8005220 <__libc_init_array+0x38>)
 80051ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005224 <__libc_init_array+0x3c>)
 80051f0:	1b64      	subs	r4, r4, r5
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	2600      	movs	r6, #0
 80051fa:	f000 f819 	bl	8005230 <_init>
 80051fe:	4c0a      	ldr	r4, [pc, #40]	@ (8005228 <__libc_init_array+0x40>)
 8005200:	4d0a      	ldr	r5, [pc, #40]	@ (800522c <__libc_init_array+0x44>)
 8005202:	1b64      	subs	r4, r4, r5
 8005204:	10a4      	asrs	r4, r4, #2
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	00b3      	lsls	r3, r6, #2
 800520e:	58eb      	ldr	r3, [r5, r3]
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	00b3      	lsls	r3, r6, #2
 8005218:	58eb      	ldr	r3, [r5, r3]
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	08005370 	.word	0x08005370
 8005224:	08005370 	.word	0x08005370
 8005228:	08005374 	.word	0x08005374
 800522c:	08005370 	.word	0x08005370

08005230 <_init>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr

0800523c <_fini>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005242:	bc08      	pop	{r3}
 8005244:	469e      	mov	lr, r3
 8005246:	4770      	bx	lr
